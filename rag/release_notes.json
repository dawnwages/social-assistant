[
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Tab Completion  \nThe editor now supports `kbstyle(Tab)` completions. You can enable it with the `editor.tabCompletion` setting. After typing the prefix of a snippet, press `kbstyle(Tab)` to insert it.  \n![tab completions](images/July_2016/tabCompletion.gif)  \nNote that quick suggestions and `kbstyle(Tab)` completion might interfere because the suggestions widget also reacts to `kbstyle(Tab)`.  \nEither disable quick suggestions:  \n```json\n{\n\"editor.quickSuggestions\": false\n}\n```  \nor remove snippets from the suggest widget:  \n```json\n{\n\"editor.snippetSuggestions\": \"none\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/July_2016#_tab-completion",
    "id": 0
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n## Workbench  \n### Editor Actions  \nWhen we added Tabs (tabbed headings), we put editor actions (**Switch to Changes View**, **Open Preview**) into the context menu to gain some space. User feedback was clear that this made the actions much harder to discover and so we have added them back to the title header.  \n![Menu Group Sorting](images/July_2016/editor-actions-title.png)",
    "url": "https://code.visualstudio.com/updates/July_2016#_editor-actions",
    "id": 1
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Drag and Drop  \nYou can now drag and drop Tabs (tabbed headings) across windows. You can now also drop a folder into VS Code to open it.",
    "url": "https://code.visualstudio.com/updates/July_2016#_drag-and-drop",
    "id": 2
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Git commit message template  \nIf you have a message template configured in your Git settings, then the Git view in VS Code will show that message in the commit message box by default. Thanks to [William Raiford](https://github.com/bill-mybiz) for contributing this feature.",
    "url": "https://code.visualstudio.com/updates/July_2016#_git-commit-message-template",
    "id": 3
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Faster Quick Open  \nWe made the first steps in improving the performance of **Quick Open**, particularly for large workspaces such as [Chromium](https://www.chromium.org). On Mac (`kbstyle(\u2318+P)`) and on Linux (`kbstyle(Ctrl+P)`), **Quick Open** on a Chromium workspace now takes less than half the time it took before. On Windows (`kbstyle(Ctrl+P)`), it originally took twice as long as on Mac and now it is just as fast. We are not finished, expect more performance gains in the next iteration.",
    "url": "https://code.visualstudio.com/updates/July_2016#_faster-quick-open",
    "id": 4
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Integrated Terminal  \nThe integrated terminal had several changes related to polish and compatibility this release:  \n- **IME support**: Input Method Editor (IME) support has been implemented, allowing input of CJK and Indic characters.  \n![IME support in Visual Studio Code](images/July_2016/terminal_ime.png)  \n- **Copy and paste support on Windows and Linux**: Proper copy and paste support has arrived for Windows and Linux within the terminal. The default keybindings are `kb(workbench.action.terminal.copySelection)` and `kb(workbench.action.terminal.paste)` respectively. Note that these command keybindings are not assigned by default on Mac but you can easily add [your own keybindings](/docs/getstarted/keybindings.md).\n- **Context menu**: A right-click context menu has been added with the options **New Terminal**, **Copy** and **Paste**.\n- **Accessibility**: It's now possible to escape focus in the terminal by pressing `kb(editor.action.toggleTabFocusMode)` to enable `kbstyle(Tab)` focus mode, just like in the editor. When this mode is enabled, `kbstyle(Tab)` and `kbstyle(Shift+Tab)` will not be passed to the terminal but instead change the element that is being focused.",
    "url": "https://code.visualstudio.com/updates/July_2016#_integrated-terminal",
    "id": 5
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n## Languages  \n### JSON completions  \nThere has been some small improvements for the JSON completions:  \n- In schema based JSON documents, we offer completions for empty arrays, objects and string if we know the type of a property but the schema doesn't describe any defaults.\n- Completion support for the `$schema` property and values.",
    "url": "https://code.visualstudio.com/updates/July_2016#_json-completions",
    "id": 6
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n## Debugging  \n### Restart Frame  \nVS Code now supports restarting execution at a stack frame. This can be useful in situations where you have found a problem in your source code and you want to rerun a small portion of the code with modified input values. Stopping and then restarting the full debug session can be very time-consuming. The **Restart Frame** action allows you to re-enter the current function after you have changed variables with the **Set Value** action:  \n![Restart Frame](images/July_2016/restartFrame.gif)  \nNote that **Restart Frame** won't unroll any state changes, so it may not always work as expected.  \n**Restart Frame** is only available if the underlying debug extension supports it and currently only VS Code's built-in Node.js debugging does. Make sure to use a Node.js version >= 5.11 since earlier versions do not work in all situations.",
    "url": "https://code.visualstudio.com/updates/July_2016#_restart-frame",
    "id": 7
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Variable Paging  \nPreviously VS Code expected that large data structures like arrays were broken into \"chunks\" in a debug extension and consequently only a few debug extensions supported this useful feature. With this release, we have moved this functionality into the VS Code debugger front-end so that all debug extensions can easily benefit from this in the future.  \n![Variable Paging](images/July_2016/variablePaging.png)  \nSee section \"Debug Protocol Changes\" below for details of how a debug extension can make use of this.",
    "url": "https://code.visualstudio.com/updates/July_2016#_variable-paging",
    "id": 8
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Double Click Debug Toolbar Centers  \nDouble clicking on the Debug view toolbar drag icon will center the Debug toolbar. This makes it easy to restore the default state.",
    "url": "https://code.visualstudio.com/updates/July_2016#_double-click-debug-toolbar-centers",
    "id": 9
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n## Extension Authoring  \n### New settings to replace deprecated __characterPairSupport and __electricCharacterSupport.  \nThe deprecated configuration settings can now both be replaced by the `autoClosingPairs` setting in the language-configuration.json file in your extension. See [#9281](https://github.com/microsoft/vscode/issues/9281) for detailed instructions.",
    "url": "https://code.visualstudio.com/updates/July_2016#_new-settings-to-replace-deprecated-__characterpairsupport-and-__electriccharactersupport.",
    "id": 10
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Editor Commands  \nIn order to allow the [VIM extension](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim) to make good progress on their [roadmap](https://github.com/VSCodeVim/Vim/blob/master/ROADMAP.md) particularly on up-and-down motion and `kbstyle(Tab)` related commands, we added the following editor APIs:  \n- **Move cursor:** Moves the cursor to different logical positions in the editor - See [9143](https://github.com/microsoft/vscode/issues/9143).  \n```javascript\ncommands.executeCommand('cursorMove', {to: 'up', by: 'wrappedLine', value: '2'})\n```  \n- **Move active editor:** Moves the active editor across groups or across Tabs within a group - See [8234](https://github.com/microsoft/vscode/issues/8234#issuecomment-234573410).  \n```javascript\ncommands.executeCommand('moveActiveEditor', {to: 'left', by: 'tab', value: '3'})\n```",
    "url": "https://code.visualstudio.com/updates/July_2016#_editor-commands",
    "id": 11
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Sorting of groups  \nLast milestone, we added support to contribute menu items to different places in the editor. This milestone we refined sorting of groups. They are now sorted in lexicographical order with the following defaults/rules.  \nThe context menu of the editor has these default:  \n* `navigation` - The `navigation` group comes first in all cases.\n* `1_modification` - This group comes next and contains commands that modify your code.\n* `9_cutcopypaste` - The last default group with the basic editing commands.  \n![Menu Group Sorting](images/July_2016/groupSorting.png)  \nYou can add menu items to these groups or add new groups of menu items in between, below, or above. In this release, only the editor context menu allows this grouping control but it will soon be available for the editor title menu and the explorer context menu as well.",
    "url": "https://code.visualstudio.com/updates/July_2016#_sorting-of-groups",
    "id": 12
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### DocumentLinkProvider API  \nVS Code has a built in link detector that finds `http`, `https`, and `file` links to make them clickable in the editor. We have added new API that allows extension writers to add custom link detection logic. Implement a `DocumentLinkProvider` and use the [`registerDocumentLinkProvider`](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L3814) function to register it with the editor.",
    "url": "https://code.visualstudio.com/updates/July_2016#_documentlinkprovider-api",
    "id": 13
  },
  {
    "content": "See what is new in the Visual Studio Code July 2016 Release (1.4)  \n### Debug Extension Authoring: Additions to the Debug Protocol  \nThe [debug protocol](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts) has been extended in the following areas (and VS Code already provides the corresponding UI):  \n* **Restart Frame**: If a debug adapter returns the capability `supportsRestartFrame`, VS Code shows a **Restart Frame** action in the context menu of the **CALL STACK** view and calls the new `restartFrame` request upon execution of the **Restart Frame** action. The `restartFrame` request must result in a `StoppedEvent` so that the UI can be updated for the new location.\n* **Variable Paging**: 'Variables paging' adds support for paging variables and their children. The debugger UI in VS Code 1.4 uses this to present variables with many children with a better scalable (paged) UI and fetches the children in a piecemeal way. A debug adapter can find out whether the client supports variable paging by checking the value of the `supportsVariablePaging` client capability passed as an argument to the `initializeRequest`.<br>\nThrough the optional attributes `indexedVariables` and `namedVariables`, the debug adapter can return both the number of indexed properties (e.g. array slots) and named properties of a variable. These two properties can be returned in all places where a `variablesReference` property is returned, that is in the `Variables` and `Scope` data types and in the `evaluateRequest` response.<br>\nAdditional optional attributes have been added to the `variablesRequest` to give the VS Code debugger UI better control over what children of a variable to fetch. An attribute `filter` is used to limit the fetched children to either `indexed` or `named` and the attributes `start` and `count` are used to further limit the children to a certain range.\n* **Continued Event**: A debug adapter can now optionally send a `ContinueEvent` to the client to indicate that the execution of the debuggee has continued.\n* **Source request supports MIME type**: A debug adapter can now set a `mimeType` attribute on the `SourceRequest` response which a client can use to find a suitable editor.\n* **Variable Type client capability**: A debug adapter can find out whether the client shows the variable's type attribute in the UI by checking the value of\nthe `supportsVariableType` client capability passed as an argument to the `initializeRequest`.",
    "url": "https://code.visualstudio.com/updates/July_2016#_debug-extension-authoring:-additions-to-the-debug-protocol",
    "id": 14
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Open Editors View  \nThe new **OPEN EDITORS** view in the Explorer is the replacement to the previous **WORKING FILES** view.  \n![Open editors view](images/June_2016/open_editors.png)  \nThe **OPEN EDITORS** view is a visual representation of the editor (open file) stacks:  \n* Each editor group with the editors that belong to it is shown.\n* Clicking on an editor will make it active and open it in the corresponding group.\n* Top level actions to close all or save all open editors.\n* Editor level actions to close or save an editor.\n* Context menu actions provide more refined actions.\n* It is possible to drag and drop editors between editor groups or from the Explorer  \nYou can hide the **OPEN EDITORS** view by setting the number of visible items to 0, with `\"explorer.openEditors.visible\": 0`.  \n**Note:** Since the WORKING FILES view has been deleted, please refer to [this issue](https://github.com/microsoft/vscode/issues/6605) to get an overview of the new or changed command identifiers.",
    "url": "https://code.visualstudio.com/updates/June_2016#_open-editors-view",
    "id": 16
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### More on Editor Stacks  \nAs a preparation for enabling Tabs in the workbench, we revisited how you can interact with editors in VS Code. Many users coming from other tools were confused by some of the editor (open file) behavior in VS Code.  \nFor example:  \n* Closing a dirty editor (an editor with an unsaved file) did not prompt for saving.\n* Closing an editor, closed the entire group without revealing the previous editor.\n* The editor history showed a list of all editors ever opened and not a list of editors you opened in a group.\n* **WORKING FILES** view in the Explorer was a confusing concept.  \nWith editor **stacks**, we've tried to address these issues:  \n* You can open up to 3 **editor groups** side by side and each group contains a **stack of editors**.\n* Every time you open an editor, it is added to the top of the stack.\n* Closing an editor from a group reveals the editor that was previously opened in that group until the last editor closes and the group hides.\n* You get prompted to save for dirty editors.  \nUse `kb(workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup)` to bring up a list of most recently used editors of a group for navigation. Use the **View: Show All Editors** command to show a list of all open editors across all groups.  \n![Editor Stacks](images/June_2016/stacks.png)  \nNote that the behavior of editor stacks is independent from having Tabs enabled or not. You will benefit from these changes even if you don't want to use Tabs.  \n**Note:** Due to the large conceptual impact of editor stacks, many command ids have been renamed and new commands introduced. Please refer to [this issue](https://github.com/microsoft/vscode/issues/6605) that documents the changes. It also provides guidance if you liked the previous behavior and explains how to change key bindings back to the old behavior.",
    "url": "https://code.visualstudio.com/updates/June_2016#_more-on-editor-stacks",
    "id": 17
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### More powerful Drag and Drop  \nWith all the work on Tabs, we also looked at improving the Drag & Drop support in the editor. We always allowed you to drop files from outside VS Code into the editor to open the files and now there is a lot more that you can do:  \n#### Drop to Split  \nDrag some files to the left or right area of an editor to open it to the side of that editor. You can either drag from the Explorer or a Tab if Tabs are enabled.  \n![Drop to split](images/June_2016/dnd_editor.gif)  \n#### Drop Feedback  \nWhenever you are dragging files or a Tab over the editor area, you now get drop feedback to indicate the target position of the drop.  \n#### Drag from Explorer and Opened Editors view  \nYou can now drag a file or editor from the Explorer and the **OPEN EDITORS** view to the editor space to open it at a specific location.",
    "url": "https://code.visualstudio.com/updates/June_2016#_more-powerful-drag-and-drop",
    "id": 18
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Preview Editors  \nClosely related to editor stacks and Tabs are **preview editors**. If you are browsing many files, you might not want to see a Tab opened for each file you open. Preview editors help reduce the number of opened editors (and Tabs) by reusing the current editor. A file will open in preview mode if you open it by single clicking in the Explorer. As long as the editor stays in preview mode, other files will open in the same location as the preview editor.  \nCertain actions cause a preview editor to become a normal editor:  \n* When you modify the contents of a file, the editor will be kept open.\n* The same is true for when you double-click on a file in the Explorer or inside a Tab or move a file to a specific editor group.  \nPreview editors are indicated using an italic font style.  \n![Preview Editor](images/June_2016/preview_editor.png)  \nWe introduced new settings to control the behavior of preview editors:  \n* `workbench.editor.enablePreview` to globally enable or disable preview editors.\n* `workbench.editor.enablePreviewFromQuickOpen` to enable or disable preview editors when opened from quick box/quick open.",
    "url": "https://code.visualstudio.com/updates/June_2016#_preview-editors",
    "id": 19
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Integrated Terminal  \nThe integrated terminal that was introduced in VS Code 1.2.0 has seen many improvements this release, the primary one being the ability to launch and use multiple terminals at the same time. Terminal instances can be added by hitting the plus icon on the top-right of the **TERMINAL** panel or by triggering the `kb(workbench.action.terminal.new)` command. This creates another entry in the dropdown list that can be used to switch between them.  \n![Multiple terminal instances](images/June_2016/terminal_multiple_instances.png)  \nSeveral new commands were added to aid with management of the **TERMINAL** panel and its terminal instances.  \nThey are:  \n* `workbench.action.terminal.focus`: Focus the terminal. This is like toggle but focuses the terminal instead of hides it, if it is visible.\n* `workbench.action.terminal.focusNext`: Focuses the next terminal instance.\n* `workbench.action.terminal.focusPrevious`: Focuses the previous terminal instance.\n* `workbench.action.terminal.kill`: Remove the current terminal instance.  \nThe ability to run selected text in the current terminal has been added through the `workbench.action.terminal.runSelectedText` command.  \nTo use this command, select text in an editor and run the command via the **Command Palette**:  \n![Run selected text](images/June_2016/terminal_run_selected.png)  \n![Run selected text result](images/June_2016/terminal_run_selected_result.png)  \nThe following improvements were also added:  \n* Copy and paste on Linux and Windows is now available using `kbstyle(Ctrl+Insert)` and `kbstyle(Shift+Insert)` respectively. This is temporarily non-configurable until we can [route custom copy/paste keybindings](https://github.com/sourcelair/xterm.js/issues/118) to the xterm.js library.\n* CJK characters should now use the correct width.  Credit for this goes to [@jerch](https://github.com/jerch) in [this PR](https://github.com/sourcelair/xterm.js/pull/144).\n* Performance of the terminal has improved significantly and should no longer perform poorly when running commands that produce large output.\n* `kbstyle(Ctrl+Left)` and `kbstyle(Ctrl+Right)` now tells the underlying shell to jump over words in the input.\n* Terminal cursor blinking is now enabled by default. It shares the configuration value with the editor's `editor.cursorBlinking` setting.\n* A hollow cursor is shown when the terminal is not focused.\n* Terminal font size and line height can be customized via settings, thanks to a [PR](https://github.com/microsoft/vscode/pull/6998) from [@kisstkondoros](https://github.com/kisstkondoros).\n* Selection has been improved to now select the full line, contain no margin and also invert the text colors.\n![Terminal selection has been improved](images/June_2016/terminal_selection.png)\n* Arguments can be passed to the terminal shell on Linux and OS X using the `terminal.integrated.shellArgs.*` settings.",
    "url": "https://code.visualstudio.com/updates/June_2016#_integrated-terminal",
    "id": 20
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Command Palette: File: Open Recent in new Window  \nThe command **File: Open Recent** from the **Command Palette** makes it very easy to quickly switch between previously opened folders or files. Usually the selected file or folder would open in the running instance. In this release, we added support to open into a new window if you select an entry while having the `kbstyle(Ctrl)` (`kbstyle('Cmd')` on Mac) key pressed.",
    "url": "https://code.visualstudio.com/updates/June_2016#_command-palette:-file:-open-recent-in-new-window",
    "id": 21
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Restore Full screen  \nA new setting `window.restoreFullscreen` has been added to open VS Code in full screen if it was previously closed in full screen mode.",
    "url": "https://code.visualstudio.com/updates/June_2016#_restore-full-screen",
    "id": 22
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n## Editor  \n### Global Search and Replace  \n[Global Search and Replace](https://github.com/microsoft/vscode/issues/1690) was one of the most requested features from our users. With this release, we enhanced our Search view to include Replace functionality so that you can replace text across multiple files. You can replace in all files or pick file by file or result by result. You can also exclude results or files and then perform replace on the rest. The Search view gives you a nice preview and clicking on a pending change will bring up the Diff editor view showing the file before and after replace.  \n![Search and Replace](images/June_2016/searchAndReplace.png)  \nReplace functionality can be accessed:  \n* In the **Search View** by expanding the Search textbox\n* Using `kb(workbench.action.replaceInFiles)`, from the **Edit** | **Replace in Files** menu\n* Using **Replace in Files** command in the **Command Palette**  \n>**Note:** Since Search has a limitation of showing a maximum of 2048 results, Replace currently has the same limitation.",
    "url": "https://code.visualstudio.com/updates/June_2016#_global-search-and-replace",
    "id": 23
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Indent Guides  \nVS Code can now show indent guides, enabled with the `editor.renderIndentGuides` setting.  \n![Editor Indent Guides](images/June_2016/editor-indent-guides.jpg)",
    "url": "https://code.visualstudio.com/updates/June_2016#_indent-guides",
    "id": 24
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Suggestions for command identifiers  \nWhen authoring the `keybindings.json` file, you now get completions for the available commands.  \n![Command Completions](images/June_2016/commad_ids.png)",
    "url": "https://code.visualstudio.com/updates/June_2016#_suggestions-for-command-identifiers",
    "id": 25
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Editor Font Zooming with mouse wheel  \nThanks to [@kisstkondoros](https://github.com/kisstkondoros), with [PR #6990](https://github.com/microsoft/vscode/pull/6990), after setting `editor.mouseWheelZoom: true`, it is possible to change the font size of the editors by pressing `kbstyle(Ctrl)` (`kbstyle('Cmd')` on Mac) and scrolling with the mouse wheel:  \n![Mouse Wheel Zoom](images/June_2016/editor-mouse-wheel-zoom.gif)",
    "url": "https://code.visualstudio.com/updates/June_2016#_editor-font-zooming-with-mouse-wheel",
    "id": 26
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Multiline Find  \nWe have added support for multiline Find and Replace:  \n![Editor Indent Guides](images/June_2016/multiline-find.gif)",
    "url": "https://code.visualstudio.com/updates/June_2016#_multiline-find",
    "id": 27
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Emmet  \nThanks to some great support from Denis Malinochkin ([@mrmlnc](https://github.com/mrmlnc)) through Pull Requests and testing help, we are now covering many more Emmet features (Wrap with Abbreviation, Remove Tag, Update Tag, Balance, Toggle Comment, ...).",
    "url": "https://code.visualstudio.com/updates/June_2016#_emmet",
    "id": 28
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n## Languages  \n### Extract CSS/LESS/SCSS and JSON into extensions  \nThe CSS, LESS, and SCSS language support has been refactored to be regular VS Code extensions. As all these languages are based on the same code base, they share the same language server. The language server runs in a separate node process, using the [language server protocol](https://microsoft.github.io/language-server-protocol) to communicate with VS Code.",
    "url": "https://code.visualstudio.com/updates/June_2016#_extract-css/less/scss-and-json-into-extensions",
    "id": 29
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Extract Markdown into an extension  \nThe Markdown language support has been refactored to be a regular VS Code extension. It uses the Markdown TextMate grammar for syntax highlighting source and renders the Markdown as HTML using the [markdown-it library](https://github.com/markdown-it/markdown-it) which implements the [CommonMark Spec](https://spec.commonmark.org/0.25/).",
    "url": "https://code.visualstudio.com/updates/June_2016#_extract-markdown-into-an-extension",
    "id": 30
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Atom JavaScript grammar  \nAs an alternative to the built-in JavaScript grammar, you can now install the [Atom JavaScript grammar](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar). It differs from the built-in grammar in that it creates tokens for variable and function references which, if supported by the theme, can be colorized differently.",
    "url": "https://code.visualstudio.com/updates/June_2016#_atom-javascript-grammar",
    "id": 31
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n## Debugging  \n### Moveable Debug Toolbar  \nInitiated by this [user request](https://github.com/microsoft/vscode/issues/4580), it is now possible to drag the debug toolbar horizontally:  \n![Drag debug toolbar](images/June_2016/dnd_debug.gif)",
    "url": "https://code.visualstudio.com/updates/June_2016#_moveable-debug-toolbar",
    "id": 32
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Changing Variable Value  \nWe now support changing the value of simple variables if a debug extension supports this.  \nNode Debug is the first extension to do so:  \n![Drag debug toolbar](images/June_2016/set_variable_value.gif)  \nA simple variable is a leaf in the variables tree, e.g. a variable, an object property, or an array element.",
    "url": "https://code.visualstudio.com/updates/June_2016#_changing-variable-value",
    "id": 33
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Show Variable Type on Hover  \nIf a debug extension supports variable types, we now show the type when hovering over the variable name.",
    "url": "https://code.visualstudio.com/updates/June_2016#_show-variable-type-on-hover",
    "id": 34
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Step Back  \nIf a debug extension supports _step back_ we now expose a step back action and button:  \n![Step back](images/June_2016/step_back.png)",
    "url": "https://code.visualstudio.com/updates/June_2016#_step-back",
    "id": 35
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### OS specific launch configurations  \nInitiated by a [user request](https://github.com/microsoft/vscode/issues/1873), it is now possible to specify OS specific configurations inside a `launch.json`:  \n```json\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"runtimeExecutable\": \"mynode\",\n\"windows\": {\n\"runtimeExecutable\": \"mynode.exe\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/June_2016#_os-specific-launch-configurations",
    "id": 36
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n## Node.js Debugging  \n### Attach to Process  \nNode.js debugging now supports attaching to a Node.js process that has not been started in debug mode. This can be useful if you need to debug a production server that cannot always run in debug mode for performance reasons.  \nIn order to attach to a Node.js process, you specify its _process id_ via a `processId` attribute in an `attach` launch configuration.  \nSince it is not very practical to always having to edit the launch configuration before starting a debug session, we've introduced a new type of variable that can bind to an interactive UI, e.g. to a process picker:  \n![Process Picker](images/June_2016/attach_to_process.png)  \nHere is a launch configuration that uses the `${command:PickProcess}` variable to let the user select a Node.js process before starting the debug session:  \n```json\n{\n\"name\": \"Attach to Process\",\n\"type\": \"node\",\n\"request\": \"attach\",\n\"processId\": \"${command:PickProcess}\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/June_2016#_attach-to-process",
    "id": 37
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n## Extension Authoring  \n### Menu Items and Context Menu Entries  \nWe now allow extension writers to contribute to the Explorer context menu (`explorer/context`), the editor context menus (`editor/context`), and the editor title menu (`editor/title`).  \nIt works in two steps:  \n1. Assign a title and an icon to a command using the enhanced `commands` contribution point.\n2. Create menu items using the new `menus` contribution point.  \nA menu item is defined for a menu location like `editor/context` and must at least specify the `command` to run. To avoid overly cluttered menus, a menu item should also specify a condition under which it shows. Last, an alternative command and a group into which the item is sorted can be defined. Groups are visually separated and there is a special group called _navigation_ which is the most prominent.  \n```json\n{\n\"commands\": [\n{\n\"command\": \"markdown.showPreview\",\n\"title\": \"Open Preview\",\n\"icon\": {\n\"light\": \"./media/Preview.svg\",\n\"dark\": \"./media/Preview_inverse.svg\"\n}\n}\n],\n\"menus\": {\n\"explorer/context\": [\n{\n\"when\": \"resourceLangId == markdown\",\n\"command\": \"markdown.showPreview\",\n\"group\": \"navigation\"\n}\n]\n}\n}\n```  \n![Menu contribution](images/June_2016/menus-contributions.png)  \nThe snippet above adds an entry into the navigation group of the Explorer context menu **when** the resource is of the Markdown language. *Note* that the URI of the current resource is passed to the command when being executed from a menu item.",
    "url": "https://code.visualstudio.com/updates/June_2016#_menu-items-and-context-menu-entries",
    "id": 38
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Add decorations before and after text  \nNew capabilities have been added to the decoration APIs. You can now add 'attachments' before and after a decoration. Attachments can be icons as well as text content that sticks to the decorated text.  \nAn example are the CSS color decorators attached to color values in the text:  \n![Decorator attachment](images/June_2016/color_decorators.png)  \nDecoration attachments can be defined on decoration types (see the `before` and `after` properties on `ThemableDecorationInstanceRenderOptions`) and fine-tuned on individual decorations (see the `before` and `after` properties on `ThemableDecorationRenderOptions`). You can review these properties in the `vscode` namespace API [reference](/docs/extensionAPI/vscode-api.md).",
    "url": "https://code.visualstudio.com/updates/June_2016#_add-decorations-before-and-after-text",
    "id": 39
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### API tweaks  \n* The Uri-class now allows you derive a Uri from an existing one: `someUri.with({scheme: 'newScheme', path: 'newPath'})`\n* The `previewHtml` command now allows you to provide a `title`.\n* When previewing html, we expose the style of the current theme via class names of the body element. Those are `vscode-light`, `vscode-dark`, and `vscode-high-contrast`.\n* Last, there is a new command `vscode.open` to open non-textual resources like images.",
    "url": "https://code.visualstudio.com/updates/June_2016#_api-tweaks",
    "id": 40
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Debug Extension Authoring: Command Variables  \nVS Code has supported variable substitution in `launch.json` configurations for some time. This release introduces a new type of variable that is bound to a VS Code _command_. When a debug session is started, all command variables that occur in the underlying launch configuration are first collected and then executed. Multiple occurrences of a variable do not result in multiple execution. Before the launch configuration is passed to the debug adapter, all variables are substituted with the command results.  \nA command is implemented and registered in an extension and its return value is used as the variable's value. The implementation of a command can range from a simple expression with no UI, to some sophisticated functionality based on the UI features available in the extension API.  \nAn example for this functionality can be found in `node-debug`. Here a variable `${command:PickProcess}` is bound to a process picker command. A new 'Attach to Process' launch configuration uses the variable to let the user pick a Node.js process when running the launch configuration.  \nIntroducing a new command variable is simple:  \n* Implement and register the command in your extension (not in the debug adapter).\n* Add a `variables` section to your `debuggers` contribution point.\n* Add one name/command-binding per variable.  \nFor example:  \n```\n\"debuggers\": {\n...\n\"variables\": {\n\"RemoteHost\": \"askUserForRemoteHostCommand\"\n},\n...\n}\n```  \n* The variable can now be used in any string typed value of a launch configuration as `${command:RemoteHost}`.\n* To make the `RemoteHost` variable discoverable for the user consider adding it to the `configurationAttributes` or `initialConfigurations` sections of the `debuggers` contribution point.",
    "url": "https://code.visualstudio.com/updates/June_2016#_debug-extension-authoring:-command-variables",
    "id": 41
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Debug Extension Authoring: Additions to the Debug Protocol  \nThe debug protocol has been extended in three areas (and VS Code already provides the corresponding UI):  \n* **Editing variables**: If a debug adapter returns the [capability `supportsSetVariable`](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts#L594), VS Code supports setting the value of unstructured (leaf) variables in the Variables view by calling the [`setVariable` request](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts#L476).\n* **Stepping backward**: If a debug adapter returns the [capability `supportsStepBack`](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts#L592), VS Code enables the UI for stepping back and will call the [`stepBack` request](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts#L476).\n* **Show variable type on hover**: If a debug adapter returns the optional `type` attribute for the [`variable` type](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts#L741), VS Code will show  the value of this attribute when hovering over the variable's name.",
    "url": "https://code.visualstudio.com/updates/June_2016#_debug-extension-authoring:-additions-to-the-debug-protocol",
    "id": 42
  },
  {
    "content": "See what is new in the Visual Studio Code June 2016 Release (1.3)\n### Creating Errors/Warnings from an Extension (Diagnostics)  \nWith the introduction of the new **Problems** panel, we started to work on support for project wide builders and linters. As a first step, we eliminated the automatic clearing of problems when an document is closed. Otherwise opening and closing a document would change the problem set generated by a project wide builder. Due to this change, extensions like linters generating diagnostics are responsible for clearing them when a document is closed. All extension providers generating diagnostics need to adopt to this change.  \nIn a linter that uses the `vscode-language-server` node module, this can be achieved as follows:  \n```typescript\ndocuments.onDidClose((event) => {\nconnection.sendDiagnostics({ uri: event.document.uri, diagnostics: [] });\n});\n```",
    "url": "https://code.visualstudio.com/updates/June_2016#_creating-errors/warnings-from-an-extension-diagnostics",
    "id": 43
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n## Editor  \n### Trim auto whitespace  \nThe editor automatically inserts whitespace when you add a new line, based on indenting rules and the previous line's content. Over time, this can result in unnecessary whitespace being persisted in the file. Thanks to [PR #5423](https://github.com/microsoft/vscode/pull/5423), the new `editor.trimAutoWhitespace` setting causes the editor to track the automatic whitespace it inserted and remove it if it no longer is needed, for example by typing somewhere else. Please note, this new setting is on by default.  \n![Trim Auto Whitespace](images/May_2016/trimAutoWhitespace.gif)",
    "url": "https://code.visualstudio.com/updates/May_2016#_trim-auto-whitespace",
    "id": 46
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Select all find matches  \nYou can now immediately select all find results by pressing `kb(editor.action.selectAllMatches)`. This is much quicker than doing a find and replace and leverages VS Code's multi-cursor support. Thanks for [PR #5715](https://github.com/microsoft/vscode/pull/5715)!  \n![Find All Matches](images/May_2016/selectAllFindMatches.gif)",
    "url": "https://code.visualstudio.com/updates/May_2016#_select-all-find-matches",
    "id": 47
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Configure Word Based Suggestion  \nWhen a language service isn't able to compute semantic completion (suggestions), VS Code defaults to word based completions. This is why for some languages you see an IntelliSense list with every word in the file. Some folks would prefer to not see this list at all so you can now disable word based completions with the `editor.wordBasedSuggestions` setting.",
    "url": "https://code.visualstudio.com/updates/May_2016#_configure-word-based-suggestion",
    "id": 48
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Resizable Peek View  \nThe Peek view editor that shows for reference search and for previewing declarations can now be resized!  \n![Peek](images/May_2016/peek.gif)",
    "url": "https://code.visualstudio.com/updates/May_2016#_resizable-peek-view",
    "id": 49
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n## Workbench  \n### Tabs  \n> Note: Support for Tabs is **not** in the 1.2.0 (May 2016) Stable release. You can preview the experiences below by using the [Insiders Release](/insiders) of VS Code.  \n[Tab support](https://github.com/microsoft/vscode/issues/224) is the number one [User Voice request](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7752519-implement-tabs). While the full implementation will take multiple iterations to fully deliver, we wanted to share progress made during the May iteration.  \nDuring this milestone, we focused on managing *stacks* of open editors. In the picture below, you can see that the left pane has two editors open, the center pane has four, and the right pane has two more. Files listed in italics are *preview* files, they allow you to single click and browse files without cluttering the list of open editors and eventually tabs.  \n![Tabs](images/May_2016/tabsprogress.png)  \nWhen you close an editor the last opened editor in the stack is restored, instead of closing the pane as it does today. In addition, we held a number of UX studies that have resulted in further improvements to the design, including:  \n* Redesign of the overflow icon\n* Ability to specify if files from **Quick Open** are pinned or previewed\n* Added a command to turn a previewed file into a pinned file  \nThis work has been checked into main and you can preview it using the [Insiders Release](/insiders).",
    "url": "https://code.visualstudio.com/updates/May_2016#_tabs",
    "id": 50
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Integrated terminal  \n[Number two](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7752357-integrated-terminal) on User Voice is the request for an integrated terminal, [issue #143](https://github.com/microsoft/vscode/issues/143). It can be convenient to have a terminal embedded directly in the tool, initially scoped to the workspace you are working in. You don't have to switch windows or alter the state of an existing terminal for a quick task.  \nWith the May release, we are rolling out the initial version of an integrated terminal. You can open the terminal using `kb(workbench.action.terminal.toggleTerminal)`, from the **View** | **Terminal** menu, or from the **View** > **Toggle Terminal** command in the **Command Palette**.  \nThe shell that is used defaults to `$SHELL` on Linux and OS X, and `%COMSPEC%` on Windows. These can be overridden manually by setting `terminal.integrated.shell.*` in settings. It should act just like the terminal you're familiar with.  \n![Terminal](images/May_2016/integrated-terminal.png)  \nPlease note, this is an early version of what we want to deliver. Currently VS Code only supports a single terminal and there still are missing features like copying and pasting with the keyboard. Windows 10 users may experience problems getting `cmd.exe` to work. If so, please try enabling the legacy terminal as described in [#143](https://github.com/microsoft/vscode/issues/143#issuecomment-221054202). The full list of current bugs and feature requests can be found [here](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aintegrated-terminal).  \n>**Note:** The **Toggle Terminal** key binding `kb(workbench.action.terminal.toggleTerminal)` had previously been bound to the **Cycle Between Open Editors** command. You can [customize](https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts) the key bindings and change the behavior back if desired.",
    "url": "https://code.visualstudio.com/updates/May_2016#_integrated-terminal",
    "id": 51
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Removing a specific key binding rule  \nIt is now possible to write a key binding rule that targets the removal of a specific default key binding. With the `keybindings.json`, it was always possible to redefine all the key bindings of VS Code, but it can be very difficult to make a small tweak, especially around overloaded keys, such as `kbstyle(Tab)` or `kbstyle(Escape)`. From now on, simply add a `-` to the `command` and the rule will be a removal rule.  \nHere is an example:  \n```json\n// In Default Keyboard Shortcuts\n...\n{ \"key\": \"tab\", \"command\": \"tab\", \"when\": ... },\n{ \"key\": \"tab\", \"command\": \"jumpToNextSnippetPlaceholder\", \"when\": ... },\n{ \"key\": \"tab\", \"command\": \"acceptSelectedSuggestion\", \"when\": ... },\n...\n\n// To remove the second rule, for example, add in keybindings.json:\n{ \"key\": \"tab\", \"command\": \"-jumpToNextSnippetPlaceholder\" }\n\n```",
    "url": "https://code.visualstudio.com/updates/May_2016#_removing-a-specific-key-binding-rule",
    "id": 52
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n## Languages  \n### CSS Variables  \n[Variable support in CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) is a new standards proposal currently in [draft](https://drafts.csswg.org/css-variables/) form. VS Code now supports rich code completion (IntelliSense) for CSS variables as well as Go To Definition, Peek Definition, and Find All Occurrences for variables in the same file.  \nFor example, here we Peek (`kb(editor.action.peekDefinition)`) at the definition of `--bg-color`:  \n![css peek definition](images/May_2016/css-peek-definition.png)",
    "url": "https://code.visualstudio.com/updates/May_2016#_css-variables",
    "id": 53
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n## Linters  \n### ESLint  \nThe [ESLint extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) now supports a \"fix all problems\" command. You can bind the `eslint.fixAllProblems` command to a keyboard shortcut, such as:  \n```json\n[\n{ \"key\": \"ctrl+shift+alt+f\",   \"command\": \"eslint.fixAllProblems\",\n\"when\": \"editorTextFocus\" }\n]\n```",
    "url": "https://code.visualstudio.com/updates/May_2016#_eslint",
    "id": 54
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### TSLint  \nThe [TSLint extension](https://marketplace.visualstudio.com/items?itemName=eg2.tslint) now supports excluding files from linting ([PR #47](https://github.com/microsoft/vscode-tslint/pull/47)) as well as quick fixes for a set of TSLint warnings ([PR #40](https://github.com/microsoft/vscode-tslint/pull/40)). Thanks for the pull requests!",
    "url": "https://code.visualstudio.com/updates/May_2016#_tslint",
    "id": 55
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n## Debugging  \n### Control opening the Debug Console  \nTo provide greater control over how the internal Debug Console is revealed VS Code, we are introducing the `internalConsoleOptions` setting in `launch.json` (see [#6159](https://github.com/microsoft/vscode/issues/6159)). This is especially useful if you are using an external terminal while debugging and you want to keep VS Code focused on your code. The possible values are:  \n* `neverOpen` - VS Code will *never* open the debug console\n* `openOnFirstSessionStart` - VS Code will open the debug console on the *first* debug session\n* `openOnSessionStart` - VS Code will open the debug console on *every* debug session",
    "url": "https://code.visualstudio.com/updates/May_2016#_control-opening-the-debug-console",
    "id": 56
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Node.js Improved Stepping Performance  \nWe want VS Code to remain lightweight and fast so to improve the stepping experience for programs with a large number of local variables per scope, we've made the following adjustments for Node.js debugging:  \n* If a scope has **more than 100 local variables**, VS Code no longer automatically auto expands that scope\n* After you expand the scope manually, only the **first 100** local variables are shown  \nThe scope header will reflect that only the first 100 local variables are being displayed:  \n![100 Local Variables](images/May_2016/many-locals.png)  \nTo track a variable that is not within the first 100 you must add it as a Watch expression or evaluate it in the Debug Console.",
    "url": "https://code.visualstudio.com/updates/May_2016#_node.js-improved-stepping-performance",
    "id": 57
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n## Extension Authoring  \n### Debug extension API  \nWe have exposed a `vscode.startDebug` command as an extension API for the VS Code debugger component. With this, a debug session can be started programmatically either by passing the name of a launch configuration file or a complete launch configuration object:  \n```javascript\nlet launchConfig = {\ntype: \"node\",\nrequest: \"launch\",\nprogram: \"${workspaceRoot}/test.js\",\ncwd: \"${workspaceRoot}\"\n};\n\nvscode.commands.executeCommand('vscode.startDebug', launchConfig).then(() => {\nvscode.window.showInformationMessage('Debug session started successfully');\n}, err => {\nvscode.window.showInformationMessage('Error: ' + err.message);\n});\n```  \nMore details can be found [here](https://github.com/microsoft/vscode/issues/4615).",
    "url": "https://code.visualstudio.com/updates/May_2016#_debug-extension-api",
    "id": 58
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### TextMate grammar injections  \nExtensions can now contribute TextMate grammars that inject new rules into the existing grammars used for syntax highlighting. This makes it possible to add colorization inside string literals or comments, such as highlighting of URLs or TODO markers across multiple languages.  \n```json\n\"grammars\": [\n{\n\"scopeName\": \"source.todo\",\n\"path\": \"./syntaxes/todo.tmLanguage.json\",\n\"injectTo\": [  \"source.js\", \"source.ts\" ]\n}\n]\n```",
    "url": "https://code.visualstudio.com/updates/May_2016#_textmate-grammar-injections",
    "id": 59
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Comparing files  \nWe have added a new API command that allows you to use the diff-editor on two arbitrary resources like so: `commands.executeCommand('vscode.diff', uri1, uri2)`",
    "url": "https://code.visualstudio.com/updates/May_2016#_comparing-files",
    "id": 60
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Updated extension samples  \nThere is a new rich extension sample that walks you through _virtual documents_, _eventing_, and using _language features as commands_. Also, the preview html sample was updated:  \n* [contentprovider-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/contentprovider-sample)\n* [previewhtml-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/previewhtml-sample)",
    "url": "https://code.visualstudio.com/updates/May_2016#_updated-extension-samples",
    "id": 61
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Debug Adapter: Support a 'One' or 'All' mode of operation for controlling threads  \nIn a previous revision of the VS Code Debug Protocol, we had introduced a `allThreadsStopped` attribute on the `StoppedEvent`. With this attribute, a debug adapter can report back to the frontend whether only a single thread or all threads have stopped. Thanks to developer feedback, we learned that a similar attribute is necessary for the `ContinueRequest` too.  \nIn the version 1.9.0 of the [VS Code Debug Protocol](https://github.com/microsoft/vscode-debugadapter-node), a boolean attribute `allThreadsContinued` has been added to the response from the `ContinueRequest`. Using this attribute, a debug adapter can report back to the UI whether only a single thread or all threads are continuing. More details can be found [here](https://github.com/microsoft/vscode/issues/6400).",
    "url": "https://code.visualstudio.com/updates/May_2016#_debug-adapter:-support-a-'one'-or-'all'-mode-of-operation-for-controlling-threads",
    "id": 62
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Language Server Protocol  \nThe [Language Service Protocol](https://github.com/microsoft/vscode-languageserver-protocol) now offers support for telemetry notifications. Message tracing support has been implemented in the [node client library](https://www.npmjs.com/package/vscode-languageclient) to help tracking down problems in the server. It can be enabled via a settings `${clientName}.trace.server` where client name is the name passed when creating the `LanguageClient` instance. For example `eslint.trace.server` for the ESLint linter service.",
    "url": "https://code.visualstudio.com/updates/May_2016#_language-server-protocol",
    "id": 63
  },
  {
    "content": "See what is new in the Visual Studio Code May 2016 Release (1.2)\n### Command Line Extension Management  \nTo make it easier to automate and configure VS Code, it is now possible to list, install, and uninstall extensions from the command line.  \nExample:  \n```\ncode --list-extensions\ncode --install-extension ms-vscode.cpptools\ncode --uninstall-extension ms-dotnettools.csharp\n```",
    "url": "https://code.visualstudio.com/updates/May_2016#_command-line-extension-management",
    "id": 64
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### Comment action\nWe added these changes for comment actions.  \n* `kb(editor.action.addCommentLine)` now forces adding line comments.\n* `kb(editor.action.removeCommentLine)` now forces uncommenting lines. (If multiple lines are selected, and not all of them have a line comment, the line comments will still be removed).\n* `kb(editor.action.commentLine)` toggles line comment as before, but now inserts the line comment tokens aligned with the indentation of the selected code. It also will leave empty or whitespace-only lines untouched. `kb(editor.action.commentLine)` is also more forgiving with regards to selection state when toggling comments in languages which only support block comments, such as CSS or HTML.\n* Toggle block comment (`kb(editor.action.blockComment)`) is also more forgiving related to selection state when toggling block comments.  \n![Block comments](images/0_3_0/BlockComments.png)",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_comment-action",
    "id": 67
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### Indentation\nPressing `kbstyle(Tab)` on an empty line will indent as much as needed to place the cursor at the correct starting position (i.e., not just insert a single indentation).",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_indentation",
    "id": 68
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### Shrink/expand selection\nQuickly shrink or expand the current selection (applies to all languages). Trigger it with `kb(editor.action.smartSelect.shrink)` and `kb(editor.action.smartSelect.expand)`  \nHere's an example of expanding the selection with `kb(editor.action.smartSelect.expand)`:  \n![Expand selection](images/0_3_0/expandselection.gif)",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_shrink/expand-selection",
    "id": 69
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### Wrapping control\nTo improve readability, you can now control how long lines are wrapped and indented with a new setting, `editor.wrappingIndent`, in **settings.json**. The following values are available for `editor.wrappingIndent`:  \n* `none`: When a line wraps, subsequent lines start at column 1.  \n![WrappingIndent set to none](images/0_3_0/WrappingIndentNone.png)  \n* `same`: (This is the default.) When a line wraps, subsequent lines start at the same column used by the original line.  \n![WrappingIndent set to none](images/0_3_0/WrappingIndentSame.png)  \n* `indent`: When a line wraps, subsequent lines are indented once relative to the original line.  \n![WrappingIndent set to indent](images/0_3_0/WrappingIndentIndent.png)",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_wrapping-control",
    "id": 70
  },
  {
    "content": "Visual Studio Code 0.3.0  \n## Languages  \n### Rust\n[Rust](https://www.rust-lang.org/) has been added as a supported language for colorization and bracket matching.",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_rust",
    "id": 71
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### TypeScript\nThe TypeScript language service has been updated to TypeScript version 1.5.",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_typescript",
    "id": 72
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### JavaScript\nNew options allow you to turn off *all* semantic and syntax checks, useful if you prefer JSHint instead of the VS Code JavaScript validator.  \n* `javascript.validate.semanticValidation=[true|false]` Use `true` to have VS Code report semantic errors (unassigned variables, etc. and *all* lint checks)\n* `javascript.validate.syntaxValidation=[true|false]` Use `false` to have VS Code report syntaX errors (missing brackets, etc.).",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_javascript",
    "id": 73
  },
  {
    "content": "Visual Studio Code 0.3.0  \n### HTML\nHTML auto closing of tags has now been removed and replaced with smarter IntelliSense on `</`.",
    "url": "https://code.visualstudio.com/updates/v0_3_0#_html",
    "id": 74
  },
  {
    "content": "See what is new in Visual Studio Code 0.7.1  \n## Debugging  \n### node.js: Large data structure improvements\nIn previous versions of VS Code, debugging would stall (and timeout) when stepping through code that used large Arrays or Buffers. In this version the VS Code debugger treats large data structures (Arrays and Buffers) in a more scalable way and should no longer timeout. The same should be true for drilling into large data structures in the variables or watches view section.  \nAs a consequence, the debugger now renders the contents of Arrays and Buffers in chunks.  \n![Chunked Arrays](images/0_7_0/DebugChunkedArrays.png)  \n>**Note:** These improvements require version 0.12.x of node.js (these improvements are not yet supported for io.js).",
    "url": "https://code.visualstudio.com/updates/v0_7_0#_node.js:-large-data-structure-improvements",
    "id": 80
  },
  {
    "content": "See what is new in Visual Studio Code 0.7.1  \n### node.js: Stable breakpoints\nFor performance reasons node.js parses the functions inside JavaScript files lazily on first access. As a consequence, breakpoints don't work in source code that hasn't been seen (parsed) by node.js.  \nSince this behavior is not ideal for debugging, VS Code now passes the `--nolazy` option to node.js automatically. This prevents the delayed parsing and ensures that breakpoints can be validated before running the code (so they should no longer 'jump').  \n>**Tip:** If you have to attach VS Code to an already running node process, be aware that this node.js runtime probably wasn't started with the `--nolazy` flag.",
    "url": "https://code.visualstudio.com/updates/v0_7_0#_node.js:-stable-breakpoints",
    "id": 81
  },
  {
    "content": "See what is new in Visual Studio Code 0.7.1  \n### Variable support in launch.json\nVS Code now supports variables in the `launch.json` file in the same way as in `tasks.json` (see [Tasks](/docs/editor/tasks.md#variables-in-tasksjson)).",
    "url": "https://code.visualstudio.com/updates/v0_7_0#_variable-support-in-launch.json",
    "id": 82
  },
  {
    "content": "See what is new in Visual Studio Code 0.7.1  \n### Run to cursor\nYou can now run up to the cursor location with a new action included in the context menu.",
    "url": "https://code.visualstudio.com/updates/v0_7_0#_run-to-cursor",
    "id": 83
  },
  {
    "content": "See what is new in Visual Studio Code 0.8.0  \n### New Windows Setup\nWe adopted a new installation and update framework for Windows based on [Inno Setup](https://www.jrsoftware.org/isinfo.php).\nThis fixes many Windows integration issues and streamlines the update story.  \n>**Note:** You will see a two stage update as a result of the change to the new installer.  First to version 0.7.20 to bootstrap the new installer and then to the 0.8.0 release version.  The new installer will prompt you during installation.  Continue through the setup dialog to install VS Code 0.8.0.  \n>**Tip:** You will need to close any currently open command windows to pick up the new PATH setting.",
    "url": "https://code.visualstudio.com/updates/v0_8_0#_new-windows-setup",
    "id": 87
  },
  {
    "content": "See what is new in Visual Studio Code 0.8.0  \n### Renamed VS Code Settings Folder\nWe renamed the top level `.settings` folder to `.vscode` to make it clear that this folder contains VS Code specific configurations and to avoid conflicts with other IDEs who may also use a folder named `.settings` (e.g. Eclipse).  \nWhen you update to version 0.8.0, VS Code will rename the folder to the new name and inform you if you had any files in a `.settings` folder.",
    "url": "https://code.visualstudio.com/updates/v0_8_0#_renamed-vs-code-settings-folder",
    "id": 88
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Preview: Drag and Drop selected text  \nYou can now use the mouse to drag and drop selected text inside the editor. This feature is disabled by default and you can turn it on by set `editor.dragAndDrop` to `true`.  \n![Drag and drop](images/1_10/drag-and-drop.gif)  \nPlease note we don't support drag-and-drop across editors or across different applications at the moment.",
    "url": "https://code.visualstudio.com/updates/v1_10#_preview:-drag-and-drop-selected-text",
    "id": 96
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Copy with syntax highlighting  \nYou can now copy selected text to the Clipboard with syntax highlighting. It can be very useful when you paste the content into another application, for example, Outlook, and the content pasted into the application still has the correct formatting and colorization.  \nTechnically, we add a new entry for HTML content into the Clipboard so even if the target application doesn't support pasting rich text, the pasting will still work.  \n![Copy with syntax highlighting](images/1_10/copy-with-syntax-highlighting.gif)  \nCopying plain text to the Clipboard is easy and straight-forward but copying text with syntax highlighting has to pay the price of rendering based on the Theme you are using, so in order to make sure this feature doesn't slow down VS Code noticeably, we turn it off if you are copying a selection which contains more than 65536 characters.  \nIf Copy and Paste with correct format and colors is your top priority, so you can always manually run the new command `editor.action.clipboardCopyWithSyntaxHighlightingAction` or even bind it to `kbstyle(ctrl/cmd+c)` so you don't need to worry if the selection length reaches the limit.",
    "url": "https://code.visualstudio.com/updates/v1_10#_copy-with-syntax-highlighting",
    "id": 97
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Word wrap settings redesign  \nIn VS Code 1.9, we've changed the **Toggle Word Wrap** action to persist to User settings. The change was received with mixed feelings by our community, so for VS Code 1.10 we have rolled back that change and the action will only temporarily affect the current focused editor.  \nThe change also started a healthy discussion around the difficulty of configuring the editor's wrapping behavior. We therefore decided to deprecate `editor.wrappingColumn` (with its -1, 0, >0 cases) in favor of `editor.wordWrap`.  \nHere are the new word wrap options:  \n* `editor.wordWrap: \"off\"` - Lines will never wrap.\n* `editor.wordWrap: \"on\"` - Lines will wrap at viewport width.\n* `editor.wordWrap: \"wordWrapColumn\"` - Lines will wrap at the value of `editor.wordWrapColumn`.\n* `editor.wordWrap: \"bounded\"` - Lines will wrap at the minimum of viewport width and the value of `editor.wordWrapColumn`.  \nWe also changed the default and now VS Code ships with `editor.wordWrap: \"off\"`.  \nIn this release, we added support for [language specific default settings](#language-specific-editor-settings) and we now turn on word wrap by default for Markdown files.",
    "url": "https://code.visualstudio.com/updates/v1_10#_word-wrap-settings-redesign",
    "id": 98
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Manually trigger save actions  \nYou can now save an editor via `kb(workbench.action.files.save)` even if the file is not dirty and extensions which perform actions on save will be triggered. This allows you to trigger Format on Save even if the file is not dirty.",
    "url": "https://code.visualstudio.com/updates/v1_10#_manually-trigger-save-actions",
    "id": 99
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### New cursor styles  \nThanks to [PR #14237](https://github.com/microsoft/vscode/pull/14237), there are three more cursor styles available: `'line-thin'`, `'underline-thin'` and `'block-outline'`.",
    "url": "https://code.visualstudio.com/updates/v1_10#_new-cursor-styles",
    "id": 100
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Workbench  \n### Configurable Explorer key bindings  \nBy popular demand, you can now configure the key bindings for most of the commands in the File Explorer and OPEN EDITORS view.  \nThe following commands could already be assigned prior to version 1.10 in the File Explorer:  \n* `explorer.newFile` - Create a new file\n* `explorer.newFolder`-  Create a new folder  \nNew commands that work in both the File Explorer and OPEN EDITORS view  \n* `explorer.openToSide` - Open to the side\n* `copyFilePath` - Copy path of file/folder\n* `revealFileInOS` - Reveal file in OS  \nNew commands that only work in the File Explorer:  \n* `filesExplorer.copy` - Copy a file from the File Explorer\n* `filesExplorer.paste` - Paste a file that was copied from the File Explorer\n* `renameFile` - Rename a file/folder in the File Explorer\n* `moveFileToTrash` - Move a file/folder to trash from the File Explorer\n* `deleteFile` - Bypass trash and delete a file/folder from the File Explorer\n* `filesExplorer.findInFolder` - Find inside a folder from the File Explorer  \nIn addition to these commands, the following contexts are introduced for key bindings:  \n* `filesExplorerFocus` - Keyboard focus is inside the File Explorer\n* `openEditorsFocus` - Keyboard focus is inside the OPEN EDITORS view\n* `explorerViewletFocus` - Keyboard focus is in either the File Explorer or OPEN EDITORS view",
    "url": "https://code.visualstudio.com/updates/v1_10#_configurable-explorer-key-bindings",
    "id": 101
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Configurable tree/list key bindings  \nWe introduced new commands (see below) to make working with trees and lists UI elements in VS Code more configurable for keyboard centric users.  \nHere is a list of new commands that will work in every tree and list:  \n|Command|Keyboard shortcut|\n|---|---|\n|`list.focusUp`|`kbstyle(Up Arrow)` (additionally on macOS: `kbstyle(Ctrl+P)`)|\n|`list.focusDown`|`kbstyle(Down Arrow)` (additionally on macOS: `kbstyle(Ctrl+N)`)|\n|`list.focusFirst`|`kbstyle(Home)`|\n|`list.focusLast`|`kbstyle(End)`|\n|`list.focusPageDown`|`kbstyle(PageDown)`|\n|`list.focusPageUp`|`kbstyle(PageUp)`|\n|`list.collapse`|`kbstyle(Left Arrow)` (additionally on macOS: `kbstyle(Cmd+Up Arrow)`)|\n|`list.expand`|`kbstyle(Right Arrow)`|\n|`list.clear`|`kbstyle(Escape)`|\n|`list.select`|`kbstyle(Enter)` (additionally on macOS: `kbstyle(Cmd+Enter)`)|\n|`list.toggleExpand`|`kbstyle(Space)`|  \nWith these new commands, we now consistently support `kbstyle(Ctrl+P)` and `kbstyle(Ctrl+N)` to navigate up and down in trees and lists on macOS.  \nFor example, on macOS to change the command to open from the File Explorer to be `kbstyle(Enter)` (which normally brings you into rename mode), configure:  \n```json\n{\n\"key\": \"enter\",\n\"command\": \"list.select\",\n\"when\": \"filesExplorerFocus\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_configurable-tree/list-key-bindings",
    "id": 102
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Configurable window title  \nWe introduced a new setting `window.title` that can be used to change the window title based on the active editor opened.  \nYou can compose the title with the following variables (shown here for `/Users/Development/myProject/myFolder/myFile.txt`):  \n* `${activeEditorLong}` - /Users/Development/myProject/myFolder/myFile.txt\n* `${activeEditorMedium}` - myFolder/myFile.txt\n* `${activeEditorShort}` - myFile.txt\n* `${rootName}` - myProject\n* `${rootPath}` - /Users/Development/myProject\n* `${appName}` - Visual Studio Code\n* `${dirty}` - a dirty indicator if the active editor is dirty\n* `${separator}` - a conditional separator (\" - \") that only shows when surrounded by variables with values  \nThe `window.title` has the following defaults:  \n* Windows/Linux: `${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}`\n* macOS: `${activeEditorShort}${separator}${rootName}`  \n>**Note:** We no longer support `window.showFullPath` in favor of the `window.title` setting. The variable `${activeEditorLong}` will give you the full path.",
    "url": "https://code.visualstudio.com/updates/v1_10#_configurable-window-title",
    "id": 103
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Restore Zen Mode  \nPer [user request](https://github.com/microsoft/vscode/issues/19431), we have added a `zenMode.restore` setting to control if a window should restore to Zen Mode if it was exited in Zen Mode.",
    "url": "https://code.visualstudio.com/updates/v1_10#_restore-zen-mode",
    "id": 104
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Theme configurations in settings  \nNew settings have been added that define the currently active Color and File Icon theme:  \n```json\n{\n// Specifies the color theme used in the workbench.\n\"workbench.colorTheme\": \"Default Dark+\",\n\n// Specifies the icon theme used in the workbench.\n\"workbench.iconTheme\": null\n}\n```  \nBy placing the options in the workspace settings, you can now have a different theme per workspace. These used to be stored in a separate location but now they are in your settings files.  \nTo change a theme, you can still use the theme selection dialog in the **Preferences** menu with the **Preferences: Color Theme** and **Preferences: File Icon Theme** commands.",
    "url": "https://code.visualstudio.com/updates/v1_10#_theme-configurations-in-settings",
    "id": 105
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Links in the terminal  \nThe terminal now creates links for URLs and text that looks like a path. These links will either be opened in a browser or the editor when triggered respectively.  \n![terminal link](images/1_10/terminal-link.png)",
    "url": "https://code.visualstudio.com/updates/v1_10#_links-in-the-terminal",
    "id": 106
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Run in terminal commands  \nIn previous releases, there was the single command `workbench.action.terminal.runSelectedText` which sent text to the terminal. This would send either the selection if there was one, or the entire file if not. This caused some issues as users would accidentally run entire files when they were expecting to run the current *line* if there was no selection. Running a file would also not work in some shells as the shell would interpret the text in chunks, not as a whole. To improve these scenarios, there are now two commands with distinct behaviors:  \n- `workbench.action.terminal.runSelectedText`: Sends the selection if there is one to the terminal, otherwise sends the current line.\n- `workbench.action.terminal.runActiveFile`: Sends the *file path* of the active file to the terminal (in most shells this will execute the file).",
    "url": "https://code.visualstudio.com/updates/v1_10#_run-in-terminal-commands",
    "id": 107
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Display chord key bindings in menus  \nIn previous releases, you might have noticed that a menu entry would not show a keyboard shortcut even though you had a key binding assigned. The reason was that some key bindings (for example multiple key chords) cannot be displayed as keyboard shortcuts in menus (including context menus).  \nAs a workaround, we now show those key bindings as part of the menu label:  \n![menu](images/1_10/menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_10#_display-chord-key-bindings-in-menus",
    "id": 108
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Search results count  \nWe now show the total number of files and matches for a search in the Search View.  \n![Search results count](images/1_10/search-results-count.png)",
    "url": "https://code.visualstudio.com/updates/v1_10#_search-results-count",
    "id": 109
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Improving search speed going forward  \nWe've been looking into how to make our file search even faster. We explored two alternatives: [Silver Searcher](https://github.com/ggreer/the_silver_searcher) and [ripgrep](https://github.com/BurntSushi/ripgrep). If your are interested in our findings, have a look at our [write-up](https://github.com/microsoft/vscode/issues/19983#issuecomment-282581996). It's a good read.",
    "url": "https://code.visualstudio.com/updates/v1_10#_improving-search-speed-going-forward",
    "id": 110
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Languages  \n### TypeScript  \nVS Code now ships with [TypeScript 2.2](https://devblogs.microsoft.com/typescript/announcing-typescript-2-2/). This release includes a number of [new language features](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#typescript-22), bug fixes, and other enhancements.  \nTypeScript 2.2 also brings support for a number of new quick fixes, including:  \n* Add missing import\n* Add missing property\n* Add forgotten this to variable\n* Remove unused declaration\n* Implement interface or abstract class",
    "url": "https://code.visualstudio.com/updates/v1_10#_typescript",
    "id": 111
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Auto JSDoc comments  \nVS Code will now provide a [JSDoc](https://jsdoc.app) comment template for JavaScript and TypeScript functions when you type `/**`:  \n![JSDoc autofill](images/1_10/jsdoc-autofill.gif)",
    "url": "https://code.visualstudio.com/updates/v1_10#_auto-jsdoc-comments",
    "id": 112
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### HTML  \nDocument symbols are now available also for HTML, allowing you to quickly navigate to DOM nodes by id and class name.  \nPress `kb(workbench.action.gotoSymbol)` to bring up the symbol in file.  \n![HTML document symbols](images/1_10/html-document-symbols.png)  \nThanks to [Cody Hoover](https://github.com/hoovercj) for the contribution.",
    "url": "https://code.visualstudio.com/updates/v1_10#_html",
    "id": 113
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### CSS  \nThe CSS, LESS and SCSS color preview decorators can now be disabled in the settings:  \n```json\n\"css.colorDecorators.enable\": true,\n\"scss.colorDecorators.enable\": true,\n\"less.colorDecorators.enable\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_css",
    "id": 114
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Jade  \nJade is now known as [Pug](https://github.com/pugjs/pug/issues/2184). Nothing has changed but the language label. The language ID is still `jade` and the `.jade` file extension is still served.",
    "url": "https://code.visualstudio.com/updates/v1_10#_jade",
    "id": 115
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Vue  \nWhile [Vue.js](https://vuejs.org) files may look like HTML files, they are much more than that. For that reason, the `.vue` file extension is no longer associated with HTML by default. However we do recommend you use a Vue.js specific extension for language support and the [vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur) extension is a good choice.",
    "url": "https://code.visualstudio.com/updates/v1_10#_vue",
    "id": 116
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Go, Make, YAML, Markdown  \nThese languages are now using the new support for default configuration settings per language (see Default Language specific editor settings below). For Go, Make, and YAML, the default settings configure `kbstyle(Tab)` behavior as defined by these languages. For Markdown, the default enables word wrapping and disables quick suggestions.",
    "url": "https://code.visualstudio.com/updates/v1_10#_go,-make,-yaml,-markdown",
    "id": 117
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Fragment link navigation for Markdown  \nLinks to Markdown files that include a fragment will now try to open the file at the corresponding header:  \n```markdown\n* [Section](#header)\n* [Another file](./other_file.md#header)\n\n# Header\n...\n```  \nThis allows quickly navigating documentation directly within the VS Code editor.",
    "url": "https://code.visualstudio.com/updates/v1_10#_fragment-link-navigation-for-markdown",
    "id": 118
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Debugging  \n### Column breakpoints  \nAs per [popular request](https://github.com/microsoft/vscode/issues/14784), we now support setting breakpoints on an editor column.\nThis helps debugging code that contains multiple statements on a single line which typically occurs with heavily chained promises or minified source.\nA column breakpoint can be set using `kb(editor.debug.action.toggleInlineBreakpoint)` or via the context menu during a debug session.  \n![column](images/1_10/column-breakpoints.gif)  \n**Note**: A debug extension backend will adjust the location of breakpoints to 'possible' locations. This might cause breakpoints to move when starting a debug session or when setting a column breakpoint while a session is active.",
    "url": "https://code.visualstudio.com/updates/v1_10#_column-breakpoints",
    "id": 119
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Improved Exception experience  \nTo improve the visibility of exceptions as they occur during debugging, we now show the exception directly in the editor with a peek UI:  \n![launch](images/1_10/exception-widget.png)  \n[This issue](https://github.com/OmniSharp/omnisharp-vscode/issues/1007) was raised because sometimes users were not aware that an exception was raised (especially in library code). Another motivation for the introduction of the peek UI was to make it easy to show many more exception details.",
    "url": "https://code.visualstudio.com/updates/v1_10#_improved-exception-experience",
    "id": 120
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Ability to select and start a launch using keyboard  \nThe option to launch debug configurations using just the keyboard (no mouse gesture necessary) was added, as per [this request](https://github.com/microsoft/vscode/issues/16613). It works similarly to running tasks, with an ability to launch a debugging session from the **Command Palette**. The keyword `'debug '` or the command **Debug: Select and Start Debugging** from the **Command Palette** is used to select and launch a configuration from `launch.json`.  \n![launch](images/1_10/launch-keyboard.gif)",
    "url": "https://code.visualstudio.com/updates/v1_10#_ability-to-select-and-start-a-launch-using-keyboard",
    "id": 121
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### New variable syntax  \nStarting with this release, we now support the colon character ':' as a prefix separator in variable names (and we have deprecated the '.'). With this change, the new (and preferred) syntax for 'env', 'command', and 'config' variables becomes `${prefix:id}`.  \nThis makes command variables (where the command ID itself uses '.') much more readable:  \n```json\n\"processID\": \"${command:extension.node-debug.pickProcess}\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_new-variable-syntax",
    "id": 122
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Precondition based on debugger type  \nIt is now possible to have a precondition based on the current debug type. Preconditions can be used when defining keyboard shortcuts or when registering new commands as an extension.  \nHere's an example of a shortcut that will only be enabled while you are debugging with `type` 'node':  \n```json\n{ \"key\": \"f6\", \"command\": \"workbench.action.debug.continue\", \"when\": \"debugType == 'node'\" }\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_precondition-based-on-debugger-type",
    "id": 123
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Debug views sizes  \nWe have fine-tuned the default sizes of Debug views. Also once the size is changed by the user, we preserve it across different VS Code sessions.",
    "url": "https://code.visualstudio.com/updates/v1_10#_debug-views-sizes",
    "id": 124
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Node Debugging  \n### Node2 transitioning  \nIn this milestone, we've started to fold the two node debuggers ('node' and 'node2') into a single node debugging experience (behind the debug type 'node'). The goal of this is to detect the supported debugging protocol(s) of the targeted Node.js runtime automatically and to select the best debugger implementation based on that protocol. We call the [new protocol](https://developer.chrome.com/devtools/docs/debugger-protocol) 'inspector' and the (now obsolete) v8-debugger protocol 'legacy'.  \nStarting with this release, we recommend that you only use the 'node' debug type and we've deprecated the 'node2' type ('node2' is still available but its use in launch configurations will be flagged with a deprecation warning).  \nSince we still want to give you control over what debugger implementation to use, we've introduced a new attribute `protocol` with the following values:  \n- **`auto`**: tries to automatically detect the protocol used by the targeted runtime. For configurations of request type `launch` and if no `runtimeExecutable` is specified, we try to determine the version by running Node.js from the PATH with an `--version` argument. If the version is >= 6.9, the new 'inspector' protocol is used. For configurations of request type 'attach', we try to connect with the new protocol and if that works, we use the 'inspector' protocol. We only switch to the new inspector protocol for versions >= 6.9 because of problems in earlier versions.\n- **`inspector`**: forces the node debugger to use the 'inspector' protocol based implementation (aka 'node2'). This is supported by Node.js versions >= 6.3, but not (yet) by Electron.\n- **`legacy`**: forces the node debugger to use the 'legacy' protocol based implementation. This is supported by Node.js versions < v8.0).  \nIn the future `auto` will be the default, however since the transition to the new node debugging experience hasn't been finished yet (and we were not brave enough to enable it by default), we continue to use `legacy` for the time being.  \nBut we would like to encourage you to use `'protocol': 'auto'` in your launch configurations and provide feedback if you experience problems.",
    "url": "https://code.visualstudio.com/updates/v1_10#_node2-transitioning",
    "id": 125
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Task support  \n### Key bindings per task  \nYou can now bind a keyboard shortcut to any task you want.  \nSimply add a key binding like this:  \n```json\n{\n\"key\": \"ctrl+h\",\n\"command\": \"workbench.action.tasks.runTask\",\n\"args\": \"tsc\"\n}\n```  \nThis binds `ctrl+h` to the task named `tsc`.",
    "url": "https://code.visualstudio.com/updates/v1_10#_key-bindings-per-task",
    "id": 126
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### More work on Terminal Runner  \nAs announced in the previous release, we are working on running tasks in the Integrated Terminal instead of the Output panel. In this release, we added support to compose tasks out of simpler tasks. If, for example, you have a workspace with a client and server folder and both contain a build script, you can now have one task that starts both build scripts in separate terminals.  \nThe `tasks.json` file looks like this:  \n```json\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"taskName\": \"Client Build\",\n\"command\": \"gulp\",\n\"args\": [\"build\"],\n\"isShellCommand\": true,\n\"options\": {\n\"cwd\": \"${workspaceRoot}/client\"\n}\n},\n{\n\"taskName\": \"Server Build\",\n\"command\": \"gulp\",\n\"args\": [\"build\"],\n\"isShellCommand\": true,\n\"options\": {\n\"cwd\": \"${workspaceRoot}/server\"\n}\n},\n{\n\"taskName\": \"Build\",\n\"dependsOn\": [\"Client Build\", \"Server Build\"]\n}\n]\n}\n```  \nPlease note the following things:  \n- This support is preliminary and subject to change.\n- The terminal task runner can now also be enabled by using the `\"version\": \"2.0.0\"` property.",
    "url": "https://code.visualstudio.com/updates/v1_10#_more-work-on-terminal-runner",
    "id": 127
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Facilitating automation with `${lineNumber}`  \nAs requested by the [community](https://github.com/microsoft/vscode/issues/12714), we added a new variable `${lineNumber}` for `tasks.json` and `launch.json`. It resolves to the selected line in the currently opened file. This new variable facilitates automation (e.g. running tests) under cursor selection.",
    "url": "https://code.visualstudio.com/updates/v1_10#_facilitating-automation-with-${linenumber}",
    "id": 128
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Extension Authoring  \n### Contributable SCM providers  \nWe made further progress in February on creating a pluggable Source Control feature set for VS Code. Namely, all Git features were ported over to a [Git extension](https://github.com/microsoft/vscode/issues/18615).  \nAll VS Code Insiders will get this new interface and we'll use the March milestone to tune and tweak the experience. You can try this out via the `SCM: Enable Preview SCM` command, which will replace the legacy Git functionality with the experimental one (run `SCM: Disable Preview SCM` to undo).",
    "url": "https://code.visualstudio.com/updates/v1_10#_contributable-scm-providers",
    "id": 129
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Modal messages  \nThe `window.showInformationMessage` and similar API calls have been [updated to allow the use of modal message dialogs](https://github.com/microsoft/vscode/pull/19717).  \nHere's an example using the `modal` parameter:  \n```typescript\nwindow.showInformationMessage('Do you want to continue?', { modal: true }, 'Yes', 'No');\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_modal-messages",
    "id": 130
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Context specific visibility of Command Palette menu items  \nWhen registering commands in `package.json`, they will automatically be shown in the **Command Palette** (`kb(workbench.action.showCommands)`). To allow more control over command visibility, we have added the `commandPalette` menu item. It allows you to define a `when` condition to control if a command should be visible in the **Command Palette** or not.  \nThe snippet below makes the 'Hello World' command only visible in the **Command Palette** when something is selected in the editor:  \n```json\n\"commands\": [{\n\"command\": \"extension.sayHello\",\n\"title\": \"Hello World\"\n}],\n\"menus\": {\n\"commandPalette\": [{\n\"command\": \"extension.sayHello\",\n\"when\": \"editorHasSelection\"\n}]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_context-specific-visibility-of-command-palette-menu-items",
    "id": 131
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Language specific editor settings  \nIn this release, we added support for following language specific editor settings:  \n```\neditor.tabSize\neditor.insertSpaces\neditor.detectIndentation\neditor.trimAutoWhitespace\n```  \n**Default language specific editor settings:** Extension authors can now contribute default language specific editor settings using the newly introduced extension point `configurationDefaults` in `package.json`.  \nFollowing example contributes default editor settings for the `markdown` language.  \n```json\ncontributes\": {\n\"configurationDefaults\": {\n\"[markdown]\": {\n\"editor.wordWrap\": \"on\",\n\"editor.quickSuggestions\": false\n}\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_10#_language-specific-editor-settings",
    "id": 132
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Debug Adapter Protocol  \nA new optional attribute `clientID` has been added to the `InitializeRequestArguments`. With this addition, a debug adapter can identify the client (frontend). We maintain a list of client IDs [here](https://github.com/microsoft/vscode-debugadapter-node/wiki/Client-IDs).  \nFor obtaining more information about thrown exceptions, we've introduced a new `ExceptionInfoRequest` and a corresponding type `ExceptionDetails`.",
    "url": "https://code.visualstudio.com/updates/v1_10#_debug-adapter-protocol",
    "id": 133
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n## Miscellaneous  \n### Official signed repositories for Linux  \nFor Debian-based distributions, we now ship both Stable and Insiders in a signed `apt` repository that is automatically installed when you install the .deb package. This enables automatic updates using the platform's update mechanism.  \n![apt repository](images/1_10/apt-repo.jpg)  \nFor Red Hat-based distributions, we ship Stable in a signed `yum` repository. You can install the repository by following [these instructions](https://code.visualstudio.com/docs/setup/linux#_installation).",
    "url": "https://code.visualstudio.com/updates/v1_10#_official-signed-repositories-for-linux",
    "id": 134
  },
  {
    "content": "See what is new in the Visual Studio Code February 2017 Release (1.10)  \n### Monitoring startup performance  \nStartup performance is important and we continuously try to improve it. Sometimes startup performance gets slower, mostly because of changes with unintended effects or because of changes in our dependencies. To ensure we see this early and to fix performance regressions, we have started to monitor the startup performance of a dedicated machine. We took a slightly outdated and dusty laptop and set it up as a build machine. Its 'build result' involves starting VS Code a couple of times and sending the startup timings to our telemetry stores. We also created a dashboard with visualizations of that data (PowerBI) and a slack bot (Azure Functions) that tells us once a day what the numbers are.  \n![perf bot](images/1_10/performanto.png)",
    "url": "https://code.visualstudio.com/updates/v1_10#_monitoring-startup-performance",
    "id": 135
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Keyboard shortcuts editor  \nWith this release, VS Code provides a rich and easy keyboard shortcuts editing experience using a new **Keyboard Shortcuts** editor. You can now find a command and change/remove/reset its key binding easily. Most importantly, you can see key bindings according to your keyboard layout, instead of mapping keys in the earlier json-based key bindings editor to your keyboard layout. The dialog to enter key bindings will assign the correct and desired key binding as per your keyboard layout.  \n![Keyboard Shortcuts](images/1_11/keyboard-shortcuts.gif)  \n**NOTE:** For more advanced customizations like editing `when` clause context of a key binding, you can open the `keybindings.json` file just like before and edit.",
    "url": "https://code.visualstudio.com/updates/v1_11#_keyboard-shortcuts-editor",
    "id": 138
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Improved keyboard layout support  \nOn Windows and macOS, we now detect when the keyboard layout has been switched while VS Code is running and will update all keyboard shortcuts appropriately.  \nOn Linux and macOS, we have made significant changes in how keyboard shortcuts are dispatched; we have switched to using the brand new [`KeyboardEvent.code`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code). This new dispatching logic will result in changes in default keyboard shortcuts for non-US standard keyboard layouts. Unfortunately, due to the indeterminate nature of `KeyboardEvent.keyCode` on these platforms, we cannot be sure in each case the exact changed keybindings and present a list. In most cases, we expect the impact to be limited to the following built-in actions:  \n* `Toggle Terminal`\n* `Create New Terminal`\n* `Zoom in`, `Zoom out`\n* `Indent Line`, `Outdent Line`\n* `Fold`, `Unfold`\n* `Split Editor`\n* `Toggle Line Comment`  \nYou can read more in [our wiki](https://github.com/microsoft/vscode/wiki/Keybinding-Issues) or in the [plan item](https://github.com/microsoft/vscode/issues/17521).  \n> Note: If you experience issues with `KeyboardEvent.code` based dispatching on macOS or Linux, you can use the setting `\"keyboard.dispatch\": \"keyCode\"` to force VS Code to dispatch on `KeyboardEvent.keyCode`.",
    "url": "https://code.visualstudio.com/updates/v1_11#_improved-keyboard-layout-support",
    "id": 139
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Text search improvements  \nSearch is now powered by the excellent tool [ripgrep](https://github.com/BurntSushi/ripgrep), from Andrew Gallant ([@BurntSushi](https://github.com/BurntSushi)), and searching should now be significantly faster. If you encounter an issue and need to revert to the previous search experience, you can set the option `\"search.useRipgrep\": false`.  \nOur ripgrep-based search can now respect `.gitignore` files as well. Enable it with the new **Use Ignore Files** button in the Search view, or by default with `\"search.useIgnoreFilesByDefault\": true`.  \n![gitignore](images/1_11/search-viewlet.png)  \nThe gear icon next to it is also new, and toggles whether search will ignore the patterns specified in the `files.exclude` and `search.exclude` settings.",
    "url": "https://code.visualstudio.com/updates/v1_11#_text-search-improvements",
    "id": 140
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Maximize and restore the panel size  \nWe have added a maximize/restore button to the panel title area:  \n![Panel](images/1_11/panel.gif)",
    "url": "https://code.visualstudio.com/updates/v1_11#_maximize-and-restore-the-panel-size",
    "id": 141
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### New setting to keep editor open even when file is deleted  \nThere is a new setting `workbench.editor.closeOnFileDelete` that can be set to `false` to keep editors open even if the file was deleted on disk. Editors will indicate if the file was deleted on disk with their label.  \n![Deleted File](images/1_11/file-deleted.png)  \n**Note**: Files that get deleted via the Explorer will still cause the editor to close.",
    "url": "https://code.visualstudio.com/updates/v1_11#_new-setting-to-keep-editor-open-even-when-file-is-deleted",
    "id": 142
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Join editors of two groups  \nA new command (`workbench.action.joinTwoGroups`) was added to join the editors of one group with the one to the left. This allows to quickly reduce the number of opened editor groups without losing any of the editors inside.",
    "url": "https://code.visualstudio.com/updates/v1_11#_join-editors-of-two-groups",
    "id": 143
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Navigate between views  \nNew commands have been added to navigate between the visible views of the application. For example, when focus is inside the first editor group, `workbench.action.navigateLeft` will bring you to the Side Bar. Similar, `workbench.action.navigateDown` would move focus to the panel.",
    "url": "https://code.visualstudio.com/updates/v1_11#_navigate-between-views",
    "id": 144
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Resize a view with keyboard  \nNew commands are available to resize the currently focused view with the keyboard. Use `workbench.action.increaseViewSize` and `workbench.action.decreaseViewSize` to change the view size in increments.",
    "url": "https://code.visualstudio.com/updates/v1_11#_resize-a-view-with-keyboard",
    "id": 145
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### New setting to reveal editor if opened  \nA new setting `workbench.editor.revealIfOpen` can be enabled to prevent opening the same file in another group if the file was already opened. One common scenario is the file picker (Quick Open): by default, it will open a file in the current active Editor Group. Changing this setting will prefer to open the file in any of the other groups in case the file is already opened there.  \n**Note**: There are still ways that the same editor will open in multiple groups, for example when you click the split editor action.",
    "url": "https://code.visualstudio.com/updates/v1_11#_new-setting-to-reveal-editor-if-opened",
    "id": 146
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n## Editor  \n### Drag and drop improvements  \nYou can now copy selected text instead of moving it when you drag and drop. The experience is the same as you have on your platform. On macOS, press and hold the `Option` key while you drag and drop. Press the `kbstyle(Ctrl)` key on Windows and press the `kbstyle(Alt)` key on Linux.  \nWhen you drag and drop with or without copying the text, the style of the mouse pointer will change accordingly. You will see a `+` (plus) image when copying.  \n![dnd](images/1_11/dnd.gif)",
    "url": "https://code.visualstudio.com/updates/v1_11#_drag-and-drop-improvements",
    "id": 147
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Git extension enabled  \nThe [new Git source control extension](https://code.visualstudio.com/updates/v1_10#_contributable-scm-providers) is now enabled by default. This Git integration goes through the same [extension points](#source-control) as third-party SCM providers. We're still working on the Git extension and if you'd like to go back to the previous version, you can run the **SCM: Disable Preview SCM** command to switch back.  \nYou can quickly tell if the Git extension is enabled by looking at the **Activity Bar** icon. The new SCM provider integration will show a merge icon instead of the Git icon:  \n![scm provider icon](images/1_11/scm-provider-icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_11#_git-extension-enabled",
    "id": 148
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Turn off occurrences highlight  \nThere is a new option, `editor.occurrencesHighlight` that can be set to `false` to turn off highlighting of the selected word or word under cursor in cases where these highlights are computed by a rich language service.",
    "url": "https://code.visualstudio.com/updates/v1_11#_turn-off-occurrences-highlight",
    "id": 149
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Auto guess encoding of files  \nYou can now let VS Code guess the encoding of a file automatically via the new `files.autoGuessEncoding` setting which is disabled by default. Once enabled, we will do an attempt at guessing the encoding from the file and use that information if there is a suitable encoding detected.  \n**Note**: there are cases where the encoding is detected wrongly or not at all. To have full control over the encoding in the workspace, use the `files.encoding` setting instead.  \nOn top of that, if you select the encoding picker on a file to change its encoding, we will now present you the guessed encoding (if any) to the top of that list, making it very easy to pick the right encoding in case the file contents are not showing correctly and we can detect the encoding from the contents:  \n![encoding](images/1_11/encoding.png)  \n**Note**: The encoding is guessed, and can be wrong. There is no 100% accurate way to find the encoding from the contents of a file. The only exception is using a BOM (byte order mark) for UTF-8 or UTF-16 files.",
    "url": "https://code.visualstudio.com/updates/v1_11#_auto-guess-encoding-of-files",
    "id": 150
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### More Fuzzy Matching  \nWe have improved the filtering and scoring of suggestions. In addition to prefix and camel-case matching continuous substring matching is supported.  \n![dnd](images/1_11/fuzzy-score.png)",
    "url": "https://code.visualstudio.com/updates/v1_11#_more-fuzzy-matching",
    "id": 151
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### IntelliSense in comments  \nThere is no more eager IntelliSense when typing in comments or strings! You can still request completions with `kbstyle(Ctrl+Space)` but quick suggestions, AKA \"24x7 IntelliSense\", are disabled by default in comments and strings. To tune the suggestions behavior to your needs, we now allow more control over the `editor.quickSuggestions` setting:  \n```json\n\"editor.quickSuggestions\": {\n\"comments\": false, // <- no 24x7 IntelliSense in comments\n\"strings\": true, // but in strings and the other parts of source files\n\"other\": true,\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_11#_intellisense-in-comments",
    "id": 152
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Set the default language for new files  \nA new setting `files.defaultLanguage` can be used to set the language mode for new files that are untitled and not saved yet. This setting avoids having to pick the language each time you open a new file if you are often working on the same file type.",
    "url": "https://code.visualstudio.com/updates/v1_11#_set-the-default-language-for-new-files",
    "id": 153
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n## Integrated Terminal  \n### Link improvements  \nThe terminal links feature that was introduced last month got some more polish this version. The experience is now aligned with the editor, requiring `kbstyle(Ctrl)` or `kbstyle(Cmd)` to be held depending on your platform.  \n![Terminal link hints](images/1_11/terminal-link-hint.png)  \nAlso all links are now validated so only links that actually go somewhere will react to user action.",
    "url": "https://code.visualstudio.com/updates/v1_11#_link-improvements",
    "id": 154
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Improved start experience on Windows  \nUnlike on macOS and Linux with their `SHELL` environment variable, Windows doesn't really have a reliable alternative. There is `COMSPEC` but unfortunately it always defaults to the 32-bit variant of Command Prompt and it's seldom modified. To work around this, we've introduced a message when the terminal is first launched on Windows that allows users to select from a set of shells detected on the machine.  \n![Terminal shell selector](images/1_11/terminal-shell-selector.png)",
    "url": "https://code.visualstudio.com/updates/v1_11#_improved-start-experience-on-windows",
    "id": 155
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Custom workspace shell settings  \nIn VS Code v1.9, we disallowed workspace settings from configuring the terminal shell as it could have potentially been exploited maliciously. We are now re-allowing this but requiring an explicit user opt-in for each workspace before the settings will be picked up.  \n![Terminal workspace settings warning](images/1_11/terminal-workspace-warn.png)",
    "url": "https://code.visualstudio.com/updates/v1_11#_custom-workspace-shell-settings",
    "id": 156
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Warn when closing window with active terminal sessions  \nThe new setting `terminal.integrated.confirmOnExit` has been added that presents a confirmation dialog when the window is closing with active terminal sessions. This is disabled by default.",
    "url": "https://code.visualstudio.com/updates/v1_11#_warn-when-closing-window-with-active-terminal-sessions",
    "id": 157
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Resizing horizontally no longer discards data  \nThanks to an [upstream PR](https://github.com/sourcelair/xterm.js/pull/616) from [Lucian Buzzo](https://github.com/LucianBuzzo), data is no longer discarded when resizing the terminal prompt horizontally.",
    "url": "https://code.visualstudio.com/updates/v1_11#_resizing-horizontally-no-longer-discards-data",
    "id": 158
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Implementation CodeLens for TypeScript  \nWe now include a CodeLens that shows the number of implementers of interfaces and abstract classes in TypeScript code.  \n![TypeScript Implementations CodeLens](images/1_11/ts-implementations-lens.png)  \nClicking on the CodeLens will display a list of all implementations.  \n![TypeScript Implementations CodeLens](images/1_11/ts-implementations-lens-expanded.png)  \nThis feature is disabled by default and requires TypeScript 2.2.1+. To enable it, add `\"typescript.implementationsCodeLens.enabled\": true` to your settings.",
    "url": "https://code.visualstudio.com/updates/v1_11#_implementation-codelens-for-typescript",
    "id": 159
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Simplified TypeScript server log collection  \nAdded a new `\"typescript.tsserver.log\"` setting to simplify the collection of logs from the TypeScript server that powers VS Code's TypeScript and JavaScript language support. These logs can be used to debug issues with JS and TS language support, and make it easier for users to provide these logs during issue investigations.  \nThe new logging experience is supported with TypeScript 2.2.2+. Set `\"typescript.tsserver.log\": \"verbose\"` and reload VS Code to enable logging to a file. Use the `\"TypeScript: Open TS Server log\"` command to open the log file in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_11#_simplified-typescript-server-log-collection",
    "id": 160
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Improved support for Objective C++  \nVS Code now includes an `objective-cpp` language mode for working with Objective-C++. Previously, `.mm` files were treated as regular C++. This release also improves syntax coloring of Objective-C++ files.",
    "url": "https://code.visualstudio.com/updates/v1_11#_improved-support-for-objective-c++",
    "id": 161
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n## Debugging  \n### Debug Menu  \nWe have added a top level debug menu with the most common debug commands:  \n![Debug Menu](images/1_11/debug-menu.png)  \n**Note**: There is a new command (**Install Additional Debuggers...**) to bring up the Extension view to search for debugger extensions.",
    "url": "https://code.visualstudio.com/updates/v1_11#_debug-menu",
    "id": 162
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Column Breakpoints Improvements  \nIt is now possible to edit multiple breakpoints on a line directly from the glyph margin context menu. Apart from this, there were issues with multiple breakpoints on a line which are now fixed.  \n![Editable Column Breakpoints](images/1_11/column-breakpoints.png)",
    "url": "https://code.visualstudio.com/updates/v1_11#_column-breakpoints-improvements",
    "id": 163
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### More detailed exception experience  \nThe editor's \"Peek UI\" has been enhanced to show additional information for thrown exceptions, For example, VS Code's built-in Node.js debugging now shows the stack trace:  \n![Exception Peek UI show Stack Trace](images/1_11/exception-peekui.png)  \nSince this feature requires some adoption effort by debugger extensions, do not expect to see additional exception information in other debugger extensions immediately.",
    "url": "https://code.visualstudio.com/updates/v1_11#_more-detailed-exception-experience",
    "id": 164
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n## Node Debugging  \n### Transitioning to the \"inspector\" protocol  \nIn the February milestone, we folded the two Node.js debuggers ('node' and 'node2') into a single Node.js debugging experience and introduced a new launch configuration attribute `protocol` to control which protocol to use (for details see the [section in the February release notes](https://code.visualstudio.com/updates/v1_10#_node2-transitioning).  \nIn this milestone, we've changed the default value for `protocol` from `legacy` to `auto`. So if you don't specify the `protocol` explicitly in your launch configuration, VS Code Node.js debugging will now try to detect the protocol used by the targeted runtime automatically. Since we do not want to switch users to the new \"inspector\" protocol too aggressively, we will use the new protocol only for 8.x versions of Node.js.  \nIf you experience problems with this automatic protocol switching, you can get back to the old behavior by explicitly setting `protocol` to `legacy`.",
    "url": "https://code.visualstudio.com/updates/v1_11#_transitioning-to-the-inspector-protocol",
    "id": 165
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Async call stacks  \nWhen debugging async JavaScript in Node.js or Chrome, we now show the async frames that led to the current call stack across async calls. This is currently only supported when debugging with the [inspector protocol](https://code.visualstudio.com/updates/v1_10#_node2-transitioning) via `\"protocol\": \"inspector\"`. It can be disabled by setting `\"showAsyncStacks\": false` in the launch config.  \nExample:  \nIn this code snippet, `fetchData` is an async function that returns a Promise. Without async stacks, we can't see the calls that happened before the Promise was resolved:  \n![Async Frames in Call Stack](images/1_11/async-stack-before.png)  \nBut with the async call stacks, we can see the full call stack that produced the async call:  \n![Async Frames in Call Stack](images/1_11/async-stack-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_11#_async-call-stacks",
    "id": 166
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Access Loaded Scripts  \nIt is now possible to access the loaded scripts of a JavaScript runtime. This is useful if you need to set a breakpoint in a script that is not part of your workspace and therefore cannot be easily located and opened through normal VS Code file browsing. A typical scenario for this is a remote debugging session: you attach to a remote Node.js program and have no code available locally. See issue [#20355](https://github.com/microsoft/vscode/issues/20355) for other scenarios that drove this enhancement.",
    "url": "https://code.visualstudio.com/updates/v1_11#_access-loaded-scripts",
    "id": 167
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n## Extension Authoring  \n### Source Control  \nA stable Source Control API was released this month which lets you create source control extensions integrated within VS Code. You can learn all about it in the [Source Control in VS Code](https://code.visualstudio.com/docs/extensionAPI/api-scm) documentation page.  \nSome extension developers have already started adopting it:  \n- [vscode-perforce](https://github.com/stef-levesque/vscode-perforce)",
    "url": "https://code.visualstudio.com/updates/v1_11#_source-control",
    "id": 168
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### API Improvements  \n* The end of line sequence a document uses (`crlf` or `lf`) is now exposed via `TextDocument#eol`. Also, the `TextEdit` allows you to change EOL-sequence of a document.\n* We added these new completion item kinds: `Constant`, `Struct`, and `EnumMember` completing the existing `Enum` kind.",
    "url": "https://code.visualstudio.com/updates/v1_11#_api-improvements",
    "id": 169
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Debug Extensions  \n* **ExceptionInfoRequest now used by VS Code**  \nIf a debug adapter returns a non-falsy `supportsExceptionInfoRequest` capability, VS Code will now use the `ExceptionInfoRequest` to obtain additional information for the exception. Currently the attributes `exceptionId`, `exception`, `breakMode`, and `details.stackTrace` are displayed in VS Code's exception Peek UI.  \n* **Server mode for debug adapters**  \nVS Code always supported running debug adapters in server mode. However this was only officially supported for developing debug adapters, not for running them in production. With this release, we are starting to support the \"server mode\" as an official \"run mode\" for debug adapters. Please find the details for how to use this feature in the original [feature request](https://github.com/microsoft/vscode/issues/22080#issuecomment-286068943).  \n* **Changed semantics of `StoppedEvent.reason`**  \nThe semantics of the `reason` attribute of `StoppedEvent` has been changed slightly. Previously, it was specified that the reason attribute is shown in the UI (which has the consequence that the value needs to be translated to different languages). This makes it impossible for VS Code to interpret the `reason` attribute in a robust way. Starting with this release, VS Code uses the new attribute `description` when the \"stopped\" reason needs to be shown in the UI and uses the `reason` attribute to interpret the reason. If `description` is missing, VS Code falls back to the previous behavior.  \n* **New attribute `presentationHint` for `StackFrame` type**  \nA new optional attribute `presentationHint` has been added to the `StackFrame` type which can be used to control how the client renders a stack frame in the UI.  \n* **Usage example for exception configuration API**  \nThe VS Code [Mono debugger extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.mono-debug) has been enhanced to use the recently introduced `exceptionOptions` attribute on the `SetExceptionBreakpointsRequest` for configuring exception catchpoints.  \n![Configuring Exceptions](images/1_11/config-exceptions.gif)  \nThe [implementation](https://github.com/microsoft/vscode-mono-debug/blob/main/src/typescript/extension.ts#L90) can serve as an example for how to use the debug adapter protocol (DAP) from an extension to add specific functionality that is not provided by the generic VS Code debugger UI.",
    "url": "https://code.visualstudio.com/updates/v1_11#_debug-extensions",
    "id": 170
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Increase Extension Size Limit  \nIn a collaboration with the Visual Studio Marketplace, we've increased the size limit of extensions in the Marketplace from 20MB to 100MB. You'll need to update to `vsce@1.20.0` to benefit from this.",
    "url": "https://code.visualstudio.com/updates/v1_11#_increase-extension-size-limit",
    "id": 171
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n## Miscellaneous  \n### Startup profiling for everyone  \nWe have added a new command-line option that allows you to profile the startup of VS Code. Run code like this `code --prof-startup` and it will create profiles for the main and renderer process. These profiles are stored in your home directory and we encourage you to share them with us. Often performance out in the wild is vastly different from our machines and getting more insights from you will help us improve VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_11#_startup-profiling-for-everyone",
    "id": 172
  },
  {
    "content": "See what is new in the Visual Studio Code March 2017 Release (1.11)  \n### Coming Soon: Support for community localization  \nVS Code currently ships with support for [9 languages](https://code.visualstudio.com/docs/getstarted/locales): French, Italian, German, Spanish, Russian, Traditional and Simplified Chinese, Japanese, and Korean. In the March release, we started moving the current internal localization process to support the open translation platform called [Transifex](https://www.transifex.com/).  \nOnce this work is done, we will be able to accept translations from the community directly instead of having to [submit a bug](https://github.com/microsoft/vscode/issues/5405) and wait for us to localize the string(s). Even more exciting though, this work enables VS Code to be localized by the community into additional languages such as [Portuguese](https://github.com/microsoft/vscode/issues/15077) and [Polish](https://github.com/microsoft/vscode/issues/14241). In fact, we're opening up translations into 8 additional languages: Czech, Dutch, Hungarian, Polish, Portuguese (Brazil and Portugal), Swedish, and Turkish.  \nIf you are passionate about having a high quality VS Code in your native language, please come and help us! Learn more at the [Visual Studio Code Community Localization Project](https://github.com/microsoft/Localization/wiki/Visual-Studio-Code-Community-Localization-Project).",
    "url": "https://code.visualstudio.com/updates/v1_11#_coming-soon:-support-for-community-localization",
    "id": 173
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Keyboard Shortcuts editor  \nSearch in **Keyboard Shortcuts** editor is improved to support all possible terms for modifier keys in corresponding platforms.  \n* `meta`, `cmd`, `command`, `windows`\n* `ctrl`, `control`\n* `alt`, `option`\n* `shift`  \nYou can now also see the conflicts in the order of precedence.  \n![Keyboard shortcuts editor](images/1_12/keyboard-shortcuts-editor.gif)",
    "url": "https://code.visualstudio.com/updates/v1_12#_keyboard-shortcuts-editor",
    "id": 175
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Source control  \nSince the SCM API was released, there has been good progress in source control extensions around the community. Here are some of the SCM extensions already published in the Marketplace:  \n* [Perforce for VS Code](https://marketplace.visualstudio.com/items?itemName=slevesque.perforce) - Perforce integration.\n* [Hg](https://marketplace.visualstudio.com/items?itemName=mrcrowl.hg) - for Mercurial repositories.  \nWe are very excited about the possibilities of this API and expect more extensions to come out in the near future!",
    "url": "https://code.visualstudio.com/updates/v1_12#_source-control",
    "id": 176
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Git  \nThere has been a lot of progress improving the [Git extension](https://github.com/microsoft/vscode/tree/main/extensions/git) inside VS Code. This Git integration goes through the same [extension points](https://code.visualstudio.com/docs/extensionAPI/api-scm) as third-party SCM providers.  \n**Note:** Starting in June, the legacy git integration will be completely removed. Until then, you can still revert back to it using the **SCM: Enable Legacy Git** command.",
    "url": "https://code.visualstudio.com/updates/v1_12#_git",
    "id": 177
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### macOS: Sierra Tabs  \nWith the help of the [Electron update](#electron-update), we can bring back basic support for native macOS Sierra tabs for window management. You can enable them via the `window.nativeTabs` setting after a restart. Once enabled, depending on your OS settings, new tabs will open when you open new windows. Make sure to show the tab bar (**View** > **Show Tab Bar**) to access tabs.  \n![native tabs](images/1_12/native-tabs.gif)  \n**Note**: Native tabs cannot be used with a custom title. When you enable native tabs, the title bar will change to native styling too.",
    "url": "https://code.visualstudio.com/updates/v1_12#_macos:-sierra-tabs",
    "id": 178
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### macOS: Mouse swipe to navigate  \nWe added a new setting `workbench.editor.swipeToNavigate` that allows you to navigate between editors using 3-finger-swipe gesture with the trackpad on macOS. Swiping left or right will navigate across recently used editors in any editor group. This is similar to the **Go** > **Back** and **Go** > **Forward** commands we already had but will skip navigation from occurring within documents.  \n**Note**: The same commands that swiping triggers can also be executed via key bindings from the new commands `workbench.action.openPreviousRecentlyUsedEditor` and `workbench.action.openNextRecentlyUsedEditor`.  \n**Note**: We currently only support 3-finger-swipe gesture. Make sure that your trackpad settings for swiping are configured like the following to make this work:  \n* Swipe between pages: Scroll left or right with three fingers.\n* Swipe between full-screen apps: Swipe left or right with four fingers.",
    "url": "https://code.visualstudio.com/updates/v1_12#_macos:-mouse-swipe-to-navigate",
    "id": 179
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Integrated Terminal link line and column ranges  \nLinks to files with line and column ranges are now supported.  \n![Terminal line column links](images/1_12/terminal-line-col-link.gif)",
    "url": "https://code.visualstudio.com/updates/v1_12#_integrated-terminal-link-line-and-column-ranges",
    "id": 180
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Languages  \n### TypeScript 2.3  \nVS Code now ships with [TypeScript 2.3.2](https://devblogs.microsoft.com/typescript/announcing-typescript-2-3/). This update brings some [new language features](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#typescript-23) and fixes a number of important bugs.",
    "url": "https://code.visualstudio.com/updates/v1_12#_typescript-2.3",
    "id": 181
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Type checking for JavaScript files  \nTypeScript 2.3 also brings type checking to plain JavaScript files. This is a great way to catch common programming mistakes and these type checks also enable some exciting quick fixes for JavaScript.  \n![Using type checking and quick fixes in a JavaScript file](images/1_12/ts-checkjs-example.gif)  \nTypeScript can infer types in `.js` files same as in `.ts` files. When types cannot be inferred, they can be specified using JSDoc comments. You can read more about how TypeScript uses JSDoc for JavaScript type checking [here](https://github.com/microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files).  \nType checking of JavaScript is optional and opt-in. Existing JavaScript validation tools such as ESLint can be used alongside the new built-in type checking functionality.  \nYou can get started with type checking a few different ways depending on your needs.  \n**Per file**  \nThe easiest way to enable type checking in a JavaScript file is by adding `// @ts-check` to the top of a file.  \n```js\n// @ts-check\nlet easy = 'abc'\neasy = 123 // Error: Type '123' is not assignable to type 'string'\n```  \nUsing `// @ts-check` is a good approach if you just want to try type checking in a few files but not yet enable it for an entire codebase.  \n**Using a Setting**  \nTo enable type checking for all JavaScript files without changing any code, just add `\"js/ts.implicitProjectConfig.checkJs\": true` to your workspace or user settings. This enables type checking for any JavaScript file that is not part of a `jsconfig.json` or `tsconfig.json` project.  \nYou can opt individual files out of type checking with a `// @ts-nocheck` comment at the top of the file:  \n```js\n// @ts-nocheck\nlet easy = 'abc'\neasy = 123 // No error\n```  \nYou can also disable individual errors in a JavaScript file using a `// @ts-ignore` comment on the line before the error:  \n```js\nlet easy = 'abc'\n// @ts-ignore\neasy = 123 // No error\n```  \n**Using a JSConfig or TSConfig**  \nTo enable type checking for JavaScript files that are part of a `jsconfig.json` or `tsconfig.json`, simply add `\"checkJs\": true` to the project's compiler options:  \n`jsconfig.json`:  \n```json\n{\n\"compilerOptions\": {\n\"checkJs\": true\n},\n\"exclude\": [\n\"node_modules\"\n]\n}\n```  \n`tsconfig.json`:  \n```json\n{\n\"compilerOptions\": {\n\"allowJs\": true,\n\"checkJs\": true\n},\n\"exclude\": [\n\"node_modules\"\n]\n}\n```  \nThis enables type checking for all JavaScript files in the project. You can use `// @ts-nocheck` to disable type checking per file.  \nJavaScript type checking requires TypeScript 2.3. If you are unsure what version of TypeScript is currently active in your workspace, simply run the **TypeScript: Select TypeScript Version** command to check.",
    "url": "https://code.visualstudio.com/updates/v1_12#_type-checking-for-javascript-files",
    "id": 182
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Change TypeScript versions without reloading VS Code  \nChanging the active version of TypeScript no longer requires VS Code to be reloaded.",
    "url": "https://code.visualstudio.com/updates/v1_12#_change-typescript-versions-without-reloading-vs-code",
    "id": 183
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Markdown Preview and Zoom  \nWith the [update of the Electron](#electron-update) shell, we fixed the issue with clipping of Markdown previews and the in-product release notes when using Zoom.",
    "url": "https://code.visualstudio.com/updates/v1_12#_markdown-preview-and-zoom",
    "id": 184
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Surround snippets for Markdown  \nYou can now more quickly bold or italicize text in a Markdown document using snippets. Simply select some text and run the `insert snippet` command. The bold, italic, and quote snippets for Markdown have all been updated to operate on selected text.  \nYou can also setup a key binding to use these snippets:  \n```json\n{\n\"key\": \"cmd+k 8\",\n\"command\": \"editor.action.insertSnippet\",\n\"when\": \"resourceLangId == 'markdown'\",\n\"args\": {\n\"name\": \"Insert bold text\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_12#_surround-snippets-for-markdown",
    "id": 185
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Editor  \n### Dynamic IntelliSense sorting  \nThe editor now re-sorts the completions list while you type. That ensures that the completions you need are always on top and easy to select.  \n![Dynamic Sort](images/1_12/completions-dynamic-sort.gif)",
    "url": "https://code.visualstudio.com/updates/v1_12#_dynamic-intellisense-sorting",
    "id": 186
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Tasks  \n### Grunt task auto-detection  \nGrunt auto-detection has been implemented for the new terminal task runner. With the new terminal runner, tasks are now detected for both [Grunt](https://gruntjs.com) and [Gulp](https://gulpjs.com/) if both corresponding files (`Gruntfile.js`, `gulpfile.js`) are present in a workspace.  \nIn addition, the proposed task API has been polished. If you had already started to use it, you might encounter some minor breaking changes.",
    "url": "https://code.visualstudio.com/updates/v1_12#_grunt-task-auto-detection",
    "id": 187
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Debugging  \n### Editing Watch expressions  \nIt is now possible to edit Watch expressions using the context menu.  \n![edit watch](images/1_12/edit-watch.png)",
    "url": "https://code.visualstudio.com/updates/v1_12#_editing-watch-expressions",
    "id": 188
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Node Debugging  \n### Just My Code improvements  \nSkipping files when stepping has been available for the `inspector` protocol of the Node.js debugger for three releases. With this release, it is now available for the `legacy` protocol as well. To control a file for skipping, use the context menu command **Toggle skipping this file** on a stack frame in the **CALL STACK** view.  \n![toggle skip files](images/1_12/toggle-skip-file.png)",
    "url": "https://code.visualstudio.com/updates/v1_12#_just-my-code-improvements",
    "id": 189
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Column breakpoints improvements  \nSetting breakpoints on a particular column is now supported by the [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension, and by the `inspector` protocol of the Node.js debugger, when debugging (yet to be released) Node 8. A column breakpoint can be set using `kb(editor.debug.action.toggleInlineBreakpoint)` or via the context menu during a debug session.  \n![column BPs](images/1_12/column-breakpoints.gif)",
    "url": "https://code.visualstudio.com/updates/v1_12#_column-breakpoints-improvements",
    "id": 190
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Extension Authoring  \n### New APIs  \nWe have added some new APIs:  \n* More completion and symbol item kinds: `Event`, `Operator`, and `TypeParameter`.\n* You can now open a text document as a preview editor. This means its tab will be reused when opening another document. This can be done like so: `vscode.window.showTextDocument(doc, { preview: true})`.\n* We have added functions to show progress for a long running operation. For now, we have defined two locations for progress in the UI: the **Source Control** view and a window-global progress indication in the Status Bar.  \nTake a look at the following sample:  \n```ts\nvscode.window.withProgress({\nlocation: vscode.ProgressLocation.Window,\ntitle: 'My long running operation'\n}, async (progress) => {\n// Progress is shown while this function runs.\n// It can also return a promise which is then awaited\nprogress.report({ message: 'Doing this' });\nawait step1();\n\nprogress.report({ message: 'Doing that' });\nawait step2();\n})\n```",
    "url": "https://code.visualstudio.com/updates/v1_12#_new-apis",
    "id": 191
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Node.js update (6.x to 7.x)  \nWith the update of Electron to 1.6.6, the Node.js version that is used to run all extensions updated from 6.4.0 to 7.4.0. There are some breaking changes coming with this major update of Node.js, though in general the impact should be minor. Please refer to [this overview](https://github.com/nodejs/node/wiki/Breaking-changes-between-v6-and-v7) for a complete list of breaking changes from Node.js 6 to 7.  \nOne consequence of the Electron update is that promise rejections are now treated as uncaught exceptions by the Node.js runtime even if the reject is caught later. Since this behavior is annoying when debugging an extension, we've introduced a new exception option to control promise rejections independent from regular exceptions:  \n![new promise rejection option](images/1_12/promise-reject-option.png)",
    "url": "https://code.visualstudio.com/updates/v1_12#_node.js-update-6.x-to-7.x",
    "id": 192
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### Debugger extensions  \n**`evaluateName` attribute will become mandatory for `Add to Watch` and `Copy Value` actions**  \nVS Code tries to implement the **Add to Watch** and **Copy Value** actions by using the data from the **VARIABLES** view and a JavaScript-biased heuristic for building expressions that can be used with the evaluate request.  \nSince this approach does not work for all languages, we've introduced the `evaluateName` attribute for variables some time ago. If the `evaluateName` attribute is available for a variable VS Code will use it 'as is' for the evaluate request. If `evaluateName` is missing, VS Code falls back to the old approach.  \nSince we plan to remove the fallback completely in the May release, debug adapters must support the `evaluateName` attribute if they want to have the **Add to Watch** and **Copy Value** actions available in the future.  \n**New argument `terminateDebuggee` for `disconnect` request**  \nAn optional argument, `terminateDebuggee`, has been added to the `disconnect` request. If a debug adapter has opted into this feature with the `supportTerminateDebuggee` capability, a client can use this to control whether the debuggee should be terminated when the debugger is disconnected.",
    "url": "https://code.visualstudio.com/updates/v1_12#_debugger-extensions",
    "id": 193
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n## Miscellaneous  \n### Electron update  \nIn this release, we updated from Electron 1.4.x to 1.6.6. This brings a Chrome update from version 53 to 56 and Node.js from 6.4 to 7.4. Among other things, this update enabled us to bring back native macOS Sierra tabs for window management (behind a setting `window.nativeTabs`) as well as better crash reporting for the processes we spawn. This update also avoids some graphic glitches we have seen on macOS (background artifacts) as well as improved scaling of all UI elements when running with scaling enabled on Windows.  \nUnfortunately, we are also seeing some regressions with this update and we ask for your patience until we can move forward to a newer Electron version that fix these issues.  \nSpecifically:  \n* [24981](https://github.com/microsoft/vscode/issues/24981): Backspace can not erase the last character during Chinese/Japanese IME conversion (macOS)\n* [24633](https://github.com/microsoft/vscode/issues/24633): Unconfirmed text of CJK IME collapse to one character in Integrated Terminal\n* [24643](https://github.com/microsoft/vscode/issues/24643): Webview Flickering on Resize\n* [24707](https://github.com/microsoft/vscode/issues/24707): 1.6.2 update (<1.5) Completely breaks Dragon menu/submenu voice control (updated)\n* [25700](https://github.com/microsoft/vscode/issues/25700): Windows: dropdown selector empty after reload of window  \n**Note:** If you are an extension author, please review the impact of this Electron update under the [Extension Authoring](#extension-authoring) section.",
    "url": "https://code.visualstudio.com/updates/v1_12#_electron-update",
    "id": 194
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### China downloads  \nWe've improved the install and update experience for Chinese users, who have always reported slow download speeds when fetching releases of VS Code. We now publish and distribute our releases to network servers located within China so you should start getting much faster speeds in that territory. Some of our test scenarios witnessed a speedup of `300x` \u26a1\ufe0f!  \nThese improvements are available when downloading VS Code directly from our website as well as when receiving automatic updates.",
    "url": "https://code.visualstudio.com/updates/v1_12#_china-downloads",
    "id": 195
  },
  {
    "content": "See what is new in the Visual Studio Code April 2017 Release (1.12)  \n### macOS blurry icons  \nThis issue appears if certain environment variables are set when VS Code launches [#24820](https://github.com/microsoft/vscode/issues/24820). The workaround is to either launch VS Code from the macOS Dock or clear the `LC_ALL` environment variable (`export LC_ALL=`) before launching from the terminal. The [Insiders](https://code.visualstudio.com/insiders) build applies this workaround and clears `LC_ALL`.  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_12#_macos-blurry-icons",
    "id": 197
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Add multiple cursors with Ctrl / Cmd + Click  \nWe have introduced a new setting, `editor.multiCursorModifier`, to change the modifier key for applying multiple cursors to `Cmd+Click` on macOS and `Ctrl+Click` on Windows and Linux. This lets users coming from other editors such as Sublime Text or Atom continue to use the keyboard modifier they are familiar with.  \nThe setting can be set to:  \n* `ctrlCmd` - Maps to `Ctrl` on Windows and `Cmd` on macOS.\n* `alt` - The existing default `Alt`.  \nThere's also a new menu item **Use Ctrl+Click for Multi-Cursor** in the **Selection** menu to quickly toggle this setting.  \nThe **Go To Definition** and **Open Link** gestures will also respect this setting and adapt such that they do not conflict. For example, when the setting is `ctrlCmd`, multiple cursors can be added with `Ctrl/Cmd+Click`, and opening links or going to definition can be invoked with `Alt+Click`.  \nWith fixing [Issue #2106](https://github.com/microsoft/vscode/issues/2106), it is now possible to also remove a cursor by using the same gesture on top of an existing selection.",
    "url": "https://code.visualstudio.com/updates/v1_13#_add-multiple-cursors-with-ctrl-/-cmd-+-click",
    "id": 198
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Workbench  \n### Filenames in symbol search results  \nYou can use workspace symbol search (`kb(workbench.action.showAllSymbols)`) to quickly find symbols in your workspace. The list of results now includes the filename of each symbol:  \n![symbol search includes filename](images/1_13/typescript-workspace-symbol-names.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_filenames-in-symbol-search-results",
    "id": 199
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Disable menu bar mnemonics  \nA new setting `window.enableMenuBarMnemonics` was added to disable all mnemonics (hot keys) in the menu bar (on Windows and Linux). This frees up some `Alt+` keyboard shortcuts to bind to other commands.",
    "url": "https://code.visualstudio.com/updates/v1_13#_disable-menu-bar-mnemonics",
    "id": 200
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Go to Implementation and Go to Type Definition added to the Go menu  \nThe **Go** menu now includes the **Go to Implementation** and **Go to Type Definition** commands:  \n![New Go menu items](images/1_13/go-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_go-to-implementation-and-go-to-type-definition-added-to-the-go-menu",
    "id": 201
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Preserving view state for resource editors  \nWe are now preserving the view state for resource editors when you switch between them. This comes in handy when debugging internal modules since we now preserve the scroll position and all other view data for internal module editors. However, we always clear the view state when a user closes the editor.",
    "url": "https://code.visualstudio.com/updates/v1_13#_preserving-view-state-for-resource-editors",
    "id": 202
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### High Contrast theme  \nWe have improved the High Contrast theme to include more token colors and to use selection and Status Bar colors for clearer contrast.  \n![High Contrast theme improvements](images/1_13/high-contrast.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_high-contrast-theme",
    "id": 203
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### New theming colors  \nWe received a lot of feedback for our workbench theming support and are happy to see more and more themes adopting the workbench colors! During this milestone, we added almost 50 new colors as well as did some tweaks to existing colors. These colors can be set by themes or directly by the user with the `workbench.colorCustomizations` setting.  \nYou can review the new colors in the updated [Theme Color Reference](https://code.visualstudio.com/docs/getstarted/theme-color-reference).  \nBelow are the existing color behavior changes:  \nKey|Description\n---|-------\n`panel.border`|Now overwrites the value of `contrastBorder`, allowing a more specific color if `contrastBorder` is set.\n`tab.border`|Now overwrites the value of `contrastBorder`, allowing a more specific color if `contrastBorder` is set.\n`editorGroup.border`|Now overwrites the value of `contrastBorder`, allowing a more specific color if `contrastBorder` is set.\n`list.*`|All list colors can now be set even in the presence of `contrastBorder` and `contrastActiveBorder`.",
    "url": "https://code.visualstudio.com/updates/v1_13#_new-theming-colors",
    "id": 204
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Multi-root workspaces  \nDuring this milestone, we made some significant steps towards supporting multi-root (multiple project folder) workspaces in VS Code. In case you are wondering why it is taking us a little bit longer to tackle this feature request, please read [Daniel's excellent explanation](https://github.com/microsoft/vscode/issues/396#issuecomment-301842430).  \nWe focused on UX and sketched up how we could provide this feature with our current architecture without introducing too many new concepts. After sharing the designs with the engineering team, we ran 2 user studies to validate our assumptions. We encourage you to watch the recordings of these studies if you are interested and provide feedback:  \n* group 1: [https://youtu.be/48Y6tB3DN1g](https://youtu.be/48Y6tB3DN1g)\n* group 2: [https://youtu.be/kHL6Rt-dLm0](https://youtu.be/kHL6Rt-dLm0)  \nWith the UX work behind us, we feel that we can finally start implementing this feature request. Thanks for your patience!",
    "url": "https://code.visualstudio.com/updates/v1_13#_multi-root-workspaces",
    "id": 205
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Editor  \n### Merge conflict coloring and actions  \nInline merge conflicts are now colored and come with actions to accept either or both of the changes. Previously available as the popular Better Merge extension, this functionality is now built-in. Thanks to [Phil Price (@pprice)](https://github.com/pprice), the author of Better Merge, for the PR.  \n![markdown symbols with header level](images/1_13/merge-conflict.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_merge-conflict-coloring-and-actions",
    "id": 206
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Suggestion list and documentation side by side  \nWhen IntelliSense autocomplete/suggestions are triggered, press `kb(toggleSuggestionDetails)` to view the documentation for the suggestion item in focus as before. The documentation will now expand to the side instead of being overlaid on the suggest widget, enabling you to read the documentation and navigate the list at the same time.  \n![auto expanded docs in autocomplete](images/1_13/suggest.gif)  \nWhen the documentation fly-out is expanded, it will stay expanded (across VS Code windows, sessions and updates) every time autocomplete/suggestions is triggered, until you explicitly close it either using the close button or by pressing `kb(editor.action.triggerSuggest)` again.  \nFor keyboard centric users who want to navigate up and down long documentation, press `kb(toggleSuggestionFocus)` to move the focus to the documentation fly-out such that it can now receive keyboard shortcuts for Page Up/Down actions.  \nFor screen reader users, once the documentation fly-out is expanded, navigating the suggestion list will read out the label and documentation (if any) of the item in focus.",
    "url": "https://code.visualstudio.com/updates/v1_13#_suggestion-list-and-documentation-side-by-side",
    "id": 207
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Emmet abbreviation expansion in suggestion list  \nUntil now, the default behavior for expanding an Emmet expansion has been to use the `kbstyle(Tab)` key. There were two issues with this design:  \n* Many unexpected Emmet expansions occurred when the user wanted to just add an indent.\n* On the other hand, items from the suggestion list got inserted when the user was expecting the Emmet abbreviation to be expanded.  \nBoth of these issues can be now solved by having the expanded Emmet abbreviations show up in the suggestion list and freeing up the `kbstyle(Tab)` key for what it was meant to do, indenting.  \nSet `emmet.useNewEmmet` to `true` to start using this new feature. This feature is best used with the suggestion documentation fly-out expanded where you can preview the expanded abbreviation as you type. Note that `kbstyle(Tab)` key will no longer expand the abbreviation by default.  \n![Emmet abbreviation expansion in autocomplete](images/1_13/emmet.gif)  \nIf you have `editor.quickSuggestions` turned off, you can use one of the methods below to get Emmet expansion:  \n* Manually trigger the suggestion by pressing `kb(editor.action.triggerSuggest)` and then choose the expansion from the suggestion list.\n* Run the command **Emmet: Expand Abbreviation** explicitly from the **Command Palette**.\n* Bind your own keyboard [shortcut](https://code.visualstudio.com/docs/getstarted/keybindings) to **Emmet: Expand Abbreviation** (command id `editor.emmet.action.expandAbbreviation`).  \nYou will see two kinds of suggestions in HTML-like files:  \n* The expansion for the abbreviation that has been typed (you can turn this off by setting `emmet.showExpandedAbbreviation` to `false`).\n* All possible abbreviations whose prefix is the text that has been typed (you can turn this off by setting `emmet.showAbbreviationSuggestions` to `false`). For example, `a`, `a:link`, `a:mail`, `area` are suggested when you type `a`. This is helpful for discovering Emmet abbreviations.  \nIn CSS/LESS/SCSS files, you will only see the single abbreviation you have typed.  \nTo implement this feature, we replaced the single monolithic [Emmet library](https://github.com/emmetio/emmet) with smaller re-usable [Emmet modules](https://www.npmjs.com/%7Eemmetio). In doing so, most of the Emmet commands were re-implemented. If you see any changes in the behavior of any Emmet commands, please create an issue. We hope to complete this work in the next milestone, after which the setting `emmet.useNewEmmet` will be deprecated and the new model will be made default.",
    "url": "https://code.visualstudio.com/updates/v1_13#_emmet-abbreviation-expansion-in-suggestion-list",
    "id": 208
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Multi cursor snippets  \nYou can now combine snippets and multiple cursors.  \n![multi cursor snippets](images/1_13/snippets-multi-cursor.gif)  \nIn addition, you also now nest snippets, meaning you can add a placeholder of a snippet within another snippet and their placeholders will be merged.",
    "url": "https://code.visualstudio.com/updates/v1_13#_multi-cursor-snippets",
    "id": 209
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Strict snippets  \nSnippets can have placeholders and variables. The snippet syntax is defined [here](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax) where `$1, $2...` are tabstops and `$varName1, $varName2...` are variables. Note that they can only differ by what follows the `$`-sign, numbers are tabstops and words refer to variables. Prior to this milestone, VS Code was using an internal syntax for snippets. Textmate-style snippets were rewritten to the internal syntax and there was an unfortunate bug that caused variables to be turned into tabstops. This is what we have done to ensure a smooth transition:  \n* When we encounter snippets that use variables we don't [know](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables), we turn them into placeholders and warn the extension author (not the user).\n* Also, we log a telemetry event so can make issues/PRs against extensions that are using this unfortunate construct.  \nIn the future, you can expect us to continue to support these types of snippets for a little longer. Snippets fall into two categories; those that the user created and those that come from an extension. We will be strict on extension snippets while keeping support for user created snippets.",
    "url": "https://code.visualstudio.com/updates/v1_13#_strict-snippets",
    "id": 210
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Find widget  \nYou can now resize the Find widget horizontally. You can review the full text easily if it's longer than the original width of the Find widget.  \n![Resize Find widget](images/1_13/resize-find-widget.gif)  \nAlso you can now scroll beyond the first line when the Find widget is visible and the Find widget won't cover the matched results. We'll automatically scroll the window a little bit to make sure the matched results are not covered by the Find widget when you are navigating between them.  \n![Uncover matched results](images/1_13/uncover-matched-results.gif)  \nWe introduced two settings to help you customize the Find widget behaviors:  \n* You can now set `editor.find.seedSearchStringFromSelection` to `false` if you don't want to seed the search string in Find widget from current editor selection.\n* You can set `editor.find.autoFindInSelection` to `true` and then Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor.  \nWe also added a new command `toggleFindInSelection` (`kb(toggleFindInSelection)`) to toggle Find In Selection so you can keep your hands on the keyboard when switching all Find options.",
    "url": "https://code.visualstudio.com/updates/v1_13#_find-widget",
    "id": 211
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Folding controls  \nThe visibility of the folding controls next to the line numbers can now be configured by the setting `editor.showFoldingControls`:  \n* `mouseover` - The existing behavior where controls for non-collapsed regions are hidden unless the mouse cursor is over the editor gutter.\n* `always`- Folding controls are always shown.",
    "url": "https://code.visualstudio.com/updates/v1_13#_folding-controls",
    "id": 212
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Letter spacing  \nThanks to [@hoovercj](https://github.com/hoovercj) in [PR #22979](https://github.com/microsoft/vscode/pull/22979), there is a new editor setting, `editor.letterSpacing`, similar to the CSS letter-spacing property:  \n![letter spacing](images/1_13/letter-spacing.gif)",
    "url": "https://code.visualstudio.com/updates/v1_13#_letter-spacing",
    "id": 213
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Integrated Terminal  \n### Dragging files to the terminal to paste path  \nYou can now drag files and folder from the File Explorer and files from your OS file manager to paste the path name into the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_13#_dragging-files-to-the-terminal-to-paste-path",
    "id": 214
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Unicode character width improvements  \nUnicode characters in the Integrated Terminal are now sized explicitly which means that applications like [vtop](https://www.npmjs.com/package/vtop) which make extensive use of these characters should now render correctly.  \nBefore:  \n![Better unicode width before](images/1_13/terminal-vtop-before.png)  \nAfter:  \n![Better unicode width after](images/1_13/terminal-vtop-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_unicode-character-width-improvements",
    "id": 215
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Tasks  \n### Run tasks in the Integrated Terminal  \nYou can now configure tasks so that they are executed inside the Integrated Terminal. By adding a `runner` property to the `tasks.json` file as shown below you enable the Integrated Terminal.  \n```ts\n{\n\"version\": \"0.1.0\",\n\"runner\": \"terminal\",\n...\n}\n```  \nIf you want to switch back to the old runner, remove the property or set its value to `\"process\"`.",
    "url": "https://code.visualstudio.com/updates/v1_13#_run-tasks-in-the-integrated-terminal",
    "id": 216
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Preview: Tasks version 2.0  \nYou can opt into the new tasks version 2.0.0 but please note that this version is currently a preview and still under active development. We make it available in order to get early feedback.  \nTo enable the tasks preview, set the `version` attribute to `\"2.0.0\"` :  \n```json\n{\n\"version\": \"2.0.0\"\n}\n```  \nWith version 2.0.0 enabled, the tasks from different task runners like Gulp or Grunt are automatically detected and you can run them with the `Run Task` command. Tasks are currently auto detected from the task runners Gulp, Grunt, Jake, and from the scripts section in `package.json` files. We will provide an API so that you can contribute task detection for other task runners. This API has been further polished during this iteration, but we left in the proposed state for this release (see [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts#L13)).  \nThe task selection dialog now shows you both tasks that you have configured in the `tasks.json` file and tasks that where automatically detected. For example, in a workspace with a gulp file defining a `build` and a `watch` task and a `tasks.json` file that defines a `Deploy` task, the task selection dialog looks as follows:  \n![task selection](images/1_13/task-selection.png)  \nWhen the system detects a task (for example, a build task provided through a gulp file), it usually doesn't know which problem matchers to associate with the task. You can customize a detected task inside the `tasks.json` file. To do so, press the gear icon to the right of a detected task. This will insert a section into the `tasks.json` file where you can customize the detected task.  \nThe video below illustrates how to customize the gulp `build` task by adding the TypeScript problem matcher (named `$tsc`) to it and by renaming it to `My Main Build`.  \n![task customize](images/1_13/task-customize.gif)",
    "url": "https://code.visualstudio.com/updates/v1_13#_preview:-tasks-version-2.0",
    "id": 217
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Debugging  \n### Improved stepping performance  \nPer a [user recommendation](https://github.com/microsoft/vscode/issues/25605), we've improved stepping performance by fetching parts of the call stack and the corresponding variables lazily, only if the user has not already requested the next \"step\" operation. With this change, VS Code will always fetch the top frame of the stack in order to be able to show the correct source for the current location. The rest of the stack will be updated only if the user has not continued stepping for 0.4 seconds.  \nThis improves stepping performance considerably as you can see in the following screen recordings of the (rather large) [Typescript compiler](https://github.com/microsoft/TypeScript).  \nOld behavior - Always fetch full call stack:  \n![step before](images/1_13/step-before.gif)  \nNew behavior - Fetch rest of the call stack lazily:  \n![step after](images/1_13/step-after.gif)",
    "url": "https://code.visualstudio.com/updates/v1_13#_improved-stepping-performance",
    "id": 218
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### File link detection in Exception Peek UI  \nWhen an exception occurs, developers commonly follow through the exception stack trace to understand what caused it. We added a mechanism to detect links in the stack trace returned by the debug adapter. This allows you to jump to your source code straight from the exception UI. Moreover, it also improved existing link detection in a Debug Console, fixing several the user reported issues.  \n![File Link Detection in Exception Peek UI](images/1_13/exception-link-detection.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_file-link-detection-in-exception-peek-ui",
    "id": 219
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Recipes for nonstandard debugging scenarios  \nSetting up Node.js debugging can be challenging for some non-standard or complex scenarios. With this release, we've started to collect recipes for these scenarios in a new [repository](https://github.com/microsoft/vscode-recipes).  \nFor example, there is a recipe for [Debugging TypeScript in a Docker Container](https://github.com/microsoft/vscode-recipes/tree/fc84ccc87a2f6248f7bc1a367d56045b8b1ed738/Docker-TypeScript).",
    "url": "https://code.visualstudio.com/updates/v1_13#_recipes-for-nonstandard-debugging-scenarios",
    "id": 220
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Copy All action in Debug Console  \nIt is now possible to copy all the content from the Debug Console using the **Copy All** context menu action. More details about what motivated this change can be found [here](https://github.com/microsoft/vscode/issues/2163).  \n![copy all](images/1_13/copy-all.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_copy-all-action-in-debug-console",
    "id": 221
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### New setting `debug.internalConsoleOptions`  \nIt is now possible to control the behavior of the Debug Console using the setting `debug.internalConsoleOptions`. Previously this setting was only available in `launch.json`, however by [user request](https://github.com/microsoft/vscode/issues/18398), it is now possible to also specify this in user and workspace settings. The setting in `launch.json` takes precedence if both are provided.",
    "url": "https://code.visualstudio.com/updates/v1_13#_new-setting-debug.internalconsoleoptions",
    "id": 222
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Node Debugging  \n### Local/remote path mapping now supported for \"launch\" configurations  \nTo facilitate remote debugging, VS Code already supports mapping JavaScript paths between a local VS Code project and a (remote) location by means of the `localRoot` and `remoteRoot` attributes. Because remote debugging typically involves \"attaching\" to a remote target, the `localRoot` and `remoteRoot` attributes were only available for launch configurations of request type `\"attach\"`.  \nRecently we've opened up launch configurations of request type `\"launch\"` to launch arbitrary programs and scripts (and not just the local Node.js target to debug). With this, it becomes possible to launch a remote Node.js target (for example in a Docker container) and have the VS Code Node.js Debugger attach to it. This feature diminishes the difference between \"launching\" and \"attaching\" even further and it makes sense to support `localRoot` and `remoteRoot` attributes for launch configurations of request type `\"launch\"` as well (in addition to request type `\"attach\"`).  \nYou can find an example for this in the [Debugging TypeScript in a Docker Container](https://github.com/microsoft/vscode-recipes/tree/fc84ccc87a2f6248f7bc1a367d56045b8b1ed738/Docker-TypeScript#further-simplifying-the-debugging-setup) recipe.",
    "url": "https://code.visualstudio.com/updates/v1_13#_local/remote-path-mapping-now-supported-for-launch-configurations",
    "id": 223
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Extensions  \n### Enable / Disable commands  \nThere are two new commands in the **Extensions** view context menu to help quickly manage your extensions:  \n* Enable / Disable All Installed Extensions\n* Enable / Disable Auto Updating Extensions  \n![Extensions actions](images/1_13/extensions-actions.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_enable-/-disable-commands",
    "id": 224
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Languages  \n### Syntax coloring for JSX/TSX components  \nIn React JSX and TSX files, component classes are now colored differently than normal HTML elements:  \n![new jsx coloring](images/1_13/jsx-new-coloring.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_syntax-coloring-for-jsx/tsx-components",
    "id": 225
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Additional JSDoc tags in hover and suggestions  \nJSDoc tags such as `@deprecated` and `@private` are now displayed in hover and suggestions documentation.  \n![JSDoc tags sections](images/1_13/jsdocs.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_additional-jsdoc-tags-in-hover-and-suggestions",
    "id": 226
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Open TS Server Log reveals log folder  \nThe **TypeScript: Open TS Server Log** command now reveals the TypeScript log directory on your operating system instead of trying to open the log file in VS Code. This is useful for collecting the additional Type Declaration (typings) installer log files generated alongside the main `tsserver.log` file.",
    "url": "https://code.visualstudio.com/updates/v1_13#_open-ts-server-log-reveals-log-folder",
    "id": 227
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Markdown preview preserves scroll position  \nThe Markdown preview, along with other webview based views such as the release notes, will now preserve the scroll position when switching between editors. Previously, navigating away from the Markdown Preview and then returning to it caused the scroll position to be reset.",
    "url": "https://code.visualstudio.com/updates/v1_13#_markdown-preview-preserves-scroll-position",
    "id": 228
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Warnings for missing Markdown preview styles  \nWe now display a warning message if any of the stylesheets from `markdown.styles` used in the preview cannot be found.",
    "url": "https://code.visualstudio.com/updates/v1_13#_warnings-for-missing-markdown-preview-styles",
    "id": 229
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Markdown symbol search includes heading levels  \nYou can quickly jump to a heading in a Markdown file using **Go to Symbol in File...** (`kb(workbench.action.gotoSymbol)`). This list now includes the heading level of each symbol, which allows you to quickly filter results by heading level.  \n![markdown symbols with header level](images/1_13/markdown-heading-levels.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_markdown-symbol-search-includes-heading-levels",
    "id": 230
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Extension Authoring  \n### Custom views  \nThere has been a popular request to customize VS Code to show custom data views, for example a `Node Dependencies` view. With this release, you can now write extensions to VS Code contributing such views. Currently custom views are shown only in Explorer. In future, we will support displaying them in other places too.  \n![Custom view](images/1_13/views.png)  \nContributing a view is as simple as follows:  \n* Contribute a view using the [views](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesviews) extension point.\n* Register a data provider for the view using the [TreeDataProvider](https://code.visualstudio.com/docs/extensionAPI/vscode-api#_TreeDataProvider) API.\n* Contribute actions to the view using `view/title` and `view/item/context` locations in [menus](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesmenus) extension point.  \nYou can refer to examples in our [extension samples repository](https://github.com/microsoft/vscode-extension-samples/tree/main/tree-view-sample).",
    "url": "https://code.visualstudio.com/updates/v1_13#_custom-views",
    "id": 231
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Debugger extensions  \n**New enum value `subtle` for the `presentationHint` attribute of type `StackFrame`**  \nA debug adapter can flag a stack frame with the presentation hint `subtle` in order to receive an alternative \"subtle\" rendering.  \n**Extended type for `TerminatedEvent.body.restart` attribute**  \nThe type of the `TerminatedEvent.body.restart` attribute has been extended from `boolean` to `any`. This makes it possible to loop arbitrary data from one debug session to the next (restarted) debug session.  \n**`evaluateName` attribute mandatory for `Add to Watch` and `Copy Value` actions**  \nVS Code previously tried to implement the **Add to Watch** and **Copy Value** actions by using the data from the **VARIABLES** view and a JavaScript-biased heuristic for building expressions that can be used with the evaluate request.  \nSince this approach does not work for all languages, we've introduced the `evaluateName` attribute for variables some time ago. It is now mandatory for debug adapters to support the `evaluateName` attribute if they want that **Add to Watch** and **Copy Value** actions work properly.",
    "url": "https://code.visualstudio.com/updates/v1_13#_debugger-extensions",
    "id": 232
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Glob patterns for `workspaceContains` activation event  \nThanks to [@eamodio](https://github.com/eamodio), with [PR #24570](https://github.com/microsoft/vscode/pull/24570), it is now possible to activate an extension when a folder is opened that contains at least one file that matches a glob pattern.  \nFor example, an extension with the `package.json`:  \n```json\n{\n...\n\"activationEvents\": [\n\"workspaceContains:**/.editorconfig\"\n]\n}\n```  \nwill be activated when a folder is opened and any of its sub-folders contains a file named `.editorconfig`.",
    "url": "https://code.visualstudio.com/updates/v1_13#_glob-patterns-for-workspacecontains-activation-event",
    "id": 233
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Defining a language's word pattern in the language configuration file  \nThanks to [@hoovercj](https://github.com/hoovercj), with [PR #22478](https://github.com/microsoft/vscode/pull/22478), it is possible to specify a language's word pattern using `wordPattern` in the language configuration file. This used to be possible before only by invoking `vscode.languages.setLanguageConfiguration(...)`.",
    "url": "https://code.visualstudio.com/updates/v1_13#_defining-a-language's-word-pattern-in-the-language-configuration-file",
    "id": 234
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Better control decorations in the editor  \nThanks to [@CoenraadS](https://github.com/CoenraadS), with [PR #25776](https://github.com/microsoft/vscode/pull/25776), it is now possible to configure the behavior of decorations when typing/editing at their edges. This can be configured with the `DecorationRenderOptions.rangeBehaviour` field.",
    "url": "https://code.visualstudio.com/updates/v1_13#_better-control-decorations-in-the-editor",
    "id": 235
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Reference theme colors from extensions  \nYou can now use theme colors in decorators and for the Status Bar foreground. Using theme colors instead of actual color values is the preferred way as it lets themes and users customize the colors.  \n```typescript\nvar decorationType = vscode.window.createTextEditorDecorationType({\nbefore: {\ncontentText: \"\\u26A0\",\ncolor: new vscode.ThemeColor('editorWarning.foreground')\n}\n});\n```  \nYou will find the list of theme colors [here](https://code.visualstudio.com/docs/getstarted/theme-color-reference).",
    "url": "https://code.visualstudio.com/updates/v1_13#_reference-theme-colors-from-extensions",
    "id": 236
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Accessibility  \n### Better NVDA support  \nSometimes, when using arrow keys, some lines or characters would be repeated by NVDA (see [Issue #26730](https://github.com/microsoft/vscode/issues/26730)). Thanks to [James Teh](https://github.com/jcsteh), one of the co-founders of [NV Access](https://www.nvaccess.org/), we now understand the root cause (a timeout of 30ms, which we sometimes miss). James has a [PR on NVDA](https://github.com/nvaccess/nvda/pull/7201) where he is changing the default timeout to 100ms and making it configurable. Until a new NVDA version is shipped, thanks to [Derek Riemer](https://github.com/derekriemer), there is an [NVDA plugin](https://files.derekriemer.com/globalEditorTimer-1.0.nvda-addon) that increases the timeout from 30ms to 200ms. We have also done some changes on our side to reduce the likelihood that we miss the 30ms timeout.",
    "url": "https://code.visualstudio.com/updates/v1_13#_better-nvda-support",
    "id": 237
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### \"Screen Reader Detected\"  \nWe are now leveraging [Electron APIs](https://github.com/electron/electron/blob/master/docs/api/app.md#event-accessibility-support-changed-macos-windows) to react and optimize VS Code when working with a screen reader. Whenever Electron identifies that a screen reader is attached, we will display a message in the Status Bar and:  \n* Remove the Line Number and Column indicator from the Status Bar, as we have found updating these indicators causes a myriad of accessibility events that end up confusing screen readers.\n* Disable word wrapping, as when pressing arrow down for example, screen readers expect the cursor to move to the next line and not to a column to the right on the same line.\n* Mirror the current page of text in the editor synchronously to the `textarea` element we use for input events.\n* Disable certain stylistic features to increase the likelihood that we make it within the 30ms accessibility event timeout. We typically do not spend more than ~4-5ms processing the arrow keys, but with these features disabled, the time spent is reduced to ~1-2ms. The rest of the time is spent by our platform in *figuring out* what happened and emitting the correct accessibility events.  \n> Detecting screen readers is non-trivial, so, if you notice the \"Screen Reader Detected\" Status Bar message and do not have a screen reader attached, you can change the setting `editor.accessibilitySupport` from `\"auto\"` to `\"off\"`.",
    "url": "https://code.visualstudio.com/updates/v1_13#_screen-reader-detected",
    "id": 238
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n## Engineering  \n### New crash report handling  \nWe have improved the VS Code crash reporting. VS Code uses Electron's built-in crash reporter to capture and analyze crash data to make VS Code and Electron itself better. If VS Code crashes, a dump is collected and sent to us, though [you can always turn this off](https://code.visualstudio.com/docs/supporting/faq#_how-to-disable-crash-reporting).  \nThis worked well, but it was a time consuming task for us to analyze and understand a crash. Microsoft has a good crash reporting service called [HockeyApp](https://hockeyapp.net/) and we now have enabled HockeyApp for crash reporting. To enable it, we had to produce our own build of Electron because the built-in crash reporter sends data in a format HockeyApp does not understand. The changes are on top of Electron 1.6.6 where the crash reporter talks to the HockeyApp service.  \nIf you build VS Code from source, you will continue to pull in the GitHub version of Electron. We will continue collaborating with the other Electron contributors to make the crash reporting service pluggable, so that anyone can easily use HockeyApp (or any other service).",
    "url": "https://code.visualstudio.com/updates/v1_13#_new-crash-report-handling",
    "id": 239
  },
  {
    "content": "See what is new in the Visual Studio Code May 2017 Release (1.13)  \n### Issue management automation  \nWe have deployed a [Probot](https://github.com/probot/probot) instance to automate some of our issue management. You will see `VSCodeBot` add labels to issues on GitHub and sometimes close issues when they have gone stale. We are looking for feedback from the community and will add more automation as we go.  \nAdding an `insiders` label to an issue reported against an [Insiders](https://code.visualstudio.com/insiders) build:  \n![VSCodeBot labels issues reported against Insiders build](images/1_13/bot-labels-insiders.png)  \nClosing a stale `needs more info` issue after we haven't heard back for more than week:  \n![VSCodeBot closes stale `needs more info` issue](images/1_13/bot-closes-needs-more-info.png)",
    "url": "https://code.visualstudio.com/updates/v1_13#_issue-management-automation",
    "id": 240
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Command Palette improvements  \nWe improved the **Command Palette** dropdown (`kb(workbench.action.showCommands)`) to make it more useful.  \nOne popular request was to always restore the last typed input when reopening the **Command Palette**. Enable this behavior with the new setting `workbench.commandPalette.preserveInput`.  \nWe also added a most recently used (MRU) list of commands that is persisted between restarts. The most recent commands executed will always show to the top. A new setting `workbench.commandPalette.history` allows you to control the number of entries to show (set it to 0 to disable this feature). With the MRU enabled, you do not need to enable `workbench.commandPalette.preserveInput` because the history will always have the last executed command selected by default when you open the **Command Palette**.  \n![Commands History](images/1_14/commands-history.gif)  \nA new command **Clear Commands History** was added to quickly dismiss all the entries from the commands history.  \nFinally, keyboard shortcuts in the dropdown are presented in the same visual form as in the **Keyboard Shortcuts** editor.",
    "url": "https://code.visualstudio.com/updates/v1_14#_command-palette-improvements",
    "id": 242
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Restore empty workspaces  \nIn VS Code, you can work with workspaces that have folders opened as well as empty workspaces. An empty workspace is not opened to a specific folder but can show files from disk. Up to now, we would never restore the UI state of empty workspaces and you would lose your carefully selected layout of opened files (even on window reload).  \nWith this release, we will restore the UI state for empty workspaces in the same way we do for workspaces with opened folders.  \n![Empty Workspace Restore](images/1_14/empty-window-restore.gif)  \nA new setting `window.restoreWindows` configures this behavior. The possible values are:  \n* `none` - Never restore any workspaces\n* `one` - Restore the last active workspace (default)\n* `folders` - Only restore opened folders\n* `all` - Restore all workspaces.  \nWith the new setting `window.restoreWindows`, we deprecated the previous setting `window.reopenFolders` and ask you to switch to the new setting. We will still support the old setting for a couple of releases.",
    "url": "https://code.visualstudio.com/updates/v1_14#_restore-empty-workspaces",
    "id": 243
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Close unmodified files  \nA new command was introduced to close unmodified editors of the currently active editor group. This makes it easy to quickly dismiss tabs of editors that are not dirty (no unsaved changes). The action can be triggered not only via a keybinding (`kb(workbench.action.closeUnmodifiedEditors)`) but also from the context menus of the tabs (headers) as well as the **OPEN EDITORS** view in the Explorer.  \n![Close Unmodified Editors](images/1_14/close-unmodified.png)  \nThanks to [Soney Mathew (@soneymathew)](https://github.com/soneymathew) for providing the pull request for this feature!",
    "url": "https://code.visualstudio.com/updates/v1_14#_close-unmodified-files",
    "id": 244
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Switch window improvements  \nIn a previous release, we added a quick picker for switching between the opened windows (via the `workbench.action.switchWindow` command). In this release, we did some tweaks to make the experience better.  \n![Switch Windows](images/1_14/switch-window.png)  \nYou will now see icons for the currently active file or folder in the window, provided that you have enabled one of the File Icon themes.  \nIn addition, a new command `workbench.action.quickSwitchWindow` was added to quickly switch between opened windows. Press and hold the modifier key to cycle through the list of windows and release all keys to open it.  \nAs an example, to use this feature with the `Ctrl+R` keyboard shortcut, configure the following rule in the keybindings editor:  \n```json\n[\n{\n\"key\": \"ctrl+r\",\n\"command\": \"workbench.action.quickSwitchWindow\"\n},\n{\n\"key\": \"ctrl+r\",\n\"command\": \"workbench.action.quickOpenNavigateNext\",\n\"when\": \"inWindowsPicker\"\n}\n]\n```  \nPress `Ctrl+R` and leave the `Ctrl` key pressed. As long as you now press the `R` key, you can navigate through the list of windows. Release all keys to focus it.  \n![Quick Switch Windows](images/1_14/quick-switch-windows.gif)",
    "url": "https://code.visualstudio.com/updates/v1_14#_switch-window-improvements",
    "id": 245
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### New keybindings context per quick picker  \nRelated to the improvements around the window picker, it is now easier and better to configure a picker with quick-pick functionality. Each time a picker opens, a specific keybinding context becomes active that you can use to assign keybindings to. For example, the window picker enables a context key `inWindowsPicker` when opened. Not only does it make quick navigate in pickers more powerful, it also fixes some annoying bugs. You can now bring up any quick picker, even if the quick picker is already showing (for example, opening the **Quick Open** file picker while the **Command Palette** is already open).  \nThe following example demonstrates how to configure quick navigate keybindings to switch between the most recently opened folders:  \nAs an example, to use this feature with the `Ctr+J` keyboard shortcut, configure the following rule in the keybindings editor:  \n```json\n[\n{\n\"key\": \"ctrl+j\",\n\"command\": \"workbench.action.quickOpenRecent\"\n},\n{\n\"key\": \"ctrl+j\",\n\"command\": \"workbench.action.quickOpenNavigateNext\",\n\"when\": \"inRecentFilesPicker\"\n}\n]\n```  \nPress `Ctrl+J` and leave the `Ctrl` key pressed. As long as you now press the `J` key, you can navigate through the list of recently opened folders and files. Release all keys to open it.",
    "url": "https://code.visualstudio.com/updates/v1_14#_new-keybindings-context-per-quick-picker",
    "id": 246
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Extensions Installed / Recommended sections  \nTo make recommended extensions more visible, **Extensions** view now shows **INSTALLED** and **RECOMMENDED** extensions in two sections.  \n![Extensions actions](images/1_14/extensions-view-sections.png)",
    "url": "https://code.visualstudio.com/updates/v1_14#_extensions-installed-/-recommended-sections",
    "id": 247
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Lists and quick pick leverage aria properties  \nLists such as the suggestion widget, exception list and the **Quick Open** dropdown now set `aria-setsize` and `aria-posinset`. These lists are virtualized and so without these [aria](http://www.w3.org/TR/wai-aria/) properties, screen readers could not correctly determine the number of entries.",
    "url": "https://code.visualstudio.com/updates/v1_14#_lists-and-quick-pick-leverage-aria-properties",
    "id": 248
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Integrated Terminal  \n### Selection re-implemented  \nThe way selection works in the Integrated Terminal has been completely re-implemented by moving away from regular web selection to a model where it's managed and rendered by the terminal itself. This fixes [a lot of issues](https://github.com/sourcelair/xterm.js/pull/670) and here are the major call outs:  \n- You can now select and copy text from more than one page of the terminal.\n- There is a new **Select All** command.\n- Copying wrapped lines will no longer add line breaks where they wrap.  \n![Terminal selection changes](images/1_14/terminal-selection-select.gif)  \n- Double click word selection is improved, it will now select URLs and paths, rather than just fragments  \n![Terminal double click word selection](images/1_14/terminal-selection-word.gif)  \n- Selection in `tmux` with mouse mode on should now work correctly  \n![Terminal tmux improvements](images/1_14/terminal-selection-tmux.gif)",
    "url": "https://code.visualstudio.com/updates/v1_14#_selection-re-implemented",
    "id": 249
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Find in the terminal  \nThe Integrated Terminal now has basic find functionality which can be triggered with `kb(workbench.action.terminal.focusFind)`.  \n![Terminal find](images/1_14/terminal-find.gif)  \nIf you want `Ctrl+F` to go to the shell instead of launching the Find widget on Linux and Windows, you will need to remove the keybinding like so:  \n```js\n{ \"key\": \"ctrl+f\", \"command\": \"-workbench.action.terminal.focusFind\",\n\"when\": \"terminalFocus\" },\n```",
    "url": "https://code.visualstudio.com/updates/v1_14#_find-in-the-terminal",
    "id": 250
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Rename terminal sessions  \nIntegrated Terminal sessions can now be renamed using the `workbench.action.terminal.rename` command. The new name will be displayed in the terminal selection dropdown.",
    "url": "https://code.visualstudio.com/updates/v1_14#_rename-terminal-sessions",
    "id": 251
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Git  \n### Pull from specific remote  \nThanks to [@BugraC](https://github.com/BugraC), [@matthewshirley](https://github.com/matthewshirley), [@Krzysztof-Cieslak](https://github.com/Krzysztof-Cieslak), it's now possible to pull changes from a specific branch in a remote repository with the **Pull from...** command.",
    "url": "https://code.visualstudio.com/updates/v1_14#_pull-from-specific-remote",
    "id": 252
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Manage your .gitignore file  \n[@BugraC](https://github.com/BugraC) also provided a change so that you can now add files to your `.gitignore` right from the context menu of the Source Control view or via the global **Git: Add File to .gitignore** command.  \n![Tasks Global Menu](images/1_14/gitignore.gif)",
    "url": "https://code.visualstudio.com/updates/v1_14#_manage-your-.gitignore-file",
    "id": 253
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Debug hover has scroll bar for long values  \nThanks to a community [pull request](https://github.com/microsoft/vscode/pull/23211), a debug hover now displays long string values using a scroll bar.",
    "url": "https://code.visualstudio.com/updates/v1_14#_debug-hover-has-scroll-bar-for-long-values",
    "id": 254
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Node Debugging  \n### Windows executables are found even if no extension is specified  \nOn Windows, it was previously necessary to include the correct file extension in the `runtimeExecutable` path, leading to complicated cross platform configurations:  \n```json\n\"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/nodemon\",\n\"windows\": {\n\"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/nodemon.cmd\"\n}\n```  \nWith this release, it is no longer necessary to include the file extension which makes the path portable across all platforms:  \n```json\n\"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/nodemon\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_14#_windows-executables-are-found-even-if-no-extension-is-specified",
    "id": 255
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Simplified setup for \"Restart debug session\"  \nVS Code Node.js debugging always supported restarting a debugging session automatically. This is useful if you use a file watching tool like **nodemon** to restart Node.js on file changes. Setting the launch configuration attribute `restart` to true makes the node debugger automatically try to re-attach to the Node.js runtime after Node.js has terminated. See the [Node.js Debugging](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_restarting-debug-sessions-automatically-when-source-is-edited) documentation for details.  \nIn this release, we have simplified this feature by eliminating the need to set the debug flags and the port attribute explicitly. Depending on the protocol (\"legacy\" or \"inspector\"), VS Code will pass the correct `--debug`, `--debug-brk`, `--inspect`, `--inspect-brk` argument and a random port to the program specified as the `runtimeExecutable` and this port will be used for subsequent _restarted_ sessions.  \nWith this feature, the debug configuration for globally installed **nodemon** simplifies to:  \n```json\n{\n\"name\": \"Launch server.js via nodemon\",\n\"type\": \"node\",\n\"request\": \"launch\",\n\"runtimeExecutable\": \"nodemon\",\n\"program\": \"${workspaceRoot}/server.js\",\n\"restart\": true,\n\"console\": \"integratedTerminal\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_14#_simplified-setup-for-restart-debug-session",
    "id": 256
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### \"Attach by process ID\" support for all Node.js versions  \nVS Code Node.js debugging always supported debugging a Node.js process even if it was not launched in debug mode. For this, the debug configuration of type \"attach\" has to specify a `processId` attribute. With this release, we support this feature for all versions of Node.js (and not only for versions < 8.0 as before).",
    "url": "https://code.visualstudio.com/updates/v1_14#_attach-by-process-id-support-for-all-node.js-versions",
    "id": 257
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Node.js v8.0 related changes  \nDifferent versions of Node.js support different debugging protocols. The VS Code Node.js debugger tries to determine automatically which protocol to use. If this is not possible, it defaults to the \"legacy\" protocol which is supported by all Node.js versions < 8.0. For details, see the [Node.js Debugging documentation](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_supported-nodelike-runtimes). Since the adoption of Node.js v8.x is steadily increasing, we are in the process of changing the default protocol for specific scenarios from \"legacy\" to \"inspector\".  \nIn this release, Node.js debugging will assume the \"inspector\" protocol whenever the `runtimeExecutable` attribute of a launch configuration is set. If you see your debug configurations failing, this change could be the reason. To fix this, you can either upgrade Node.js to version 8.x or you can explicitly force the use of the \"legacy\" protocol by adding `\"protocol\": \"legacy\"` to your launch configuration.",
    "url": "https://code.visualstudio.com/updates/v1_14#_node.js-v8.0-related-changes",
    "id": 258
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Languages  \n### TypeScript 2.4  \nVS Code now ships with [TypeScript 2.4.1](https://devblogs.microsoft.com/typescript/announcing-typescript-2-4/). This release includes a number of new language features, bug fixes, and editor improvements. Some highlights include:  \n**Dynamic Import Expressions**  \nSupport for the new ECMAScript `import` expression for lazily loading modules:  \n```ts\nasync function getZipFile(name: string, files: File[]): Promise<File> {\nconst zipUtil = await import('./utils/create-zip-file');\nconst zipContents = await zipUtil.getContentAsBlob(files);\nreturn new File(zipContents, name);\n}\n```  \n**Parent method suggestions in subclasses**  \nIntelliSense now displays interface and parent methods class methods in subclasses:  \n![JavaScript method suggestions from parent class](images/1_14/js-super-suggestions.png)  \nThis is helpful for overriding parent methods or implementing interfaces.  \n**More relevant suggestions in JavaScript files**  \nIn VS Code 1.13, suggestions in JavaScript files include suggestions for types:  \n![VS Code 1.13 JavaScript suggestions that include type suggestions](images/1_14/js-old-suggest.png)  \nThis meant that many suggestions that are generally not useful in JavaScript were shown, such as `EvalErrorConstructor` or `EventInit`.  \nVS Code 1.14 better filters JavaScript suggestions to only include those you typically care about while working in plain old JavaScript:  \n![Improved VS Code 1.14 suggestions](images/1_14/js-new-suggest.png)",
    "url": "https://code.visualstudio.com/updates/v1_14#_typescript-2.4",
    "id": 259
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Simpler building TypeScript using Tasks  \nYou can now build TypeScript projects using `kb(workbench.action.tasks.build)` without having to configure a `tasks.json` file, all you need is a `tsconfig.json` file:  \n![Building a TypeScript project using tasks](images/1_14/ts-build-task.gif)  \nTypeScript will pick up all `tsconfig.json` projects in your workspace for building.",
    "url": "https://code.visualstudio.com/updates/v1_14#_simpler-building-typescript-using-tasks",
    "id": 260
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Formatting option for spaces after TypeScript type assertions  \nThe new `typescript.format.insertSpaceAfterTypeAssertion` setting allows you to control the placement of spaces after a type assertion in TypeScript.  \n```ts\n// Default formatting\n<Foo>{ abc: 123, ... };\n\n// With \"typescript.format.insertSpaceAfterTypeAssertion\":true\n<Foo> { abc: 123, ... };\n```",
    "url": "https://code.visualstudio.com/updates/v1_14#_formatting-option-for-spaces-after-typescript-type-assertions",
    "id": 261
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Refactoring support for JavaScript and TypeScript  \n>**Note:** Due to performance issues in some scenarios, this refactoring is disabled in 1.14.1.  \nVS Code 1.14 includes initial support for refactoring JavaScript and TypeScript code. The first supported refactoring converts a JavaScript ES5-style function class to an ES6 class:  \n![Converting an ES5 class to an ES6 class using refactorings](images/1_14/js-refactoring.gif)  \nWe plan to add additional refactorings in the future.",
    "url": "https://code.visualstudio.com/updates/v1_14#_refactoring-support-for-javascript-and-typescript",
    "id": 262
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Control handling of line breaks in the Markdown preview  \nThe new `markdown.preview.breaks` setting controls the rendering of line breaks in Markdown preview. By default, single line breaks in Markdown paragraphs are ignored. For example in the Markdown below:  \n```markdown\n# Hello world\n\nThis is the first sentence.\nThis is the second sentence.\n\nThis is the third sentence.\n```  \nThe Markdown preview would show:  \n![Markdown preview normally ignores single line breaks](images/1_14/md-no-breaks.png)  \nWhen `\"markdown.preview.breaks\": true` is set, all new lines in paragraphs are converted into `<br>` tags in the output HTML:  \n![Markdown preview normally ignores single line breaks](images/1_14/md-breaks.png)",
    "url": "https://code.visualstudio.com/updates/v1_14#_control-handling-of-line-breaks-in-the-markdown-preview",
    "id": 263
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Editor  \n### Emmet abbreviation improvements  \nIn the previous release, we introduced a new model for Emmet features which you can enable by setting `emmet.useNewEmmet` to `true`. Below are the improvements to this new model in the current release:  \n**Multi cursor support in Emmet**  \nTry out the multi cursor support for many of the Emmet commands after setting `emmet.useNewEmmet` to `true` and don't forget to log issues if you find anything not working as expected.  \n![Multi cursor in Emmet commands](images/1_14/emmet.gif)  \n**Emmet customizations in the new Emmet model**  \nThe new Emmet model supports the following Emmet settings:  \n* `emmet.includeLanguages`  \nAdd **Emmet: Expand Abbreviation** and **Emmet: Wrap with Abbreviation** support to the language of your choice by providing a mapping to an existing Emmet supported language. The new language goes on the left and the Emmet supported language on the right. Use language ids for both sides of the mapping.\nFor example:\n```json\n\"emmet.includeLanguages\": {\n\"javascript\": \"javascriptreact\",\n\"vue-html\": \"html\",\n\"plaintext\": \"jade\"\n}\n```  \n* `emmet.excludeLanguages`  \nIf there is any language where you do not want to see Emmet expansions, add it in this setting which takes an array of language ID strings.  \n* `emmet.syntaxProfiles`  \nSee [Emmet Customization of output profile](https://docs.emmet.io/customization/syntax-profiles/#create-your-own-profile) to learn how you can customize the output of your HTML abbreviations.\nFor example:\n```json\n\"emmet.syntaxProfiles\": {\n\"html\": {\n\"attr_quotes\": \"single\"\n},\n\"jsx\": {\n\"self_closing_tag\": true\n}\n}\n```  \n* `emmet.variables`  \nCustomize variables used by Emmet snippets.\nFor example:\n```json\n\"emmet.variables\": {\n\"lang\": \"de\",\n\"charset\": \"UTF-16\"\n}\n```  \n* `emmet.showExpandedAbbreviation`  \nControls the Emmet suggestions that show up in the suggestion/completion list.  \n* `never` - Never show Emmet abbreviations in the suggestion list for any language.\n* `inMarkupAndStylesheetFilesOnly` - Emmet abbreviations in the suggestion list for languages that are markup and stylesheet based ('html','pug','slim','haml','xml','xsl','css','scss','sass','less','stylus') (default).\n* `always` - Emmet abbreviations in the suggestion list in languages that are markup and stylesheet based as well as `javascriptreact`, `typescriptreact` and any other language that has been mapped in the new setting `emmet.includeLanguages`.  \n**Note:** In the `always` mode, the new Emmet implementation is not context aware. For example, if you are editing a JavaScript React file, you will get Emmet suggestions not only when writing markup but also while writing JavaScript.  \n**Enable language extensions to provide Emmet suggestions**  \nTo get around the issue of having Emmet suggestions show up in the non-markup and non-stylesheet sections of your source code, we have pulled out the Emmet completion provider to a module of its own. This enables language extensions to use the npm module [vscode-emmet-helper](https://www.npmjs.com/package/vscode-emmet-helper) and provide Emmet suggestions in the right context as they are more aware of the language structure than the Emmet extension.",
    "url": "https://code.visualstudio.com/updates/v1_14#_emmet-abbreviation-improvements",
    "id": 264
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Auto indent on type, move lines and paste  \nWith this release, you can have auto indentation adjustment while typing, moving lines and pasting content in TypeScript, JavaScript, HTML, CSS, JSON or languages that have indentation rules. To enable this feature, set `editor.autoIndent` to `true`. The indentation rules are still under development so let us know if you run into any issues.  \n**Indentation rules**  \nWe made some earlier improvements to the indentation rules in the 1.9 release. With this release, language extension authors can declare the indentation rules in a `language-configuration.json` file instead of registering them in the extension activation phase.  \n```json\n{\n\"indentationRules\": {\n\"increaseIndentPattern\": \"^\\\\s*((begin|class|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while)|(.*\\\\sdo\\\\b))\\\\b[^\\\\{;]*$\",\n\"decreaseIndentPattern\": \"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\"\n}\n}\n```  \nTypeScript, JavaScript, CSS, HTML and JSON have built-in indentation rules. We don't ship indentation rules for other languages yet but if you use an extension which defines rules for another language, you will see the `editor.autoIndent` feature working.  \n**Typing**  \nFor C-like languages, we already handle brackets nicely. We indent the next line when the user types an open bracket and adjust the indentation when the user types a matching close bracket. However we don't have support for languages that use keywords to wrap blocks. With the new auto indent feature, it is now possible by creating indentation rules for that language.  \n![auto-indent-on-type](images/1_14/auto-indent-on-type.gif)  \n**Moving lines**  \nWhen you move source code out of a nested block or move code from one block to another, the editor will adjust the indentation level automatically.  \n![auto-indent-on-move-lines](images/1_14/auto-indent-on-move-lines.gif)  \n**Paste**  \nPasting is similar to moving lines, VS Code will adjust the indentation for you based on the lines before the pasted area.  \n![auto-indent-on-paste](images/1_14/auto-indent-on-paste.gif)",
    "url": "https://code.visualstudio.com/updates/v1_14#_auto-indent-on-type,-move-lines-and-paste",
    "id": 265
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Minimap  \nThe new `\"editor.minimap.showSlider\"` setting can be configured to `\"always\"` to always render the minimap (outline view) slider. There is now also a subtle indicator of the horizontal scroll position within the slider. The slider geometry computations received a lot of improvements too (see the Notable Changes section):  \n![minimap-horizontal-slider](images/1_14/minimap-horizontal-slider.gif)",
    "url": "https://code.visualstudio.com/updates/v1_14#_minimap",
    "id": 266
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Diff editor review pane  \nWe've added a review pane to the Diff editor, an experience especially designed for users of screen readers. Our diff editor is implemented as a composition of two editors, and each side is exposed as a regular code editor to screen readers. It is not clear (if possible) how we could automatically announce entering a diff region or the actual diff to a screen reader from the context of a code editor.  \nWe therefore added `F7` and `Shift+F7` which will navigate through diffs and present them in a unified patch format. Lines can be navigated with arrow keys and pressing `Enter` will jump back in the diff editor and the selected line.  \n![diff-review-pane](images/1_14/diff-review-pane.png)",
    "url": "https://code.visualstudio.com/updates/v1_14#_diff-editor-review-pane",
    "id": 267
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Extension Authoring  \n### Constraints for rendering SVG images  \nDue to security concerns, we don't want to render user provided SVG images within VS Code. We added constraints for extensions to make it safer for users when they browse the Extension Marketplace within VS Code:  \n- The icon provided in `package.json` may not be an SVG.\n- The badges provided in the `package.json` may not be SVGs unless they are from [approved badge providers](https://code.visualstudio.com/docs/extensionAPI/extension-manifest#_approved-badges).\n- Image URLs in `README.md` and `CHANGELOG.md` need to resolve to `https` URLs.\n- Images in `README.md` and `CHANGELOG.md` may not be SVGs unless they are from [approved badge providers](https://code.visualstudio.com/docs/extensionAPI/extension-manifest#_approved-badges).\n- Images in `README.md` and `CHANGELOG.md` may not use data URIs.  \nTo help you adopt these constraints, VS Code shows linting errors in your extension's `package.json`, `README.md`, and `CHANGELOG.md` files if they are not yet compliant. Also, the `vsce` publishing tool performs compliance checks and prevents you from uploading a new version of your extensions if there are problems.",
    "url": "https://code.visualstudio.com/updates/v1_14#_constraints-for-rendering-svg-images",
    "id": 268
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Custom views  \nYou can now control the visibility of a custom view by providing the `when` context value while defining it in `views` contribution section in `package.json`.  \nExample:  \n```json\n\"views\": {\n\"explorer\": [\n{\n\"id\": \"extension.node-debug.loadedScriptsExplorer\",\n\"name\": \"Loaded Scripts\",\n\"when\": \"inDebugMode && debugType == 'node'\"\n}\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_14#_custom-views",
    "id": 269
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### New Debug API  \nIn this release, we've started to provide a [Debug API](https://github.com/microsoft/vscode/issues/28500) for extensions.  \nThe [initial API](https://github.com/microsoft/vscode/issues/28234) covers the life-cycle of debug sessions:  \n* `createDebugSession` for starting a debug session based on an in-memory launch configuration.\n* An `onDidTerminateDebugSession` event which indicates that a debug session has terminated.  \n> **Note:** Currently this API is proposed, so in order to use it you must opt into it by adding a `\"enableProposedApi\": true` to `package.json` and you'll have to copy the [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts) into your extension project. Also be aware that you cannot publish an extension to the Marketplace that uses the `enableProposedApi` attribute.",
    "url": "https://code.visualstudio.com/updates/v1_14#_new-debug-api",
    "id": 270
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### New Task API  \nIf you want to provide task detection for your programming language, you can now use the official task API. Have a look at the [API](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L4790-L4791) and at one of the VS Code task detection extensions like [npm scripts autodetect](https://github.com/microsoft/vscode/blob/main/extensions/npm/src/main.ts).",
    "url": "https://code.visualstudio.com/updates/v1_14#_new-task-api",
    "id": 271
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Debug Adapter Protocol  \n**New capability `supportsDelayedStackTraceLoading`**  \nIn the May release, we improved stepping performance by fetching parts of the call stack and the corresponding variables lazily. Later we learned that not all debug extensions were prepared to return the stack in chunks which could result in a [duplicated top stack frame](https://github.com/microsoft/vscode/issues/28808). We weren't able to fix this problem in a robust way, so we decided that debug adapters should opt-in to the delayed loading of stack frames explicitly and a new capability `supportsDelayedStackTraceLoading` was introduced in the debug protocol. So if the lazy loading of stack frames was working fine in your debug extension and if you know that your debug adapter already supports both the `startFrame` and the `levels` attribute of the `stackTrace` request, you should return `true` for the `supportsDelayedStackTraceLoading` capability. This ensures that you'll continue to see the improved stepping performance delivered in the June release.  \n**New optional attribute `includeAll` for type `StackFrameFormat`**  \nWith this new option, the `StackTraceRequest` can be parameterized to include all stack frames, including those the debug adapter might otherwise hide.",
    "url": "https://code.visualstudio.com/updates/v1_14#_debug-adapter-protocol",
    "id": 272
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n## Engineering  \n### Windows 64 bit Insiders  \nVisual Studio Code 64-bit builds are now available on Windows for the Insiders build. They come in the usual [Installer](https://go.microsoft.com/fwlink/?linkid=852155) format as well as a [ZIP archive](https://go.microsoft.com/fwlink/?linkid=850640). Make sure to uninstall the 32-bit version before you install the 64-bit one.  \nYou should expect 64-bit builds of our Stable version next month.",
    "url": "https://code.visualstudio.com/updates/v1_14#_windows-64-bit-insiders",
    "id": 273
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Issue management automation  \nThe [Probot](https://github.com/probot/probot) we deployed to assist in our issue management now uses a machine learning algorithm to guess the feature area of new issues. When the algorithm estimates a sufficiently high probability of being correct, the bot adds the area label and (in some cases) directly assigns the issue to a developer on the team:  \n![VSCodeBot labels an new issue with the 'emmet' label](images/1_14/bot-labels-emmet.png)  \nFor a few days after a new release, the bot labels new issues filed for that release with the `new release` label. This helps us quickly spot regressions introduced in the release. We remove the label after a few days:  \n![VSCodeBot labels an new issue with the 'new release' label](images/1_14/bot-labels-new-release.png)  \nWe are looking for feedback from the community and plan to add more automation.",
    "url": "https://code.visualstudio.com/updates/v1_14#_issue-management-automation",
    "id": 274
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Monaco Editor  \nWe published a new version of the [Monaco Editor](https://microsoft.github.io/monaco-editor/), bringing it up to date with VS Code and making numerous accessibility improvements.",
    "url": "https://code.visualstudio.com/updates/v1_14#_monaco-editor",
    "id": 275
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Search  \nFull text search and the **Quick Open** file picker take the additional root folders into account. When searching, results from all of the root folders will show up in the search results view:  \n![Multi Root Search](images/1_14/search-multi-root.png)  \nTo distinguish results with the same file name across root folders, the name of the root folder is used as a prefix to the relative path in the results list. Settings like `search.exclude` are supported for each root folder if configured and across all folders if configured as global user setting.  \n![Multi Root Quick Open](images/1_14/multi-root-quickopen.png)",
    "url": "https://code.visualstudio.com/updates/v1_14#_search",
    "id": 276
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Settings  \nWith multiple root folders in one workspace, it is possible to have a `.vscode` folder in each root folder defining the settings that should apply for that folder. We classified settings into Workspace and Folder scoped to determine which setting can be applied at Workspace and Folder level.  \nA subset of settings is supported at a Folder level in this environment, specifically:  \n* `editor.*`\n* `files.exclude`\n* `files.trimTrailingWhitespace`\n* `files.insertFinalNewLine`\n* `files.encoding`\n* `files.autoGuessEncoding`\n* `files.watcherExclude`\n* `search.exclude`  \nOther settings are currently not supported on a per-folder basis and we will add more to the above list in the future.  \nRefer to the [issue](https://github.com/microsoft/vscode/issues/28538#issuecomment-310613318) to get more information about how settings are applied in a multi-root workspace.",
    "url": "https://code.visualstudio.com/updates/v1_14#_settings",
    "id": 277
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Proposed multi-root API  \nHaving multiple folders open in the editor requires a more powerful API. From when only a single root was supported, there is the `rootPath` API and for compatibility that will remain. We have a new and more powerful API in the pipeline. The current *proposed* API is shown below and enables you to inspect all workspace folders and sends an event when those change. It also gives you access to the new configuration model.  \n```ts\nexport namespace workspace {\n/**\n* List of workspace folders or `undefined` when no folder is open. The *first*\n* element in the array is equal to the [`rootPath`](#workspace.rootPath)\n*/\nexport let workspaceFolders: Uri[] | undefined\n/**\n* An event that is emitted when a workspace folder is added or removed.\n*/\nexport const onDidChangeWorkspaceFolders: Event<WorkspaceFoldersChangeEvent>;\n/**\n* Get a configuration object.\n*\n* @param section A dot-separated identifier.\n* @param resource A resource for which configuration is asked\n* @return The full workspace configuration or a subset.\n*/\nexport function getConfiguration2(section?: string, resource?: Uri): WorkspaceConfiguration2;\n}\n\nexport interface WorkspaceFoldersChangeEvent {\nreadonly addedFolders: Uri[];\nreadonly removedFolders: Uri[];\n}\n\nexport interface WorkspaceConfiguration2 extends WorkspaceConfiguration {\n\n/**\n* Retrieve all information about a configuration setting. A configuration value\n* often consists of a *default* value, a global or installation-wide value,\n* a workspace-specific value and a folder-specific value.\n*\n* The *effective* value (returned by [`get`](#WorkspaceConfiguration.get))\n* is computed like this: `defaultValue` overwritten by `globalValue`,\n* `globalValue` overwritten by `workspaceValue`. `workspaceValue` overwritten by `folderValue`.\n*\n* *Note:* The configuration name must denote a leaf in the configuration tree\n* (`editor.fontSize` vs `editor`) otherwise no result is returned.\n*\n* @param section Configuration name, supports _dotted_ names.\n* @return Information about a configuration setting or `undefined`.\n*/\ninspect<T>(section: string): { key: string; defaultValue?: T; globalValue?: T; workspaceValue?: T, folderValue?: T } | undefined;\n\n}\n\n```  \n**Note:** The API is still proposed and you will need to enable it per extension. In the `package.json` file of your extension, add the following line:  \n```json\n\"enableProposedApi\": true\n```  \nAlso, copy the [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts) file from our repository to your project. Including this file in your project enables type-checking and IntelliSense.  \nAs the API is in the proposed state, it is still being refined and breaking changes are likely to happen. For that reason, we don't support publishing extensions that use proposed APIs. However we do want extension writers, the clients of the extension API, to help us define how the final API should look and what it should support. Don't be shy with feedback!",
    "url": "https://code.visualstudio.com/updates/v1_14#_proposed-multi-root-api",
    "id": 278
  },
  {
    "content": "See what is new in the Visual Studio Code June 2017 Release (1.14)  \n### Upcoming features  \nThere is still a lot of work ahead of us to make the multi-root experience great.  \nThese areas will get special attention in the next milestone:  \n* Source Control UI for multiple root folders\n* Task and Debug support\n* Rich languages support across root folders",
    "url": "https://code.visualstudio.com/updates/v1_14#_upcoming-features",
    "id": 279
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Color Picker  \nWe've introduced a color picker for color customizations in this release. It supports configuration of hue, saturation and opacity for the color that is picked up from the editor. It also provides the ability to trigger between different color modes by clicking on the color string at the top of the picker. The picker appears on a hover when you are over the color definition in a document.  \n![Color Picker](images/1_15/color-picker.png)  \nFor the preview, we enabled it for CSS, Sass and LESS files, supporting RGBA, HSLA and Hex color modes. We plan to extend the picker with more functionality as well as to enable extension authors to contribute their own color modes together with color definitions for their languages in future releases.",
    "url": "https://code.visualstudio.com/updates/v1_15#_color-picker",
    "id": 281
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Auto indentation  \nIn this milestone, we've turned on auto-indenting by default (`\"editor.autoIndent\": true`). If the language you are working with has proper indentation rules (for example, TypeScript, JSON, CSS), the indentation will be adjusted when you type, move lines and paste blocks of code.",
    "url": "https://code.visualstudio.com/updates/v1_15#_auto-indentation",
    "id": 282
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Emmet 2.0  \nTwo releases ago, we introduced a new Emmet implementation (\"Emmet 2.0\"). During its preview, users could opt-in and try new features such as showing Emmet abbreviations in the suggestion/auto-completion list and multi-cursor support for most of the [Emmet actions](https://docs.emmet.io/actions/). In this release, Emmet 2.0 and these features are enabled by default.  \nNow that Emmet abbreviations are displayed in the suggestion/auto-completion list, VS Code no longer triggers Emmet abbreviations with the `kbstyle(Tab)` key by default. This solves 2 major issues:  \n* Unexpected Emmet expansions occurring when the user wanted to just add an indent using the `kbstyle(Tab)` key.\n* Items from the suggestion list getting inserted when the user actually wanted to expand an Emmet abbreviation.  \nYou can still bind any keyboard shortcut (other than `kbstyle(Tab)` key) to the `editor.emmet.action.expandAbbreviation` command or use **Emmet: Expand Abbreviation** from the **Command Palette**.  \n>**Note**: To continue to expand Emmet abbreviations and snippets using the `kbstyle(Tab)` key, set `emmet.triggerExpansionOnTab` to `true`.  \n#### Custom Emmet Snippets  \nIf you use custom Emmet snippets, you will have to modify them slightly to make them work in the new Emmet.  \n* HTML: Custom Emmet snippets in HTML should be a valid abbreviation. For example: use `ul>li` instead of `<ul><li></li></ul>`.\n* CSS: Name the custom Emmet snippets in CSS such that they only contain letters from the snippet value in the order that they appear in the latter, so that the fuzzy matching algorithm of the suggestion list can make the right match. For example, don't use `bc` or `darkc` as the name for `color: black`. Use `cb` or `cob` instead.  \nRead more about the new Emmet in [Emmet 2.0 blog post](https://code.visualstudio.com/blogs/2017/08/07/emmet-2.0).",
    "url": "https://code.visualstudio.com/updates/v1_15#_emmet-2.0",
    "id": 283
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Support for snippet choices  \nWith snippet choices, a placeholder can be prefilled with a set of values. The syntax is `${<number>|option_1,...,option_n|}`.  \nBelow is a working sample specifying a fixed set of color choices:  \n```json\n\"color\": {\n\"prefix\": \"color\",\n\"body\": \"> Pick your favorite color ${1|red,green,blue,pink|}.\\n< He likes $1.\"\n}\n```  \n![snippet choices](images/1_15/snippet-choice.gif)  \nLast but not least, when inserting snippets via IntelliSense a preview is now shown.",
    "url": "https://code.visualstudio.com/updates/v1_15#_support-for-snippet-choices",
    "id": 284
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Improved diff editor results  \nIn this release, we made some changes to our diff algorithm to adjust the differences (which are found with the help of a Longest-Common-Substring algorithm) in such a way that they are more pleasing to the human eye.  \nIn some cases, this means we will be more aligned with the output of `git diff` (which also incorporates some of these heuristics), but in other cases (like when only trim whitespace has changed), our result will no longer contain the LCS, so it will be different than `git diff`, but in our opinion it will also be more pleasing.",
    "url": "https://code.visualstudio.com/updates/v1_15#_improved-diff-editor-results",
    "id": 285
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n## Workbench  \n### User definable syntax highlighting colors  \nThanks to [Cody Hoover (@hoovercj)](https://github.com/hoovercj), you can now customize the editor syntax highlighting colors in user settings. This is a great way to easily adjust your editor colors without creating a full color theme.  \n![Token Color Customization](images/1_15/token_color_customization.png)  \nThe new color will be applied on top of the current theme. It will applied live and no reloading of VS Code is required.  \nA pre-configured list of syntax tokens ('comments', 'strings', ...) is available for the most common constructs. If you want more, you can do so by directly specifying TextMate theme color rules.  \n![Advanced Token Color Customization](images/1_15/token_color_customization_advanced.png)  \nCheck out the [theme section](https://code.visualstudio.com/docs/getstarted/themes#_customize-a-color-theme) in our docs for more details.",
    "url": "https://code.visualstudio.com/updates/v1_15#_user-definable-syntax-highlighting-colors",
    "id": 286
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### File Explorer sort order  \nThanks to [Dmitry Zabello (@foreverest)](https://github.com/foreverest), a new setting `explorer.sortOrder` configures how files and folders are sorted in the File Explorer. You can choose between:  \n* `filesFirst` - Sort files before folders\n* `mixed` - Sort files and folders without separation\n* `modified` - Sort by last modified time\n* `type` - Sort by file type  \nThis is how the Explorer looks like with `explorer.sortOrder: mixed`  \n![Explorer Sorting](images/1_15/explorer-sorting.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_file-explorer-sort-order",
    "id": 287
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Launch Integrated Terminal from the File Explorer  \nThe context menu item to open a folder in a terminal (**Open in Terminal**) now defaults to open the folder in the Integrated Terminal. You can configure this to point at the external terminal using the `terminal.explorerKind` setting.",
    "url": "https://code.visualstudio.com/updates/v1_15#_launch-integrated-terminal-from-the-file-explorer",
    "id": 288
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Managing views  \nNow that VS Code supports custom views in the Explorer, it is useful to be able to customize their layout. With this release, you can now change the order and the visibility of the views in the:  \n* Explorer view\n* Debug view\n* Extensions view  \n![Views management](images/1_15/views_management.gif)  \nYou can drag and drop sections reorder and context menus allow you to hide and display sections. Changes to views are persisted across VS Code restarts.",
    "url": "https://code.visualstudio.com/updates/v1_15#_managing-views",
    "id": 289
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### New setting to close window when last editor closes  \nThere is a new setting `window.closeWhenEmpty` to control if the window (instance) should close when the last editor is closed. On macOS, it is typical application behavior that the instance should close when the last document is closed. If you want this behavior, you can enable the setting.  \n**Note**: The setting only has an impact for windows that have no folders opened.",
    "url": "https://code.visualstudio.com/updates/v1_15#_new-setting-to-close-window-when-last-editor-closes",
    "id": 290
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Improved --wait support  \nVS Code can be configured as the editor for external programs such as Git (see our [documentation](https://code.visualstudio.com/docs/sourcecontrol/overview#_vs-code-as-git-editor) ). For that purpose, the `--wait` command-line argument is used to keep the VS Code instance open until the external program is closed. In this release, we re-implemented this feature to work around some known issues.  \nFirst of all, we will now remember which instance was opened with `--wait` and properly wait for that instance to close. This fixes annoying issues when `--wait` is used while VS Code is already running as well as when you open a first instance and then more windows afterwards without closing the first window. In addition, on macOS where closing a window typically does not quit the application, we are now also returning control to the process that started the instance once it gets closed.  \nSecond, when you close the last editor of the instance that was opened with `--wait`, we will now close the window automatically. With that, you can just hit `kb(workbench.action.closeActiveEditor)` to close the window.  \n**Note**: If you always want to close the window when the last editor closes, check out the new `window.closeWhenEmpty` setting for empty windows.",
    "url": "https://code.visualstudio.com/updates/v1_15#_improved---wait-support",
    "id": 291
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### New theme color for title bar border  \nIf you are on macOS, we show a custom title bar at the top. A new color `titleBar.border` can now be defined in themes or settings to draw a border separating the title bar from the rest of the editor.",
    "url": "https://code.visualstudio.com/updates/v1_15#_new-theme-color-for-title-bar-border",
    "id": 292
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Compare dirty file with version on disk  \nThanks to [Tobias Friemel (@tfriem)](https://github.com/tfriem), a new action compares a dirty (unsaved) file to its version on disk to quickly see the recent changes:  \n![Compare with Saved](images/1_15/compare-with-saved.png)  \nYou can find the action from the context menu of dirty files within the **OPEN EDITORS** view of the Explorer and also as global command **Files: Compare Active File with Saved** (`kb(workbench.files.action.compareWithSaved)`).",
    "url": "https://code.visualstudio.com/updates/v1_15#_compare-dirty-file-with-version-on-disk",
    "id": 293
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Font aliasing (macOS only)  \nA new setting `workbench.fontAliasing` was added (macOS) to control the font smoothing within the workbench and editor. By default, fonts are subpixel anti-aliased. Change the setting to `antialiased` to smooth the font on the level of the pixel, as opposed to the subpixel (this can make the font appear lighter overall). You can disable font smoothing if you set it to `none` (text will show with jagged sharp edges).",
    "url": "https://code.visualstudio.com/updates/v1_15#_font-aliasing-macos-only",
    "id": 294
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Remove entries from recently opened  \nA new action (X) now shows up next to each entry of the recently opened picker (`kb(workbench.action.openRecent)`) to remove that entry from the list.  \n![Remove Recently Opened](images/1_15/remove_history.gif)",
    "url": "https://code.visualstudio.com/updates/v1_15#_remove-entries-from-recently-opened",
    "id": 295
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Quick Open command with prefix  \nThe existing command `workbench.action.quickOpen` can now receive a prefix as an argument to open the **Quick Open** picker with any text prefilled.  \nFor example, you can configure a keybinding to bring up **Quick Open** with text prefilled like this:  \n```json\n{ \"key\": \"cmd+o\", \"command\": \"workbench.action.quickOpen\", \"args\": \"my-prefix\" }\n```  \nAs an extension author, you can programmatically execute the command and pass in arguments:  \n```typescript\nvscode.commands.executeCommand('workbench.action.quickOpen', 'my-prefix');\n```  \nThanks to [cristianhosu (@cristianhosu)](https://github.com/cristianhosu) for helping out with this.",
    "url": "https://code.visualstudio.com/updates/v1_15#_quick-open-command-with-prefix",
    "id": 296
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Search changes  \nWe made a couple changes to the Search view that you should be aware of. If you have a single folder open, `./example` will match the directory `example/` at the top level of the open folder. And if you enter `example`, that will match every folder and file named `example` in the workspace. This is different from the previous default, which would have matched any file named `example`, but only a top-level folder named `example`.  \nYou may also notice that we've removed the **Use glob patterns** buttons in the pattern include/exclude boxes. With the new `./` syntax, we think they were no longer necessary. See [our search documentation](https://code.visualstudio.com/docs/editor/codebasics#_search-across-files) for more details on searching with globs.",
    "url": "https://code.visualstudio.com/updates/v1_15#_search-changes",
    "id": 297
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n## Integrated Terminal  \n### Configure environment of terminal sessions  \nA new setting for each platform `terminal.integrated.env.<platform>` allows adding additional environment variables to new terminals:  \n```js\n\"terminal.integrated.env.linux\": {\n\"PYTHONPATH\": \"~/packages\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_15#_configure-environment-of-terminal-sessions",
    "id": 298
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Terminal switching  \nYou can now quickly switch active terminals and rename them using the quick picker. Either use the command `Terminal: Switch Active Terminal` or type in `term ` (with a space) in Quick Open.  \n![Switch Terminals](images/1_15/terminal_quickpick.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_terminal-switching",
    "id": 299
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Better terminal session names on Windows  \nWe've cleaned up the default terminal names on Windows when launching a process from the initial shell. For example, running `powershell.exe` or `cmd.exe` in the terminal will now display the name as simply 'powershell' or 'cmd'.",
    "url": "https://code.visualstudio.com/updates/v1_15#_better-terminal-session-names-on-windows",
    "id": 300
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Additional delete word keybindings in the terminal  \nThe Integrated Terminal now has default keys for deleting words:  \nLinux/Windows:  \n* Ctrl+Backspace: Delete word before cursor\n* Ctrl+Delete: Delete word after cursor  \nmacOS:  \n* Alt+Backspace: Delete word before cursor\n* Alt+Delete: Delete word after cursor  \nThese work by sending keystrokes to the shell and as a result, they don't work on some Windows shells.",
    "url": "https://code.visualstudio.com/updates/v1_15#_additional-delete-word-keybindings-in-the-terminal",
    "id": 301
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Force selection using Alt on macOS  \nRunning programs in mouse mode within the terminal (like tmux) will intercept the mouse and therefore not allow you to make a selection. You can now hold the `Alt` key to force the mouse event to perform a selection rather than be sent to the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_15#_force-selection-using-alt-on-macos",
    "id": 302
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n## Tasks  \n### Less and Sass compiler problem matchers  \nWe added two new problem matchers to parse the output of the [less](https://www.npmjs.com/package/less) and [node-sass](https://www.npmjs.com/package/node-sass) compilers to detect and display problems from within VS Code. They are named `$lessc` and `$node-sass`.",
    "url": "https://code.visualstudio.com/updates/v1_15#_less-and-sass-compiler-problem-matchers",
    "id": 303
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Tasks Status Bar display  \nWe also added a Status Bar item for tasks which becomes visible as soon as a task is executed. Clicking on the tasks Status Bar display guides you to the output of an executed task.  \n![tasks status bar](images/1_15/tasks-status-bar.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_tasks-status-bar-display",
    "id": 304
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n## Node Debugging  \n### Loaded Scripts Explorer  \nFor the last few VS Code releases, it has been possible to search and open loaded scripts via the **Open Loaded Script** command, which used a simple [Quick Pick UI](https://code.visualstudio.com/updates/v1_11#_access-loaded-scripts).  \nIn this release, we've added an Explorer to the Debug view that provides direct access to all scripts and updates automatically as more scripts are loaded by the runtime:  \n![Loaded Scripts Explorer](images/1_15/loaded-scripts-explorer.gif)  \nIn contrast to the limited Quick Pick UI, the Explorer supports concurrent debug sessions and the scripts are grouped according to folders if used in a multi-root workspace.  \nA second advantage of the Loaded Scripts Explorer is that it was implemented as an extension and shows a real world example of the new debug API and how to contribute to a tree view.",
    "url": "https://code.visualstudio.com/updates/v1_15#_loaded-scripts-explorer",
    "id": 305
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n## Languages  \n### Search in Markdown preview  \nA PR from [Cody Hoover (@hoovercj)](https://github.com/hoovercj) brings search to webview contents, including the Release Notes, Markdown preview, and extension README pages:  \n![Find in a webview](images/1_15/markdown-preview-search.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_search-in-markdown-preview",
    "id": 306
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Linkifying in the Markdown preview  \nThe Markdown preview will now automatically convert URL-like text into clickable links. This feature can be disabled by setting `\"markdown.preview.linkify\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_15#_linkifying-in-the-markdown-preview",
    "id": 307
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Support for Markdown preview plugins  \nWe added support for Markdown preview plugins for styles, scripts and Markdown it extensions.  \n**Preview styles**  \nExtensions can contribute CSS to customize the look or layout of the Markdown preview:  \n![Changing the Markdown preview style](images/1_15/markdown-api-styles.png)  \nThe [VS Code GitHub Style extension](https://github.com/mjbvz/vscode-github-markdown-preview-style) is a good example that demonstrates using a stylesheet to make the Markdown preview look like GitHub's rendered Markdown.  \n**Markdown it plugins**  \nExtensions can add support for additional Markdown syntax by contributing a [markdown-it plugin.](https://github.com/markdown-it/markdown-it#syntax-extensions):  \n![Adding emoji syntax support to the Markdown preview using a markdown it plugin](images/1_15/markdown-api-plugins.png)  \nYou can see this in action with the [VS Code Markdown Emoji extension](https://github.com/mjbvz/vscode-markdown-emoji) which uses a markdown-it plugin to add emoji support.  \n**Preview scripts**  \nFinally, for advanced functionality, extensions may contribute scripts that are executed inside of the Markdown preview:  \n![Adding mermaid diagram support to the Markdown preview using scripts](images/1_15/markdown-api-scripts.png)  \nAbove you can see the [VS Code Markdown Mermaid extension](https://github.com/mjbvz/vscode-markdown-mermaid) adding scripts to create [mermaid](https://knsv.github.io/mermaid/index.html) diagrams and flowcharts.",
    "url": "https://code.visualstudio.com/updates/v1_15#_support-for-markdown-preview-plugins",
    "id": 308
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### New Markdown Preview Security Settings  \nThe Markdown preview now blocks HTTP images by default. A popup is shown in the preview window when content has been blocked. You can change the security settings of Markdown previews in the current workspace by clicking on this popup or using the **Markdown: Change Preview Security Settings** command.  \n![Changing the markdown preview's security settings](images/1_15/markdown-security.gif)  \nYou can find more information about the new Markdown preview security levels in the VS Code [Markdown documentation](https://code.visualstudio.com/docs/languages/markdown#_markdown-preview-security).",
    "url": "https://code.visualstudio.com/updates/v1_15#_new-markdown-preview-security-settings",
    "id": 309
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n## Extension Authoring  \n### New API to extend the Markdown preview  \nExtension authors can now extend the Markdown preview. The new API offers [three new contribution points](https://code.visualstudio.com/docs/extensionAPI/api-markdown) for styles, scripts and markdown-it extensions.",
    "url": "https://code.visualstudio.com/updates/v1_15#_new-api-to-extend-the-markdown-preview",
    "id": 310
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Proposed API for storing credentials  \nThere is a proposed (subject to change, behind a command-line flag) API for storing credentials in `vscode.credentials`. Basic read/write/delete operations are available that forward to the [keytar](https://github.com/atom/node-keytar) node module that uses the different credential stores of the different operating systems as its backing store. Join the [discussion](https://github.com/microsoft/vscode/issues/31131) on GitHub.",
    "url": "https://code.visualstudio.com/updates/v1_15#_proposed-api-for-storing-credentials",
    "id": 311
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### New API to open an editor or diff editor with a specific selection  \nWe enriched the existing `TextDocumentShowOptions` with a new property `selection: Range` that can be used from the `showTextDocument` method as well as the `vscode.diff` command. When provided, the editor will reveal and select the provided range.",
    "url": "https://code.visualstudio.com/updates/v1_15#_new-api-to-open-an-editor-or-diff-editor-with-a-specific-selection",
    "id": 312
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Debug API updates  \nThe proposed Debug API from last release (`vscode.debug.*`) has been slightly modified and extended.  \nDebugging can be started with the `startDebugging` function which takes either a named debug or compound configuration, or an in-memory configuration. Since named configurations or variables are only defined in the scope of a folder, we had to add a folder argument. A new `onDidStartDebugSession` event indicates that a debug session has been started.  \nThe currently active debug session is available as the variable `activeDebugSession` and changes are reported through the `onDidChangeActiveDebugSession` event.  \nCustom Debug Adapter Protocol requests can be sent to a debug session with `DebugSession.customRequest` and corresponding custom events are reported through the `onDidReceiveDebugSessionCustomEvent` event.",
    "url": "https://code.visualstudio.com/updates/v1_15#_debug-api-updates",
    "id": 313
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Debug Contributions  \n**Contributing views to the Debug Side Bar**  \nYou can now contribute views to the Debug Side Bar.  \n```json\n\"contributes\": {\n\"views\": {\n\"debug\": [\n{\n\"id\": \"extension.node-debug.loadedScriptsExplorer\",\n\"name\": \"Loaded Scripts\",\n\"when\": \"inDebugMode && debugType == 'node'\"\n}\n]\n}\n}\n```  \n**Variable substitution in _package.json_ will no longer be supported**  \nWe are planning to stop support for variable substitution in the `program` and `runtime` attributes of the `debuggers` contribution in `package.json`. The reason for this is twofold: first, it is hard to explain that variable substitution only works for two attributes and not for all attributes in `package.json`. Second, with multi-root folders, it is difficult to support this feature in a useful way.  \nWe will deprecate variable substitution in this release and plan to drop the feature in August. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/31675).",
    "url": "https://code.visualstudio.com/updates/v1_15#_debug-contributions",
    "id": 314
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Debug Adapter Protocol  \n**New `process` event**  \nA new `process` event has been added that conveys the process ID and other information about the process being debugged.  \n**New enum value `normal` for `presentationHint` attribute**  \nFor completeness, the default value `normal` was added to the value set for the `presentationHint` attribute of type `Source`.",
    "url": "https://code.visualstudio.com/updates/v1_15#_debug-adapter-protocol",
    "id": 315
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### New API for multi-root workspaces  \nNew APIs have been added for multi-root workspaces. The \"single root workspace\" `workspace.rootPath` variable is now deprecated. Extension authors should use `workspace.workspaceFolders` which is a `WorkspaceFolder` array representing the current list of folders opened in the editor. There is a new event that fires when a folder is added or removed and a function `getWorkspaceFolder` to find a workspace folder for a given resource.",
    "url": "https://code.visualstudio.com/updates/v1_15#_new-api-for-multi-root-workspaces",
    "id": 316
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Icon for root folders  \nIcon theme authors, please get ready for multi-root support: We added two new icon categories for VS Code: `rootFolder` and `rootFolderExpanded` that can be used to show root folders in a different way compared to other folders. For example, the File Explorer will use this icon as well as the list of recently opened workspaces.  \n![Root Icon](images/1_15/root_icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_icon-for-root-folders",
    "id": 317
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Configuration scopes  \nYou can now classify the settings you contribute to `configuration` extension points into following scopes:  \n* `window`: Window specific configuration which can be applied to the VS Code window and can be configured in the User and Workspace settings.\n* `resource`: Resource specific configuration, which can be applied to the resources like files and folders and can be configured in the User, Workspace and Folder settings.  \n```json\n\"configuration\": {\n\"type\": \"object\",\n\"title\": \"MyLint\",\n\"properties\": {\n\"mylint.enable\": {\n\"type\": \"boolean\",\n\"default\": true,\n\"description\": \"Control whether mylint is enabled for files or not.\",\n\"scope\": \"resource\"\n}\n}\n}\n```  \nThis classification is needed to configure settings impacting resources in a multi-root workspace through **[Configuration API](#configuration-api)**.",
    "url": "https://code.visualstudio.com/updates/v1_15#_configuration-scopes",
    "id": 318
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Configuration API  \nThe Configuration API is enhanced to support configuring settings at Global, Workspace and Folder levels in a multi-root workspace. Now you can ask for the configuration of a resource and inspect and update it in User, Workspace and Folder settings.  \nHere is an example of reading and writing the configuration of a resource in Folder settings in a multi-root workspace:  \n```typescript\nconst uri = vscode.window.activeTextEditor.document.uri;\nconst configuration = vscode.workspace.getConfiguration('mylint', uri);\n// Let value of `mylint.enable` is `false` in the settings of root folder containing `uri`.\nlet value = configuration.get('enable'); // value is `false`\nawait configuration.update('enable', !value, vscode.ConfigurationTarget.WorkspaceFolder)\nvalue = configuration.get('enable'); // value is `true`\n```  \n**Note:** There are no breaking changes to the existing Configuration API.",
    "url": "https://code.visualstudio.com/updates/v1_15#_configuration-api",
    "id": 319
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Untitled Workspace  \nAs long as you do not save a workspace, it will appear as an \"Untitled Workspace\". We do not force you to save a workspace until you want to have it in a permanent location, for example, on your Desktop. Untitled workspaces are present as long as the window they are using is open. Once you close a window with an untitled workspace, we will ask you to save it if you plan to open it again in the future:  \n![Save Workspace](images/1_15/save_workspace.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_untitled-workspace",
    "id": 320
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Saved Workspaces  \nSaved Workspaces can be opened by double clicking the `.code-workspace` file or via the new **Open Workspace...** command under the **File** menu:  \n![Open Workspace](images/1_15/open_workspace.png)  \nYou will also see a new action **Save Workspace As...** that allows you to save the workspace to any location on your disk. The file extension of a VS Code workspace is `.code-workspace` and in the future, we plan to make it easier to share these files by allowing relative paths for folders.  \nWorkspaces show up in a similar way as folders. You can open them from the list of recently opened workspaces:  \n![Recently Opened Workspace](images/1_15/recent_workspace.png)  \nAny workspace will have an extra `(Workspace)` suffix appended to the name.",
    "url": "https://code.visualstudio.com/updates/v1_15#_saved-workspaces",
    "id": 321
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Workspace Settings  \nAs mentioned above, the new Workspace concept introduces a workspace configuration file that contains a section to configure your workspace settings. In a multi-root workspace, when you open workspace settings, we now show this file. This file also contains other sections which are not related to workspace settings. To make them less prominent, we dim them in the editor. In future, we would improve the experience by showing only the settings section just like in User settings.  \n![Workspace Settings](images/1_15/workspace_settings.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_workspace-settings",
    "id": 322
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Folder Settings  \nWith multiple root folders in one workspace, it is possible to have a `.vscode` folder in each root folder defining the settings that should apply for that folder. You can open the folder settings in the Settings editor from the dropdown.  \n![Settings Dropdown](images/1_15/settings_dropdown.png)  \nSelecting the folder, opens the settings for that folder.  \n![Folder Settings](images/1_15/folder_settings.png)  \nOnly `resource` specific settings are applied at Folder level and `window` specific settings are not. Default settings editor on the left shows only those settings that can be applied at Folder level. If `window` specific settings exist in Folder settings, then they are shown dimmed with an info icon.  \n![Unsupported Setting](images/1_15/unsupported_setting_info.png)  \nRefer to **[Configuration scopes](#configuration-scopes)** to know about `window` and `resource` specific settings.",
    "url": "https://code.visualstudio.com/updates/v1_15#_folder-settings",
    "id": 323
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Multi-root debugging  \nWhen opening a multi-root workspace with multiple `launch.json` files, the Debug dropdown shows all configurations (with the originating folder in parentheses):  \n![multi-root debug](images/1_15/mr_debug.png)  \nVariables used in a configuration (for example `${workspaceRoot}`) are resolved relative to the folder they belongs to.",
    "url": "https://code.visualstudio.com/updates/v1_15#_multi-root-debugging",
    "id": 324
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Multi-root Search  \nThanks to a [PR](https://github.com/microsoft/vscode/pull/29964) from [Keegan Carruthers-Smith](https://github.com/keegancsmith), search results in a multi-root workspace are now grouped by folder.  \n![multiroot search results](images/1_15/multiroot-search-results.png)  \nWhen you have a multi-root workspace open, you can choose to search in a single root folder by using the `./` syntax in the \"files to include\" box. For example, if you enter `./project1/**/*.txt`, that will search for all `.txt` files under the `project1/` root folder.",
    "url": "https://code.visualstudio.com/updates/v1_15#_multi-root-search",
    "id": 325
  },
  {
    "content": "See what is new in the Visual Studio Code July 2017 Release (1.15)  \n### Tutorials  \nWe've created tutorials for [React](https://code.visualstudio.com/docs/nodejs/reactjs-tutorial), [Angular](https://code.visualstudio.com/docs/nodejs/angular-tutorial), and [Node.js Deployment to Azure](https://code.visualstudio.com/docs/nodejs/nodejs-deployment). These tutorials walk you through creating sample projects and using VS Code for smart code editing and debugging.  \n![nodejs tutorials](images/1_15/react-tutorial.png)",
    "url": "https://code.visualstudio.com/updates/v1_15#_tutorials",
    "id": 327
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n## Workbench  \n### Drag and drop from Search results and Problems panel  \nYou can now drag files from the Search results and Problems panel over the editor area to control where these should open. The File Explorer always supported this and we have now expanded that feature to other regions of the UI.  \n![Drag and drop in search results](images/1_16/search-dnd.gif)",
    "url": "https://code.visualstudio.com/updates/v1_16#_drag-and-drop-from-search-results-and-problems-panel",
    "id": 328
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Open a folder via drag and drop  \nVS Code has always supported dragging a folder from outside VS Code into it to open the folder. VS Code stills support this, but the visual feedback is changed a little bit. Previously you could drop the folder anywhere in VS Code to open it. With this release, you need to drop the folder over the editor area to open it. This change is due to both a technical reason (an Electron update) as well as an explicit decision to make the multi-root experience better. If you are using VS Code Insiders with multi-root support, you will be happy to hear that you can now drop a folder into the File Explorer to add it to the workspace.  \n![Open folder via drag and drop](images/1_16/folder-drop.gif)",
    "url": "https://code.visualstudio.com/updates/v1_16#_open-a-folder-via-drag-and-drop",
    "id": 329
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Extension Host  \nVS Code uses a multi-process architecture, where extensions are executed in a separate extension host process. The workbench can now recover gracefully from an unexpected termination of the extension host process. All UI elements and state driven from extensions will be removed (for example, squiggles and Status Bar items), and, if the extension host is restarted, everything will return to normal.  \nIn the following short video, the extension host process is terminated. When the extension host terminates, basic editing still works, word completions are presented, and once the extension host is restarted, real TypeScript powered completions return:  \n![Extension Host Restart](images/1_16/exthost-restart.gif)",
    "url": "https://code.visualstudio.com/updates/v1_16#_extension-host",
    "id": 330
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Theming improvements  \nSeveral new theming color keys were introduced. These colors can be set by themes or directly by the user with the `workbench.colorCustomizations` setting:  \n- `tab.activeBorder`: A border drawn to the bottom of the active tab.\n- `tab.unfocusedActiveBorder`: A border drawn to the bottom of the active tab in an editor group that is not focused.\n- `editorOverviewRuler.border`: Color of the overview ruler border.\n- `editorOverviewRuler.findMatchForeground`: Overview ruler marker color for find matches.\n- `editorOverviewRuler.rangeHighlightForeground`: Overview ruler marker color for range highlights.\n- `editorOverviewRuler.selectionHighlightForeground`: Overview ruler marker color for selection highlights.\n- `editorOverviewRuler.wordHighlightForeground`: Overview ruler marker color for symbol highlights.\n- `editorOverviewRuler.wordHighlightStrongForeground`: Overview ruler marker color for write-access symbol highlights.\n- `editorOverviewRuler.modifiedForeground`: Overview ruler marker color for modified content.\n- `editorOverviewRuler.addedForeground`: Overview ruler marker color for added content.\n- `editorOverviewRuler.deletedForeground`: Overview ruler marker color for deleted content.\n- `editorOverviewRuler.errorForeground`: Overview ruler marker color for errors.\n- `editorOverviewRuler.warningForeground`: Overview ruler marker color for warnings.\n- `editorOverviewRuler.infoForeground`: Overview ruler marker color for information messages.  \nSee [Theme Color Reference](https://code.visualstudio.com/docs/getstarted/theme-color-reference) for a complete list of colors.",
    "url": "https://code.visualstudio.com/updates/v1_16#_theming-improvements",
    "id": 331
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n## Editor  \n### Undo stack preserved when file changes on disk  \nThanks to the work of [Ryan Stringham](https://github.com/stringham) in [PR #29655](https://github.com/microsoft/vscode/pull/29655), VS Code will now preserve the undo stack associated with a open file when it is reloaded due to a change on disk.",
    "url": "https://code.visualstudio.com/updates/v1_16#_undo-stack-preserved-when-file-changes-on-disk",
    "id": 332
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Smooth scrolling  \nThanks to the work of [@JD342](https://github.com/JD342) in [PR #25286](https://github.com/microsoft/vscode/pull/25286), the editor now has a new option, `editor.smoothScrolling`, that will make the editor scroll with an animation. Once enabled, scrolling between different locations when using `Page Up` or `Page Down`, when cycling through find matches, when jumping to a definition in the same file, and when using the mouse wheel will be animated.  \n> Note: Our platform currently does not support differentiating between scrolling initiated by a touchpad or a physical mouse wheel, and we currently use a heuristic to determine if smooth scrolling should be applied.  \n![Smooth Scrolling](images/1_16/smooth-scrolling.gif)",
    "url": "https://code.visualstudio.com/updates/v1_16#_smooth-scrolling",
    "id": 333
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Emmet suggestions as snippets  \nEmmet in suggestions/auto-completion list is most helpful when it is in the top few choices. There are two scenarios where Emmet suggestions can get pushed down the list:  \n* You have set `editor.snippetSuggestions` to `top` and so default/user/extension snippets are on top of your suggestion list.\n* When working on stylesheets, Emmet suggestions get sorted alphabetically among other CSS suggestions.  \nTo ensure Emmet suggestions stay on top of the suggestion list, set the new `emmet.showSuggestionsAsSnippets` to `true` and `editor.snippetSuggestions` to `top`.",
    "url": "https://code.visualstudio.com/updates/v1_16#_emmet-suggestions-as-snippets",
    "id": 334
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Emmet preferences  \nThe setting `emmet.preferences` as documented in [Emmet Preferences](https://docs.emmet.io/customization/preferences/) was discontinued in the last release as the new modular approach in [Emmet 2.0](https://code.visualstudio.com/blogs/2017/08/07/emmet-2.0) did not support them.  \nWe are bringing back support for a few of these preferences via the setting `emmet.preferences`:  \n* `css.propertyEnd`\n* `css.valueSeparator`\n* `sass.propertyEnd`\n* `sass.valueSeparator`\n* `stylus.propertyEnd`\n* `stylus.valueSeparator`\n* `css.unitAliases`\n* `css.intUnit`\n* `css.floatUnit`  \nIf you want support for any of the other preferences, please log a [feature request](https://github.com/microsoft/vscode/issues/new) for the same.",
    "url": "https://code.visualstudio.com/updates/v1_16#_emmet-preferences",
    "id": 335
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Snippets  \nThere is a new snippet variable: `$TM_FILENAME_BASE`. It resolves to the filename without extension, so from `/my/super/file.ts` it resolves to `file`.",
    "url": "https://code.visualstudio.com/updates/v1_16#_snippets",
    "id": 336
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Braille support  \nIt is now possible to change the cursor position in VS Code using Braille routing keys on a connected Braille display when using NVDA on Windows. Many thanks to [James Teh](https://github.com/jcsteh), who helped emulate the behavior of a Braille display in [issue #27216](https://github.com/microsoft/vscode/issues/27216).",
    "url": "https://code.visualstudio.com/updates/v1_16#_braille-support",
    "id": 337
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n## Integrated Terminal  \n### Terminal quick open improvements  \nThe Integrated Terminal can now be launched via the **Terminal: Switch Active Terminal** command or by typing \"term \" (with a trailing space) in **Quick Open**. When using the Integrated Terminal **Quick Open** dropdown, you can also create new terminals or delete existing terminals.  \n![Terminal quick open improvements](images/1_16/terminal-quick-pick.png)",
    "url": "https://code.visualstudio.com/updates/v1_16#_terminal-quick-open-improvements",
    "id": 338
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Force selection using Shift on Linux and Windows  \nRunning programs in mouse mode within the terminal (like tmux) will intercept the mouse and therefore not allow you to make a selection. You can now hold the `Shift` key to force the mouse event to perform a selection rather than be sent to the terminal. This functionality was added for `Alt` on macOS in 1.15.",
    "url": "https://code.visualstudio.com/updates/v1_16#_force-selection-using-shift-on-linux-and-windows",
    "id": 339
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Terminal Find widget improvements  \nThe terminal Find widget now supports find history. You can use `kb(history.showNext)` and  `kb(history.showPrevious)` to show the next or previous find term in the Find widget. Many thanks to [Christopher Leidigh](https://github.com/cleidigh), who has helped with both code refactoring and feature implementation in [PR #32113](https://github.com/microsoft/vscode/pull/32113).  \n![Terminal Find Widget improvements](images/1_16/terminal-find.gif)",
    "url": "https://code.visualstudio.com/updates/v1_16#_terminal-find-widget-improvements",
    "id": 340
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n## Languages  \n### HTML close tags  \nTag elements are now automatically closed when `>` of the opening tag is typed:  \n![Auto close on `>`](images/1_16/auto-close1.gif)  \nThe matching closing tag is inserted when `/` of the closing tag is entered:  \n![Auto close on `/`](images/1_16/auto-close2.gif)  \nThe new behavior is enabled by default and can be turned off with the setting `html.autoClosingTags`  \nThanks to [Jun Han](https://github.com/formulahendry) for leading the way with his [Auto Close Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag). Note that the Auto Close Tag extension has more features, in particular, it can be enabled for languages other than HTML as well.",
    "url": "https://code.visualstudio.com/updates/v1_16#_html-close-tags",
    "id": 341
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Color picker in HTML  \nThe new VS Code color picker UI is now available in HTML style sections.  \n![color picker in HTML](images/1_16/color-picker-html.png)",
    "url": "https://code.visualstudio.com/updates/v1_16#_color-picker-in-html",
    "id": 342
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### TypeScript 2.5  \nVS Code now includes TypeScript 2.5.2, which brings some exciting new editor features and fixes a number of bugs. You can read more about TypeScript 2.5 [here](https://devblogs.microsoft.com/typescript/announcing-typescript-2-5/). Below are details about several of the new features.",
    "url": "https://code.visualstudio.com/updates/v1_16#_typescript-2.5",
    "id": 343
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### JavaScript and TypeScript refactorings  \nThe new **Extract method** and **Extract function** code actions allow you to quickly refactor complex JavaScript or TypeScript code into new methods or functions:  \n![](images/1_16/ts-extract.gif)  \nSimply select some code, then click on the lightbulb in the gutter or press (`kb(editor.action.quickFix)`) to see available refactorings. Source code fragments can be extracted into a new method, or into a new function at various different scopes.",
    "url": "https://code.visualstudio.com/updates/v1_16#_javascript-and-typescript-refactorings",
    "id": 344
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### JSDoc type assertions  \nYou can now use write JSDoc type assertions in JavaScript files:  \n```js\n// @ts-check\n\nconst img = /** @type {HTMLImageElement} */ (document.getElementById('#cat'))\nimg.src = './cat.gif'\n```  \nThis is particularly useful when using `@ts-check` to enable [type checking in your JavaScript code](https://code.visualstudio.com/Docs/languages/javascript#_type-checking).",
    "url": "https://code.visualstudio.com/updates/v1_16#_jsdoc-type-assertions",
    "id": 345
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Better loose JavaScript/TypeScript file isolation  \nLoose JavaScript and TypeScript files that are not part of a `jsconfig.json` or `tsconfig.json` project are now split into an implicit project per root folder. Previously, loose files across all root folders in the workspace were grouped into the same implicit project. The change means that you should no longer see suggestions from files in one JavaScript folder showing up in JavaScript files in a different folder.",
    "url": "https://code.visualstudio.com/updates/v1_16#_better-loose-javascript/typescript-file-isolation",
    "id": 346
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Markdown preview refresh command  \nThe new **Markdown: Refresh Preview** command allows you to manually refresh the contents of a Markdown preview.  \n![](images/1_16/markdown-refresh.png)  \nThis can be used to reload images that have been modified on the file system.",
    "url": "https://code.visualstudio.com/updates/v1_16#_markdown-preview-refresh-command",
    "id": 347
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### CSS/JSON color preview  \nWe moved the inline color preview rendering from the CSS/JSON extensions to the VS Code core and in the process deprecated four configuration settings: `css.colorDecorators.enable`, `sass.colorDecorators.enable`, `scss.colorDecorators.enable` and `json.colorDecorators.enable`. There is a new general setting `editor.colorDecorators` to control if the inline color box should be rendered.",
    "url": "https://code.visualstudio.com/updates/v1_16#_css/json-color-preview",
    "id": 348
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### New Emmet topic  \nWe added a new [Emmet topic](https://code.visualstudio.com/docs/editor/emmet) describing VS Code's Emmet support. Learn about using Emmet abbreviations during your editing sessions, how to customize your Emmet experience, and even create custom Emmet snippets.",
    "url": "https://code.visualstudio.com/updates/v1_16#_new-emmet-topic",
    "id": 349
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### VS Code recipes  \nIn May, we've started to collect recipes for some non-standard or complex debugging setups in a [VS Code Recipe](https://github.com/microsoft/vscode-recipes) repository. This repository has now moved to the new location [https://github.com/microsoft/vscode-recipes](https://github.com/microsoft/vscode-recipes). Here you can find working examples using [Angular](https://github.com/microsoft/vscode-recipes/tree/main/Angular-CLI) and [Docker](https://github.com/microsoft/vscode-recipes/tree/fc84ccc87a2f6248f7bc1a367d56045b8b1ed738/Docker-TypeScript) in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_16#_vs-code-recipes",
    "id": 350
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n## Extension Authoring  \n### Upgraded Electron only supports \"inspector\" protocol  \nWith the upgrade to Electron 1.7, the built-in Node.js version only supports the \"inspector\" protocol (instead of \"legacy\"). This change has benefits for both [extension debugging](#extension-debugging) and [profiling](#profile-your-extension) as described below.  \n#### Extension debugging  \nExtension Host debugging (implemented by VS Code's built-in Node Debugger) has been switched to always use the \"inspector\" protocol which results in the following behavioral difference:  \nWith the \"inspector\" protocol, the Node.js debugger does not mark breakpoints as \"verified\" until they are bound to a real script location loaded by the runtime. This means that if your extension is not yet activated, breakpoints will appear gray (unverified). But don't worry, they will turn red (verified) as soon as the extension is activated.  \n![eh breakpoints](images/1_16/eh-breakpoints.gif)  \n#### Profile your extension  \nSince the upgraded version of Electron supports the more powerful \"inspector\" protocol, you can now profile extensions using Chrome DevTools. Do the following:  \n1. Start VS Code from the command line the with `--inspect-extensions=<port>`-flag, for example `code --inspect-extensions=9333`.\n2. In VS Code, from the **Command Palette** (`F1`), select **Developer: Toggle Developer Tools**, hit `Enter`.\n3. Select the **Console** tab and find a message that starts with `\"Debugger listening on port 9333\"` and that ends with a `chrome-devtools`-link.\n4. Open that link in Chrome for dedicated DevTools for the extension host.\n5. Use the Memory and CPU profiler to understand how memory and compute resource are being used.",
    "url": "https://code.visualstudio.com/updates/v1_16#_upgraded-electron-only-supports-inspector-protocol",
    "id": 351
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Handling uncaught errors  \nThe extension host process is now looking at the stack-traces of uncaught errors to know what extension is throwing them. For now, we only prefix those errors with the respective extension ids. In the future we have more plans, for example an extension runtime view or the ability to create an issue against extensions.",
    "url": "https://code.visualstudio.com/updates/v1_16#_handling-uncaught-errors",
    "id": 352
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Themable colors in extensions  \nExtension can now contribute new themable colors. These colors can be used in decorators and in the Status Bar.  \n```json\n\"colors\": [{\n\"id\": \"superstatus.error\",\n\"description\": \"Color for error message in the status bar.\",\n\"defaults\": {\n\"dark\": \"errorForeground\",\n\"light\": \"errorForeground\",\n\"highContrast\": \"errorForeground\"\n}\n}]\n```  \nOnce defined, user can customize the color in the `workspace.colorCustomization` setting. User themes can set the color value.",
    "url": "https://code.visualstudio.com/updates/v1_16#_themable-colors-in-extensions",
    "id": 353
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Source control API updates  \nThe way of accessing the Source Control view's input box via `scm.inputBox` is now deprecated in favor of using `SourceControl.inputBox`. This is related to the multi-root feature, in which each source control provider can have its own input box.  \nThe global `scmProvider` context key is now never set, since many source control providers can be active simultaneously.  \nThanks to [@marckassay](https://github.com/marckassay), you can now have [tooltips on source control resource decorations](https://github.com/microsoft/vscode/pull/29644).",
    "url": "https://code.visualstudio.com/updates/v1_16#_source-control-api-updates",
    "id": 354
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Debug API updates  \n**new `DebugConfigurationProvider` replaces `initialConfigurations` and `startSession` commands**  \nCurrently a debugger extension can contribute the \"hook\"-like commands `initialConfigurations` and `startSession` to participate in the generation of an initial launch configuration and the start of a debug session. In this milestone, we are proposing a \"real\" API that will replace the more-or-less untyped command based mechanism with a typed solution. At the same time we are deprecating the `initialConfigurations` and `startSession` commands (and we will remove them in the October release).  \nThe new API centers around a `DebugConfigurationProvider` which is registered for a specific debug type (which itself is contributed via a `debuggers` contribution as before). Whenever VS Code needs the initial debug configurations for a newly created launch.json it calls `provideDebugConfigurations` on the registered `DebugConfigurationProvider`s. A method `resolveDebugConfiguration` is called by VS Code when a new debug session is started. The implementation of `resolveDebugConfiguration` can \"massage\" the passed debug configuration by filling in missing values or by adding/changing/removing attributes.  \n> **Note:** Currently this API is proposed, so in order to use it you must opt into it by adding a `\"enableProposedApi\": true` to `package.json` and you'll have to copy the [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts) into your extension project. Also be aware that you cannot publish an extension to the Marketplace that uses the `enableProposedApi` attribute.  \n**Command `vscode.startDebug` is deprecated**  \nWith the introduction of a proper `vscode.debug.startDebugging(...)` API in the July release, it is no longer necessary to use the `vscode.startDebug` command to start a debug session. Therefore we are deprecating the `vscode.startDebug` command in the August release and plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33795).  \n**Command `vscode.workbench.customDebugRequest` is deprecated**  \nWith the introduction of a proper `DebugSession.customRequest(...)` API in the July release, it is no longer necessary to use the `vscode.workbench.customDebugRequest` command to send a custom request to the debug adapter. Therefore we are deprecating the `vscode.workbench.customDebugRequest` command in the August release and plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33796).",
    "url": "https://code.visualstudio.com/updates/v1_16#_debug-api-updates",
    "id": 355
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Debug contributions in package.json  \n**Variable substitution in `program` and `runtime` attributes in _package.json_ is no longer supported**  \nIn the [July milestone](https://code.visualstudio.com/updates/v1_15#_debug-contributions), we had deprecated variable substitution in the `program` and `runtime` attributes of the `debuggers` contribution in `package.json`. In August, we have removed this functionality.  \n**Using `debuggers.startSessionCommand` in _package.json_ is deprecated**  \nWith the introduction of the `resolveDebugConfiguration` method on type `DebugConfigurationProvider`, it is no longer necessary to contribute a `startSessionCommand` on the `debuggers` contribution point. Therefore we are deprecating the `startSessionCommand` in this milestone and plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33791).  \n**Using command with `debuggers.initialConfigurations` in _package.json_ is deprecated**  \nWith the introduction of the `provideDebugConfigurations` method on type `DebugConfigurationProvider`, it is no longer necessary to contribute a command for the `debuggers.initialConfigurations` contribution point. Therefore we are deprecating the ability to specify a command ID in this milestone and plan to drop it in October (but we will continue the support for contributing a JSON object literal). If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33794).",
    "url": "https://code.visualstudio.com/updates/v1_16#_debug-contributions-in-package.json",
    "id": 356
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Debug Adapter Protocol  \n**Source link attributes added to output event**  \nWe've added a `source`, `line`, and `column` attribute to the `Output` event type . With this a frontend can show a link to the source where the output was generated. **Please note**: VS Code does not yet support this feature in the UI.  \n**Loaded scripts support**  \nWe've added support for retrieving loaded scripts (`LoadedSourcesRequest`) and receiving loaded script events (`LoadedSourceEvent`).\n**Please note**: VS Code does not yet support this feature in the UI. The newly introduced Loaded Scripts Explorer for JavaScript debugging does not yet use this protocol but we are planning to migrate it to the new protocol.  \n**Display hints for variables and evaluation results**  \nWe've added display hints for variables and evaluation results (type `VariablePresentationHint`). A frontend can use these hints when rendering variables or evaluation results, for example for selecting specific icons that reflect their visibility.\n**Please note**: VS Code does not yet make use of these hints in the UI.",
    "url": "https://code.visualstudio.com/updates/v1_16#_debug-adapter-protocol",
    "id": 357
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Updated Marketplace extension README rendering  \nThe Visual Studio [Marketplace](https://marketplace.visualstudio.com/) is now using the [markdown-it](https://github.com/markdown-it/markdown-it) library to render the extension README. This is the same Markdown library used by VS Code's Extensions view README rendering and it is unlikely to affect your extension README online display.",
    "url": "https://code.visualstudio.com/updates/v1_16#_updated-marketplace-extension-readme-rendering",
    "id": 358
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Multi Root Workspace tips for extension authors  \nWe've created a guide for how to make your extension ready for multi-root workspaces. See the [Adopting Multi Root Workspace APIs](https://github.com/microsoft/vscode/wiki/Adopting-Multi-Root-Workspace-APIs) guide for more information. All the APIs discussed are considered stable and currently available. Note however that multi-root workspaces are only enabled in VS Code Insiders release.  \nThe extension authors guide covers:  \n* Basic APIs\n* Settings\n* Impact on extensions that have a language client/server model  \nIn addition to the guide, there are new samples on our [samples repository](https://github.com/microsoft/vscode-extension-samples) that exercise the new APIs. Look for samples with 'multi' in their folder name (for example, [basic-multi-root-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/basic-multi-root-sample).",
    "url": "https://code.visualstudio.com/updates/v1_16#_multi-root-workspace-tips-for-extension-authors",
    "id": 359
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Creating a multi-root workspace  \nWe expanded the ways to create a multi-root workspace in VS Code.  \n**Command line**  \nThere is a new command-line argument `--add`. Use it to add folders on the command line to the currently active window. The new folder argument should be provided as a path. This works for an empty workspace, a single-folder workspace, as well as an existing multi-root workspace.  \nIf you provide multiple folders to open from the command line, we used to open each folder in a separate window. Now, we automatically create a workspace for you and open all folders into a single window.  \n**Drag and drop**  \nIf you drop folders into VS Code, we used to open each folder into a separate window. With multi-root support, we now open all folders into one window by creating a workspace for you automatically. In addition, you can now drop folders into the File Explorer to add them to the workspace.  \n![Multi root drag and drop](images/1_16/multi-root-dnd.gif)  \n**Native platform File dialogs**  \nFinally, when you pick multiple folders from the native file dialog (via **File** > **Open**), we will open all folders at once into a workspace. The same is true when you drop multiple folders onto the application icon in the dock on macOS.",
    "url": "https://code.visualstudio.com/updates/v1_16#_creating-a-multi-root-workspace",
    "id": 360
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### New workspace file format  \nThe contents of the workspace file (`*.code-workspace`) was changed during this sprint. You do not have to worry about existing workspace files, they will be migrated to the new format automatically!  \nA new workspace file now looks like this:  \n```json\n{\n\"folders\": [\n{\n\"path\": \"monaco\"\n},\n{\n\"path\": \"Projects/vscode-distro\"\n},\n{\n\"path\": \"vscode-docs\"\n},\n{\n\"path\": \"/Users/username/Development/Microsoft/vscode-extension-sdk\"\n}\n]\n}\n```  \nAs you can see, the `id` property is no longer part of the file. Instead, the location of the workspace file on disk is used to derive an identifier for the workspace. We use this identifier to associate various items with the workspace:  \n* All UI state (for example, opened editors)\n* Dirty (unsaved) files (for Hot Exit)\n* Extension storage  \nOne advantage of this change is that you can now simply copy the workspace file on disk to open the same workspace into multiple windows.  \nAnother change was done on the `folders` property: each entry is now an object which gives us the possibility of adding additional metadata to folders in the future. We also went away from using file resources as the format for the folder paths and now simply use paths.  \nFinally, we support relative paths in the workspace file! A relative folder path will be resolved against the folder where the workspace file is stored. We automatically store a path as relative if we detect that the location of the workspace file is a parent of the folder. Otherwise the absolute path will be used.",
    "url": "https://code.visualstudio.com/updates/v1_16#_new-workspace-file-format",
    "id": 361
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Updates for multi-root workspaces  \nThe following built-in languages have been updated to support folder specific settings when working with multi-root workspaces:  \n* CSS\n* Sass (SCSS)\n* Less\n* JSON\n* HTML  \nIn addition, the following Microsoft extensions have been updated:  \n* [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n* [TSLint](https://marketplace.visualstudio.com/items?itemName=eg2.tslint)\n* [Go](https://marketplace.visualstudio.com/items?itemName=golang.go)  \nAs mentioned [above](#multi-root-workspace-tips-for-extension-authors), there is an multi-root workspace [guide](https://github.com/microsoft/vscode/wiki/Adopting-Multi-Root-Workspace-APIs) to help you update your own extensions.",
    "url": "https://code.visualstudio.com/updates/v1_16#_updates-for-multi-root-workspaces",
    "id": 362
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n### Multi-root and the Language Server Protocol  \nProposed protocol has been added to the LSP to support multi-root workspaces. Both the [VS Code language client](https://www.npmjs.com/package/vscode-languageclient) and the [VS Code language server](https://www.npmjs.com/package/vscode-languageserver) have been updated to support the proposed protocol. In addition, VS Code's language client has been enhanced to support a server per workspace folder. A corresponding example can be found [here](https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-multi-server-sample).",
    "url": "https://code.visualstudio.com/updates/v1_16#_multi-root-and-the-language-server-protocol",
    "id": 363
  },
  {
    "content": "See what is new in the Visual Studio Code August 2017 Release (1.16)  \n## Miscellaneous  \n### Electron update  \nIn this release, we updated from Electron 1.6.6 to 1.7.3. This brings a Chrome update from version 56 to 58 and Node.js from 7.4 to 7.9.",
    "url": "https://code.visualstudio.com/updates/v1_16#_electron-update",
    "id": 364
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Better macOS native window tabs support  \nYou can enable native window tabs on macOS (Sierra) with the `\"window.nativeTabs\": true` setting. In this milestone, we made working with native tabs easier.  \n![Native Window Tabs](images/1_17/nativetabs.png)  \nFor one, you will now find a \"+\" action next to the last tab to open a new window as tab. We also added the typical actions to the window menu for managing tabs.  \n**Note**: Native tabs on macOS High Sierra (10.13) are currently only partially supported. We are working on a fix, stay tuned!",
    "url": "https://code.visualstudio.com/updates/v1_17#_better-macos-native-window-tabs-support",
    "id": 366
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### New Visual Studio Code logo  \nWe've updated the VS Code logo and colors, orange for the stable release and green for Insiders.  \nRelease | Stable | Insiders\n--- | --- | ---\n**macOS / Linux** | ![macOS stable](images/1_17/mac-stable-orange.png) | ![Windows stable](images/1_17/mac-insiders-green.png)\n**Windows** | ![macOS insiders](images/1_17/windows-stable-orange.png) | ![Windows insiders](images/1_17/windows-insiders-green.png)  \nNote: Depending on your platform, you may still see the earlier logo due to operating system caching of the application icon.",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-visual-studio-code-logo",
    "id": 367
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Better --wait support  \nVS Code can be started with the `--wait` argument from the command line to wait until the instance that opens is closed. In this milestone, we made this feature more powerful by also terminating the calling process when all of the editors are closed that got opened. As a consequence, you can now use `--wait` with instances that are already opened, making this a much faster experience.  \n![Better --wait support](images/1_17/wait.gif)  \n**Note**: By default, we will now reuse any opened instance. To avoid that, add the `-n` argument to the command line.",
    "url": "https://code.visualstudio.com/updates/v1_17#_better---wait-support",
    "id": 368
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### New features around file encoding  \nIt is now possible to configure the `files.encoding` as well as `files.autoGuessEncoding` setting per language. VS Code also now supports CP 850 and CP 865 encoding.",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-features-around-file-encoding",
    "id": 369
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### New setting to control editor labels  \nA new setting, `workbench.editor.labelFormat`, adjusts the default label for editors. Possible values are `short`, `medium`, `long` and `default`. By default, editors will only show information about the file path when multiple editors with the same name are opened. If any of the other options is used, the editor label will always show path information.  \n![Label Format](images/1_17/labelformat.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-setting-to-control-editor-labels",
    "id": 370
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### ${workspaceFolder} in launch.json and tasks.json  \nWe have introduced a new substitution variable `${workspaceFolder}`. This variable will get substituted to the absolute path of the workspace folder containing the appropriate `launch.json` or `tasks.json`. This has the same effect as the previous `${workspaceRoot}`, however we felt like the old name was not specific enough for the upcoming multi-root workspace scenarios. We are deprecating `${workspaceRoot}`, though we will still support substituting it for backwards compatibility. More about variable substitution can be found [here](https://code.visualstudio.com/docs/editor/debugging#_variable-substitution).",
    "url": "https://code.visualstudio.com/updates/v1_17#_${workspacefolder}-in-launch.json-and-tasks.json",
    "id": 371
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### QuickOpen uses ripgrep  \nQuickOpen (`kb(workbench.action.quickOpen)`) now uses [ripgrep](https://github.com/BurntSushi/ripgrep) to retrieve the full list of file names before applying the user's input filter. Windows users should see improved performance on large folders getting them on par with Linux and macOS which were previously using `find` to boost listing file names.",
    "url": "https://code.visualstudio.com/updates/v1_17#_quickopen-uses-ripgrep",
    "id": 372
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Editor  \n### Folding regions  \nFolding now supports region markers. Markers are defined by the language in the language configuration.  \nThe following languages currently have markers defined:  \n* TypeScript/JavaScript:  `//#region` and `//#endregion`  and `//region` and `//endregion`\n* C#: `#region` and `#endregion`\n* C/C++: `#pragma region` and `#pragma endregion`\n* F#: `//#region` and `//#endregion`\n* PowerShell: `#region` and `#endregion`\n* VB: `#Region` and `#End Region`  \n![Region Folding](images/1_17/region-folding.gif)  \nEach language also has snippets available for the markers. Type '#' and invoke code completion to see them.  \nTo have region markers configured for your language, contact the language extension provider.",
    "url": "https://code.visualstudio.com/updates/v1_17#_folding-regions",
    "id": 373
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Folding in off-side languages  \nIn languages that follow the [off-side rule](https://en.wikipedia.org/wiki/Off-side_rule) for code blocks, empty lines belong to the next folding region.  \n![Off-side Folding](images/1_17/offside-folding.gif)  \nThe setting is configured in the language configuration and is enabled for the following languages:  \nPython, Yaml, Pug, Markdown, Clojure, CoffeeScript, FSharp.",
    "url": "https://code.visualstudio.com/updates/v1_17#_folding-in-off-side-languages",
    "id": 374
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Snippet selector  \nThe snippet picker dropdown shown by the **Insert Snippet** command now displays snippets in two groups, **User Snippets** and **Extension Snippets**. User-defined snippets are listed on top to give you quick access to your favorite snippets.  \n![Snippet Buckets](images/1_17/snippet_buckets.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_snippet-selector",
    "id": 375
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Snippet transforms  \nThe VS Code snippet engine now supports variable transformations. Transformations can change the value of a variable before inserting it. The format is `var_name/regular_expression/format_string/options`. The sample below is a snippet that creates a public Java class whose name is derived from the filename.  \n```json\n\"Public Class\": {\n\"prefix\": \"pclass\",\n\"body\": [\n\"public class ${1:${TM_FILENAME/(.*)\\\\.java/${1:/capitalize}/}} {\",\n\"\\tpublic $1 (${2:params}) {\",\n\"\\t\\t$0\",\n\"\\t}\",\n\"}\"\n],\n\"description\": \"New public class\"\n}\n```  \nThe new part is this: `${TM_FILENAME/(.*)\\\\.java/${1:/capitalize}/}` and this is what it does:  \n1. Resolve the value for `TM_FILENAME`, for example `myClass.java`.\n2. Use the regular expression `/(.*)\\\\.java` to create a matching group for everything that precedes the `.java` ending, for example `myClass`.\n3. Take the value of the first matching group, ensure it start with capital letters (`/capitalize`), and insert it (`MyClass`).  \nTo learn more, check out our [snippet grammar](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax) to see what you can do and then get creative.",
    "url": "https://code.visualstudio.com/updates/v1_17#_snippet-transforms",
    "id": 376
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Lightbulb improvements  \n* The new `editor.lightbulb.enabled` setting enables or disables the Code Action light bulb in the editor. The default value is `true`.\n* The Code Action menu now selects the first entry by default making it easier to run.",
    "url": "https://code.visualstudio.com/updates/v1_17#_lightbulb-improvements",
    "id": 377
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Improved history navigation  \nVS Code has commands to navigate within the editor history (`workbench.action.navigateBack`, `workbench.action.navigateForward`), either across or within files. During this milestone, we tweaked the experience to produce less unwanted stops in history:  \n* We now require a minimum distance of 10 lines from one selection to another to add a new entry to history (previously we required a distance of 5 lines).\n* Navigating less than 10 lines replaces the last history stop within the file with that location and thus avoids introducing unwanted stops.  \nIn addition, we no longer center the selection vertically when navigating unless the selection is outside of the view. This makes it easier to stay in context while navigating around.",
    "url": "https://code.visualstudio.com/updates/v1_17#_improved-history-navigation",
    "id": 378
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Coloring of warning squiggles  \nYou can now use a different color for warning squiggles to differentiate them from information:  \n![Snippet Buckets](images/1_17/warning-color.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_coloring-of-warning-squiggles",
    "id": 379
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Emmet preferences  \nWe're continuing to add support for more [Emmet Preferences](https://docs.emmet.io/customization/preferences/) in [Emmet 2.0](https://code.visualstudio.com/blogs/2017/08/07/emmet-2.0). In addition to the preferences we added in the [last release](https://code.visualstudio.com/updates/v1_16#_emmet-preferences), we now have:  \n* `bem.elementSeparator`\n* `bem.modifierSeparator`\n* `filter.commentBefore`\n* `filter.commentTrigger`\n* `filter.commentAfter`  \nThe format for the `filter.commentAfter` preference is different and simpler in Emmet 2.0.  \nFor example, instead of the older format  \n```json\n\"emmet.preferences\": {\n\"filter.commentAfter\": \"\\n<!-- /<%= attr('id', '#') %><%= attr('class', '.') %> -->\"\n}\n```  \nyou would use  \n```json\n\"emmet.preferences\": {\n\"filter.commentAfter\": \"\\n<!-- /[#ID][.CLASS] -->\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_17#_emmet-preferences",
    "id": 380
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Integrated Terminal  \n### New rendering engine  \nThe integrated terminal is now using a new canvas-based rendering engine which renders approximately 5 to 45 times faster, depending on the situation. This change reduces the input latency, power usage, and increases the frame rate of the terminal significantly.  \n![60 FPS is now possible in the terminal](images/1_17/terminal_60fps.gif)  \nYou can read about this in more detail in [our recent blog post](https://code.visualstudio.com/blogs/2017/10/03/terminal-renderer).",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-rendering-engine",
    "id": 381
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Debugging  \n### Debug Console messages show source location  \nOutput messages in the Debug Console now optionally show the originating source location on the right hand side:  \n![Output message show their source location](images/1_17/console_messages.gif)  \nClicking on this origin opens the source file in the editor.  \n**Note**: The following debuggers already support this feature:  \n* Node.js - \"inspector\" protocol only\n* Extension Host debugging\n* [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension  \nWe expect more debug extensions to adopt this feature soon.",
    "url": "https://code.visualstudio.com/updates/v1_17#_debug-console-messages-show-source-location",
    "id": 382
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Node Debugging  \n### First steps towards WSL support  \nThanks to a [feature](https://github.com/microsoft/vscode-node-debug/pull/158) contributed by [Bartosz Sosnowski (@bzoz)](https://github.com/bzoz), the Node.js debugger (for this milestone \"legacy\" protocol only), supports launching and debugging Node.js applications in the [Windows Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about) (WSL).  \nWith this feature, you can add a `useWSL` flag to a debug configuration to make it run in the Linux subsystem on Windows. The flag configures the debugger not only to launch the Node.js runtime in WSL but it also maps paths correctly between WSL and Windows.  \nHere is the simplest debug configuration for debugging `hello.js` in WSL:  \n```json\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Launch in WSL\",\n\"useWSL\": true,\n\"program\": \"${workspaceFolder}/hello.js\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_17#_first-steps-towards-wsl-support",
    "id": 383
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Viewing output from direct stdout/stderr writes  \nThere are a number of Node.js logging libraries that write directly to the stdout stream, with `process.stdout.write`, rather than `console.log`. This is faster, but it isn't sent through Node's debug socket, so these messages were previously not shown in the Debug Console when debugging with the new 'inspector' protocol.  \nA [PR #138](https://github.com/microsoft/vscode-node-debug2/pull/138) from [Vakhurin Sergey (@igelbox)](https://github.com/igelbox) adds a new launch config option, `\"outputCapture\": \"std\"` which will tell the debug adapter to show stdout/stderr output in the Debug Console.",
    "url": "https://code.visualstudio.com/updates/v1_17#_viewing-output-from-direct-stdout/stderr-writes",
    "id": 384
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Import path quick suggestions in JavaScript and TypeScript  \nJavaScript and TypeScript have provided IntelliSense for import paths ever since VS Code 1.9. However, you may not have known about this feature because it required manually triggering IntelliSense while typing the import. With VS Code 1.17, we now automatically show module and path suggestions as soon as you start typing an `import` or `require` path:  \n![](images/1_17/quick-suggestion-path-intellisense.gif)",
    "url": "https://code.visualstudio.com/updates/v1_17#_import-path-quick-suggestions-in-javascript-and-typescript",
    "id": 385
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Improved colorization in Dark+ and Light+ themes  \nVS Code's built-in Dark+ and Light+ themes now highlight regular expression components so that they can be more easily identified:  \n![Dark+ colorization of a JavaScript regular expression](images/1_17/regexp-colorization-improvements.png)  \nColorization of format strings and string interpolation has also been improved for a few languages.  \nPython:  \n![Dark+ colorization of Python format string](images/1_17/python-string-sub-colorization.png)  \nRuby:  \n![Dark+ colorization of ruby string interpolation](images/1_17/ruby-interpolation-colorization.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_improved-colorization-in-dark+-and-light+-themes",
    "id": 386
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Extract method now triggers rename  \nThe extract method and extract function refactoring for JavaScript and TypeScript will now automatically trigger a rename on the extracted method or function.",
    "url": "https://code.visualstudio.com/updates/v1_17#_extract-method-now-triggers-rename",
    "id": 387
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Auto detection of TypeScript watch build tasks  \nTypeScript now automatically creates watch tasks for `tsconfig.json` files in a project, along with the normal build tasks:  \n![Build and watch tasks for a tsconfig.json file](images/1_17/tsc-build-and-watch.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_auto-detection-of-typescript-watch-build-tasks",
    "id": 388
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### JavaScript and TypeScript IntelliSense now supports Markdown  \nSuggestions and parameter hints for JavaScript and TypeScript can now render Markdown content.  \n![Markdown in TypeScript suggestion documentation](images/1_17/js-markdown-intellisense.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_javascript-and-typescript-intellisense-now-supports-markdown",
    "id": 389
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Improvements to JSX language scoping  \nJavaScript expressions inside of JSX tags now are correctly marked as being of the JavaScript language. This fixes a number of bugs around basic language features such as bracket matching and code commenting.",
    "url": "https://code.visualstudio.com/updates/v1_17#_improvements-to-jsx-language-scoping",
    "id": 390
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Language support in Markdown code blocks  \nFenced code blocks in Markdown files now set the language mode for their contents. This means that basic language features such as bracket matching and code commenting now use the settings for the fenced code block's language rather than the generic Markdown language settings:  \n![Commenting and other basic editor features now use the language settings from the fenced code block's language](images/1_17/markdown-fenced-commenting.gif)",
    "url": "https://code.visualstudio.com/updates/v1_17#_language-support-in-markdown-code-blocks",
    "id": 391
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Detection of Markdown reference links  \nReference links and reference link definitions are now detected as links in the editor:  \n```markdown\nSome text with a [link][link definition] in it\n\n[link definition]: /path/to/link\n```  \nClicking on `link definition` will jump to `[link definition]:`. `/path/to/link` is now also detected as a link.",
    "url": "https://code.visualstudio.com/updates/v1_17#_detection-of-markdown-reference-links",
    "id": 392
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### CSS language improvements  \nThe built-in CSS/LESS/SCSS language server was updated and now supports the following features:  \n* Validation and completion for the `@supports` rule.\n* Support for `@import` with queries.\n* Support for `contain` and various flex properties.",
    "url": "https://code.visualstudio.com/updates/v1_17#_css-language-improvements",
    "id": 393
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### R language improvements  \nR has improved syntax highlighting based on the grammar published [here](https://github.com/randy3k/R-Box).",
    "url": "https://code.visualstudio.com/updates/v1_17#_r-language-improvements",
    "id": 394
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Source Control  \n### Improved multiple SCM support  \nContinuous iteration on the multiple source control provider support UX has led us to a master-detail implementation.  \n![multiple scm providers](images/1_17/scm.png)  \nThere is a new **SOURCE CONTROL PROVIDERS** section which gives you an overview when you have multiple active repositories. These can be contributed by several SCM providers; for example, you can have Git repositories side-by-side with Azure DevOps Server workspaces. As you select repositories in this view, they get highlighted underneath. You can use <kbd>ctrl+click</kbd> or <kbd>shift+click</kbd> to select multiple repositories. They will appear as split views underneath.",
    "url": "https://code.visualstudio.com/updates/v1_17#_improved-multiple-scm-support",
    "id": 395
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Increased Performance  \nWe did quite a bit of performance work around the Source Control extension API and UI. Overall, the experience should be much smoother especially in repositories with a large number of objects.",
    "url": "https://code.visualstudio.com/updates/v1_17#_increased-performance",
    "id": 396
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Git stash commands  \nYou might have missed this in the last release, but thanks to a PR from [Krzysztof Cie\u015blak (@Krzysztof-Cieslak)](https://github.com/Krzysztof-Cieslak), VS Code has Git `stash` commands in the **Source Control** view **More Actions** (...) dropdown.  \n![git stash commands](images/1_17/git-stash.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_git-stash-commands",
    "id": 397
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## New Documentation  \n### Java language support  \nA new [Java](https://code.visualstudio.com/docs/languages/java) language topic describes how to install and use the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) for great Java code intelligence and debugging support in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_17#_java-language-support",
    "id": 398
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Tips and Tricks  \nWe've added a [Tips and Tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks) topic to help you quickly become productive with VS Code. It includes the VS Code team's favorite features and keyboard shortcuts which they use on a daily basis.",
    "url": "https://code.visualstudio.com/updates/v1_17#_tips-and-tricks",
    "id": 399
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Debugging Recipes  \nWe've been working on [recipes](https://github.com/microsoft/vscode-recipes) for various debugging scenarios and added a new topic outlining these guides and providing links to helpful blog posts. See [Debugging Recipes](https://code.visualstudio.com/docs/nodejs/debugging-recipes) for help on debugging frameworks such as React and Angular and runtimes like Electron and Docker.",
    "url": "https://code.visualstudio.com/updates/v1_17#_debugging-recipes",
    "id": 400
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Updated keyboard shortcut cheat sheets  \nWe refreshed the keyboard shortcut PDFs and added the keybindings for useful commands such as **Open User Settings** (`kb(workbench.action.openSettings)`) and **Open Keyboard Shortcuts** (`kb(workbench.action.openGlobalKeybindings)`).  \n* [Windows](https://go.microsoft.com/fwlink/?linkid=832145)\n* [macOS](https://go.microsoft.com/fwlink/?linkid=832143)\n* [Linux](https://go.microsoft.com/fwlink/?linkid=832144)",
    "url": "https://code.visualstudio.com/updates/v1_17#_updated-keyboard-shortcut-cheat-sheets",
    "id": 401
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Extension Authoring  \n### Multi root guide for extension authors  \nWe are very close to shipping multi-root support for all users.  All of the VS Code core features [SCM, Settings, Debug, Tasks, ...] and extensions [HTML, JS/TS, ESLint, Docker, ...] now support multi-root concepts.  \nWe've created a guide for how to make your extension ready for multi-root workspaces. See the [Adopting Multi Root Workspace APIs](https://github.com/microsoft/vscode/wiki/Adopting-Multi-Root-Workspace-APIs) guide for more information. All the APIs discussed are considered stable and currently available. Note however that multi-root workspaces are only enabled in VS Code Insiders release.  \nThe extension authors guide covers:  \n* Basic APIs\n* Settings\n* Impact on extensions that have a language client/server model  \nIn addition to the guide, there are new samples on our [samples repository](https://github.com/microsoft/vscode-extension-samples) that exercise the new APIs. Look for samples with 'multi' in their folder name (for example, [basic-multi-root-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/basic-multi-root-sample)).",
    "url": "https://code.visualstudio.com/updates/v1_17#_multi-root-guide-for-extension-authors",
    "id": 402
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### File Save & File Open dialogs  \nThe extension API has two new functions that allow extensions to show dialogs for saving and opening files or folders. The snippet below will show an open dialog to select image files.  \n```ts\nvscode.window.showOpenDialog({\ncanSelectMany: true,\nfilters: { 'Images': ['png', 'jpg'] }\n}).then(result => {\nif (result) {\nconsole.log(`${result.length} files have been selected`);\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_17#_file-save-&-file-open-dialogs",
    "id": 403
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Styled completions and signature help  \nWe have extended the API for `CompletionItems` and `SignatureHelp` such that documentation can be provided as `MarkdownString`. This allows for fancy rendering, embedded code snippets, and links to further documentation. Our own TypeScript and JavaScript extension is already using `MarkdownString`.  \n```ts\nconst item = new vscode.CompletionItem('Pretty');\nitem.documentation = new vscode.MarkdownString('*Hello*, `World`');\n```",
    "url": "https://code.visualstudio.com/updates/v1_17#_styled-completions-and-signature-help",
    "id": 404
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### CompletionContext  \n`CompletionItemProvider.provideCompletionItems` now is provided with a new `CompletionContext` parameter. This context contains information about how the completion provider was triggered:  \n```ts\ninterface CompletionContext {\n/**\n* How the completion was triggered.\n*/\nreadonly triggerKind: CompletionTriggerKind;\n\n/**\n* Character that triggered the completion item provider.\n* `undefined` if provider was not triggered by a character.\n* The trigger character is already in the document when the completion provider is triggered.\n*/\nreadonly triggerCharacter?: string;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_17#_completioncontext",
    "id": 405
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Touch Bar support  \nExtensions can now contribute commands to the touch bar on macOS. A new menu identifier `touchBar` was added for this purpose:  \n```json\n{\n\"contributes\": {\n\"menus\": {\n\"touchBar\": [\n{\n\"command\": \"markdown.showPreview\",\n\"when\": \"editorLangId == markdown\",\n\"group\": \"navigation\"\n}\n]\n}\n}\n}\n```  \nThe command context is always the currently active file making it possible to show and hide the command dynamically based on the `when` condition. It can either have a label or an icon. If the command provides an icon, the label will not be shown because the space is very limited in the touch bar.  \n**Note**: We currently require the commands icon to be of PNG file type. SVG is not supported.",
    "url": "https://code.visualstudio.com/updates/v1_17#_touch-bar-support",
    "id": 406
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Refer to the 'active' view column  \nThe editor layout works with columns 1, 2, and 3 and when using the `showTextDocument` function, you can set a column. However, often you simply want to refer to the currently active column. To make that easy, we have added a new symbolic column: `ViewColumn.Active`. It will always show a document in the currently active column and saves you from figuring out what column that is.  \nThanks to [Eric Amodio (@eamodio)](https://github.com/eamodio) for this contribution.",
    "url": "https://code.visualstudio.com/updates/v1_17#_refer-to-the-'active'-view-column",
    "id": 407
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### MarkedString vs MarkdownString  \nNote that with this release, you cannot use command links in `MarkedStrings` anymore. If this affects your extension, we have likely already contacted you. In short, use the new `MarkdownString` and make sure to mark it as trusted. All the details and background can be found [here](https://github.com/microsoft/vscode/issues/33577).",
    "url": "https://code.visualstudio.com/updates/v1_17#_markedstring-vs-markdownstring",
    "id": 408
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### New Source Control menu  \nYou can now use the `scm/sourceControl` menu id to contribute commands to the inline source control provider rows in the new **SOURCE CONTROL PROVIDERS** section of the **Source Control** view. Only context menu commands are supported for now.",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-source-control-menu",
    "id": 409
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Tasks contribution API  \nThe tasks API was enhanced to support contributing tasks for different workspace folders. The constructor to create tasks in an extension has an additional argument to specific whether the task is global, user local, or belongs to a workspace folder. The constructor signature looks like this:  \n```ts\nexport class Task {\n/**\n* Creates a new task.\n*\n* @param definition The task definition as defined in the taskDefinitions extension point.\n* @param target Specifies the task's target. It is either a global or a workspace task\n*  or a task for a specific workspace folder.\n* @param name The task's name. Is presented in the user interface.\n* @param source The task's source (e.g. 'gulp', 'npm', ...) presented in the user interface.\n* @param execution The process or shell execution.\n* @param problemMatchers the names of problem matchers to use, like '$tsc'\n*  or '$eslint'. Problem matchers can be contributed by an extension using\n*  the `problemMatchers` extension point.\n*/\nconstructor(taskDefinition: TaskDefinition, target: WorkspaceFolder | TaskScope.Global | TaskScope.Workspace, name: string, source: string, execution?: ProcessExecution | ShellExecution, problemMatchers?: string | string[]);\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_17#_tasks-contribution-api",
    "id": 410
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Debug API updates  \n**Command `vscode.startDebug` is deprecated**  \nWith the introduction of a proper `vscode.debug.startDebugging(...)` API in the July release, it is no longer necessary to use the `vscode.startDebug` command to start a debug session. We've deprecating the `vscode.startDebug` command in August and still plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33795).  \n**Command `vscode.workbench.customDebugRequest` is deprecated**  \nWith the introduction of a proper `DebugSession.customRequest(...)` API in the July release, it is no longer necessary to use the `vscode.workbench.customDebugRequest` command to send a custom request to the debug adapter. We've deprecated the `vscode.workbench.customDebugRequest` command in August and still plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33796).",
    "url": "https://code.visualstudio.com/updates/v1_17#_debug-api-updates",
    "id": 411
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Debug contributions in package.json  \n**New Activation event `onDebug`**  \nWith the new debug API, extensions need a way to register their `DebugConfigurationProvider` early enough so that VS Code has them available when it needs them. Since `DebugConfigurationProvider` are typically registered in the `activate` function of an extension, we've introduced a new activation event `onDebug` which is fired just in time before any debugging activity starts (for example, configuring launch configurations or launching a debug session).  \nIf your extension registers a `DebugConfigurationProvider`, make sure that your `activationEvents` contribution in the package.json has an `onDebug` entry.  \n**Activation event `onDebug:type` is deprecated**  \nWith the introduction of the `DebugConfigurationProvider` API, it has become difficult to correctly support the activation event `onDebug:type` (where 'type' is a debug type). We recommend using the newly introduced activation event `onDebug` instead.  \nWe are deprecating the `onDebug:type` activation event in the September milestone and plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33803).  \n**Using `debuggers.startSessionCommand` in _package.json_ is deprecated**  \nWith the introduction of the `resolveDebugConfiguration` method on type `DebugConfigurationProvider`, it is no longer necessary to contribute a `startSessionCommand` on the `debuggers` contribution point. Therefore we are deprecating the `startSessionCommand` in this milestone and plan to drop it in October. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33791).  \n**Using command with `debuggers.initialConfigurations` in _package.json_ is deprecated**  \nWith the introduction of the `provideDebugConfigurations` method on type `DebugConfigurationProvider`, it is no longer necessary to contribute a command for the `debuggers.initialConfigurations` contribution point. Therefore we are deprecating the ability to specify a command ID in this milestone and plan to drop it in October (but we will continue the support for contributing a JSON object literal). If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/33794).",
    "url": "https://code.visualstudio.com/updates/v1_17#_debug-contributions-in-package.json",
    "id": 412
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Debug Adapter Protocol  \n**`BreakpointEvent` now supports a `removed` reason**  \nA `removed` reason has been added to the value set of the `reason` attribute of `BreakpointEvent`. With this addition, a debug adapter can notify its client (frontend) that a breakpoint has been removed.  \n**Please note**: With this release, VS Code now fully supports the `new`, `changed`, and `removed` reasons of the breakpoint. Previously VS Code only supported a `changed` (or `updated`) breakpoint event. Please make sure that your breakpoint event uses the correct value for `reason`.  \n**Locale can be passed to debug adapter**  \nOptionally a client (frontend) of the debug adapter protocol can pass the current locale to the debug adapter so that it can choose the correct translation for any user visible information passed back to the client (for example, error messages). There is now an optional `locale` attribute on the `initialize` request.",
    "url": "https://code.visualstudio.com/updates/v1_17#_debug-adapter-protocol",
    "id": 413
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Preview: Remote File System API  \nWe are exploring support for \"remote file systems\". New APIs will allow extensions to contribute files and folders to the Explorer, allow to create, delete, move, and copy them, as well as to read and write files. The goal is that items from remote sources appear and behave just like files from your local disk.  \nThe screen-capture below shows the files of an Azure function being edited like a file on disk.  \n![File With Changes from Ftp](images/1_17/remote_fs.png)  \nTo familiarize yourself with this, see the [proposed-apis](https://github.com/microsoft/vscode/blob/38779c0593c7604136c584060ea18212d8a00b4f/src/vs/vscode.proposed.d.ts#L116) and more importantly check out our [ftp-sample](https://github.com/jrieken/ftp-sample). As we make progress and refinements on the API, we will make sure to keep this sample up to date.",
    "url": "https://code.visualstudio.com/updates/v1_17#_preview:-remote-file-system-api",
    "id": 414
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Extension recommendations  \nWe extended the support of extension recommendations to multi-root workspaces. Extension recommendations from all root folders are consolidated and shown. You can also configure recommendations for the multi-root workspace itself using the command **Extensions: Configure Recommended Extensions (Workspace Folder)**. This will open the workspace configuration file and you can enter the recommendations under a `extensions/recommendations` section.  \n![Extension Recommendations](images/1_17/extension_recommendations.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_extension-recommendations",
    "id": 415
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### New API: Workspace Folder Picker  \nWith the advent of multi-root support in VS Code, we noticed that often an extension wants to ask the user for a specific `WorkspaceFolder`. The new proposed API method `showWorkspaceFolderPick` opens a picker and returns the result.  \n![Workspace Folder Picker](images/1_17/picker.png)",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-api:-workspace-folder-picker",
    "id": 416
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### New API: RelativePattern  \nTo make it easier to filter file paths to a specific `WorkspaceFolder`, we added a new type `RelativePattern` and support it in the following places:  \n* `workspace.createFileSystemWatcher`\n* `workspace.findFiles(include, exclude)`\n* `DocumentFilter#pattern`  \nThe type is a class as follows:  \n```typescript\n/**\n* A relative pattern is a helper to construct glob patterns that are matched\n* relatively to a base path. The base path can either be an absolute file path\n* or a [workspace folder](#WorkspaceFolder).\n*/\nclass RelativePattern {\n\n/**\n* A base file path to which this pattern will be matched against relatively.\n*/\nbase: string;\n\n/**\n* A file glob pattern like `*.{ts,js}` that will be matched on file paths\n* relative to the base path.\n*\n* Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,\n* the file glob pattern will match on `index.js`.\n*/\npattern: string;\n\n/**\n* Creates a new relative pattern object with a base path and pattern to match. This pattern\n* will be matched on file paths relative to the base path.\n*\n* @param base A base file path to which this pattern will be matched against relatively.\n* @param pattern A file glob pattern like `*.{ts,js}` that will be matched on file paths\n* relative to the base path.\n*/\nconstructor(base: WorkspaceFolder | string, pattern: string)\n}\n```  \nYou can create a relative pattern via the following call:  \n```typescript\n// Construct a relative pattern for the first root folder\nconst relativePattern = new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], '*.ts');\n```  \nWhen a `RelativePattern` is used, file paths will be matched relative to the base path of the pattern. For example, given a base path of `/home/work/folder` and a file path of `/home/work/folder/index.ts`, the pattern within `RelativePattern` will match on `index.ts`.",
    "url": "https://code.visualstudio.com/updates/v1_17#_new-api:-relativepattern",
    "id": 417
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Smarter workspace file format saving  \nWhen saving the workspace file back to disk upon changes, we will now prefer to use forward slashes for paths on Windows in case the file is already using slashes. This should make it easier to share workspace files between Windows and other platforms.  \nIn addition, we now preserve any comments within the workspace file. Even though JSON does not allow for comments inside the file, we now use the same JSON parser that we use for VS Code settings which allows for comments and is also more error tolerant. For example, trailing commas will not render the workspace file as invalid anymore.",
    "url": "https://code.visualstudio.com/updates/v1_17#_smarter-workspace-file-format-saving",
    "id": 418
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n### Workspace folder name  \nYou can now assign a `name` property to each of the folders within the configuration file. The name will be picked up in the Explorer and can be used to distinguish multiple workspace folders that have the same basename.",
    "url": "https://code.visualstudio.com/updates/v1_17#_workspace-folder-name",
    "id": 419
  },
  {
    "content": "See what is new in the Visual Studio Code September 2017 Release (1.17)  \n## Engineering  \n### Issue management automation  \nWe have extended the use of our [Probot](https://github.com/probot/probot) instance beyond our main repository and now use it for automatic issue assignment and closing of stale \"needs more info\" issues in our extension and other repositories.",
    "url": "https://code.visualstudio.com/updates/v1_17#_issue-management-automation",
    "id": 420
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Git status in File Explorer  \nTo satisfy another [very popular feature request](https://github.com/microsoft/vscode/issues/178), we added support to the File Explorer to show modified, added, conflicting, and ignored files in a different color and with a badge.  \n![Move confirmation](images/1_18/git-decorations.png)  \nThe Git file decorations can be customized in many ways. You can hide the decorations entirely with the `git.decorations.enabled` setting and configure to only show colors `explorer.decorations.colors` or badges `explorer.decorations.badges`. There are new colors for theme authors which are prefixed with `gitDecoration`.  \nThere is also a *proposed* API to allow extension authors to add color decorations to arbitrary resources. We haven't finalized on anything yet but are eager to learn how you would use decorations.",
    "url": "https://code.visualstudio.com/updates/v1_18#_git-status-in-file-explorer",
    "id": 422
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Vertical panels  \nPer popular [user request](https://github.com/microsoft/vscode/issues/2806), we now support a vertical panel layout. Using the actions **Move to Right** and **Move to Bottom** in the panel title bar, panels can switch between being displayed on the bottom or the right side.  \n![Vertical Panel](images/1_18/vertical-panel.png)",
    "url": "https://code.visualstudio.com/updates/v1_18#_vertical-panels",
    "id": 423
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Panel title bar improvements  \nWe have improved the panel title bar such that it is now possible to rearrange and hide panels as well as added overflow support. Overflow with the **Additional Views** dropdown is particularly useful when the panels are docked vertically and have limited horizontal space.  \n![Panel title](images/1_18/panel-title.gif)",
    "url": "https://code.visualstudio.com/updates/v1_18#_panel-title-bar-improvements",
    "id": 424
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Blue logo for Stable  \nThe VS Code logo for Stable releases is now blue again. You can read all about our icon journey in this [blog post](https://code.visualstudio.com/blogs/2017/10/24/theicon).  \n![VS Code Logo](images/1_18/blueicon.png)  \n**Note**: Depending on your platform, you may still see the earlier logo due to operating system caching of the application icon.",
    "url": "https://code.visualstudio.com/updates/v1_18#_blue-logo-for-stable",
    "id": 425
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Confirmations in File Explorer  \nWe now present a confirmation dialog when moving files or folders in the File Explorer via drag and drop. This should prevent accidentally performing a move when not desired. If you don't want to see the confirmation dialog, you can configure `explorer.confirmDragAndDrop` to `false`.  \n![Move confirmation](images/1_18/move-confirmation.png)  \nWe also added a new setting, `explorer.confirmDelete`, to optionally hide our existing delete confirmation dialog.  \n**Note**: We will always show a confirmation dialog when deleting a file or folder will bypass your platform's trash bin.",
    "url": "https://code.visualstudio.com/updates/v1_18#_confirmations-in-file-explorer",
    "id": 426
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Quick Open applies .gitignore exclusions  \n**Quick Open** (`kb(workbench.action.quickOpen)`) applies the exclusions from `.gitignore` files when enabled with the `\"search.useIgnoreFiles\"` setting.",
    "url": "https://code.visualstudio.com/updates/v1_18#_quick-open-applies-.gitignore-exclusions",
    "id": 427
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Editor  \n### Ctrl+D / Cmd+D improvements  \nDue to [popular demand](https://github.com/microsoft/vscode/issues/8869), the **Add Selection to Next Find Match** (`kb(editor.action.addSelectionToNextFindMatch)`) action has been modified to behave differently when you start adding multiple cursors with no selected text. In this case, the action will temporarily ignore the Find widget search options and will always search for whole words and case sensitive matches.",
    "url": "https://code.visualstudio.com/updates/v1_18#_ctrl+d-/-cmd+d-improvements",
    "id": 428
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Navigate to next / previous symbolic highlight  \nThanks to [PR #35740](https://github.com/microsoft/vscode/pull/35740) from [Krzysztof Cie\u015blak](https://github.com/Krzysztof-Cieslak), it is now possible to navigate between highlighted symbols using `kbstyle(F7)` or `kbstyle(Shift+F7)` in languages where there is a semantic highlight provider. When you have a symbol selected, you can now quickly move to other instances of that symbol in your file.",
    "url": "https://code.visualstudio.com/updates/v1_18#_navigate-to-next-/-previous-symbolic-highlight",
    "id": 429
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Integrated Terminal  \n### Faint text support  \nThe terminal now supports the escape sequence for faint text:  \n![Terminal faint text support](images/1_18/terminal-faint-text.png)",
    "url": "https://code.visualstudio.com/updates/v1_18#_faint-text-support",
    "id": 430
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Unset environment keys  \nYou can already set custom environment variables for Integrated Terminal sessions but now you can also clear existing variables by assigning them to null in the `terminal.integrated.env.<platform>` settings:  \n```json\n\"terminal.integrated.env.linux\": {\n\"HOME\": null\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_18#_unset-environment-keys",
    "id": 431
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Improved Windows support  \nWindows support in the Integrated Terminal has been improved:  \n* Deeply nested processes are now properly cleaned up after exiting the terminal session. This happened most frequently with servers launched from Node.js.\n* On Windows, the terminal received lines already wrapped so we don't know which lines are wrapped and which are separated by new lines. We now guess where lines are wrapped by checking the last character of the previous line and flag them as such. This fixes a [problem with tasks](https://github.com/microsoft/vscode/issues/32042) where problem matchers would break on Windows and is also one of the prerequisites to get [multiline links](https://github.com/xtermjs/xterm.js/issues/649) working on Windows.",
    "url": "https://code.visualstudio.com/updates/v1_18#_improved-windows-support",
    "id": 432
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Languages  \n### TypeScript 2.6.1  \nVS Code 1.18 ships with TypeScript 2.6.1. This update provides VS Code with several exciting tooling improvements and also fixes a few bugs. You can read more about TypeScript 2.6 [here](https://devblogs.microsoft.com/typescript/announcing-typescript-2-6/).",
    "url": "https://code.visualstudio.com/updates/v1_18#_typescript-2.6.1",
    "id": 433
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Auto Import for JavaScript and TypeScript  \nSpeed up your coding with auto imports for JavaScript and TypeScript. The suggestion list now includes all exported symbols in the current project. Just start typing:  \n![Global symbols are now shown in the suggestion list](images/1_18/ts-auto-import-pre.png)  \nIf you choose one of the suggestion from another file or module, VS Code will automatically add an import for it. In this example, VS Code adds an import for `Hercules` to the top of the file:  \n![After selecting a symbol form a different file, an import is added for it automatically](images/1_18/ts-auto-import-post.png)  \nAuto imports requires TypeScript 2.6+. You can disable auto imports by setting `\"typescript.autoImportSuggestions.enabled\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_18#_auto-import-for-javascript-and-typescript",
    "id": 434
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Localizable error messages and Quick Fix descriptions for JavaScript and TypeScript  \nJavaScript and TypeScript error messages and Quick Fix descriptions are now displayed in your current [display language](https://code.visualstudio.com/docs/getstarted/locales):  \n![TypeScript errors using the display language](images/1_18/ts-localizable-errors.png)  \nThe `\"typescript.locale\"` setting lets you configure which language is used separately from your editor's display language. To revert to VS Code's 1.17 English only error messages, set `\"typescript.locale\": \"en\"`.",
    "url": "https://code.visualstudio.com/updates/v1_18#_localizable-error-messages-and-quick-fix-descriptions-for-javascript-and-typescript",
    "id": 435
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Extract local refactoring for JavaScript and TypeScript  \nVS Code 1.18 adds several new JavaScript and TypeScript refactorings in addition to the extract method refactoring added in VS Code 1.16. The extract constant refactoring creates a new local variable for the currently selected expression:  \n![](images/1_18/ts-extract-local.gif)  \nWhen working with classes, you can also extract a value to a new property.",
    "url": "https://code.visualstudio.com/updates/v1_18#_extract-local-refactoring-for-javascript-and-typescript",
    "id": 436
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Install @types Quick Fix for TypeScript  \nTypeScript now offers a Quick Fix to `npm install` missing `@types` definitions for a given module:  \n![](images/1_18/ts-npm-install-quick-fix.png)  \nThis Quick Fix will install the `@types` definition locally and add it to the `devDependencies` in your `package.json`.",
    "url": "https://code.visualstudio.com/updates/v1_18#_install-@types-quick-fix-for-typescript",
    "id": 437
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Additional `typescript.tsc.autoDetect` settings  \nVS Code automatically generates both build and build+watch tasks for all `tsconfig.json` files in your workspace. In VS Code 1.18, the `typescript.tsc.autoDetect` setting now lets you control which kinds of tasks are generated:  \n```json\n\"typescript.tsc.autoDetect\": \"build\" // only generate build tasks\n\"typescript.tsc.autoDetect\": \"watch\" // only generate build+watch tasks\n\"typescript.tsc.autoDetect\": \"on\"    // Generate both (default)\n\"typescript.tsc.autoDetect\": \"off\"   // Don't generate tsconfig build tasks\n```",
    "url": "https://code.visualstudio.com/updates/v1_18#_additional-typescript.tsc.autodetect-settings",
    "id": 438
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Support for selectively enabling quick suggestions inside of strings and comments  \nQuick suggestions are disabled inside of strings and commentsby default. In some cases, such as in JavaScript template strings, a string or comment may contain blocks of code where quick suggestions should be enabled. Grammars can now hint that VS Code should re-enable quick suggestions by adding a `meta.embedded` scope on tokens inside of a string or comment:  \n![Quick suggestions in strings](images/1_18/string-quick-suggestions.gif)",
    "url": "https://code.visualstudio.com/updates/v1_18#_support-for-selectively-enabling-quick-suggestions-inside-of-strings-and-comments",
    "id": 439
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### JSON  \nJSON now supports JSON Schema Draft 06. The most notable additions are the `const`, `contains` and `propertyNames` properties. Read [here](https://json-schema.org/draft-06/json-schema-migration-faq.html) for a more detailed overview of changes from draft 04.",
    "url": "https://code.visualstudio.com/updates/v1_18#_json",
    "id": 440
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Source Control  \n### Inline change review  \nYou can now review source code changes right within the standard editor. This feature depends on whether it is supported by the source code provider but it is already enabled for Git repositories out of the box.  \n![Move confirmation](images/1_18/diff.gif)  \nWith this new UI, you can not only review your code changes but also navigate, stage or revert them inline.",
    "url": "https://code.visualstudio.com/updates/v1_18#_inline-change-review",
    "id": 441
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Git: Conflict marker detection  \nWhen staging a file which is flagged as having conflicts due to a merge or rebase, VS Code will check for the standard merge markers (for example `<<<<<<<`) and alert you if you forget to delete them when you are about to stage the file.  \n![Move confirmation](images/1_18/merge.png)",
    "url": "https://code.visualstudio.com/updates/v1_18#_git:-conflict-marker-detection",
    "id": 442
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Git: Improved integration  \nRecently, there was a [patch to Git](https://public-inbox.org/git/20170921043214.pyhdsrpy4omy54rm@sigill.intra.peff.net/) which enables tools like VS Code to use `git status` without interfering with other concurrent Git commands. VS Code is now prepared for that upcoming Git change by using the right environment context (`GIT_OPTIONAL_LOCKS`) when spawning Git.",
    "url": "https://code.visualstudio.com/updates/v1_18#_git:-improved-integration",
    "id": 443
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Extensions  \n### Recommended extensions badge  \nRecommended extensions now display a badge to easily distinguish them from other extensions in a list. Hover on the badge or click the list item to learn why the extension was recommended to you.  \n![Recommendation badges and reasons](images/1_18/recommendations-badge.gif)",
    "url": "https://code.visualstudio.com/updates/v1_18#_recommended-extensions-badge",
    "id": 444
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Single view combining workspace and general recommendations  \nThe two views for [workspace recommended extensions](https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions) and general recommended extensions are now combined into a single view with the two kinds of recommendations showing up in a split view. Use the command **Extensions: Show Recommended Extensions** to see this view.  \nThere is also a handy **Install All Workspace Recommendations** command on the **WORKSPACE RECOMMENDATIONS** title bar to install all the extensions that are recommended by other users of your workspace.  \nYou can edit workspace recommendations via the **Configure Recommended Extensions (Workspace Folder)** command in the same title bar.  \n![Install or Configure Workspace Recommendations](images/1_18/recommendationinstall-configure.gif)",
    "url": "https://code.visualstudio.com/updates/v1_18#_single-view-combining-workspace-and-general-recommendations",
    "id": 445
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Debugging  \n### Debug in Status Bar  \nVS Code now shows the active debug launch configuration in the Status Bar. By clicking on the debug status, a user can change the active launch configuration and then start debugging without the need to open the Debug view.  \n![Debug status](images/1_18/debug-status.png)",
    "url": "https://code.visualstudio.com/updates/v1_18#_debug-in-status-bar",
    "id": 446
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Focus actions  \nWe have introduced new actions to easily move keyboard focus to the various Debug sections. This should make it easier for keyboard centric users to navigate while debugging.  \nThese actions are:  \n* Focus Variables: `workbench.debug.action.focusVariablesView`\n* Focus Watch: `workbench.debug.action.focusWatchView`\n* Focus CallStack: `workbench.debug.action.focusCallStackView`\n* Focus Breakpoints: `workbench.debug.action.focusBreakpointsView`",
    "url": "https://code.visualstudio.com/updates/v1_18#_focus-actions",
    "id": 447
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Start without debugging shortcut  \nThe default keyboard shortcut on macOS for **Debug: Start Without Debugging** changed to `kbstyle(Ctrl+F5)` to avoid a collision with an existing macOS keyboard shortcut.",
    "url": "https://code.visualstudio.com/updates/v1_18#_start-without-debugging-shortcut",
    "id": 448
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Coloring of Debug Console evaluation results based on type  \nDebug console expressions are now colored based on the `type` property returned from the debug extension. This is currently supported by the Node.js debug extension.  \n![REPL Color](images/1_18/repl-color.png)",
    "url": "https://code.visualstudio.com/updates/v1_18#_coloring-of-debug-console-evaluation-results-based-on-type",
    "id": 449
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### More WSL support for Node.js  \nA [first glimpse](https://code.visualstudio.com/updates/v1_17#_first-steps-towards-wsl-support) of support for Node.js debugging in the _Windows Subsystem for Linux (WSL)_ was already available in the previous milestone (but only for older versions of Node.js that still support the \"legacy\" protocol). In this milestone, another [pull request](https://github.com/microsoft/vscode-node-debug2/pull/142) by [Bartosz Sosnowski (@bzoz)](https://github.com/bzoz) was integrated that adds support for the \"inspector\" protocol that is used by more recent versions of Node.js. With this update, it is now possible to run Node.js v8 in WSL.",
    "url": "https://code.visualstudio.com/updates/v1_18#_more-wsl-support-for-node.js",
    "id": 450
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Tasks  \n### Schema improvements  \nThe schema for the `tasks.json` file version `2.0.0` was updated. The `taskName` property is deprecated in favor of the `label` property to make it more consistent with contributed tasks. In addition, there is now a snippet for new tasks. By default, it creates a task of type `shell` to execute commands in the Integrated Terminal.",
    "url": "https://code.visualstudio.com/updates/v1_18#_schema-improvements",
    "id": 451
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### `workspaceFolder` replaces `workspaceRoot`  \nLast release, we deprecated the `${workspaceRoot}` variable in favor of `${workspaceFolder}` to make this consistent with multi-root workspace support. For the same reason, we are deprecating `${workspaceRootFolderName}`. Please use `${workspaceFolderBasename}` instead. This deprecation applies to debug launch configurations as well.",
    "url": "https://code.visualstudio.com/updates/v1_18#_workspacefolder-replaces-workspaceroot",
    "id": 452
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Performance improvements  \n### Faster editor decorations  \nDecorations are a fundamental editor concept on which numerous features are built; for example: find matches highlights, diff annotations, word highlights, selection highlights, breakpoints, folding markers, and inline colors. Moreover, numerous extensions make use of decorations to customize the rendering of VS Code's editor. Below is a screenshot with various editor decorations highlighted:  \n![Editor Decorations](images/1_18/editor-decorations.png)  \n[PR #36410](https://github.com/microsoft/vscode/pull/36410) reimplements editor decorations as a delta-encoded [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree) (an augmented Red-Black tree). Besides reducing the time spent in all operations related to decorations (creating, updating, deleting or querying), the change also brings in some impressive memory usage savings. As an immediate result of these optimizations, we have increased the in-file on type find limit from 1,000 matches to 20,000 matches.",
    "url": "https://code.visualstudio.com/updates/v1_18#_faster-editor-decorations",
    "id": 453
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Windows start-up  \nWe are always on the lookout for ways to improve VS Code start-up time. During the last month, we made a variety of improvements that significantly decreased the time of the initial (cold) launch of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_18#_windows-start-up",
    "id": 454
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n## Extension Authoring  \n### Configuration: Listen to specific changes  \nNow Configuration change event provides a `ConfigurationChangeEvent` object that has a method `affectsConfiguration` to check about configuration changes. You can also check if a configuration has changed for a resource.  \n```typescript\n/**\n* An event describing the change in Configuration\n*/\nexport interface ConfigurationChangeEvent {\n\n/**\n* Returns `true` if the given section for the given resource (if provided) is affected.\n*\n* @param section Configuration name, supports _dotted_ names.\n* @param resource A resource Uri.\n* @return `true` if the given section for the given resource (if provided) is affected.\n*/\naffectsConfiguration(section: string, resource?: Uri): boolean;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_18#_configuration:-listen-to-specific-changes",
    "id": 455
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Async Input Box validation  \nThe `showInputBox` function now supports asynchronous validation. Call `showInputBox` like so:  \n```ts\nvscode.window.showInputBox({\nasync validateInput(value) {\nreturn await someLongRunningOperation(value);\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_18#_async-input-box-validation",
    "id": 456
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Folder icons in File Icon Themes  \nFile Icon themes can now disable the default folder icon (the rotating triangle) in tree views and use the folder icons to indicate the expansion state:  \n![Explorer without twisties](images/1_18/twistieless-fileicons.png)  \nTo do so, File Icon themes must specify `\"hidesExplorerArrows\":true` in the File Icon theme definition file.\nThanks to [Ari](https://github.com/tam5) for the [PR](https://github.com/microsoft/vscode/pull/35856).",
    "url": "https://code.visualstudio.com/updates/v1_18#_folder-icons-in-file-icon-themes",
    "id": 457
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### New Context: resourceExtname  \nThere is a new context key to control keybindings and menu items. Its name is `resourceExtname` and its value will be the extension of the file in question.",
    "url": "https://code.visualstudio.com/updates/v1_18#_new-context:-resourceextname",
    "id": 458
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### New workspace.name property  \nA new `workspace.name` property was added that provides (readonly) access to the name of the workspace. The name will be `undefined` if no workspace is opened.",
    "url": "https://code.visualstudio.com/updates/v1_18#_new-workspace.name-property",
    "id": 459
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### SCM: New menu: `scm/change/title`  \nAlong with the new SCM inline change review, a new contributable menu context is now available: `scm/change/title`. It allows you to contribute commands to the header of an inline change review view.  \n![Move confirmation](images/1_18/difftitle.png)",
    "url": "https://code.visualstudio.com/updates/v1_18#_scm:-new-menu:-scm/change/title",
    "id": 460
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Terminal: Setting environment  \nYou can now set the environment of terminal instances launched via the extension API:  \n```ts\nwindow.createTerminal({\nname: 'My session',\nshell: 'zsh',\nenv: {\nJAVA_HOME: '<path>'\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_18#_terminal:-setting-environment",
    "id": 461
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Debug API updates  \n**Command `debug.logToDebugConsole` is deprecated**  \nWith the introduction of a proper `vscode.debug.console.append(...)` API in the October release, it is no longer necessary to use the `debug.logToDebugConsole` command to append text to the debug console. Due to that we are deprecating the `debug.logToDebugConsole` command and plan to drop support for it in the future. If it is difficult for you to move off this feature, please speak up by commenting [here](https://github.com/microsoft/vscode/issues/34700).  \n> **Note:** Currently this API is proposed, so in order to use it you must opt into it by adding a `\"enableProposedApi\": true` to `package.json` and you'll have to copy the [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts) into your extension project. Also be aware that you cannot publish an extension to the Marketplace that uses the `enableProposedApi` attribute.  \n**Command `vscode.startDebug` has been removed**  \nAs [announced](https://code.visualstudio.com/updates/v1_17#_debug-api-updates) in the previous release, we have finally removed support for the `vscode.startDebug` command.  \n**Command `vscode.workbench.customDebugRequest` has been removed**  \nAs [announced](https://code.visualstudio.com/updates/v1_17#_debug-api-updates) in the previous release, we have finally removed support for the `vscode.workbench.customDebugRequest` command.",
    "url": "https://code.visualstudio.com/updates/v1_18#_debug-api-updates",
    "id": 462
  },
  {
    "content": "See what is new in the Visual Studio Code October 2017 Release (1.18)  \n### Debug contributions in package.json  \n**Activation event `onDebug:type` has been removed**  \nAs [announced](https://code.visualstudio.com/updates/v1_17#_debug-contributions-in-packagejson) in the previous release, we have finally removed support for the `onDebug:type` activation event.  \n**Using `debuggers.startSessionCommand` in package.json has been removed**  \nAs [announced](https://code.visualstudio.com/updates/v1_17#_debug-contributions-in-packagejson) in the previous release, we have finally removed support for the `startSessionCommand` command.  \n**Using command with `debuggers.initialConfigurations` in package.json is deprecated**  \nAs [announced](https://code.visualstudio.com/updates/v1_17#_debug-contributions-in-packagejson) in the previous release, we have finally removed support for the `initialConfigurations` command.  \n**Updated documentation and mock-debug example**  \nWith this release, most of the command based debug API has been replaced by the [proper API](https://github.com/microsoft/vscode/blob/86e057cd25756811781237b5d84b8228f99e59ab/src/vs/vscode.d.ts#L5989-L6145) available through `vscode.d.ts`. Consequently, we have updated both the [documentation for debug extensions](https://code.visualstudio.com/docs/extensions/example-debuggers) and the underlying [mock-debug example](https://github.com/microsoft/vscode-mock-debug) for the new APIs.",
    "url": "https://code.visualstudio.com/updates/v1_18#_debug-contributions-in-package.json",
    "id": 463
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Logging  \nVS Code now creates activity log files which can help diagnose unexpected issues like crashes, delays, etc.. When running, VS Code creates four primary processes, `main`, `shared`, `renderer` and `extension-host`, and each process logs into its own log file. You can open each log file using the command **Developer: Show Logs...** which will open a process picker to select the specific process log file.  \n![Log picker](images/1_19/log-picker.png)  \nVS Code supports following log levels:  \n* `critical`\n* `error`\n* `warn`\n* `info`\n* `debug`\n* `trace`\n* `off`  \nBy default, VS Code is configured with `info` level and logs `info` and the levels above (`warn`, `error`, `critical`). You can change the log level using the command-line argument `--log`.  \n```bash\n--log <level>\nLog level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.\n```  \nYou can also turn off logging using the option `--log off`.",
    "url": "https://code.visualstudio.com/updates/v1_19#_logging",
    "id": 465
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### --status command-line option  \nA new command-line argument was added which prints some useful VS Code diagnostics information to the terminal. You can share this information with us in GitHub issues and we will have a better understanding of the state of VS Code at the time of the issue.  \nRun `code --status` from the command line while another instance of VS Code is running and, after collecting status, you will see a display like this:  \n![Status output](images/1_19/status.png)  \nThe output includes information about the environment, all running processes, and the counts of some common file types in the workspace.",
    "url": "https://code.visualstudio.com/updates/v1_19#_--status-command-line-option",
    "id": 466
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### VS Code process view  \nAs a by-product of the new VS Code command-line option `--status`, we created an experimental extension [vscode-processes](https://github.com/weinand/vscode-processes) that shows all child processes of VS Code in a custom view and dynamically updates as processes come and go. To better understand the role of those processes, the extension analyses the process arguments and labels the processes accordingly. The extension's CPU load and memory consumption is also shown in parentheses.  \n![Process View](images/1_19/vscode-processes.gif)  \nIn addition, the extension tries to identify processes that can be debugged by VS Code itself and offers a debug action for those in the context menu. All processes can be terminated or killed from the menu as well.  \nThis extension is still a prototype and so it is not yet available on the Marketplace but you can easily build the extension VSIX by running the following  commands:  \n```bash\ngit clone https://github.com/weinand/vscode-processes\ncd vscode-processes\nnpm install\nnpm run package\n```  \nOnce the extension VSIX is created, use VS Code's **Install from VSIX...** command to install the extension.",
    "url": "https://code.visualstudio.com/updates/v1_19#_vs-code-process-view",
    "id": 467
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Running extensions  \nTo make it easier for users to detect faulty or poorly performing extensions, we added a **Running Extensions** view. This view shows all the extensions which are currently running along with useful performance information. With this view, users can also profile VS Code in order to detect which extensions take the most time and are a likely cause of performance issues. Run the **Developers: Show Running Extensions** command from the **Command Palette** to see this view.  \n![Running extensions](images/1_19/running-extensions.png)  \n**Note**: The **Running Extensions** view is still under development so expect to see updates in future releases. We'd also appreciate your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_19#_running-extensions",
    "id": 468
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### How to file performance and native crash issues  \nWe have created guides for:  \n* [Performance Issues](https://github.com/microsoft/vscode/wiki/Performance-Issues) - tracking down and filing performance issues  \n* [Native Crash Issues](https://github.com/microsoft/vscode/wiki/Native-Crash-Issues) - data collection techniques for native crashes",
    "url": "https://code.visualstudio.com/updates/v1_19#_how-to-file-performance-and-native-crash-issues",
    "id": 469
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Workbench  \n### New editor tabs layout option  \nA new setting, `workbench.editor.tabSizing`, was added to control how tabs should size depending on the space available in the outer container. The default (`fit`) works as before and will always ensure that the tab shows the entire name of the file. If space gets too little, a scroll bar will appear.  \nYou can change this behavior by setting this new option to `shrink`. When there is little space available, the tabbed headers will shrink up to a minimum and thus make it less likely that a scroll bar appears.  \n![Shrinking Tabs](images/1_19/shrink.gif)",
    "url": "https://code.visualstudio.com/updates/v1_19#_new-editor-tabs-layout-option",
    "id": 470
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Pipe output directly into VS Code  \nWe added support to pipe the output of a terminal command directly into VS Code and have it open in an editor:  \n![Pipe Output](images/1_19/stdin.gif)  \nThe encoding of the terminal will be determined by running the command `locale charmap` on Linux/macOS and `chcp` on Windows. You can also set a `VSCODE_CLI_ENCODING` environment variable to specify the encoding manually.  \n**Note:** We will now open a temporary file for reading from stdin as soon as we detect that stdin is not connected to a terminal. If you are in a setup where you start VS Code via the shell script (`code.sh` or `code.cmd`) from an application that is not a terminal, please change that to start our executable directly instead.",
    "url": "https://code.visualstudio.com/updates/v1_19#_pipe-output-directly-into-vs-code",
    "id": 471
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Compare open file to Clipboard  \nThanks to [PR #37841](https://github.com/microsoft/vscode/pull/37841) from [Max Furman (@maxfurman)](https://github.com/maxfurman), you can now compare the contents of the currently opened file with the contents of the Clipboard. The command is **Compare Active File with Clipboard** (command id `workbench.files.action.compareWithClipboard`).",
    "url": "https://code.visualstudio.com/updates/v1_19#_compare-open-file-to-clipboard",
    "id": 472
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### workbench.panel.location is deprecated  \nWe have removed the `workbench.panel.location` from settings and are now saving this in storage. All the previous functionality for moving the panel to the side is retained. More details about this change can be found [here](https://github.com/microsoft/vscode/issues/37351).",
    "url": "https://code.visualstudio.com/updates/v1_19#_workbench.panel.location-is-deprecated",
    "id": 473
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Editor  \n### Smarter IntelliSense  \nVS Code IntelliSense re-sorts suggestions as you type. This ensures that the most relevant suggestions are near the top. However, there are cases in which multiple suggestions match equally well, for example `con` matches on `confirm`, `console`, `const`, and `constructor` equally well and lexicographic sort decides which suggestion is pre-selected.  \nIn this release, we've updated IntelliSense to remember what you have selected in such cases. Select `const` for the `con` prefix once and it will be the top match in the future.  \n![IntelliSense Memory](images/1_19/suggest_mem.gif)  \nSometimes when you are typing, you may accidentally mix up neighboring characters, for instance instead of `console`, you might type `cnosole`, or `resutl` instead of `result`. We have made IntelliSense more relaxed and it will now try a few permutation when scoring suggestions.  \n![IntelliSense Relaxed](images/1_19/suggest_relax.png)  \nIn the sample above, IntelliSense favors the `console` suggestion by changing `cnos` to `cons` as that match is stronger than the match of `cnos` on `RTCIceTransportStateChangedEvent`.",
    "url": "https://code.visualstudio.com/updates/v1_19#_smarter-intellisense",
    "id": 474
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Folding improvements  \nWe have changed `Shift + Click` on the folding icons to not only fold/unfold the corresponding section but also all its children.  \nNew folding regions have been added for the following languages:  \n* CSS/Less/SCSS: `/*#region*/` and `/*#endregion*/`\n* Coffeescript: `#region` and `#endregion`\n* PHP: `#region` and `#endregion`\n* Bat: `::#region` and `::#endregion`  \nNote: If you don't remember a folding marker, type `#` at the beginning of a line and you will get IntelliSense suggestions. Each language proposes completion proposals or snippets.  \nNew folding commands have been added:  \n* **Fold All Regions** (`kb(editor.foldAllMarkerRegions)`) folds all regions from markers (for example `#region`).\n* **Unfold All Regions** (`kb(editor.unfoldAllMarkerRegions)`) unfolds all regions from markers.\n* **Fold All Block Comments** (`kb(editor.foldAllBlockComments)`) folds all regions that start with a block comment token (for example `/*`).",
    "url": "https://code.visualstudio.com/updates/v1_19#_folding-improvements",
    "id": 475
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Interval line numbers  \nThanks to [PR #37120](https://github.com/microsoft/vscode/pull/37120) from [David Weber](https://github.com/DdWr), the setting `editor.lineNumbers` can now be configured with the value `interval`, which will cause VS Code to render the line numbers every 10th line.",
    "url": "https://code.visualstudio.com/updates/v1_19#_interval-line-numbers",
    "id": 476
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Global find Clipboard on macOS  \nThanks to [PR #35956](https://github.com/microsoft/vscode/pull/35956) from [Melvin](https://github.com/melvin0008), the editor now integrates with the macOS global find Clipboard. If you search for something in VS Code or another native macOS applications and then switch to another, the find widget will contain the same text. This feature is turned on by default on macOS and you can disable it by setting `editor.find.globalFindClipboard` to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_19#_global-find-clipboard-on-macos",
    "id": 477
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Languages  \n### HTML  \nHTML now offers code completion for character entities, such as `&gt;`, `&amp`. To see the proposals, type `&` in a element content or attribute value and invoke IntelliSense.  \n![Character Entities](images/1_19/character-entities.png)",
    "url": "https://code.visualstudio.com/updates/v1_19#_html",
    "id": 478
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### JSON with comments  \nA new mode **JSON with Comments** (jsonc) has been added to distinguish between JSON-like files that allow comments and JSON files that follow the standard JSON specification. All VS Code configuration files use the new mode and allow comments, while `.json` files default to the standard JSON mode that will report comments as errors.",
    "url": "https://code.visualstudio.com/updates/v1_19#_json-with-comments",
    "id": 479
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### TypeScript 2.6.2  \nVS Code now includes TypeScript 2.6.2. This minor update fixes a [few important bug fixes and tooling improvements](https://github.com/microsoft/TypeScript/issues?q=is%3Aissue+milestone%3A%22TypeScript+2.6.2%22+is%3Aclosed).",
    "url": "https://code.visualstudio.com/updates/v1_19#_typescript-2.6.2",
    "id": 480
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### JSX fragment syntax  \nTypeScript 2.6.2 also brings support for React 16.2's [new JSX fragment syntax](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html#jsx-fragment-syntax).  \n![JSX fragment](images/1_19/jsx-fragment.png)",
    "url": "https://code.visualstudio.com/updates/v1_19#_jsx-fragment-syntax",
    "id": 481
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Typescript reportStyleChecksAsWarnings  \nVS Code now displays TypeScript code style issues as warnings instead of errors. This applies to:  \n* Variable is declared but never used\n* Property is declared but its value is never read\n* Unreachable code detected\n* Unused label\n* Fall through case in switch\n* Not all code paths return a value  \nTreating these as warnings is consistent with other tools, such as TSLint. These will still be displayed as errors when you run `tsc` from the command line.  \nYou can disable this behavior by setting: `\"typescript.reportStyleChecksAsWarnings\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_19#_typescript-reportstylechecksaswarnings",
    "id": 482
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Language Server Protocol  \nThe language server protocol was extended with the following new feature: a completion context given access to the trigger character, more completion item and symbol kinds as well as markdown support for completion items and signature help. The protocol additions are available in the `4.0.0-next.x` version of the client and server npm modules.",
    "url": "https://code.visualstudio.com/updates/v1_19#_language-server-protocol",
    "id": 483
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Git  \n### Image diffing  \nYou can now view changes in your images, side by side, directly from your Git repository:  \n![side by side image diff](images/1_19/image-diff.png)",
    "url": "https://code.visualstudio.com/updates/v1_19#_image-diffing",
    "id": 484
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Debugging  \n### Edit Breakpoint command  \nWe have added a new **Edit Breakpoint...** command to the **BREAKPOINTS** context menu. This will make it easier for users to edit the condition or hit count of breakpoints.  \n![Edit breakpoint command](images/1_19/edit-breakpoint.png)",
    "url": "https://code.visualstudio.com/updates/v1_19#_edit-breakpoint-command",
    "id": 485
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Undefining environment variables  \nMany debug extensions provide support for adding (or overriding) environment variables that are passed to the debug target. With this release, it is now possible to un-define (remove) a variable from the environment as well.  \nIf an environment variable is set to `null`, this variable will be removed from the environment before the debug target is launched. This makes it much easier to test and debug code that relies on a variable **not** being defined.  \nPlease note that in this release, only the Node.js debugger supports this.",
    "url": "https://code.visualstudio.com/updates/v1_19#_undefining-environment-variables",
    "id": 486
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### New rendering style for synthetic elements in VARIABLES  \nIn the debugger's **VARIABLES** view, we now show \"synthetic\" elements in a subdued style to distinguish them from the real \"data\" received from the debugger or runtime. In this release, only the \"range\" nodes of big arrays are considered \"synthetic\" and are rendered in the subdued style. We expect that more debug extensions will opt into this feature in the future.  \n![Subdued synthetic variables](images/1_19/synthetic-variables.png)",
    "url": "https://code.visualstudio.com/updates/v1_19#_new-rendering-style-for-synthetic-elements-in-variables",
    "id": 487
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### New debug settings  \n* A new setting `debug.showInStatusBar` controls the visibility of the debug Status Bar item. Possible values are: `never`, `always` and the default `onFirstSessionStart`.\n* A new setting `debug.openDebug` controls the visibility of the Debug view. Possible values are: `neverOpen`, `openOnSessionStart` and the default `openOnFirstSessionStart`.",
    "url": "https://code.visualstudio.com/updates/v1_19#_new-debug-settings",
    "id": 488
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Extensions  \n### Enable extensions per workspace  \nVS Code has had support for disabling extensions globally or per workspace. However, there was also demand for enabling extensions per workspace. With this release, you can configure extensions to run only for specific workspaces.  \n![Enable extensions per workspace](images/1_19/enable-extensions.png)",
    "url": "https://code.visualstudio.com/updates/v1_19#_enable-extensions-per-workspace",
    "id": 489
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## New Documentation  \n### Java topics  \nThere is new set of [Java](https://code.visualstudio.com/docs/java/java-tutorial) topics showing how to use the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) for debugging, cloud deployment, and Azure Functions development.",
    "url": "https://code.visualstudio.com/updates/v1_19#_java-topics",
    "id": 490
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Python topics  \n[Python](https://code.visualstudio.com/docs/python/python-tutorial) also has its own section where you can find tutorials for the [Microsoft Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension. There are topics starting with 'Hello World', moving on to debugging, linting, and unit testing.",
    "url": "https://code.visualstudio.com/updates/v1_19#_python-topics",
    "id": 491
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Debugging Recipes  \nWe've added several new debugging [recipes](https://github.com/microsoft/vscode-recipes):  \n* [Next.js](https://github.com/microsoft/vscode-recipes/tree/main/Next-js)\n* [Meteor](https://github.com/microsoft/vscode-recipes/tree/main/meteor)\n* [AspNetCore.SpaTemplates](https://github.com/microsoft/vscode-recipes/tree/main/Angular-SpaTemplates)\n* [Node.js with nodemon](https://github.com/microsoft/vscode-recipes/tree/main/nodemon)  \nSee [Debugging Recipes](https://code.visualstudio.com/docs/nodejs/debugging-recipes) to learn more about these guides and find helpful blog posts.",
    "url": "https://code.visualstudio.com/updates/v1_19#_debugging-recipes",
    "id": 492
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Extension Authoring  \n### Pre-release versions  \nYou can now distribute extension VSIXs with [pre-release versions](https://semver.org/) like `x.y.z-alpha`, `x.y.z-beta` and VS Code will detect them and provide updates according to their version increments as defined [here](https://semver.org/). Refer to this [issue](https://github.com/microsoft/vscode/issues/39024) to learn more.",
    "url": "https://code.visualstudio.com/updates/v1_19#_pre-release-versions",
    "id": 493
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Extension generator - `yo code`  \nThe yeoman generators for TypeScript and JavaScript extensions now provide additional options to enable more checking of your extensions. For TypeScript extensions the generator provides options to setup [TSLint](https://palantir.github.io/tslint/) and to enable the `strict` TypeScript [compiler options](https://www.typescriptlang.org/docs/handbook/compiler-options.html).  \nFor JavaScript, there is a prompt to enable the [`checkJS`](https://github.com/microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files) option which enables type checking in JavaScript files.",
    "url": "https://code.visualstudio.com/updates/v1_19#_extension-generator---yo-code",
    "id": 494
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Debug API updates  \n**Preview: Breakpoints API**  \nIn this milestone, we've continued work on the Debug API related to breakpoints. It is now possible to access the set of all breakpoints of a workspace (`vscode.debug.breakpoints`) and register for notification about added, removed, or changed breakpoints (`vscode.debug.onDidChangeBreakpoints`).  \nPlease note that accessing breakpoints initially returns an empty array but triggers a subsequent `BreakpointsChangeEvent` event that updates `vscode.debug.breakpoints` to the correct set. So if your code relies on the correct set of breakpoints, don't forget to register for `BreakpointsChangeEvent`s.  \nThe different types of breakpoints are represented as different subclasses of `Breakpoint`. Currently supported are `SourceBreakpoint` and `FunctionBreakpoint`. Use an `instanceof` check to determine the concrete type.  \n> **Note:** Currently this API is proposed, so in order to use it, you must opt into it by adding a `\"enableProposedApi\": true` to `package.json` and you'll have to copy the [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts) into your extension project. Also be aware that you cannot publish an extension to the Marketplace that uses the `enableProposedApi` attribute.  \n**Output text on Debug Console**  \nThe proposed Debug Console API from last month has been slightly modified and moved from \"proposed\" to \"official\". An extension can append text to the Debug Console with `vscode.debug.activeDebugConsole.append(text)` or `vscode.debug.activeDebugConsole.appendLine(text)`. The deprecated `debug.logToDebugConsole` will be dropped as soon as it is no longer used in any extension on the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_19#_debug-api-updates",
    "id": 495
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Debug contributions in package.json  \n**More fine-grained debugger activation events**  \nIf a debug extension uses a `DebugConfigurationProvider`, it is important that the extension is activated early enough so that the `DebugConfigurationProvider` can be registered before first being used.  \nThe foolproof way to achieve this is by adding the `onDebug` activation event to the `activationEvents` section of the extension's `package.json`. This works fine as long as the extension does not spend a lot of time in its startup sequence. If it does,for instance starting a language server, early activation must be avoided because it could negatively affect other debug extensions.  \nTo simplify startup, we have introduced two more fine-grained activation events:  \n* `onDebugInitialConfigurations` is fired just before the `provideDebugConfigurations` method of the `DebugConfigurationProvider` is called.\n* `onDebugResolve:type` is fired just before the `resolveDebugConfiguration` method of the `DebugConfigurationProvider` for the specified type is called.  \n**Rule of thumb:** If activation of a debug extensions is lightweight, use `onDebug`. If it is heavyweight, use `onDebugInitialConfigurations` and/or `onDebugResolve` depending on whether the `DebugConfigurationProvider` implements the corresponding methods `provideDebugConfigurations` and/or `resolveDebugConfiguration`.",
    "url": "https://code.visualstudio.com/updates/v1_19#_debug-contributions-in-package.json",
    "id": 496
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n### Debug Adapter Protocol  \n**New enum value `virtual` for the `presentationHint.kind` attribute of type `Variable`**  \nThe new enum value `virtual` indicates that the variable is a synthetic object introduced by the debugger for rendering or user interaction purposes. The client is expected to render this element in a different way then regular variables.  \n**Support for removing variables from the environment**  \nThe `runInTerminal` request is used by a debug adapter to launch a debug target in an integrated or external terminal. One parameter to the request is the set of environment variables to pass to the debug target. In this release, `null` has been added to the environment variable's value type with the semantics \"remove the environment variable from the environment before launching the target\".",
    "url": "https://code.visualstudio.com/updates/v1_19#_debug-adapter-protocol",
    "id": 497
  },
  {
    "content": "See what is new in the Visual Studio Code November 2017 Release (1.19)  \n## Engineering  \n### Yarn  \nWe now use [Yarn](https://yarnpkg.com/en/) to manage our production and development dependencies. This has greatly reduced the setup time to prepare a VS Code repository, both for development and build. More details are in this [Pull Request](https://github.com/microsoft/vscode/pull/38481).",
    "url": "https://code.visualstudio.com/updates/v1_19#_yarn",
    "id": 498
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Workbench  \n### Multi select in the Explorer  \nYou can now select multiple files in the **File Explorer** and **OPEN EDITORS** view to run actions (Delete, Drag and Drop, Open to the Side) on multiple items. Uses the `Ctrl/Cmd` key with `click` to select individual files and `Shift` + `click` to select a range. If you select two items, you can now use the **Compare Selected** command to quickly diff two files.  \n![Multi Select](images/1_20/multi-select.gif)  \nClicking with the `Ctrl/Cmd` key pressed will no longer open an editor to the side because this key is now used to add more items to the multi-selection. A new setting, `workbench.list.multiSelectModifier`, allows you to change back to the old behavior by setting it to `\"workbench.list.multiSelectModifier\": \"alt\"`. With this setting, you use the `Alt` key to add items to the selection.",
    "url": "https://code.visualstudio.com/updates/v1_20#_multi-select-in-the-explorer",
    "id": 500
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Error indicators in the Explorer  \nWe now show files with errors or warnings in the **File Explorer** and the **OPEN EDITORS** view.  \n![Error Decorations](images/1_20/error-decoration.png)  \nThe number of errors/warnings is shown in the decoration. The setting `problems.decorations.enabled` allows you to enable/disable the error/warning decorations.",
    "url": "https://code.visualstudio.com/updates/v1_20#_error-indicators-in-the-explorer",
    "id": 501
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Settings search  \nVS Code provides many settings to customize the editor, and it can be hard to find the setting you're looking for when you don't know which terms to use. We have improved the search functionality in the Settings editor to go beyond simple filtering with literal word matches. The Settings editor will now search with an awareness of alternate wordings, typos, stemmings (\"saving\" -> \"save\") and should provide a more natural language search experience.  \n![Settings search](images/1_20/settings-search.png)  \nIf you prefer the old style of search, you can disable this feature with `\"workbench.settings.enableNaturalLanguageSearch\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_20#_settings-search",
    "id": 502
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Save files that need admin privileges  \nIt is now possible to save files that require administrator privileges. One example is making changes to `/etc/hosts`. If the file exists on disk and requires elevated permissions, a new action **Retry as Admin...** will show up on an error message. Saving as admin is supported on all platforms. Depending on the platform, the prompt to authenticate as administrator will look different.",
    "url": "https://code.visualstudio.com/updates/v1_20#_save-files-that-need-admin-privileges",
    "id": 503
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Save large files >256 MB  \nIt is now possible to save files >256 MB where previously an error was reported. This was achieved by changing the implementation of how VS Code stores the contents of the editor to disk. Instead of loading the entire file contents into memory, we leverage a snapshot of the content and stream it into the file in chunks of 64KB.",
    "url": "https://code.visualstudio.com/updates/v1_20#_save-large-files->256-mb",
    "id": 504
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### \"Smart Case\" search  \nYou can now set `\"search.smartCase\": true` to enable \"smart case\" mode for global search. When enabled, VS Code will automatically do a case-sensitive search when you search for a query that contains an uppercase character. If your search query is all lowercase, then the search will be case-insensitive.  \nFor example, searching \"code\" will match \"code\" or \"Code\". Searching \"Code\" will only match \"Code\".",
    "url": "https://code.visualstudio.com/updates/v1_20#_smart-case-search",
    "id": 505
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Double-click to open in list/tree  \nA new setting, `workbench.list.openMode`, was added that controls if items in trees and lists should open on single or double mouse-click. This setting applies both to opening items as well as expanding/collapsing items if they have children.  \n**Note:** The setting is supported for most trees/lists in VS Code, but in some case we left the default behavior when we thought single-click still makes the most sense. We are happy to hear your feedback!",
    "url": "https://code.visualstudio.com/updates/v1_20#_double-click-to-open-in-list/tree",
    "id": 506
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Image preview zooming  \nYou can now zoom image previews:  \n![Zooming a preview](images/1_20/image-zoom.gif)  \nZoom in and out by clicking, using the scroll wheel (with `Ctrl` on Windows/Linux or `Alt` on macOS), or pinching on a track pad. The current zoom level is shown in the Status Bar. Click on the zoom Status Bar item to quickly switch zoom levels or reset the view.",
    "url": "https://code.visualstudio.com/updates/v1_20#_image-preview-zooming",
    "id": 507
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Theme specific color customizations  \nYou can now fine tune a specific color theme in your user settings:  \n```json\n\"editor.tokenColorCustomizations\": {\n\"[Monokai]\": {\n\"comments\": \"#229977\"\n}\n},\n\"workbench.colorCustomizations\": {\n\"[Monokai]\": {\n\"sideBar.background\": \"#347890\"\n}\n}\n```  \nThis example changes just the **Monokai** theme. See the [Customize a Color Theme](https://code.visualstudio.com/docs/getstarted/themes#_customize-a-color-theme) documentation for a more information on themes.",
    "url": "https://code.visualstudio.com/updates/v1_20#_theme-specific-color-customizations",
    "id": 508
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### More themable colors for editor tabs  \nWith this release, new themable colors are added for editor tabs:  \n* `tab.hoverBackground`: Tab background color when hovering\n* `tab.unfocusedHoverBackground`: Tab background color in an unfocused group when hovering\n* `tab.hoverBorder`: Border to highlight tabs when hovering\n* `tab.unfocusedHoverBorder`: Border to highlight tabs in an unfocused group when hovering  \nYou can configure these colors also from the `workbench.colorCustomizations` setting.",
    "url": "https://code.visualstudio.com/updates/v1_20#_more-themable-colors-for-editor-tabs",
    "id": 509
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Custom dropdown (Windows, Linux)  \nOn Windows and Linux, dropdowns now use a custom widget instead of the HTML control. The dropdown leverages the same colors as the tree/list widget in other parts:  \n![Custom Dropdown](images/1_20/dropdown.png)  \nThis fixes a couple of issues where the HTML dropdown was not showing up properly in some cases.",
    "url": "https://code.visualstudio.com/updates/v1_20#_custom-dropdown-windows,-linux",
    "id": 510
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### OPEN EDITORS updates  \n* The **OPEN EDITORS** view can now be resized once it reaches the maximum size specified by `explorer.openEditors.visible`. Due to this change, the setting `explorer.openEditors.dynamicHeight` is no longer supported.\n* The ability to set `explorer.openEditors.visible` to 0 to hide the **OPEN EDITORS** view is being deprecated in the January release and we plan to drop it in February. To hide the **OPEN EDITORS** view, use the context menu in the Explorer title area to control the visibility of views.",
    "url": "https://code.visualstudio.com/updates/v1_20#_open-editors-updates",
    "id": 511
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Disable macOS Touch Bar entries  \nA new setting `keyboard.touchbar.enabled` disables the macOS Touch Bar entries that VS Code is providing.",
    "url": "https://code.visualstudio.com/updates/v1_20#_disable-macos-touch-bar-entries",
    "id": 512
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### workbench.fontAliasing setting  \nYou can now set `\"workbench.fontAliasing\": \"auto\"` on macOS to control font aliasing depending on the DPI of the monitor that VS Code is showing on. If set to `auto`, VS Code will apply `default` or `antialiased` automatically based on the DPI of the display.",
    "url": "https://code.visualstudio.com/updates/v1_20#_workbench.fontaliasing-setting",
    "id": 513
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Output panel  \nNow you can see VS Code logs with syntax highlighting in the Output panel. Thanks to [emilast](https://github.com/emilast) for providing the grammar for syntax highlighting log files.  \n![Log channels](images/1_20/output-log-channels.png)  \nThe Output panel also now consumes less memory resources with our new implementation. Memory resources of an output channel are released when not shown.",
    "url": "https://code.visualstudio.com/updates/v1_20#_output-panel",
    "id": 514
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Editor  \n### Global snippets  \nVS Code now supports global snippets meaning snippets that aren't scoped to a single language but can target any kind of files. Using the  **Preferences: Configure User Snippets** command, select the **New Global Snippets file...** option which will open a `.code-snippets` file for new snippets.  Use the `scope` attribute to list the languages that are targeted by a snippet. For instance, the snippet below can add a copyright header for JavaScript and TypeScript files:  \n```json\n\"JS & TS Stub\": {\n\"scope\": \"javascript,typescript\",\n\"prefix\": \"stub\",\n\"body\": [\n\"/*--------------------------------------------------------------\",\n\" *  Copyright (c) Your Corporation. All rights reserved.\",\n\" *  Licensed under the MIT License.\",\n\" *-------------------------------------------------------------*/\",\n\"\",\n\"'use strict';\",\n\"\",\n\"$0\"\n],\n\"description\": \"Insert Copyright Statement\"\n}\n```  \nExtension authors can also contribute global snippets. Include a `code-snippets` file in your extension and omit the language property in the `contributes.snippets` section of your `package.json`.",
    "url": "https://code.visualstudio.com/updates/v1_20#_global-snippets",
    "id": 515
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### More snippet variables  \nWe have added new snippet variables to read your clipboard, `CLIPBOARD`, and to insert the current date and time. For date and time,\ncombine any of these variables:  \n* `CURRENT_YEAR`\n* `CURRENT_YEAR_SHORT`\n* `CURRENT_MONTH`\n* `CURRENT_DATE`\n* `CURRENT_HOUR`\n* `CURRENT_MINUTE`\n* `CURRENT_SECOND`",
    "url": "https://code.visualstudio.com/updates/v1_20#_more-snippet-variables",
    "id": 516
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Keybindings for Quick Fixes and Code Actions  \nThe new `editor.action.codeAction` command lets you configure keybindings for specific Code Actions. This keybinding for example triggers the Extract function refactoring Code Actions:  \n```json\n{\n\"key\": \"ctrl+shift+r ctrl+e\",\n\"command\": \"editor.action.codeAction\",\n\"args\": {\n\"kind\": \"refactor.extract.function\"\n}\n}\n```  \nCode Action kinds are specified by extensions using the enhanced `CodeActionProvider` API. Kinds are hierarchical, so `\"kind\": \"refactor\"` will show all refactoring Code Actions, whereas `\"kind\": \"refactor.extract.function\"` will only show Extract function refactorings.  \nUsing the above keybinding, if only a single `\"refactor.extract.function\"` Code Action is available, it will be automatically applied. If multiple Extract function Code Actions are available, we bring up a context menu to select them:  \n![Select Code Action context menu](images/1_20/code-action-context-menu.png)  \nYou can also control how/when Code Actions are automatically applied using the `apply` argument:  \n```json\n{\n\"key\": \"ctrl+shift+r ctrl+e\",\n\"command\": \"editor.action.codeAction\",\n\"args\": {\n\"kind\": \"refactor.extract.function\",\n\"apply\": \"first\"\n}\n}\n```  \nValid values for `\"apply\"`:  \n* `\"first\"` - Always automatically apply the first available Code Action.\n* `\"ifSingle\"` - Default. Automatically apply the Code Action if only one is available. Otherwise, show the context menu.\n* `\"never\"` - Always show the Code Action context menu, even if only a single Code Action is available.",
    "url": "https://code.visualstudio.com/updates/v1_20#_keybindings-for-quick-fixes-and-code-actions",
    "id": 517
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Suggestion improvements  \nWe have refined how suggestions are prioritized and we have added a new setting, `editor.suggestSelection`, to control how suggestions are selected in the UI. You can make sure the top item is always selected (`first`), you can make it select the previously used item (`recentlyUsed`), or you can selected items based on prefixes you have used (`recentlyUsedByPrefix`). A more complete explanation with screenshots is in this GitHub [issue](https://github.com/microsoft/vscode/issues/41060#issuecomment-360529596).",
    "url": "https://code.visualstudio.com/updates/v1_20#_suggestion-improvements",
    "id": 518
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Emmet improvements  \nYou can now prefix your CSS abbreviations with `-` to get all applicable vendor prefixes included in the expanded abbreviation.  \n![Vendor prefix in Emmet](images/1_20/emmetprefix.gif)  \nRead more on [how to control vendor prefix in Emmet](https://code.visualstudio.com/docs/editor/emmet#_include-vendor-prefixes).  \nOther notable bug fixes in Emmet:  \n* Use of `@-` to get numbering in descending order in repeaters not working. [#35296](https://github.com/microsoft/vscode/issues/35296)\n* The `snippets.json` file for custom Emmet snippets fails to get parsed in the presence of comments. [#33818](https://github.com/microsoft/vscode/issues/33818)\n* When using `bem` style, part of class names that appear after `-` get cut. [#38768](https://github.com/microsoft/vscode/issues/38768)\n* **Emmet: Wrap with Abbreviation** command should wrap the entire HTML element when cursor is in either open or close tag. [#41516](https://github.com/microsoft/vscode/issues/41516)\n* **Emmet: Wrap with Abbreviation** command should support `|c` and `|bem` filters. [#40471](https://github.com/microsoft/vscode/issues/40471)\n* **Emmet: Update Tag** and **Emmet: Remove Tag** commands matches wrong pair in the presence of self closing tags. [#39789](https://github.com/microsoft/vscode/issues/39789)\n* **Emmet: Expand Abbreviation** command doesn't expand abbreviation that contains unescaped single quotes. [#38807](https://github.com/microsoft/vscode/issues/38807)\n* Emmet expansion gets triggered when editing the value of a CSS property. [#34162](https://github.com/microsoft/vscode/issues/34162)",
    "url": "https://code.visualstudio.com/updates/v1_20#_emmet-improvements",
    "id": 519
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Control cursor width  \nUse the new setting `editor.cursorWidth` to control the width of the cursor in pixels. This is only applicable when the `editor.cursorStyle` is set to `line`. The cursor stops growing wider after reaching the character width.  \n![Control cursor width](images/1_20/cursor-width.gif)",
    "url": "https://code.visualstudio.com/updates/v1_20#_control-cursor-width",
    "id": 520
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Global macOS find clipboard  \nIn the 1.19 release, we integrated with the macOS [global find clipboard](https://code.visualstudio.com/updates/v1_19#_global-find-clipboard-on-macos) which makes it easier to share search text across applications. This is now disabled by default, but can be enabled with the `\"editor.find.globalFindClipboard\"` setting. It's also now supported by the Search view (also disabled by default) and can be enabled with the `\"search.globalFindClipboard\"` setting.",
    "url": "https://code.visualstudio.com/updates/v1_20#_global-macos-find-clipboard",
    "id": 521
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Select text while jumping between brackets  \nThere is a new command, **Select to Bracket**, that will select the text between two matching brackets (as opposed to the already existing command, **Go to Bracket**, which only moves the cursor to the matching bracket).",
    "url": "https://code.visualstudio.com/updates/v1_20#_select-text-while-jumping-between-brackets",
    "id": 522
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Display minimap to the left  \nThere is a new setting, `editor.minimap.side`, which can be configured to render the minimap (code outline) on the left:  \n![Minimap Left Side](images/1_20/minimap-left-side.png)",
    "url": "https://code.visualstudio.com/updates/v1_20#_display-minimap-to-the-left",
    "id": 523
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Toggle for Ignore Trim Whitespace in the Diff Editor  \nThere is now a new action in the Diff Editor title area to quickly toggle the ignore trim whitespace setting:  \n![Toggle Ignore Trim Whitespace](images/1_20/toggle-ignore-trim-whitespace.gif)",
    "url": "https://code.visualstudio.com/updates/v1_20#_toggle-for-ignore-trim-whitespace-in-the-diff-editor",
    "id": 524
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Source Control  \n### Git submodules  \nThis release introduces Git submodule support. Since submodules are Git repositories themselves, they appear in the repositories list. There is basic support in place which lets you stage, unstage or discard submodule changes in the outer repository. You can disable automatic submodule detection with the `git.detectSubmodules` setting.  \n![Log channels](images/1_20/submodules.png)",
    "url": "https://code.visualstudio.com/updates/v1_20#_git-submodules",
    "id": 525
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Git: Prompt to save files before committing  \nYou can enable Git to prompt you to save unsaved files before committing. You can enable this with the `git.promptToSaveFilesBeforeCommit` setting.",
    "url": "https://code.visualstudio.com/updates/v1_20#_git:-prompt-to-save-files-before-committing",
    "id": 526
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Git: Commit input validation  \nThe Git extension now provides commit message length validation:  \n![Git input validation](images/1_20/git-input-validation.gif)  \nYou can configure the validation's behavior using the `git.inputValidation` setting, which has the following possible values: `always`, `warn` and `none`. The previous screenshot showcases the `always` option, while the default is `warn`.",
    "url": "https://code.visualstudio.com/updates/v1_20#_git:-commit-input-validation",
    "id": 527
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Setting for editor diff decorations  \nControl when and how inline diff decorations show up in the editor using the `scm.diffDecorations` setting. Possible values are `all`, `gutter`, `overview` and `none`.",
    "url": "https://code.visualstudio.com/updates/v1_20#_setting-for-editor-diff-decorations",
    "id": 528
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Integrated Terminal  \n### Screen reader support  \nScreen reader support was added to the terminal. In order to enable this, VS Code needs to be in \"Screen Reader Optimized\" mode which is typically auto-detected but can also be manually toggled by opening up editor accessibility help `kb(editor.action.showAccessibilityHelp)`.  \nWe consider this a first step and are actively looking into ways to make using the terminal easier for those with vision issues.",
    "url": "https://code.visualstudio.com/updates/v1_20#_screen-reader-support",
    "id": 529
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Mouse wheel now works as expected in terminal applications  \nApplications such as `vim` and `tmux` which are hosted in the terminal's *alt* buffer now have mouse wheel events translated to arrow events which enabled scrolling. Thanks to [Manoj Patel](https://github.com/nojvek) for helping define the correct behavior here.",
    "url": "https://code.visualstudio.com/updates/v1_20#_mouse-wheel-now-works-as-expected-in-terminal-applications",
    "id": 530
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Option as meta on macOS  \nThe option key can now be used as the meta key in the terminal, allowing the use of typical shell shortcuts like `option+B` to jump back a word and `option+F` to jump forward a word.  \n```js\n\"terminal.integrated.macOptionIsMeta\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_20#_option-as-meta-on-macos",
    "id": 531
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Copy on selection  \nYou can now automatically copy whenever you select text in the terminal:  \n```js\n\"terminal.integrated.copyOnSelection\": true\n```  \nThis is disabled by default.",
    "url": "https://code.visualstudio.com/updates/v1_20#_copy-on-selection",
    "id": 532
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Variables resolved in env setting  \nVariables are now resolved in `terminal.integrated.env.*` settings. This uses the standard [variable format](https://code.visualstudio.com/docs/editor/variables-reference) used in other settings:  \n```js\n\"terminal.integrated.env.linux\": {\n\"FOO\": \"${workspaceRoot}\",\n\"BAR\": \"${env:PATH}\"\n},\n```",
    "url": "https://code.visualstudio.com/updates/v1_20#_variables-resolved-in-env-setting",
    "id": 533
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Debugging  \n### Improved debugging support for multi root workspaces  \nA multi-root workspace can be used to work on related projects (for example \"Server\" and \"Client\") in a single workspace. Each of these folders have their own launch configurations (for example \"Launch Server\" and \"Launch Client\") but until now it was not possible to combine launch configurations from different folders into a \"compound\" launch configuration (because there was no mechanism to reference launch configurations across folders).  \nIn this milestone, we have addressed this limitation: first we've added support for \"workspace\" scoped launch configurations, and second we've introduced a syntax for referencing launch configurations across folders.\nWith this compound launch configs that reach into different folders can be kept where they belong: at the workspace level.  \nWorkspace scoped launch configurations live in the `\"launch\"` section of the workspace configuration file which can be easily edited via **Workspaces: Open Workspace Configuration File** in the **Command Palette**:  \n![Workspace Settings](images/1_20/workspace-settings.png)  \nAlternatively new launch configurations can be added via the **Add Config (workspace)** entry of the Launch Configuration dropdown menu:  \n![Add Config](images/1_20/add-config.png)  \nA compound launch configuration can reference the individual launch configurations by name as long as the names are unique within the workspace, for example:  \n```json\n\"compounds\": [{\n\"name\": \"Launch Server & Client\",\n\"configurations\": [\n\"Launch Server\",\n\"Launch Client\"\n]\n}]\n```  \nIf the individual launch configuration names are not unique, the qualifying folder can be specified with a more verbose \"folder\" syntax:  \n```json\n\"compounds\": [{\n\"name\": \"Launch Server & Client\",\n\"configurations\": [\n\"Launch Server\",\n{\n\"folder\": \"Web Client\",\n\"name\": \"Launch Client\"\n},\n{\n\"folder\": \"Desktop Client\",\n\"name\": \"Launch Client\"\n}\n]\n}]\n```  \nIn addition to `compounds` the `launch` section of the workspace configuration file can contain regular launch configurations too. Just make sure that all used variables are explicitly scoped to a specific folder because otherwise they are not valid for the workspace. You can find more details about explicitly scoped variables in the section [below](#scoped-configuration-variables).  \nHere is an example for a launch configuration where the program lives in a folder \"Program\" and where all files from a folder \"Library\" should be skipped when stepping:  \n```json\n\"launch\": {\n\"configurations\": [{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Launch test\",\n\"program\": \"${workspaceFolder:Program}/test.js\",\n\"skipFiles\": [\n\"${workspaceFolder:Library}/out/**/*.js\"\n]\n}]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_20#_improved-debugging-support-for-multi-root-workspaces",
    "id": 534
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Scoped configuration variables  \nWe've introduced a new variable syntax to scope configuration variables in `launch.json` and `tasks.json` files to a specific workspace folder. By appending the root folder's name to a variable (separated by a colon), it is possible to reach into sibling root folders of a workspace. Without the root folder name, the variable is scoped to the same folder where it is used.  \nFor example, in a multi-root workspace with folders `Server` and `Client`, a `${workspaceFolder:Client}` refers to the path of the `Client` root. For a more involved example see section [Improved debugging support for multi-root workspaces](#improved-debugging-support-for-multi-root-workspaces).  \n> More about variable substitution can be found [here](https://code.visualstudio.com/docs/editor/variables-reference)",
    "url": "https://code.visualstudio.com/updates/v1_20#_scoped-configuration-variables",
    "id": 535
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Node debugging  \n**Automatically attach debugger to Node.js subprocesses**  \nFor node-debug we've added a mechanism that tracks all subprocesses of a debuggee and tries to automatically attach to those processes that are launched in debug mode. This feature simplifies debugging of programs that fork or spawn Node.js processes like programs based on the \"cluster\" node module:  \n![Auto Attach shown with Cluster Example](images/1_20/auto-attach-cluster.gif)  \nThe feature is enabled by setting the launch config attribute `autoAttachChildProcesses` to true:  \n```json\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Cluster\",\n\"program\": \"${workspaceFolder}/cluster.js\",\n\"autoAttachChildProcesses\": true\n}\n```  \n**Please note:** In order to be able to track the subprocesses, we need the process ID of the parent. For this we require that the main debuggee launched from the launch config is a Node.js process and we use an \"evaluate\" to find its process ID.  \nWhether a process is in debug mode is guessed by analyzing the program arguments. Currently we detect the patterns `--inspect`, `--inspect-brk`, `--inspect-port`, `--debug`, `--debug-brk`, `--debug-port` (all optionally followed by a `=` and a port number).  \n**\"nvm\" support**  \nIf you are using \"nvm\" (or \"nvm-windows\") to manage your Node.js versions it is now possible to specify a `runtimeVersion` attribute in a launch configuration for selecting a specific version of Node.js.  \nHere is an example launch config:  \n```json\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Launch test\",\n\"runtimeVersion\": \"7.10.1\",\n\"program\": \"${workspaceFolder}/test.js\"\n}\n```  \n**Please note**: Make sure to have those Node.js versions installed that you want to use with the `runtimeVersion` attribute as the feature will not download and install the version itself. So you will have to run something like `nvm install 7.10.1` from the integrated terminal if you plan to add `\"runtimeVersion\": \"7.10.1\"` to your launch configuration.",
    "url": "https://code.visualstudio.com/updates/v1_20#_node-debugging",
    "id": 536
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Extensions  \n### Extension recommendations  \nWhen you are working on file types not supported out-of-the-box by VS Code or by any installed extension, you may not see syntax highlighting. If there are extensions in the Marketplace that can support such files, you will now be notified.  \n![Extension Recommendations for unknown file types](images/1_20/filerec.gif)  \nThe extension recommendation list will now include extensions that are popular among other users who work on the same repository as you.  \n![Extension Recommendation based on what is popular on the same repo](images/1_20/popular-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_20#_extension-recommendations",
    "id": 537
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## Languages  \n### TypeScript 2.7.1  \nVS Code now ships with [TypeScript 2.7.1](https://devblogs.microsoft.com/typescript/announcing-typescript-2-7/). This update brings a number of new features and bug fixes.",
    "url": "https://code.visualstudio.com/updates/v1_20#_typescript-2.7.1",
    "id": 538
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Quick Fix all for JavaScript and TypeScript  \nFix errors in a flash with new Quick Fix all for JavaScript and TypeScript. Move your cursor to a fixable error such as an unused variable, and trigger Quick Fixes using the lightbulb or by pressing `kb(editor.action.quickFix)`. If one of the available Quick Fixes can be applied to multiple errors in the current file, you'll see a new **Fix all in file** Code Action.  \n![Quick fix all in file](images/1_20/ts-fix-all-in-file-pre.png)  \nAccept and all errors will disappear:  \n![Quick fix all fixes all similar errors in the current file](images/1_20/ts-fix-all-in-file-post.png)",
    "url": "https://code.visualstudio.com/updates/v1_20#_quick-fix-all-for-javascript-and-typescript",
    "id": 539
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Bracket property suggestions  \nSpaces got you down? When you type `.`, VS Code now shows all known properties for JavaScript and TypeScript, even if a property name contain whitespaces or other non-identifier characters.  \n![Suggestions for properties with spaces or other special characters are now shown](images/1_20/ts-bracket-pre.png)  \nAccepting one of these suggestions automatically converts to bracket accessor notation.  \n![Bracket accessor automatically inserted](images/1_20/ts-bracket-post.png)",
    "url": "https://code.visualstudio.com/updates/v1_20#_bracket-property-suggestions",
    "id": 540
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Automatic member property suggestions  \nTired of typing `this.` to access class properties in JavaScript and TypeScript? Now you can just start typing to see available members.  \n![No more need to type this. to see property suggestions](images/1_20/ts-this-dot-pre.png)  \nAccept a member property suggestion, and VS Code automatically inserts the require `this.`.  \n![this. is automatically inserted when you suggest a property suggestion](images/1_20/ts-this-dot-post.png)",
    "url": "https://code.visualstudio.com/updates/v1_20#_automatic-member-property-suggestions",
    "id": 541
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Marking of optional property in suggestions  \nSuggestions for optional TypeScript properties are now suffixed with a `?`:  \n![Optional property suggestions](images/1_20/ts-optional-prop-completions.png)  \nJavaScript users will also see `?` for completions that come from `*.d.ts` Type Declaration (typings) packages.",
    "url": "https://code.visualstudio.com/updates/v1_20#_marking-of-optional-property-in-suggestions",
    "id": 542
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Auto-imports based on filename  \nAuto-imports for JavaScript and TypeScript now support importing default exported objects based on filename:  \n![importing a default exported object by filename](images/1_20/ts-auto-import-default.gif)",
    "url": "https://code.visualstudio.com/updates/v1_20#_auto-imports-based-on-filename",
    "id": 543
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Extension contributed TypeScript plugins  \n[TypeScript plugins](https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin) let developers extend VS Code's JavaScript and TypeScript language support. For example, a TypeScript plugin might add additional linting to a file or add IntelliSense when working within JavaScript template strings.  \n![Styled component IntelliSense from the typescript-styled plugin](images/1_20/ts-styled-plugin.png)  \nTypeScript plugins were first introduced in TypeScript 2.3, but they previously required installing plugins into your workspace with `npm` and then configuring a `jsconfig.json` or `tsconfig.json` file to load them. VS Code 1.20 simplifies this by allowing extensions to contribute a set of global TypeScript plugins that are automatically activated without any configuration. All you need to do is install the extension.  \nA few extensions are already making use of this:  \n* [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components) -Syntax highlighting, IntelliSense, and error reporting for [styled-component](https://github.com/styled-components/styled-components) CSS strings.\n* [lit-html](https://marketplace.visualstudio.com/items?itemName=bierner.lit-html) - Syntax highlighting,IntelliSense, and formatting for [lit-html](https://github.com/Polymer/lit-html) template strings.  \nExtension contributed plugins are automatically activated for VS Code's version of TypeScript. If you are using a workspace version of TypeScript, you must still install the TypeScript plugins in your workspace.  \nOur extension authoring documentation has more information about the new [TypeScript Plugin contribution point](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributestypescriptserverplugins). We're very excited to see how extension authors leverage this!",
    "url": "https://code.visualstudio.com/updates/v1_20#_extension-contributed-typescript-plugins",
    "id": 544
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Multi selection context for Explorer commands  \nThis milestone we have introduced multi-selection in the Explorer as mentioned [above](#workbench). Extensions that contribute commands to the Explorer can respond to multi selection in the Explorer by respecting the new arguments passed to their commands.  \nAs before VS Code tries to infer the currently selected resource in the Explorer and passes that as a parameter when invoking the command. However if multi selection is enabled, VS Code will pass an additional second argument to the command, an array of resources which are selected. This array always contains the first resource argument.",
    "url": "https://code.visualstudio.com/updates/v1_20#_multi-selection-context-for-explorer-commands",
    "id": 545
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### New menu group identifiers  \nSeveral menus now have new group identifiers for finer control on command placement:  \n**Explorer context menu**  \n* `navigation`:  Commands related to navigation across VS Code. As before this is the primary group of the Explorer context menu.\n* `2_workspace`: Commands related to workspace manipulation.\n* `3_compare`: Commands related to comparing files in the diff editor.\n* `4_search`: Commands related to searching in the search view.\n* `5_cutcopypaste`: Commands related to cutting, copying and pasting of files.\n* `7_modification`: Commands related to the modification of a files.  \n**Editor Tab context menu**  \n* `1_close`: Commands related to closing editors.\n* `3_preview`: Commands related to pinning editors.  \n**Editor Title menu**  \n* `1_diff`: Commands related to working with diff editors.\n* `3_open`: Commands related to opening editors.\n* `5_close`: Commands related to closing editors.",
    "url": "https://code.visualstudio.com/updates/v1_20#_new-menu-group-identifiers",
    "id": 546
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### New keyboard shortcut context operator  \nKeyboard shortcut contexts allow users to control when keybindings are active. They are also referred to as [when clauses](https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts) because they define *when* a keybinding is active or enabled. In this release, there is a new key-value pair operator for `when` clauses. The expression `key =~ value` treats the right hand side as a regular expression to match against the left hand side. For example, to contribute context menu items for all Docker files, one could use:  \n```json\n\"when\": \"resourceFilename =~ /docker/\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_20#_new-keyboard-shortcut-context-operator",
    "id": 547
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### CodeActionProvider improvements  \nA `CodeActionProvider` can now return objects of the new `CodeAction` class. `CodeAction` adds additional metadata and functionality over `Command`, and better captures what Code Actions are and how they are used in VS Code's UI.  \nA `CodeAction` primarily consists of a `title`, `kind`, and at least a `Command` or (new in VS Code 1.20) a `WorkspaceEdit`.  \n```ts\nimport * as vscode from 'vscode'\n\n/**\n* Quick fix provider that converts :) to \ud83d\ude00\n*/\nexport class Emojizer implements vscode.CodeActionProvider {\nprovideCodeActions(document: vscode.TextDocument, range: vscode.Range) {\nconst pos = range.start;\nconst line = document.lineAt(pos.line);\n\n// Check if we are at a :)\nif (line.text[pos.character] === ':' && line.text[pos.character + 1] === ')') {\nconst fix = new vscode.CodeAction('Convert to \ud83d\ude00', vscode.CodeActionKind.QuickFix);\nfix.edit = new vscode.WorkspaceEdit();\nfix.edit.replace(document.uri, new vscode.Range(pos, pos.translate(0, 2)), '\ud83d\ude00');\nreturn [fix];\n}\nreturn undefined;\n}\n}\n```  \n`CodeAction` also adds metadata about Code Actions, including the Code Action's kind (`vscode.CodeActionKind.QuickFix` in the example above) and the set of diagnostics that the Code Action addresses. We use this metadata to implement features such as the `Refactor` command and `vscode.action.codeAction` keybindings, and plan to build additional features using it in the future.",
    "url": "https://code.visualstudio.com/updates/v1_20#_codeactionprovider-improvements",
    "id": 548
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Remove files from the Open Recent list  \nA new command `vscode.removeFromRecentlyOpened` removes entries from the **Open Recent** list in the **File** menu.",
    "url": "https://code.visualstudio.com/updates/v1_20#_remove-files-from-the-open-recent-list",
    "id": 549
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Specify current directory when creating terminals  \nThere is a new `cwd` property to set the current working directory when calling `createTerminal`:  \n```ts\nvscode.window.createTerminal({\nname: 'My Ext Terminal',\ncwd: process.env.HOME\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_20#_specify-current-directory-when-creating-terminals",
    "id": 550
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Debug API  \n**Adding and removing breakpoints**  \nIn this milestone, we've continued work on the breakpoints debug API. It is now possible to [add and remove](https://github.com/microsoft/vscode/blob/7636a7d6f7d2749833f783e94fd3d48d6a1791cb/src/vs/vscode.proposed.d.ts#L282-L292) `SourceBreakpoints` and `FunctionBreakpoints`.  \n> **Note:** The breakpoints API is still proposed, so in order to use it, you must opt into it by adding a `\"enableProposedApi\": true` to `package.json` and you'll have to copy the [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts) into your extension project. Also be aware that you cannot publish an extension to the Marketplace that uses the `enableProposedApi` attribute.  \n**new `DebugConfigurationProvider.debugAdapterExecutable` replaces `adapterExecutableCommand` commands**  \nCurrently a debugger extension can contribute the \"hook\"-like command `adapterExecutableCommand` to return a dynamically calculated path (and corresponding program arguments) of the debug adapter about to be launched by VS Code.\nIn this milestone, we are proposing \"real\" API that replaces the untyped command based mechanism with a typed solution. At the same time we are deprecating the `adapterExecutableCommand` command (and we will remove support for it as soon it is no longer used).  \nThe new API is an optional method [`debugAdapterExecutable`](https://github.com/microsoft/vscode/blob/7636a7d6f7d2749833f783e94fd3d48d6a1791cb/src/vs/vscode.proposed.d.ts#L388-L395) on the `DebugConfigurationProvider` that returns the path and arguments wrapped as an `DebugAdapterExecutable` object.  \n**Command `vscode.logToDebugConsole` will be removed**  \nAs [announced](https://code.visualstudio.com/updates/v1_18#_debug-api-updates) in the previous release, we have deprecated the  `vscode.logToDebugConsole` command in favor of real debug API. We plan to remove support for the `vscode.logToDebugConsole` command in the February milestone.  \n**Run a debug adapter inside the debug extension**  \nDeveloping a debugger extension typically involves debugging both the extension and the debug adapter in two parallel sessions. VS Code supports this nicely but development could be easier if both the extension and the debug adapter would be one program that could be debugged in one session.  \nIn this milestone we've explored a way to run the debug adapter inside the extension. The basic idea is to intercept the launch of a debug session in the `resolveDebugConfiguration` method of a `DebugConfigurationProvider` and starting to listen for connect requests and creating a new debug adapter session for every request. To make VS Code use connect requests (instead of always launching new debug adapter), the launch configuration is modified by adding the `debugServer` attribute to it.  \nThese [lines of code](https://github.com/microsoft/vscode-mock-debug/blob/042d19a27a8e3a08f27a24110506b53fbecc75ce/src/extension.ts#L61-L71) implement this approach for the \"Mock Debug\" extension (enable this feature by setting the compile time flag `EMBED_DEBUG_ADAPTER` to true).",
    "url": "https://code.visualstudio.com/updates/v1_20#_debug-api",
    "id": 551
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Add, remove and change workspace folders  \nA new proposed API was added to change workspace folders in the currently opened workspace:  \n```typescript\nupdateWorkspaceFolders(\nstart: number,\ndeleteCount: number,\n...workspaceFoldersToAdd: { uri: Uri, name?: string }[]\n): boolean\n```  \nThis method can:  \n* Remove existing workspace folders (by providing the index of the folder to delete via `start` and the number of folders to remove via `deleteCount`).\n* Add new workspace folders to a specific index (by providing the index where to add to via `start`, leaving `deleteCount` as `0` and providing the workspace folders to add as arguments).\n* Update existing folders, for example, move them or rename them (by removing existing folders first and then adding them back again).",
    "url": "https://code.visualstudio.com/updates/v1_20#_add,-remove-and-change-workspace-folders",
    "id": 552
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### RenameProvider2  \nThe proposed `RenameProvider2` extension to `RenameProvider` allows extensions to provide additional rename information, including range of the symbol to rename and the initial name shown when a user triggers rename:  \n```ts\nexport interface RenameInitialValue {\nrange: Range;\ntext?: string;\n}\n\nexport interface RenameProvider2 extends RenameProvider {\nresolveInitialRenameValue?(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<RenameInitialValue>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_20#_renameprovider2",
    "id": 553
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### UX designs for notifications  \nDuring this milestone, the UX (User Experience) team worked on redesigning the notifications display in VS Code. We plan to start development work on these designs in the February milestone. More details about the design can be found in this [GitHub issue](https://github.com/microsoft/vscode/issues/22388#issuecomment-361915332) and we are happy for your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_20#_ux-designs-for-notifications",
    "id": 554
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n## New Documentation  \n### Node.js deployment tutorials for Docker and Azure App Service  \nWe have two new tutorials for [deploying Node.js applications](https://code.visualstudio.com/docs/nodejs/nodejs-deployment?utm_source=VsCode&utm_medium=ReleaseNotes) to Azure.  \nTutorial | Description\n--- | ---\n[Deploy using Azure App Service](https://code.visualstudio.com/tutorials/app-service-extension/getting-started?utm_source=VsCode&utm_medium=ReleaseNotes) | Manage Azure resources directly in VS Code with the [Azure App Service](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice) extension.\n[Deploy using Docker](https://code.visualstudio.com/tutorials/docker-extension/getting-started?utm_source=VsCode&utm_medium=ReleaseNotes) | Deploy your website using a Docker container with the [Docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) extension.",
    "url": "https://code.visualstudio.com/updates/v1_20#_node.js-deployment-tutorials-for-docker-and-azure-app-service",
    "id": 555
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Variable substitution reference  \nWe added a [Variables Reference](https://code.visualstudio.com/docs/editor/variables-reference) describing VS Code's support for variable substitution (for example `${workspaceFolder}`, `${file}`) in your debugging and task configuration files.",
    "url": "https://code.visualstudio.com/updates/v1_20#_variable-substitution-reference",
    "id": 556
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### VS Code recipe for Vue.js  \nThere is now a [Vue.js debugging recipe](https://github.com/microsoft/vscode-recipes/tree/main/vuejs-cli) to help configure the [Chrome debugger](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) for applications which use the popular [Vue.js](https://vuejs.org/) framework.",
    "url": "https://code.visualstudio.com/updates/v1_20#_vs-code-recipe-for-vue.js",
    "id": 557
  },
  {
    "content": "See what is new in the Visual Studio Code January 2018 Release (1.20)  \n### Language Server Protocol website  \nFor extension authors, we've create a new Language Server Protocol [website](https://microsoft.github.io/language-server-protocol/) providing documentation, the LSP specification, and listing the current implementations.",
    "url": "https://code.visualstudio.com/updates/v1_20#_language-server-protocol-website",
    "id": 558
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Workbench  \n### New Notifications UI  \nWe updated the look and feel of notifications in VS Code. Notifications now:  \n* Slide in from the bottom right (unless the new Notification Center is opened).\n* Can be dismissed and then reviewed later through the Notification Center.\n* Can be expanded to show the full contents of the message.  \nEach notification has the following structure:  \n![Notification](images/1_21/notification.png)  \nIf a notification does not provide any source information or any action buttons, it will show only a severity and message. These types of notifications will hide automatically after a certain timeout.  \n![Notification](images/1_21/notification-small.png)  \nA new entry (\"bell\" icon) in the bottom right of the Status Bar indicates the number of new notifications. Once clicked, the Notification Center will open that shows all notifications that were not dismissed yet.  \n![Notifications](images/1_21/notifications.gif)  \nEach notification can be managed with new commands and configurable keybindings (see below in the [New Commands](#new-commands) section).  \n**Note for extension and theme authors:** With the new notification UI, we introduced new theming colors for theme authors to adopt (see below). There is also a soft deprecation of the `isCloseAffordance` attribute for extension authors which is no longer needed when showing these style of notifications.",
    "url": "https://code.visualstudio.com/updates/v1_21#_new-notifications-ui",
    "id": 560
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Centered editor layout  \nBy popular request [#15684](https://github.com/microsoft/vscode/issues/15684), we have added centered editor layout. This layout mode is designed to keep you deeply focused on your code by giving the editor most of the screen real estate.  \n![centeredLayout](images/1_21/centeredLayout.gif)  \nIf you open another editor to the side, centered layout mode stops until there is only one editor group again. The left and right sash for resizing are coupled so the editor is always centered. Hold down the `Alt` key if you want to resize the sashes independently. Double click on a sash to bring them back to the default golden ratio size.  \nZen mode will now automatically turn this mode on. Use the `\"zenMode.centerLayout\"` setting to control this behavior.",
    "url": "https://code.visualstudio.com/updates/v1_21#_centered-editor-layout",
    "id": 561
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Better drag and drop support  \nWe revisited our support for drag and drop in the workbench and now support more drag and drop scenarios. Probably the most up-voted request was to drag files from one File Explorer to another VS Code instance:  \n![DND files across Windows](images/1_21/window-dnd-files.gif)  \nWe now also support to drag and drop root folders in the File Explorer to rearrange their order as requested in issue [#29715](https://github.com/microsoft/vscode/issues/29715).  \nOther improvements are to the **OPEN EDITORS** view. You can now:  \n* Drag files from the Explorer into a specific space of OPEN EDITORS.\n* Drag files from the desktop into a specific space of OPEN EDITORS.\n* Drag tabs into a specific space of OPEN EDITORS.",
    "url": "https://code.visualstudio.com/updates/v1_21#_better-drag-and-drop-support",
    "id": 562
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Copy/Paste files across windows  \nWe now allow you to copy and paste files between two VS Code File Explorers in different instances. This works for single or multi-selection of files as well as folders.  \n![Copy Paste across Windows](images/1_21/window-copy-paste.gif)",
    "url": "https://code.visualstudio.com/updates/v1_21#_copy/paste-files-across-windows",
    "id": 563
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Symbolic link indication in Explorer  \nWe now indicate symbolic links in the File Explorer by an arrow decoration and additional hover text.  \n![symlink](images/1_21/symlink.png)",
    "url": "https://code.visualstudio.com/updates/v1_21#_symbolic-link-indication-in-explorer",
    "id": 564
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Create multiple folders in the Explorer  \nWhen you create a path with subfolders, VS Code will create all the intermediate folders. This can also be used to create a new file:  \n![create multiple folder from the Explorer](images/1_21/explorer-multiFolderCreation.gif)",
    "url": "https://code.visualstudio.com/updates/v1_21#_create-multiple-folders-in-the-explorer",
    "id": 565
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### NPM Script running  \nWhen running scripts in `package.json` files as [tasks](https://code.visualstudio.com/docs/editor/tasks#_task-autodetection) using **Terminal** > **Run Tasks**, scripts from `package.json` files in subfolders are now also detected. To exclude folders from script detection, use the `npm.exclude` setting.",
    "url": "https://code.visualstudio.com/updates/v1_21#_npm-script-running",
    "id": 566
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Editor  \n### Text buffer improvements  \nVS Code has been using a line based representation of the text buffer. It had a lot of advantages but there were also disadvantages, for example, large memory overhead when dealing with large files with many lines.  \nWe introduced a new text buffer implementation in the Insider builds about two months ago. The new buffer implementation is inspired by the [piece table](https://en.wikipedia.org/wiki/Piece_table) data structure and is optimized for source code editing scenarios. It uses less memory to store document metadata making file opening easier and reduces the memory pressure on the operation system. Additionally, it has good editing performance for both small and large files.  \nThe new text buffer performed well during the last two months of Insider testing so we are turning it on for all users in this milestone. It also gives us opportunities for further improvements, like searching in large files.",
    "url": "https://code.visualstudio.com/updates/v1_21#_text-buffer-improvements",
    "id": 567
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Coloring of active line number  \nA new theme key `editorActiveLineNumber.foreground` can now be defined in themes or settings to customize the line number color of the current line in the editor.  \n![Active Line Number](images/1_21/activelinenumber.png)",
    "url": "https://code.visualstudio.com/updates/v1_21#_coloring-of-active-line-number",
    "id": 568
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Emmet  \nVS Code has had support for the `bem` and `comment` [filters](https://code.visualstudio.com/docs/editor/emmet#_using-filters) when expanding Emmet abbreviations, but never both at the same time until now.  \n![Support multiple Emmet filters](images/1_21/emmet-multi-filters.gif)  \nYou can now get CSS Emmet completions in a style attribute in an HTML file when the completions are manually triggered via `kb(editor.action.triggerSuggest)`.  \n![CSS Emmet in style attribute](images/1_21/emmet-style.gif)  \nTo get completions automatically without using the manual trigger, enable the quick suggestions feature for strings in HTML files by adding the following to your settings:  \n```json\n\"[html]\": {\n\"editor.quickSuggestions\": {\n\"other\": true,\n\"comments\": false,\n\"strings\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_21#_emmet",
    "id": 569
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Integrated Terminal  \n### Split terminals  \nThe Integrated Terminal can now be split such that multiple are visible at once, which can enable much easier management of terminals when you need a watch and a run command for example:  \n![Split terminals](images/1_21/terminal-split.gif)  \nSplitting can be done by clicking the split button in the panel, through the context menu or the command `kb(workbench.action.terminal.split)`.  \nFocus can be moved between split terminals using `kb(workbench.action.terminal.focusNextPane)` and `kb(workbench.action.terminal.focusPreviousPane)`. The active pane can be resized using the keyboard with:  \n* **Terminal: Resize Pane Down**: `kb(workbench.action.terminal.resizePaneDown)`\n* **Terminal: Resize Pane Up**: `kb(workbench.action.terminal.resizePaneUp)`\n* **Terminal: Resize Pane Left**: `kb(workbench.action.terminal.resizePaneLeft)`\n* **Terminal: Resize Pane Right**: `kb(workbench.action.terminal.resizePaneRight)`",
    "url": "https://code.visualstudio.com/updates/v1_21#_split-terminals",
    "id": 570
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Move cursor with Alt+Click  \nThe cursor in the Integrated Terminal can now be moved with `Alt+Click`. This even works in applications like Vim or nano. Special thanks to [Nick Pezza](https://github.com/npezza93) for implementing the feature in the [xterm.js](https://github.com/xtermjs/xterm.js).",
    "url": "https://code.visualstudio.com/updates/v1_21#_move-cursor-with-alt+click",
    "id": 571
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Additional support for Alt sequences  \nPressing `Alt+Shift+{key}` and `Alt+Ctrl+{key}` while the Integrated Terminal is focused now sends the keystrokes to be handled by the process running inside the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_21#_additional-support-for-alt-sequences",
    "id": 572
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Right click to select word  \nRight clicking in the Integrated Terminal will now select the word on macOS. This can be configured to work on other platforms by setting:  \n```js\n\"terminal.integrated.rightClickBehavior\": \"selectWord\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_21#_right-click-to-select-word",
    "id": 573
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Source Control  \n### Editor change navigation  \nTwo new actions let you navigate between active changes in the current file:  \n* **Move to Next Change**: `kb(workbench.action.editor.nextChange)`\n* **Move to Previous Change**: `kb(workbench.action.editor.previousChange)`",
    "url": "https://code.visualstudio.com/updates/v1_21#_editor-change-navigation",
    "id": 574
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Languages  \n### TypeScript 2.7.2  \nVS Code now includes TypeScript 2.7.2. This update includes a [few important bug fixes](https://github.com/microsoft/TypeScript/milestone/63?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_21#_typescript-2.7.2",
    "id": 575
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### HTML path completion  \nPath completion has been added to make it easier to import various files in HTML.  \n![HTML Path Completion](images/1_21/path-completion.gif)",
    "url": "https://code.visualstudio.com/updates/v1_21#_html-path-completion",
    "id": 576
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Markdown preview bidirectional scroll synchronization  \nVS Code's Markdown previews now include bidirectional scroll synchronization. Scroll the editor and the corresponding preview automatically scrolls to match the editor's view. Scroll the preview, and the editor does the same.  \n![Bi-directional scroll synchronization in the Markdown preview](images/1_21/md-scroll-sync.gif)  \nYou can enable or disable scroll synchronization using the  `\"markdown.preview.scrollEditorWithPreview\"` and `\"markdown.preview.scrollPreviewWithEditor\"` settings. The old `\"markdown.preview.scrollPreviewWithEditorSelection\"` setting is now deprecated.",
    "url": "https://code.visualstudio.com/updates/v1_21#_markdown-preview-bidirectional-scroll-synchronization",
    "id": 577
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Markdown dynamic previews  \nVS Code's built-in Markdown preview now automatically changes to preview the active Markdown document. Previously, you had to open a new Markdown preview for every new Markdown file you opened.  \n![Markdown preview updating to show the current Markdown document](images/1_21/md-dynamic-preview.gif)  \nIf you'd like a dedicated preview pane for a specific Markdown file, you can \"lock\" the preview with the **Markdown: Toggle Preview Locking** command. The locked preview will not automatically switch to preview the active Markdown file. Locked previews are indicated by brackets in the title **[Preview]**.  \n![A locked Markdown preview](images/1_21/md-locked.png)  \nMarkdown previews can be locked or unlocked using the **Markdown: Toggle Preview Locking** command. You can also open a locked preview of the current Markdown document using the **Markdown: Open Locked Preview to Side** command.",
    "url": "https://code.visualstudio.com/updates/v1_21#_markdown-dynamic-previews",
    "id": 578
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Debugging  \n### Breakpoint icons in BREAKPOINTS view  \nTo more easily distinguish between different breakpoints, we have added icons to the **BREAKPOINTS** view. The icons reflect the type and state of the breakpoint and are the same as in the editor glyph margin. Active breakpoints are red, disabled gray and unverified have a hollow structure. Conditional breakpoints have an equality sign, while function breakpoints are represented with a triangle.  \n![Breakpoints](images/1_21/breakpoints.png)",
    "url": "https://code.visualstudio.com/updates/v1_21#_breakpoint-icons-in-breakpoints-view",
    "id": 579
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Node debugging  \n**Node.js Version Switcher 'nvs' support**  \nLast milestone we've added support for the [Node Version Manager](https://github.com/creationix/nvm) ('nvm'). We now also support the [Node Version Switcher](https://github.com/jasongin/nvs) ('nvs'). Use the `runtimeVersion` attribute in a \"node\" launch configuration for selecting a specific version of Node.js.  \n**Note**: Make sure you have the Node.js version installed that you want to use with the `runtimeVersion` attribute as VS Code will not download and install the version automatically. For example, run something like `nvs add 7.10.1` from the Integrated Terminal if you plan to add `\"runtimeVersion\": \"7.10.1\"` to your launch configuration.  \n**Note**: If VS Code detects that 'nvs' is installed, it does **not** fall back to 'nvm' if a specific Node.js version cannot be found in 'nvs'. Using both 'nvs' and 'nvm' at the same time is not supported.",
    "url": "https://code.visualstudio.com/updates/v1_21#_node-debugging",
    "id": 580
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Extensions  \n### Manage built-in extensions  \nWith this release, you can now manage (disable/enable) the built-in extensions shipped with VS Code. There is an action **Show Built-in Extensions** in Extensions view that shows all built-in extensions and you can browse and manage them. The same action can be accessed via the **Command Palette** as well.  \n![Manage Built-in](images/1_21/manage-builtin.gif)",
    "url": "https://code.visualstudio.com/updates/v1_21#_manage-built-in-extensions",
    "id": 581
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Language Packs  \nIn the 1.20 release, we added support for language packs and now the first language packs are available in the [Marketplace](https://marketplace.visualstudio.com/vscode).  \n![language pack extensions](images/1_21/language-pack-extensions.png)  \nWe will continue to work with the community to add more language packs.",
    "url": "https://code.visualstudio.com/updates/v1_21#_language-packs",
    "id": 582
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Extension Recommendations  \nYou can now disable all extension recommendations by setting `\"extensions.showRecommendationsOnlyOnDemand\": true`. When this setting is enabled, you will still be able to see recommendations by using the **Show Recommended Extensions** command in Extensions view. The command can also be run via the **Command Palette**.",
    "url": "https://code.visualstudio.com/updates/v1_21#_extension-recommendations",
    "id": 583
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Extension Authoring  \n### Add, remove and change workspace folders  \nThe [previously proposed](https://code.visualstudio.com/updates/v1_20#_add-remove-and-change-workspace-folders) API for adding, removing and changing workspace folders has been promoted to Stable.",
    "url": "https://code.visualstudio.com/updates/v1_21#_add,-remove-and-change-workspace-folders",
    "id": 584
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Messages: `isCloseAffordance` no longer supported for non-modal messages  \nWith the introduction of a new notification UI in this milestone, every notification message now provides a close button in the top-right corner. This change means that the close action is no longer mixed with other message actions and `isCloseAffordance` is no longer be needed for messages that are non-modal. Please look at your message usage and make sure that you are not adding an action to close the notification unless that action is doing something specific for your extension.  \nA message will still close automatically if any of the provided actions is clicked by the user.",
    "url": "https://code.visualstudio.com/updates/v1_21#_messages:-iscloseaffordance-no-longer-supported-for-non-modal-messages",
    "id": 585
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### New theme colors and removal of old colors  \nWith the new notifications UX, new colors were added that theme authors should adopt:  \n* `notificationCenter.border`: Notification Center border color.\n* `notificationCenterHeader.foreground`: Notification Center header foreground color.\n* `notificationCenterHeader.background`: Notification Center header background color.\n* `notificationToast.border`: Notification toast border color.\n* `notifications.foreground`: Notifications foreground color.\n* `notifications.background`: Notifications background color.\n* `notifications.border`: Notifications border color separating from other notifications in the Notification Center.\n* `notificationLink.foreground`: Notification links foreground color.  \nAll of the previously supported theme colors for notifications are no longer supported.  \nThe border color of editor highlights can now also be freely chosen:  \n* `editor.selectionHighlightBorder`: Border color for regions with the same content as the selection.\n* `editor.wordHighlightBorder`: Border color of a symbol during read-access, for example when reading a variable.\n* `editor.wordHighlightStrongBorder`: Border color of a symbol during write-access, for example when writing to a variable.\n* `editor.findMatchBorder`: Border color of the current search match.\n* `editor.findMatchHighlightBorder`: Border color of the other search matches.\n* `editor.findRangeHighlightBorder`: Border color the range limiting the search (Enable 'Find in Selection' in the find widget).\n* `editor.rangeHighlightBorder`: Background color of the border around highlighted ranges.  \nThese additional colors were also added  \n* `terminal.border`: The color of the border that separates split panes within the terminal. This defaults to panel.border.",
    "url": "https://code.visualstudio.com/updates/v1_21#_new-theme-colors-and-removal-of-old-colors",
    "id": 586
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Custom views  \n**Themable item icons**  \nIf you want your `TreeItem` to have a folder or file icon from the active File Icon theme, you can assign the `iconPath` property of `TreeIem` to the `ThemeIcon.Folder` or `ThemeIcon.File` constant.  \n**Tooltips**  \nYou can provide a tooltip to an item in the view using the property `tooltip` in `TreeItem`.",
    "url": "https://code.visualstudio.com/updates/v1_21#_custom-views",
    "id": 587
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Extension uninstall hook  \nIf your extension has some clean ups to be done when it is uninstalled from VS Code, you can now do that by registering a `node` script to the uninstall hook `vscode:uninstall` under `scripts` section in extension's `package.json`.  \n```json\n{\n\"scripts\": {\n\"vscode:uninstall\": \"node ./out/src/lifecycle\"\n}\n}\n```  \nThis script gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled.  \n**Note:** Only Node.js scripts are supported.",
    "url": "https://code.visualstudio.com/updates/v1_21#_extension-uninstall-hook",
    "id": 588
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Active view context key  \nThere's a new keybinding context key ('when' clause) available which uses the ID of the currently open view: `activeViewlet`. Example usage:  \n```json\n\"when\": \"activeViewlet == workbench.view.scm\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_21#_active-view-context-key",
    "id": 589
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Debug Adapter Protocol  \n**New `CapabilitiesEvent`**  \nSometimes it is difficult for a debug adapter to know and return all capabilities from the (very early) `Initialize` request because some might not be known until the runtime/debugger has started. The newly introduced `CapabilitiesEvent` can be used at a later time to announce that one or more capabilities have changed. Since the capabilities are dependent on the frontend and its UI, it might not be possible to change that at random times (or too late). Consequently, the `CapabilitiesEvent` has a hint characteristic: a frontend can only be expected to make a 'best effort' in honoring individual capabilities, but there are no guarantees.",
    "url": "https://code.visualstudio.com/updates/v1_21#_debug-adapter-protocol",
    "id": 590
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Language Server Protocol  \nVersion 3.6.0 of the [protocol specification](https://microsoft.github.io/language-server-protocol/specification) is released. The version specifies the following new requests and notifications:  \n* [Get Workspace Folders](https://microsoft.github.io/language-server-protocol/specification#workspace_workspaceFolders)\n* [DidChangeWorkspaceFolders Notification](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWorkspaceFolders)\n* [Get Configuration](https://microsoft.github.io/language-server-protocol/specification#workspace_configuration)\n* [Goto Type Definition](https://microsoft.github.io/language-server-protocol/specification#textDocument_typeDefinition)\n* [Goto Implementation](https://microsoft.github.io/language-server-protocol/specification#textDocument_implementation)\n* [Document Color](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentColor)\n* [Color Presentation](https://microsoft.github.io/language-server-protocol/specification#textDocument_colorPresentation)",
    "url": "https://code.visualstudio.com/updates/v1_21#_language-server-protocol",
    "id": 591
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## Engineering  \n### Faster VS Code start-up by using asar  \nWe are now packaging the core `node_modules` into an Electron Archive ([asar](https://github.com/electron/asar)) for faster start-ups by up to 5%. The file count on disk for a VS Code installation also gets reduced by approximately 25%.",
    "url": "https://code.visualstudio.com/updates/v1_21#_faster-vs-code-start-up-by-using-asar",
    "id": 592
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Duplicate issue detection  \nThe issue bot and the Issue Reporter UI run the new issue through duplicate detection and suggest candidates of existing issues.  \n![Duplicate Detection by Issue Bot](images/1_21/issue-bot-duplicate-detection.png)",
    "url": "https://code.visualstudio.com/updates/v1_21#_duplicate-issue-detection",
    "id": 593
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Issue bot configuration by development phase  \nThe issue bot changes its configuration depending on the current development phase (development, release, etc.). The change between development phases is set up ahead of time in the vscode repository at `.github/calendar.yml` ([example](https://github.com/microsoft/vscode/blob/main/.github/calendar.yml)).",
    "url": "https://code.visualstudio.com/updates/v1_21#_issue-bot-configuration-by-development-phase",
    "id": 594
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Editor Visible Ranges  \nNew proposed API has been added to support reading an editor's visible ranges:  \n```ts\nexport interface TextEditor {\n/**\n* The current visible ranges in the editor (vertically).\n* This accounts only for vertical scrolling, and not for horizontal scrolling.\n*/\nreadonly visibleRanges: Range[];\n}\n\nexport namespace window {\n/**\n* An [event](#Event) which fires when the selection in an editor has changed.\n*/\nexport const onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_21#_editor-visible-ranges",
    "id": 595
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Custom views: Reveal  \nA new proposed API was added to reveal and select an item in the view. You can access this API from `TreeView` object that is returned when you register the `TreeDataProvider`.  \n```typescript\nconst customView = vscode.window.registerTreeDataProvider<string>('customView', new CustomViewDataProvider<string>());\ncustomView.reveal('element');\n```  \nBy default the item to be revealed is selected. In order to not to select, set the option `select` to `false`. For example:  \n```js\ncustomView.reveal('element', {select: false});\n```  \nMore examples are [here](https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/src/ftpExplorer.fileSystemProvider.ts#L2).  \n**Note:** To access this API, the registered `TreeDataProvider` is required to implement the `getParent` method .",
    "url": "https://code.visualstudio.com/updates/v1_21#_custom-views:-reveal",
    "id": 596
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Webview API  \nThe new webview API proposal seeks to make it easier to create and manage webviews. It supersedes the `TextDocumentContentProvider` and `vscode.previewHtml` command approach currently supported. We're still working hard on this API and would love your feedback or suggestions.  \nThe new webview API focuses on three areas:  \n* Make webviews first class.\n* Enable persistence.\n* Improve security.  \n**First class**  \nA `webview` is an editor that renders HTML content. It is conceptually similar to an iframe. You create a new webview using `createWebview`:  \n```ts\nconst webview = vscode.window.createWebview(\nvscode.Uri.parse('cat-counter-ext:webview1'), // Identifier\n'Cat Counter', // Title\nvscode.ViewColumn.One, // Column to show in\n{} // Webview options\n);\n```  \nThis creates and shows the new webview in the given editor group. Set the contents of the webview using the `html` property:  \n```ts\nwebview.html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n</head>\n<body>\n<img src='https://media.giphy.com/media/vFKqnCdLPNOKc/giphy.gif'>\n</body>\n</html>\n`;\n```  \nPassing messages between a webview and your extension is now also much simpler. To post a message to a webview, call `postMessage` in your extension:  \n```ts\nwebview.postMessage({\ntype: 'change-cats',\nrequestedBreed: 'siberian'\n});\n```  \nAnd add a `message` handler inside the webview itself:  \n```js\nwindow.addEventListener('message', event => {\nswitch (event.data.type) {\ncase 'change-cats':\ndoChangeCats(event.data.requestedBreed);\nbreak;\n}\n});\n```  \nTo post a message from a webview to your extension, call `window.parent.postMessage` inside the webview:  \n```js\nwindow.parent.postMessage({\ntype: 'did-update-count',\ncount: 9\n}, '*');\n```  \nAnd add a `onDidReceiveMessage` event handler on the webview object in your extension:  \n```ts\nwebview.onDidReceiveMessage(e => {\nswitch (e.type) {\ncase 'did-update-count':\nthis.handleUpdateCatCount(e.count);\nbreak;\n}\n}, null, disposables)\n```  \n**Persistence**  \nBy default, a webview's context is destroyed when it is no longer visible, such as when moved to a background tab. The context is automatically recreated once the webview is shown again. If your extension's webview content cannot be quickly persisted and recreated, you can set the `retainContextWhenHidden` option. This preserves the webview's context, even when the webview editor is in the background. This option should only be used when absolutely necessary as webviews have a high memory overhead.  \nAlso, unlike the existing HTML previews, webviews do not reload when they are moved between editor groups.  \n**Improved security**  \nWebviews are also more secure than old HTML previews. By default, webviews do not allow scripts or command URIs, which can help protect your extension's users from content injection attacks. You can enable scripts by setting `enableScripts` and `enableCommandUris` in the `WebviewOptions` when the webview is created.  \nAlso, webviews now run in their own origin so they can no longer access `file:` resources directly. To load an extension resource, the webview must use the new `vscode-extension-resource:` URI scheme:  \n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"vscode-extension-resource:/Users/alice/.vscode-insiders/extensions/bierner.cat-counter-0.1.0/base.css\">\n```  \nTo load a resource from the user's workspace, use the `vscode-workspace-resource:` scheme:  \n```html\n<img src=\"vscode-workspace-resource:/Users/bob/projects/toast/images/welcome-bread-cat.gif\">\n```",
    "url": "https://code.visualstudio.com/updates/v1_21#_webview-api",
    "id": 597
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n## New Documentation  \n### Node.js deployment tutorials for Azure Functions  \nWe have a new [Deploy to Azure using Azure Functions](https://code.visualstudio.com/tutorials/functions-extension/getting-started?utm_source=VsCode&utm_medium=ReleaseNotes) tutorial for creating and deploying serverless [Azure Functions](https://azure.microsoft.com/services/functions/) using the [Azure Functions extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions).",
    "url": "https://code.visualstudio.com/updates/v1_21#_node.js-deployment-tutorials-for-azure-functions",
    "id": 598
  },
  {
    "content": "See what is new in the Visual Studio Code February 2018 Release (1.21)  \n### Refactoring topic  \nWe added a dedicated [Refactoring](https://code.visualstudio.com/docs/editor/refactoring) topic describing VS Code's support for refactorings such as **Extract Method**, **Extract Variable**, and **Rename Symbol**.",
    "url": "https://code.visualstudio.com/updates/v1_21#_refactoring-topic",
    "id": 599
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Editor  \n### Syntax aware folding  \nFolding ranges in HTML, JSON, Markdown, CSS, LESS and SCSS are now, by default, computed based on the language's syntax and no longer rely on well-formed indentation.  \n![Syntax folding](images/1_22/syntax-fold.gif)  \nSupport for TypeScript and JavaScript is also available, and can be enabled by the setting `\"typescript.experimental.syntaxFolding\": true`.  \nIf you prefer to switch back to indentation based folding for one (or all) of the languages above, use:  \n```json\n\"[html]\": {\n\"editor.foldingStrategy\": \"indentation\"\n},\n```  \n> **Tip**: See how this feature is used for [collapsing header regions in Markdown files](#fold-markdown-by-heading-level).  \nA new API for extensions is [proposed](#folding-provider-api) so that also other languages can provide their syntax aware folding providers.",
    "url": "https://code.visualstudio.com/updates/v1_22#_syntax-aware-folding",
    "id": 601
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Error and reference navigation across files  \nWith this release, navigating errors and warnings via `kb(editor.action.marker.nextInFiles)` (**Go to Next Problem**) takes all reported errors into account. Instead of looping inside just one file, it will take you to the next file with errors and back.  \n![Visit All Diagnostics](images/1_22/f8-navigation.gif)  \nSimilarly, there is a new command to navigate to reference search results. Trigger **Find All References** on a symbol and now use `kb(goToNextReference)` and `kb(goToPreviousReference)` to visit each reference. This is great to make edits in all places that reference a symbol because your fingers don't need to leave the keyboard.  \n![Visit All References](images/1_22/references-f4.gif)",
    "url": "https://code.visualstudio.com/updates/v1_22#_error-and-reference-navigation-across-files",
    "id": 602
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Hints in the editor  \nThe extension API now supports creating 'Hint' diagnostics. They aren't errors or warnings but suggestions how something could be made better, for example, by running a certain refactoring.  \nWe render hint diagnostics with an ellipsis `...` under the start of the word in question.  \n![Hint Diagnostics](images/1_22/sev-hint.png)  \nIt is a good practice for extension authors to always include a hint with a Code Action as hint diagnostics can help advertise the Code Actions. However, some users might not want to display hints in the editor so also include support for disabling them.  \n> **Tip**: In this release, we have added several hints for JavaScript/TypeScript [refactorings](#suggestion-code-actions-for-javascript-and-typescript).",
    "url": "https://code.visualstudio.com/updates/v1_22#_hints-in-the-editor",
    "id": 603
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Related information in errors and warnings  \nThe extension API now supports adding [related information](#support-related-diagnostics-information) to diagnostics and this is shown in all places where diagnostics are shown: on hover, the error Peek window, and **Problems Panel**.  \nIn the example below, you can see related information pointing out the first location where a twice assigned variable was used:  \n![Related Diagnostics Information](images/1_22/related-diagnostics-information.png)",
    "url": "https://code.visualstudio.com/updates/v1_22#_related-information-in-errors-and-warnings",
    "id": 604
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Easier way to open large files  \nPreviously, opening large files (~2GB+) in the editor would prompt you to relaunch from the command line with the flag `--max-memory=NEWSIZE`. To reduce this friction, when you try to open a file which requires more memory than the application is currently allowed to use, a new notification will appear that lets you quickly relaunch with more memory available to the application. The maximum memory available after relaunch is configurable with a new setting `files.maxMemoryForLargeFilesMB` and defaults to `4096` (4GB).  \n![Large File Notification](images/1_22/large-file-notification.png)",
    "url": "https://code.visualstudio.com/updates/v1_22#_easier-way-to-open-large-files",
    "id": 605
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Syntax highlighting optimization  \nWith this release, we will do syntax highlighting for the viewport immediately after a file is opened, based on the scope of the content in the viewport. This results in much faster colorization as you can see below when the user opens a new file with the **Go to Definition** command.  \n**Left**: VS Code 1.21 **Right**: VS Code 1.22  \n![Syntax highlighting optimization](images/1_22/syntaxhighlight-optimization.gif)",
    "url": "https://code.visualstudio.com/updates/v1_22#_syntax-highlighting-optimization",
    "id": 606
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Find and Replace improvements for large files  \nWe shipped a new text buffer implementation in last release (read our [blog post](https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation) for more information), and we continued the optimization for Find and Replace for large files.",
    "url": "https://code.visualstudio.com/updates/v1_22#_find-and-replace-improvements-for-large-files",
    "id": 607
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Configurable Format On Save timeout  \nVS Code can run formatters just before saving a file to disk and so speed matters because a slow extension could slow down saving. For that reason, VS Code is very strict about saving and cancels a format-on-save-request after 750ms. For some extensions, especially when dealing with large files, that's not enough time, and so we have added a new setting `\"editor.formatOnSaveTimeout\"` to configure the timeout. If a language extension knows that it will need more time for formatting, it can modify the timeout as a default [language specific setting](https://code.visualstudio.com/docs/getstarted/settings#_language-specific-editor-settings).  \nIn order to monitor saving, there is now a progress indicator on the Status Bar.  \n![Save Participant](images/1_22/save_part.gif)",
    "url": "https://code.visualstudio.com/updates/v1_22#_configurable-format-on-save-timeout",
    "id": 608
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### More snippet variables  \nThere are new snippet variables for referring to the current date and time. In addition to numbers, for example, 28/3/2018, you can now use names like '28 of March'. The new variables are:  \n* `${CURRENT_DAY_NAME}` - The name of the day ('Monday').\n* `${CURRENT_DAY_NAME_SHORT}` - The short name of the day ('Mon').\n* `${CURRENT_MONTH_NAME}` - The full name of the month ('July').\n* `${CURRENT_MONTH_NAME_SHORT}` - The short name of the month ('Jul').",
    "url": "https://code.visualstudio.com/updates/v1_22#_more-snippet-variables",
    "id": 609
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Emmet  \n**Wrap with Abbreviation preview**  \nWhen using either the **Emmet: Wrap with Abbreviation** or **Emmet: Wrap Individual Lines with Abbreviation** commands, you can now see a preview of what the wrapped text will look like.  \n![Wrap text with abbreviation preview](images/1_22/wrap.gif)  \n**Faster abbreviation expansion**  \nExpanding Emmet abbreviations in large CSS/SCSS/Less files is much faster now. This is achieved by parsing only a small region around the cursor instead of the complete file when trying to determine whether the current location is valid for expanding Emmet abbreviations.  \n**Smarter snippet matching**  \nEmmet abbreviations in stylesheets are fuzzy matched with [pre-defined snippets](https://github.com/emmetio/snippets/blob/v0.2.9/css.json) to give you the closest matched result. You can control the fuzzy matching accuracy by changing the `css.fuzzySearchMinScore` setting in `emmet.preferences`. `css.fuzzySearchMinScore` sets the minimum score a snippet needs to be considered a match. Increasing the score will result in fewer but more accurate matches. The default value is 0.3 and you can provide any value between 0 and 1.  \n```json\n\"emmet.preferences\": {\n\"css.fuzzySearchMinScore\": 0.3\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_22#_emmet",
    "id": 610
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Workbench  \n### Automatic background updates on Windows  \nWe've been rolling out automatic background updates for our Insider users on Windows for quite some time now. We've decided to enable this for everyone for the March release.  \nThe longest running update process is now able to run in the background, as you do your work. When it's ready, it should notify you in order to apply the final update, which is a much shorter step. This means you can keep working for longer, when updating to the latest VS Code!  \nYou can disable this feature using the `update.enableWindowsBackgroundUpdates` configuration setting, in case you'd like the old behavior back or if the new update procedure is somehow problematic on your machine.",
    "url": "https://code.visualstudio.com/updates/v1_22#_automatic-background-updates-on-windows",
    "id": 611
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Windows: Workaround for scroll lag  \nWe have received reports that scrolling on Windows on certain devices is very laggy and does not move smoothly (see [issue 13612](https://github.com/microsoft/vscode/issues/13612) for details). As a workaround for smooth scrolling, a new setting `window.smoothScrollingWorkaround` can be set to `true`. Since this is a workaround and can result in flicker whenever you restore the window from the taskbar, this setting is not enabled by default. You should see no other side effects if you enable the setting.",
    "url": "https://code.visualstudio.com/updates/v1_22#_windows:-workaround-for-scroll-lag",
    "id": 612
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Open empty window when launching VS Code without arguments  \nA new setting `window.openWithoutArgumentsInNewWindow` was introduced to control whether launching VS Code without arguments should focus the last active instance or open a new empty window. On Windows and Linux, this setting is enabled by default to better match platform behavior. When enabled, double clicking the VS Code icon from the desktop or running VS Code without arguments from the command line will open a new empty window. The same is true on Windows when middle-clicking or shift-clicking on the taskbar icon. Disable this behavior by explicitly setting `window.openWithoutArgumentsInNewWindow` to `off`.",
    "url": "https://code.visualstudio.com/updates/v1_22#_open-empty-window-when-launching-vs-code-without-arguments",
    "id": 613
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Save automatically when Search & Replace  \nYou no longer need to **Save All** and **Close All** when replacing all search results. Replace actions will now replace and save the changes.",
    "url": "https://code.visualstudio.com/updates/v1_22#_save-automatically-when-search-&-replace",
    "id": 614
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Search include/exclude patterns  \nThe boxes for include and exclude patterns in the Search view have been combined into a single box. The functionality is exactly the same, except that an exclude pattern must be prefixed with `!`. For example, `!*.js` will skip searching files that have a .js extension.  \n![Combined search patterns inputs](images/1_22/search-patterns.png)",
    "url": "https://code.visualstudio.com/updates/v1_22#_search-include/exclude-patterns",
    "id": 615
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Tree: Horizontal scrolling support  \nThere's a new global setting, `workbench.tree.horizontalScrolling`, which enables horizontal scrolling for several tree widgets across the workbench. Use it to provide better readability for wide tree elements such as deep file system hierarchies in the File Explorer.",
    "url": "https://code.visualstudio.com/updates/v1_22#_tree:-horizontal-scrolling-support",
    "id": 616
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Integrated Terminal  \n### Better support for multiline links  \nPaths and URLs that span multiple lines will now work as links.  \n![Multiline terminal links](images/1_22/terminal-links.png)  \nThere are still a few issues with the implementation, particularly when you resize the window. These will get fixed when we implement [reflow](https://github.com/microsoft/vscode/issues/23688).",
    "url": "https://code.visualstudio.com/updates/v1_22#_better-support-for-multiline-links",
    "id": 617
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Command tracking  \nThe terminal now features \"command tracking\", which attempts to guess when a command is run and allows easy navigation and selection between them.  \n![Terminal command tracking](images/1_22/terminal-command-tracking.gif)  \nThis feature has the following default keybindings on macOS:  \n* Scroll to previous command: `kbstyle(Cmd+Up)`\\*\n* Scroll to next command: `kbstyle(Cmd+Down)`\\*\n* Select to previous command: `kbstyle(Cmd+Shift+Up)`\n* Select to next command: `kbstyle(Cmd+Shift+Down)`  \n\\* **Note**: Scroll one line up/down was moved to `kbstyle(Cmd+Alt+PgUp)`/`kbstyle(Cmd+Alt+PgDown)`  \nOn Windows and Linux, you can configure [custom keybindings](https://code.visualstudio.com/docs/getstarted/keybindings) for these commands by adding this to your `keybindings.json` file:  \n```js\n{ \"key\": \"ctrl+down\",       \"command\": \"workbench.action.terminal.scrollToNextCommand\",\n\"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+up\",         \"command\": \"workbench.action.terminal.scrollToPreviousCommand\",\n\"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+shift+down\", \"command\": \"workbench.action.terminal.selectToNextCommand\",\n\"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+shift+up\",   \"command\": \"workbench.action.terminal.selectToPreviousCommand\",\n\"when\": \"terminalFocus\" },\n```",
    "url": "https://code.visualstudio.com/updates/v1_22#_command-tracking",
    "id": 618
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### More natural scrolling  \nScrolling inside terminal applications will now feel more natural as OS scrolling settings which define whether to scroll by pixel, line or page, are now taken into account.",
    "url": "https://code.visualstudio.com/updates/v1_22#_more-natural-scrolling",
    "id": 619
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Refocus terminal after using VS Code as a Git editor  \nWhen using VS Code as a Git editor and Git is triggered from the Integrated Terminal, after finishing the message, focus will now be returned to the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_22#_refocus-terminal-after-using-vs-code-as-a-git-editor",
    "id": 620
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Debugging  \n### Logpoints  \nThis milestone includes our first work towards **Logpoints**. A Logpoint is a variant of a breakpoint that does not \"break\" into the debugger but instead logs a message to the console. Logpoints are especially useful for injecting logging while debugging production servers which cannot be stopped.  \nA Logpoint is represented by a \"diamond\" shaped icon. Log messages are plain text but can include expressions to be evaluated within curly braces ('{}').  \n![Logpoints](images/1_22/log-points.gif)  \nJust like regular breakpoints, Logpoints can be enabled or disabled and can also be controlled by a condition and/or hit count.  \nLogpoints are currently supported by VS Code's built-in Node.js debugger, but we expect that other debug extensions will follow soon.",
    "url": "https://code.visualstudio.com/updates/v1_22#_logpoints",
    "id": 621
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### postDebugTask in launch.json  \nWe have added `postDebugTask` support in `launch.json`. This task is run after a debug session finishes. Similar to `preLaunchTask`, you can reference tasks in your `tasks.json` by a name. Here's an example of a launch configuration using a `postDebugTask`:  \n```json\n{\n\"name\": \"Attach to node server\",\n\"type\": \"node\",\n\"request\": \"attach\",\n\"port\": 8008,\n\"preLaunchTask\": \"Start Server\",\n\"postDebugTask\": \"Stop Server\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_22#_postdebugtask-in-launch.json",
    "id": 622
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Node debugging  \n**Automatically Attach to Node.js processes**  \nA first version of a new **Auto Attach** feature has been added to VS Code's Node.js debugger. If enabled, the Node debugger automatically attaches to Node.js processes that have been launched in debug mode from VS Code's Integrated Terminal.  \n![Auto Attach](images/1_22/auto-attach.gif)  \nTo enable the feature, either use the **Toggle Auto Attach** action or, if the Node debugger is already activated, use the **Auto Attach** Status Bar item.  \nWhether or not a process is in \"debug mode\" is determined by analyzing the program arguments. Currently, we detect the patterns `--inspect`, `--inspect-brk`, `--inspect-port`, `--debug`, `--debug-brk`, `--debug-port` (all optionally followed by a '=' and a port number).  \nPlease note that this feature does not (yet) work for terminal multiplexers like 'tmux' (where launched processes are not children of VS Code's integrated terminal).  \n**Improved Process Picker**  \nIn previous releases, a process picker for Node.js processes was only available as an \"interactive variable\" that could be used from within a launch configuration.  \nIn this release, we've made the picker available as an **Attach to Node Process** action that can be used without a launch configuration.  \nTo make the picker and the new action more useful, we now support attaching to Node.js processes via a debug port (in addition to attaching via the process id).  \nIn addition to Node.js processes, the picker now shows all programs that were launched with one of the various forms of `--debug` or `--inspect` arguments. This makes it possible to attach to Electron's or VS Code's helper processes.  \n![Node.js Process Picker](images/1_22/process-picker.png)  \nThe individual process items listed in the picker show the debug port and the detected protocol in addition to the process id.",
    "url": "https://code.visualstudio.com/updates/v1_22#_node-debugging",
    "id": 623
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Tasks  \n### Improved argument quoting  \nTasks have been updated to give users better control over how arguments and the command itself are quoted when executed in a shell like bash or PowerShell. Tasks of type `shell` now support providing the command and its argument separately. Below is an example of a task that list the directory of a folder named `folder with spaces` (observe the space in the name).  \n```json\n{\n\"label\": \"dir\",\n\"type\": \"shell\",\n\"command\": \"dir\",\n\"args\": [\n\"folder with spaces\"\n]\n}\n```  \nSince the shell tasks specifies the argument separately, VS Code knows that it should be passed as one argument to the 'dir' command and quotes the argument based on the shell used. For `cmd.exe`, VS Code uses `\"`, for PowerShell `'`, and for shells under Linux and macOS `'` as well. If you want to control how the argument is quoted, the argument can be a literal specifying the value and a quoting style. For example:  \n```json\n{\n\"label\": \"dir\",\n\"type\": \"shell\",\n\"command\": \"dir\",\n\"args\": [\n{\n\"value\": \"folder with spaces\",\n\"quoting\": \"escape\"\n}\n]\n}\n```  \nThis will escape the spaces in the argument using the shell's escape character which is backtick under PowerShell and `\\`under bash. If the shell used doesn't support character escaping, the strong quotes are used.  \nBesides escaping the following values are supported:  \n* **strong**: Uses the shell's strong quoting mechanism which suppresses all evaluations inside the string. Under PowerShell and for shells under Linux and macOS, single quotes are used (`'`). For cmd.exe, `\"` is used.\n* **weak**: Uses the shell's weak quoting mechanism which still evaluates expression inside the string (for example, environment variables). Under PowerShell and for shells under Linux and macOS, double quotes are used (`\"`). cmd.exe doesn't support weak quoting so VS Code uses `\"` as well.  \nIf the command itself contains spaces, VS Code will by default strong quote the command as well. As with arguments, the user can control the quoting of the command using the same literal style.  \nNote that the old style of having the whole command line in the `command` property is still supported.  \nThe same support has been added to the task API so task providers also have full control over quoting and escaping.",
    "url": "https://code.visualstudio.com/updates/v1_22#_improved-argument-quoting",
    "id": 624
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Languages  \n### Fold Markdown by heading level  \nYou can now fold Markdown documents by heading:  \n![Markdown folding](images/1_22/markdown-folding.gif)  \nFolding a header collapses all content and subheadings under that header.",
    "url": "https://code.visualstudio.com/updates/v1_22#_fold-markdown-by-heading-level",
    "id": 625
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### TypeScript 2.8  \nVS Code now ships with TypeScript 2.8. This update brings support for some cool [new language features](https://github.com/microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#typescript-28), as well as many important bug fixes and tooling improvements.",
    "url": "https://code.visualstudio.com/updates/v1_22#_typescript-2.8",
    "id": 626
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Improved quick suggestions in JSDoc  \nDid you know that VS Code provides IntelliSense for JSDoc types? This feature was added a number of releases ago but you may not have realized it because the IntelliSense only showed up if you manually invoked it. In VS Code 1.22, quick suggestions are now enabled by default in JSDoc types. Just start typing for IntelliSense to kick in:  \n![JSDoc suggestions](images/1_22/ts-jsdocs-quicksuggestions.gif)",
    "url": "https://code.visualstudio.com/updates/v1_22#_improved-quick-suggestions-in-jsdoc",
    "id": 627
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Suggestion Code Actions for JavaScript and TypeScript  \nWe've also improved discoverability of JavaScript and TypeScript suggestion Code Actions. These are proposed changes that can help you quickly improve or clean up your source code. They are shown using the lightbulb widget but unlike Quick Fixes, they do not address a specific error or warning in your source code. Example suggestion Code Actions include: convert ES5 class to ES6 class and convert CommonJS module to ES6 module.  \nSuggestion Code Action are now indicated by a `...` in the editor:  \n![Triple dots in the editor indicate a suggested Code Action](images/1_22/ts-suggestion-indicator.png)  \nMove the cursor over the `...` and click on the lightbulb or press `kb(editor.action.quickFix)` to display available Code Actions:  \n![Hovering over a suggestion indicator](images/1_22/ts-suggestion-hover.png)  \n![Clicking on the lightbulb](images/1_22/ts-suggestion-click.png)  \n![After applying the Code Action](images/1_22/ts-suggestion-change.png)  \nWe plan to continue adding additional suggestions. Let us know if you have any that you would like to see.  \nSuggestion Code Actions are enabled by default in JavaScript and TypeScript. You can disable them by setting: `\"typescript.suggestionActions.enabled\": false` or `\"javascript.suggestionActions.enabled\": false`",
    "url": "https://code.visualstudio.com/updates/v1_22#_suggestion-code-actions-for-javascript-and-typescript",
    "id": 628
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### CSS path completion  \nIn addition to HTML, path completion is now available for CSS too:  \n![CSS Path Completion](images/1_22/css-path-completion.png)",
    "url": "https://code.visualstudio.com/updates/v1_22#_css-path-completion",
    "id": 629
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n## Extension Authoring  \n### Show long running operations as notifications with cancellation support  \nWe added a new API to show long running operations in the Notification Center with optional cancellation support. The benefits of showing long running operations here are:  \n* Multiple operations can report progress at the same time.\n* You can show operation progress.\n* The user has the option to cancel the operation.  \n![long running task](images/1_22/long-running.gif)  \nCall `window.withProgress` with the new progress location `ProgressLocation.Notification`. Set `cancellable` to `true` to show a cancel button and check for cancellation on the provided `CancellationToken` in the callback. To display progress, leverage the `increment` value when reporting progress. See the [progress sample](https://github.com/microsoft/vscode-extension-samples/tree/main/progress-sample) for an extension using this new API.",
    "url": "https://code.visualstudio.com/updates/v1_22#_show-long-running-operations-as-notifications-with-cancellation-support",
    "id": 630
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Support related diagnostics information  \nWe added an API to provide related information for diagnostics - [`DiagnosticRelatedInformation`](https://github.com/microsoft/vscode/blob/b3200907913bea2b65a25b5e19b037739ca00119/src/vs/vscode.d.ts#L3710). Imagine the case of a compiler error because a variable name is re-used within a scope. The actual error could be \"Duplicate definition of symbol 'Foo' not allowed\" and it would point to the illegal declaration. By including related information with the diagnostic, you could also point to the first declaration of the symbol 'Foo', making the error is easier to understand and fix.",
    "url": "https://code.visualstudio.com/updates/v1_22#_support-related-diagnostics-information",
    "id": 631
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Disposing a CancellationTokenSource no longer sets the token to cancelled state  \nCalling `dispose()` on a `CancellationTokenSource` previously would set the token to be cancelled and trigger the cancellation event. We changed the behavior in order to be able to dispose of tokens without cancelling them. If you rely on the cancellation of the token, call the `cancel()` method.",
    "url": "https://code.visualstudio.com/updates/v1_22#_disposing-a-cancellationtokensource-no-longer-sets-the-token-to-cancelled-state",
    "id": 632
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Simple editors are not passed to extensions  \nInputs that use the editor like the debug REPL input are no longer passed to extensions as editors. This means that both the `onDidChangeActiveTextEditor` will not trigger when user focuses the debug REPL, and that the `onDidChangeTextDocument` will also not fire. The reason behind this change is that the REPL input uses the editor as an implementation detail and extension should not be notified of this since it is not a \"real editor\".",
    "url": "https://code.visualstudio.com/updates/v1_22#_simple-editors-are-not-passed-to-extensions",
    "id": 633
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Custom views  \n**TreeView**  \nYou can now perform operations on your custom view using the new `TreeView` API. This can be accessed using the new API `createTreeView` by providing the `viewId` and `TreeDataProvider`.  \n```typescript\nconst customView = vscode.window.createTreeView<string>('customView', { treeDataProvider: new CustomViewDataProvider<string>() });\n```  \n**Note:** The existing `registerTreeDataProvider` API is still supported to contribute data to the view. You can use either `registerTreeDataProvider` or `createTreeView` to contribute `TreeDataProvider` but not both.  \n**Reveal**  \nAt present, `TreeView` exposes a `reveal` method to reveal and select an item in the view.  \n```typescript\ncustomView.reveal('element');\n```  \nBy default, the item to be revealed is selected. In order to not select the item, set the `select` option to `false`. For example:  \n```typescript\ncustomView.reveal('element', { select: false });\n```  \nYou can find more `TreeView` examples [here](https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/src/ftpExplorer.fileSystemProvider.ts#L254).  \n**Note:** To enable the `reveal` API, the contributed `TreeDataProvider` must implement the `getParent` method.",
    "url": "https://code.visualstudio.com/updates/v1_22#_custom-views",
    "id": 634
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### New Theme Colors  \nThere are two colors for new 'Hint' diagnostics:  \n* `editorHint.foreground`: Foreground color of hints in the editor.\n* `editorHint.border`: Border color of hints in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_22#_new-theme-colors",
    "id": 635
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Editor visible ranges  \nThe editor visible ranges API is now promoted to Stable.  \n```ts\nexport interface TextEditor {\n/**\n* The current visible ranges in the editor (vertically).\n* This accounts only for vertical scrolling, and not for horizontal scrolling.\n*/\nreadonly visibleRanges: Range[];\n}\n\nexport namespace window {\n/**\n* An [event](#Event) which fires when the selection in an editor has changed.\n*/\nexport const onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_22#_editor-visible-ranges",
    "id": 636
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Debug Adapter Protocol  \n**Logpoint support**  \nThe newly introduced Logpoints are surfaced in the Debug Adapter Protocol as a new attribute `logMessage` on the `SourceBreakpoint` and as a new capability `supportsLogPoints`. A debug adapter that supports Logpoints returns `true` for the `supportsLogPoints` capability and does not 'break' (stop) for a non-empty `logMessage` attribute but logs the message instead. Expressions within curly braces ('{...}') are evaluated and the result replaces the '{...}' in the log message.  \n**New `clientName` attribute for `initialize` request**  \nThe frontend can use a new optional attribute `clientName` on the `initialize` request to pass the human readable name of the frontend to the debug adapter.  \n**New `terminateThreads` request**  \nA new `terminateThreads` request can be used by front ends to terminate one or more threads. A corresponding `supportsTerminateThreadsRequest` capability signifies that the debug adapter supports the request.  \n**New `setExpression`request**  \nThe new `setExpression` request can be used to assign a value to an assignable expression (aka \"l-value\"). A corresponding `supportsSetExpression` capability signifies that the debug adapter supports the request.  \n**New `preserveFocusHint`on `stopped` event**  \nA true-ish `preserveFocusHint` on the `stopped` event suggests to the front end that the stopped event should not change the focus.",
    "url": "https://code.visualstudio.com/updates/v1_22#_debug-adapter-protocol",
    "id": 637
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Multi-Select QuickPick  \nWe have added an option to the QuickPick API that makes return a list of picked items with a new UI that allows the user to pick any number of items:  \n![Multi-select QuickPick](images/1_22/multi-select-quickpick.png)  \nSee the `QuickPickOptions.canPickMany` option and the `QuickPickItem.picked` flag on how to use these with the existing `window.showQuickPick` API function.",
    "url": "https://code.visualstudio.com/updates/v1_22#_multi-select-quickpick",
    "id": 638
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Task API  \nThere is now a new task API which supports:  \n* Querying for all existing tasks in the system.\n* Executing tasks programmatically.\n* Terminate a running task.\n* Listen on task start and end events.  \nThe proposed API can be found [here](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts#L653)  \nThe new API also supports executing tasks without previously returning them via a task provider. The example below executes a simple `echo` task.  \n```typescript\nlet task = new vscode.Task(\n{\ntype: \"myCustomTask\"\n},\n\"echo\",\n\"myExtension\",\nnew vscode.ShellExecution('echo', ['Hello World'])\n);\nvscode.workspace.executeTask(task);\n```",
    "url": "https://code.visualstudio.com/updates/v1_22#_task-api",
    "id": 639
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Organize imports for JavaScript and TypeScript  \nThe new **Organize Imports** command (`kb(typescript.organizeImports)`) removes unused imports and sorts the remaining imports:  \n![Organize Imports](images/1_22/ts-organize-imports.gif)  \nThe command works in ES6 modules for both JavaScript and TypeScript.",
    "url": "https://code.visualstudio.com/updates/v1_22#_organize-imports-for-javascript-and-typescript",
    "id": 640
  },
  {
    "content": "See what is new in the Visual Studio Code March 2018 Release (1.22)  \n### Electron 2.0 exploration  \nDuring this milestone, we explored bundling Electron 2.0.0 into VS Code. This is a major Electron release and comes with Chrome 61 and Node.js 8.x (a major leap forward compared to our current version that has Chrome 58 and Node.js 7.x). We plan to push out the update to our Insiders users early in April to gather additional feedback. If you are interested in helping out, make sure to install VS Code [Insiders](https://code.visualstudio.com/insiders).",
    "url": "https://code.visualstudio.com/updates/v1_22#_electron-2.0-exploration",
    "id": 641
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Run Code Actions on save  \nThe new `editor.codeActionsOnSave` setting lets you configure a set of Code Actions that are run when a file is saved. For example, for JavaScript, TypeScript, and other extensions that contribute an organize imports Code Action, you can enable organize imports on save by [setting](https://code.visualstudio.com/docs/getstarted/settings):  \n```json\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n```  \nYou can also enable or disable which Code Actions are run on save per language using a [language specific setting](https://code.visualstudio.com/docs/getstarted/settings#_language-specific-editor-settings). The following settings enable organize imports on save for TypeScript files only:  \n```json\n\"[typescript]\": {\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n},\n\"[typescriptreact]\": {\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_23#_run-code-actions-on-save",
    "id": 643
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Column selection using middle mouse button  \nIn VS Code, column (box) selection can be added by holding `Shift` and `Alt` and then using the left mouse button. Now the middle mouse button can also be used to create a column selection:  \n![Editor column selection](images/1_23/editor-column-select.gif)  \n> Note: When setting `editor.multiCursorModifier` to `ctrlCmd`, the modifiers are `Shift` and `Ctrl` on Windows and `Shift` and `Cmd` on macOS.",
    "url": "https://code.visualstudio.com/updates/v1_23#_column-selection-using-middle-mouse-button",
    "id": 644
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Improved handling of UTF-16 encoded files  \nVS Code always supported the UTF-16 encoding for files but required a BOM (byte order mark) to properly detect this encoding. If VS Code didn't find a BOM, the file would not be opened and the user saw an information message.  \nWith this release, we added a new action to this message to open the file as text in the editor:  \n![Open binary file message](images/1_23/binary.png)  \nOnce opened, you can then change the encoding to try to decode the text.  \nIn addition, VS Code now uses a heuristic that tries to detect UTF-16 without a BOM automatically. This heuristic should work for all UTF-16 files that contain only ASCII characters.",
    "url": "https://code.visualstudio.com/updates/v1_23#_improved-handling-of-utf-16-encoded-files",
    "id": 645
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Improved editor positioning  \nIn certain cases when changing the editor scroll height (such as resizing a wrapped editor, using mouse wheel zooming, or modifying a CodeLens), the editor would attempt to maintain the centered line in the viewport. VS Code now maintains the first line in the viewport, providing a more stable appearance.  \n![Improved editor stability](images/1_23/editor-stability.gif)",
    "url": "https://code.visualstudio.com/updates/v1_23#_improved-editor-positioning",
    "id": 646
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## Workbench  \n### Problems view filtering  \nYou can now include or exclude files in the Problems view using filters.  \n* Use glob patterns in the filter input box to include/exclude files. An exclude pattern must be prefixed with `!`. For example, `!*.js` will remove all files that have a .js extension.\n* There is a **Filter using Files Exclude Setting** button to remove all files matching your `files.exclude` setting.  \nThe short video below shows filtering the project `out` directory based on the `files.exclude` setting and ignoring all `node_modules` by typing `!**/node_modules/**` in the filter input box:  \n![Filter problems](images/1_23/problems_filter.gif)",
    "url": "https://code.visualstudio.com/updates/v1_23#_problems-view-filtering",
    "id": 647
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### NPM script running  \nWith the setting `npm.enableScriptExplorer`, you can enable an explorer that shows the scripts defined in your workspace.  \n![NPM script explorer](images/1_23/script-explorer.png)  \nThe explorer supports:  \n* Open a script inside a `package.json` file or the `scripts` section when the `package.json` file is selected. This is the default action when selecting a script.\n* Run a script as a [task](https://code.visualstudio.com/docs/editor/tasks) with the output shown in the Integrated Terminal.\n* Debug a script. To launch the node debugger, the script needs to define a node debug option like `--inspect-brk` ([see also](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-support-for-npm-and-other-tools)).  \nUse the `npm.exclude` setting to exclude scripts in `package.json` files contained in particular folders.",
    "url": "https://code.visualstudio.com/updates/v1_23#_npm-script-running",
    "id": 648
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Git clone improvements  \nThere have been several improvements to the Git clone workflow. When running the **Git: Clone** command:  \n* A native dialog is used to pick the repository location.\n* The new notification progress API is used, improving the operation status reporting.\n* VS Code will prompt you whether you'd like to add the cloned repository to your workspace or open it directly.  \nThe Git extension also adopted the new proposed API to handle [system-wide URIs](#protocol-handler-api) and invokes Git clone on specific URIs. Here's an example URI which clones `https://github.com/microsoft/vscode-vsce.git`:  \n```bash\nvscode://vscode.git/clone?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-vsce.git\n```  \nIf you'd like to try this out:  \n* Windows: In a Command Prompt, type: `explorer \"vscode://vscode.git/clone?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-vsce.git\"`.\n* macOS: In a shell, type: `open vscode://vscode.git/clone?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-vsce.git`.",
    "url": "https://code.visualstudio.com/updates/v1_23#_git-clone-improvements",
    "id": 649
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Copy results from search context menu  \nThe search results tree context menu includes three new options: **Copy**, **Copy Path**, and **Copy All**. This was a highly \ud83d\udc4d'd request which will make it easier to share or export your search results.  \n![Copy search](images/1_23/copy-search.gif)",
    "url": "https://code.visualstudio.com/updates/v1_23#_copy-results-from-search-context-menu",
    "id": 650
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Return of the separate search include and exclude input boxes  \nLast month, we merged the include and exclude input boxes in the Search view in an attempt to simplify and streamline it, while also saving a little vertical space. However, we heard from [many of you](https://github.com/microsoft/vscode/issues/46315) that this didn't fit with the way you were using the Search view. Eventually, we decided to simply revert the change and so with this release, we are back to having separate include/exclude boxes as we had before 1.22. Note that you **don't** need to use `!` on patterns in the exclude box.  \n![include exclude](images/1_23/search-include-exclude.png)",
    "url": "https://code.visualstudio.com/updates/v1_23#_return-of-the-separate-search-include-and-exclude-input-boxes",
    "id": 651
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Custom Activity Bar views  \nExtension authors can now add their own [view containers](#contributions-to-the-activity-bar) to the Activity Bar. Depending on your installed extensions, after an update you may see UI such as custom explorers move from the File Explorer to a new custom view container. For example, below you can see that the explorers from the [Azure App Service](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice) and [Azure Databases](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb) extensions have moved to a dedicated Azure view.  \n![Azure view in the Activity Bar](images/1_23/azure-view.png)",
    "url": "https://code.visualstudio.com/updates/v1_23#_custom-activity-bar-views",
    "id": 652
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### See the running Visual Studio Code processes  \nUse the **Developer: Open Process Explorer** command or **Help** > **Open Process Explorer** menu item to open a new window that contains continuously updating information about running VS Code processes. Processes are listed with their CPU and memory usage, PID, and friendly name, and can be killed from a context menu that appears on right-clicking.  \n![Process Explorer](images/1_23/process-explorer.gif)",
    "url": "https://code.visualstudio.com/updates/v1_23#_see-the-running-visual-studio-code-processes",
    "id": 653
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## Integrated Terminal  \n### Multi-root support for terminal splitting  \nYou will now be able to select the folder to split the terminal into when inside a multi-root workspace. The old behavior can be re-enabled by keybinding the `workbench.action.terminal.splitInActiveWorkspace` command.",
    "url": "https://code.visualstudio.com/updates/v1_23#_multi-root-support-for-terminal-splitting",
    "id": 654
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## Languages  \n### CSS region folding  \nYou can now use `/* #region */` and `/* #endregion */` to mark a region as foldable in CSS/SCSS/Less. In SCSS/Less, you can also use `// #region` and `// #endregion` as folding markers.  \n![Improved CSS Folding](images/1_23/css-folding.gif)",
    "url": "https://code.visualstudio.com/updates/v1_23#_css-region-folding",
    "id": 655
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Improved CSS support for new properties  \nPreviously, VS Code would show an \"Unknown Property\" error for some experimental CSS properties, such as `backdrop-filter`:  \n![CSS Unknown Property](images/1_23/css-unkown-property.png)  \nYou would either have to turn off CSS linting completely or endure this error, even if you are using CSS frameworks such as [PostCSS](https://postcss.org) that allows you to use experimental CSS properties.  \nIn this release, with data sourced from [Mozilla Developer Network](https://github.com/mdn/data), VS Code now identifies 87 new CSS properties. If you can find a CSS property on MDN, VS Code should recognize it.  \nFurthermore, with data from MDN, VS Code now provides enhanced completions in CSS/SCSS/Less, showing the syntax and status value of each CSS properties.  \n![CSS Support powered by MDN data](images/1_23/css-mdn.gif)  \nAlthough there is no built-in support for validating CSS property values yet, the [CSSTree validator](https://marketplace.visualstudio.com/items?itemName=smelukov.vscode-csstree) extension also uses data from MDN and offers linting for each property value based on its [value definition syntax](https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax):  \n![CSSTree](images/1_23/css-csstree.gif)",
    "url": "https://code.visualstudio.com/updates/v1_23#_improved-css-support-for-new-properties",
    "id": 656
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Markdown workspace symbol search  \nMarkdown now has support for workspace symbol search. After opening a Markdown file for the first time, you can use (`kb(workbench.action.showAllSymbols)`) to search through the headers of all Markdown files in the current workspace:  \n![Markdown workspace symbol in the VS Code docs repo](images/1_23/markdown-workspace-symbol-search.png)",
    "url": "https://code.visualstudio.com/updates/v1_23#_markdown-workspace-symbol-search",
    "id": 657
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Persistent Markdown previews  \nMarkdown previews are now automatically restored when you reopen VS Code:  \n![A Markdown preview automatically being reopened when VS Code restarts](images/1_23/markdown-restore.gif)  \nPreviously previews had to be reopened whenever you restarted VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_23#_persistent-markdown-previews",
    "id": 658
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### TypeScript 2.8.3  \nVS Code now ships with TypeScript 2.8.3. This release fixes a [number of important bugs](https://github.com/microsoft/TypeScript/milestone/68?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_23#_typescript-2.8.3",
    "id": 659
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### JavaScript and TypeScript Organize Imports  \nThe JavaScript and TypeScript organize imports feature is now out of preview. Run **Organize Imports** (`kb(editor.action.organizeImports)`) to quickly remove unused imports and sort the remaining imports in your JavaScript and TypeScript source code.  \nYou can now also configure organize imports to be run on save using the new [`editor.codeActionsOnSave` setting](#run-code-actions-on-save). Here are the settings to enable organize imports on save for TypeScript files:  \n```json\n\"[typescript]\": {\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n},\n\"[typescriptreact]\": {\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_23#_javascript-and-typescript-organize-imports",
    "id": 660
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## Debugging  \n### Logpoint improvements  \nLogpoints were introduced in the last release and we've improved their ease of use and usefulness:  \n* IntelliSense (smart completion) has been added for expressions embedded in log messages and conditional breakpoints.\n* When using Logpoints in Node.js debugging, structured objects embedded in the log message appear as expandable object in the Debug Console:  \n![IntelliSense for Logpoint expressions](images/1_23/logpoints.gif)  \n* Logpoints in Node.js debugging now show their source location in the Debug Console:  \n![Logpoint location](images/1_23/logpoint-location.png)  \n* Since Logpoints and breakpoints can be easily deleted by clicking on their icon in the editor's gutter, you can accidentally lose a log message or a breakpoint condition. To prevent this, VS Code now prompts when a breakpoint with a condition or log message is deleted by clicking in the gutter. The alert gives you the option to disable the breakpoint instead of deleting it.\n* Last but not least, we've added a **New Breakpoint** > **Logpoint...** action to the **Debug** menu.",
    "url": "https://code.visualstudio.com/updates/v1_23#_logpoint-improvements",
    "id": 661
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## Extension Authoring  \n### Contributions to the Activity Bar  \nAs more and more extensions are creating custom views and the majority of them are contributed to the File Explorer, we noticed the Explorer was getting cluttered. To scale up, VS Code now provides a way to contribute to the Activity Bar. As an example, there is now a **Test** contribution to the Activity Bar. Extensions can now make their own contributions.  \n**Test view container**  \nA new Test contribution is now provided in the Activity Bar for the extensions to contribute Test related views. This Test contribution is empty and hidden by default and is shown whenever views are contributed to it. The example shows how the `mocha` custom view is contributed to the **Test** activity in the Activity Bar.  \n```json\n\"contributes\": {\n\"views\": {\n\"test\": [\n{\n\"id\": \"mocha\",\n\"name\": \"mocha\"\n}\n]\n}\n}\n```  \n![Test views container](images/1_23/test-views-container.png)  \n**Custom view containers**  \nAn extension can now define additional activities in the Activity Bar using the contribution point `viewsContainers`.  \n```json\n\"contributes\": {\n\"viewsContainers\": {\n\"activitybar\": [\n{\n\"id\": \"package-explorer\",\n\"title\": \"Package Explorer\",\n\"icon\": \"resources/package-explorer.svg\"\n}\n]\n},\n\"views\": {\n\"package-explorer\": [\n{\n\"id\": \"package-dependencies\",\n\"name\": \"Dependencies\"\n},\n{\n\"id\": \"package-outline\",\n\"name\": \"Outline\"\n}\n]\n}\n}\n```  \n![Custom views container](images/1_23/custom-views-container.png)  \n**Icon specifications**  \n* `Size:` Icons are 24x24 centered on a 50x40 square.\n* `Color:` Icons should use a single monochrome color.\n* `Format:` It is recommended that icons be in SVG, though any image file type is accepted.\n* `States:` All icons inherit the following state styles:  \n|State|Opacity\n|-|-|\n|Default|60%\n|Hover|100%\n|Active|100%  \nA command is registered to show each registered view container. In the Package Explorer example above, it would be **View: Show Package Explorer**. You can also find all view containers listed when you run the command **View: Open View...**.  \n![Open View](images/1_23/open-view.png)  \n**NOTE:** It is recommended that you group related views into a single view container instead of creating a view container for each view.",
    "url": "https://code.visualstudio.com/updates/v1_23#_contributions-to-the-activity-bar",
    "id": 662
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Custom views in Source Control  \nYou can now contribute Source Control Management (SCM) related custom views into the Source Control view container in the Activity Bar. You can show, hide and re-order these views just like in the Explorer.  \n```json\n\"contributes\": {\n\"views\": {\n\"scm\": [\n{\n\"id\": \"git-compare\",\n\"name\": \"Compare\"\n}\n]\n}\n}\n```  \n![SCM Custom views](images/1_23/custom-view-scm.png)",
    "url": "https://code.visualstudio.com/updates/v1_23#_custom-views-in-source-control",
    "id": 663
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### FileSystem Providers  \nExtensions can now serve files and folders from arbitrary sources, like ftp-servers, and VS Code will handle them just like regular files. To do so, use the `FileSystemProvider` interface which an extension associates with a URI scheme, like `ftp`. With that interface, the editor can discover and manage files and folders (create, delete, read, and write).  \n![Files and Folders from a filesystem provider](images/1_23/fsp.png)  \nVS Code can also read and modify configuration files (`settings.json`, `tasks.json`, `launch.json`) served by FileSystem Providers.  \n**Language Identifiers and Document Selectors**  \nThe addition of FileSystem Providers means that not all files live on disk and extensions should be aware of this. The short, but **important**, message is that not all documents live on disk and if your extension relies on disk-access, you **must** check the [scheme](https://github.com/microsoft/vscode/blob/470d92886a599302aa16e84ea8330817a7faef6f/src/vs/vscode.d.ts#L91) first.  \nTo raise awareness, we have added an information message which shows when you register a language feature using just a language identifier, not a document filter. For more details, visit the [Document Selector](https://code.visualstudio.com/docs/extensionAPI/document-selectors) topic.  \nLast, there is a sample extension which you can use for testing. It implements a filesystem that keeps everything in memory, nothing is on disk, and you can test your language features against that. Get the extension [here](https://marketplace.visualstudio.com/items?itemName=jrieken.vscode-memfs).  \n**Watch out: TextDocument.isUntitled**  \nDue to the addition of FileSystem Providers, we have adjusted the semantics of `TextDocument.isUntitled` to be `true` only for newly created documents (using the `untitled` scheme). Before, all documents not from disk were treated as untitled. This change might alter the behavior of your extension, especially if it assumes that documents that aren't untitled are stored on disk.",
    "url": "https://code.visualstudio.com/updates/v1_23#_filesystem-providers",
    "id": 664
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Reading Diagnostics  \nThere is new API to read diagnostics and to be notified when diagnostics change, see `languages.getDiagnostics` and `languages.onDidChangeDiagnostics`. For instance, an SCM extension can now check that there are no errors before sharing changes with the team.",
    "url": "https://code.visualstudio.com/updates/v1_23#_reading-diagnostics",
    "id": 665
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Refined RenameProvider  \nWe have refined the `RenameProvider` API and it can now, optionally, implement a new function called `prepareRename`. With that function, the provider can help VS Code resolve and validate the symbol to be renamed.",
    "url": "https://code.visualstudio.com/updates/v1_23#_refined-renameprovider",
    "id": 666
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Include offset based information in document change events  \n`TextDocumentContentChangeEvent` has a new property, `rangeOffset`, which, together with `rangeLength`, allows extensions to use `(offset,length)` coordinates to keep track of text document changes.",
    "url": "https://code.visualstudio.com/updates/v1_23#_include-offset-based-information-in-document-change-events",
    "id": 667
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Source Code Action kinds  \n`CodeActionKind.Source` identifies Code Actions that apply to the entire file. Organize imports is a good example of a `Source` Code Action since it can be triggered from any position in a file.  \n`Source` Code Actions do not show up in the normal Quick Fix lightbulb menu. They must be explicitly requested using the `editor.action.sourceAction` command. `Source` Code Actions also show up in the new **Source Actions** context menu.",
    "url": "https://code.visualstudio.com/updates/v1_23#_source-code-action-kinds",
    "id": 668
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Organize imports Code Actions  \nBuilding on `Source` Code Actions, the newly added `CodeActionKind.SourceOrganizeImports` identifies an organize imports Code Action. These actions can be triggered using `editor.action.organizeImports` and have a standard keyboard shortcut: `kb(editor.action.organizeImports)`.  \nIf your extension already implements organize imports, we highly recommend that you migrate it to use `CodeActionKind.SourceOrganizeImports` so that users have a more consistent experience across languages.",
    "url": "https://code.visualstudio.com/updates/v1_23#_organize-imports-code-actions",
    "id": 669
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### CodeActionProviderMetadata  \n`registerCodeActionsProvider` now takes an optional `CodeActionProviderMetadata` argument which lets extensions tell VS Code about the kind of Code Actions that a `CodeActionProvider` will provide. This information is used by VS Code to enable the new **Refactor** and **Source Action** context menus. The **Refactor** context menu, for example, will only be enabled when a `CodeActionProvider` is registered with `CodeActionProviderMetadata` indicating that it that provide will return `refactor.*` Code Actions.",
    "url": "https://code.visualstudio.com/updates/v1_23#_codeactionprovidermetadata",
    "id": 670
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Webview API  \nThe webview API allows extensions to create fully customizable views within VS Code. For example, the built-in Markdown extension uses webviews to render Markdown previews. Webviews can also be used to build complex user interfaces beyond what VS Code's native APIs support.  \n![A webview showing a cat gif](images/1_23/webview.png)  \nA [new extension authoring page](https://code.visualstudio.com/docs/extensions/webview) covers the webview API. You can also find an example webview API extension [here](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-sample). We look forward to see how extension authors put this powerful new API to use.",
    "url": "https://code.visualstudio.com/updates/v1_23#_webview-api",
    "id": 671
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Application scope settings  \nIf you want your settings to be applied at application level and not get overridden at a window or resource level, you can do that now by using `application` scope.  \n```json\n\"configuration\": {\n\"properties\": {\n\"git.path\": {\n\"type\": \"string\",\n\"description\": \"Path to the git executable\",\n\"scope\": \"application\"\n}\n}\n}\n```  \n**Note:** Deprecated `isExecutable` property in favor of using `application` scope since it was meant for the same purpose.",
    "url": "https://code.visualstudio.com/updates/v1_23#_application-scope-settings",
    "id": 672
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Task API  \nThe task API received further polish around task querying and execution from an extension. The newly supported API is:  \n* `fetchTasks` takes a filter to only query for a subset of tasks.\n* `taskExecutions` support fetching the execution objects for all running tasks.\n* `TaskExecution` objects provided via `executeTask`, `taskExecutions` or one of the events can be compared using `===`.  \nThe API is still in the proposed state.",
    "url": "https://code.visualstudio.com/updates/v1_23#_task-api",
    "id": 673
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Protocol Handler API  \nThe Protocol Handler API lets extensions handle system-wide URIs. This functionality is useful for cross-application integrations, since it lets other applications send URIs to specific extensions.  \n```ts\nexport interface ProtocolHandler {\nhandleUri(uri: Uri): void;\n}\n\nexport namespace window {\n\n/**\n* Registers a protocol handler capable of handling system-wide URIs.\n*/\nexport function registerProtocolHandler(handler: ProtocolHandler): Disposable;\n}\n```  \nHere's an example Protocol Handler registration:  \n```ts\nfunction activate() {\nregisterProtocolHandler({\nhandleUri(uri: Uri) {\nconsole.log('Received URI', uri.toString());\n}\n});\n}\n```  \nFor this API, there is a strict relationship between URI authorities and extensions which will handle them: the URI authority must be the extension's ID (`publisher.name`). Take the following URI, for example:  \n```\nvscode://vscode.git/clone?url=foobar\n\\____/   \\________/ \\___/ \\_________/\n|           |        |       |\nscheme    authority    path   query\n```  \nThis URI's authority is `vscode.git`, so VS Code will forward it to the `vscode.git` extension, given that it has properly registered a Protocol Handler.  \nSince it can happen that URIs are open before extensions are even registered, a new `onUri` activation event was also introduced. This lets your extension be activated whenever a URI directed towards it is opened.  \n**Note:** URI handling is [not yet supported in Linux](https://github.com/microsoft/vscode/issues/48528).",
    "url": "https://code.visualstudio.com/updates/v1_23#_protocol-handler-api",
    "id": 674
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### Folding Provider API  \nThe folding range provider proposed in release 1.22 was updated and is now an official API. Language extensions can now provide syntax aware folding ranges.  \n```ts\n/**\n* Register a folding range provider.\n*\n* Multiple providers can be registered for a language. In that case providers are asked in\n* parallel and the results are merged.\n* If multiple folding ranges start at the same position, only the range of the first registered provider is used.\n* If a folding range overlaps with an other range that has a smaller position, it is also ignored.\n*\n* A failing provider (rejected promise or exception) will\n* not cause a failure of the whole operation.\n*\n* @param selector A selector that defines the documents this provider is applicable to.\n* @param provider A folding range provider.\n* @return A [disposable](#Disposable) that unregisters this provider when being disposed.\n*/\nexport function registerFoldingRangeProvider(selector: DocumentSelector, provider: FoldingRangeProvider): Disposable;\n```",
    "url": "https://code.visualstudio.com/updates/v1_23#_folding-provider-api",
    "id": 675
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## Engineering  \n### Improved Smoke Test stability  \nVS Code has always had a smoke test, which is used to keep quality under strict control. We had automated the smoke test yet failed to make it stable. This milestone we worked on improving the stability and performance of the smoke test. More details can be found in [pull request #47471](https://github.com/microsoft/vscode/pull/47471).",
    "url": "https://code.visualstudio.com/updates/v1_23#_improved-smoke-test-stability",
    "id": 676
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n## New Documentation  \n### Website deployment tutorial using Azure Storage  \nWe have a new [Deploy static website to Azure](https://code.visualstudio.com/tutorials/static-website/getting-started?utm_source=VsCode&utm_medium=ReleaseNotes) tutorial for creating and deploying a static website using [Azure Storage](https://learn.microsoft.com/azure/storage/).",
    "url": "https://code.visualstudio.com/updates/v1_23#_website-deployment-tutorial-using-azure-storage",
    "id": 677
  },
  {
    "content": "See what is new in the Visual Studio Code April 2018 Release (1.23)  \n### VS Code blog posts  \nThere were two recent posts on the VS Code [blog](https://code.visualstudio.com/blogs):  \n* [Bing-powered settings search in VS Code](https://code.visualstudio.com/blogs/2018/04/25/bing-settings-search) - Improving settings search by using Bing's natural language services.\n* [Text Buffer Reimplementation](https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation) - Read about the development of our optimized text buffer implementation.",
    "url": "https://code.visualstudio.com/updates/v1_23#_vs-code-blog-posts",
    "id": 678
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Replace term history in Search view  \nYou can now navigate to your previous replace terms in the Search View.  \n* `kbstyle(Alt+Up)` navigates backward in the history. Corresponding command is `history.showPrevious`.\n* `kbstyle(Alt+Down)` navigates forward in the history. Corresponding command is `history.showNext`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_replace-term-history-in-search-view",
    "id": 680
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### NPM Script Explorer improvements  \nSome users want to run an npm script on single click from the Explorer and this is now supported by setting `npm.scriptExplorerAction` to \"run\". It is also now possible to run a script using the inline actions shown when hovering over a script in the tree. Finally, you can run `npm install` from the context menu when a `package.json` file is selected.",
    "url": "https://code.visualstudio.com/updates/v1_24#_npm-script-explorer-improvements",
    "id": 681
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n## Editor  \n### Font Zoom commands  \nFont zoom commands have been added and they increase or decrease the font size of the editor while the rest of VS Code UI is left as-is. This feature is very handy for presentations and pair-programming.  \n![font zoom](images/1_24/font-zoom.png)  \nUse the following keybindings to replace the default global zoom actions:  \non macOS:  \n```json\n{ \"key\": \"cmd+numpad_add\",      \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"shift+cmd+=\",         \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"cmd+=\",               \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"cmd+numpad_subtract\", \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"shift+cmd+-\",         \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"cmd+-\",               \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"cmd+numpad0\",         \"command\": \"editor.action.fontZoomReset\" },\n{ \"key\": \"cmd+0\",               \"command\": \"editor.action.fontZoomReset\" },\n```  \non Windows and Linux:  \n```json\n{ \"key\": \"ctrl+numpad_add\",      \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"shift+ctrl+=\",         \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"ctrl+=\",               \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"ctrl+numpad_subtract\", \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"shift+ctrl+-\",         \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"ctrl+-\",               \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"ctrl+numpad0\",         \"command\": \"editor.action.fontZoomReset\" },\n{ \"key\": \"ctrl+0\",               \"command\": \"editor.action.fontZoomReset\" },\n```",
    "url": "https://code.visualstudio.com/updates/v1_24#_font-zoom-commands",
    "id": 682
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Syntax highlighting for deleted lines  \nVS Code now provides syntax highlighting for deleted lines in the inline diff editor:  \n![Inline Diff Syntax Highlighting](images/1_24/inline-diff-syntax.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_syntax-highlighting-for-deleted-lines",
    "id": 683
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### F8 stays in Editor  \nLast milestone, we changed the `F8` keybinding **Go to Next Problem** to visit all errors and warnings in a workspace. That meant you'd leave the current editor and navigate to other files instead of returning to the top of the current file. Not everyone liked this behavior and so we have added commands to support both:  \n* **Go to Next/Previous Problem *in Files*** is the default, which visits all problems, and is bound to `F8/Shift+F8`.\n* **Go to Next/Previous Problem** which loops inside the current editor.",
    "url": "https://code.visualstudio.com/updates/v1_24#_f8-stays-in-editor",
    "id": 684
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n## Integrated Terminal  \n### Fallback DOM renderer  \nBack in the 1.17 release, the Integrated Terminal changed to [rendering using canvas](https://code.visualstudio.com/blogs/2017/10/03/terminal-renderer) in order to boost performance. While this was great for the majority of users, some environments had issues with this at either the hardware and OS levels and rendering ended up taking longer. VS Code now measures the average time it takes to render a frame and if it takes too long, you will get a notification to switch to the new fallback DOM renderer:  \n![DOM renderer notification](images/1_24/terminal-dom-renderer.png)  \nThis new renderer uses the DOM like the original terminal, so if your environment has issues rendering with canvas, this should provide a more stable experience. You can also turn on the DOM renderer manually with this setting:  \n```js\n{\n\"terminal.integrated.rendererType\": \"dom\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_24#_fallback-dom-renderer",
    "id": 685
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Italic support  \nThe terminal now supports the italicized xterm character attribute:  \n![Italic text within terminal](images/1_24/terminal-italic.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_italic-support",
    "id": 686
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Letter spacing support  \nA new setting allows increasing terminal letter spacing by an integer pixel value:  \n```js\n{\n\"terminal.integrated.letterSpacing\": 2\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_24#_letter-spacing-support",
    "id": 687
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Better CLI support in WSL  \nRunning the `code` command line inside the Windows Subsystem for Linux (WSL) will now suppress output and return to the prompt.",
    "url": "https://code.visualstudio.com/updates/v1_24#_better-cli-support-in-wsl",
    "id": 688
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Navigation to split terminals using the `term` Quick Open menu  \nIt's now possible to navigate to specific split terminals via the `term` Quick Open menu:  \n![terminal Quick Open menu supports splits](images/1_24/terminal-quick-open.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_navigation-to-split-terminals-using-the-term-quick-open-menu",
    "id": 689
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n## Debugging  \n### Switch to Debug view on break  \nIt is now possible to automatically switch to the Debug view when a breakpoint is hit. Set the `debug.openDebug` setting to the new value `openOnDebugBreak`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_switch-to-debug-view-on-break",
    "id": 690
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### New icon for \"Continue\" action  \nTo better distinguish between the **Start Debugging** and **Continue** actions in the Debug toolbar, we have introduced a new icon for **Continue** that better aligns with the debug icons.  \n![debug continue](images/1_24/continue.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_new-icon-for-continue-action",
    "id": 691
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Renamed \"column breakpoints\" to \"inline breakpoints\"  \n\"Column breakpoints\" were renamed to \"inline breakpoints\" because the community is much more familiar with the term \"inline breakpoint\". Consequently, we are deprecating the old `editor.debug.action.toggleColumnBreakpoint` command in favor of a new `editor.debug.action.toggleInlineBreakpoint` command.",
    "url": "https://code.visualstudio.com/updates/v1_24#_renamed-column-breakpoints-to-inline-breakpoints",
    "id": 692
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Call stack shows stack frame's source path  \nThe CALL STACK view now shows the path segments to distinguish sources with the same name easily. A common scenario is having to debug multiple stack frames all named `module.js`.  \n![callstack](images/1_24/callstack.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_call-stack-shows-stack-frame's-source-path",
    "id": 693
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Go to next or previous breakpoint  \nYou can now step through all breakpoints using the **Go to Next Breakpoint** and **Go to Previous Breakpoint** commands. The commands step through the breakpoints in different files in the same order as they appear in the BREAKPOINTS view.",
    "url": "https://code.visualstudio.com/updates/v1_24#_go-to-next-or-previous-breakpoint",
    "id": 694
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### IntelliSense for predefined variables  \n* **IntelliSense for variables:** We now suggest predefined variables as completions inside string values for both `tasks.json` and `launch.json` configuration files. This should make it easier to use and discover the ever-growing list of predefined variables.  \n![variables](images/1_24/variables.png)  \n* **Variable substitution for keys:** Previously, we would substitute predefined variables only for values inside `launch.json` and `tasks.json` configurations. With this release, variables are now substituted in keys as well. More about predefined variables can be found [here](https://code.visualstudio.com/docs/editor/variables-reference).",
    "url": "https://code.visualstudio.com/updates/v1_24#_intellisense-for-predefined-variables",
    "id": 695
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n## Languages  \n### TypeScript 2.9  \nVS Code now ships with TypeScript 2.9. This update brings new language features such as [import() types](https://devblogs.microsoft.com/typescript/announcing-typescript-2-9/#import-types), [json imports](https://devblogs.microsoft.com/typescript/announcing-typescript-2-9/#json-imports), and many improvements to JSDoc. It also brings some great new tooling support and fixes a number of bugs.  \nYou can read more about what's new in TS 2.9 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-2-9/#json-imports).",
    "url": "https://code.visualstudio.com/updates/v1_24#_typescript-2.9",
    "id": 696
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Update import paths when a file is moved or renamed  \nVS Code can now automatically update import paths when a JavaScript or TypeScript file is moved or renamed:  \n![Updating imports as file are moved and renamed](images/1_24/ts-update-imports.gif)  \nThis feature requires TypeScript 2.9. By default, VS Code will prompt you if we can update paths. You can control the prompting behavior with the `javascript.updateImportsOnFileMove.enabled` and `typescript.updateImportsOnFileMove.enabled` settings.  \nValid values are:  \n* `\"prompt\"` -The default. Asks if paths should be updated.\n* `\"always\"` -Always automatically update paths.\n* `\"never\"` -Do not update paths automatically and do not prompt.  \nTo make sure all paths are updated as expected, make sure your project includes a [`jsconfig.json`](https://code.visualstudio.com/Docs/languages/javascript#_javascript-projects-jsconfigjson) or [`tsconfig.json`](https://code.visualstudio.com/docs/languages/typescript#_tsconfigjson).",
    "url": "https://code.visualstudio.com/updates/v1_24#_update-import-paths-when-a-file-is-moved-or-renamed",
    "id": 697
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Highlight unused variables and imports  \nUnused variables, parameters, and imports are now greyed out in JavaScript and TypeScript:  \n![Many greyed out unused variables](images/1_24/ts-grey-pre.png)  \nUse a Quick Fix to remove them and clean up your code automatically:  \n![Quick fix all action](images/1_24/ts-grey-fix-all-action.png)  \nAfter cleanup:  \n![Source code after the Quick Fix](images/1_24/ts-grey-post.png)  \nThis can be disabled by setting `\"javascript.showUnused\": false` and `\"typescript.showUnused\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_highlight-unused-variables-and-imports",
    "id": 698
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Move to new file refactoring  \nA new **Move to a new file** refactoring for JavaScript and TypeScript lets you quickly move classes and functions to their own file:  \nBefore:  \n![Trigger the move the new file refactoring](images/1_24/ts-move-to-file-pre.png)  \nAfter:  \n![After applying the move to new file refactoring](images/1_24/ts-move-to-file-post.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_move-to-new-file-refactoring",
    "id": 699
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Improved JS/TS auto suggest  \nIntelliSense is now shown automatically in a few more places. These include:  \n* After typing a `<` inside jsx code.\n* After typing a `/` to close a jsx tag.\n* After typing a `'` or `\"` for a string literal type in TypeScript.",
    "url": "https://code.visualstudio.com/updates/v1_24#_improved-js/ts-auto-suggest",
    "id": 700
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Generate getter/setter refactoring  \nA new **Generate 'get' and 'set' accessors** refactoring lets you quickly encapsulate a field in JavaScript and TypeScript:  \nBefore:  \n![Triggering generate getter and setter](images/1_24/ts-generate-get-set-pre.png)  \nAfter:  \n![After generating the getter and setter](images/1_24/ts-generate-get-set-post.png)",
    "url": "https://code.visualstudio.com/updates/v1_24#_generate-getter/setter-refactoring",
    "id": 701
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Syntax aware folding enabled by default for JS/TS  \nSyntax aware folding is now enabled by default for JavaScript and TypeScript. A preview of this feature first shipped with VS Code 1.22 but there were a few bugs that we wanted to fix before turning it on for everyone.  \nThe new syntax aware folding should match the old indentation based folding in most cases, however indentation based folding sometimes creates more folding ranges that you may be used to. To revert back to using the old indentation based folding, set:  \n```json\n\"[javascript]\": {\n\"editor.foldingStrategy\": \"indentation\"\n},\n\"[javascriptreact]\": {\n\"editor.foldingStrategy\": \"indentation\"\n},\n\"[typescript]\": {\n\"editor.foldingStrategy\": \"indentation\"\n},\n\"[typescriptreact]\": {\n\"editor.foldingStrategy\": \"indentation\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_24#_syntax-aware-folding-enabled-by-default-for-js/ts",
    "id": 702
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Preferences for auto imports and generated code  \nYou can now explicitly specify the quote and path styles that VS Code uses for auto imports and other generated JavaScript and TypeScript code.  \nThe new `javascript.preferences.quoteStyle` and `typescript.preferences.quoteStyle` settings specify the type of quotes to use.  \nValid values are:  \n* `\"single\"` quotes.\n* `\"double\"` quotes.\n* `\"auto\"` to infer quote type from existing imports.  \nThe `javascript.preferences.importModuleSpecifier` and `typescript.preferences.importModuleSpecifier` settings specify the type of path to use for imports.  \nValid values are:  \n* `\"relative\"` to the file location.\n* `\"non-relative\"` based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.\n* `\"auto\"` to infer the shortest path type.  \nThese new preferences require TypeScript 2.9+.",
    "url": "https://code.visualstudio.com/updates/v1_24#_preferences-for-auto-imports-and-generated-code",
    "id": 703
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Import folding  \nBlocks of import statements are now foldable in JavaScript and TypeScript:  \n![Folding a block of import statements](images/1_24/ts-import-folding.gif)  \nThis feature requires TypeScript 2.9+. You must also have semantic folding enabled (it is enabled by default). Make sure you have `\"editor.foldingStrategy\"` set to `\"auto\"` and that you have not set `\"typescript.experimental.syntaxFolding\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_import-folding",
    "id": 704
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### SCSS @-keywords completion  \nCompletion for SCSS's [@-Rules and Directives](https://sass-lang.com/documentation/file.SASS_REFERENCE.html#directives) has been added.  \n![SCSS @-keywords completion](images/1_24/scss-at.gif)",
    "url": "https://code.visualstudio.com/updates/v1_24#_scss-@-keywords-completion",
    "id": 705
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Editor grid layout  \nDuring this milestone, we began work to implement an editor grid layout feature to allow opening editors vertically and horizontally without limits:  \n![Grid Editor Layout](images/1_24/grid.gif)  \nThis feature will be available in our [Insiders release](https://code.visualstudio.com/insiders/) in the beginning of June. Subscribe to [issue 14909](https://github.com/microsoft/vscode/issues/14909) to receive a notification when this happens.",
    "url": "https://code.visualstudio.com/updates/v1_24#_editor-grid-layout",
    "id": 706
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### New Settings editor  \nIn this milestone, we began experimenting with a GUI for editing settings, which has been a popular request for a long time. This is an early preview, but if you'd like to try it out, you can open it with the **Preferences: Open Settings (Preview)** command. We would like any feedback you have - you can leave it on [this GitHub issue](https://github.com/microsoft/vscode/issues/50249).  \n![New Settings Editor](images/1_24/settings-editor.gif)",
    "url": "https://code.visualstudio.com/updates/v1_24#_new-settings-editor",
    "id": 707
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Debug toolbar location  \nIn this milestone, we started to work on alternative locations for the Debug toolbar. As a first step, we have introduced a new setting `debug.toolBarLocation` and made an initial attempt at a \"docked\" Debug toolbar (in addition to the old \"floating\" toolbar):  \n![debug toolbar](images/1_24/debug_toolbar.gif)  \nWhen docked, the debug actions appear at the top of the Debug view when a debug session starts (and they hide the debug configuration dropdown menu).  \nWe are still experimenting with this new toolbar design, so you can expect more changes in the next milestones.  \nSince the existing `debug.hideActionBar` setting can be easily subsumed under a value `hidden` with the new `debug.toolBarLocation`, we are **deprecating** `debug.hideActionBar`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_debug-toolbar-location",
    "id": 708
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n## Extension Authoring  \n### Custom views  \n**Access to selected elements**  \nYou can get the list of currently selected elements in the tree view using the following newly added API to `TreeView`  \n```typescript\n/**\n* Currently selected elements.\n*/\nreadonly selection: ReadonlyArray<T>;\n```  \n**Expand/Collapse listeners**  \nThe following events were added to the `TreeView` when an element is collapsed or expanded.  \n```typescript\n/**\n* Event that is fired when an element is expanded\n*/\nreadonly onDidExpandElement: Event<TreeViewExpansionEvent<T>>;\n\n/**\n* Event that is fired when an element is collapsed\n*/\nreadonly onDidCollapseElement: Event<TreeViewExpansionEvent<T>>;\n\nexport interface TreeViewExpansionEvent<T> {\n\n/**\n* Element that is expanded or collapsed.\n*/\nelement: T;\n\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_24#_custom-views",
    "id": 709
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Task API  \nThe task API graduated and is now available for all extension authors. It moved from the `vscode.workspace` to the new `vscode.tasks` namespace. We're leaving the old API in `workspace` for one additional milestone so that extension authors have time to move to the new API. In addition, events were added to signal the start and end of the underlying process bound to a task.",
    "url": "https://code.visualstudio.com/updates/v1_24#_task-api",
    "id": 710
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### New context key `callStackItemType` for call stack elements  \nA `callStackItemType` context key has been introduced to control what contextual commands appear for focused items in the CALL STACK view. The following values are available:  \n* `'stackframe'`: When a stack frame is focused in the CALL STACK view.\n* `'thread'`: When a thread is focused in the CALL STACK view. Threads are shown only for multi-thread debugging.\n* `'session'`: When a debug session is focused in the CALL STACK view. Debug sessions are only shown if more than one session is active.",
    "url": "https://code.visualstudio.com/updates/v1_24#_new-context-key-callstackitemtype-for-call-stack-elements",
    "id": 711
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### New Theme colors  \nThere are two theme colors for showing a border at the top of a tab:  \n* `tab.activeBorderTop`: Border to the top of an active tab.\n* `tab.unfocusedActiveBorderTop`: Border to the top of an active tab in an unfocused group.\n* `list.errorForeground`: The color of items in the Explorer with errors.\n* `list.warningForeground`: The color of items in the Explorer with warnings.",
    "url": "https://code.visualstudio.com/updates/v1_24#_new-theme-colors",
    "id": 712
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Default argument for keybinding command invocation  \nIt used to be that commands invoked from a keybinding which did not specify any argument list [would receive an empty object `{}` as the only argument](https://github.com/microsoft/vscode/issues/42851), when invoked. In the upcoming release, that argument will be `null` instead.",
    "url": "https://code.visualstudio.com/updates/v1_24#_default-argument-for-keybinding-command-invocation",
    "id": 713
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### CodeActionProvider Selection  \nThe `CodeActionProvider.provideCodeAction` method's `range` parameter is now a `Selection | range`. The provided value will always be the user's selection if there is an active editor.",
    "url": "https://code.visualstudio.com/updates/v1_24#_codeactionprovider-selection",
    "id": 714
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Webview preserveFocus  \nThe new `preserveFocus` focus flag on `Webview.reveal` allows extensions to show a webview without focusing it. This can be used to open a webview with documentation or other non-interactive content to the side of the current editor.",
    "url": "https://code.visualstudio.com/updates/v1_24#_webview-preservefocus",
    "id": 715
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Reload webviews inside the webview Dev Tools  \nYou can now press `ctrl+r` or `cmd+r` when focused on a webview's Developer Tools to reload that webview. Keep in mind that this will only reload the webview itself. The `html` value of webview is not changed.",
    "url": "https://code.visualstudio.com/updates/v1_24#_reload-webviews-inside-the-webview-dev-tools",
    "id": 716
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Access Theme colors in webviews  \nExtension authors can now access all standard VS Code theme colors inside webviews using CSS variables. These variable names are prefixed with `vscode` and replace the `.` with `-`. For example `editor.foreground` becomes `var(--vscode-editor-foreground)`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_access-theme-colors-in-webviews",
    "id": 717
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Tasks and extension authoring  \nWe've noticed that some extensions written in TypeScript are still using the older task version `0.1.0` to compile TypeScript to JavaScript. Task version `2.0.0` has been out for a while and there is a [guide](https://code.visualstudio.com/docs/extensions/developing-extensions#_compiling-typescript) describing how to update an extension from using task version `0.1.0` to version `2.0.0`.",
    "url": "https://code.visualstudio.com/updates/v1_24#_tasks-and-extension-authoring",
    "id": 718
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Search Provider API  \nThe SearchProvider API lets extensions implement file search and text search in a workspace. It will be especially useful alongside a FileSystemProvider.  \n```ts\nexport namespace workspace {\nexport function registerSearchProvider(scheme: string, provider: SearchProvider): Disposable;\n}\n\nexport interface SearchProvider {\nprovideFileSearchResults?(options: FileSearchOptions, progress: Progress<string>, token: CancellationToken): Thenable<void>;\nprovideTextSearchResults?(query: TextSearchQuery, options: TextSearchOptions, progress: Progress<TextSearchResult>, token: CancellationToken): Thenable<void>;\n}\n```  \nTo learn more, have a look at the [searchProviderExample](https://github.com/microsoft/vscode-extension-samples/blob/roblou/searchProviderExample/fsprovider-sample/src/searchProvider.ts).",
    "url": "https://code.visualstudio.com/updates/v1_24#_search-provider-api",
    "id": 719
  },
  {
    "content": "See what is new in the Visual Studio Code May 2018 Release (1.24)  \n### Working with MongoDB  \nWe've added a new [Working with MongoDB](https://code.visualstudio.com/docs/azure/mongodb) topic for managing MongoDB databases in VS Code with the [Azure Databases](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb) extension.",
    "url": "https://code.visualstudio.com/updates/v1_24#_working-with-mongodb",
    "id": 721
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Outline view  \nThe Outline view is out of preview and now enabled by default. It is a separate section in the bottom of the File Explorer. When expanded, it will show the symbol tree of the currently active editor.  \nThe Outline view has different **Sort By** modes, optional cursor tracking, and supports the usual open gestures. It also includes an input box which finds or filters symbols as you type. Errors and warnings are also shown in the Outline view, letting you see at a glance a problem's location.  \n![Outline view](images/1_25/outline.png)  \nThere are several Outline view settings which allow you to enable/disable icons and control the errors and warnings display (all enabled by default):  \n* `outline.icons` - Toggle rendering outline elements with icons.\n* `outline.problems.enabled` - Show errors and warnings on outline elements.\n* `outline.problems.badges` - Toggle using badges for errors and warnings.\n* `outline.problems.colors` - Toggle using colors for errors and warnings.  \nThere is also a [new API](#document-symbols) for extensions authors.",
    "url": "https://code.visualstudio.com/updates/v1_25#_outline-view",
    "id": 723
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Portable Mode  \nVS Code now supports Portable Mode, where all data created and maintained by VS Code is located near the installation. This lets you easily move a VS Code setup across environments, for example through a USB drive or file share. Portable Mode is supported on the ZIP download for Windows and Linux, as well as the regular Application download for macOS. [Click here](https://code.visualstudio.com/docs/editor/portable) to learn more.",
    "url": "https://code.visualstudio.com/updates/v1_25#_portable-mode",
    "id": 724
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Drop files and folders into empty files explorer  \nIt is now possible to drop files, folders, and VS Code workspace files into an empty Explorer to open them.  \n![empty drop](images/1_25/drop.gif)",
    "url": "https://code.visualstudio.com/updates/v1_25#_drop-files-and-folders-into-empty-files-explorer",
    "id": 725
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### History navigation  \nNavigating input history is now more natural and consistent across VS Code. You can use the <kbd>UpArrow</kbd> (`history.showPrevious`) and <kbd>DownArrow</kbd> (`history.showNext`) keys to navigate the input boxes in the Search and Problems views and the Find widgets in the Editor, Terminal, and Web views.  \nFor simplicity and consistency, we changed the default keybindings for navigating among input boxes from <kbd>UpArrow</kbd> and <kbd>DownArrow</kbd> to <kbd>Ctrl+UpArrow</kbd> (or <kbd>Cmd+UpArrow</kbd> on macOS) and <kbd>Ctrl+DownArrow</kbd> (or <kbd>Cmd+DownArrow</kbd> on macOS) keys respectively. You can always go back to previous behavior by updating `kb(search.focus.previousInputBox)`, `kb(search.focus.nextInputBox)` and `kb(search.action.focusSearchFromResults)` keybindings.  \n**Note**: We also removed all existing [18 History Navigation Commands](#history-navigation-commands) and unified them into two commands `history.showPrevious` and `history.showNext`.",
    "url": "https://code.visualstudio.com/updates/v1_25#_history-navigation",
    "id": 726
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## Editor  \n### Hover display options  \nSome users prefer to have no hover suggestions covering text in the editor and the editor hover can now be customized with three additional settings. Use `editor.hover.enabled` to toggle the editor hover, use `editor.hover.delay` to customize the time until the hover is shown, and use `editor.hover.sticky` to change if the hover should remain visible when moving the mouse over it.",
    "url": "https://code.visualstudio.com/updates/v1_25#_hover-display-options",
    "id": 727
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Sub-word support  \nWe have new commands for sub-word navigation and sub-word deletion. These commands will stop at camel case positions and at underscores (`_`).  \n![editor sub-word navigation](images/1_25/editor-sub-word-navigation.gif)  \nHere is an example for how you can bind them:  \n```json\n{ \"key\": \"ctrl+alt+right\",          \"command\": \"cursorWordPartRight\",\n\"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+shift+alt+right\",    \"command\": \"cursorWordPartRightSelect\",\n\"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+alt+left\",           \"command\": \"cursorWordPartStartLeft\",\n\"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+shift+alt+left\",      \"command\": \"cursorWordPartStartLeftSelect\",\n\"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+alt+backspace\",       \"command\": \"deleteWordPartLeft\",\n\"when\": \"textInputFocus && !editorReadonly\" },\n{ \"key\": \"ctrl+shift+alt+backspace\", \"command\": \"deleteWordPartRight\",\n\"when\": \"textInputFocus && !editorReadonly\" },\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_sub-word-support",
    "id": 728
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Suggestion selections  \nLanguage IntelliSense providers often know which suggestions are best and with this version of VS Code, they can now preselect suggestions. There is new [API](#preselected-completion-items) for preselected suggestions and when available, the editor will select that suggestion rather than the first in the list.  \n![suggestion selection](images/1_25/suggest_preselect.png)",
    "url": "https://code.visualstudio.com/updates/v1_25#_suggestion-selections",
    "id": 729
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Snippet placeholder transformations  \nSnippets finally support placeholder transformations. Placeholder transformations are like variable transformations but more dynamic. A transformation is applied when switching from one placeholder to the next and this is the grammar rule for them: __${__*int*__/__*regex*__/__*format_string*__/__*opts*__}__.  \nBelow is a sample that replaces \"Hello World\" with its German counterpart:  \n```json\n\"HelloWorld\": {\n\"prefix\": \"say_hello\",\n\"body\": \"${1} ${2} -> ${1/Hello/Hallo/} ${2/World/Welt/}\"\n}\n```  \n![snippet placeholder transformation](images/1_25/snippet_placeholder_transform.gif)  \nRefer to the [snippet grammar](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_grammar) for more details and how to unleash the full potential of transformations.",
    "url": "https://code.visualstudio.com/updates/v1_25#_snippet-placeholder-transformations",
    "id": 730
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## Integrated Terminal  \n### Performance Improvements  \nThe Integrated Terminal's parser was re-written from the ground up for enhanced ANSI compliance and boosting the rate at which incoming data is processed by approximately 30%. This came in as an upstream community contribution to [xterm.js](https://github.com/xtermjs/xterm.js/pull/1399).",
    "url": "https://code.visualstudio.com/updates/v1_25#_performance-improvements",
    "id": 731
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Bold text bright color setting  \nThe terminal currently converts all bold text to use the bright color variant. This is a little inconsistent across terminal emulators and is mostly around for legacy reasons. You can now turn this automatic conversion off to allow the use of non-bright colors for bold text.  \n```json\n{\n\"terminal.integrated.drawBoldTextInBrightColors\": false\n}\n```  \nThis came in as an upstream community contribution to [xterm.js](https://github.com/xtermjs/xterm.js/pull/1391).",
    "url": "https://code.visualstudio.com/updates/v1_25#_bold-text-bright-color-setting",
    "id": 732
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## Debugging  \n### Floating debug toolbar  \nIn the previous milestone, we have introduced a new setting to dock the debug toolbar in the Debug view (`\"debug.toolBarLocation\": \"docked\"`). In this milestone, we reviewed user feedback and tried to improve the floating toolbar behavior as well (`\"debug.toolBarLocation\": \"floating\"`).  \nThe [consensus](https://github.com/microsoft/vscode/issues/52490) from feedback was that the toolbar should always be visible (independent from which view is active) and that it should not hide anything (for instance the editor tabs). Therefore, we've \"unchained\" the floating toolbar by allowing it to be dragged to the editor area. This should help users that heavily use editor tabs but also want to see the debug toolbar at all times.  \n![debug toolbar](images/1_25/debugtoolbar.gif)  \nSince the existing `debug.hideActionBar` setting is handled by the value `hidden` with the `debug.toolBarLocation` setting, we are now **removing** `debug.hideActionBar`.",
    "url": "https://code.visualstudio.com/updates/v1_25#_floating-debug-toolbar",
    "id": 733
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## Languages  \n### TypeScript 2.9.2  \nVS Code now ships with TypeScript 2.9.2. This minor release fixes a number of bugs and improves stability. You can read about the complete set of changes [here](https://github.com/microsoft/TypeScript/milestone/73?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_25#_typescript-2.9.2",
    "id": 734
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Update import paths on folder rename  \nLast release brought automatic import path updating when you move or rename a JavaScript or TypeScript file. This feature now also works when you move or rename a directory. Again, by default, VS Code will prompt you if we can update paths. You can control the prompting behavior with the `javascript.updateImportsOnFileMove.enabled` and `typescript.updateImportsOnFileMove.enabled` settings.  \nValid values are:  \n* `\"prompt\"` -The default. Asks if paths should be updated.\n* `\"always\"` -Always automatically update paths.\n* `\"never\"` -Do not update paths automatically and do not prompt.",
    "url": "https://code.visualstudio.com/updates/v1_25#_update-import-paths-on-folder-rename",
    "id": 735
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Hierarchical Markdown document symbols  \nThe built-in Markdown support uses the new `DocumentSymbol` API to make sure Markdown headers are properly nested in the Outline view.  \n![The Outline view for a Markdown document](images/1_25/md-outline.png)",
    "url": "https://code.visualstudio.com/updates/v1_25#_hierarchical-markdown-document-symbols",
    "id": 736
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### New CSS pseudo selectors and pseudo elements from MDN  \nIn the April release, we started [sourcing data](https://code.visualstudio.com/updates/v1_23#_improved-css-support-for-new-properties) from Mozilla Developer Network for up-to-date CSS/SCSS/Less support. In this release, we added the following pseudo selectors / elements:  \n* `:defined | :dir | :focus-visible | :focus-within | :placeholder-shown`\n* `::-moz-range-progress | ::-moz-range-thumb | ::-moz-range-track | ::-webkit-progress-inner-value | ::grammar-error | ::placeholder`  \n![CSS Pseudo Selectors and Elements](images/1_25/css-pseudo-selectors-elements.png)",
    "url": "https://code.visualstudio.com/updates/v1_25#_new-css-pseudo-selectors-and-pseudo-elements-from-mdn",
    "id": 737
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Improved accuracy of Browser Compatibility Data  \nThanks to [mdn/browser-compat-data](https://github.com/mdn/browser-compat-data), we brought this section from MDN to our CSS/SCSS/Less completions:  \n![CSS justify-items](images/1_25/css-justify-items.png)  \nThe `justify-items` property, alongside many other CSS properties for CSS Grid Layout, has been supported in Edge since version 16. By sourcing data from MDN, VS Code keeps browser compatibility data for CSS features up-to-date.",
    "url": "https://code.visualstudio.com/updates/v1_25#_improved-accuracy-of-browser-compatibility-data",
    "id": 738
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Graceful handling of unknown At-Rules  \nPeople who are using CSS pre-processors may use custom at-rules that are compiled to valid CSS at build time. Previously, VS Code could not parse or handle such at-rules. In this release, we have better support for at-rules, so that they:  \n* Receive correct syntax highlighting as they still abide by CSS syntax.\n* No longer generate errors at incorrect locations.\n* Generate correct errors that can be controlled by `css.lint.unknownAtRules`.  \n![CSS Unknown At-Rules](images/1_25/css-unknown-atrules.png)",
    "url": "https://code.visualstudio.com/updates/v1_25#_graceful-handling-of-unknown-at-rules",
    "id": 739
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## Extensions  \n### New default view for Extensions view  \nUntil now, the default view for the Extensions view contained a section for **Installed** extensions and another for **Recommended** extensions. The presence of installed but disabled extensions among the enabled ones made it hard to interact with the latter. We now provide a new default, where the **Enabled** extensions are shown first, followed by a section for **Recommended** extensions, and, at the bottom, a collapsed section for **Disabled** extensions.  \n![Default Extensions View](images/1_25/defaultExtensionsView.png)  \nYou can always re-order, collapse/expand, or hide any of these sections by using the context menu in the Extensions view. You can also use the **Open View...** command in the **View** menu to show/hide these sections.  \n![Customize Extensions View](images/1_25/defaultExtensionsView.gif)",
    "url": "https://code.visualstudio.com/updates/v1_25#_new-default-view-for-extensions-view",
    "id": 740
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Dismiss extension recommendations  \nWe recommend extensions to you based on the files you have opened and your workspace environment. We understand that not every recommendation might be appropriate for your project and so you can now dismiss specific recommendations.  \nTo dismiss a recommendation, click on the extension item to open the Details pane and then press the **Ignore Recommendation** button. Ignored recommendations will no longer be recommended to you.  \n![Dismiss Recommendations](images/1_25/dismiss.gif)",
    "url": "https://code.visualstudio.com/updates/v1_25#_dismiss-extension-recommendations",
    "id": 741
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Manage workspace recommendations  \nYou could already configure a set of extensions to be recommended for users of your workspace using [workspace recommendations](https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions) in an `extensions.json` file. Managing these recommendations is now much easier. Click on any extension in the Extensions view to open the Details pane. You can then use the new commands below to add recommendations or disallow certain extensions that you don't want recommended for users of your workspace.  \n* Extensions: Add to Recommended Extensions (Workspace)\n* Extensions: Add to Recommended Extensions (Workspace Folder)\n* Extensions: Ignore Recommended Extension (Workspace)\n* Extensions: Ignore Recommended Extension (Workspace Folder)",
    "url": "https://code.visualstudio.com/updates/v1_25#_manage-workspace-recommendations",
    "id": 742
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### New Settings Editor  \nIn this milestone, we continued work on a GUI for editing settings. It's still a preview, but if you'd like to try it out, you can open it with the **Preferences: Open Settings (Preview)** command. We would like to hear any feedback you have - you can leave it on [this GitHub issue](https://github.com/microsoft/vscode/issues/50249).  \n![New Settings Editor](images/1_25/settings-editor.png)  \nSome of the new changes compared to last month are:  \n* A \"table of contents\" (TOC) that organizes settings into new categories.\n* A cleaned up and refreshed layout for the setting rows.\n* The \"Reset\" button has been removed - editing a setting to its default value will remove it from `settings.json`.  \nAlso, try the `\"workbench.settings.settingsSearchTocBehavior\"` setting to see three different options (`show`, `hide`, `filter`) for the \"table of contents\" while searching settings, and let us know which option you prefer.",
    "url": "https://code.visualstudio.com/updates/v1_25#_new-settings-editor",
    "id": 743
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### User setup for Windows  \nWindows users now have a new **Preview** setup package available, which does not require Administrator privileges to install. This setup package also provides a smoother background update experience. This feature is only available on Insiders for now, as we'd like more feedback during July in order to provide the best experience for our Stable user base.  \nHere are the download links for the Insiders user setup packages:  \n* [Windows 64 bit](https://vscode-update.azurewebsites.net/latest/win32-x64-user/insider)\n* [Windows 32 bit](https://vscode-update.azurewebsites.net/latest/win32-user/insider)",
    "url": "https://code.visualstudio.com/updates/v1_25#_user-setup-for-windows",
    "id": 744
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Custom title bar and menus for Windows/Linux  \nWindows and Linux users can now use the `window.titleBarStyle` setting value `custom` and we've implemented a new menu bar to match. The setting is not yet enabled by default but can be turned on with the `window.titleBarStyle` setting.  \nWith the setting enabled for Windows and Linux, the old menu bar will be replaced with a new menu bar that matches your light or dark theme. The new menu bar also comes with some enhancements such as top-level keyboard navigation with the arrow keys. Lastly, the menus throughout the product will also match the new menu bar.  \n![Custom title bar and menu bar](images/1_25/custom_title.png)  \nWe will continue to improve the new menus and title bar as well as address issues tagged with the [`workbench-title`](https://github.com/microsoft/vscode/labels/workbench-title) or [`workbench-menu`](https://github.com/microsoft/vscode/labels/workbench-menu) labels.",
    "url": "https://code.visualstudio.com/updates/v1_25#_custom-title-bar-and-menus-for-windows/linux",
    "id": 745
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Terminal: Dynamic texture atlas  \nAn experimental setting has been added to enable the new \"dynamic texture atlas\" for the [terminal canvas](https://code.visualstudio.com/blogs/2017/10/03/terminal-renderer). This changes the caching strategy used by the terminal to store character glyphs. Instead of being a fixed set of glyphs on the default background, glyphs are now added to the texture atlas as they are required and regardless of the background being used. This should reduce the first terminal start up time, reduce rendering time of characters not using the default background, as well as improving overall rendering performance.  \nThis will eventually be the default, for now you can opt-in with the following setting:  \n```json\n{\n\"terminal.integrated.experimentalTextureCachingStrategy\": \"dynamic\"\n}\n```  \nThis came in as an upstream community contribution to [xterm.js](https://github.com/xtermjs/xterm.js/pull/1327).",
    "url": "https://code.visualstudio.com/updates/v1_25#_terminal:-dynamic-texture-atlas",
    "id": 746
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## Extension Authoring  \n### Grid Editor Layout: ViewColumn  \nThere are only a few API adjustments to support the new grid editor layout feature. Most notably, there is a new `ViewColumn.Beside` action that can be used to open an editor to the side of the active one. With the grid editor layout, there is no longer a limit in the number of opened editors, so using that option will always create a new editor to the side of the active one unless there is already some space to the side. Depending on the user setting `workbench.editor.openSideBySideDirection`, this can either be to the right or below the editor.  \nThe `ViewColumn` value for text editors and webviews still goes by the order of appearance in the editor area from left to right as shown below:  \n![Grid Editor Numbering](images/1_25/grid-numbering.png)  \nEven though the `ViewColumn` enumeration was extended all the way to `ViewColumn.Nine`, a `TextEditor` will always have a number assigned as view column as long as it is contained in the grid.  \nWhen an editor group is moved or an editor group is closed, the `onDidChangeTextEditorViewColumn` event is fired as before.",
    "url": "https://code.visualstudio.com/updates/v1_25#_grid-editor-layout:-viewcolumn",
    "id": 747
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Grid Editor Layout: New Commands  \nEven though the change to the API is minimal to support the new grid editor layout, extensions can still make use of the grid editor layout by leveraging new commands that were added (see the [New Commands](#new-commands) section for a complete overview).  \nThe new `vscode.setEditorLayout` deserves a bit of explanation as it allows you to change the overall editor layout with a single command and arguments. The layout is described as object with an initial (optional) orientation (`0` = horizontal, `1` = vertical) and an array of editor `groups` within. Each editor group can have a `size` and another array of editor `groups` that will be laid out orthogonal to the orientation. If editor group sizes are provided, their sum must be `1` to be applied per row or column.  \nExample for a 2x2 grid:  \n```json\n{ orientation: 0, groups: [{ groups: [{}, {}], size: 0.5 }, { groups: [{}, {}], size: 0.5 }] }\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_grid-editor-layout:-new-commands",
    "id": 748
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Editors open in active ViewColumn by default  \nIf no `ViewColumn` is provided when opening a text editor or webview , VS Code now defaults to opening in the currently active editor group, instead of opening it in `ViewColumn.One`. If you want to preserve the previous behavior, just pass in `ViewColumn.One` when opening.",
    "url": "https://code.visualstudio.com/updates/v1_25#_editors-open-in-active-viewcolumn-by-default",
    "id": 749
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Preselected Completion Items  \nExtension that provide completion items can now marks them as 'preselected'. That is useful when many completions exist but some are more likely to be selected. An example of this is when the user is assigning known variable types. This feature also lets extensions select more commonly used completions, such as favoring `console.log` over `console.dirxml`.  \nThe API addition is `'CompletionItem#preselect: boolean'` and when many preselected items exists, the one with the highest rank is selected.",
    "url": "https://code.visualstudio.com/updates/v1_25#_preselected-completion-items",
    "id": 750
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Document Symbols  \nTo get the most out of the new Outline view tree, extensions should modify their `DocumentSymbolProviders` to return `DocumentSymbols`. This is a new type added and tailored towards the needs of the outline tree. It supports representing a hierarchy of document symbols and allows differentiating between the range that defines a symbol and the selection range that identifies a symbol.  \n```bash\n\n+--/**\n|   * Some Comment\n<range>--|   */\n|  export function fooFunction() {\n|                  +----------+\n+--}                   |\n|\n<selection range>\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_document-symbols",
    "id": 751
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Readonly file system provider  \nA file system provider can now be registered as `readonly`. VS Code will respect this flag by disabling all the mutating commands on the resources coming from that file system provider. Editors will also be opened in readonly mode for those readonly resources.",
    "url": "https://code.visualstudio.com/updates/v1_25#_readonly-file-system-provider",
    "id": 752
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Custom views  \n**Tree view visibility**  \nYou can now check if the tree view is visible or not using the following newly added property and event to `TreeView`:  \n```typescript\n/**\n* `true` if the [tree view](#TreeView) is visible otherwise `false`.\n*/\nreadonly visible: boolean;\n\n/**\n* Event that is fired when [visibility](TreeView.visible) has changed\n*/\nreadonly onDidChangeVisibility: Event<TreeViewVisibilityChangeEvent>;\n\n/**\n* The event that is fired when there is a change in [tree view's visibility](#TreeView.visible)\n*/\nexport interface TreeViewVisibilityChangeEvent {\n\n/**\n* `true` if the [tree view](#TreeView) is visible otherwise `false`.\n*/\nreadonly visible: boolean;\n\n}\n\n```  \n**Selection Listener**  \nA new selection change event was added to the tree view to listen to the selection changes:  \n```typescript\n/**\n* Event that is fired when the [selection](#TreeView.selection) has changed\n*/\nreadonly onDidChangeSelection: Event<TreeViewSelectionChangeEvent<T>>;\n\n/**\n* The event that is fired when there is a change in [tree view's selection](#TreeView.selection)\n*/\nexport interface TreeViewSelectionChangeEvent<T> {\n\n/**\n* Selected elements.\n*/\nreadonly selection: T[];\n\n}\n\n```  \n**Reveal and Focus**  \nYou can now reveal and focus an element in the tree view by setting the focus option to `true` while calling the `reveal` API.  \n```typescript\nreveal(element: T, options?: { select?: boolean, focus?: boolean }): Thenable<void>;\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_custom-views",
    "id": 753
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### New Theme colors  \nThere are two new theme colors for the background color of empty editor groups, a feature that came out of the work to support grid editor layout:  \n* `editorGroup.emptyBackground`: Background color of an empty editor group.\n* `editorGroup.focusedEmptyBorder`: Border color of an empty editor group that is focused.  \n![Grid Editor Group Background](images/1_25/grid-background.png)  \n* `editorPane.background`: Background color of the editor pane visible on the left and right side of the centered editor layout  \n![Editor Pane Background](images/1_25/editorPaneBackground.png)",
    "url": "https://code.visualstudio.com/updates/v1_25#_new-theme-colors",
    "id": 754
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Deprecated Theme colors  \nThe theme color `editorGroup.background` is no longer supported with the introduction of the grid editor layout feature.",
    "url": "https://code.visualstudio.com/updates/v1_25#_deprecated-theme-colors",
    "id": 755
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Rename Command  \nThe rename-command (`editor.action.rename`) can now be invoked with an `Uri` and a `Position` and the editor will initiate a rename operation accordingly. For example:  \n```ts\nvscode.commands.executeCommand(\n'editor.action.rename',\n[vscode.Uri.file('/my/file.abc'), new vscode.Position(14, 7)]\n)\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_rename-command",
    "id": 756
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### DiagnosticTag  \nDiagnostic tags allow extensions to attach additional metadata about a diagnostic. VS Code uses this metadata to tweak how these diagnostics are rendered.  \n```ts\nconst diag = new vscode.Diagnostic(new Range(0, 0, 0, 10), 'Unused');\ndiag.tags = [vscode.Diagnostic.Unnecessary]\n```  \n`DiagnosticTag.Unnecessary` indicates that a diagnostic is for unreferenced or unreachable source code. Any source code marked with `DiagnosticTag.Unnecessary` will be rendered faded out. The amount of fading is controlled by the `\"editorUnnecessaryCode.opacity\"` theme color. For example, `\"editorUnnecessaryCode.opacity\": \"#000000c0\"` will render the code with 75% opacity. For high contrast themes, use the `\"editorUnnecessaryCode.border\"` theme color to underline unnecessary code instead of fading it out.",
    "url": "https://code.visualstudio.com/updates/v1_25#_diagnostictag",
    "id": 757
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### WebviewPanel.active and WebviewPanel.visible  \nWebview panels have two new readonly properties:  \n* `active` - tracks when the panel is focused.\n* `visible`- tracks when the panel is on the screen.",
    "url": "https://code.visualstudio.com/updates/v1_25#_webviewpanel.active-and-webviewpanel.visible",
    "id": 758
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Webview persistence  \nThe webview API has been extended with support for saving and restoring the state of a webview.  \nThe `getState` and `setState` APIs inside the webview context allow a webview to save state and get a state object that is persisted even when the webview itself goes into a background tab.  \n```js\n// Inside a webview's JavaScript\nconst vscode = acquireVsCodeApi();\n\n// Look up old state (will be undefined if no state is set)\nconst oldState = vscode.getState();\n\n// Update the persisted state.\n// You can save off any json serializable object.\nif (oldState) {\nvscode.setState({ count: oldState.count + 1 });\n} else {\nvscode.setState({ count: 1 });\n}\n```  \nIn addition, extensions can register a `WebviewPanelSerializer` that allows webviews of a given type to be persisted across restarts of VS Code. To enable this, the extension must call `vscode.window.registerWebviewPanelSerializer` in its activation method.  \n```ts\nexport function activate(context: vscode.ExtensionContext) {\n...\n\nvscode.window.registerWebviewPanelSerializer('myWebviewType', {\nasync deserializeWebviewPanel(webviewPanel: vscode.WebviewPanel, state: any) {\n// `state` is the state persisted using `setState` inside the webview\nconsole.log(`Got state: ${state}`);\n\nnew MyWebview(webviewPanel);\n}\n});\n}\n```  \nThe extension must also add a `onWebviewPanel` activation event:  \n```json\n\"activationEvents\": [\n...,\n\"onWebviewPanel:catCoding\"\n]\n```  \nThe new webview persistence APIs are documented on the [webview extension authoring page](https://code.visualstudio.com/docs/extensions/webview). The [example webview extension](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-sample) also demonstrates how to use these new APIs.",
    "url": "https://code.visualstudio.com/updates/v1_25#_webview-persistence",
    "id": 759
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Language Packs: Minimal translations  \nVS Code will now prompt users for an available Language Pack in the language of the Language Pack. Below is an example recommending a Simplified Chinese Language Pack in Simplified Chinese and English.  \n![Language Pack recommendation](images/1_25/lang-pack-recommendation.png)  \nThis display requires that Language Pack authors translate the following minimal translation strings in their Language Pack:  \n```ts\n{\nshowLanguagePackExtensions: localize('showLanguagePackExtensions', \"Search language packs in the Marketplace to change the display language to {0}.\"),\nsearchMarketplace: localize('searchMarketplace', \"Search Marketplace\"),\ninstallAndRestartMessage: localize('installAndRestartMessage', \"Install language pack to change the display language to {0}.\"),\ninstallAndRestart: localize('installAndRestart', \"Install and Restart\")\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_language-packs:-minimal-translations",
    "id": 760
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Language Server Protocol Inspector  \nLanguage Servers that use [vscode-languageclient](https://github.com/microsoft/vscode-languageserver-node) can specify a setting `[langId].trace.server` to receive logging support. Although the generated log is valuable for understanding the LSP communication between VS Code and Language Servers, the log can be long and hard to extract useful information from.  \nWith the new LSP Inspector, you now have a tool to help understand LSP logs: https://microsoft.github.io/language-server-protocol/inspector/  \nIn the Inspector, you can:  \n* Scan through the requests, responses, and notifications between Language Client and Server.\n* Filter through logs using search or predefined filters to locate useful information.  \n![LSP Inspector](images/1_25/lsp-inspector.gif)  \nThe Inspector can be useful for debugging Language extensions. You can ask users to attach LSP logs to their bug reports and use the Inspector to analyze the logs.  \nThe [Language Server Guide](https://code.visualstudio.com/docs/extensions/example-language-server#_logging-support-for-language-server) has been updated to include sections on logging support and the features of the LSP Inspector.",
    "url": "https://code.visualstudio.com/updates/v1_25#_language-server-protocol-inspector",
    "id": 761
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Language Server: End to End testing  \nA section on End to End Testing has been added to the [Language Server Guide](https://code.visualstudio.com/docs/extensions/example-language-server#_testing-the-language-server).  \nCompared to unit-testing components of Language Servers, End to End tests open a workspace in VS Code, launch the Language extension in the Extension Host, and make assertions against the real behavior of the Language extension. This makes mocking workspace and VS Code state easy and checks real VS Code behavior.",
    "url": "https://code.visualstudio.com/updates/v1_25#_language-server:-end-to-end-testing",
    "id": 762
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Language Server: Refreshed guide  \nThe [Language Server Guide](https://code.visualstudio.com/docs/extensions/example-language-server) has received a refresh. Major improvements include:  \n* Sections on Logging and Testing as mentioned above.\n* Explanation of Language Server Protocol, Language Server, and the relationship between them.\n* Updated illustrations of LSP and Language Server.\n* Updated [lsp-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-sample) sample code.\n* More references to the [LSP Website](https://microsoft.github.io/language-server-protocol/).",
    "url": "https://code.visualstudio.com/updates/v1_25#_language-server:-refreshed-guide",
    "id": 763
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Local Rename Events  \nWe are proposing two events that fire before and after a rename occurs. They are called `onWillRenameFile` and `onDidRenameFile` and they allow an extension to react or participate in the rename.",
    "url": "https://code.visualstudio.com/updates/v1_25#_local-rename-events",
    "id": 764
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### QuickInput API  \nThe new `QuickPick` and `InputBox` APIs allow for more flexible collection of user input than the existing `showQuickPick` and `showInputBox` APIs. With the new APIs, you create a new instance of an input object on which you then register event handlers and set properties according to your use case:  \n```ts\nexport namespace window {\nexport function createQuickPick<T extends QuickPickItem>(): QuickPick<T>;\nexport function createInputBox(): InputBox;\n}\n```  \nThere are samples of QuickInput API usage in a [sample extension](https://github.com/microsoft/vscode-extension-samples/tree/main/quickinput-sample).  \nThe multi-step input sample:  \n![Multi-step input sample](images/1_25/multistepinput.gif)  \nIf the existing `showQuickPick` and `showInputBox` APIs are not flexible enough, use the new `QuickPick` and `InputBox` APIs, otherwise keep to the existing ones as these will get the job done quicker.  \nUse issue [#53327](https://github.com/microsoft/vscode/issues/53327) for feedback and discussion.",
    "url": "https://code.visualstudio.com/updates/v1_25#_quickinput-api",
    "id": 765
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Terminal renderers  \nThe concept of a terminal \"renderer\" is being proposed. A terminal renderer is basically a terminal instance within the terminal panel but it has no backing process, instead the **extension** acts as the process. This is useful for implementing a terminal multiplexer within VS Code where the extension has access to the in/out pipes of some process, which are hooked then up to the terminal renderer. The [Live Share extension](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare) is planning on using this new API to improve the stability and maintainability of its shared terminal support.  \n```ts\nexport namespace window {\nexport function createTerminalRenderer(name: string): TerminalRenderer;\n}\n\nexport interface TerminalRenderer {\nname: string;\ndimensions: TerminalDimensions | undefined;\nreadonly maximumDimensions: TerminalDimensions | undefined;\nreadonly terminal: Terminal;\nreadonly onDidAcceptInput: Event<string>;\nreadonly onDidChangeMaximumDimensions: Event<TerminalDimensions>;\nwrite(text: string): void;\n}\n\nexport interface TerminalDimensions {\nreadonly columns: number;\nreadonly rows: number;\n}\n```  \nAnother example use case is an extension creating its own REPL. This works by the extension listening to every character press and acting when the `Enter` key is pressed:  \n```ts\nconst shell = vscode.window.createTerminalRenderer('My Extension REPL');\nshell.write('Type and press enter to echo the text\\r\\n\\r\\n');\nshell.terminal.show();\n\nlet line = '';\nshell.onDidAcceptInput(data => {\nif (data === '\\r') {\nshell.write(`\\r\\necho: \"${line}\"\\r\\n\\n`);\nline = '';\n} else {\nline += data;\nshell.write(data);\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_terminal-renderers",
    "id": 766
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Tracking the active terminal  \nWe are proposing new extension APIs for the Integrated Terminal that make it possible to track the active terminal, similar to `window.activeTextEditor` and `window.onDidChangeActiveTextEditor`:  \n```ts\nexport namespace\nexport const activeTerminal: Terminal | undefined;\nexport const onDidChangeActiveTerminal: Event<Terminal | undefined>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_tracking-the-active-terminal",
    "id": 767
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Terminal.onData renamed  \n`Terminal.onData` has been renamed to `onDidWriteData` in order to align with our [naming guidelines](https://github.com/microsoft/vscode/wiki/Extension-API-guidelines#event-naming):  \n```ts\nexport interface Terminal {\nonDidWriteData: Event<string>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_25#_terminal.ondata-renamed",
    "id": 768
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### DefinitionLink  \nDefinition links allow definition providers to return additional metadata with definitions:  \n```ts\nexport interface DefinitionLink {\n/**\n* Span of the symbol being defined in the source file.\n*\n* Used as the underlined span for mouse definition hover. Defaults to the word range at\n* the definition position.\n*/\norigin?: Range;\n\n/**\n* The resource identifier of the definition.\n*/\nuri: Uri;\n\n/**\n* The full range of the definition.\n*\n* For a class definition for example, this would be the entire body of the class definition.\n*/\nrange: Range;\n\n/**\n* The span of the symbol definition.\n*\n* For a class definition, this would be the class name itself in the class definition.\n*/\nselectionRange?: Range;\n}\n```  \nThis additional information is used by VS Code to improve the user experience for **Go to Definition** actions.  \nTo use `DefinitionLink`, a `DefinitionProvider` must currently implement a `provideDefinition2` method. Once the `DefinitionLink` API is stabilized, we plan to remove `provideDefinition2` and update the normal `DefinitionProvider.provideDefinition` method to also allow returning `DefinitionLink`.",
    "url": "https://code.visualstudio.com/updates/v1_25#_definitionlink",
    "id": 769
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n## New Documentation  \n### New Python Flask tutorial  \nThere is a new [Using Flask in Visual Studio Code](https://code.visualstudio.com/docs/python/tutorial-flask?utm_source=VsCode&utm_medium=ReleaseNotes) tutorial showing how you can quickly create, edit, and debug a Python [Flask](https://flask.palletsprojects.com) web application in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_25#_new-python-flask-tutorial",
    "id": 771
  },
  {
    "content": "See what is new in the Visual Studio Code June 2018 Release (1.25)  \n### Updated website deployment tutorial  \nWe've updated the [Deploy static website to Azure](https://code.visualstudio.com/tutorials/static-website/getting-started?utm_source=VsCode&utm_medium=ReleaseNotes) tutorial for creating and deploying a static website using [Azure Storage](https://learn.microsoft.com/azure/storage/). Website deployment is simplified with the new features provided by [Azure Storage extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestorage).",
    "url": "https://code.visualstudio.com/updates/v1_25#_updated-website-deployment-tutorial",
    "id": 772
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Problems panel Quick Fixes  \nYou can now apply Quick Fixes from the Problems panel. A light bulb indicating Quick Fixes is shown when you hover or select a problem entry. Quick Fixes can be applied by clicking on the light bulb or by opening the context menu for the problem entry.  \n![Quick fixes](images/1_26/quickfix-problems.gif)  \n**Note:** The light bulb indicator is shown only if the extension contributing Quick Fixes provides [Diagnostic](https://github.com/microsoft/vscode/blob/release/1.26/src/vs/vscode.d.ts#L2029) information associated with the Quick Fix.",
    "url": "https://code.visualstudio.com/updates/v1_26#_problems-panel-quick-fixes",
    "id": 774
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### User setup for Windows  \nAnnounced last release, the user setup package for Windows is now available on stable. Installing the user setup does not require Administrator privileges as the location will be under your user Local AppData (LOCALAPPDATA) folder. User setup also provides a smoother background update experience.  \n[Download User Setup](https://code.visualstudio.com/docs/?dv=win64user)  \nIf you are a current user of the system-wide Windows setup, you will be prompted to install user setup, which we recommend using from now on. Don't worry, all your settings and extensions will be kept during the transition. During installation, you will also be prompted to uninstall the system-wide setup.",
    "url": "https://code.visualstudio.com/updates/v1_26#_user-setup-for-windows",
    "id": 775
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Grid: Automated maximize of minimized editors  \nOne feature we lost during the introduction of the grid editor layout last milestone was the ability to have editors automatically maximize when you focus them and they are in their minimized state. This feature is now working as before:  \n![Grid maximize](images/1_26/grid-maximize.gif)  \n**Note:** You can always maximize the active editor via **View: Maximize Editor Group** (`workbench.action.minimizeOtherEditors`) or reset all editor sizes via **View: Reset Editor Group Sizes** (`workbench.action.evenEditorWidths`).",
    "url": "https://code.visualstudio.com/updates/v1_26#_grid:-automated-maximize-of-minimized-editors",
    "id": 776
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### View menu cleanup  \nThe **View** menu was growing very large and we decided to move many of the entries into a separate **Appearance** sub-menu to clean it up.  \n![View menu](images/1_26/appearance.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_view-menu-cleanup",
    "id": 777
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Copy relative path  \nVS Code always had an action to copy the absolute path of a file to the clipboard (`kb(copyFilePath)`). There is now a new action **Copy Relative Path** (`kb(copyRelativeFilePath)`) to copy the file path relative to the workspace folder root.  \n**Note:** You can get to this action from the context menu (for example, on a tab or a file in the File Explorer) by pressing and holding the `Shift` key (`Alt` key on macOS) before opening the menu.",
    "url": "https://code.visualstudio.com/updates/v1_26#_copy-relative-path",
    "id": 778
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Custom view: File resource decorations  \nCustom views showing file resources will now have file decorations (Git, problems) shown. You can disable them using the settings `explorer.decorations.colors` and `explorer.decorations.badges` which disables them in File Explorer, Open Editors and Custom views.  \n![Custom view decorations](images/1_26/customview-decorations.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_custom-view:-file-resource-decorations",
    "id": 779
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Run npm scripts from package.json  \nYou can now run an npm script in a `package.json` file from the hover as shown below or from the context menu.  \n![npm script hover](images/1_26/npm-script-hover.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_run-npm-scripts-from-package.json",
    "id": 780
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Opening folder URIs  \nYou can now open an URI as a folder in VS Code, if there is an extension contributing a `FileSystemProvider` for that URI. We introduced a new command-line argument `--folder-uri` to do this.  \nThe following CLI command opens the VS Code GitHub repository as a folder, if you have [RemoteHub](https://marketplace.visualstudio.com/items?itemName=eamodio.remotehub) extension installed.  \n`code --folder-uri remotehub://github.com/microsoft/vscode`  \n![Open folder URI](images/1_26/open-folder-uri.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_opening-folder-uris",
    "id": 781
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Rapid render  \nOn startup, the basic workbench layout is now restored much faster. The restoration order is Activity Bar, Side Bar, and Status Bar, followed by headers and icons, and then the Explorer and editor region are populated.  \n![Rapid render](images/1_26/rapid_render.gif)  \nRapid render is meant to improve perceived performance as the time you are looking at an empty canvas is reduced. We have more ideas how to improve rendering performance and we are interested in your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_26#_rapid-render",
    "id": 782
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Output panel  \nVS Code's main, window, and shared processes each have their own logging channel, where you can now view the telemetry events sent when the log level is set to \"Trace\". Data common to all telemetry events will not be visible here for the sake of brevity. The complete payload of each telemetry event is logged in a separate log file named `telemetry.log` which you can access via the **Developer: Open Log File...** command.",
    "url": "https://code.visualstudio.com/updates/v1_26#_output-panel",
    "id": 783
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Offline mode  \nSome users do not want any outgoing network requests from VS Code unless they specifically invoke features that require online access. To support this offline mode, we have added new settings to turn off features such as automatic extension update checking, querying settings for A/B experiments, and fetching of online data for auto-completions.  \nBelow is the complete list of settings to control VS Code features that make network requests:  \n* `update.mode`\n* `update.showReleaseNotes`\n* `extensions.autoupdate`\n* `extensions.autoCheckUpdates`\n* `extensions.showRecommendationsOnlyOnDemand`\n* `workbench.settings.enableNaturalLanguageSearch`\n* `workbench.enableExperiments`\n* `telemetry.enableTelemetry`\n* `telemetry.enableCrashReporter`\n* `git.autofetch`\n* `npm.fetchOnlinePackageInfo`",
    "url": "https://code.visualstudio.com/updates/v1_26#_offline-mode",
    "id": 784
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Accessibility improvements  \nWe have fixed a large number of accessibility issues - mostly around keyboard navigation, screen reader support, and color contrast. The full list can be found [here](https://github.com/microsoft/vscode/issues?q=is%3Aissue+label%3Aaccessibility+milestone%3A%22July+2018%22+is%3Aclosed).",
    "url": "https://code.visualstudio.com/updates/v1_26#_accessibility-improvements",
    "id": 785
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## Integrated Terminal  \n### Column selection  \nColumn selection is now supported within the Integrated Terminal via `Alt+click`.  \n![Terminal column selection](images/1_26/terminal-column-selection.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_column-selection",
    "id": 786
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Improved multiline support  \nDouble clicking to select words in the terminal now selects words that are split over lines.",
    "url": "https://code.visualstudio.com/updates/v1_26#_improved-multiline-support",
    "id": 787
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Frontend and backend are now synchronized  \nThe data stream that comes into the Integrated Terminal is now synchronized with the backing pseudoterminal/shell process. This means that the data coming into the terminal can no longer flood the UI thread and cause unresponsiveness, SIGINT (Ctrl+C) should always be responsive, and the `time` command should return accurate results.",
    "url": "https://code.visualstudio.com/updates/v1_26#_frontend-and-backend-are-now-synchronized",
    "id": 788
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Dynamic texture atlas  \nThe Integrated Terminal now defaults to using a \"dynamic texture atlas\" for canvas rendering. This changes the caching strategy used by the terminal to store character glyphs. Instead of being a fixed set of glyphs on the default background, glyphs are now added to the texture atlas as they are required, regardless of the background being used. This should reduce the first terminal start up time and the rendering time of characters not using the default background, as well as improving overall rendering performance.  \nThis came in as an upstream community contribution to [xterm.js](https://github.com/xtermjs/xterm.js/pull/1327).",
    "url": "https://code.visualstudio.com/updates/v1_26#_dynamic-texture-atlas",
    "id": 789
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## Languages  \n### TypeScript 3.0  \nVS Code now ships with TypeScript 3.0.1. This major update brings support for project references, better support for tuples, and other language and tooling features. You can read more about TypeScript 3.0 [here](https://devblogs.microsoft.com/typescript/announcing-typescript-3-0/).",
    "url": "https://code.visualstudio.com/updates/v1_26#_typescript-3.0",
    "id": 790
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Better error reporting  \nThe TypeScript team has done a lot of work to make JavaScript and TypeScript error messages smarter and clearer. Some error messages now include links to relevant locations in the source code.  \n![Related locations showing in a diagnostic. Clicking on 'box.ts' will show the definition of 'width' in 'box'](images/1_26/ts-related-diagnostic.png)  \nMessages for unions and other complex types should also be more concise and helpful. For example, a simple type error in JSX could sometimes produce a complex error message like this:  \n![How this simple type error used to be reported by TypeScript 2.8](images/1_26/ts-28-bad-error.png)  \nThanks to TypeScript 3.0, the error is much more readable in VS Code 1.26:  \n![How the error is now reported](images/1_26/ts-30-better-error.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_better-error-reporting",
    "id": 791
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### JSX tag completion  \nJSX tags are now closed automatically when you type `>` in a JavaScript or TypeScript file:  \n![Tag completion of JSX tags](images/1_26/ts-jsx-tag-complete.gif)  \nThis behavior matches what VS Code already provided in HTML files. Auto closing of tags can be disabled by setting `\"javascript.autoClosingTags\": false` and `\"typescript.autoClosingTags\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_26#_jsx-tag-completion",
    "id": 792
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Add all missing imports Quick Fix  \nThe **Add missing import** Quick Fix can now be applied to all missing imports in a JavaScript/TypeScript file:  \n![Adding multiple missing imports with a single quick fix](images/1_26/ts-import-all-quick-fix.gif)  \nThis Quick Fix will only add imports for symbols with a single potential definition. If there are multiple potential definitions of a symbol in the current project, for example having two different files export a symbol called `Button`, you must Quick Fix the individual error and select the specific import that you intended.  \nTo use this Quick Fix in JavaScript files, [enable semantic checking](https://code.visualstudio.com/docs/languages/javascript#_type-checking).",
    "url": "https://code.visualstudio.com/updates/v1_26#_add-all-missing-imports-quick-fix",
    "id": 793
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### JSX folding  \nJSX tags are now foldable when using [syntax aware folding](https://code.visualstudio.com/docs/editor/codebasics#_folding).  \n![Folding JSX tags](images/1_26/ts-jsx-folding.gif)",
    "url": "https://code.visualstudio.com/updates/v1_26#_jsx-folding",
    "id": 794
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Convert between named imports and namespace imports  \nTwo new refactorings let you quickly convert between named imports and namespace imports in JavaScript and TypeScript:  \n![convert to namespace import](images/1_26/ts-convert-to-namespace-import.gif)",
    "url": "https://code.visualstudio.com/updates/v1_26#_convert-between-named-imports-and-namespace-imports",
    "id": 795
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Clickable links in jsconfig.json and tsconfig.json project files  \nQuickly navigate `jsconfig.json` and `tsconfig.json` project references by `Ctrl` clicking on project reference paths (`Cmd+click` on macOS):  \n![Cmd click on the path to open the referenced project's tsconfig](images/1_26/ts-tsconfig-path-click.png)  \nThe [`extends`](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) path is now also clickable.",
    "url": "https://code.visualstudio.com/updates/v1_26#_clickable-links-in-jsconfig.json-and-tsconfig.json-project-files",
    "id": 796
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## Debugging  \n### Improved stop debug behavior  \nIn previous releases, the **Debug: Stop** action (found on the Debug toolbar) would always kill a debuggee and its child processes immediately, without giving the debuggee a chance to clean up gracefully. Some users didn't like this behavior because they were forced to do manual cleanup after stopping a debug session.  \nIn this release, we've improved the **Debug: Stop** action in the following way:  \n1. When pressing **Stop** for the first time, the debuggee is no longer killed immediately but it is requested to shutdown gracefully (and to clean up everything as necessary).  \n2. If there are no breakpoints (or problems) in that shutdown code, the debuggee and the debug session will terminate. The user will not see any difference in behavior to previous versions of VS Code.  \n3. However, if the debugger hits a breakpoint in the shutdown code or if the debuggee does not terminate properly by itself, then the debug session will not end.  \n4. In this case, pressing the **Stop** button again will force terminate the debuggee. So if you see that a debug session doesn't end when you press the red **Stop** button, then press the button again to force a shutdown of the debuggee.  \n**Note**: This feature is only supported by debugger extensions that have opted into implementing it. Currently this is only the built-in Node.js debugger. We expect other debug extensions to support this feature soon.",
    "url": "https://code.visualstudio.com/updates/v1_26#_improved-stop-debug-behavior",
    "id": 797
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Changed smartStep behavior for Node/Chrome debugging  \nPreviously, `\"smartStep\": true` would cause the Node.js debugger to not stop in source code without source maps. This can happen in two ways:  \n* Files that don't have source maps at all (source code that isn't transpiled or .js files shipped with node modules).\n* Transpiled files that do have source maps, but there are individual lines that aren't mapped (extra lines that TypeScript inserts when down compiling some features like async/await).  \nWith VS Code 1.26, `\"smartStep\": true` will only affect the second type, lines that are missing from a source map. Now you'll be able to step into .js files while still skipping TS async/await code.  \nWe changed this because we realized that the old smartStep behavior was too aggressive. Skipping inserted code is usually correct, but skipping in the first scenario only makes sense for some projects and users. In addition, using the `skipFiles` option in your `launch.json` configuration file does a better job of covering the case for entire files, since it can target files more precisely and is faster.  \nSo, if you are using `smartStep` and notice that the debugger is no longer auto-skipping through files without source maps, you can use `skipFiles` to get the previous behavior back. See [Skipping uninteresting code](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_skipping-uninteresting-code-node-chrome) for examples of how to configure `skipFiles` to skip source code in node_modules, internal node files, or any other files that you don't want to step through.",
    "url": "https://code.visualstudio.com/updates/v1_26#_changed-smartstep-behavior-for-node/chrome-debugging",
    "id": 798
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## Extensions  \n### IntelliSense for extension search  \nThis release makes it easier to search for extensions by adding IntelliSense autocompletions to the extension search field. This will help you refine your extension searches to filter results based on things like category and install state; or sort results by name, rating, or install count. Type '@' or `kb(editor.action.triggerSuggest)` to trigger suggestions for supported query parameters.  \n![Extension Search IntelliSense](images/1_26/extension-intellisense.gif)",
    "url": "https://code.visualstudio.com/updates/v1_26#_intellisense-for-extension-search",
    "id": 799
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Extension Pack management  \nExtension Pack management has become a lot smoother in this release. An Extension Pack is installed, uninstalled, enabled or disabled always as a single pack. You can also now uninstall or disable an extension belonging to an Extension Pack without requiring you to uninstall or disable the entire Extension Pack.  \nThere is also a new **Extension Pack** tab when you open extension details showing which extensions are bundled in the Extension Pack.  \n![Extension Pack](images/1_26/extension-pack.png)  \n**Note:** This needs adoption by Extension Packs. See [Extension Packs revisited](#extension-packs-revisited) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_26#_extension-pack-management",
    "id": 800
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Disabling extensions from command line  \nYou can now disable extensions from the command line using the new argument `--disable-extension`.  \n* `code <folder_path> --disable-extension ms-python.python` - Opens the folder with `ms-python.python` extension disabled.\n* `code <folder_path> --disable-extension ms-python.python --disable-extension ms-dotnettools.csharp` - Opens the folder with `ms-python.python` and `ms-dotnettools.csharp` extensions disabled.",
    "url": "https://code.visualstudio.com/updates/v1_26#_disabling-extensions-from-command-line",
    "id": 801
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Custom title bar and menus for Windows/Linux  \nThis milestone we improved the custom menus on Windows and Linux when the custom title bar is enabled. While still in preview, you can try it out by setting `window.titleBarStyle` to `custom` in your `settings.json`.  \nSome highlights include:  \n* The menus are now themable. See the new theme colors under [New theme colors](#new-theme-colors).  \n![Themed Menus](images/1_26/theme_menus.png)  \n* Keyboard and mouse interaction with the menus is more coherent. Before, there were several focus indicators making the menus unclear. Now, the menus function in way that is much more familiar.\n* Many accessibility issues have been resolved to improve the experience for those needing larger zoom levels or using screen readers.  \nWe will continue to improve the new menus and title bar as well as address issues tagged with the [`workbench-title`](https://github.com/microsoft/vscode/labels/workbench-title) or [`workbench-menu`](https://github.com/microsoft/vscode/labels/workbench-menu) labels.",
    "url": "https://code.visualstudio.com/updates/v1_26#_custom-title-bar-and-menus-for-windows/linux",
    "id": 802
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## Extension Authoring  \n### QuickInput API  \nThe `QuickPick` and `InputBox` APIs are now stable. They allow for more flexible collection of user input than the existing `showQuickPick` and `showInputBox` APIs. There are samples of QuickInput API usage in a [sample extension](https://github.com/microsoft/vscode-extension-samples/tree/main/quickinput-sample).  \n![Multi-step input sample](images/1_26/multistepinput.gif)",
    "url": "https://code.visualstudio.com/updates/v1_26#_quickinput-api",
    "id": 803
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Extension Packs revisited  \nDefining an Extension Pack now uses a new property called `extensionPack` instead of `extensionDependencies` in `package.json`. This is because `extensionDependencies` is mainly used to define functional dependencies among extensions that prevents uninstalling or disabling an extension dependency without uninstalling or disabling the dependent extension.  \nAn Extension Pack should not have any functional dependencies with its bundled extensions and they should be manageable independent of the pack. Below is an example `extensionPack` entry which defines an Extension Pack that bundles several debugger extensions.  \n```json\n\"extensionPack\": [\n\"andreweinand.mock-debug\",\n\"ms-vscode.mono-debug\",\n\"ms-vscode.cpptools\",\n\"ms-dotnettools.csharp\",\n\"vscjava.vscode-java-debug\"\n]\n```  \nThis will make it much simpler and easier for users to manage an Extension Pack and its bundled extensions. See [Extension Pack management](#extension-pack-management).",
    "url": "https://code.visualstudio.com/updates/v1_26#_extension-packs-revisited",
    "id": 804
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Better Workspace edit  \nThe `WorkspaceEdit` and `applyEdit` APIs have been extended to allow extensions to create, rename, and delete files. Before, only textual edits were possible. The new APIs allow for better refactorings; for example, renaming a file when a class name is changed.",
    "url": "https://code.visualstudio.com/updates/v1_26#_better-workspace-edit",
    "id": 805
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### New theme colors  \nThere are new theme colors for the breadcrumbs:  \n* `breadcrumb.foreground`: Color of breadcrumb items.\n* `breadcrumb.focusForeground`: Color of focused breadcrumb items.\n* `breadcrumb.activeSelectionForeground`: Color of selected breadcrumb items.\n* `breadcrumbPicker.background`: Background color of breadcrumb item picker.  \nThe controls of the new Settings editor are now themable:  \n* `settings.headerForeground`: The foreground color for a section header or active title.\n* `settings.modifiedItemForeground`: The foreground color for the modified setting indicator.\n* `settings.inactiveSelectedItemBorder`: The color of the selected setting row border, when the settings list does not have focus.\n* `settings.dropdownBackground`: Dropdown background.\n* `settings.dropdownForeground`: Dropdown foreground.\n* `settings.dropdownBorder`: Dropdown border.\n* `settings.checkboxBackground`: Checkbox background.\n* `settings.checkboxForeground`: Checkbox foreground.\n* `settings.checkboxBorder`: Checkbox border.\n* `settings.textInputBackground`: Text input box background.\n* `settings.textInputForeground`: Text input box foreground.\n* `settings.textInputBorder`: Text input box border.\n* `settings.numberInputBackground`: Number input box background.\n* `settings.numberInputForeground`: Number input box foreground.\n* `settings.numberInputBorder`: Number input box border.  \nThe custom menus on Windows and Linux are now themable:  \n* `menu.background`: Background of menus and context menus.\n* `menu.foreground`: Foreground of menus and context menus.\n* `menu.selectionBackground`: Background of selected item in menus and context menus.\n* `menu.selectionForeground`: Foreground of selected item in menus and context menus.\n* `menu.selectionBorder`: Border of selected item in menus and context menus.\n* `menubar.selectionBackground`: Background of selected top-level menu in the menubar.\n* `menubar.selectionForeground`: Foreground of selected top-level menu in the menubar.\n* `menubar.selectionBorder`: Border of selected top-level menu in the menubar.",
    "url": "https://code.visualstudio.com/updates/v1_26#_new-theme-colors",
    "id": 806
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Updated default theme colors  \nAs part of our [accessibility improvements](#accessibility-improvements), we've updated a few default theme colors to ensure they meet the color contrast requirements. The full list of color contrast fixes can be found [here](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aaccessibility+milestone%3A%22July+2018%22+is%3Aclosed+%22contrast%22).",
    "url": "https://code.visualstudio.com/updates/v1_26#_updated-default-theme-colors",
    "id": 807
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### DefinitionLink  \nDefinition providers may now return a `DefinitionLink` object. Definition links provide additional metadata over normal [location](https://code.visualstudio.com/docs/extensionAPI/vscode-api#Location) definitions, including the range of the defining symbol:  \n```ts\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\nvscode.languages.registerDefinitionProvider('markdown', new LineLinkDefinitionProvider());\n}\n\nexport class LineLinkDefinitionProvider implements vscode.DefinitionProvider {\nasync provideDefinition(\ndocument: vscode.TextDocument,\nposition: vscode.Position,\ntoken: vscode.CancellationToken\n): Promise<vscode.DefinitionLink[]> {\nconst wordRange = document.getWordRangeAtPosition(position, /<\\d+>/);\nif (wordRange.isEmpty) {\nreturn [];\n}\n\nconst targetLine = +document.getText(wordRange).slice(1, -1);\nreturn [{\n// Definition location\ntargetRange: new vscode.Range(targetLine - 1, 0, targetLine, 0),\ntargetUri: document.uri,\n\n// Range of the defining symbol\noriginSelectionRange: new vscode.Range(\nwordRange.start.translate({ characterDelta: 1 }),\nwordRange.end.translate({ characterDelta: -1 })),\n}];\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_26#_definitionlink",
    "id": 808
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Debug extensions  \n**New home for the Debug Adapter Protocol**  \nWe've moved the **Debug Adapter Protocol** from its [old location](https://github.com/microsoft/vscode-debugadapter-node) to a new website [https://microsoft.github.io/debug-adapter-protocol](https://microsoft.github.io/debug-adapter-protocol) and a corresponding repository [https://github.com/microsoft/debug-adapter-protocol](https://github.com/microsoft/debug-adapter-protocol).  \nA companion blog, [New home for the Debug Adapter Protocol](https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website), provides background and additional details about the move.  \nEveryone who is using the DAP JSON-schema programmatically from the old location [https://raw.githubusercontent.com/Microsoft/vscode-debugadapter-node/main/debugProtocol.json](https://raw.githubusercontent.com/Microsoft/vscode-debugadapter-node/main/debugProtocol.json) should update their source code to the new location:  \n```bash\nhttps://microsoft.github.io/debug-adapter-protocol/debugAdapterProtocol.json\n```  \nFor the next two releases (August & September), we will keep the schema at the old location up-to-date, but we are planning to remove it in October.  \n**New `terminate` request for Debug Adapter Protocol**  \nA new `terminate` request and a corresponding `supportsTerminateRequest` capability have been added to the **Debug Adapter Protocol** in order to support the graceful shutdown of debuggees [explained above](#improved-stop-debug-behavior). If a debug adapter returns `true` for the `supportsTerminateRequest` capability, VS Code will first send a `terminate` request to the debug adapter when it stops a debug session.\nThe implementation of the `terminate` request in the debug adapter should request the debuggee to terminate itself. On Unix-based operating systems, this could easily be achieved by sending the `SIGINT` signal to the debuggee.",
    "url": "https://code.visualstudio.com/updates/v1_26#_debug-extensions",
    "id": 809
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Webview icons  \n[Webviews](https://code.visualstudio.com/docs/extensions/webview) may now provide a custom icon that is shown in the tab bar and OPEN EDITORS view:  \n```ts\nimport * as vscode from 'vscode';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n\ncontext.subscriptions.push(vscode.commands.registerCommand('catCoding.start', () => {\nconst panel = vscode.window.createWebviewPanel('catCoding',\n\"Coding Cat\", vscode.ViewColumn.One, { });\n\npanel.iconPath = vscode.Uri.file(path.join(context.extensionPath, 'media', 'cat.png'));\n});\n}\n```  \n![A webview with a custom icon](images/1_26/webview-icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_webview-icons",
    "id": 810
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Terminal access API  \nThe terminal access APIs are now stable. They allow extensions to access `Terminal` objects, regardless of whether the extension created them or not.  \n```ts\nexport namespace window {\nexport const terminals: ReadonlyArray<Terminal>;\nexport const onDidOpenTerminal: Event<Terminal>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_26#_terminal-access-api",
    "id": 811
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### URI handler API  \nThe URI handler API is now stable. It allows extensions to handle system-wide [URIs](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  \n```ts\nexport interface UriHandler {\nhandleUri(uri: Uri): ProviderResult<void>;\n}\n\nexport namespace window {\nexport function registerUriHandler(handler: UriHandler): Disposable;\n}\n```  \nIt comes with a `onUri` activation event which activates an extension whenever a URI directed towards itself is opened by the operating system.  \nRefer to the Git extension's [GitProtocolHandler](https://github.com/microsoft/vscode/blob/main/extensions/git/src/protocolHandler.ts) for a reference implementation.",
    "url": "https://code.visualstudio.com/updates/v1_26#_uri-handler-api",
    "id": 812
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### Node.js update  \nThe version of Electron that VS Code runs on has been updated which brings with it an update to Node.js that VS Code ships with from 7.9 to 8.9. All extensions will now run on this newer version of Node.js.  \nThere are some changes which could affect extensions:  \n* The `natives` node module no longer works (see [#47569](https://github.com/microsoft/vscode/issues/47569)).\n* The legacy debug protocol and the `--debug` flag is no longer supported (see [#55907](https://github.com/microsoft/vscode/issues/55907)).\n* If language servers written in Node.js using stdio as the transport encounter problems in VS Code 1.26, the fix for extension authors using the LSP [client](https://www.npmjs.com/package/vscode-languageclient) and [server](https://www.npmjs.com/package/vscode-languageserver) libraries is to switch the transport to `TransportKind.ipc` instead of `TransportKind.stdio` and republish their extension.",
    "url": "https://code.visualstudio.com/updates/v1_26#_node.js-update",
    "id": 813
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### findTextInFiles API  \nNew proposed API has been added to allow extensions to search for text patterns within the workspace:  \n```ts\nexport namespace workspace {\nexport function findTextInFiles(query: TextSearchQuery, options: FindTextInFilesOptions, callback: (result: TextSearchResult) => void, token?: CancellationToken): Thenable<void>;\n}\n```  \nThis is the counterpart of `workspace.findFiles`, which searches for files in the workspace.",
    "url": "https://code.visualstudio.com/updates/v1_26#_findtextinfiles-api",
    "id": 814
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## Miscellaneous  \n### Electron update  \nIn this release, we updated from Electron 1.7.12 to 2.0.5. This brings in a Chromium update from version 58 to 61 and Node.js from 7.9 to 8.9.",
    "url": "https://code.visualstudio.com/updates/v1_26#_electron-update",
    "id": 815
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n## New Documentation  \n### Logpoints blog post  \nYou can read Kenneth's recent [blog post](https://code.visualstudio.com/blogs/2018/07/12/introducing-logpoints-and-auto-attach) to learn about Node.js debugging Logpoints and auto-attach. [Logpoints](https://code.visualstudio.com/docs/editor/debugging#_logpoints) let you quickly output logging information without changing source code or interrupting your debugging session.",
    "url": "https://code.visualstudio.com/updates/v1_26#_logpoints-blog-post",
    "id": 816
  },
  {
    "content": "See what is new in the Visual Studio Code July 2018 Release (1.26)  \n### IntelliCode FAQ  \nIf you are a Python developer, have a look at [IntelliCode](https://learn.microsoft.com/visualstudio/intellicode/FAQ), a new tool that enhances software development using artificial intelligence (AI). The [IntelliCode extension](https://go.microsoft.com/fwlink/?linkid=2006060) provides a set of AI-assisted capabilities for IntelliSense in Python, such as inferring the most relevant auto-completions based on the current source code context.  \n![IntelliCode extension](images/1_26/intellicode-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_26#_intellicode-faq",
    "id": 817
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Custom title bar and menus on Windows and Linux  \nAlso over the past few iterations, we have been working to improve the look and feel as well as usability of the title bar and menus on Windows and Linux. This iteration, we are removing the preview label with an aim to make this the default experience on Windows soon. To enable this feature, you can set the setting `\"window.titleBarStyle\"` to `\"custom\"`.  \n![Custom Title Bar and Menus](images/1_27/custom_tb_menus.png)  \nThe new experience comes with several advantages over the default:  \n* Themable title bar, menu bar, and context menus throughout the product. This means your dark theme stays dark!\n* Better keyboard navigation in the menu bar. We have made it easier to switch between menus with the keyboard and use menu mnemonics.\n* A less intrusive menu bar. The new experience is more compact and less jarring when setting `\"window.menuBarVisibility\"` to `\"toggle\"`.\n* Better accessibility. Several accessibility issues have been resolved to improve menu usability with a screen reader.  \nAs we want to make this new experience the default on Windows, we encourage you to try it out and send us your feedback so we can provide the best possible experience.",
    "url": "https://code.visualstudio.com/updates/v1_27#_custom-title-bar-and-menus-on-windows-and-linux",
    "id": 819
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Breadcrumbs improvements  \nWe have tweaked the new breadcrumbs bar, made various improvements, and fixed bugs:  \n* Focused document symbols are now highlighted in the editor.\n* Breadcrumbs are automatically enabled when the focus command (`kb(breadcrumbs.focus)`) is run.\n* Breadcrumbs work a lot better with themes.\n* Breadcrumbs now honor the file excludes configuration.  \n![Breadcrumbs Highlights](images/1_27/picker-highlights.gif)",
    "url": "https://code.visualstudio.com/updates/v1_27#_breadcrumbs-improvements",
    "id": 820
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### New Terminal menu  \nThe **Tasks** menu was renamed to **Terminal** and some more entries for the Integrated Terminal were added.  \n![Terminal Menu](images/1_27/terminal-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_27#_new-terminal-menu",
    "id": 821
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Platform specific keybindings  \nIt's now possible to enable keyboard shortcuts for specific operating systems using `isLinux`, `isMac` and `isWindows` within a keybinding's `when` clause:  \n```json\n[\n{\n\"key\": \"ctrl+o\",\n\"command\": \"workbench.action.files.openFolder\",\n\"when\": \"!isMac\"\n},\n{\n\"key\": \"cmd+o\",\n\"command\": \"workbench.action.files.openFolder\",\n\"when\": \"isMac\"\n}\n]\n```  \nThis makes it much easier to share your `keybindings.json` file across different machines.",
    "url": "https://code.visualstudio.com/updates/v1_27#_platform-specific-keybindings",
    "id": 822
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Open window as new native tab  \nA new macOS-only command, `workbench.action.newWindowTab`, opens a window as new native tab. `newWindowTab` does not have a default keybinding and needs the setting `window.nativeTabs` to be enabled.",
    "url": "https://code.visualstudio.com/updates/v1_27#_open-window-as-new-native-tab",
    "id": 823
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Files no longer close when deleted/renamed externally  \nWe changed the default of the `workbench.editor.closeOnFileDelete` setting from `true` to `false`. This means that a file that has been deleted or renamed outside of VS Code (or by another program like Git or command from the Integrated Terminal) will no longer close a file that is opened as editor tab. Instead, the file will indicate that it has been deleted from disk and you can just save the file to restore it.  \n![Deleted from Disk](images/1_27/deleted-from-disk.png)  \n**Note:** Unless the file is dirty, the contents of the file are not preserved between restarts.",
    "url": "https://code.visualstudio.com/updates/v1_27#_files-no-longer-close-when-deleted/renamed-externally",
    "id": 824
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Middle click to open file in a new editor  \nNow it is possible to use the middle mouse click in the Explorer view to open a file in a new editor and not reuse the previous editor in [preview mode](https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode).",
    "url": "https://code.visualstudio.com/updates/v1_27#_middle-click-to-open-file-in-a-new-editor",
    "id": 825
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Accessibility improvements  \nWe have fixed  quite some accessibility issues - mostly around keyboard navigation, screen reader support, and focus. The full list can be found [here](https://github.com/microsoft/vscode/issues?q=is%3Aissue+label%3Aaccessibility+milestone%3A%22August+2018%22+is%3Aclosed). This is an ongoing effort which we plan to continue in September.",
    "url": "https://code.visualstudio.com/updates/v1_27#_accessibility-improvements",
    "id": 826
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Improved Windows background update  \nWe've done some stability work on our custom Windows background updater, in order to address issues resulting in broken installations for some users. This is a continuous work item with more improvements in upcoming releases.",
    "url": "https://code.visualstudio.com/updates/v1_27#_improved-windows-background-update",
    "id": 827
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n## Editor  \n### Auto closing & surrounding characters  \nWhen typing certain brackets like `{`, `[` or `(`, depending on the programming language, they will get auto-closed by default when they are followed by specific characters that typically cannot start an expression, for example `;:.,=}])>`. This behavior can be customized with the `editor.autoClosingBrackets` setting. Similarly, it is possible to customize the auto closing behavior while typing quotes like `\"`, `'` or `` ` `` with `editor.autoClosingQuotes`.  \nWhen text is selected and you type one of these characters, the selection will be surrounded by brackets or quotes. It is now possible to adjust this behavior separately via the new `editor.autoSurround` setting.",
    "url": "https://code.visualstudio.com/updates/v1_27#_auto-closing-&-surrounding-characters",
    "id": 828
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n## Languages  \n### Path completion for CSS imports  \nPath completion for CSS, SCSS and Less `@import` is now available. SCSS partial `@import` is handled as well.  \n![css-import](images/1_27/css-import.gif)",
    "url": "https://code.visualstudio.com/updates/v1_27#_path-completion-for-css-imports",
    "id": 829
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Jump to definition for CSS links  \nThere is now jump to definition for `@import` and `url()` links in CSS, SCSS and Less.  \n![css-definition](images/1_27/css-definition.gif)",
    "url": "https://code.visualstudio.com/updates/v1_27#_jump-to-definition-for-css-links",
    "id": 830
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### JSON  \nThe built-in JSON language extension now supports the new [JSON Schema Draft-07](https://json-schema.org/draft-07/json-schema-release-notes.html).  \nThe most interesting addition are the `if`, `then`, `else` keywords to allow conditional schema evaluation.  \n```json\n{\n\"type\": \"integer\",\n\"minimum\": 1,\n\"maximum\": 1000,\n\"if\": { \"minimum\": 100 },\n\"then\": { \"multipleOf\": 100 },\n\"else\": {\n\"if\": { \"minimum\": 10 },\n\"then\": { \"multipleOf\": 10 }\n}\n}\n```  \nThe `if` keyword means that, if the result of the value schema passes validation, apply the `then` schema, otherwise apply the `else` schema.",
    "url": "https://code.visualstudio.com/updates/v1_27#_json",
    "id": 831
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### HTML  \nThe HTML formatter has been updated to version 1.8.1 of [JS Beautifier](https://jsbeautifier.org/).  \nThis adds a new option to the `\"html.format.wrapAttributes\"` settings:  \n* `\"aligned-multiple\"` will wrap attributes when the maximum line length is reached and aligns all wrapped lines with the first attribute.  \n![aligned-multiple](images/1_27/aligned-multiple.png)",
    "url": "https://code.visualstudio.com/updates/v1_27#_html",
    "id": 832
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### TypeScript 3.0.3  \nVS Code now ships with TypeScript 3.0.3. This minor release fixes a number of bugs and improves stability. You can read about the complete set of changes [here](https://github.com/microsoft/TypeScript/milestone/76?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_27#_typescript-3.0.3",
    "id": 833
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n## Debugging  \n### Loaded Scripts view now reusable  \nFor more than a year, the [Loaded Scripts Explorer](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_access-loaded-scripts) in the Debug view was contributed by the Node.js debug extension and was not available to other debuggers. In this release, we've added the Loaded Scripts view as a built-in debugger feature. All debug extensions that have the notion of \"scripts\" will be able to support access to their scripts in a dynamically updated view.  \nIn addition, we've improved some shortcomings of the old Loaded Scripts Explorer:  \n* Chains of single-child folders are now collapsed into a single node. This makes it much easier to drill down into deep but sparse folder hierarchies.\n* We've started to address accessibility issues.",
    "url": "https://code.visualstudio.com/updates/v1_27#_loaded-scripts-view-now-reusable",
    "id": 834
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Middle click to remove breakpoints  \nNow it is possible to use the middle mouse click in the breakpoints view to easily remove a breakpoint.",
    "url": "https://code.visualstudio.com/updates/v1_27#_middle-click-to-remove-breakpoints",
    "id": 835
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Change the default for \"openDebug\" to open on every session start  \nFor new users, it can sometimes be confusing when you start a debug session and the debug view does not open automatically every time. If the user is not yet familiar with the UI, they don't know what keywords to look for in order to open the UI. To avoid confusion, we changed the default of `debug.openDebug` to be `openOnSessionStart` so that the debug view opens on every session start, not only on the first (which was the previous default behavior).",
    "url": "https://code.visualstudio.com/updates/v1_27#_change-the-default-for-opendebug-to-open-on-every-session-start",
    "id": 836
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n## Extension Authoring  \n### Extension logging  \nThe `ExtensionContext` that comes as an argument of the `activate` function has a new property [`logPath`](https://github.com/microsoft/vscode/blob/526f4c149211773357b2ce9f62c2a9973612a16a/src/vs/vscode.d.ts#L4541-L4546). This is the absolute file path of a directory where extensions can store log files. The path is unique for an extension and not reused by other extensions.",
    "url": "https://code.visualstudio.com/updates/v1_27#_extension-logging",
    "id": 837
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Language Server Protocol  \nA new version of the Language Server Protocol is available and includes the corresponding node modules for use with VS Code.  \nThe new version has support for:  \n* Code Action kind announcements from the server to allow clients to populate corresponding menu entries.\n* An implementation for a [`textDocument/prepareRename`](https://microsoft.github.io/language-server-protocol/specification#textDocument_prepareRename).\n* Support for file operations (create, rename and delete) in [Workspace Edits](https://microsoft.github.io/language-server-protocol/specification#workspace_applyEdit).",
    "url": "https://code.visualstudio.com/updates/v1_27#_language-server-protocol",
    "id": 838
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### `vscode-languageclient`: JSON log format and log streaming  \nPreviously, when building Language Server extensions using `vscode-languageclient`, you could specify `[langId].trace.server` to send [LSP logs](https://code.visualstudio.com/docs/extensions/example-language-server#_logging-support-for-language-server) into a VS Code output channel.  \n`[langId].trace.server` can now output logging information in a machine-readable [JSON format](https://github.com/microsoft/language-server-protocol-inspector#log-format):  \n```json\n\"languageServerExample.trace.server\": {\n\"format\": \"json\", // or \"text\"\n\"verbosity\": \"verbose\" // or \"off\" | \"messages\"\n}\n```  \nThis opens up interesting use cases, such as streaming LSP logs into an [LSP Inspector](https://marketplace.visualstudio.com/items?itemName=octref.lsp-inspector-webview) to visualize the behavior of a Language Server:  \n![lsp-streaming](images/1_27/log-streaming.gif)  \nYou can learn more about it in [Microsoft/language-server-protocol-inspector](https://github.com/microsoft/language-server-protocol-inspector) and [lsp-log-streaming-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-log-streaming-sample).",
    "url": "https://code.visualstudio.com/updates/v1_27#_vscode-languageclient:-json-log-format-and-log-streaming",
    "id": 839
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Debug extensions: Built-in Loaded Scripts view  \nThe Loaded Scripts Explorer is now a built-in component of the VS Code debugger. In order to use it, a debugger extension needs to change its debug adapter in the following way:  \n* Add a `supportsLoadedSourcesRequest` capability with a value `true` to the `Capabilities` returned from the `initialize` request.\n* Implement the `loadedSources` request by returning the current set of loaded sources.\n* Send out `loadedSource` events for newly loaded or unloaded sources.",
    "url": "https://code.visualstudio.com/updates/v1_27#_debug-extensions:-built-in-loaded-scripts-view",
    "id": 840
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### New theme colors  \nThere is a new theme color for breadcrumbs:  \n* `breadcrumb.background`: Background color of breadcrumb items.  \nThere are new theme colors for the settings editor:  \n* `settings.dropdownListBorder`: Border color of the new dropdown control.\n* `settings.modifiedItemIndicator`: The color of the line that indicates a modified setting.",
    "url": "https://code.visualstudio.com/updates/v1_27#_new-theme-colors",
    "id": 841
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Git extension API  \nThe Git extension has started to [expose a more defined API](https://github.com/microsoft/vscode/blob/release/1.27/extensions/git/src/api/git.d.ts). This API can be used from any other extension to interact the open Git repositories in a user's workspace. Since it is still in its preliminary stages, we will continuously improve the API in the upcoming releases.",
    "url": "https://code.visualstudio.com/updates/v1_27#_git-extension-api",
    "id": 842
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Comment providers  \nWe are introducing the concept of comments this iteration, which allow extensions to create and manage conversations within editors and a new **Comments** panel. This enables extensions to support code review scenarios.  \nComments are organized into threads and associated with a particular document.  \n```ts\nexport enum CommentThreadCollapsibleState {\nCollapsed = 0,\nExpanded = 1\n}\n\ninterface CommentThread {\nthreadId: string;\nresource: Uri;\nrange: Range;\ncomments: Comment[];\ncollapsibleState?: CommentThreadCollapsibleState;\n}\n\ninterface Comment {\ncommentId: string;\nbody: MarkdownString;\nuserName: string;\ngravatar: string;\ncommand?: Command;\n}\n```  \nTo display comments, an extension must register a `DocumentCommentProvider` or `WorkspaceCommentProvider`.  \n```ts\nexport interface CommentThreadChangedEvent {\nreadonly added: CommentThread[];\nreadonly removed: CommentThread[];\nreadonly changed: CommentThread[];\n}\n\ninterface CommentInfo {\nthreads: CommentThread[];\ncommentingRanges?: Range[];\n}\n\ninterface DocumentCommentProvider {\nprovideDocumentComments(document: TextDocument, token: CancellationToken): Promise<CommentInfo>;\ncreateNewCommentThread(document: TextDocument, range: Range, text: string, token: CancellationToken): Promise<CommentThread>;\nreplyToCommentThread(document: TextDocument, range: Range, commentThread: CommentThread, text: string, token: CancellationToken): Promise<CommentThread>;\nonDidChangeCommentThreads: Event<CommentThreadChangedEvent>;\n}\n\ninterface WorkspaceCommentProvider {\nprovideWorkspaceComments(token: CancellationToken): Promise<CommentThread[]>;\nonDidChangeCommentThreads: Event<CommentThreadChangedEvent>;\n}\n```  \nUsing the `DocumentCommentProvider`, comments can be returned for open documents. When providing comments, the extension specifies both the current threads on the document, and what range of the document supports adding new comments. Comments can be added or replied to from within the document.  \n![A comment within an editor](images/1_27/document_comment.png)  \nWhen a `WorkspaceCommentProvider` is first registered, the `CommentsPanel` becomes visible and shows all comments provided to it. Comments are grouped by comment thread and resource. When a comment is selected in the panel, the comments `command` is run, so the extension determines the behavior.  \n![Comments panel](images/1_27/comments_panel.png)",
    "url": "https://code.visualstudio.com/updates/v1_27#_comment-providers",
    "id": 843
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n## Engineering  \n### Extensions and webpack  \nWe are now using [webpack](https://webpack.js.org) to bundle extensions. It unlocks two achievements: (1) reduce the startup time for extensions because there are fewer files to load and less source to parse and (2) reduce the install time because fewer files need to be extracted and written to disk. So far, we've reduced the bundle size by ~4000 files!",
    "url": "https://code.visualstudio.com/updates/v1_27#_extensions-and-webpack",
    "id": 844
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### Performance canary  \nWe have added a test harness to ensure that our startup performance isn't regressing. There is a new script that can be deployed to dedicated machines to test the performance of Insider builds. The script simply installs the latest build and makes sure that it starts within a time limit. For now, we started with Windows because performance is often affected by updates to anti-virus software but the plan is to test on all platforms we support.",
    "url": "https://code.visualstudio.com/updates/v1_27#_performance-canary",
    "id": 845
  },
  {
    "content": "See what is new in the Visual Studio Code August 2018 Release (1.27)  \n### IPC stack improvements  \nWe've improved our homegrown IPC stack to [support byte buffer messages](https://github.com/microsoft/vscode/pull/56820) between processes. This enables certain scenarios such as sending binary data between our different processes without overhead as well as allowing us to optimize IPC for performance.",
    "url": "https://code.visualstudio.com/updates/v1_27#_ipc-stack-improvements",
    "id": 846
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### File icons per file type  \nOn macOS and Windows, VS Code registers as the default editor for well-known file types. VS Code now ships custom icons for the some of the common VS Code file types. These icons will show up in the OS explorer when the size of the icons is configured to be medium to large. For small icon sizes, we decided to preserve the VS Code logo as the icon.  \n![File Icons](images/1_28/file-icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_28#_file-icons-per-file-type",
    "id": 848
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Project level snippets  \nSnippets can now be scoped to a project and shared with your team. Simply use the **Preferences: Configure User Snippets** command or create `*.code-snippets` file in the `.vscode` folder. Project snippets work just like other snippets, they show up in IntelliSense and in the **Insert Snippet** action where they now have their own category.  \n![Project Level Snippet](images/1_28/project-snippet.jpg)  \nSnippets also now support multiple prefixes. If you cannot decide if your copyright header snippet should be prefixed as `header`, `stub`, or `copyright`, you can have them all. Simply use a string array as the `prefix` property.  \n```json\n{\n\"prefix\": [ \"header\", \"stub\", \"copyright\"],\n\"body\": \"Copyright. Foo Corp 2028\",\n\"description\": \"Adds copyright...\",\n\"scope\": \"javascript,typescript\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_28#_project-level-snippets",
    "id": 849
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Symbolic links support when opening folder  \nFor a long time, VS Code has been resolving the symbolic link to a folder when opening. This meant that even though the symbolic link was there for a reason, VS Code was ignoring it and always opened the resolved link path. We have decided to change this behavior and preserve the symbolic link.  \n**Note:** Certain features will work with reduced functionality when opening a folder as a symbolic link (for example [debugging](https://github.com/microsoft/vscode/issues/57954) and [Git integration](https://github.com/microsoft/vscode/issues/5970)).",
    "url": "https://code.visualstudio.com/updates/v1_28#_symbolic-links-support-when-opening-folder",
    "id": 850
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Record and search keyboard shortcuts  \nIn the Keyboard Shortcuts editor (`kb(workbench.action.openGlobalKeybindings)`), you can now search for keybindings just by typing keystrokes instead of typing out the key name (example 'shift'). Turn on the **Recording Keys** mode and type the keystrokes you want to search for.  \n![Record Keys](images/1_28/record-keybindings.gif)  \nYou can also enter into the **Recording Keys** mode using `kb(keybindings.editor.recordSearchKeys)`. Press the `Esc` key to exit from **Recording Keys** mode.",
    "url": "https://code.visualstudio.com/updates/v1_28#_record-and-search-keyboard-shortcuts",
    "id": 851
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Toggle panel changes  \nWe decided to revisit the behavior of our commands for toggling panels (Terminal, Output, Problems, Debug Console). You can follow issue [19400](https://github.com/microsoft/vscode/issues/19400) for the background on the change.  \nThe **old** behavior was:  \n* Panel shows if not visible.\n* Panel hides if visible.  \nThe **new** behavior is:  \n* Panel shows if not visible.\n* Panel hides if having keyboard focus.\n* Panel gets focused when visible but not focused.  \nTo get back the previous behavior, you can configure a keybinding to close the panel when the related panel is active.  \nFor example, for Output panel:  \n```json\n{\n\"key\": \"cmd+shift+u\",\n\"command\": \"workbench.action.closePanel\",\n\"when\": \"activePanel==workbench.panel.output\"\n}\n```  \nThe list of panel identifiers is:  \n* `terminal` - Integrated Terminal\n* `workbench.panel.markers` - Problems panel\n* `workbench.panel.output` - Output panel\n* `workbench.panel.repl` - Debug Console panel",
    "url": "https://code.visualstudio.com/updates/v1_28#_toggle-panel-changes",
    "id": 852
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Copy Relative Path  \nThe command to copy a file path as relative path is now more prominently exposed in the context menus of the File Explorer as well as editor tabs.  \n![Copy Relative Path](images/1_28/copy-relative-path.png)",
    "url": "https://code.visualstudio.com/updates/v1_28#_copy-relative-path",
    "id": 853
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Exclude recently opened files from Quick Open  \nA new setting `search.quickOpen.includeHistory` allows you to control if files that were recently opened should be part of the Quick Open file picker. By default, files that were recently opened will appear to the top of the search and other files from the workspace below. If you would prefer to not see recently opened files on top, you can change this setting to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_28#_exclude-recently-opened-files-from-quick-open",
    "id": 854
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Disable trash when deleting files  \nIf you are seeing issues when deleting files from the Explorer when they move to the OS trash, you can now set `files.enableTrash` to `false` to never use the OS trash when deleting. Doing so will change the **Delete** action and keybinding on the File Explorer to bypass the OS trash and delete permanently. You will still see a prompt before the delete happens.",
    "url": "https://code.visualstudio.com/updates/v1_28#_disable-trash-when-deleting-files",
    "id": 855
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Prompt to open workspace file if detected  \nWhen opening a folder that contains one or more `.code-workspace` files in the root, VS Code now shows a notification to ask if you'd like to open the workspace file instead. Opening a workspace file will usually provide a better experience than just opening the folder. You can learn more about multi-root workspaces in our [documentation](https://code.visualstudio.com/docs/editor/multi-root-workspaces).  \n![Workspace file prompt](images/1_28/workspace-prompt.png)",
    "url": "https://code.visualstudio.com/updates/v1_28#_prompt-to-open-workspace-file-if-detected",
    "id": 856
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Do not restore view state when reopening a file  \nVS Code has always remembered the view state (cursor location, folded sections, etc.) of a file even after the file was closed. There is now a new setting `workbench.editor.restoreViewState` to drop this view state when a file is closed. This allows you to always start at the top of the file after reopening it.",
    "url": "https://code.visualstudio.com/updates/v1_28#_do-not-restore-view-state-when-reopening-a-file",
    "id": 857
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Close a file across all editor groups  \nA new command **Close Editor in all Groups** (`workbench.action.closeEditorInAllGroups`) allows you to close the currently active file across all editor groups.",
    "url": "https://code.visualstudio.com/updates/v1_28#_close-a-file-across-all-editor-groups",
    "id": 858
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Problems panel  \n**Show error codes**  \nThe Problems panel now shows the error code of a problem if it has any.  \n![Problems panel shows error codes](images/1_28/problem-code.png)  \n**Improved keyboard navigation**  \nThe Problems panel has become more keyboard friendly:  \n* You can start typing to filter when the panel has focus.\n* You can use `kb(problems.action.focusFilter)` to give focus to the filter box and `kb(problems.action.focusProblemsFromFilter)` to give focus to the problem list from the filter box.",
    "url": "https://code.visualstudio.com/updates/v1_28#_problems-panel",
    "id": 859
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Output channel for telemetry events  \nIn the July release, we added a feature where all telemetry events sent by VS Code also get logged to a local file when you set the log level to **Trace** using the **Developer: Set Log Level...** command. You can now view the contents of this file in the **Log (Telemetry)** channel of the Output panel. As before, you can view the file directly, using the **Developer: Open Log File...** command.",
    "url": "https://code.visualstudio.com/updates/v1_28#_output-channel-for-telemetry-events",
    "id": 860
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Give focus to a custom view  \nYou can now use a command to give focus to a custom view. There is a separate command provided for each custom view.  \n![Custom view focus commands](images/1_28/custom-view-focus-commands.png)",
    "url": "https://code.visualstudio.com/updates/v1_28#_give-focus-to-a-custom-view",
    "id": 861
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Linux URL handling  \nOnce a feature limited to Windows and macOS, now you can also open VS Code URLs on Linux! These URLs are useful for many different features such as automatically installing extensions, for example `vscode-insiders:extension/vscodevim.vim`.",
    "url": "https://code.visualstudio.com/updates/v1_28#_linux-url-handling",
    "id": 862
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Editor  \n### Tab completion  \nEditor Tab completion can now complete all kind of suggestions. After setting `\"editor.tabCompletion\": \"on\"`, pressing `kbstyle(Tab)` will complete any prefix, not just snippets. Also, pressing `kb(insertNextSuggestion)` will insert the next suggestion and `kb(insertPrevSuggestion)` will insert the previous suggestion.  \n![Tab completion](images/1_28/tabcompletion.gif)",
    "url": "https://code.visualstudio.com/updates/v1_28#_tab-completion",
    "id": 863
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Navigate to last edit location  \nA new command **Go to Last Edit Location** (`workbench.action.navigateToLastEditLocation`) was added to quickly navigate to the last location in a file that was edited. The default keybinding is `kb(workbench.action.navigateToLastEditLocation)`.",
    "url": "https://code.visualstudio.com/updates/v1_28#_navigate-to-last-edit-location",
    "id": 864
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Save without formatters  \nThe new command **Save without Formatting** (`workbench.action.files.saveWithoutFormatting`) can be used to save a file without triggering any of the save participants (for example, formatters, remove trailing whitespace, final newline). The default keybinding is `kb(workbench.action.files.saveWithoutFormatting)`. This is useful when editing files outside your normal projects, which may have different formatting conventions.",
    "url": "https://code.visualstudio.com/updates/v1_28#_save-without-formatters",
    "id": 865
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### IntelliSense locality bonus  \nSuggestions can now be sorted based on their distance to the cursor. Set `\"editor.suggest.localityBonus\": true` and you'll see, for example, function parameters showing up at the top of the IntelliSense list.  \n![Locality bonus](images/1_28/locality-bonus.png)",
    "url": "https://code.visualstudio.com/updates/v1_28#_intellisense-locality-bonus",
    "id": 866
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Emmet  \nWe have made a few improvements to the Emmet features this iteration:  \n* If you have enabled Emmet in JavaScript files, then you can now have Emmet abbreviation expansion inside the `<script>` tags in an HTML file.\n* The **Emmet: Wrap with Abbreviation** feature is no longer restricted to files with the `.html` extension.\n* The **Emmet: Balance (inward)** feature now works on current node even if there is no selection.\n* The [bug](https://github.com/microsoft/vscode/issues/56082) of wrongfully considering CSS selectors with a `#` in SCSS files as valid abbreviations is now fixed.",
    "url": "https://code.visualstudio.com/updates/v1_28#_emmet",
    "id": 867
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Source Control  \n### Change SCM commit keybinding  \nYou can now change the default keybinding to accept a commit message in the SCM view, using the `scm.acceptInput` command.",
    "url": "https://code.visualstudio.com/updates/v1_28#_change-scm-commit-keybinding",
    "id": 868
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### SCM status bar tracks active file  \nThe SCM Status Bar contribution in the bottom left now tracks whichever repository the currently active file belongs to. This reduces confusion when editing files across your multi-folder workspace.",
    "url": "https://code.visualstudio.com/updates/v1_28#_scm-status-bar-tracks-active-file",
    "id": 869
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Git integration  \n### Better handling of deletion conflicts  \nDeletion conflicts have always been detected by VS Code. Now there is a better UI flow for handling them, you will see the undeleted version when opening the change and you get to decide what happens to the file when staging it: keep it or delete it.  \n![Keep or delete deletion conflicts](images/1_28/deleted.gif)",
    "url": "https://code.visualstudio.com/updates/v1_28#_better-handling-of-deletion-conflicts",
    "id": 870
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Configure long commit message warning threshold  \nThe `git.inputValidationLength` setting now lets you configure how long a commit message must be before a warning appears as you edit it.",
    "url": "https://code.visualstudio.com/updates/v1_28#_configure-long-commit-message-warning-threshold",
    "id": 871
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Add folder to workspace after 'git init'  \nAfter initializing a Git repository, VS Code will now ask you whether you'd like to add it to the current workspace.",
    "url": "https://code.visualstudio.com/updates/v1_28#_add-folder-to-workspace-after-'git-init'",
    "id": 872
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Configure branch validation rules  \nYou can now control how branch name validation works with the powerful `git.branchValidationRegex` and `git.branchWhitespaceChar` settings. See issue [50241](https://github.com/microsoft/vscode/issues/50241) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_28#_configure-branch-validation-rules",
    "id": 873
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Always rebase when running Sync  \nThe `git.rebaseWhenSync` setting will let you configure the **Sync** command to always use rebase instead of merge when running.",
    "url": "https://code.visualstudio.com/updates/v1_28#_always-rebase-when-running-sync",
    "id": 874
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Disable progress reporting  \nWith the `git.showProgress` setting, you can now disable showing progress during Git operations.",
    "url": "https://code.visualstudio.com/updates/v1_28#_disable-progress-reporting",
    "id": 875
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Push --force  \nThere are times in your development day-to-day in which you just feel like taking a risk. Running `git push --force` is a great example! VS Code now lets you forcefully push commits to a remote without the need to go into a terminal. Use the `git.allowForcePush`, `git.useForcePushWithLease` and `git.confirmForcePush` settings to control this behavior. See issue [53286](https://github.com/microsoft/vscode/pull/53286) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_28#_push---force",
    "id": 876
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Stash apply  \nThe following `git stash apply` commands are now featured in the global Command Palette: **Git: Apply Stash...**, **Git: Apply Latest Stash**.",
    "url": "https://code.visualstudio.com/updates/v1_28#_stash-apply",
    "id": 877
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Always visible Staged Changes section  \nYou can now always keep the **Staged Changes** section visible in the SCM view, even when empty, using the `git.alwaysShowStagedChangesResourceGroup` setting:  \n![Staged changes visible](images/1_28/staged.png)",
    "url": "https://code.visualstudio.com/updates/v1_28#_always-visible-staged-changes-section",
    "id": 878
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Terminal  \n### Define keybindings to send custom sequences  \nThe new command `workbench.action.terminal.sendSequence` has been added which lets you send custom sequences directly to the active terminal. This allows things like sending arrow keys, enter, etc. using the `\\u` format for sending Unicode characters.  \n```json\n{\n\"key\": \"ctrl+u\",\n\"command\": \"workbench.action.terminal.sendSequence\",\n\"args\": { \"text\": \"\\u001b[1;5D\\u007f\" }\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_28#_define-keybindings-to-send-custom-sequences",
    "id": 879
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Find improvements  \nFind in the terminal has been improved and now behaves more like find in the editor:  \n* Support for regex, case sensitivity and match word.\n* The standard find next/previous keybindings (F3, shift+F3) now work.\n* Find results that are wrapped across lines are returned.",
    "url": "https://code.visualstudio.com/updates/v1_28#_find-improvements",
    "id": 880
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Languages  \n### TypeScript 3.1  \nVS Code 1.28 ships with [TypeScript 3.1.1](https://devblogs.microsoft.com/typescript/announcing-typescript-3-1/). This release brings new language features such [mappable tuple and array types](https://devblogs.microsoft.com/typescript/announcing-typescript-3-1/#mappable-tuple-and-array-types), along with a number of tooling improvements, and bug fixes.",
    "url": "https://code.visualstudio.com/updates/v1_28#_typescript-3.1",
    "id": 881
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Rename import path  \nRealize that an imported file could use a better name? Now can you rename the referenced file just by renaming the import:  \n![Renaming an JavaScript import to rename a file](images/1_28/ts-rename-import.gif)",
    "url": "https://code.visualstudio.com/updates/v1_28#_rename-import-path",
    "id": 882
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Convert to async function  \nThe new **Convert to async function** suggestion for JavaScript and TypeScript rewrites functions that use `.then` Promise chaining to use `async` and `await`:  \n![Converting a promise chain to an async function](images/1_28/ts-convert-to-async.gif)  \n> Note that this feature requires that the setting `javascript.validate.enable` is set to true.",
    "url": "https://code.visualstudio.com/updates/v1_28#_convert-to-async-function",
    "id": 883
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### New settings for JS/TS suggestions  \nWe've cleaned up the settings names for JavaScript and TypeScript suggestions, and added a few additional settings that provide finer grained control:  \n* All suggestion related settings are now under `javascript.suggest.*` and `typescript.suggest.*`.\n* `typescript.useCodeSnippetOnMethodSuggest` has be renamed to `javascript.suggest.completeFunctionCalls` and `typescript.suggest.completeFunctionCalls`.\n* `javascript.nameSuggestions` has been renamed to `javascript.suggest.names`.\n* `typescript.autoImportSuggestions.enabled` has been renamed to `javascript.suggest.autoImports` and `typescriptscript.suggest.autoImports`.\n* The new `javascript.suggest.enabled` and `typescript.suggest.enabled` let you completely disable JS or TS suggestions.",
    "url": "https://code.visualstudio.com/updates/v1_28#_new-settings-for-js/ts-suggestions",
    "id": 884
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Semicolon as a commit character for JS/TS  \nSemicolon is now a commit character for JavaScript and TypeScript suggestions. This means that you can accept that current suggestion just by typing `;`. Existing commit characters also include `.` and `(`.  \nYou can disable commit characters by setting `\"editor.acceptSuggestionOnCommitCharacter\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_28#_semicolon-as-a-commit-character-for-js/ts",
    "id": 885
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### HTML and CSS path completion excludes dot files  \nFiles that start with `.` are now excluded from path completion results.",
    "url": "https://code.visualstudio.com/updates/v1_28#_html-and-css-path-completion-excludes-dot-files",
    "id": 886
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Better Markdown folding  \nMultiline lists, fenced code blocks, and raw HTML are now foldable in Markdown files:  \n![Folding Markdown code blocks and lists](images/1_28/markdown-folding.gif)",
    "url": "https://code.visualstudio.com/updates/v1_28#_better-markdown-folding",
    "id": 887
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Markdown preview now opens links to local files in the preview  \nIn the Markdown preview, clicking on a link to a local file will now open that file's preview:  \n![Local file link open in preview](images/1_28/markdown-preview-link.gif)  \nThis makes browsing documentation easier. Use the `markdown.preview.openMarkdownLinks` setting to configure how links are handled. Valid settings values are:  \n* `inEditor` - Open local Markdown links in an editor.\n* `inPreview` - Open local Markdown links in the current preview. This is new default behavior.",
    "url": "https://code.visualstudio.com/updates/v1_28#_markdown-preview-now-opens-links-to-local-files-in-the-preview",
    "id": 888
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Extensions  \n### Search filtering improvements  \nYou can now use the `@category` filter along with other filters for installed extensions like `@installed`, `@enabled`, `@disabled` and `@outdated` to compose your extension search query. For example, you could search for installed themes, using the query `@installed @category:themes` or installed extensions that contribute snippets, using `@installed @category:snippets`.",
    "url": "https://code.visualstudio.com/updates/v1_28#_search-filtering-improvements",
    "id": 889
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Disabled extensions not counted as outdated  \nThe badge on the Activity Bar for the Extensions view that shows the count of outdated extensions will now exclude disabled extensions. The intention of this badge was to let you know that there are outdated extensions that you may want to update. Since disabled extensions aren't currently being used, including them in the count would only be a distraction.",
    "url": "https://code.visualstudio.com/updates/v1_28#_disabled-extensions-not-counted-as-outdated",
    "id": 890
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Extension Host unresponsive  \nVS Code executes extensions in a separate process called the **Extension Host**. This process communicates with the renderer/UI process using message passing. We have added better tracking of the messages to the Extension Host and if a message is not acknowledged within 10 seconds, we will show the following notification:  \n![Extension Host Unresponsive](images/1_28/extension-host-unresponsive.png)  \n**What does it mean**: Most likely an extension is doing CPU intensive operations that end up **blocking the Extension Host process for more than 10 seconds**.  \n**What to do**: One option is to **wait** for the completion of the operation and simply ignore the notification. Another option is to **investigate** which extension is causing the high CPU usage by going to the **Running Extensions** view and [start profiling the Extension Host](https://github.com/microsoft/vscode/wiki/Performance-Issues#profile-the-running-extensions). You can then create an issue directly against the problematic extension. Finally, if you believe the extension has entered an infinite loop, and it does not appear that it will recover, you can **restart** the Extension Host.",
    "url": "https://code.visualstudio.com/updates/v1_28#_extension-host-unresponsive",
    "id": 891
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Engineering  \n### Extensions and webpack  \nWe have continued our [webpack](https://webpack.js.org) effort and now most of the bundled extensions are webpack'ed. As a re-fresher: this helps to reduce the startup time for extensions because there are fewer files to load and less source code to parse. It also helps to reduce the install time because fewer files need to be extracted and written to disk.  \nThis milestone we have trimmed the bundle by another 2803 files. In July we started with 9000 files, by August we were down to 4650, and in September we have 1847!",
    "url": "https://code.visualstudio.com/updates/v1_28#_extensions-and-webpack",
    "id": 892
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Miscellaneous  \n### Blurriness on macOS Mojave  \nIf you have updated to macOS 10.14 (Mojave), you might have noticed that fonts in VS Code look blurry if you are not using a high-DPI monitor.  \nA workaround for this is to run:  \n```bash\ndefaults write com.microsoft.VSCode.helper CGFontRenderingFontSmoothingDisabled -bool NO\n```  \nfrom a terminal followed by restarting your computer.  \nNote that this change is global for every application and not specific to VS Code. See issue [51132](https://github.com/microsoft/vscode/issues/51132) for the related discussion.",
    "url": "https://code.visualstudio.com/updates/v1_28#_blurriness-on-macos-mojave",
    "id": 893
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Electron update  \nIn this release, we updated from Electron 2.0.7 to 2.0.9. Most notably, this allows VS Code to run again on ArchLinux (issue [55934](https://github.com/microsoft/vscode/issues/55934)).",
    "url": "https://code.visualstudio.com/updates/v1_28#_electron-update",
    "id": 894
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n## Extension Authoring  \n### Handling URLs for uninstalled extensions  \n[Back in July](https://code.visualstudio.com/updates/v1_26#_uri-handler-api), we released the URI Handler API for extensions to handle system-wide URIs. With the latest release, VS Code can even handle URIs for extensions which are not yet installed. Once a user opens such a URI, VS Code will search for the extension in the Marketplace, propose the user to install it, and launch VS Code passing in the URI. This allows extensions to have a smooth startup flow which takes users from a webpage to running the extension with certain state.",
    "url": "https://code.visualstudio.com/updates/v1_28#_handling-urls-for-uninstalled-extensions",
    "id": 895
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Diagnostic error codes  \nSince diagnostic error codes are now surfaced in [Problems panel](#problems-panel), it is no longer necessary for extensions to add error codes to the [`Diagnostic.message`](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L4074) property.",
    "url": "https://code.visualstudio.com/updates/v1_28#_diagnostic-error-codes",
    "id": 896
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Better configuration when clauses  \nWhen authoring keybindings or menu visibility, [when clauses](https://code.visualstudio.com/api/references/when-clause-contexts) are used. In a when clause, you can reference a configuration (setting) value by prefixing it with `config.`, for example `config.editor.tabCompletion`. Only boolean configuration properties had been supported but with this release, you can also use string and number values.",
    "url": "https://code.visualstudio.com/updates/v1_28#_better-configuration-when-clauses",
    "id": 897
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Change the language of a text document  \nThere is a new API function to change the language mode of a document, `vscode.languages.setTextDocumentLanguage`. The API takes a document and the language [identifier](https://code.visualstudio.com/docs/languages/overview#_language-id) you want to use. To know what language ids are available, use `vscode.languages.getLanguages`.",
    "url": "https://code.visualstudio.com/updates/v1_28#_change-the-language-of-a-text-document",
    "id": 898
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### `workspaceContains` activation  \nExtensions can use the `workspaceContains` activation event to be activated when a workspace is opened that contains a file matching some pattern. For example, a PHP extension might ask to be activated when a workspace with a file matching `**/*.php` is opened. This isn't new, but users have pointed out that the search process can run for a long time and use a lot of CPU when a large workspace is opened.  \nWe made a couple changes to make these searches less impactful. The first is that these searches will now respect the users' `files.exclude`, `search.exclude`, and `search.useIgnoreFiles` settings. In other words, if the user is not able to find a file in a normal text search or file search via Quick Open, a `workspaceContains` pattern won't match on that file. This greatly reduces the number of files that we have to search for `workspaceContains`, and reduces incorrect activations when it matches a file that isn't really part of the project, for example, some file buried in `node_modules/`.  \nThe second change is to impose a 7 second limit on these searches. If the search has not completed after 7 seconds, we kill the search process and activate the extension anyway.  \nOverall, this should reduce cases of your laptop mysteriously heating up after opening a large workspace in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_28#_workspacecontains-activation",
    "id": 899
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### New theme colors  \nThere are new theme colors:  \n* `menu.separatorBackground`: Color of a separator menu item in menus.\n* `sideBarSectionHeader.border`: Side bar section header border color.\n* `inputValidation.infoForeground`: Input validation foreground color for information severity.\n* `inputValidation.warningForeground`: Input validation foreground color for warning severity.\n* `inputValidation.errorForeground`: Input validation foreground color for error severity.\n* `editor.snippetTabstopHighlightBackground`: Highlight background color of a snippet tabstop.\n* `editor.snippetTabstopHighlightBorder`: Highlight border color of a snippet tabstop.\n* `editor.snippetFinalTabstopHighlightBackground`: Highlight background color of the final tabstop of a snippet.\n* `editor.snippetFinalTabstopHighlightBorder`: Highlight border color of the final tabstop of a snippet.\n* `activityBar.inactiveForeground`: Activity bar item foreground color when it is inactive.",
    "url": "https://code.visualstudio.com/updates/v1_28#_new-theme-colors",
    "id": 900
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Debug API  \n**`resolveDebugConfiguration` needs to explicitly return `null` to open `launch.json`**  \nPreviously, if `resolveDebugConfiguration` returned a launch configuration that did not have a `type` attribute, VS Code would automatically open an underlying `launch.json` file. After feedback from extension authors, we decided to give extensions more control over this scenario.  \nNow `resolveDebugConfiguration` has to explicitly return the value `null` to prevent the debug session from starting and open `launch.json` instead. Returning the value `undefined` simply prevents the debug session from starting. As before, returning a configuration with a `type` attribute will start a debug session.",
    "url": "https://code.visualstudio.com/updates/v1_28#_debug-api",
    "id": 901
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Comment editing and deletion  \nIn the last iteration, we introduced the `DocumentCommentProvider` to allow extensions to create and manage comments within the editor. We have added [new methods](https://github.com/microsoft/vscode/blob/513025ed9e97c2fc04721d435bd88e5b4a2269ad/src/vs/vscode.proposed.d.ts#L779-L787) to this provider to support the editing and deletions of comments. Comments themselves now also have [flags](https://github.com/microsoft/vscode/blob/513025ed9e97c2fc04721d435bd88e5b4a2269ad/src/vs/vscode.proposed.d.ts#L724-L738) that indicate if they support edit or delete. If the extension sets one of these flag and provides an appropriate edit or delete method, actions to edit or delete the comment will be shown when hovering or focusing on a comment within the editor:  \n![Comment editing](images/1_28/comment_edit.gif)",
    "url": "https://code.visualstudio.com/updates/v1_28#_comment-editing-and-deletion",
    "id": 902
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### Using Azure Pipelines blog post  \nIn [Visual Studio Code using Azure Pipelines](https://code.visualstudio.com/blogs/2018/09/12/engineering-with-azure-pipelines), VS Code engineer Jo\u00e3o Moreno describes how VS Code is now using [Azure Pipelines](https://aka.ms/azurecicd) for its build and continuous integration (CI) infrastructure.",
    "url": "https://code.visualstudio.com/updates/v1_28#_using-azure-pipelines-blog-post",
    "id": 903
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### New PowerShell topic  \n[PowerShell in Visual Studio Code](https://code.visualstudio.com/docs/languages/powershell) shows the PowerShell integration through the Microsoft [PowerShell](https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell) extension. The extension supports powerful language features such as IntelliSense, Go to Definition, and Find All References as well as debugging and code snippets.",
    "url": "https://code.visualstudio.com/updates/v1_28#_new-powershell-topic",
    "id": 904
  },
  {
    "content": "See what is new in the Visual Studio Code September 2018 Release (1.28)  \n### New Python Django tutorial  \nThere is a new [Use Django in Visual Studio Code](https://code.visualstudio.com/docs/python/tutorial-django?utm_source=VsCode&utm_medium=ReleaseNotes) tutorial showing how you can quickly create, edit, and debug a Python [Django](https://www.djangoproject.com/) web application in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_28#_new-python-django-tutorial",
    "id": 905
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Backreferences and lookahead in search  \nIt is also now possible to use [backreferences](https://www.regular-expressions.info/backref.html) and [lookahead](https://www.regular-expressions.info/lookaround.html) assertions in regex searches, by setting `\"search.usePCRE2\": true`. This configures [ripgrep](https://github.com/BurntSushi/ripgrep) to use the [PCRE2](https://pcre.org/) regex engine. While PCRE2 supports many other features, we only support regex expressions that are still valid in JavaScript, because open editors are still searched using the editor's JavaScript-based search.  \n![Fancy regex search](images/1_29/pcre2.jpg)  \nIf you are still missing lookbehind assertions, don't worry! That feature is just recently supported by JavaScript and should come to VS Code in a later Electron shell update.",
    "url": "https://code.visualstudio.com/updates/v1_29#_backreferences-and-lookahead-in-search",
    "id": 907
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Show line numbers in search  \nWe've added a setting `search.showLineNumbers` which will display the line number for each match in the Search view.",
    "url": "https://code.visualstudio.com/updates/v1_29#_show-line-numbers-in-search",
    "id": 908
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Disable search and replace preview  \nThere is a new setting `search.useReplacePreview` which allows you to disable the preview diff that appears when doing a search/replace in the Search view.  \n![line numbers](images/1_29/linenumbers.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_disable-search-and-replace-preview",
    "id": 909
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Use global .gitignore file in search  \nGit allows you to configure a global `gitignore` file using the `core.excludesfile` config property. By default, search does not respect the global `gitignore` file, but you can now change this by enabling the new setting `search.useGlobalIgnoreFiles`.",
    "url": "https://code.visualstudio.com/updates/v1_29#_use-global-.gitignore-file-in-search",
    "id": 910
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Workbench  \n### macOS Mojave Dark Mode support  \nThe macOS Mojave Dark Mode is now better supported in VS Code. Previously, VS Code menus and dialogs would show with the default light theme, even if macOS was running in dark theme. Now, all native UI elements will show with the Dark Mode if enabled.  \n![macOS Mojave Dark Mode](images/1_29/mojave-dark.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_macos-mojave-dark-mode-support",
    "id": 911
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### macOS full screen support  \nA new setting `window.nativeFullScreen` was introduced that, if set to `false`, will enable full screen mode for VS Code that does not use the native macOS full screen feature. This has the advantage that entering full screen mode will not create a macOS space on the desktop. By default, VS Code will still use macOS native full screen.",
    "url": "https://code.visualstudio.com/updates/v1_29#_macos-full-screen-support",
    "id": 912
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### New default for `files.eol`: `auto`  \nThe `files.eol` end of line setting now has a new default value `auto`. When set to `auto`, the end of line character for new files is specific to the operating system. It is `\\r\\n` on Windows and `\\n` on macOS and Linux. You can also still explicitly set `file.eol` to `\\n` or `\\r\\n`.",
    "url": "https://code.visualstudio.com/updates/v1_29#_new-default-for-files.eol:-auto",
    "id": 913
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Highlight modified tabs  \nA new setting `workbench.editor.highlightModifiedTabs` displays a thick border at the top of editor tabs whenever the editor is dirty (has unsaved changes). This makes it easier to find files that need to be saved. The color of the border can be customized (see below).  \n![Highlight modified tabs](images/1_29/highlight-modified-tabs.gif)",
    "url": "https://code.visualstudio.com/updates/v1_29#_highlight-modified-tabs",
    "id": 914
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Centered editor layout auto resize  \nCentered layout view will now automatically resize to max width when more than 1 editor group is open. This should make centered layout easier to use and require less manual toggling. This behavior is controlled by a new setting `workbench.editor.centeredLayoutAutoResize` which is enable by default.",
    "url": "https://code.visualstudio.com/updates/v1_29#_centered-editor-layout-auto-resize",
    "id": 915
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Symbol order in Breadcrumbs  \nThere is a new setting that controls how symbols in the Breadcrumbs picker are ordered: `breadcrumbs.symbolSortOrder`.  \nAllowed values are:  \n* `position` - position in the file (default)\n* `name` - alphabetical order\n* `type` - symbol type order  \nThe example below shows the Breadcrumbs symbol list ordered by name:  \n![Breadcrumb picker ordered by name](images/1_29/breadcrumb-order.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_symbol-order-in-breadcrumbs",
    "id": 916
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Breadcrumbs and preview editors  \nWhen middle clicking items in the Breadcrumbs navigation, they now open in a new editor and don't reuse the preview editor. This behavior now matches middle clicking files in the Explorer.",
    "url": "https://code.visualstudio.com/updates/v1_29#_breadcrumbs-and-preview-editors",
    "id": 917
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Notifications automatically hide even when showing buttons  \nPreviously, VS Code would never hide notifications if they included buttons. This resulted in the potential for notifications to pile up in the lower right corner and cover parts of the editor. With this release, notifications are hidden after a timeout even if they show buttons.  \nThere are two exceptions:  \n* Notifications with `error` severity will not be hidden on the assumption that the user needs to take some action.\n* A few specific notifications from VS Code will remain open. For example, the notification that asks if you'd like to install an extension after browsing the VS Code Marketplace.  \n**Note:** Even if notifications are hidden, you can always access all notifications from the Notification Center, either by clicking on the little bell icon in the Status bar or via the **Show Notifications** (`notifications.toggleList`) command.",
    "url": "https://code.visualstudio.com/updates/v1_29#_notifications-automatically-hide-even-when-showing-buttons",
    "id": 918
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Panel position button to context menu  \nIn order to preserve horizontal space and reduce clutter, we removed the toggle Panel position button (**Move to Right**, **Move to Bottom**) from the Panel title area. The action is now available in the Panel title area context menu and also in **View** > **Appearance** > **Toggle Panel Position**  main menu. Another reason for removing this button was that we believe users set their layout once and don't normally toggle back and forth.  \n![Move panel](images/1_29/move-panel.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_panel-position-button-to-context-menu",
    "id": 919
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Updated file icons per file type  \nIn the [previous release](https://code.visualstudio.com/updates/v1_28#_file-icons-per-file-type), we added custom icons for common VS Code file types. We now added those icons to smaller views so they will appear in a list view.  \n![Updated file icons](images/1_29/file-icon-preview.gif)",
    "url": "https://code.visualstudio.com/updates/v1_29#_updated-file-icons-per-file-type",
    "id": 920
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Settings editor \"Modified in\" hint is now a link  \nIn the Settings editor, we show a hint when a setting is configured in a scope (User, Workspace) other than the currently selected scope. The other scope hint is now a link that will take you to the setting in the other scope.  \n![modified in link](images/1_29/modified-in-link.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_settings-editor-modified-in-hint-is-now-a-link",
    "id": 921
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Tree widget performance  \nThe VS Code tree widget control is used in many places in the VS Code UI but was hitting performance limits in some specific use cases (Problems panel, Outline view). We have been working on faster virtual tree widget implementations which can accommodate different levels of performance versus API convenience. You can read [here](https://github.com/microsoft/vscode/wiki/Lists-And-Trees) to learn more.  \nThe new `ObjectTree` widget is now being used in the Problems panel and we've already seen significant improvements. We were able to dramatically raise the number of problem items the workbench can handle as well as increase the speed of certain operations (such as **Collapse All**) and advanced filtering scenarios. These improvements now make it feasible to work with larger collection sizes.",
    "url": "https://code.visualstudio.com/updates/v1_29#_tree-widget-performance",
    "id": 922
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Workbench navigation commands  \nFour commands are added to improve workbench navigation:  \n* `workbench.action.nextSideBarView`: Go to next view in Side Bar.\n* `workbench.action.previousSideBarView`: Go to previous view in Side Bar.\n* `workbench.action.nextPanelView`: Go to next Panel.\n* `workbench.action.previousPanelView`: Go to previous Panel.  \nBy default, the commands do not have keyboard shortcuts.  \nTwo context keys, `sideBarFocus` and `panelFocus` were also added. This allows using the same keybinding for different commands in different Workbench areas:  \n```json\n[\n{ \"key\": \"cmd+]\", \"command\": \"workbench.action.nextEditor\" },\n{ \"key\": \"cmd+[\", \"command\": \"workbench.action.previousEditor\" },\n{\n\"key\": \"cmd+]\",\n\"command\": \"workbench.action.nextSideBarView\",\n\"when\": \"sideBarFocus\"\n},\n{\n\"key\": \"cmd+[\",\n\"command\": \"workbench.action.previousSideBarView\",\n\"when\": \"sideBarFocus\"\n},\n{\n\"key\": \"cmd+]\",\n\"command\": \"workbench.action.nextPanelView\",\n\"when\": \"panelFocus\"\n},\n{\n\"key\": \"cmd+[\",\n\"command\": \"workbench.action.previousPanelView\",\n\"when\": \"panelFocus\"\n}\n]\n```  \n![workbench-navigation](images/1_29/workbench-navigation.gif)",
    "url": "https://code.visualstudio.com/updates/v1_29#_workbench-navigation-commands",
    "id": 923
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Show view group parent  \nThe **Open View** command (`view` in Quick Open) now shows each view group's parent to better represent the view hierarchy. For example, the Explorer group now show as **Side Bar / Explorer**, and Terminal group as **Panel / Terminal**.  \n![structured-view](images/1_29/structured-view.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_show-view-group-parent",
    "id": 924
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Editor  \n### File and folder icons in IntelliSense  \nThe IntelliSense widget now shows file and folder icons for file completions based on your File Icon theme. This provides a unified look and helps you quickly identify different file types.  \n![File Icons in IntelliSense](images/1_29/completion-file-icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_file-and-folder-icons-in-intellisense",
    "id": 925
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Format Selection  \nTo speed up small formatting operations, the **Format Selection** command without an editor selection will now format the current line.",
    "url": "https://code.visualstudio.com/updates/v1_29#_format-selection",
    "id": 926
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Show error codes  \nThe editor now shows the error code of a problem if an error code is defined. The error code is displayed at the end of the line in square brackets.  \nBelow you can see that TypeScript is displaying the error code '2339':  \n![error codes](images/1_29/error-code.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_show-error-codes",
    "id": 927
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Integrated Terminal  \n### Split terminal can inherit working directory  \nA setting `terminal.integrated.splitCwd` was added to control the current working directory (cwd) of the new terminal when a terminal is split:  \n* `workspaceRoot` - The previous behavior; a new split terminal will use the workspace root as the working directory. In a multi-root workspace, a choice for which root folder to use is offered.\n* `initial` - A new split terminal will use the working directory that the parent terminal started with.\n* `inherited` - On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as `initial`.",
    "url": "https://code.visualstudio.com/updates/v1_29#_split-terminal-can-inherit-working-directory",
    "id": 928
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Cmd+Backspace to delete to the start of the line  \nA new keybinding was added on macOS for `Cmd+Backspace` which sends `\\u0015` (Ctrl+U) to the terminal. In bash, this deletes from the cursor to the start of the line, in zsh, it deletes the whole line.",
    "url": "https://code.visualstudio.com/updates/v1_29#_cmd+backspace-to-delete-to-the-start-of-the-line",
    "id": 929
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Experimental buffer improvements  \nA new setting `terminal.integrated.experimentalBufferImpl` allows changing how the terminal stores its buffer to a `TypedArray`/`ArrayBuffer`-based implementation. If you would like to opt-in, you can expect performance improvements across the board, including reduced memory usage and garbage collection, and an overall increase to the throughput of the terminal.  \n```json\n{\n\"terminal.integrated.experimentalBufferImpl\": \"TypedArray\"\n}\n```  \nThis is just the beginning, we're expecting further improvements to throughput and memory usage over the next couple of releases before making this the default implementation. A special thanks to [@jerch](https://github.com/jerch) from the [xterm.js](https://github.com/xtermjs/xterm.js) team, who has been the main driving force behind this [multi-month project](https://github.com/xtermjs/xterm.js/issues/791).",
    "url": "https://code.visualstudio.com/updates/v1_29#_experimental-buffer-improvements",
    "id": 930
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Tasks  \n### Clear terminal before executing task  \nA new property `clear` was added to the task `presentation` configuration. Set the `clear` property to `true` to clear the terminal before the task is run.",
    "url": "https://code.visualstudio.com/updates/v1_29#_clear-terminal-before-executing-task",
    "id": 931
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Debugging  \n### Collapsible stack frames  \nSometimes call stacks in the debugger contain stack frames which are not interesting to the user (external code, skipped files etc...). To reduce clutter and save on vertical space, we now render those uninteresting stack frames as collapsed.  \n![stack frames](images/1_29/stack-frames.gif)",
    "url": "https://code.visualstudio.com/updates/v1_29#_collapsible-stack-frames",
    "id": 932
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Improved Loaded Scripts view  \nIn this milestone, we updated the **Loaded Scripts** view to support file icons and added the capability to show **related resources** as child elements. Debug extensions can use this feature to show the source file(s) that were transpiled into a script.  \nThe following picture from the Node.js debugger shows the TypeScript source for JavaScript files (as available in source maps):  \n![loaded scripts view](images/1_29/loaded-scripts-view.png)  \nPlease note that the related resources feature requires opt-in by debug extensions. In the October release, only `node-debug` has experimental support for this feature for Node.js versions < 8.0 (aka \"legacy\").",
    "url": "https://code.visualstudio.com/updates/v1_29#_improved-loaded-scripts-view",
    "id": 933
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Multiple debug consoles  \nWhen debugging multiple debug sessions, we now show their output in different debug consoles. This makes it easier to distinguish which debug session is responsible for which output and evaluation.  \n![multiple debug consoles](images/1_29/multi-repl.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_multiple-debug-consoles",
    "id": 934
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Start debugging with stop on entry  \nFor Node.js debugging, we have added a new command **Debug: Start Debugging and Stop On Entry** (`extension.node-debug.startWithStopOnEntry`). Use this command if you would like to start debugging and immediately stop on the entry of your program. The default keybinding is `kb(extension.node-debug.startWithStopOnEntry)`. Note that is command is only available if your selected launch configuration is of type `node`.",
    "url": "https://code.visualstudio.com/updates/v1_29#_start-debugging-with-stop-on-entry",
    "id": 935
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Node debugging supports console.log styling  \nWhen debugging Node.js (or Chrome using the \"Debugger for Chrome\" extension), you can now style messages from `console.log` using `%c`, similar to what Chrome DevTools supports. Supported properties are `color`, `background`, `font-weight: bold`, and `text-decoration: underline`.  \n![console styles](images/1_29/console-styles.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_node-debugging-supports-console.log-styling",
    "id": 936
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Breakpoint widget expands to multiple lines  \nThe Breakpoint widget can now expand to multiple lines, use `Shift+Enter` to insert an additional line, or simply paste a multiline condition or log message. This should help when editing more complex conditions and log messages.  \n![breakpoint widget](images/1_29/breakpoint-widget.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_breakpoint-widget-expands-to-multiple-lines",
    "id": 937
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Languages  \n### TypeScript 3.1.4  \nThis release includes TypeScript 3.1.4, a small update that [fixes a few important bugs](https://github.com/microsoft/TypeScript/milestone/81?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_29#_typescript-3.1.4",
    "id": 938
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Markdown snippet improvements  \nThe built-in Markdown snippets, such as those for links and code blocks, now use the currently selected text by default. This allows you to [create keybindings](https://code.visualstudio.com/docs/getstarted/keybindings) that turn the currently selected text into a link or header:  \n```json\n{\n\"key\": \"cmd+k\",\n\"command\": \"editor.action.insertSnippet\",\n\"when\": \"editorTextFocus\",\n\"args\": {\n\"langId\": \"markdown\",\n\"name\": \"Insert link\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_29#_markdown-snippet-improvements",
    "id": 939
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### CSS Specificity in hover message  \nThe CSS hover now shows you the CSS [Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity).  \n![css-specificity](images/1_29/css-specificity.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_css-specificity-in-hover-message",
    "id": 940
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Handle unknown CSS properties  \nWith CSS pre-processors such as [PostCSS](https://postcss.org), you might use invalid properties that are compiled to valid properties during development time. The `[css/less/scss].lint.validProperties` setting prevents VS Code from marking those invalid properties as erroneous.",
    "url": "https://code.visualstudio.com/updates/v1_29#_handle-unknown-css-properties",
    "id": 941
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Improved CSS zero unit warning  \nCSS now lints [zero units](https://github.com/CSSLint/csslint/wiki/Disallow-units-for-zero-values#rule-details) used in CSS shorthand property values. For example, `0px` will now cause a warning.",
    "url": "https://code.visualstudio.com/updates/v1_29#_improved-css-zero-unit-warning",
    "id": 942
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Graceful handling of JSON schema loading error  \nIf VS Code is unable to download a JSON schema used for IntelliSense or error-checking JSON files, a warning will be shown in the Status Bar:  \n![json-schema-loading](images/1_29/json-schema-loading.gif)  \nIn the past, you would have seen an error in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_29#_graceful-handling-of-json-schema-loading-error",
    "id": 943
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Engineering  \n### Continued Electron 3.0 exploration  \nDuring this milestone, we continued to explore bundling Electron 3.0.0 into VS Code. This is a major Electron release and comes with Chrome 66 and Node.js 10.x (a major leap forward compared to our current version that has Chrome 61 and Node.js 8.x). We plan to push out the update to our Insiders users in the near future to gather additional feedback. If you are interested in helping out, make sure to install VS Code [Insiders](https://code.visualstudio.com/insiders).",
    "url": "https://code.visualstudio.com/updates/v1_29#_continued-electron-3.0-exploration",
    "id": 944
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Strict null checking core VS Code  \nThis milestone, we also [started work](https://github.com/microsoft/vscode/issues/60565) to enable TypeScript's [strict null checks](https://www.typescriptlang.org/docs/handbook/basic-types.html#null-and-undefined) in the core VS Code source. Strict null checks help catch many common programming mistakes and make the intent of the programmer more explicit. We've seen clear benefits using strict null checks for VS Code's built-in extensions.  \nSince VS Code's [core source](https://github.com/microsoft/vscode/tree/main/src) contains several thousand files, we are adopting strict null checking incrementally. We started by strict null checking files that have no imports and are now iteratively enabling strict null checks in files that only import other strict null checked files. This will continue until the entire code base is converted.  \nEnabling strict null checks is a major engineering effort but we think the payoff in terms of source code and product quality will be worth it. You can track our strict null checking progress [here](https://github.com/microsoft/vscode/issues/60565).",
    "url": "https://code.visualstudio.com/updates/v1_29#_strict-null-checking-core-vs-code",
    "id": 945
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Miscellaneous  \n### Low contrast menu bar  \nIf you are using Ubuntu 18.10 or a GTK theme that mixes light or dark context menus with the opposite theming for the application menu bar, you may experience a low contrast menu bar that is difficult to read.  \nThere are two possible workarounds for this:  \n* Try out the VS Code custom title bar style by configuring the setting `window.titleBarStyle` to `custom`.\n* Change your GTK theme. You can do this by installing the Gnome Tweaks application and using the previous default theme `Adwaita`.  \nInformation on this issue can be tracked in issue [62593](https://github.com/microsoft/vscode/issues/62593).",
    "url": "https://code.visualstudio.com/updates/v1_29#_low-contrast-menu-bar",
    "id": 946
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Electron update  \nIn this release, we updated from Electron 2.0.9 to 2.0.12.",
    "url": "https://code.visualstudio.com/updates/v1_29#_electron-update",
    "id": 947
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## Extension Authoring  \n### Normalized extension samples  \nThe VS Code extension samples at [vscode-extension-samples](https://github.com/microsoft/vscode-extension-samples) have been updated for consistency.  \nEach extension sample now includes:  \n* Uniform coding style and structure.\n* A README that explains the sample's functionality with a short animation.\n* A listing of the `vscode` API or Contribution Points used in each sample.",
    "url": "https://code.visualstudio.com/updates/v1_29#_normalized-extension-samples",
    "id": 948
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Bundling extensions  \nBundled extensions load faster. We therefore created a sample that shows how to [webpack an extension](\nhttps://github.com/microsoft/vscode-extension-samples/blob/main/webpack-sample/README.md).",
    "url": "https://code.visualstudio.com/updates/v1_29#_bundling-extensions",
    "id": 949
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Develop extensions without requiring a publisher  \nIn an effort to simplify initial extension development, the `publisher` field was removed from the [Yeoman Extension Generator](https://code.visualstudio.com/docs/extensions/yocode) template. For extensions without a `publisher` identifier, VS Code now loads them with `undefined_publisher` as their publisher. However, the `vsce` publishing tool will warn you if you are missing a valid publisher when attempting to publish extensions to the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_29#_develop-extensions-without-requiring-a-publisher",
    "id": 950
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Active terminal APIs  \nThe proposed APIs that give access to the active terminal, `window.activeTerminal` and `window.onDidChangeActiveTerminal`, are now stable.",
    "url": "https://code.visualstudio.com/updates/v1_29#_active-terminal-apis",
    "id": 951
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Notifications with buttons hide after a timeout  \nIf your extension is using the `showInformationMessage` or `showWarningMessage` API with the non-modal option and buttons, note that these notifications will now hide after a certain timeout. Only notifications triggered via `showErrorMessage` and having buttons will stay open as before. If you must get immediate input from the user or need to show a message prominently, you can still use `modal: true` as an option. This will bring up a modal dialog that blocks the user from doing anything until dismissed. We do however discourage overuse of this option because it interrupts the user.",
    "url": "https://code.visualstudio.com/updates/v1_29#_notifications-with-buttons-hide-after-a-timeout",
    "id": 952
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Custom views: Expand revealed elements  \nYou can now expand an element to reveal using the `expand` option in the `reveal` API. It also supports recursively expanding child elements by passing the number of levels.  \n**NOTE:** You can only expand to a maximum of 3 levels.  \n```typescript\n/**\n* Reveals the given element in the tree view.\n* If the tree view is not visible then the tree view is shown and element is revealed.\n*\n* By default revealed element is selected.\n* In order to not to select, set the option `select` to `false`.\n* In order to focus, set the option `focus` to `true`.\n* In order to expand the revealed element, set the option `expand` to `true`. To expand recursively set `expand` to the number of levels to expand.\n* **NOTE:** You can expand only to 3 levels maximum.\n*\n* **NOTE:** [TreeDataProvider](#TreeDataProvider) is required to implement [getParent](#TreeDataProvider.getParent) method to access this API.\n*/\nreveal(element: T, options?: { select?: boolean, focus?: boolean, expand?: boolean | number }): Thenable<void>;\n```",
    "url": "https://code.visualstudio.com/updates/v1_29#_custom-views:-expand-revealed-elements",
    "id": 953
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### New theme colors  \nThere are new theme colors:  \n* `tab.activeModifiedBorder`: Border on the top of modified (dirty) active tabs in an active group.\n* `tab.inactiveModifiedBorder`: Border on the top of modified (dirty) inactive tabs in an active group.\n* `tab.unfocusedActiveModifiedBorder`: Border on the top of modified (dirty) active tabs in an unfocused group.\n* `tab.unfocusedInactiveModifiedBorder`: Border on the top of modified (dirty) inactive tabs in an unfocused group.\n* `editor.stackFrameHighlightBackground`: Background color of the top debug stack frame highlight in the editor. By default this color is yellow.\n* `editor.focusedStackFrameHighlightBackground`: Background color of the focused debug stack frame highlight in the editor. By default this color is green.",
    "url": "https://code.visualstudio.com/updates/v1_29#_new-theme-colors",
    "id": 954
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Git extension API additions  \nThe [Git extension API](https://github.com/microsoft/vscode/blob/main/extensions/git/src/api/git.d.ts) has been updated to expose details on the actual [changes](https://github.com/microsoft/vscode/blob/ae5b8fb1978bfb595ec4821af0d61d32d80a177c/extensions/git/src/api/git.d.ts#L80:L91) each repository has.  \nAdditionally, the following methods have been exposed:  \n* [`push`](https://github.com/microsoft/vscode/blob/ae5b8fb1978bfb595ec4821af0d61d32d80a177c/extensions/git/src/api/git.d.ts#L155)\n* [`detectObjectType`](https://github.com/microsoft/vscode/blob/ae5b8fb1978bfb595ec4821af0d61d32d80a177c/extensions/git/src/api/git.d.ts#L124)\n* [`buffer`](https://github.com/microsoft/vscode/blob/ae5b8fb1978bfb595ec4821af0d61d32d80a177c/extensions/git/src/api/git.d.ts#L125)\n* [`clean`](https://github.com/microsoft/vscode/blob/ae5b8fb1978bfb595ec4821af0d61d32d80a177c/extensions/git/src/api/git.d.ts#L129)",
    "url": "https://code.visualstudio.com/updates/v1_29#_git-extension-api-additions",
    "id": 955
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Using Azure Pipelines for extension CI  \nWe've updated our documentation on [how to setup a continuous integration solution for your extension](https://code.visualstudio.com/docs/extensions/testing-extensions#_continuous-integration) using Azure Pipelines. The new guide provides a configuration with which you can run your extension tests simultaneously on Windows, macOS and Linux.  \n![Azure Pipelines CI results](images/1_29/pipelines.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_using-azure-pipelines-for-extension-ci",
    "id": 956
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Completion text insert rules  \nThere is a new proposed API to modify the insert behavior of completion items. By default, multiline completions get 're-formatted' to match in the indentation of the current line. Sometimes this indentation is unwanted and the new proposed API allows a completion to turn it off. `CompletionItemInsertTextRule` is a bitmask that has a `KeepWhitespace` rule that a completion can set.",
    "url": "https://code.visualstudio.com/updates/v1_29#_completion-text-insert-rules",
    "id": 957
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Custom views  \n**Collapse All action**  \nYou can add **Collapse All** action to your view by just setting `showCollapseAll` option to `true` while creating the `TreeView`.  \n```typescript\n/**\n* Options for creating a [TreeView](#TreeView]\n*/\nexport interface TreeViewOptions<T> {\n\n/**\n* A data provider that provides tree data.\n*/\ntreeDataProvider: TreeDataProvider<T>;\n\n/**\n* Whether to show collapse all action or not.\n*/\nshowCollapseAll?: boolean;\n}\n\nnamespace window {\n\nexport function createTreeView<T>(viewId: string, options: TreeViewOptions<T>): TreeView<T>;\n\n}\n```  \nVS Code provides the **Collapse All** functionality and shows it with same icon and location for all opted-in views.  \n![Collapse All](images/1_29/view-collapse-all.png)  \n**TreeItem label highlights**  \nYou can highlight the `TreeItem` label by providing ranges using the `highlights` option. Since it is a proposed API, you have to use `TreeItem2` to update highlights.  \n```typescript\n/**\n* Label describing the [Tree item](#TreeItem)\n*/\nexport interface TreeItemLabel {\n\n/**\n* A human-readable string describing the [Tree item](#TreeItem).\n*/\nlabel: string;\n\n/**\n* Ranges in the label to highlight. A range is defined as a tuple of two number where the\n* first is the inclusive start index and the second the exclusive end index\n*/\nhighlights?: [number, number][];\n\n}\n\nexport class TreeItem2 extends TreeItem {\n/**\n* Label describing this item. When `falsy`, it is derived from [resourceUri](#TreeItem.resourceUri).\n*/\nlabel?: string | TreeItemLabel | /* for compilation */ any;\n\n/**\n* @param label Label describing this item\n* @param collapsibleState [TreeItemCollapsibleState](#TreeItemCollapsibleState) of the tree item. Default is [TreeItemCollapsibleState.None](#TreeItemCollapsibleState.None)\n*/\nconstructor(label: TreeItemLabel, collapsibleState?: TreeItemCollapsibleState);\n}\n```  \n![Label highlights](images/1_29/view-label-highlights.png)",
    "url": "https://code.visualstudio.com/updates/v1_29#_custom-views",
    "id": 958
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Hide Source Control input box  \nThere is a new proposed API property on `SourceControlInputBox` instances which will let you hide the input box at the top of a source control provider UI view.  \n```typescript\nexport interface SourceControlInputBox {\n\n/**\n* Controls whether the input box is visible (default is  true`).\n*/\nvisible: boolean;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_29#_hide-source-control-input-box",
    "id": 959
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### SignatureHelpContext  \nThe [proposed](https://github.com/microsoft/vscode/issues/54972) `SignatureHelpContext` gives `SignatureHelpProviders` additional information about why signature help was requested:  \n```typescript\nexport interface SignatureHelpProvider {\nprovideSignatureHelp(document: TextDocument, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelp>;\n}\n```  \nThe `SignatureHelpContext` includes:  \n* What action caused signature help to be triggered\n* The trigger character (if any)\n* Was this was a re-trigger? (signature help was already showing)  \n```typescript\n/**\n* Contains additional information about the context in which a\n* [signature help provider](#SignatureHelpProvider.provideSignatureHelp) is triggered.\n*/\nexport interface SignatureHelpContext {\n/**\n* Action that caused signature help to be requested.\n*/\nreadonly triggerReason: SignatureHelpTriggerReason;\n\n/**\n* Character that caused signature help to be requested.\n*\n* This is `undefined` when signature help is not triggered by typing, such as when invoking signature help\n* or when moving the cursor.\n*/\nreadonly triggerCharacter?: string;\n\n/**\n* Whether or not signature help was previously showing when triggered.\n*\n* Retriggers occur when the signature help is already active and can be caused by typing a trigger character\n* or by a cursor move.\n*/\nreadonly isRetrigger: boolean;\n}\n\n/**\n* How a [Signature provider](#SignatureHelpProvider) was triggered\n*/\nexport enum SignatureHelpTriggerReason {\n/**\n* Signature help was invoked manually by the user or by a command.\n*/\nInvoke = 1,\n\n/**\n* Signature help was triggered by a trigger character.\n*/\nTriggerCharacter = 2,\n\n/**\n* Signature help was triggered by the cursor moving or by the document content changing.\n*/\nContentChange = 3,\n}\n```  \nAdditionally, the proposal allows `SignatureHelpProvider` to be registered with a set of `triggerCharacters` and a distinct set of `retriggerCharacters`:  \n```typescript\n\nexport interface SignatureHelpProviderMetadata {\nreadonly triggerCharacters: ReadonlyArray<string>;\nreadonly retriggerCharacters: ReadonlyArray<string>;\n}\n\nnamespace languages {\nexport function registerSignatureHelpProvider(\nselector: DocumentSelector,\nprovider: SignatureHelpProvider,\nmetadata: SignatureHelpProviderMetadata\n): Disposable;\n}\n```  \n`retriggerCharacters` only cause a signature help provider to be invoked if signature help is already showing.",
    "url": "https://code.visualstudio.com/updates/v1_29#_signaturehelpcontext",
    "id": 960
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### TypeScript TSLint plugin  \nThe new [TypeScript TSLint plugin](https://github.com/microsoft/typescript-tslint-plugin) enables TSLint as a TypeScript language service plugin. These plugins work in any editor that uses the TypeScript language service including VS Code, Visual Studio, Atom, and Sublime Text.  \nWe've also shipped [an extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin) that bundles the TypeScript TSLint plugin so that you don't have to configure the plugin in your workspace.",
    "url": "https://code.visualstudio.com/updates/v1_29#_typescript-tslint-plugin",
    "id": 961
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### GitHub Pull Requests  \nThis milestone we worked on improvements to the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension. The extension now supports editing and deleting comments, both within the editor and on the description page, and has better caching for comments that are not yet submitted. You can read the full release notes for the extension [here](https://github.com/microsoft/vscode-pull-request-github/releases).",
    "url": "https://code.visualstudio.com/updates/v1_29#_github-pull-requests",
    "id": 962
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n## New Documentation  \n### Deploy Python tutorials  \nThere are two new Python tutorials showing how to deploy Python web applications with VS Code.  \n* [Deploy Python using Docker containers](https://code.visualstudio.com/docs/python/tutorial-deploy-containers)\n* [Deploy Python using Azure App Service](https://code.visualstudio.com/docs/python/tutorial-deploy-app-service-on-linux)",
    "url": "https://code.visualstudio.com/updates/v1_29#_deploy-python-tutorials",
    "id": 963
  },
  {
    "content": "See what is new in the Visual Studio Code October 2018 Release (1.29)  \n### Debugging recipes  \nThere are new VS Code debugging [recipes](https://github.com/microsoft/vscode-recipes) for [PHP](https://github.com/microsoft/vscode-recipes/tree/main/PHP), [Python](https://github.com/microsoft/vscode-recipes/tree/main/debugging%20python), and [Ruby on Rails](https://github.com/microsoft/vscode-recipes/tree/main/debugging-Ruby-on-Rails).",
    "url": "https://code.visualstudio.com/updates/v1_29#_debugging-recipes",
    "id": 964
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Custom title and menu bar on Linux by default  \nOver several releases, we have been improving the accessibility and themability of menus on Windows via the custom title and menu bar. While it was optionally available on Linux, in this release it will now be enabled by default.  \n![Custom title and menu bar on Linux](images/1_30/custom-title-menu-linux.png)  \nTo use the native title bar, you can set the `window.titleBarStyle` to `native`.",
    "url": "https://code.visualstudio.com/updates/v1_30#_custom-title-and-menu-bar-on-linux-by-default",
    "id": 966
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Scrolling menus  \nWith the custom menu bar enabled, menus are restricted to being rendered within the VS Code window. Previously, menus could be cut off by the boundaries of the window. This has now been address by making context menus scrollable when needed.  \n![Scrolling menus](images/1_30/scrolling-menus.gif)",
    "url": "https://code.visualstudio.com/updates/v1_30#_scrolling-menus",
    "id": 967
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Menu bar overflow menu  \nThe menu bar also has a new overflow menu (**...**) when your window width is not enough for both the menu bar and your window title.  \n![Menu bar overflow](images/1_30/menu-bar-overflow.png)",
    "url": "https://code.visualstudio.com/updates/v1_30#_menu-bar-overflow-menu",
    "id": 968
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Moved Settings editor actions  \nThe Settings editor actions (**Open settings.json**, **Show modified settings**, etc.) have been moved from the **...** menu inside the Settings editor to the editor title bar. This makes them consistent with other editor types, and **Open settings.json** is now just one click away with the curly braces `{}` button. The Keyboard Shortcuts editor has made the same change.  \n![settings editor actions](images/1_30/settings-actions.png)",
    "url": "https://code.visualstudio.com/updates/v1_30#_moved-settings-editor-actions",
    "id": 969
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### References view  \nThe References view has been polished and is no longer a preview feature. There are now two commands:  \n* **Find All References** which opens the References view.\n* **Peek References** which opens references in a Peek view.  \nThe References view is hidden at startup but will remain visible once it has been used. If all search results are cleared, it shows a history of previous searches.  \n![References View](images/1_30/references-viewlet.png)  \nThere is now a results summary at the top of the view and a context menu to clear and copy results. Many bugs were fixed and the overall stability has been improved.",
    "url": "https://code.visualstudio.com/updates/v1_30#_references-view",
    "id": 970
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Editor  \n### Snippet comment variables  \nThere are new snippet variables that insert line or block comments, honoring the current language. Use `BLOCK_COMMENT_START` and  `BLOCK_COMMENT_END` for block comments and `LINE_COMMENT` otherwise.  \nThe snippet below inserts `/* Hello World */` in JavaScript files and `<!-- Hello World -->` in HTML files  \n```json\n{\n\"hello\": {\n\"scope\": \"javascript,html\",\n\"prefix\": \"hello\",\n\"body\": \"$BLOCK_COMMENT_START Hello World $BLOCK_COMMENT_END\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_30#_snippet-comment-variables",
    "id": 971
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Declaration versus definition  \nUntil now, VS Code offered commands for displaying the definition of a symbol, for example **Go to Definition** and **Peek Definition**. This didn't take into account the fact that some languages differentiate, stricter than others, between the **declaration** and the **definition** of a symbol. We have fixed that and there are now commands **Go to Declaration** and **Peek Declaration** for the declaration of a symbol.  \n![Go to Declaration](images/1_30/go-to-declaration.png)  \nThe data required for language features like **Go to Declaration** is computed by extensions and there is a new API, which you can read about in the [Extension Authoring](#extension-authoring) section.",
    "url": "https://code.visualstudio.com/updates/v1_30#_declaration-versus-definition",
    "id": 972
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Smooth cursor animation  \nThere is a new setting, `editor.cursorSmoothCaretAnimation`, which will enable a transition animation whenever the cursor is moved.",
    "url": "https://code.visualstudio.com/updates/v1_30#_smooth-cursor-animation",
    "id": 973
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Git integration  \n### Change default click action  \nYou can now change the default action when you click on a file in the Source Control view. By default, VS Code will open the Diff view but by setting `git.openDiffOnClick` to `false`, the file will open in a regular editor.",
    "url": "https://code.visualstudio.com/updates/v1_30#_change-default-click-action",
    "id": 974
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Push or sync on commit  \nA new setting `git.postCommitCommand` allows you to either push or sync your repository after a commit. The available values are `none` (default), `push`, and `sync`.",
    "url": "https://code.visualstudio.com/updates/v1_30#_push-or-sync-on-commit",
    "id": 975
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Languages  \n### TypeScript 3.2  \nVS Code now includes [TypeScript 3.2.2](https://devblogs.microsoft.com/typescript/announcing-typescript-3-2/). This release brings some exciting new language features, including [strict typing of `bind`, `call`, and `apply`](https://devblogs.microsoft.com/typescript/announcing-typescript-3-2/#strictbindcallapply), and [BigInt support](https://devblogs.microsoft.com/typescript/announcing-typescript-3-2/#bigint). The TypeScript update also fixes some important bugs and includes new tooling features and improvements",
    "url": "https://code.visualstudio.com/updates/v1_30#_typescript-3.2",
    "id": 976
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Improved display of JavaScript and TypeScript callbacks  \nJavaScript and TypeScript anonymous callbacks were all previously labeled as `<function>` in the Outline view, breadcrumbs view, and document symbol list. This made it impossible to tell which function you were really after:  \n![VS Code 1.29 with <function> entries in the Outline view](images/1_30/ts-old-callback-nav.png)  \nWith TypeScript 3.2+, VS Code now displays more context for callback functions so that you can tell them apart:  \n![VS Code 1.30 with much more helpful labels](images/1_30/ts-new-callback-nav.png)",
    "url": "https://code.visualstudio.com/updates/v1_30#_improved-display-of-javascript-and-typescript-callbacks",
    "id": 977
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Renames handle JS/TS destructuring properly  \nRenames now handle JavaScript and TypeScript destructuring and will introduce an alias if needed:  \n![Rename with destructuring](images/1_30/ts-rename.gif)",
    "url": "https://code.visualstudio.com/updates/v1_30#_renames-handle-js/ts-destructuring-properly",
    "id": 978
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Adding missing new JS/TS Quick Fix  \nForget a `new` when instantiating a class? TypeScript 3.2 brings a new Quick Fix to help out:  \n![The add missing 'new' quick fix](images/1_30/ts-new-quickfix.gif)  \nThis Quick Fix works in TypeScript and in [type checked JavaScript](https://code.visualstudio.com/docs/languages/javascript#_type-checking).",
    "url": "https://code.visualstudio.com/updates/v1_30#_adding-missing-new-js/ts-quick-fix",
    "id": 979
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### File icons for JS/TS path suggestions  \nBuilding on [work in VS Code 1.29](https://code.visualstudio.com/updates/v1_29#_file-and-folder-icons-in-intellisense), the IntelliSense widget now shows file icons for JavaScript and TypeScript path suggestions:  \n![Icons in path IntelliSense](images/1_30/ts-import-icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_30#_file-icons-for-js/ts-path-suggestions",
    "id": 980
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Highlighting of Markdown elements in JSDoc comments  \nFenced code blocks and other Markdown elements inside of JSDoc blocks are now syntax highlighted:  \n![JSDoc Syntax highlighting](images/1_30/ts-markdown-jsdocs.png)  \nThis inline highlighting better matches VS Code's Markdown rendering of JSDoc for hovers and IntelliSense documentation.",
    "url": "https://code.visualstudio.com/updates/v1_30#_highlighting-of-markdown-elements-in-jsdoc-comments",
    "id": 981
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Debugging  \n### Simplified initial debug configuration  \nThis milestone we looked into simplifying the generated `launch.json` file for our most popular debug extensions. Our goal was to make it easier for users to start and configure debugging. This meant hiding unnecessary launch configuration attributes and using the Quick Pick UI for better user interaction while generating the initial `launch.json`. More details about this effort can be found in [issue #62851](https://github.com/microsoft/vscode/issues/62851).",
    "url": "https://code.visualstudio.com/updates/v1_30#_simplified-initial-debug-configuration",
    "id": 982
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Debug consoles can be deleted  \nAs of last milestone when debugging multiple debug sessions, we show multiple debug consoles, one for each session. Now it is possible to delete these consoles when the corresponding session is no longer active by clearing the content of that debug console. We did not add explicit commands for managing the lifecycle of a debug console, because we believe the current approach will be more intuitive and easier to use.",
    "url": "https://code.visualstudio.com/updates/v1_30#_debug-consoles-can-be-deleted",
    "id": 983
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Improved user input variables for debug configurations  \nWe have improved and generalized the concept of `launch.json` variables that prompt for user input. You can find the details in the [Tasks](#improved-user-input-variables-for-task-and-debug-configurations) section.",
    "url": "https://code.visualstudio.com/updates/v1_30#_improved-user-input-variables-for-debug-configurations",
    "id": 984
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Debugging from the Process Explorer  \nIt's now possible to start debugging Node.js processes from the VS Code Process Explorer (**Developer: Open Process Explorer**) using the **Debug** context menu action.  \nBelow you can see attaching to a Node.js process started from the Integrated Terminal.  \n![debugging a Node.js process started from the terminal](images/1_30/debug-from-process-explorer.gif)",
    "url": "https://code.visualstudio.com/updates/v1_30#_debugging-from-the-process-explorer",
    "id": 985
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Node/Chrome debugging  \n### `smartStep` now enabled by default  \nA few releases ago, we [changed the behavior](https://code.visualstudio.com/updates/v1_26#_changed-smartstep-behavior-for-nodechrome-debugging) of `smartStep` to make it more useful. Using `smartStep` results in a much better debugging experience, especially for TypeScript, so we have changed the behavior to be always on.",
    "url": "https://code.visualstudio.com/updates/v1_30#_smartstep-now-enabled-by-default",
    "id": 986
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Automatic default for `localRoot`  \nIn Node.js remote debugging scenarios, the debug configuration attribute `localRoot` now automatically defaults to `${workspaceFolder}` and only `remoteRoot` needs to be specified.",
    "url": "https://code.visualstudio.com/updates/v1_30#_automatic-default-for-localroot",
    "id": 987
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Tasks  \n### Run on folder open  \nIf you have a task that you always run when you open a folder, you can configure it to run automatically when that folder is opened by configuring its `\"runOn\"` property. We found this useful for making sure no one breaks our new strict null checks in the VS Code repository. By adding `\"runOn\": \"folderOpen\"`, everyone who allows tasks to be run automatically will get markers when they violate the strict null check:  \n```json\n{\n\"type\": \"npm\",\n\"script\": \"strict-null-check-watch\",\n\"label\": \"TS - Strict Null Checks\",\n\"isBackground\": true,\n\"problemMatcher\": {\n\"base\": \"$tsc-watch\",\n\"owner\": \"typescript-strict-null\",\n\"applyTo\": \"allDocuments\"\n},\n\"runOptions\": {\n\"runOn\": \"folderOpen\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_30#_run-on-folder-open",
    "id": 988
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Clear task terminal  \nTo clear the terminal before executing a task, you can configure the task\u2019s `presentation` options with `\"clear\": true`.  \n```json\n{\n\"type\": \"gulp\",\n\"task\": \"tslint\",\n\"label\": \"Run tslint\",\n\"presentation\": {\n\"clear\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_30#_clear-task-terminal",
    "id": 989
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Rerun tasks  \nTasks can now be rerun using the **Tasks: Rerun Last Task** command (`workbench.action.tasks.reRunTask`). By default, a rerun task will re-evaluate its run variables, including its inputs. To use the variables that have already been evaluated in the previous run, configure the `\"reevaluateOnRerun\"` option:  \n```json\n{\n\"type\": \"gulp\",\n\"task\": \"tslint\",\n\"label\": \"Run tslint\",\n\"runOptions\": {\n\"reevaluateOnRerun\": false\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_30#_rerun-tasks",
    "id": 990
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Improved user input variables for task and debug configurations  \nFor a long time VS Code has supported [variable substitution](https://code.visualstudio.com/docs/editor/variables-reference) in `tasks.json` and `launch.json` via the `${variableName}` syntax.  \nFor `launch.json`, it was even possible to use variables that prompt for user input (for example `${command:pickNodeProcess}` which opens a Quick Pick based process picker). This feature was not available for `tasks.json` and the command based variables had other limitations too (see issues [#9297](https://github.com/microsoft/vscode/issues/9297), [#9544](https://github.com/microsoft/vscode/issues/9544), and [#30588](https://github.com/microsoft/vscode/issues/30588)).  \nIn this milestone, user input variables have been generalized and improved and they are now available for `launch.json` **and** `tasks.json`. This work has also brought the command syntax to `tasks.json`.  \nFor user input variables, we introduced a new variable category `input`, which results in this syntax: `${input:variableName}`. This simple syntax is not sufficient to present meaningful UI to the user, so we've introduced a new `inputs` section in `launch.json` and `tasks.json`, where additional configuration attributes are specified.  \nExample using Angular CLI:  \n![Tasks input](images/1_30/input-example.gif)  \nHere is the list of supported attributes:  \n* `id` - The corresponding variable name for which these attributes are used.\n* `type` - The type of user input widget. In this release, `promptString` (for a string InputBox) and `pickString` (for a string Quick Pick) are supported.\n* `description` - Descriptive text shown to the user.\n* `default` - The default value to use if the user just presses **Enter**.  \nA first example shows how to use a user input variable in a task configuration (`tasks.json`):  \n```json\n{\n\"tasks\": [\n{\n\"label\": \"Echo input\",\n\"type\": \"shell\",\n\"command\": \"echo ${input:echoPrompt}\"\n}\n],\n\"inputs\": [\n{\n\"id\": \"echoPrompt\",\n\"description\": \"Please enter a value\",\n\"default\": \"default echo text\",\n\"type\": \"promptString\"\n}\n]\n}\n```  \nAnother example shows a user input variable for selecting between two options in a debug configuration (`launch.json`):  \n```json\n{\n\"configurations\": [\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Launch Program\",\n\"program\": \"${workspaceFolder}/${input:pickProgram}\"\n}\n],\n\"inputs\": [\n{\n\"id\": \"pickProgram\",\n\"description\": \"Select client or server\",\n\"type\": \"pickString\",\n\"options\": [\"client.js\", \"server.js\"],\n\"default\": \"client.js\"\n}\n]\n}\n```  \nWe plan to combine **user input variables** with the existing command-based variables so that user input variables can be contributed by extensions.",
    "url": "https://code.visualstudio.com/updates/v1_30#_improved-user-input-variables-for-task-and-debug-configurations",
    "id": 991
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Extensions  \n### Install previous versions  \nYou can now go back to a previous version of an extension if there are issues with the current version. VS Code provides an **Install Another Version** action on an installed extension which shows a dropdown of available versions.  \n![Downgrade Extension](images/1_30/downgrade-Extension.gif)",
    "url": "https://code.visualstudio.com/updates/v1_30#_install-previous-versions",
    "id": 992
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Unresponsive extension host  \nVS Code runs extensions in a separate Node.js process \u2013 the extension host. This isolates extension code from VS Code itself, but it doesn\u2019t isolate different extensions from each other. Due to the single threaded nature of JavaScript, an extension can, willingly or not, monopolize the extension host thread, block all other extensions, and make operations appear unresponsive.  \nVS Code now monitors the extension host and when it becomes unresponsive, VS Code starts profiling the extension host. When an extension is identified as being the cause of the unresponsiveness, a minimized notification is shown that encourages the user to file an issue:  \n![Slow Extension Identified](images/1_30/exthost-slow-the-movie.gif)  \nAs a **user**, keep an eye on the bell icon in the Status Bar as the notification is small. As an **extension author**, if you receive an unresponsive issue, please review this [guide](https://github.com/microsoft/vscode/wiki/Explain:-extension-causes-high-cpu-load) which explains what has happened and how to open the CPU-profile attached to the issue.",
    "url": "https://code.visualstudio.com/updates/v1_30#_unresponsive-extension-host",
    "id": 993
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Network proxy support for extensions  \nThere is an experimental setting `Http: Proxy Support` for enabling network proxy support for all extensions. While we are still working on some of the details, we invite you to give it a try and [let us know](https://github.com/microsoft/vscode/issues/60773) if it works for you. (Note that enabling the network proxy support currently [breaks](https://github.com/microsoft/vscode/issues/64133) the GitHub Pull-Request extension's sign-in.)  \n![HTTP Proxy Support](images/1_30/http-proxy-support.png)  \nSetting it to `override` should work best for most setups, try `on` for comparison when that doesn't work well.",
    "url": "https://code.visualstudio.com/updates/v1_30#_network-proxy-support-for-extensions",
    "id": 994
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Extension Authoring  \n### Go To Declaration  \nWe have added a `DeclarationProvider` interface which extensions can implement to support the **Go to Declaration** feature. Declaration providers should return locations that are the declaration of a symbol. When multiple providers are registered for the same file, then their results are merged.",
    "url": "https://code.visualstudio.com/updates/v1_30#_go-to-declaration",
    "id": 995
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Signature Help Context  \nSignatureHelpProviders now take a `context` parameter that provides information about how signature help was triggered. The context includes:  \n* How signature help was triggered (trigger character, a command, or a document context change).\n* The character that caused signature help to be triggered.\n* Was signature help previously showing when it was triggered?  \n```typescript\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\nvscode.languages.registerSignatureHelpProvider('markdown', new class implements vscode.SignatureHelpProvider {\nprovideSignatureHelp(\ndocument: vscode.TextDocument,\nposition: vscode.Position,\ntoken: vscode.CancellationToken,\ncontext: vscode.SignatureHelpContext\n): vscode.ProviderResult<vscode.SignatureHelp> {\n// Return fake signature help result\nconst sigHelp = new vscode.SignatureHelp();\nsigHelp.activeParameter = 0;\nsigHelp.activeSignature = 0;\nsigHelp.signatures = [new vscode.SignatureInformation(getLabel(context))];\nreturn sigHelp;\n}\n}, {\ntriggerCharacters: ['('],\nretriggerCharacters: [',']\n});\n}\n\nfunction getLabel(context: vscode.SignatureHelpContext): string {\nconst parts = [];\n// How was signature help triggered\nswitch (context.triggerKind) {\ncase vscode.SignatureHelpTriggerKind.Invoke:            parts.push('invoke'); break;\ncase vscode.SignatureHelpTriggerKind.ContentChange:     parts.push('change'); break;\ncase vscode.SignatureHelpTriggerKind.TriggerCharacter:  parts.push('character'); break;\n}\n\n// The character (if any) that caused signature help to be triggered\nif (context.triggerCharacter) { parts.push(context.triggerCharacter) }\n\n// Was signature help already showing when it was triggered again?\nif (context.isRetrigger) { parts.push('retrigger') }\n\nreturn parts.join(' ');\n}\n```  \nAdditionally, SignatureHelpProviders can now be registered with a distinct set of trigger characters and re-trigger characters. Re-trigger characters only trigger signature help if is already showing.  \nHere's the above SignatureHelpProvider in action:  \n![The above signature help provider in action](images/1_30/api-sighelp-context.gif)",
    "url": "https://code.visualstudio.com/updates/v1_30#_signature-help-context",
    "id": 996
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Configuring contributed TypeScript server plugins  \nExtensions can now send configuration data to [contributed typescript server plugins](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributestypescriptserverplugins) through an API provided by VS Code's built-in TypeScript extension:  \n```typescript\n// In your VS Code extension\n\nexport async function activate(context: vscode.ExtensionContext) {\n// Get the TS extension\nconst tsExtension = vscode.extensions.gettsExtension('vscode.typescript-language-features');\nif (!tsExtension) {\nreturn;\n}\n\nawait tsExtension.activate();\n\n// Get the API from the TS extension\nif (!tsExtension.exports || !tsExtension.exports.getAPI) {\nreturn;\n}\n\nconst api = tsExtension.exports.getAPI(0);\nif (!api) {\nreturn;\n}\n\n// Configure the 'my-typescript-plugin-id' plugin\napi.configurePlugin('my-typescript-plugin-id', {\nsomeValue: process.env['SOME_VALUE']\n});\n}\n```  \nThe TypeScript server plugin receives the configuration data through an `onConfigurationChanged` method:  \n```typescript\n// In your TypeScript plugin\n\nimport * as ts_module from 'typescript/lib/tsserverlibrary';\n\nexport = function init({ typescript }: { typescript: typeof ts_module }) {\nreturn {\ncreate(info: ts.server.PluginCreateInfo) {\n// Create new language service\n},\nonConfigurationChanged(config: any) {\n// Receive configuration changes sent from VS Code\n},\n};\n};\n```  \nThis API allows VS Code extensions to synchronize VS Code settings with a TypeScript server plugin, or dynamically change the behavior of a plugin. Take a look at the [TypeScript TSLint plugin](https://github.com/microsoft/vscode-typescript-tslint-plugin/blob/main/src/index.ts) and [lit-html](https://github.com/mjbvz/vscode-lit-html/blob/master/src/index.ts) extensions to see how this API is used in practice.",
    "url": "https://code.visualstudio.com/updates/v1_30#_configuring-contributed-typescript-server-plugins",
    "id": 997
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Custom views  \nThe proposed API for adding a **Collapse All** action to your view is now stable.  \n**Tree Item Description**  \nYou can now add a description to your tree item using the `description` property in `TreeItem`. If the tree item is backed by a resource, you can also let VS Code derive the description from the resource by setting `description` to `true`.  \n```typescript\n/**\n* A human readable string which is rendered less prominently.\n* When `true`, it is derived from [resourceUri](#TreeItem.resourceUri), and when `falsy`, it is not shown.\n*/\ndescription?: string | boolean;\n```  \n![Tree Item Description](images/1_30/treeitem-description.png)",
    "url": "https://code.visualstudio.com/updates/v1_30#_custom-views",
    "id": 998
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Debugging API  \n**Richer DebugSession**  \nThe [`DebugSession`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8310) API now surfaces the workspace folder and the **resolved** debug configuration. Resolved means that all variables have been substituted and platform specific attribute sections have been \"flattened\" for the matching platform and removed for non-matching platforms.  \n**Unique ID for breakpoints**  \nThe [`Breakpoint`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8576) class now surfaces a unique ID (`id`) that doesn't change over its entire lifetime.  \n**Finalized API for controlling debug adapter creation**  \nIn this milestone, we have finalized the extension API for controlling the creation of debug adapters. The API uses a new [`DebugAdapterDescriptorFactory`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8471) which must be registered for a specific debug type with [`vscode.debug.registerDebugAdapterDescriptorFactory`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8702). The factory has a single method `createDebugAdapterDescriptor` which is called by VS Code whenever a debug adapter is needed. Since the debug session is passed as an argument (and the session now surfaces both the workspace folder and the resolved configuration), the implementation has access to the full context when being asked to create the debug adapter. `createDebugAdapterDescriptor` must return an object that describes to VS Code how to create and/or connect to the debug adapter:  \n* A `DebugAdapterExecutable` descriptor makes VS Code launch the debug adapter as an external process per session and communicate with it through stdin/stdout. An options property bag can specify the working directory and environment variables.\n* A `DebugAdapterServer` makes VS Code connect to a server process that handles multiple sessions and communicates via a socket.  \nPlease note: With the finalization of this API, we are deprecating the old (proposed) API [`DebugConfigurationProvider.debugAdapterExecutable`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.proposed.d.ts#L547) and the very old command-based approach (contribution point `Debuggers`, attribute: `adapterExecutableCommand`). Please move off those APIs as we plan to remove support for them in the next release.  \nThis snippet shows how this API can be used to run a debug adapter embedded in its containing extension:  \n```typescript\nlet server: Net.Server;\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\ncreateDebugAdapterDescriptor(session: DebugSession, executable: DebugAdapterExecutable) {\n// start server on launch of first debug session\nif (!server) {\n// start listening on a random port\nserver = Net.createServer(socket => {\nconst s = new MockDebugSession();\ns.setRunAsServer(true);\ns.start(<NodeJS.ReadableStream>socket, socket);\n}).listen(0);\n}\n// make VS Code connect to debug server instead of launching debug adapter\nreturn new DebugAdapterServer(server.address().port);\n}\n});\n```  \n**Finalized Debug Adapter Tracker API**  \nIn this milestone, we have finalized the extension API for tracking the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/) used between VS Code and debugger extensions. The API uses a new [`DebugAdapterTrackerFactory`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8522) which must be registered for a debug type with [`vscode.debug.registerDebugAdapterTrackerFactory`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8711). The factory has a single method `createDebugAdapterTracker` which is called by VS Code before it starts to communicate with the debug adapter. `createDebugAdapterDescriptor` must return an implementation of an [`DebugAdapterTracker`](https://github.com/microsoft/vscode/blob/a152a5c7818a13666a5879b4450eb26a4d45fbde/src/vs/vscode.d.ts#L8495) (or `undefined` to prevent tracking).  \nThis snippet shows how this API can be used to log the Debug Adapter Protocol for the Node.js debugger:  \n```typescript\nvscode.debug.registerDebugAdapterTrackerFactory('node', {\ncreateDebugAdapterTracker(session: DebugSession) {\nreturn {\nonWillReceiveMessage: m => console.log(`> ${JSON.stringify(m, undefined, 2)}`),\nonDidSendMessage: m => console.log(`< ${JSON.stringify(m, undefined, 2)}`),\n};\n}\n});\n```  \nTo ensure that the extension is activated when needed, an activation event `onDebugAdapterProtocolTracker:<debug type>` can be used in the `package.json`. If the debug type is omitted the extension is activated for all debug types.  \n```json\n{\n\"activationEvents\": [\n\"onDebugAdapterProtocolTracker:node\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_30#_debugging-api",
    "id": 999
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Debug Adapter Protocol  \n**New `shellProcessId` attribute for `runInTerminal` response**  \nIf a debug adapter needs to run a target in a terminal, it can use the DAP `runInTerminal` request. This request can optionally return the `processId` of the target process but in practice no frontend implementation has been able to supply this information. For this reason, we have introduced a new attribute `shellProcessId` for returning the process ID of the terminal shell (which is much simpler to determine).",
    "url": "https://code.visualstudio.com/updates/v1_30#_debug-adapter-protocol",
    "id": 1000
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Clipboard  \nThe clipboard API has been finalized and can now be used by all extensions. It allows extensions to copy and paste strings to the OS clipboard.",
    "url": "https://code.visualstudio.com/updates/v1_30#_clipboard",
    "id": 1001
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Completion items  \nWhen inserting a completion item that spans multiple lines, VS Code adjusts the indentation. This is not always wanted and therefore we added `vscode.CompletionItem.keepWhitespace` to control this behavior.",
    "url": "https://code.visualstudio.com/updates/v1_30#_completion-items",
    "id": 1002
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Labels for symbol providers  \nWhen registering a document symbol provider, a label (`DocumentSymbolProviderMetadata`) can now be provided. This label will be shown in breadcrumbs and the Outline view when a document has multiple symbol providers.",
    "url": "https://code.visualstudio.com/updates/v1_30#_labels-for-symbol-providers",
    "id": 1003
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Smart select and extensions  \nWe have added a proposed API to support the smart select feature. Today, when you run the **Expand Select** or **Shrink Select** command, selections ranges are computed based on a weak heuristic. While we are working to improve that heuristic, we also want to get extension authors involved. Therefore, we have added a proposed API for a [`SelectionRangeProvider`](https://github.com/microsoft/vscode/blob/86571ec5a50b5bce09db45f458b407b77a33674a/src/vs/vscode.proposed.d.ts#L21-L34).",
    "url": "https://code.visualstudio.com/updates/v1_30#_smart-select-and-extensions",
    "id": 1004
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n## Engineering  \n### WinJS-Promise removal  \nWhen VS Code started, JavaScript wasn't what it is today. For instance, there was no [native promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise) and back then the team decided to use `WinJS.Promise`. Fast forwarding to today, the situation is different: native promises are real and `WinJS.Promise` is obsolete.  \nBecause of that, we are in the progress of migrating away from `WinJS.Promise`. This is no easy undertaking because of differences in the API and the runtime behavior. We have started at around 10000 references to `WinJS.Promise` and are down to 1471, of which ~500 are instantiations and not plain type annotation. We are confident we will finish this epic journey soon!",
    "url": "https://code.visualstudio.com/updates/v1_30#_winjs-promise-removal",
    "id": 1005
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Continued Electron 3.0 exploration  \nDuring this milestone, we continued to explore bundling Electron 3.0.0 into VS Code. This is a major Electron release and comes with Chrome 66 and Node.js 10.x (a major leap forward compared to our current version that has Chrome 61 and Node.js 8.x). We plan to push out the update to our Insiders users in December to gather additional feedback. If you are interested in helping out, make sure to install VS Code [Insiders](https://code.visualstudio.com/insiders).",
    "url": "https://code.visualstudio.com/updates/v1_30#_continued-electron-3.0-exploration",
    "id": 1006
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Community issue tracking  \nThe community has helped us out periodically with issue tracking for a very long time. As we see more and more issues being filed (currently at an average of 70 per day), we have started to invite the community members that are most active to [add specific labels](https://github.com/microsoft/vscode/wiki/Community-Issue-Tracking) to the issues they are working on. Since GitHub doesn't have fine-grained permissions, we are using our issue bot to pick up on certain comments and add the labels for them. See the [Thank you](#thank-you) section below for acknowledgments.",
    "url": "https://code.visualstudio.com/updates/v1_30#_community-issue-tracking",
    "id": 1007
  },
  {
    "content": "See what is new in the Visual Studio Code November 2018 Release (1.30)  \n### Strict Null Checking  \nOur work to [strict null check the main VS Code codebase](https://github.com/microsoft/vscode/issues/60565) has continued. We are now strict null checking around 800 files, and will continuing with this work until the entire codebase is covered.  \nYou can track this engineering effort and learn more about the process [issue #60565](https://github.com/microsoft/vscode/issues/60565).",
    "url": "https://code.visualstudio.com/updates/v1_30#_strict-null-checking",
    "id": 1008
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Workbench  \n### New tree widget  \nWe have pushed our widget game to the next level: a new tree widget was created to address performance issues and enable us to provide more features in several workbench areas. The new tree widget was created through composition over our high-performance list widget. We intend to write a separate blog post about this engineering work and the performance improvements. For now, we'll focus on the features instead.  \n**Note:** The new tree was adopted in the File Explorer, all Debug trees, Search, and Peek References. The features described below apply to most of those UI areas, unless explicitly disabled by us.  \n**Improved keyboard navigation**  \nThere are now three different types of keyboard navigation in trees: `simple`, `highlight`, and `filter`. In both `highlight` and `filter`, typing in a tree will display a widget (control) at the top of the tree, which indicates that you are now navigating the tree:  \n![Keyboard navigation type filter](images/1_31/type-filter.gif)  \nThis widget can also be used to switch between the `highlight` and `filter` modes. You can configure a keybinding to execute the `list.toggleFilterOnType` command if you'd like a keyboard shortcut for switching between modes. The **Workbench > List: Keyboard Navigation** (`workbench.list.keyboardNavigation`) setting sets the default mode, including the `simple` mode in which typing the first few characters of a tree element simply focuses that element.  \nUsers who have single letter keybindings for list/tree actions can still use this feature by making use of the `listAutomaticKeyboardNavigation` context key. For example, the VIM extension sets this context key to `false` to disable automatic keyboard navigation and adds a keybinding `/` to the `list.toggleKeyboardNavigation` command, so users can just type `/` and navigate the tree. Learn more about this in the [VSCodeVIM pull request](https://github.com/VSCodeVim/Vim/pull/3432).  \nTheme authors can customize the widget's colors with the following new theme keys:  \n* `listFilterWidget.background`\n* `listFilterWidget.outline`\n* `listFilterWidget.noMatchesOutline`  \n**Note:** These keyboard navigation modes currently only work on **resolved** tree nodes. For example, in the File Explorer, if a folder was never expanded, the tree won't look for its children. We are considering several options to make this experience better.  \n**Hierarchical Select All**  \nPressing `Ctrl+A` (`Cmd+A` on macOS) in a tree will now expand the tree's selection in a hierarchical fashion.  \n![Hierarchical select all](images/1_31/select-all.gif)  \n**Customizable indentation**  \nYou can now customize the node indentation of all trees across the workbench using the **Workbench > Tree: Indent** (`workbench.tree.indent`) setting.  \n**Expand/Collapse All**  \nHolding the `Alt` key while expanding/collapsing tree nodes will now work recursively. Note that recursive expansion only works for nodes previously revealed in the tree. For example, the File Explorer will not automatically expand folders which were never expanded before by the user.  \n**Horizontal scrolling**  \nThe **Workbench > Tree: Horizontal Scrolling** (`workbench.tree.horizontalScrolling`) setting now enables horizontal scrolling on more trees and lists, namely Explorer, Search, SCM, Debug, etc.",
    "url": "https://code.visualstudio.com/updates/v1_31#_new-tree-widget",
    "id": 1010
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Problems panel  \n**Multi-line messages**  \nThe Problems panel now shows multi-line diagnostic messages in separate lines. The example below shows how a multi-line error message from TypeScript is now presented.  \n![Problems panel multi-line messages](images/1_31/problems-multi-line.gif)  \nYou can also toggle to show or hide the complete message using either the collapse/expand buttons or the **Problems: Show message in single line** and **Problems: Show message in multiple lines** commands.  \n**Trigger Code Actions using a keyboard shortcut**  \nYou can now trigger Code Actions from the Problems panel using the same default keyboard shortcut `kb(editor.action.quickFix)` as the Quick Fix command.",
    "url": "https://code.visualstudio.com/updates/v1_31#_problems-panel",
    "id": 1011
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Improved the Go menu  \nWe added more navigation actions to the **Go** menu to make them easier to discover:  \n![Go menu](images/1_31/go-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_improved-the-go-menu",
    "id": 1012
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Cut command in Explorer context menu  \nBased on popular request we have added the cut command to the Explorer context menu.  \n![Cut command in context menu](images/1_31/cut.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_cut-command-in-explorer-context-menu",
    "id": 1013
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Fast scrolling  \nPressing the `Alt` key enables fast scrolling in the editor and Explorers. By default, fast scrolling uses a 5X speed multiplier but you can control the multiplier with the **Editor: Fast Scroll Sensitivity** (`editor.fastScrollSensitivity`) setting.",
    "url": "https://code.visualstudio.com/updates/v1_31#_fast-scrolling",
    "id": 1014
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Zen Mode hides line numbers  \nTurning on Zen Mode will now also hide editor line numbers. This behavior can be controlled via `zenMode.hideLineNumbers` setting.",
    "url": "https://code.visualstudio.com/updates/v1_31#_zen-mode-hides-line-numbers",
    "id": 1015
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Added keyboard navigation in Linux with custom menus  \nOur custom menus now support the use of the `Page Up/Down` and `Home/End` keys to quickly jump to the beginning or end of the menu.",
    "url": "https://code.visualstudio.com/updates/v1_31#_added-keyboard-navigation-in-linux-with-custom-menus",
    "id": 1016
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Double-click the application icon to close in Windows/Linux  \nDue to technical tradeoffs, by default, the custom title bar on Window and Linux removes the functionality of double-clicking the application icon to close the window. The functionality can be regained by enabling the setting `window.doubleClickIconToClose` with the caveat that you will no longer be able to drag the window from this location or get the system context menu on Windows.",
    "url": "https://code.visualstudio.com/updates/v1_31#_double-click-the-application-icon-to-close-in-windows/linux",
    "id": 1017
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Closing order of editor tabs  \nA new setting `workbench.editor.focusRecentEditorAfterClose` allows you to change the order in which editor tabs are closed. By default, tabs will close in most recently used (MRU) order. Changing this setting allows closing tabs from right to left instead.",
    "url": "https://code.visualstudio.com/updates/v1_31#_closing-order-of-editor-tabs",
    "id": 1018
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### New title variables  \nThere are three new variables that can be used within the `window.title` setting:  \n* `${activeFolderShort}`: The name of the folder the file is contained in.\n* `${activeFolderMedium}`: The path of the folder the file is contained in, relative to the workspace folder.\n* `${activeFolderLong}`: The full path of the folder the file is contained in.",
    "url": "https://code.visualstudio.com/updates/v1_31#_new-title-variables",
    "id": 1019
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Output panel  \nSmart scrolling behavior in the Output panel is now more efficient. Scrolling is locked when you click anywhere in the Output panel and gets unlocked when you click in the last line.",
    "url": "https://code.visualstudio.com/updates/v1_31#_output-panel",
    "id": 1020
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Screencast Mode  \nThere is a new **Screencast Mode** in VS Code, which highlights the cursor position and keystrokes. Screencast Mode (**Developer: Toggle Screencast Mode**) can be useful for demonstration purposes.  \n![Screencast mode](images/1_31/screencast.gif)",
    "url": "https://code.visualstudio.com/updates/v1_31#_screencast-mode",
    "id": 1021
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Editor  \n### Smart Selections  \nWe have worked on improving the implementation of **Expand Selection** and **Shrink Selection** from the **Selections** menu. We are in the process of adding an API so that language servers can specify selection steps based on their semantics knowledge. In addition, we have improved the default implementation as well.  \n![Smart selection](images/1_31/smart-select-demo.gif)  \nStay tuned, there is more to come as smart select is improved. Use the [`smart-select`](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Asmart-select)-label to see what we are working on.",
    "url": "https://code.visualstudio.com/updates/v1_31#_smart-selections",
    "id": 1022
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### References history  \nThere is now a **References: Show History** command for the References view. It brings up Quick Pick with previous searches allowing speedy reruns of previous searches.  \n![Reference search history](images/1_31/ref-history.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_references-history",
    "id": 1023
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Reference CodeLens  \nWhen selecting a reference CodeLens, a peek editor opens. This can now be controlled with the `references.preferredLocation` setting. Its options are `peek` and `view`, the latter shows references in the new view.",
    "url": "https://code.visualstudio.com/updates/v1_31#_reference-codelens",
    "id": 1024
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Snippets descriptions  \nWhen authoring snippets with long descriptions, in the past you were forced to write a long single string. There was no support for using an array as you could for `body`. This has now changed and long descriptions can be written using string arrays.  \n```json\n{\n\"prefix\": \"happy\",\n\"body\": \"#Happy Coding!\",\n\"description\": [\n\"First Line\",\n\"Second Line\",\n\"Third Line\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_snippets-descriptions",
    "id": 1025
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Removed legacy search mode  \n20 releases ago, we started using [ripgrep](https://github.com/BurntSushi/ripgrep) for search in VS Code. Our old Node.js-based search implementation has still been available behind the setting `search.useLegacySearch`. But as Marie Kondo says, we must tidy up the things that no longer spark joy. If you have been using regex features like backreferences or lookahead, make sure to turn on the `search.usePCRE2` setting.",
    "url": "https://code.visualstudio.com/updates/v1_31#_removed-legacy-search-mode",
    "id": 1026
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Use simple text editor for editing settings as JSON  \nOn a similar theme, now that we have had a settings UI for several releases, we are looking into simplifying the JSON settings editing experience. If you edit settings as JSON by opening a `settings.json` file, or clicking the `{}` button in the settings UI, or invoking the **Preferences: Open User Settings (JSON)** command, then you will get a simple JSON editor instead of the split JSON editor that we had previously. You can still see the listing of default settings with the **Preferences: Open Default Settings (JSON)** command.  \nIf you really miss the split JSON editor with the default settings on the left, you can restore it by enabling the `workbench.settings.useSplitJSON` setting. Note that you will always be able to edit settings as JSON if that's what you prefer.",
    "url": "https://code.visualstudio.com/updates/v1_31#_use-simple-text-editor-for-editing-settings-as-json",
    "id": 1027
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Network proxy support for extensions  \nThe setting **Http: Proxy Support** (`http.proxySupport`) now enables network proxy support for all extensions by default.  \n![HTTP Proxy Support](images/1_31/http-proxy-support.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_network-proxy-support-for-extensions",
    "id": 1028
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Languages  \n### TypeScript 3.3  \nWe now ship with [TypeScript 3.3.1](https://devblogs.microsoft.com/typescript/announcing-typescript-3-3/). This TypeScript update brings some important bug fixes and polish.",
    "url": "https://code.visualstudio.com/updates/v1_31#_typescript-3.3",
    "id": 1029
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Removing the markdown.previewFrontMatter setting  \nThe `markdown.previewFrontMatter` setting has been removed. The Markdown preview now always hides YAML frontmatter (this was the default setting for `markdown.previewFrontMatter`).  \nMarkdown extensions such as [Markdown yaml Preamble](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-yaml-preamble) and [GitHub Markdown Preview](https://marketplace.visualstudio.com/items?itemName=bierner.github-markdown-preview) render frontmatter as a table in the preview.",
    "url": "https://code.visualstudio.com/updates/v1_31#_removing-the-markdown.previewfrontmatter-setting",
    "id": 1030
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Semantic selection  \nSemantic selection is now available for HTML, CSS/LESS/SCSS, and JSON:  \n![HTML, CSS, and JSON semantic selection](images/1_31/html-css-json-selection.gif)",
    "url": "https://code.visualstudio.com/updates/v1_31#_semantic-selection",
    "id": 1031
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Integrated Terminal  \n### Reflow support  \nThe terminal will now wrap and unwrap lines when it is resized horizontally.  \n![Text reflowing in the terminal](images/1_31/terminal-reflow.gif)",
    "url": "https://code.visualstudio.com/updates/v1_31#_reflow-support",
    "id": 1032
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### ConPTY support on Windows  \nManaging terminal processes via the Windows [ConPTY API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) is now available as an opt-in option in the Windows Insiders fast ring (build number 18309+).  \n```json\n{\n\"terminal.integrated.windowsEnableConpty\": true\n}\n```  \nThis will use the ConPTY system provided by the Windows Console team as the backend for the terminal. Enabling this should fix many issues with the Windows terminal, particularly around color support, interactive applications, and shells that natively support VT sequences.  \nHere's a before and after of 256 ANSI color support in a WSL terminal:  \n![256 colors without ConPTY don't work](images/1_31/terminal-conpty-before.png)  \n![256 colors with ConPTY do work](images/1_31/terminal-conpty-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_conpty-support-on-windows",
    "id": 1033
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Current working directory used for links  \nOn Linux and macOS, the terminal will now resolve links relative to the current working directory, not the initial directory of the terminal.  \n![After navigating into a directory, links relative to that path will work](images/1_31/terminal-cwd-links.gif)",
    "url": "https://code.visualstudio.com/updates/v1_31#_current-working-directory-used-for-links",
    "id": 1034
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Find in terminal improvements  \nFind in the terminal now supports incremental \"find-as-you-type\" searching, as well as the ability to find multiple terms on a single line.",
    "url": "https://code.visualstudio.com/updates/v1_31#_find-in-terminal-improvements",
    "id": 1035
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Improvements to commandsToSkipShell setting  \nPreviously, the setting `terminal.integrated.commandsToSkipShell` was a list of all commands that would skip evaluation by the terminal and be handled instead by VS Code. This was awkward because you would need a list of 100+ commands in your settings file to change it. This is now changed to be a list of additions and deletions, so you only include the changes to the default list:  \n```json\n{\n\"terminal.integrated.commandsToSkipShell\": [\n// Make ctrl+n open a new file when the terminal is focused\n\"workbench.action.files.newUntitledFile\",\n// Send ctrl+e to the terminal\n\"-workbench.action.quickOpen\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_improvements-to-commandstoskipshell-setting",
    "id": 1036
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### New buffer implementation enabled  \nThe TypedArray/ArrayBuffer-based terminal buffer [introduced in v1.29](https://code.visualstudio.com/updates/v1_29#_experimental-buffer-improvements) is now turned on and the old implementation has been removed. This should provide a good boost to throughput in the terminal as well as significantly reduce its memory footprint.",
    "url": "https://code.visualstudio.com/updates/v1_31#_new-buffer-implementation-enabled",
    "id": 1037
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Debug and tasks  \n### Custom command user input variables  \nThe [input variables](https://code.visualstudio.com/updates/v1_30#_improved-user-input-variables-for-task-and-debug-configurations) introduced last milestone are a powerful mechanism to ask for user input in task or debug configurations. Initially, we made `promptString` and `pickString` input variables available.  \nIn this milestone, we are introducing a new type of input variable `command` which runs an arbitrary command when an input variable is interpolated. Since commands can be contributed by extensions, it is now possible to extend user input variables by new implementations.  \nThe following example shows how to use a user input variable of type `command` in a debug configuration that lets the user pick a test case from a list of all test cases found in a specific folder. It is assumed that some extension provides an `extension.mochaSupport.testPicker` command that locates all test cases in a configurable location and shows a picker UI to pick one of them.  \n```json\n{\n\"configurations\": [\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Launch Test\",\n\"program\": \"${workspaceFolder}/${input:pickTest}\"\n}\n],\n\"inputs\": [\n{\n\"id\": \"pickTest\",\n\"type\": \"command\",\n\"command\": \"extension.mochaSupport.testPicker\",\n\"args\": {\n\"testFolder\": \"${workspaceFolder}/tests\",\n}\n}\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_custom-command-user-input-variables",
    "id": 1038
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Task output support split terminals  \nYou can now configure tasks to show output in a split terminal panel instead of creating a new one. A task configuration can use the `group` attribute in the `presentation` section to define where the task's output should be shown.  \nIf you run both of the two tasks below, they will show in a split terminal so you can see both of them at the same time:  \n````json\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"label\": \"Task One\",\n\"type\": \"shell\",\n\"command\": \"echo One && sleep 5000\",\n\"problemMatcher\": [],\n\"presentation\": {\n\"group\": \"groupA\"\n},\n},\n{\n\"label\": \"Task Two\",\n\"type\": \"shell\",\n\"command\": \"echo Two && sleep 5000\",\n\"problemMatcher\": [],\n\"presentation\": {\n\"group\": \"groupA\"\n}\n}\n]\n}\n````  \n![Split terminal tasks](images/1_31/sideBySideTasks.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_task-output-support-split-terminals",
    "id": 1039
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### HTML and CSS custom data support  \nSince this feature is in preview, the settings, Contribution Points, and data formats are subject to change.  \n![Custom data](images/1_31/customdata.gif)  \nToday, front-end developers often code in a superset of HTML/CSS:  \n* [Web Components](https://developer.mozilla.org/docs/Web/Web_Components) allow custom HTML elements such as `<my-button type=\"alert\"></my-button>`.\n* [PostCSS](https://postcss.org/) allows custom CSS properties such as [`size`](https://github.com/postcss/postcss-size) and not-yet-standardized CSS features such as [`:any-link`](https://preset-env.cssdb.org/features#any-link-pseudo-class).\n* Various frameworks allow even greater flexibility in the source HTML/CSS.  \nIn this iteration, we improved the [HTML custom data support](https://code.visualstudio.com/updates/v1_30#_html-custom-tags-attributes-support) introduced in 1.30 and added CSS custom data support.  \n* Use `html.experimental.customData` or `css.experimental.customData` to load custom data. (`html.experimental.custom.tags` and `html.experimental.custom.attributes` are removed.)\n* Alternatively, bundle the JSON into an extension with `contributes.html.experimental.customData` or `contributes.css.experimental.customData`.\n* Finally, if you are writing a Language Server that uses [vscode-html-languageservice](https://github.com/microsoft/vscode-html-languageservice) or [vscode-css-languageservice](https://github.com/microsoft/vscode-css-languageservice), you can create the Language Service with custom data.  \nCustom data enhances VS Code's understanding of HTML/CSS. For example, with these HTML/CSS JSON contributions, VS Code could provide completion and hover for the custom HTML tag/attribute and CSS property/pseudoClass:  \n```json\n{\n\"version\": 1,\n\"tags\": [{\n\"name\": \"my-button\",\n\"description\": \"My button\",\n\"attributes\": [{\n\"name\": \"type\",\n\"description\": \"My button type\",\n\"values\": [\n{ \"name\": \"alert\" }\n]\n}]\n}]\n}\n```  \n```json\n{\n\"version\": 1,\n\"properties\": [{\n\"name\": \"my-size\",\n\"description\": \"Compiles down to `width` and `height`. See details at https://github.com/postcss/postcss-size.\"\n}],\n\"pseudoClasses\": [{\n\"name\": \":my-link\",\n\"description\": \":any-link pseudo class. See details at https://preset-env.cssdb.org/features#any-link-pseudo-class.\"\n}]\n}\n```  \nThe above sample is available at [octref/simple-customdata](https://github.com/octref/simple-customdata), while a more fully-featured sample is available at [octref/svg-data](https://github.com/octref/svg-data).  \nThese guides explain the data format and how to use them through settings and extension Contribution Points.  \n* [Guide](https://github.com/microsoft/vscode-html-languageservice/blob/main/docs/customData.md) for using HTML Custom Data\n* [Guide](https://github.com/microsoft/vscode-css-languageservice/blob/main/docs/customData.md) for using CSS Custom Data",
    "url": "https://code.visualstudio.com/updates/v1_31#_html-and-css-custom-data-support",
    "id": 1040
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Extension authoring  \n### Extensions change event  \nA new event `extensions.onDidChange` was added which fires when the `extensions.all` array changes. This can happen when extensions are installed, uninstalled, enabled, or disabled. See the [No reload on extension install](#no-reload-on-install) section.  \n```ts\n/**\n* An event which fires when `extensions.all` changes. This can happen when extensions are\n* installed, uninstalled, enabled or disabled.\n*/\nexport const onDidChange: Event<void>;\n```  \n**Note**: Extension authors that introduce new contribution points should listen to this event and update the state of the workbench accordingly.",
    "url": "https://code.visualstudio.com/updates/v1_31#_extensions-change-event",
    "id": 1041
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Open resources in a browser  \nWe have observed that several extensions use node modules like `opn` or `open` to open a URL in a browser. Given the desire for this functionality, we have added a new API `vscode.env.openExternal`. It expects a URL and can be used to open website-links, mail-links, or application-url-handler. Also, file URLs are accepted to open them in their default app, like a PDF file.  \n```ts\n// open default browser\nawait vscode.env.openExternal(vscode.Uri.parse(\"https://github.com/microsoft/vscode/issues/66741\"));\n```  \n**Note**: Extension authors currently using the `opn` or `open` modules should switch to this new API.",
    "url": "https://code.visualstudio.com/updates/v1_31#_open-resources-in-a-browser",
    "id": 1042
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Global storage path  \nAn extension is now provided with a global storage path `ExtensionContext.globalStoragePath` that is pointing to a local directory with write/read access. This is a good option if you need to store large files that are accessible from all workspaces.  \n```ts\n/**\n* An absolute file path in which the extension can store global state.\n* The directory might not exist on disk and creation is\n* up to the extension. However, the parent directory is guaranteed to be existent.\n*\n* Use [`globalState`](#ExtensionContext.globalState) to store key value data.\n*/\nglobalStoragePath: string;\n```  \nVS Code takes care of cleaning up this path when the extension is removed.  \n**Note**: Extension authors that currently use a custom file system location to store state across workspaces should switch to this new API.",
    "url": "https://code.visualstudio.com/updates/v1_31#_global-storage-path",
    "id": 1043
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### CodeActionKind.intersects  \nThe `CodeActionKind.intersects` method is useful to check if a `CodeActionProvider` should bother computing its Code Actions:  \n```typescript\nimport * as vscode from 'vscode';\n\nexport class OrganizeImportsProvider implements vscode.CodeActionProvider {\npublic provideCodeActions(\ndocument: vscode.TextDocument,\nrange: vscode.Range,\ncontext: vscode.CodeActionContext,\ntoken: vscode.CancellationToken\n): vscode.CodeAction[] {\n// Only return organize imports actions if they were explicitly requested\n// We can check this using `intersects`.\nif (!context.only || !vscode.CodeActionKind.SourceOrganizeImports.intersects(context.only)) {\n// Organize imports actions were not requested\nreturn [];\n}\n\n// Organize imports was requested\n...\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_codeactionkind.intersects",
    "id": 1044
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### contributes.resourceLabelFormatters  \nExtensions can now contribute resource label formatters that specify how to display URIs everywhere in the workbench. For example, here's how an extension could contribute a formatter for URIs with scheme `remotehub`:  \n```json\n\"contributes\": {\n\"resourceLabelFormatters\": [\n{\n\"scheme\": \"remotehub\",\n\"formatting\": {\n\"label\": \"${path}\",\n\"separator\": \"/\",\n\"workspaceSuffix\": \"GitHub\"\n}\n}\n]\n}\n```  \nThis means that all URIs that have a scheme `remotehub` will get rendered by showing only the `path` segment of the URI and the separator will be `/`. Workspaces which have the `remotehub` URI, will have the GitHub suffix in their label.",
    "url": "https://code.visualstudio.com/updates/v1_31#_contributes.resourcelabelformatters",
    "id": 1045
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Add arguments to keybindings  \nWhen defining a keybinding in `package.json`, you can now define arguments. Upon execution, those arguments are passed to the command.  \nIn the sample below, it is: `{foo: 1, bar: 2}`.  \n```json\n\"keybindings\": {\n\"key\": \"cmd+i\",\n\"command\": \"myCommand\",\n\"args\": {\n\"foo\": 1,\n\"bar\": 2\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_add-arguments-to-keybindings",
    "id": 1046
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Full control over createTerminal environment  \nThe new setting `TerminalOptions.strictEnv` when set to true will not make any modifications to the terminal environment at all, instead it will be used exactly as passed in by the extension.  \n```ts\n// This will create a terminal whose environment only contains the single value\n// FOO=BAR.\nconst terminal = createTerminal({\nname: \"Test terminal\",\nenv: {\n\"FOO\": \"BAR\"\n},\nstrictEnv: true\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_full-control-over-createterminal-environment",
    "id": 1047
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Node.js update  \nThe version of Electron that VS Code runs on has been updated which brings with it an update to Node.js from `8.9` to `10.2.0`. All extensions will now run on this newer version of Node.js. Take a look at [Node v10.0.0 deprecations](https://nodejs.org/en/blog/release/v10.0.0/#deprecations) for a list of deprecations in Node.js 10.",
    "url": "https://code.visualstudio.com/updates/v1_31#_node.js-update",
    "id": 1048
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Updated Octicons  \nWe've updated our version of Octicons to 8.3.0 and now support the following icons:  \n![Octicons update](images/1_31/octicons-updates.png?v=4)  \n* `$(arrow-both)`\n* `$(bold)`\n* `$(color-mode)`\n* `$(eye-closed)`\n* `$(fold-down)`\n* `$(fold-up)`\n* `$(grabber)`\n* `$(italic)`\n* `$(kebab-horizontal)`\n* `$(kebab-vertical)`\n* `$(note)`\n* `$(organization-filled)`\n* `$(person-filled)`\n* `$(project)`\n* `$(request-changes)`\n* `$(screen-full)`\n* `$(screen-normal)`\n* `$(smiley)`\n* `$(tasklist)`\n* `$(text-size)`\n* `$(unverified)`\n* `$(verified)`  \nYou can [read our documentation](https://code.visualstudio.com/api/references/icons-in-labels) to view a full list of the icons that we support. For a full detail list of changes, see the [Octicon changelog](https://github.com/primer/octicons/blob/master/CHANGELOG.md).",
    "url": "https://code.visualstudio.com/updates/v1_31#_updated-octicons",
    "id": 1049
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Auto fix and CodeAction.isPreferred  \nThe Code Action API powers VS Code's Quick Fixes (the lightbulbs you see in the editor). Although there may be many Quick Fixes for a given error, often one of these Quick Fixes is the most reasonable fix for the problem. For example, fixing a spelling error is usually the more likely fix than generating new fields:  \n![The fix spelling Quick Fix is usually more reasonable than generating properties](images/1_31/api-preferred.png)  \nBy using the proposed API, extensions can set `isPreferred` on a `CodeAction` to indicate that is the most reasonable fix for the underlying problem. Preferred fixes can be automatically applied using the **Auto Fix** command (`kb(editor.action.autoFix)`)  \n![After applying an auto fix to the error](images/1_31/api-preferred-after.png)  \nPreferred Quick Fixes should generally:  \n* Correctly fix the underlying error (and not suppress it).\n* Be a reasonable fix for the error.\n* Not perform extensive operations unexpectedly.  \nRefactoring Code Actions can also be marked as preferred to indicate that they are the most reasonable refactoring. For example, while multiple **Extract constant** refactorings may be available, often the user just wants to extract to the nearest local. If that refactoring Code Action is marked `isPreferred`, users can set up a single keybinding for it:  \n```json\n{\n\"key\": \"ctrl+shift+r ctrl+e\",\n\"command\": \"editor.action.codeAction\",\n\"args\": {\n\"kind\": \"refactor.extract.constant\",\n\"preferred\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_31#_auto-fix-and-codeaction.ispreferred",
    "id": 1050
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Fix All Source Actions  \nThe proposed `source.fixAll` `CodeActionKind` establishes a convention for extensions that can auto fix errors in a file. This new Source Action kind is similar to **Organize imports** and makes it easy to configure keybindings for fix all actions or enable autofix on save:  \n```json\n// On save, run both fixAll and organizeImports source actions\n\"editor.codeActionsOnSave\": {\n\"source.fixAll\": true,\n\"source.organizeImports\": true,\n}\n```  \nThe [TSLint extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin) already uses this proposed source Code Action kind to implement fix all and auto fix on save.",
    "url": "https://code.visualstudio.com/updates/v1_31#_fix-all-source-actions",
    "id": 1051
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Debug Adapter Protocol  \n**Proposed Debug Adapter Protocol for data breakpoints**  \nAs a follow-up step for the [ongoing work on data breakpoints](https://github.com/microsoft/vscode/issues/58304) (AKA \"watchpoints\"), we made some progress on the design of the Debug Adapter Protocol for data breakpoints. The proposed DAP changes live on this [branch](https://github.com/microsoft/debug-adapter-protocol/tree/aweinand/data-breakpoints) and the corresponding TypeScript API can be found in the [Data breakpoints proposal](https://github.com/microsoft/debug-adapter-protocol/issues/20#issue-384366398).  \nIf you are interested in supporting data breakpoints in your debugger extension, please have a look at the [proposal](https://github.com/microsoft/debug-adapter-protocol/issues/20) and provide feedback.",
    "url": "https://code.visualstudio.com/updates/v1_31#_debug-adapter-protocol",
    "id": 1052
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Live theme editing  \nWhen developing a color theme extension, you can see color changes applied live in the **Extension Development Host** window.  \n![live theme editing](images/1_31/live-theme-editing.gif)  \nThe same works for file icon themes.",
    "url": "https://code.visualstudio.com/updates/v1_31#_live-theme-editing",
    "id": 1053
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## Engineering  \n### Electron 3.0 update and Electron 4.0 exploration  \nIn this milestone, we finished the exploration of bundling Electron 3 into VS Code, making it the first time we ship this Electron version with stable. This is a major Electron release and comes with Chrome 66 and Node.js 10.x (a major leap forward compared to our current version that has Chrome 61 and Node.js 8.x).  \nAt the same time, we started to explore updating to Electron 4, which we hope to push to Insiders soon.",
    "url": "https://code.visualstudio.com/updates/v1_31#_electron-3.0-update-and-electron-4.0-exploration",
    "id": 1054
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Better performance information  \nWith this release, the **Developer: Startup Performance** command output is presented in the editor and no longer in DevTools. That makes it easier to read and faster to get to. In addition, many issues with the information have been fixed.",
    "url": "https://code.visualstudio.com/updates/v1_31#_better-performance-information",
    "id": 1055
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### WinJS.Promise removal \u2705  \nWhen VS Code started, JavaScript wasn't what it is today. For instance, there were no native promises and so the team decided to use `WinJS.Promise` for asynchronous work. Today, the situation is different: native promises are real and `WinJS.Promise` is obsolete. Midway through last year, we started an effort to remove `WinJS.Promise` from the codebase, which we completed in December.",
    "url": "https://code.visualstudio.com/updates/v1_31#_winjs.promise-removal-\u2705",
    "id": 1056
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Strict null checking  \nWe continued our work to [strict null check the main VS Code codebase](https://github.com/microsoft/vscode/issues/60565). Thanks to [your help](https://github.com/microsoft/vscode/issues/65233), this milestone we were able to enable strict null checking for a large number of test files, which eliminated a large number of errors.  \nWe will be continuing the strict null check effort next milestone.",
    "url": "https://code.visualstudio.com/updates/v1_31#_strict-null-checking",
    "id": 1057
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Stylus language support  \nThe [Stylus language extension](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus) now uses the curated data from [vscode-css-languageservice](https://github.com/microsoft/vscode-css-languageservice) to offer up-to-date completions with status warnings and syntax documentation.  \n![Stylus completion](images/1_31/stylus-completion.png)",
    "url": "https://code.visualstudio.com/updates/v1_31#_stylus-language-support",
    "id": 1058
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### GitHub Pull Requests  \nThis milestone we continued working on improvements to the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension.  \nBelow are some of the new features:  \n* GitHub Review support. You can now group comments into a [review](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-proposed-changes-in-a-pull-request) instead of just adding them individually.\n* The extension works seamlessly when you join a [Live Share](https://visualstudio.microsoft.com/services/live-share/) session when the workspace is a GitHub repository.\n* We introduced [GraphQL](https://graphql.org/) gradually into the project so the description view now presents more detailed information of a pull request and the overall performance of the extension is improved.\n* You can now choose **Create Merge Commit**, **Squash and Merge**, or **Rebase and Merge** when merging a pull request.\n* Performance improvements. We reduced both the API calls to GitHub and git operations when you browse pull requests, file changes, and checkout a pull request, which makes the extension respond faster, especially on Windows.  \nYou can read the full release notes for the extension at [vscode-pull-request-github releases](https://github.com/microsoft/vscode-pull-request-github/releases).",
    "url": "https://code.visualstudio.com/updates/v1_31#_github-pull-requests",
    "id": 1059
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n## New documentation  \n### Python Jupyter Notebooks  \nA new [Working with Jupyter Notebooks](https://code.visualstudio.com/docs/datascience/jupyter-notebooks) topic describes how to open, debug, and export [Jupyter Notebooks](https://jupyter-notebook.readthedocs.io/en/latest/) from within VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_31#_python-jupyter-notebooks",
    "id": 1060
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Improved JavaScript and TypeScript documentation  \nWe've refreshed our JavaScript and TypeScript articles to make sure they are up-to-date and provide more helpful information.  \nThe [JavaScript](https://code.visualstudio.com/docs/languages/javascript) and [TypeScript](https://code.visualstudio.com/docs/languages/typescript) pages now provide an overview of the features that VS Code offers for these languages. More detailed explanations of these features and tutorials have been moved to new pages under **Node.js / JavaScript** and **TypeScript** respectively in the table of contents.",
    "url": "https://code.visualstudio.com/updates/v1_31#_improved-javascript-and-typescript-documentation",
    "id": 1061
  },
  {
    "content": "See what is new in the Visual Studio Code January 2019 Release (1.31)  \n### Updated Extension API documentation  \nFor extension authors, the VS Code [API](https://code.visualstudio.com/api) documentation was rewritten and moved to its own table of contents.  \n![API TOC on VS Code website](images/1_31/api-toc.png)  \nHere you'll find articles to:  \n* Get you started with your [first extension](https://code.visualstudio.com/api/get-started/your-first-extension).\n* Learn about various extension [capabilities](https://code.visualstudio.com/api/extension-capabilities/overview).\n* Find extension [guides](https://code.visualstudio.com/api/extension-guides/overview) and [advanced topics](https://code.visualstudio.com/api/advanced-topics/extension-host).\n* Complete API [references](https://code.visualstudio.com/api/references/vscode-api).",
    "url": "https://code.visualstudio.com/updates/v1_31#_updated-extension-api-documentation",
    "id": 1062
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Keyboard Shortcuts editor  \nYou can now edit the `when` clause of a keybinding in the Keyboard Shortcuts editor.  \n![Changing When expression](images/1_32/keyboard-shortcuts-when.gif)  \nWe removed the link that opens your `keybindings.json` file from the Keyboard Shortcuts editor in favor of the **{}** button on the right of the editor title bar.  \nWhen directly editing your `keybindings.json` file, the default keybindings are no longer shown on the left. If you prefer to see **Default Keybindings**, you can check the **Workbench > Settings: Open Default Keybindings** setting (`workbench.settings.openDefaultKeybindings` to `true`).",
    "url": "https://code.visualstudio.com/updates/v1_32#_keyboard-shortcuts-editor",
    "id": 1064
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Automatic Keyboard Navigation setting  \nA new setting **List: Automatic Keyboard Navigation** controls whether lists and trees capture lexicographic keypresses in order to navigate and filter elements. If disabled, keyboard navigation becomes modal and the `list.toggleKeyboardNavigation` command will toggle its state. You can assign a specific keyboard shortcut to that command. For example, you could set it to be `/` and only after pressing `/`, will subsequent keypresses filter items in lists/trees. This setting defaults to enabled.  \nBelow is the keybinding to toggle keyboard navigation with `/` for the File Explorer:  \n```json\n{\n\"key\": \"/\",\n\"command\": \"list.toggleKeyboardNavigation\",\n\"when\": \"filesExplorerFocus\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_32#_automatic-keyboard-navigation-setting",
    "id": 1065
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Default title bar style on Linux  \nAfter listening to user feedback, we have made the decision to revert our change of the default setting `window.titleBarStyle` from `custom` back to `native` on Linux. We still recommend the custom title bar for those needing better accessibility support. More information on this change has been documented in our [Linux setup](https://go.microsoft.com/fwlink/?linkid=2074137) page.",
    "url": "https://code.visualstudio.com/updates/v1_32#_default-title-bar-style-on-linux",
    "id": 1066
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### New tree widget for Outline and Breadcrumbs  \nThe Outline document symbol view and breadcrumb picker have adopted the new tree widget. The new implementation makes them faster and gives better filtering support, along with other new tree widget enhancements.",
    "url": "https://code.visualstudio.com/updates/v1_32#_new-tree-widget-for-outline-and-breadcrumbs",
    "id": 1067
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Editor  \n### Hover and Problems peek improvements  \nIn this release, a command bar with **Quick Fix** and **Peek Problem** actions was added to the Problems hover. The **Quick Fix** action applies Quick Fixes from the hover and the **Peek Problem** action will open the peek view in the editor.  \n![Problem Hover](images/1_32/problem-hover.png)  \nFrom a Problems peek view, you can now navigate to the previous and next error/warning.  \n![Problem Peek](images/1_32/problem-peek.png)  \nWe also improved the appearance of the hovers and the Problems peek view. Hovers with problems and code blocks are given enough space to show their contents:  \n![Hover](images/1_32/hover.png)",
    "url": "https://code.visualstudio.com/updates/v1_32#_hover-and-problems-peek-improvements",
    "id": 1068
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Auto fix and preferred Code Actions  \nThe Code Action API powers VS Code's Quick Fixes (the lightbulbs you see in the editor). Although there may be many Quick Fixes for a given error, there is often one that is the most reasonable fix for the problem. For example, fixing a spelling error is usually the more likely fix than generating new fields.  \nExtensions can now mark a Code Action as \"preferred\" to indicate that it is the most reasonable fix for the underlying problem. When a preferred fix is available, a blue badge is added to the lightbulb. Preferred fixes can be automatically applied using the **Auto Fix** command (`kb(editor.action.autoFix)`).  \n![Preferred fixes are indicated with a blue badge on the lightbulb](images/1_32/autofix-ligthbulb.png)  \nPreferred Quick Fixes should generally:  \n* Correctly fix the underlying error (and not suppress it).\n* Be a reasonable fix for the error.\n* Not perform extensive operations unexpectedly.  \nRefactoring Code Actions can also be marked as preferred to indicate that they are the most reasonable refactoring. For example, while multiple **Extract constant** refactorings may be available, the user usually wants to extract to the nearest local. If that refactoring Code Action is marked `isPreferred`, users can set up a single keybinding for it:  \n```json\n{\n\"key\": \"ctrl+shift+r ctrl+e\",\n\"command\": \"editor.action.codeAction\",\n\"args\": {\n\"kind\": \"refactor.extract.constant\",\n\"preferred\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_32#_auto-fix-and-preferred-code-actions",
    "id": 1069
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Fix All Source Actions  \nThe new `source.fixAll` `CodeActionKind` establishes a convention for extensions that can auto fix errors in a file. This new Source Action kind is similar to **Organize imports** and makes it easy to configure keybindings for fix all actions or enable auto fix on save:  \n```json\n// On save, run both fixAll and organizeImports source actions\n\"editor.codeActionsOnSave\": {\n\"source.fixAll\": true,\n\"source.organizeImports\": true,\n}\n```  \nThe [TSLint extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin) already uses `source.fixAll` Code Action kind to implement fix all and auto fix on save.",
    "url": "https://code.visualstudio.com/updates/v1_32#_fix-all-source-actions",
    "id": 1070
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Default keybinding change for `expandLineSelection`  \nThe command `expandLineSelection` is now bound by default to `Ctrl+L` (`Cmd+L` on macOS) and not to `Ctrl+I` (`Cmd+I`).",
    "url": "https://code.visualstudio.com/updates/v1_32#_default-keybinding-change-for-expandlineselection",
    "id": 1071
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Improved column selection  \nWith the **Multi Cursor Modifier** setting configured to use `Ctrl` (`Cmd` on macOS) `\"editor.multiCursorModifier\": \"ctrlCmd\"`, and thus the `Alt` modifier is only used for Go to Definition, it is now possible to press the `Alt` modifier when dragging a selection in the editor to toggle between a regular selection or a column selection.  \nIn the following video, the selection begins as a regular selection and then `Alt` is pressed and held until the mouse button is released:  \n![Column Selection with the Alt key](images/1_32/column-selection-alt-key.gif)",
    "url": "https://code.visualstudio.com/updates/v1_32#_improved-column-selection",
    "id": 1072
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Languages  \n### TypeScript 3.3.3  \nThis release includes TypeScript 3.3.3, a small update that [fixes a few important bugs](https://github.com/microsoft/TypeScript/milestone/90?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_32#_typescript-3.3.3",
    "id": 1073
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### No reload required when installing TypeScript extensions  \n[Last iteration](https://code.visualstudio.com/updates/v1_31#_no-reload-on-install), VS Code was changed to no longer require a reload after installing the vast majority of extensions. VS Code now also supports dynamic loading of [TypeScript plugin extensions](https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins) as well. When you install a new TypeScript extension, such as [TSLint](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin), the extension is automatically enabled without requiring a reload.",
    "url": "https://code.visualstudio.com/updates/v1_32#_no-reload-required-when-installing-typescript-extensions",
    "id": 1074
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### No reload required when installing Markdown extensions  \nIn addition, you no longer need to reload VS Code after installing an extension such as [GitHub Markdown Preview](https://marketplace.visualstudio.com/items?itemName=bierner.github-markdown-preview). Any active Markdown previews will be automatically updated as soon as a Markdown extension is installed.",
    "url": "https://code.visualstudio.com/updates/v1_32#_no-reload-required-when-installing-markdown-extensions",
    "id": 1075
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Improved HTML IntelliSense for ARIA attributes  \nThanks to data retrieved from [W3C](https://www.w3.org/TR/wai-aria-1.1/#state_prop_def) and [MDN](https://developer.mozilla.org/docs/Web/Events), VS Code now shows descriptions for ARIA (Accessible Rich Internet Applications) attributes and DOM events.  \n![HTML IntelliSense for ARIA and Event attributes](images/1_32/html-attribute-completion.gif)",
    "url": "https://code.visualstudio.com/updates/v1_32#_improved-html-intellisense-for-aria-attributes",
    "id": 1076
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Removed Razor support in HTML extension  \nThe legacy [ASP.NET Razor](https://learn.microsoft.com/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c) support has been removed. We now recommend the [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp) for editing Razor files.",
    "url": "https://code.visualstudio.com/updates/v1_32#_removed-razor-support-in-html-extension",
    "id": 1077
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Debugging  \n### Font configuration for Debug Console  \nNow it is possible to configure the font size, font family, and line height in the Debug Console using these settings: `debug.console.fontSize`, `debug.console.fontFamily`, and `debug.console.lineHeight`.  \n![Debug Console font](images/1_32/debug-console-font.gif)",
    "url": "https://code.visualstudio.com/updates/v1_32#_font-configuration-for-debug-console",
    "id": 1078
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Debug Console text wrapping  \nThanks to the new tree widget adoption, the debug console now supports automatic text wrapping for all its elements, even attributes inside objects.  \n![Debug Console wrap](images/1_32/debug-console-wrap.png)",
    "url": "https://code.visualstudio.com/updates/v1_32#_debug-console-text-wrapping",
    "id": 1079
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Integrated Terminal  \n### Variable support in send sequence command  \nIt's now possible to use [variables](https://code.visualstudio.com/docs/editor/variables-reference) with the `workbench.action.terminal.sendSequence` command, for example:  \n```json\n{\n\"key\": \"ctrl+shift+t\",\n\"command\": \"workbench.action.terminal.sendSequence\",\n\"args\": { \"text\": \". ${file}\" }\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_32#_variable-support-in-send-sequence-command",
    "id": 1080
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Extension Authoring  \n### Contributing commands to debug toolbar  \nNow extensions can contribute commands to the debug toolbar.  \nHere's an example from an extension's `package.json`:  \n```json\n\"contributes\": {\n\"commands\": [\n{\n\"command\": \"dart.hotReload\",\n\"title\": \"Hot Reload\",\n\"icon\": {\n\"dark\": \"./media/hot_reload_inverse.svg\",\n\"light\": \"./media/hot_reload.svg\"\n}\n}\n],\n\"menus\": {\n\"debug/toolbar\": [\n{\n\"command\": \"dart.hotReload\",\n\"when\": \"debugType == dart\",\n\"group\": \"dart\"\n}\n]\n}\n}\n```  \nThe extension adds a \"Hot Reload\" button seen on the right of the debug toolbar.  \n![Add to debug toolbar](images/1_32/debug-toolbar.png)",
    "url": "https://code.visualstudio.com/updates/v1_32#_contributing-commands-to-debug-toolbar",
    "id": 1081
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### SignatureHelpContext.activeSignatureHelp  \n`SignatureHelpContext` object now have an `activeSignatureHelp` field that tracks the previously active signature:  \n```typescript\nimport * as vscode from 'vscode';\n\nclass MySignatureHelpProvider implements vscode.SignatureHelpProvider {\nprovideSignatureHelp(\ndocument: vscode.TextDocument,\nposition: vscode.Position,\ntoken: vscode.CancellationToken,\ncontext: vscode.SignatureHelpContext\n): vscode.ProviderResult<vscode.SignatureHelp> {\n// The active signature help when this provider was triggered or undefined if\n// no signature help was active.\nconsole.log(context.activeSignatureHelp);\n\n...\n}\n}\n```  \nProviders can use this to track which overload was selected by the user before the signature help provider was retriggered.",
    "url": "https://code.visualstudio.com/updates/v1_32#_signaturehelpcontext.activesignaturehelp",
    "id": 1082
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Engineering  \n### Linux 32-bit support ends soon  \nVS Code is using [Electron](https://electronjs.org/) as framework to run on multiple platforms. We are currently using Electron version 3.x, which will be the last version to support Linux on 32-bit architectures. As we are planning to move to Electron 4.x soon (1-2 months), this means that VS Code will no longer run on Linux 32-bit. Please [update](https://code.visualstudio.com/download) your version of VS Code to the 64-bit version. All your settings and extensions will work as before without the need to migrate anything. You can read the [related blog post](https://electronjs.org/blog/linux-32bit-support) from Electron for more information.",
    "url": "https://code.visualstudio.com/updates/v1_32#_linux-32-bit-support-ends-soon",
    "id": 1083
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Strict null progress  \nWe continued to make good progress towards [strict null checking the main VS Code codebase](https://github.com/microsoft/vscode/issues/60565). This iteration, we cut the number of remaining strict null errors in half, fixing over 2000 errors. We still have around 1800 strict null errors left, and many of the remaining errors are tricky ones, but the end is in sight.",
    "url": "https://code.visualstudio.com/updates/v1_32#_strict-null-progress",
    "id": 1084
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Compiling to ES6  \nVS Code is written TypeScript, and TypeScript is compiled into JavaScript. TypeScript can target different JavaScript versions and with this release, we target ES6 JavaScript. ES6 is much closer to TypeScript and produces less code, which means faster loading times.  \n**Note:** This means our JavaScript output uses [classes](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Classes) as defined in JavaScript. We have a utility in place that still allows functions to \"extend\" from those classes and we have created a [tracking item](https://github.com/microsoft/vscode/issues/68698) for extensions authors to now emit ES6 as well. Everything should still work as before but we encourage everyone to get on the ES6 train.",
    "url": "https://code.visualstudio.com/updates/v1_32#_compiling-to-es6",
    "id": 1085
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## Contributions to Extensions  \n### GitHub Pull Requests  \nThis milestone we continued working on improvements to the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension.  \nBelow are some of the new features:  \n* View and assign reviewers and labels on the pull request description page.\n* GitHub Pull Request tree views now show in its own view container. You can also choose to show them in Source Control view by modifying `githubPullRequests.showInSCM`.\n* View and modify reactions on comments.",
    "url": "https://code.visualstudio.com/updates/v1_32#_github-pull-requests",
    "id": 1086
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Vetur  \nThe [Vetur](https://github.com/vuejs/vetur) extension now provides IntelliSense (smart completions) for Vue.js [interpolations](https://vuejs.org/v2/guide/syntax.html#Interpolations).  \nThe completion items are sourced from Vue.js `props`, `data`, `computed`, and `methods` API calls. The source code, along with any JSDoc documentation, are used as completion item descriptions.  \nWhen using child components from parent components, Vetur also offers IntelliSense on the child component's `props`.  \n![Vetur IntelliSense for Vue templates](images/1_32/vetur-intellisense-vue-template.gif)  \nOther notable features include:  \n* Using Prettier as an option for `<template>` formatter.\n* GraphQL custom block syntax highlighting.\n* Pug interpolation syntax highlighting.  \nYou can learn more about the features in Vetur's [Changelog](https://github.com/vuejs/vetur/blob/master/CHANGELOG.md).",
    "url": "https://code.visualstudio.com/updates/v1_32#_vetur",
    "id": 1087
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n## New documentation  \n### Bundling extensions with webpack  \nFor extension authors, there is a new [Bundling Extensions](https://code.visualstudio.com/api/working-with-extensions/bundling-extension) topic on bundling extensions files with [webpack](https://webpack.js.org/) to reduce extension load time.  \n![webpack logo](images/1_32/webpack-logo.png)",
    "url": "https://code.visualstudio.com/updates/v1_32#_bundling-extensions-with-webpack",
    "id": 1088
  },
  {
    "content": "See what is new in the Visual Studio Code February 2019 Release (1.32)  \n### Working with JavaScript  \nA new [Working with JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) article describes advanced JavaScript features supported by VS Code. You'll learn the benefits of adding [JavaScript project files](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_javascript-projects-jsconfigjson) (jsconfig.json) to your code as well as how to enable [type checking](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript).",
    "url": "https://code.visualstudio.com/updates/v1_32#_working-with-javascript",
    "id": 1089
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Improved Source Control view  \nThe Source Control view has been aligned to behave like other views, such as the File Explorer, Debug view, etc. Repositories can now be made visible or hidden using context menu actions. Their order and sizing is now preserved. You can also show or hide the **Source Control Providers** view with context menu actions.  \n![Source Control view context menu](images/1_33/source-control-context-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_33#_improved-source-control-view",
    "id": 1091
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### List simple keyboard navigation when screen reader detected  \nWhen VS Code detects that a screen reader is being used, it automatically turns on simple keyboard navigation for lists. This makes the list keyboard navigation easier for users with a screen reader since each key stroke will navigate to the corresponding item. This behavior applies for all lists and trees in the workbench, for example the File Explorer, Open Editors, and Debug views.",
    "url": "https://code.visualstudio.com/updates/v1_33#_list-simple-keyboard-navigation-when-screen-reader-detected",
    "id": 1092
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Editor  \n### IntelliSense customization  \nThere are new settings that control the IntelliSense display:  \n* `editor.suggest.filteredTypes` - Filter specific types from IntelliSense, for instance keywords are filtered with: `{ \"keyword\": false }`.\n* `editor.suggest.maxVisibleSuggestions` - Control the number of items IntelliSense shows at once.\n* `editor.suggest.showIcons` - Enable or disable displaying icons in IntelliSense.  \nBelow is an example of TypeScript IntelliSense with keywords filtered out, no icons, and limited to eight suggestions:  \n![IntelliSense: no keywords, no icons, only eight entries](images/1_33/intellisense-config.png)",
    "url": "https://code.visualstudio.com/updates/v1_33#_intellisense-customization",
    "id": 1093
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Default formatter selection  \nMany of our users work on different projects and often different projects use different document formatters. This has been hard to configure and we have added a new setting to help, `editor.defaultFormatter`. Now, when there are multiple formatters available, you can define one as the default. In fact, VS Code will encourage you to pick a default formatter.  \n![Pick Default Formatter](images/1_33/formatter-default.gif)  \nThis will update your configuration (as shown below) so that for subsequent save operations, VS Code knows what formatter to pick. We also encourage you to set this value in your project's configuration. For example, if your project team agrees on a formatter, then it should be spelled out in the project settings file.  \n```json\n\"[javascript]\": {\n\"editor.defaultFormatter\": \"HookyQR.beautify\"\n}\n```  \nDefining a default formatter does not remove alternative formatters. We have added the **Format Document With...** command, which still allows you to pick a formatter before formatting a document. If needed, you can also reconfigure the default formatter from the dropdown.",
    "url": "https://code.visualstudio.com/updates/v1_33#_default-formatter-selection",
    "id": 1094
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Go To Definition customization  \nSome programming languages allow you to define a symbol in multiple locations. This means that a feature like **Go to Definition** must go to multiple locations at once. VS Code supports this by showing a Peek view with all locations. This behavior can now be fine-tuned with a new setting, `editor.gotoLocation.multiple`.  \nIt can be set to these values:  \n* `peek` - Open Peek view at the current location. This is the default.\n* `gotoAndPeek` - Open the primary location (as defined by the extension) and also show a Peek view.\n* `goto` - Only open the primary location.",
    "url": "https://code.visualstudio.com/updates/v1_33#_go-to-definition-customization",
    "id": 1095
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Snippet variable $WORKSPACE_NAME  \nThere is a new snippet variable that resolves to the name of the opened workspace/folder: `$WORKSPACE_NAME`.  \nUse it as shown in the snippet below:  \n```json\n\"header\": {\n\"scope\": \"javascript,typescript\",\n\"prefix\": \"workspace\",\n\"body\": [\"// the ${WORKSPACE_NAME}-project\"],\n\"description\": \"Log output to console\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_33#_snippet-variable-$workspace_name",
    "id": 1096
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Integrated Terminal  \n### ConPTY turned on by default on Windows build 18309+  \nFor supporting versions of Windows 10 Insiders, the new terminal back-end ConPTY will be turned on by default. This should result in a more stable experience closer to the native terminal and adds 256 color support. If you experience issues, please let [us](https://github.com/microsoft/vscode/issues) or the [Windows Console team](https://github.com/microsoft/console/issues) know. You can always opt out with this setting:  \n```json\n{\n\"terminal.integrated.windowsEnableConpty\": false\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_33#_conpty-turned-on-by-default-on-windows-build-18309+",
    "id": 1097
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Data parsing capped to 12 ms  \nPreviously, the amount of data parsed by the terminal was not being capped properly. This meant that on less powerful hardware, the amount of time parsing data and rendering would far exceed the ideal time to render a frame, resulting in laggy UI or a full lock up for commands that generated a lot of output. There is now a cap in place, which prevents this from exceeding approximately 12 ms, which should avoid these issues.",
    "url": "https://code.visualstudio.com/updates/v1_33#_data-parsing-capped-to-12-ms",
    "id": 1098
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Languages  \n### TypeScript 3.4  \nVS Code now ships with [TypeScript 3.4.1](https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/). This update adds support for some new TypeScript language features\u2014such as improved inference and new `const` assertions\u2014as well as bringing tooling improvements and bug fixes.",
    "url": "https://code.visualstudio.com/updates/v1_33#_typescript-3.4",
    "id": 1099
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Convert to destructured parameters refactoring  \nThe new **Convert to named parameters** refactoring for TypeScript lets you quickly organize long function parameter lists by converting the function to take a single named parameter object.  \n![Cleaning up a long parameter list](images/1_33/ts-named-paramters.gif)",
    "url": "https://code.visualstudio.com/updates/v1_33#_convert-to-destructured-parameters-refactoring",
    "id": 1100
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Option to disable CSS property value completion  \nA new setting, `css.completion.triggerPropertyValueCompletion`, allows you to disable property value completion. For example, if you choose `position` from `p` and have this setting set to `false`, VS Code will not trigger the `static | absolute | sticky | ...` completions for the property value.  \nThis is useful if you would like to use `Tab/Shift + Tab` to select previous and next completion items.",
    "url": "https://code.visualstudio.com/updates/v1_33#_option-to-disable-css-property-value-completion",
    "id": 1101
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Debugging  \n### Support for subsessions  \nIn this milestone, we have added support to display debug sessions as a tree in the debugger UI. Previously debug session were displayed as a flat list, which made it difficult to grasp that sessions were related.  \nSince this functionality is available via a new extension API, it requires adoption by debugger extensions. In this milestone, the only debugger that makes use of hierarchical debug sessions is VS Code's Node.js debugger.  \nIn Node.js cluster debugging, all subprocesses of a cluster are registered under the main debug session:  \n![Node.js subprocesses under main debug session](images/1_33/sub-sessions.png)  \nIn the \"server-ready feature\" (see below), an automatically launched Chrome browser session is registered as a child of the server debug session.",
    "url": "https://code.visualstudio.com/updates/v1_33#_support-for-subsessions",
    "id": 1102
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Automatically open a URI  \nThe last milestone had a [preview version of the \"server ready\" feature](https://code.visualstudio.com/updates/v1_32#_automatically-open-a-uri-when-debugging-a-server-program), which allows you to open a URL in a web browser automatically as soon as a specific program output message is detected. This feature is useful for debugging web server source code because the URL opened in the browser can make the server hit a breakpoint as soon as the server is ready (and this all with a single `F5` key press).  \nIn this milestone, we've moved the feature out of preview. VS Code looks for the trigger message not only in the Debug Console but also in the Integrated Terminal. In addition, we've also improved the error handling.  \nNote that for technical reasons, it is not possible to support the \"server ready\" feature in external terminals.",
    "url": "https://code.visualstudio.com/updates/v1_33#_automatically-open-a-uri",
    "id": 1103
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Extensions  \n### Install missing dependencies  \nWe've improved the extension activation failure notification when VS Code detects a missing extension dependency and now provide an action to install the missing dependency.  \n![Extension missing dependency warning](images/1_33/extension-dep-install.png)  \nYou can also install all missing dependencies using the new **Extensions: Install Missing Dependencies** command.",
    "url": "https://code.visualstudio.com/updates/v1_33#_install-missing-dependencies",
    "id": 1104
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Network proxy support for extensions  \nWe now load the SSL/TLS certificates from the operating system and include them when validating `https` requests initiated by extensions. This supports proxies using their own SSL/TLS certificates and other setups with custom certificates.  \nIn addition, `http`/`https` requests from extensions now honor the `NO_PROXY` environment variable, which lists the domain names separated by commas for which all proxy settings should be ignored.",
    "url": "https://code.visualstudio.com/updates/v1_33#_network-proxy-support-for-extensions",
    "id": 1105
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Extension authoring  \n### Smart select API  \nWe have finalized the smart select API used with the **Expand Selection** (`kb(editor.action.smartSelect.expand)`) and **Shrink Selection** (`kb(editor.action.smartSelect.shrink)`) commands.  With this API, extensions can define the ranges that get selected in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_33#_smart-select-api",
    "id": 1106
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Install extension command  \nA new command `workbench.extensions.installExtension` was introduced to install an extension from the Marketplace or a VSIX.  \nTo install an extension from the Marketplace, you provide its identifier.  \n```typescript\nvscode.commands.executeCommand('workbench.extensions.installExtension', 'ms-python.python');\n```  \nTo install via a VSIX, you provide its location URI.  \n```typescript\nvscode.commands.executeCommand('workbench.extensions.installExtension', vscode.Uri.file('path-to-vsix'));\n```",
    "url": "https://code.visualstudio.com/updates/v1_33#_install-extension-command",
    "id": 1107
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Debug toolbar contributions support positioning  \nIt is now possible to position the contributed debug commands in any order in the Debug toolbar. The default debug commands are using the group `navigation` so if you would like your contributed commands to be mixed with the default ones, use the same group. More information about sorting inside groups can be found in the [contribution points documentation](https://code.visualstudio.com/api/references/contribution-points#Sorting-inside-groups).  \nFor consistency, we are deprecating the menu ID `debug/toolbar` in favor of `debug/toolBar`. In the March release, we will support both menu IDs, but in April, support for the `debug/toolbar` menu ID will be removed.",
    "url": "https://code.visualstudio.com/updates/v1_33#_debug-toolbar-contributions-support-positioning",
    "id": 1108
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### \"sidebarVisible\" context renamed to \"sideBarVisible\"  \nFor consistency, we are deprecating the context `sidebarVisible` in favor of `sideBarVisible`. In the March release, both contexts will be supported, but in the April release, support for `sidebarVisible` will be dropped.",
    "url": "https://code.visualstudio.com/updates/v1_33#_sidebarvisible-context-renamed-to-sidebarvisible",
    "id": 1109
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### TerminalOptions.shellArgs now accepts strings on Windows  \nPreviously `TerminalOptions.shellArgs` only supported a list of arguments in the form `string[]`. This could cause issues on Windows as the string array needs to be converted into the [command-line format](https://msdn.microsoft.com/08dfcab2-eb6e-49a4-80eb-87d4076c98c6) and the conversion could go wrong or be hard to get right for complicated cases. You can now bypass this conversion process on Windows by using a `string` in command-line format directly.",
    "url": "https://code.visualstudio.com/updates/v1_33#_terminaloptions.shellargs-now-accepts-strings-on-windows",
    "id": 1110
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Hierarchical debug sessions  \nIn order to support hierarchical debug sessions, we've added an optional argument `parentSession` to the `vscode.debug.startDebugging` API. If specified, VS Code shows the debug session resulting from `startDebugging` in a tree-like way as a child of the parent session.",
    "url": "https://code.visualstudio.com/updates/v1_33#_hierarchical-debug-sessions",
    "id": 1111
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Removing the vscode.previewHtml command  \nThe `vscode.previewHtml` command was used to render HTML pages in the editor before the [webview API](https://code.visualstudio.com/api/extension-guides/webview) was introduced last year. However the `vscode.previewHtml` command suffered from some important security and compatibility issues that we determined could not be fixed without breaking existing users of the command. So instead of trying to fix `vscode.previewHtml`, we have opted to remove the command entirely in VS Code 1.33.  \nWe've tried to give all extensions that use the `vscode.previewHtml` command ample warning so that they can upgrade to use the webview API. However, there may still be a few extensions that are still using the `vscode.previewHtml` command and will therefore no longer work. If you are using one of these extensions, please file an issue against it or, even better, submit a PR with the fix.",
    "url": "https://code.visualstudio.com/updates/v1_33#_removing-the-vscode.previewhtml-command",
    "id": 1112
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Commenting API  \nWe did large refactoring around Commenting related features during the last two months, based on the lessons and experience we learned from the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension and feedback from the community. The newly designed Commenting API is generic and powerful enough for different types of usage. The [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension has already moved to the new Commenting API.  \nThe new interface is available in VS Code Insiders and we will use the April milestone to tune and tweak the API. The old Commenting API will also be removed in April. You can play with the [sample extension](https://github.com/microsoft/vscode-extension-samples/pull/160) to get a better understanding of the API or take a deep look at [GitHub Pull Requests](https://github.com/microsoft/vscode-pull-request-github).",
    "url": "https://code.visualstudio.com/updates/v1_33#_commenting-api",
    "id": 1113
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### WebviewOptions.portMapping  \nThe proposed `WebviewOptions.portMapping` setting allows extensions to transparently define how localhost ports are resolved inside of webviews.  \n```ts\nconst panel = vscode.window.createWebviewPanel('dog', \"Dog Doodling\", vscode.ViewColumn.One, {\nportMapping: [\n// Map localhost:3000 in the webview to localhost:4000 externally\n{ port: 3000, resolvedPort: 4000 }\n]\n});\n\npanel.webview.html =  `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Dog Doodling</title>\n</head>\n<body>\n<!--\nWith the above port mapping, this image will actually be resolved\nto localhost:4000 on the local machine\n-->\n<img src=\"http://localhost:3000/canvas.png\">\n</body>\n</html>`;\n```  \nIt is considered good practice to start services like live servers on a random port. With port mapping, a webview's HTML content can use a hard-coded port that is mapped to the dynamically opened port that the service is really running on.",
    "url": "https://code.visualstudio.com/updates/v1_33#_webviewoptions.portmapping",
    "id": 1114
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Call Hierarchy Provider  \nThere is a proposed API for a `CallHierarchyItemProvider` supporting the call hierarchy feature. Try it out, leave [feedback](https://github.com/microsoft/vscode/issues/70231), and help us make this good API.",
    "url": "https://code.visualstudio.com/updates/v1_33#_call-hierarchy-provider",
    "id": 1115
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Engineering  \n### Official Linux snap package  \n[We now fully support](https://blog.ubuntu.com/2019/04/04/visual-studio-code-launches-as-a-snap) distributing Visual Studio Code as a [snap package](https://snapcraft.io/code). Snaps work across many different Linux distributions, provide reliable execution environments for a much stabler VS Code, and support background updates. Yes, that's right, you now get in-product automatic updates for Linux just as the Windows and macOS users do. \ud83c\udf89  \n[![Snap store](images/1_33/snap-store.png)](https://snapcraft.io/code)  \nInstalling the snap package is as easy as:  \n```bash\nsudo snap install code --classic\n```  \nAre you an insider? Come on and jump over to the [Insiders snap package](https://snapcraft.io/code-insiders), and get daily updates without any extra work:  \n```bash\nsudo snap install code-insiders --classic\n```",
    "url": "https://code.visualstudio.com/updates/v1_33#_official-linux-snap-package",
    "id": 1116
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Caching NPM packages  \nThanks to our friends over at Microsoft DevLabs, we were able to speed up our [OSS builds](https://dev.azure.com/vscode/VSCode/_build?definitionId=12) using an [Azure Pipelines extension](https://marketplace.visualstudio.com/items?itemName=1ESLighthouseEng.PipelineArtifactCaching), which caches NPM packages and speeds up the entire `npm install` process. If you'd like to know more about this, you can read this [blog post](https://medium.com/microsoft-1es/reducing-vs-code-ci-build-times-e0c5872bfdde) by [Ethan Dennis](https://github.com/erdennis13).",
    "url": "https://code.visualstudio.com/updates/v1_33#_caching-npm-packages",
    "id": 1117
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Strict null checking of VS Code  \nWe made a final big push this iteration to enable TypeScript's strict null checking for the core VS Code codebase. Strict null checks help to catch some common programming mistakes and make our codebase more maintainable, so that we can keep moving quickly yet safely.  \nEnabling strict null checks for core VS Code was a six-month effort that involved at least 40 contributors and touched tens of thousands of lines of source code. You can read about how we went about incrementally enabling strict null checking in [issue #60565](https://github.com/microsoft/vscode/issues/60565).",
    "url": "https://code.visualstudio.com/updates/v1_33#_strict-null-checking-of-vs-code",
    "id": 1118
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## Contributions to extensions  \n### GitHub Pull Requests  \nThis milestone we continued working on improvements to the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension.  \nBelow are some of the new features:  \n* New `workbench.action.addComment` and `workbench.action.submitComment` commands to customize the keyboard shortcuts for adding and submitting comments.\n* Polished rendering of GitHub todo lists in the description page.\n* Adoption of the new [Commenting API](#commenting-api).",
    "url": "https://code.visualstudio.com/updates/v1_33#_github-pull-requests",
    "id": 1119
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n### Vetur  \nThe [Vetur](https://github.com/vuejs/vetur) extension now supports any workspace version of TypeScript > 2.8, so that users get more consistent language support between `*.vue`, `*.js`, and `*.ts` files.  \nOther than making available the new TypeScript language features and bug fixes, Vetur also improved its integration with TypeScript to bring grayed-out unused variables, code actions (autofixes), and auto import to `*.vue` files.  \n![Vetur TypeScript features](images/1_33/vetur-ts-features.gif)  \nRead more on these features in the [Vetur Changelog](https://github.com/vuejs/vetur/blob/master/CHANGELOG.md).",
    "url": "https://code.visualstudio.com/updates/v1_33#_vetur",
    "id": 1120
  },
  {
    "content": "See what is new in the Visual Studio Code March 2019 Release (1.33)  \n## New documentation  \n### Node remote debugging  \nThe new [Remote Debugging for Node.js](https://code.visualstudio.com/docs/azure/remote-debugging) topic explains how you can connect the VS Code debugger to your Node.js applications running on [Azure](https://azure.microsoft.com) with the [Azure App Service](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice) extension.  \n![Azure App Service extension](images/1_33/azure-app-service.png)",
    "url": "https://code.visualstudio.com/updates/v1_33#_node-remote-debugging",
    "id": 1121
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Languages  \n### Lower rank for CSS property values with vendor prefix  \nCSS property values prefixed with dash `'-'` (such as `-moz-grid` or `-ms-grid`), now come after `grid` in auto completion.",
    "url": "https://code.visualstudio.com/updates/v1_34#_lower-rank-for-css-property-values-with-vendor-prefix",
    "id": 1123
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Debugging  \n### debug.showSubSessionsInToolBar  \nWe have introduced the setting `debug.showSubSessionsInToolBar` which controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false, the stop command on a sub-session will also stop the parent session. This setting default is false.",
    "url": "https://code.visualstudio.com/updates/v1_34#_debug.showsubsessionsintoolbar",
    "id": 1124
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Tasks  \n### Terminate all tasks  \nThe **Tasks: Terminate Task** command has a new option to terminate all tasks if there are multiple tasks running. If this is an action you do often, you can create a keyboard shortcut for the command with the `terminateAll` argument.  \n```json\n{\n\"key\": \"ctrl+k t\",\n\"command\": \"workbench.action.tasks.terminate\",\n\"args\": \"terminateAll\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_34#_terminate-all-tasks",
    "id": 1125
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n### Automatically show Problems panel  \nThe new `revealProblems` task property allows you to automatically show the Problems panel. The property values are `always`, `never`, and `onProblem`.  \n```json\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"type\": \"npm\",\n\"script\": \"watch\",\n\"problemMatcher\": \"$tsc-watch\",\n\"isBackground\": true,\n\"presentation\": {\n\"reveal\": \"always\",\n\"revealProblems\": \"onProblem\"\n}\n}\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_34#_automatically-show-problems-panel",
    "id": 1126
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Contributions to extensions  \n### Preview: Remote Development  \n\u2757 **Note:** The **[Remote Development extensions](https://aka.ms/vscode-remote/download)** require **[Visual Studio Code Insiders](https://code.visualstudio.com/insiders)**.  \n**Visual Studio Code Remote Development** allows you to use a container, remote machine, or the [Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/windows/wsl) as a full-featured development environment.  \nThe extensions in the [Remote Development extension pack](https://aka.ms/vscode-remote/download/extension) run in the context of the remote workspace while VS Code feels like it does when you run locally.",
    "url": "https://code.visualstudio.com/updates/v1_34#_preview:-remote-development",
    "id": 1127
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n### Vetur  \nThe [Vetur](https://github.com/vuejs/vetur) extension now offers semantic diagnostics, hover information, jump to definition, and find references for the JavaScript expression inside Vue's template interpolation region:  \n![Vetur JavaScript support in interpolations](images/1_34/vetur-interpolation.gif)  \nYou can read more about this feature in the [Vetur documentation](https://vuejs.github.io/vetur/interpolation.html).  \nOther improvements include reduced memory usage and import path completion. You can learn more about them in the [Vetur changelog](https://github.com/vuejs/vetur/blob/master/CHANGELOG.md).",
    "url": "https://code.visualstudio.com/updates/v1_34#_vetur",
    "id": 1128
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Extension authoring  \n### Multi-extension debugging  \nIn this milestone, we've added support for debugging more than one extension at a time. This is useful if you are developing a set of tightly coupled or interdependent extensions.  \nPreviously this feature was only surfaced via the command line interface of VS Code, now the argument `--extensionDevelopmentPath` can be specified more than once. Typically `--extensionDevelopmentPath` is used in the launch configuration of an extension. When developing more than one extension, we recommend combining the individual extension projects into a multi-folder workspace and create a new launch configuration (stored in the workspace `.code-workspace` file) that uses multiple `--extensionDevelopmentPath` arguments for the individual extensions.  \nHere is an example workspace `.code-workspace` file with two extensions, `hello1` and `hello2`, and a single launch configuration for both extensions:  \n```json\n{\n\"folders\": [\n{ \"path\": \"hello1\" },\n{ \"path\": \"hello2\" }\n],\n\"launch\": {\n\"configurations\": [\n{\n\"type\": \"extensionHost\",\n\"request\": \"launch\",\n\"name\": \"Launch Two Extensions\",\n\"args\": [\n\"--extensionDevelopmentPath=${workspaceFolder:hello1}\",\n\"--extensionDevelopmentPath=${workspaceFolder:hello2}\",\n],\n\"outFiles\": [\n\"${workspaceFolder:hello1}/out/**/*.js\",\n\"${workspaceFolder:hello2}/out/**/*.js\"\n]\n}\n]\n}\n}\n```  \nPlease note that in this release, it is not possible to create a `preLaunchTask` that builds both extensions by combining the `preLaunchTask`s of the individual extension projects.",
    "url": "https://code.visualstudio.com/updates/v1_34#_multi-extension-debugging",
    "id": 1129
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n### Command links in notifications  \nIt was always possible to include links in notification messages via the syntax `[link name](http://link)`, but this only worked for links that open in a browser. Now you can also invoke a command from a link with the syntax `[link name](command:<command id>)`. The command with the provided identifier will be triggered when the user clicks the link.",
    "url": "https://code.visualstudio.com/updates/v1_34#_command-links-in-notifications",
    "id": 1130
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n### Links in notifications allow for title  \nYou can now add a title to links in notifications that will be shown when the user hovers over the link. The syntax is `[link name](link \"<the title>\")`.",
    "url": "https://code.visualstudio.com/updates/v1_34#_links-in-notifications-allow-for-title",
    "id": 1131
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n### Machine-specific settings  \nIf you have settings that allow users to customize an executable path and if these paths need to be scoped to the machine they are running on, you can now classify such settings as `machine` scoped. Extension authors set the `scope` property when contributing to the `configuration` extension point. Machine-specific settings can only be configured for User settings.  \n```json\n\"configuration\": {\n\"title\": \"Git\",\n\"properties\": {\n\"git.path\": {\n\"type\": [\n\"string\",\n\"null\"\n],\n\"markdownDescription\": \"Path and filename of the git executable.\",\n\"default\": null,\n\"scope\": \"machine\"\n}\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_34#_machine-specific-settings",
    "id": 1132
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Engineering  \n### Rewritten filesystem provider for local files  \nExtensions have been able to provide their own filesystem implementations for custom resources ([read more here](https://code.visualstudio.com/updates/v1_23#_filesystem-providers)). However, VS Code's own implementation for local files was not implemented with the same extension APIs. This resulted in subtle differences when dealing with local file resources compared to resources coming from extensions. Over the last two milestones, we [rewrote our local file system provider](https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/files/node/diskFileSystemProvider.ts) to use the extension APIs for consistency.",
    "url": "https://code.visualstudio.com/updates/v1_34#_rewritten-filesystem-provider-for-local-files",
    "id": 1133
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## New documentation  \n### Python Azure Functions  \nThere is a new [Deploy Python to Azure Functions](https://code.visualstudio.com/docs/python/tutorial-azure-functions) tutorial that describes how to create and deploy Python serverless Azure Functions.",
    "url": "https://code.visualstudio.com/updates/v1_34#_python-azure-functions",
    "id": 1134
  },
  {
    "content": "See what is new in the Visual Studio Code April 2019 Release (1.34)  \n## Miscellaneous  \n### Language Server Protocol  \nThe [Language Server Protocol](https://microsoft.github.io/language-server-protocol) has proposed support for the following new features:  \n* Selection ranges: to compute selection ranges for an array of positions. Sent from client to server.\n* Call hierarchy: to compute a call hierarchy for a given symbol. Sent from client to server.\n* Progress: to initiate progress reporting from the server. Sent from server to client.  \nThe new features are available in the next versions of the `vscode-languageclient` and `vscode-languageserver` npm modules.",
    "url": "https://code.visualstudio.com/updates/v1_34#_language-server-protocol",
    "id": 1135
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## Editor  \n### Go to Definition improvements  \nWe have polished the **Go to Definition** action and its friends, **Go to Declaration**, **Go to Type Definition**, and **Go to Implementation**.  \n* Earlier, we added the `editor.gotoLocation.multiple: goto` option to disable showing a Peek view when a symbol has multiple definitions. However, it would only show the first definition and ignore the rest. This is now much better, as multiple results are shown in the Status bar and pressing `kb(editor.gotoNextSymbolFromResult)` jumps to each definition.  \n![Go to Definition, no Peek view](images/1_35/go-to-def-loop.gif)  \n* **Go to Definition** now honors the `workbench.editor.revealIfOpen` setting. This means that an editor that is already open in another group can be reused (or not) when going to a symbol. Note that the old, hard-coded behavior was to reuse the current editor and the default for `revealIfOpen` is not to reuse.\n* The Peek view now supports search and filter, like the results tree, to allow you to quickly narrow down on a result.\n* Last but not least, you can now cancel long running requests for definitions by pressing `kb(editor.cancelOperation)`.",
    "url": "https://code.visualstudio.com/updates/v1_35#_go-to-definition-improvements",
    "id": 1137
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Breadcrumbs displayed  \nBreadcrumbs for quick file and symbol navigation are now on by default. This can be toggled in the View menu **View** > **Show Breadcrumbs** command.  \n![breadcrumb navigation on by default](images/1_35/breadcrumbs.png)",
    "url": "https://code.visualstudio.com/updates/v1_35#_breadcrumbs-displayed",
    "id": 1138
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## Languages  \n### TypeScript 3.5  \nVS Code now ships with [TypeScript 3.5.1](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5/). This update brings TypeScript language improvements, along with tooling enhancements for both JavaScript and TypeScript. It also fixes a number of important bugs, including fixes for performance issues that some users were seeing when working with styled-components.",
    "url": "https://code.visualstudio.com/updates/v1_35#_typescript-3.5",
    "id": 1139
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Smart selection for JavaScript and TypeScript  \nJavaScript and TypeScript now support [smart selection](https://code.visualstudio.com/updates/v1_33#_smart-select-api). This feature uses semantic knowledge to intelligently expand selections for expressions, types, statements, classes, and imports:  \n![Smart selection in a TypeScript file](images/1_35/ts-smart-select.gif)",
    "url": "https://code.visualstudio.com/updates/v1_35#_smart-selection-for-javascript-and-typescript",
    "id": 1140
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Extract to type alias refactoring for TypeScript  \nUse the new **Extract to type alias**  refactoring for TypeScript to quickly extract part type into its own type alias:  \n![Extracting part of complex type to a type alias](images/1_35/ts-extract-type.gif)  \nThe **Extract to type alias** refactoring has a kind of `refactor.extract.type`. You can configure a single keybinding that extracts either constants or type aliases using:  \n```json\n{\n\"key\": \"shift+ctrl+e\",\n\"command\": \"editor.action.codeAction\",\n\"args\": {\n\"kind\": \"refactor.extract\",\n\"preferred\": true\n}\n}\n```  \nSee the [Code Action](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions) documentation for more information on configuring keybindings for refactorings.",
    "url": "https://code.visualstudio.com/updates/v1_35#_extract-to-type-alias-refactoring-for-typescript",
    "id": 1141
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### JavaScript and TypeScript suggestion sorting  \nWe've tuned our suggestion sorting for JavaScript and TypeScript to more heavily prioritize suggestions for local variables over suggestions for globals or auto-imports:  \nAs shown in the image below, if you create a function called `setTimOut`, VS Code will now suggest it first instead of assuming you mean `setTimeout`.  \n![Suggest user defined setTimOut function first](images/1_35/ts-suggestions.png)",
    "url": "https://code.visualstudio.com/updates/v1_35#_javascript-and-typescript-suggestion-sorting",
    "id": 1142
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## Integrated Terminal  \n### True color support  \nThe terminal now supports programs that use true color (24-bit) escape sequences, rendering the correct color instead of the previous approximation of it.  \nBefore:  \n![Integrated Terminal 256 color approximation](images/1_35/true-color-before.png)  \nAfter:  \n![Integrated Terminal true color](images/1_35/true-color-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_35#_true-color-support",
    "id": 1143
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Improved surfacing of shell selector on Windows  \nFor some time, there has been a command to select the default shell on Windows. This release makes the command more discoverable as a shortcut available in the terminal selector dropdown.  \n![Integrated Terminal shell selector](images/1_35/shell-selector.png)",
    "url": "https://code.visualstudio.com/updates/v1_35#_improved-surfacing-of-shell-selector-on-windows",
    "id": 1144
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## Source control  \n### Compare merge conflicts with complete context  \nA new setting `merge-conflict.diffViewPosition` allows you to open the diff view in a new editor group when you compare merge conflicts. In addition, the new view shows the complete diff view of the changed file, which provides better context for the merge conflicts.  \n![Compare merge conflicts in a new editor group](images/1_35/compare-conflict.gif)",
    "url": "https://code.visualstudio.com/updates/v1_35#_compare-merge-conflicts-with-complete-context",
    "id": 1145
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## Contributions to extensions  \n### Remote Development (Preview)  \nThe [Remote Development](https://aka.ms/vscode-remote/download/extension) extensions are now available for VS Code Stable and allow you to use a container, remote machine, or the [Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/windows/wsl) as a full-featured development environment. The extensions run in the context of the remote workspace while you work with VS Code just as you would in a local workspace.  \n![Remote development architecture](images/1_35/remote-architecture.png)  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_35.md).",
    "url": "https://code.visualstudio.com/updates/v1_35#_remote-development-preview",
    "id": 1146
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## Extension authoring  \n### Command enablement  \nContributed commands can now control their enabled state using a new `enablement` property. Its value is a [when](https://code.visualstudio.com/api/references/when-clause-contexts) clause, similar to keybindings and menu contributions.  \nThe sample below shows how to add a **Hello Enablement** command to the editor's context menu and have its enabled state depend on whether text is selected in an editor.  \n```json\n\"commands\": [{\n\"command\": \"extension.sayHello\",\n\"title\": \"Hello Enablement\",\n\"enablement\": \"editorHasSelection\"\n}],\n\"menus\": {\n\"editor/context\": [{\n\"command\": \"extension.sayHello\",\n}]\n}\n```  \nDisabled commands are shown as grayed-out in menus:  \n![Disabled contributed command](images/1_35/command-enablement.png)  \nNote that certain menu implementations, like the Command Palette, don't show commands that are disabled. There is also some semantic overlap between `enablement` of commands and the `when` clause of menu items. The `enablement` clause defines the enabled state for all representations of a command while the `when` clause defines when a command should be included in a menu. For instance, an explorer context menu item might only make sense for certain file types, such as TypeScript files, while enabling that command might depend on another condition, for example \"TypeScript server running\". You can learn more about commands and menus in the [Command Extension Guide](https://code.visualstudio.com/api/extension-guides/command#enablement-of-commands).",
    "url": "https://code.visualstudio.com/updates/v1_35#_command-enablement",
    "id": 1147
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Updated Octicons  \nWe have added new icons to the Octicon library:  \n![New Octicons icons](images/1_35/octicons-update.png)  \n```$(error) $(info) $(info-outline) $(smiley) $(smiley-outline) $(warning)```  \nWe have also updated existing icons to be a consistent size:  \n![Updated Octicons icons](images/1_35/octicons-update2.png)  \n```$(beaker) $(bell) $(info-outline) $(tools)```  \n**Note:** We also changed the default for `$(info) $(smiley)` to be a solid version and the previous Octicons were renamed to `$(info-outline) $(smiley-outline)`.",
    "url": "https://code.visualstudio.com/updates/v1_35#_updated-octicons",
    "id": 1148
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### New theme color for active tab of an inactive editor group  \nA new color `tab.unfocusedActiveBackground` allows you to control the background color of the active tab in an editor group that does not have focus. This color inherits from the `tab.activeBackground` color.",
    "url": "https://code.visualstudio.com/updates/v1_35#_new-theme-color-for-active-tab-of-an-inactive-editor-group",
    "id": 1149
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Webviews that set retainContextWhenHidden can now receive messages when in the background  \nWebviews that set `retainContextWhenHidden` can now receive messages even if they are not visible. Previously, only visible webviews could receive messages using `.postMessage`.  \nKeep in mind that for a good user experience, webviews should not perform complex operations such as DOM manipulation or network requests while in the background.",
    "url": "https://code.visualstudio.com/updates/v1_35#_webviews-that-set-retaincontextwhenhidden-can-now-receive-messages-when-in-the-background",
    "id": 1150
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Comments API  \nWe have finalized the Comments API for extensions to provide commenting support within VS Code. For example, the [GitHub Pull Request](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension uses the Comments API to create and update comments for open pull requests directly in the editor and a dedicated Comments Panel.  \nYou can play with the [comment sample extension](https://github.com/microsoft/vscode-extension-samples/tree/main/comment-sample) to get a better understanding of the API or take a deep look at the [GitHub Pull Request extension repository](https://github.com/microsoft/vscode-pull-request-github/pull/1168).",
    "url": "https://code.visualstudio.com/updates/v1_35#_comments-api",
    "id": 1151
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Uninstall extension command  \nThere is a new command, `workbench.extensions.uninstallExtension`, to programmatically uninstall an installed extension.  \n```typescript\nvscode.commands.executeCommand('workbench.extensions.uninstallExtension', 'ms-python.python');\n```",
    "url": "https://code.visualstudio.com/updates/v1_35#_uninstall-extension-command",
    "id": 1152
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Support for memory access and disassembly  \nThis feature centers around \"memory references.\" A memory reference is an opaque identifier that can be used (along with an optional byte offset) to identify a single location in memory. A debug adapter has the option of providing a memory reference on DAP responses that represent things a debugger frontend might want to display in a memory view or use as the starting point for disassembly, for example `EvaluateResponse` and `Variable`. Providing memory references could be expensive for a debug adapter, so the frontend announces that it can actually use memory references by sending a `supportsMemoryReferences` capability in the `initialize` request.  \nWith a memory reference in hand, a debugger frontend can read memory via a new `readMemory` request and can disassemble source code via a new `disassemble` request. If a debug adapter implements these requests, it announces this via the two capabilities, `supportsReadMemoryRequest` and `supportsDisassembleRequest`.",
    "url": "https://code.visualstudio.com/updates/v1_35#_support-for-memory-access-and-disassembly",
    "id": 1153
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n### Background terminals  \nThe new proposed `runInBackground` terminal option lets extension authors create terminals but not surface them through the UI. Background terminals will become regular terminals visible to the user once `Terminal.show()` is called for the first time.  \n```ts\n// Create a background terminal\nconst terminal = window.createTerminal({ runInBackground: true });\n\n// Show the terminal in the panel\nterminal.show();\n```  \nThis is useful if you need an interactive terminal session but don't want to display it to the user unless something goes wrong.",
    "url": "https://code.visualstudio.com/updates/v1_35#_background-terminals",
    "id": 1154
  },
  {
    "content": "See what is new in the Visual Studio Code May 2019 Release (1.35)  \n## New documentation  \n### Remote Development topics  \nThe VS Code Remote Development extensions are still in preview but there is extensive [documentation](https://code.visualstudio.com/docs/remote/remote-overview) to help you get started.  \nThere are specific topics for each Remote Development extension:  \n* [Remote - SSH](https://code.visualstudio.com/docs/remote/ssh) - Connect to any location by opening folders on a remote machine/VM using SSH.\n* [Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers) - Work with a sandboxed toolchain or container-based application inside (or mounted into) a container.\n* [WSL](https://code.visualstudio.com/docs/remote/wsl) - Get a Linux-powered development experience in the Windows Subsystem for Linux.  \nUnder the [Remote](https://code.visualstudio.com/docs/remote) table of contents, you will also find a [Tips and Tricks](https://code.visualstudio.com/docs/remote/troubleshooting) guide as well as [FAQ](https://code.visualstudio.com/docs/remote/faq).",
    "url": "https://code.visualstudio.com/updates/v1_35#_remote-development-topics",
    "id": 1155
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Workbench  \n### Hide individual status bar items  \nThere is now a context menu for the status bar to hide and show individual entries.  \n![Hide entries in the status bar](images/1_36/status-bar.gif)  \nThe configuration is persisted globally across all workspaces.  \n**Note**: The setting `workbench.statusBar.feedback.visible` was removed in favor of this new approach. You can hide the feedback smiley using the status bar context menu.",
    "url": "https://code.visualstudio.com/updates/v1_36#_hide-individual-status-bar-items",
    "id": 1157
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Tree indent guides  \nThe tree widget now supports indent guides. This means indent guides are now available in the File Explorer, Search view, Debug views, etc.  \n![Explorer with indentation guides](images/1_36/tree-indent-guides.png)  \nAs before, you can control the tree's indentation level using the `workbench.tree.indent` setting and now you can also control how indent guides behave with the `workbench.tree.renderIndentGuides` setting.  \nThe possible values for `workbench.tree.renderIndentGuides` are:  \n* `onHover` - Show indent guide lines when hovering on a tree. The default behavior.\n* `always` - Always show indent guide lines in a tree.\n* `none` - Don't show indent guides.",
    "url": "https://code.visualstudio.com/updates/v1_36#_tree-indent-guides",
    "id": 1158
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Drag and drop a folder to copy  \nIt is now possible to drag and drop a folder from outside VS Code into the File Explorer to copy it. Previously, when dropping a folder into the VS Code Explorer, we would always open a workspace containing that folder. Now it is possible to just copy the folder content.  \n![Explorer drag and drop to copy](images/1_36/dnd-copy.png)",
    "url": "https://code.visualstudio.com/updates/v1_36#_drag-and-drop-a-folder-to-copy",
    "id": 1159
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Copy paste filename incrementor change  \nWhen copy pasting files and folders that are duplicates inside the VS Code Explorer, VS Code increments the name of the pasted file. The way we were doing the incremental naming sometimes led to unexpected results.  \nTo try to simplify naming, we now increment the filename the following way:  \n\"hello.txt\" -> \"hello copy.txt\" -> \"hello copy 2.txt\" -> \"hello copy 3.txt\"",
    "url": "https://code.visualstudio.com/updates/v1_36#_copy-paste-filename-incrementor-change",
    "id": 1160
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Disable Alt key focus of the custom menu bar  \nMany users have asked to disable the behavior of focusing the custom menu bar when the Alt-key is pressed. To prevent this behavior, set the new setting, `window.customMenuBarAltFocus`, to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_36#_disable-alt-key-focus-of-the-custom-menu-bar",
    "id": 1161
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Minimap search decorations  \nWhen searching within a file, the resulting matches will now be highlighted both within the file and in the minimap:  \n![Show search results in the minimap](images/1_36/minimap_search.png)",
    "url": "https://code.visualstudio.com/updates/v1_36#_minimap-search-decorations",
    "id": 1162
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Updated warning colors  \nWe've updated `list.warningForeground` and `editorWarning.foreground` to better match the rest of the editor warning colors. You'll see this updated color in the File Explorer, Peek error view, and editor squiggles:  \n![Warning color update](images/1_36/warning-color.png)  \nWe also updated `editorOverviewRuler.findMatchForeground` to better stand out with the updated warning colors in the ruler:  \n![Find match color update](images/1_36/find-match-ruler-color.png)",
    "url": "https://code.visualstudio.com/updates/v1_36#_updated-warning-colors",
    "id": 1163
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Online services settings  \nVS Code uses online services for various purposes such as downloading product updates, finding, installing and updating extensions, or providing Natural Language Search within the Settings editor. You can choose to turn on/off features that use these services through your user settings, which you can filter with the tag `@tag:usesOnlineServices`. There is now a command **File** > **Preferences** > **Online Services Settings** that applies the tag in the Settings editor.  \n![online services settings](images/1_36/online-services-settings.png)  \nFor more information, see our [telemetry documentation](https://code.visualstudio.com/docs/getstarted/telemetry).",
    "url": "https://code.visualstudio.com/updates/v1_36#_online-services-settings",
    "id": 1164
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Integrated Terminal  \n### Better default shell selector  \nWindows has had the **Select Default Shell** command for some time and last release it was added to the Integrated Terminal dropdown menu. This command is now also available on macOS and Linux and exposes the shells registered on the system by reading the `/etc/shells` file.  \n![Default shell selector on macOS](images/1_36/terminal-mac-shell-selector.png)",
    "url": "https://code.visualstudio.com/updates/v1_36#_better-default-shell-selector",
    "id": 1165
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Launch terminals with clean environments  \nThe Integrated Terminal in VS Code has always acted a little differently to normal terminals, particularly on Linux and macOS. The reason is that the environment was always inherited from VS Code's window (instance) and VS Code/Electron-related environment variables were removed, whereas a normal terminal would typically be launched from the Dock/Start menu and use the system environment. This could cause issues in certain scenarios, for example Python virtual environments were broken because of how they use the `$PATH` variable.  \nThere's a new preview option, `terminal.integrated.inheritEnv`, that when `false` causes the terminal to not use VS Code's environment.  \nInstead, depending on the platform, it will do the following:  \n* **Linux**: Fetch and use the environment of the parent process of VS Code's \"main process\".\n* **macOS**: Pull a handful of important environment variables off the current environment and only include them. Eventually we would like macOS to behave the same as Linux but there are currently issues with fetching environments.\n* **Windows**: Currently this setting does not affect Windows.  \nThe main visible result of setting `inheritEnv` to `false` is that `$SHLVL` (shell level) should now be 1 and `$PATH` should not include duplicate paths, provided your launch scripts don't intentionally include them.  \nThe default value for `terminal.integrated.inheritEnv` is `true`, which is the previous behavior, but we will probably switch the value to `false` in the future.",
    "url": "https://code.visualstudio.com/updates/v1_36#_launch-terminals-with-clean-environments",
    "id": 1166
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Change to Ctrl+\\  \nPreviously, `Ctrl+\\` was mapped to the command to split the terminal on Linux and Windows but this has been changed to pass `SIGQUIT` through to the shell, as most people would expect a terminal to do. If you want the old behavior, you can add this keyboard shortcut to your `keybindings.json` file.  \n```json\n{\n\"key\": \"ctrl+\\\\\", \"command\": \"workbench.action.terminal.split\", \"when\": \"terminalFocus\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_36#_change-to-ctrl+\\",
    "id": 1167
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Tasks  \n### Sequential dependency execution  \nThe `dependsOn` task attribute still defaults to running all dependencies in parallel, but now you can specify `\"dependsOrder\": \"sequence\"` and have your task dependencies executed in the order they are listed in `dependsOn`. Any background/watch tasks used in `dependsOn` must have a problem matcher that tracks when they are \"done\".  \nThe example task below runs task Two, task Three, and then task One.  \n```json\n{\n\"label\": \"One\",\n\"type\": \"shell\",\n\"command\": \"echo Hello \",\n\"dependsOrder\": \"sequence\",\n\"dependsOn\":[\n\"Two\",\n\"Three\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_36#_sequential-dependency-execution",
    "id": 1168
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Problem matcher path detection  \nWhen task output is scanned for problems, information about the path is provided using the `fileLocation` problem matcher attribute. In addition to the existing `relative` and `absolute` options, you can now specify `autoDetect`. When using `autoDetect`, the task system will automatically try to determine whether the paths in the problems are relative or absolute.",
    "url": "https://code.visualstudio.com/updates/v1_36#_problem-matcher-path-detection",
    "id": 1169
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Languages  \n### TypeScript 3.5.2  \nThis release includes TypeScript 3.5.2, a small update that [fixes a few important bugs](https://github.com/microsoft/TypeScript/milestone/97?closed=1).",
    "url": "https://code.visualstudio.com/updates/v1_36#_typescript-3.5.2",
    "id": 1170
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Use syntax only feature of JavaScript and TypeScript more quickly  \nVS Code's JavaScript and TypeScript language features is powered by a [TypeScript server](https://github.com/microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29). This server powers complex features such as IntelliSense and error reporting, along with simpler features such as code folding and document outlines.  \nFeatures such as IntelliSense require that the TypeScript server evaluate the entire JavaScript or TypeScript project before it can return any results, and this can take time for larger projects. While this processing is happening, the server is not able to handle any other requests, including requests for simple features like code folding that only require a basic semantic understanding of the current file. You may have seen this issue if you've ever noticed a delay before code folding or the document outline become available.  \nIn order to let you start working with your code faster, we've added a new experimental option whereby VS Code uses two TypeScript servers: one that only handles simple syntax-based operations, and a complete one that handles project processing, IntelliSense, error reporting, and other advanced language features. To enable this behavior, set `\"typescript.experimental.useSeparateSyntaxServer\": true`. This setting requires using TypeScript 3.4 or newer in your workspace.",
    "url": "https://code.visualstudio.com/updates/v1_36#_use-syntax-only-feature-of-javascript-and-typescript-more-quickly",
    "id": 1171
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Debugging  \n### Jump to cursor  \nWe have added a new debug command **Jump to Cursor**, which lets you move program execution to a new location without executing any of the code in between. If **Jump to Cursor** is supported by a debugger, the new command appears in the editor context menu and Command Palette while debugging. Currently this command is only available from the C# extension, but other debug extensions should follow soon.  \n![Jump to cursor debugger command](images/1_36/jump-to-cursor.gif)",
    "url": "https://code.visualstudio.com/updates/v1_36#_jump-to-cursor",
    "id": 1172
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Disable console word wrap  \nA new setting, `debug.console.wordWrap`, controls whether word wrap is enabled in the Debug Console. By default, all lines are wrapped. If the setting is turned off, the lines will no longer break in the Debug Console and there is a horizontal scrollbar.",
    "url": "https://code.visualstudio.com/updates/v1_36#_disable-console-word-wrap",
    "id": 1173
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Node.js debug configuration attribute useWSL is deprecated  \nWith the [WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) extension, universal [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) support has arrived in VS Code. Now all extensions can be used in WSL in a seamless way.  \nConsequently, we are planning to remove the now obsolete WSL support we added to VS Code's Node.js debugger two years ago. As a first step toward this goal, we are deprecating the `useWSL` debug configuration attribute. Starting with this milestone, the attribute will show up with a squiggly when opening a `launch.json` file in the editor. In addition, a notification appears when a debug session is launched that contains a `useWSL`.  \nHere are the steps for migrating an existing project that uses the `useWSL` flag to debugging with the [WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) extension:  \n* Make sure that you have the WSL extension installed.\n* Open the folder of your project in VS Code.\n* Reopen the project in WSL by using the **WSL: Reopen Folder in WSL** command.\n* Press `kb(workbench.action.debug.start)`.\n* Remove the `useWSL` flag from the debug configuration.  \nFor more information, see our [Developing in WSL](https://code.visualstudio.com/docs/remote/wsl) documentation.",
    "url": "https://code.visualstudio.com/updates/v1_36#_node.js-debug-configuration-attribute-usewsl-is-deprecated",
    "id": 1174
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Contributions to extensions  \n### JavaScript and TypeScript nightly extension  \nThe new [JavaScript and TypeScript nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) uses the nightly build of TypeScript (typescript@next) for VS Code's built-in TypeScript version, which powers JavaScript and TypeScript IntelliSense. This makes it easy to test the latest TypeScript features and provide feedback about them!",
    "url": "https://code.visualstudio.com/updates/v1_36#_javascript-and-typescript-nightly-extension",
    "id": 1175
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### TSLint 1.2  \nWe've published a new version of the [TSLint extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin) that fixes a few important bugs. This release also adds a warning indicator to the VS Code status bar if there is a `tslint.json` file in a workspace but TSLint itself is not properly installed.",
    "url": "https://code.visualstudio.com/updates/v1_36#_tslint-1.2",
    "id": 1176
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Installer for Java developers  \nThere is a new [Visual Studio Code Installer for Java](https://devblogs.microsoft.com/visualstudio/announcing-visual-studio-code-java-installer/) to help first-time developers set up their Java environment. When you [run the Java Pack Installer](https://aka.ms/vscode-java-installer-win), it automatically detects whether the JDK (Java Development Kit), Visual Studio Code, and required extensions are already installed. If not, the installer can download and configure the missing dependencies for you. You can also use the installer to add the Java-related components to your existing Visual Studio Code installation.  \n![The Java installer UI](images/1_36/java-installer.png)  \nWith the Java extensions installed, Visual Studio Code provides comprehensive Java development features such as smart code completion, refactoring, debugging, and testing as well as project management and application server integration.",
    "url": "https://code.visualstudio.com/updates/v1_36#_installer-for-java-developers",
    "id": 1177
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Remote Development (Preview)  \nWork has continued on the [Remote Development](https://aka.ms/vscode-remote/download/extension) extensions, which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment. You can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_36.md).  \nAnd to learn more about developing Linux applications on Windows, see this [Linux development with WSL and Visual Studio Code Remote](https://devblogs.microsoft.com/commandline/take-your-linux-development-experience-in-windows-to-the-next-level-with-wsl-and-visual-studio-code-remote/) blog post from the Windows Developer Platform team.",
    "url": "https://code.visualstudio.com/updates/v1_36#_remote-development-preview",
    "id": 1178
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Debugger for Chrome as remote UI extension  \nIf you are working on a web project in a remote window, you can use the [Debugger for Chrome extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) to debug it in a local Chrome window. Just install the extension, start your dev server on the remote, forward the server's port, and start your launch configuration. See the [extension README](https://github.com/microsoft/vscode-chrome-debug#usage-with-remote-vs-code-extensions) for details.",
    "url": "https://code.visualstudio.com/updates/v1_36#_debugger-for-chrome-as-remote-ui-extension",
    "id": 1179
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Extension authoring  \n### Splitting vscode package into @types/vscode and vscode-test  \nDuring the [event-stream incident](https://code.visualstudio.com/blogs/2018/11/26/event-stream) last year, we found that the `vscode` package was affected as its 223 transitive dependencies included `event-stream`. These dependencies also cause GitHub security alerts from time to time for many VS Code extensions. To address dependency complexity, we started slimming down the `vscode` package.  \nThe `vscode` package had served two purposes:  \n* Pull down `vscode.d.ts` for extension development.\n* Run integration tests by downloading and launching a local copy of VS Code.  \nNow we are splitting `vscode` into `@types/vscode` and `vscode-test`, two packages with more focused functionality.  \n* [`@types/vscode`](https://www.npmjs.com/package/@types/vscode) contains `vscode.d.ts` for each release. For example, `npm i @types/vscode@1.34.0` installs the VS Code 1.34 Extension API. Unlike `vscode`, which pulls down `vscode.d.ts` through a `postinstall` script, this package can be fully cached by package managers.\n* [`vscode-test`](https://github.com/microsoft/vscode-test) provides a set of APIs to run integration tests with VS Code. The old `vscode` package will continue to work, but new features will only go to `vscode-test`. We suggest that you switch over to `vscode-test`, which features a slimmer dependency graph and a more flexible, explicitly documented API. You can learn more about using `vscode-test` in the [Testing Extensions](https://code.visualstudio.com/api/working-with-extensions/testing-extension) article.  \nAdditionally:  \n* [`vscode-dts`](https://github.com/microsoft/vscode-dts) allows you to quickly download any version of the VS Code API via CLI.\n* [`vsce`](https://github.com/microsoft/vscode-vsce) now checks `@types/vscode` version against `engines.vscode` to prevent you from using a new API incompatible with older versions of VS Code.\n* The [`helloworld-test-sample`](https://github.com/microsoft/vscode-extension-samples/tree/main/helloworld-test-sample), [Testing Extensions](https://code.visualstudio.com/api/working-with-extensions/testing-extension) page, and [Continuous Integration](https://code.visualstudio.com/api/working-with-extensions/continuous-integration) page are updated to use `vscode-test`.\n* The [Testing Extensions](https://code.visualstudio.com/api/working-with-extensions/testing-extension) page contains a [migration guide](https://code.visualstudio.com/api/working-with-extensions/testing-extension#migrating-from-vscode) to help you transition from `vscode` to `@types/vscode` and `vscode-test`.\n* All VS Code [sample extensions](https://github.com/microsoft/vscode-extension-samples) now use `@types/vscode`.\n* The VS Code [extension generator](https://github.com/microsoft/vscode-generator-code) scaffolds extensions using the `@types/vscode` and `vscode-test` packages.",
    "url": "https://code.visualstudio.com/updates/v1_36#_splitting-vscode-package-into-@types/vscode-and-vscode-test",
    "id": 1180
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Node.js update  \nThe Electron version that VS Code runs on has been updated and brings with it an update to Node.js from `10.2.0` to `10.11.0`. All extensions will now run on this newer version of Node.js.",
    "url": "https://code.visualstudio.com/updates/v1_36#_node.js-update",
    "id": 1181
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### APIs for remote  \nThere is a new property `vscode.env.remoteName` that is defined whenever a remote extension host runs. Its value is defined by the extension bootstrapping the remote extension host and the value is available on the local and remote extension hosts.  \nExtensions that need to know whether they run on the remote or local extension host can use `Extension#extensionKind`, which is either `ExtensionKind.UI` or `ExtensionKind.Workspace`. The value represents what's defined in the extension's `package.json` file or overridden by the user. When no remote extension host exists, the value is always `ExtensionKind.UI`.",
    "url": "https://code.visualstudio.com/updates/v1_36#_apis-for-remote",
    "id": 1182
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### DocumentLink.tooltip  \nThe new `DocumentLink.tooltip` property allows a `DocumentLinkProvider` to customize the text displayed when a user hovers over a document link:  \n![Custom hover text displayed for a Markdown link](images/1_36/api-documentlink-tooltip.png)  \nVS Code includes instructions on how to activate the link (`cmd + click` in the example above) along with the `tooltip` text.",
    "url": "https://code.visualstudio.com/updates/v1_36#_documentlink.tooltip",
    "id": 1183
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Port forwarding and port mapping now support '127.0.0.1' in addition to 'localhost'  \nThe `vscode.env.openExternal` API opens an URI using the default external application. When `openExternal` is called by a remote extension on a local URI, such as `http://localhost:8080`, VS Code automatically opens a tunnel that connects a port on the local machine to the opened port on the remote machine. This automatic tunneling previously was only enabled for 'localhost' URIs but it is now enabled for '127.0.0.1' as well.  \nAdditionally, the [webview](https://code.visualstudio.com/api/extension-guides/webview) port mapping API now handles '127.0.0.1' in addition to 'localhost' URIs.",
    "url": "https://code.visualstudio.com/updates/v1_36#_port-forwarding-and-port-mapping-now-support-'127.0.0.1'-in-addition-to-'localhost'",
    "id": 1184
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### More properties marked as readonly or ReadonlyArray  \nMore properties in the VS Code API are now marked as readonly in `vscode.d.ts` to better express their intent to extensions.  \nNotable changes include:  \n* All fields on event interfaces are now readonly. Event objects should never be mutated as the same object can be dispatched to multiple listeners.\n* The methods on `DiagnosticCollection` now take readonly arrays. This change was made because you can only update a `DiagnosticCollection` through its methods, not by mutating an array previously passed to it.\n* `Extensions.all` is now a readonly array since it cannot be mutated.\n* `TextEditor.insertSnippet` now takes readonly arrays since it does not mutate its parameters.  \nThese new `readonly` modifiers may cause compile errors for extension code that explicitly typed out the non-readonly types that the VS Code API was previously using:  \n```ts\nvscode.window.onDidChangeTextEditorSelection(e => {\n// Error: `e.selections` is now a readonly array but\n// our `updateForSelections` function takes a mutable array\nupdateForSelections(e.selections);\n});\n\nfunction updateForSelections(selections: vscode.Selection[]) {\n...\n}\n```  \nTo fix this, propagate the `readonly` modifier through your extension's source code as well:  \n```ts\nvscode.window.onDidChangeTextEditorSelection(e => {\nupdateForSelections(e.selections);\n});\n\nfunction updateForSelections(selections: readonly vscode.Selection[]) {\n...\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_36#_more-properties-marked-as-readonly-or-readonlyarray",
    "id": 1185
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### TerminalOptions.hideFromUser  \nThe `runInBackground` terminal `hideFromUser` option is now in the stable API. Use this option to completely hide a terminal from the user until `Terminal.show()` is called:  \n```ts\nconst term = window.createTerminal({ hideFromUser: true });\nterm.sendText('do something')\n```  \nCombined with the `sendText` and `onDidWriteData` APIs, it's possible for an extension to interact with an interactive terminal, for example, to set up a connection, and only call `Terminal.show()` if something goes wrong.",
    "url": "https://code.visualstudio.com/updates/v1_36#_terminaloptions.hidefromuser",
    "id": 1186
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Comment reactions  \nThe Comments API now supports displaying and managing user reactions on comments. When `Comment.reactions` is present, reactions will be rendered under the comment body.  \nIf an extension registers a reaction handler with `CommentController.reactionHandler`, users will be able to respond to the existing reactions or use the reactions picker to create a new reaction.  \n![Comment reactions UI](images/1_36/comment-reaction.png)",
    "url": "https://code.visualstudio.com/updates/v1_36#_comment-reactions",
    "id": 1187
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Updated API for code insets  \nWe have refactored and simplified the code insets proposal. Instead of using the provider-pattern, it is now more like the text decorations API.  \n```ts\nexport function createWebviewTextEditorInset(editor: TextEditor, line: number, height: number, options?: WebviewOptions): WebviewEditorInset;\n```  \nGiven an editor, a line, and a height, you can create insets. Insets then use the [Webview](https://github.com/microsoft/vscode/blob/b1dd5ab40e08315fcc8f58310556479738a5e7b2/src/vs/vscode.d.ts#L5817) that's already known from the `WebviewPanel`. As with decorations, insets are being disposed once their containing editor closes.",
    "url": "https://code.visualstudio.com/updates/v1_36#_updated-api-for-code-insets",
    "id": 1188
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Webview.resourceRoot  \nThe proposed `resourceRoot` constant on webviews exposes the root from which local resources are loaded in webviews.  \n```ts\nconst panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {\n// Restrict the webview to only loading local content from our extension's `media` directory.\nlocalResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]\n});\n\nconst resourceRoot = await panel.resourceRoot;\npanel.html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src ${resourceRoot} https:;\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Cat Coding</title>\n</head>\n<body>\n<img src=\"${resourceRoot}/${path.join(extensionPath, 'media')}/cat.gif\" width=\"300\" />\n</body>\n</html>`\n```  \nWhen VS Code is run on the desktop, `resourceRoot` will be `vscode-resource:`. However, the value may be different when VS Code is run in other environments, such a browser.",
    "url": "https://code.visualstudio.com/updates/v1_36#_webview.resourceroot",
    "id": 1189
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### API to get the default shell  \nSince the `terminal.integrated.shell.<platform>` settings now default to `null`, extensions can no longer use that setting to detect the default shell. There is now a proposed API `vscode.env.shell` that will return the default shell for the terminal:  \n```ts\nconst shell = vscode.env.shell;\nif (shell.search(/(powershell|pwsh)/i) !== -1) {\n// Do something special that PowerShell needs\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_36#_api-to-get-the-default-shell",
    "id": 1190
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Language Server Protocol  \nA new version of the [Language Server Index Format](https://github.com/microsoft/language-server-protocol/blob/main/indexFormat/specification.md) tools for TypeScript have been implemented. The new versions have an improved format for easier importing of large dumps into databases without making it database specific. See the instructions in the [lsif-node](https://github.com/microsoft/lsif-node/blob/main/README.md) repository for details on running these tools.",
    "url": "https://code.visualstudio.com/updates/v1_36#_language-server-protocol",
    "id": 1191
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n## Engineering  \n### Electron 4.0 update and Electron 6.0 exploration  \nIn this milestone, we finished the exploration of bundling Electron 4 into VS Code, making it the first time this Electron version ships with stable. This is a major Electron release and comes with Chrome 69 and Node.js 10.11.0 (a major leap forward from our current version with Chrome 66 and Node.js 10.2.0).  \nUnfortunately, we had to disable macOS simple fullscreen support (`\"window.nativeFullScreen\": false`) for one release due to [issue #75054](https://github.com/microsoft/vscode/issues/75054). We expect to include a fix to our Insiders build early next month.  \nWe have started to explore updating to Electron 6, which we hope to push to Insiders soon.",
    "url": "https://code.visualstudio.com/updates/v1_36#_electron-4.0-update-and-electron-6.0-exploration",
    "id": 1192
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Better code loading  \nElectron 4 gave us access to new script caching APIs. With the new caching APIs, [cached data](https://v8.dev/blog/code-caching) can be created without affecting the very first start-up and can be created repeatedly to cover lazily parsed functions. That and improvements in our loader resulted in ~15% faster code loading.",
    "url": "https://code.visualstudio.com/updates/v1_36#_better-code-loading",
    "id": 1193
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### Linux 32-bit support ends  \nVS Code is using the [Electron framework](https://electronjs.org/) to run on multiple platforms. With this release, we move to Electron version 4.x, which means that VS Code will no longer run on Linux 32-bit. Please [update](https://code.visualstudio.com/download) to a 64-bit version of VS Code. All your settings and extensions will work as before, without the need to migrate anything. You can read the related [blog post from Electron](https://electronjs.org/blog/linux-32bit-support) for more information.",
    "url": "https://code.visualstudio.com/updates/v1_36#_linux-32-bit-support-ends",
    "id": 1194
  },
  {
    "content": "See what is new in the Visual Studio Code June 2019 Release (1.36)  \n### iframe-based webview exploration  \nThis iteration, we explored using normal iframes instead of Electron's `<webview>` tags to implement [VS Code's webviews](https://code.visualstudio.com/api/extension-guides/webview). This work is primarily being done to support running VS Code in the browser, but `<webview>` is also fairly complex and has caused issues for us in the past. Our hope is that we eventually will be able to replace our use of `<webview>` with normal iframes.  \nWe've made significant progress on iframe-based webviews and can now successfully run many webviews from extensions in browsers, but there's still lots of work to be done. We will continue this exploration in July.",
    "url": "https://code.visualstudio.com/updates/v1_36#_iframe-based-webview-exploration",
    "id": 1195
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Settings editor support for string arrays  \nThe Settings editor now allows editing array-of-string settings. The **Add Item** button will bring up an input box to add a new string.  \n![Settings UI for array-of-string settings](images/1_37/settings-ui-array-of-string.gif)  \nExtension authors can enable this support by [contributing a configuration](https://code.visualstudio.com/api/references/contribution-points#contributes.configuration) with `type` and `items` keys:  \n```json\n{\n\"type\": \"array\",\n\"items\": {\n\"type\": \"string\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_settings-editor-support-for-string-arrays",
    "id": 1197
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Removed warnings from settings files  \nYou will no longer see warnings for unknown or unsupported settings in your `settings.json` files. Instead inactive settings will be faded, similar to unused source code, with a hover explaining why. In addition, you won't see warnings for settings from extensions that are currently disabled.  \n![Faded unused settings](images/1_37/unused-settings.png)",
    "url": "https://code.visualstudio.com/updates/v1_37#_removed-warnings-from-settings-files",
    "id": 1198
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Reveal search result in the Explorer  \nThe file context menu in the Search view now has a **Reveal in Explorer** command to navigate to that file in the File Explorer.  \n![Reveal in Explorer command in search result](images/1_37/search-reveal-explorer.png)",
    "url": "https://code.visualstudio.com/updates/v1_37#_reveal-search-result-in-the-explorer",
    "id": 1199
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Search regex features  \nBack in the 1.29 release, we added the setting `search.usePCRE2` to make search use the PCRE2 regex engine. This enabled searching with some advanced regex features such as [backreferences](https://www.regular-expressions.info/backref.html) and [lookahead](https://www.regular-expressions.info/lookaround.html) assertions. Thanks to some upstream work in [ripgrep](https://github.com/BurntSushi/ripgrep), you can now use these features without enabling a special setting. ripgrep will fall back to the PCRE2 engine automatically if the regex uses a feature that isn't supported by the Rust regex engine, and `search.usePCRE2` is now deprecated. As a reminder, VS Code only supports regexes that are valid in JavaScript, because open editors are still searched using the editor's JavaScript-based search.",
    "url": "https://code.visualstudio.com/updates/v1_37#_search-regex-features",
    "id": 1200
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### NPM Scripts Explorer visible by default  \nPreviously, you had to enable the setting `npm.enableScriptExplorer` to make the NPM Scripts Explorer visible and this was difficult to discover. The NPM Scripts Explorer is now shown collapsed in the File Explorer, when there is a `package.json` file at the root of the workspace.  \n![NPM Scripts Explorer collapsed](images/1_37/npm-scripts-explorer.png)  \nWhen you have no `package.json` at the root in your workspace, you can still use the setting to enable the NPM Scripts Explorer. If you want to hide the explorer, you can right-click on its title and select **Hide** from the context menu.",
    "url": "https://code.visualstudio.com/updates/v1_37#_npm-scripts-explorer-visible-by-default",
    "id": 1201
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### focusedView context key  \nThere is a new keybinding `when` clause context key, `focusedView`, to display or enable a command when a given view is focused.  \n```json\n\"when\": \"focusedView == nodeDependencies\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_focusedview-context-key",
    "id": 1202
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Accessibility improvements  \nWe fixed accessibility issues across the workbench. A full list of the issues fixed can be found on GitHub with the ['accessibility' label](https://github.com/microsoft/vscode/issues?q=milestone%3A%22July+2019%22+label%3Aaccessibility+is%3Aclosed).",
    "url": "https://code.visualstudio.com/updates/v1_37#_accessibility-improvements",
    "id": 1203
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### New tree widget adopted in tree view  \nExtensions that contribute tree views will now get the [new tree widget](https://code.visualstudio.com/updates/v1_31#_new-tree-widget) experience. The tree widget provides better performance as well as improved keyboard navigation, filtering, custom indenting, horizontal scrolling, and more. If your favorite extensions have custom tree views, you should see the same UX improvements that were added earlier to the built-in VS Code explorers.",
    "url": "https://code.visualstudio.com/updates/v1_37#_new-tree-widget-adopted-in-tree-view",
    "id": 1204
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Editor  \n### Show whitespace in selection  \nThe `editor.renderWhitespace` setting now supports a `selection` option. With this option set, whitespace characters will be shown only on selected text:  \n![Whitespace rendered on selection](images/1_37/render-whitespace-on-selection.png)  \nThis is handy for quickly checking whitespace without filling the entire editor.",
    "url": "https://code.visualstudio.com/updates/v1_37#_show-whitespace-in-selection",
    "id": 1205
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Improved minimap search results visibility  \nIn the previous release, we introduced search decorations in the minimap (code outline). These decorations were difficult to see, so this iteration, we've worked on increasing their visibility. Now, the entire line will now be highlighted with low opacity in the minimap, and the actual match shown with high opacity.  \n![Minimap search results](images/1_37/minimap-search-decorations.png)  \nYou can also change the color of the decorations using the new `minimap.findMatchHighlight` theme color.",
    "url": "https://code.visualstudio.com/updates/v1_37#_improved-minimap-search-results-visibility",
    "id": 1206
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Preserve case in Find and Replace  \nYou can now preserve case when doing replacement in the editor's Find widget. The feature is turned on when the Preserve Case option (**AB** button) is turned on in the editor's Replace input box.  \n![Preserve Case button](images/1_37/preserve-case-button.png)  \nCurrently VS Code only supports preserve **Full Upper Case**, **Full Lower Case**, and **Title Case**.  \n![Preserve case example](images/1_37/preserve-case.gif)",
    "url": "https://code.visualstudio.com/updates/v1_37#_preserve-case-in-find-and-replace",
    "id": 1207
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Button toggle active state in Find widget  \nWe've updated the Find widget's button toggle active state with a filled background so that you can now easily tell when you are focused on an active toggle. This appears in the Search view, Find and Replace, and Terminal Find.  \nWith this update, we've introduced a new theme color, `inputOption.activeBackground`, to control the background color of the toggle active state. This color reuses `focusBorder` so that it works better with themes by default. We've also set the default for `inputOption.activeBorder` to transparent so that the border is only used for focus.  \n![Button toggle active state](images/1_37/button-toggle-active-state.gif)",
    "url": "https://code.visualstudio.com/updates/v1_37#_button-toggle-active-state-in-find-widget",
    "id": 1208
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Updated info colors  \nFollowing the [unification of the warning colors](https://code.visualstudio.com/updates/v1_36#_updated-warning-colors), we've also updated `editorInfoForeground` and `editorInfoBorder` to match the rest of the information diagnostics colors. You'll see this updated color in the Peek error view and editor squiggles:  \n![Info display colors](images/1_37/info-colors.png)",
    "url": "https://code.visualstudio.com/updates/v1_37#_updated-info-colors",
    "id": 1209
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Integrated Terminal  \n### Search UX improvements  \nPreviously searching within the terminal would start at the top of the terminal's viewport and search downwards. When it reached the bottom, it would wrap to the top. The new behavior aligns with several other terminal emulators and starts from the bottom of the buffer and searches upwards, leading to a much less disorienting experience.  \n![Terminal search now searches upwards by default](images/1_37/terminal-search-ux.gif)",
    "url": "https://code.visualstudio.com/updates/v1_37#_search-ux-improvements",
    "id": 1210
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Terminal accessibility improvements  \nThe terminal now features a line navigation mode when screen readers are used that enables convenient navigation of lines via `kb(workbench.action.terminal.navigationModeFocusNext)` and `kb(workbench.action.terminal.navigationModeFocusPrevious)`. The mode can be escaped with `kb(workbench.action.terminal.navigationModeExit)`.  \nThese are the new commands if you want to [customize the keybindings](https://code.visualstudio.com/docs/getstarted/keybindings#_advanced-customization):  \n```json\nworkbench.action.terminal.navigationModeExit\nworkbench.action.terminal.navigationModeFocusNext\nworkbench.action.terminal.navigationModeFocusPrevious\n```  \nOther accessibility improvements were also made:  \n* The non-breaking space character is now used for blank lines instead of an explicit string, allowing the screen reader to announce properly.\n* Screen readers will now announce characters when typed and removed. There are some cases where this will won't work but the majority of cases are covered.",
    "url": "https://code.visualstudio.com/updates/v1_37#_terminal-accessibility-improvements",
    "id": 1211
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Variables resolved in settings  \n[Variables](https://code.visualstudio.com/docs/editor/variables-reference) can now be used within the following settings:  \n```json\nterminal.integrated.cwd\nterminal.integrated.shell.<platform>\nterminal.integrated.shellArgs.<platform>\n```  \nFor example, you no longer need an extension to open a terminal in the current file's folder, just add this setting:  \n```json\n\"terminal.integrated.cwd\": \"${fileDirname}\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_variables-resolved-in-settings",
    "id": 1212
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Improved error reporting and diagnostics  \nPreviously when the terminal launched with a bad configuration, it would only indicate that the process exited with an error code. Better error messages are now provided that guide the user to solutions for several common scenarios.  \n![Using an invalid shell setting will tell you the shell is invalid](images/1_37/terminal-invalid-shell.png)",
    "url": "https://code.visualstudio.com/updates/v1_37#_improved-error-reporting-and-diagnostics",
    "id": 1213
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Languages  \n### Improved navigation for SCSS @import  \nVS Code used to resolve SCSS imports statically. For example, `@import './foo'` would resolve to `_foo.scss`. However, SCSS is more flexible in the way it resolves imports, allowing `./foo` to resolve to one of the five locations:  \n* `foo.scss`\n* `_foo.scss`\n* `foo/index.scss`\n* `foo/_index.scss`\n* `foo.css`  \nVS Code now resolves `@import './foo'` to one of these locations if the resolved file exists on disk. Note that if a link ends with `/`, it will only resolve to either `/index.scss` or `/_index.scss`. If a link ends with suffix such as `.css` or `.scss`, VS Code will not try the alternative file locations.",
    "url": "https://code.visualstudio.com/updates/v1_37#_improved-navigation-for-scss-@import",
    "id": 1214
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Improved CSS property value completion  \nCSS completion now offers detailed documentation for an additional 754 CSS property values, including less commonly used values.  \n![CSS property value completion documentation](images/1_37/css-property-value-completion-documentation.png)",
    "url": "https://code.visualstudio.com/updates/v1_37#_improved-css-property-value-completion",
    "id": 1215
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Use syntax only feature of JavaScript and TypeScript more quickly  \nLast release, [we added an experimental setting](https://code.visualstudio.com/updates/v1_36#_use-syntax-only-feature-of-javascript-and-typescript-more-quickly) that splits the TypeScript server that powers VS Code's JavaScript and TypeScript language features into separate syntax and semantic servers.  \nWith VS Code 1.37, the split server is now enabled by default. This means that for large JavaScript and TypeScript projects, syntax-based operations, such as code folding or document outlines, should be available more quickly.",
    "url": "https://code.visualstudio.com/updates/v1_37#_use-syntax-only-feature-of-javascript-and-typescript-more-quickly",
    "id": 1216
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Tasks  \n### TypeScript detected tasks warning  \nLast release, the TypeScript task auto-detection changed from using OS-specific path separators in the `tsconfig` path to a more cross-platform friendly `/`. VS Code now shows a warning if there is `\\\\` in a tsconfig path.  \n```ts\n{\n\"type\": \"typescript\",\n\"tsconfig\": \"src\\\\tsconfig.json\", // This will cause a warning to show. It should be \"tsconfig\": \"src/tsconfig.json\"\n\"option\": \"watch\",\n\"problemMatcher\": [\n\"$tsc-watch\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_typescript-detected-tasks-warning",
    "id": 1217
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### ${relativeFileDirname} variable for task and debug configurations  \nA new variable `${relativeFileDirname}` resolves to the workspace folder relative path of the current open file's directory. The variable can be used in task and debug configurations (`tasks.json` and `launch.json`).",
    "url": "https://code.visualstudio.com/updates/v1_37#_${relativefiledirname}-variable-for-task-and-debug-configurations",
    "id": 1218
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### resolveTask support  \nTask providers can now implement `resolveTask` to reduce the overhead for extensions proffering tasks. `resolveTask` is called after `provideTasks`, so if your extension has a setting that turns off `provideTasks` and auto-detection (like the built-in gulp extension), but a user still references one of your tasks in `tasks.json`, then `resolveTask` will be called and your extension can return that single task.",
    "url": "https://code.visualstudio.com/updates/v1_37#_resolvetask-support",
    "id": 1219
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Contributions to extensions  \n### Remote Development (Preview)  \nWork has continued on the [Remote Development](https://aka.ms/vscode-remote/download/extension) extensions, which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment. You can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_37.md).  \nYou can also read two recent blog posts describing:  \n* [Linux development with WSL and Visual Studio Code](https://devblogs.microsoft.com/commandline/an-in-depth-tutorial-on-linux-development-on-windows-with-wsl-and-visual-studio-code)\n* [Remote development over SSH](https://code.visualstudio.com/blogs/2019/07/25/remote-ssh).",
    "url": "https://code.visualstudio.com/updates/v1_37#_remote-development-preview",
    "id": 1220
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Java supports smart selection  \nThe [Microsoft Java extension](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) now supports [smart semantic selection](https://code.visualstudio.com/docs/java/java-editing#_smart-selection). You can expand or shrink the selection range based on the semantic information of the caret position in your source code.  \n* To expand the selection, use `kb(editor.action.smartSelect.expand)`.\n* To shrink the selection, use `kb(editor.action.smartSelect.shrink)`.",
    "url": "https://code.visualstudio.com/updates/v1_37#_java-supports-smart-selection",
    "id": 1221
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Extension authoring  \n### vscode.workspace.fs  \nThere is new API for extensions to read, write, and manage files and folders. This is an alternative to Node.js's [fs](https://nodejs.org/dist/latest-v10.x/docs/api/fs.html) file system module and more importantly, it allows access to files from contributed file systems, such as the SSH or WSL remote file systems.  \nThe snippet below shows how to write to a file, more usage samples can be found in the [fsconsumer-sample](https://github.com/microsoft/vscode-extension-samples/tree/0b3a31bf2bdd388ac4fdc0ccea2fb1315abfe3e3/fsconsumer-sample).  \n```ts\nconst writeStr = '1\u20ac is 1.12$ is 0.9\u00a3';\nconst writeBytes = Buffer.from(writeStr, 'utf8');\n\nawait vscode.workspace.fs.writeFile(someUri, writeBytes);\n```  \n**Call to Action**: If your extension is currently using the `fs` module from Node.js, consider migrating to the new `vscode.workspace.fs` API.",
    "url": "https://code.visualstudio.com/updates/v1_37#_vscode.workspace.fs",
    "id": 1222
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### DiagnosticsTag.Deprecated  \nDiagnostic tags enable extension authors to enrich the representation of diagnostics inside the editor. This release adds `DiagnosticTag.Deprecated`, which the editor will render with a strike-through line.  \n![Strikeout Deprecated decoration](images/1_37/diag-tag-deprecated.png)  \nThe diagnostic in the image above is created by the `validate` function shown below. The line `diag.tags = [vscode.DiagnosticTag.Deprecated];` adds the deprecation tag.  \n```ts\nlet diagnostics = vscode.languages.createDiagnosticCollection('Sample Errors');\nlet validate = (editor: vscode.TextEditor | undefined) => {\nif (!editor) {\nreturn;\n}\nlet result: vscode.Diagnostic[] = [];\nfor (let line = 0; line < editor.document.lineCount; line++) {\nlet pos = 0;\nwhile ((pos = editor.document.lineAt(line).text.indexOf('guys', pos)) >= 0) {\nlet diag = new vscode.Diagnostic(new vscode.Range(line, pos, line, pos + 'guys'.length), 'This is deprecated, use \"folks\", \"people\", or \"you all\" instead.');\ndiag.severity = vscode.DiagnosticSeverity.Warning;\ndiag.tags = [vscode.DiagnosticTag.Deprecated];\nresult.push(diag);\npos += 'guys'.length;\n};\n}\ndiagnostics.set(editor.document.uri, result);\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_diagnosticstag.deprecated",
    "id": 1223
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### vscode.workspace.workspaceFile  \nThere is a new workspace property `workspace.workspaceFile` returning the location of the workspace file. For example: `file:///Users/name/Development/myProject.code-workspace` or `untitled:1555503116870` for a workspace that is untitled and not yet saved.  \nDepending on the workspace that is opened, the value will be:  \n* `undefined` when no workspace or a single folder is opened.\n* The path of the workspace file as `Uri`.  \nIf the workspace is untitled, the returned URI will use the `untitled:` scheme.  \nOne use of the workspace file location is to call the `vscode.openFolder` command to open the workspace again after it has been closed:  \n```typescript\nvscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);\n```  \n**Note:** It is not recommended using the `workspace.workspaceFile` location to write configuration data directly into the file. Instead use the `workspace.getConfiguration().update()` method, which will work both when a single folder is opened as well as an untitled or saved workspace.",
    "url": "https://code.visualstudio.com/updates/v1_37#_vscode.workspace.workspacefile",
    "id": 1224
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### vscode.env.shell  \nThe proposed `vscode.env.shell` API is now stable. This should be used to get the default shell for the terminal instead of the `terminal.integrated.shell.<platform>` setting.  \n```ts\nconst shell = vscode.env.shell;\nif (shell.search(/(powershell|pwsh)/i) !== -1) {\n// Do something special that PowerShell needs\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_vscode.env.shell",
    "id": 1225
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Support for OR in when clauses  \nIt is now possible to use logical OR (`||`) in various contribution points where a `when` clause is expected.  \nFor example, when adding menu contributions:  \n```json\n\"contributes\": {\n\"menus\": {\n\"editor/title\": [{\n\"command\": \"showPreviewToSide\",\n\"when\": \"editorLangId == markdown || editorLangId == html\",\n\"group\": \"navigation\"\n}]\n}\n}\n```  \nThe AND `&&` operator has a higher precedence over OR `||`.",
    "url": "https://code.visualstudio.com/updates/v1_37#_support-for-or-in-when-clauses",
    "id": 1226
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### New theme color for active input options  \nA new color, `inputOption.activeBackground`, allows you to control the background color of activated options in input fields. This color reuses `focusBorder` so that it works better with themes by default. We've also set the default for `inputOption.activeBorder` to transparent so that the border is only used for focus.",
    "url": "https://code.visualstudio.com/updates/v1_37#_new-theme-color-for-active-input-options",
    "id": 1227
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Install extensions before running extension integration test  \nWith `vscode-test@1.1.0`, extension authors can resolve the CLI path for the downloaded copy of VS Code and use that path for extension management.  \nFor example:  \n```ts\nconst cp = require('child_process');\nconst { downloadAndUnzipVSCode, resolveCliPathFromExecutablePath } = require('vscode-test');\n\n(async () => {\nconst vscodeExecutablePath = await downloadAndUnzipVSCode('1.36.0');\nconst cliPath = resolveCliPathFromExecutablePath(vscodeExecutablePath);\n\ncp.spawnSync(cliPath, ['--install-extension', '<EXTENSION-ID-OR-PATH-TO-VSIX>'], {\nencoding: 'utf-8',\nstdio: 'inherit'\n});\n})();\n```  \nRead more in the updated [Testing Extension documentation](https://code.visualstudio.com/api/working-with-extensions/testing-extension).",
    "url": "https://code.visualstudio.com/updates/v1_37#_install-extensions-before-running-extension-integration-test",
    "id": 1228
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Updated Travis CI script for running extension integration tests on Linux  \nThe recommended configuration (see below) for extension integration tests might not work in the latest Travis CI Linux environment:  \n```bash\nif [ $TRAVIS_OS_NAME == \"linux\" ]; then\nexport CXX=\"g++-4.9\" CC=\"gcc-4.9\" DISPLAY=:99.0;\nsh -e /etc/init.d/xvfb start;\nsleep 3;\nfi\n```  \nYou can now use the Xvfb script below instead:  \n```bash\nif [ $TRAVIS_OS_NAME == \"linux\" ]; then\nexport DISPLAY=':99.0'\n/usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nfi\n```  \nRead more in the updated [Continuous Integration documentation](https://code.visualstudio.com/api/working-with-extensions/continuous-integration).",
    "url": "https://code.visualstudio.com/updates/v1_37#_updated-travis-ci-script-for-running-extension-integration-tests-on-linux",
    "id": 1229
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### vscode.CustomExecution2  \nThis API is the evolution of `vscode.CustomExecution`. It uses the new and improved `vscode.Pseudoterminal` to allow task providers to create tasks that enable code within an extension to fully control a terminal, instead of just executing a script or process.  \n```ts\nexport class CustomExecution2 {\n/**\n* @param process The [Pseudoterminal](#Pseudoterminal) to be used by the task to display output.\n* @param callback The callback that will be called when the task is started by a user.\n*/\nconstructor(callback: (thisArg?: any) => Thenable<Pseudoterminal>);\n\n/**\n* The callback used to execute the task. Cancellation should be handled using\n* [Pseudoterminal.close](#Pseudoterminal.close). When the task is complete fire\n* [Pseudoterminal.onDidClose](#Pseudoterminal.onDidClose).\n*/\ncallback: (thisArg?: any) => Thenable<Pseudoterminal>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_vscode.customexecution2",
    "id": 1230
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### vscode.commands.onDidExecuteCommand  \nThere is a new event that fires whenever a command has been executed and the event's payload identifies the command and arguments.  \n```ts\nexport interface CommandExecutionEvent {\ncommand: string;\narguments: any[];\n}\nexport namespace commands {\n/**\n* An event that is emitted when a [command](#Command) is executed.\n*/\nexport const onDidExecuteCommand: Event<CommandExecutionEvent>;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_vscode.commands.ondidexecutecommand",
    "id": 1231
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Webview.toWebviewResource and Webview.cspSource  \nThe [previously proposed Webview.resourceRoot API](https://code.visualstudio.com/updates/v1_36#_webviewresourceroot) has been reworked.  \nThere are now two proposed properties on webviews:  \n* `Webview.toWebviewResource` -Convert a URI for the local file system to one that can be used inside webviews.  \nFor desktop VS Code, this will convert `file:` URIs into `vscode-resource:` URIs.  \n* `Webview.cspSource` -The content security policy source for webview resources.  \nFor desktop VS Code, this would be the string `vscode-resource:`.  \n```ts\nconst panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {\n// Restrict the webview to only loading local content from our extension's `media` directory.\nlocalResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]\n});\n\nconst imagePath = vscode.Uri.file(path.join(extensionPath, 'media'));\n\npanel.html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src ${panel.webview.cspSource} https:;\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Cat Coding</title>\n</head>\n<body>\n<img src=\"${panel.webview.toWebviewResource(imagePath)}/cat.gif\" width=\"300\" />\n</body>\n</html>`\n```",
    "url": "https://code.visualstudio.com/updates/v1_37#_webview.towebviewresource-and-webview.cspsource",
    "id": 1232
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## Engineering  \n### Removing `suppressImplicitAnyIndexErrors` in the VS Code codebase  \nWhen we [enabled strict null checking for VS Code's source](https://code.visualstudio.com/blogs/2019/05/23/strict-null), we also turned on `\"suppressImplicitAnyIndexErrors\": true` in the TypeScript compiler. This setting allows using bracket accessors on values, even if the value's type does not specifically have an index access signature.  \nThis is problematic because it can easily end up hiding errors that TypeScript could have caught:  \n```ts\nconst map = new Map()\nmap.set('property', true);\n\n...\n\nif (map['property']) { // This is not an TS error but it does not do what you want!\ndoImportantStuff();\n}\n```  \nThis iteration, we removed the `suppressImplicitAnyIndexErrors` workaround and fixed the 250 or so errors it was suppressing. The two most common fixes were to add explicit index signatures and to switch to using a proper `Map` type for storing a map instead of using an object literal.",
    "url": "https://code.visualstudio.com/updates/v1_37#_removing-suppressimplicitanyindexerrors-in-the-vs-code-codebase",
    "id": 1233
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Progress on grid-based workbench layout  \nThis milestone, we picked up on the efforts started a few milestones regarding a grid-based layout for the workbench. Once our initial solution is complete, the new version of the workbench should function similarly, but it will be more flexible for adding new layout options and features.  \nOne new behavior we are testing is the ability to drag the terminal all the way up, completely hiding the editor. For now, the layout is still behind a flag `workbench.useExperimentalGridLayout`. We enabled it by default in Insiders during the last milestone, and this will continue for the next milestone as well.",
    "url": "https://code.visualstudio.com/updates/v1_37#_progress-on-grid-based-workbench-layout",
    "id": 1234
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n### Continued exploration of iframe-based webviews  \nWe continued our exploration of using normal iframes to host VS Code's webviews. As part of this, we now support loading every iframe-based webview in a unique origin. This ensures that webviews from multiple extensions cannot affect one another.  \nYou can now also enable iframe-based webviews in desktop VS Code by setting: `\"webview.experimental.useExternalEndpoint\": true`. Note that using iframe-based webviews currently requires an internet connection. While iframe-based webviews are still experimental, we would appreciate feedback from webview extension authors on the parts of your extension that don't work when run using iframe-based webviews.",
    "url": "https://code.visualstudio.com/updates/v1_37#_continued-exploration-of-iframe-based-webviews",
    "id": 1235
  },
  {
    "content": "See what is new in the Visual Studio Code July 2019 Release (1.37)  \n## New documentation  \n### Remote Development tutorials  \nThere are new introductory tutorials to walk you through running Visual Studio Code with the Remote Development extensions.  \n* [Remote via SSH](https://code.visualstudio.com/docs/remote/ssh-tutorial) - Connect to remote and virtual machines with Visual Studio Code via SSH.\n* [Working in WSL](https://code.visualstudio.com/docs/remote/wsl-tutorial) - Run Visual Studio Code in Windows Subsystem for Linux.\n* [Dev Containers](https://code.visualstudio.com/docs/devcontainers/tutorial) - Run Visual Studio Code in a Docker Container.",
    "url": "https://code.visualstudio.com/updates/v1_37#_remote-development-tutorials",
    "id": 1236
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Updated cancel search icon  \nWhen running long searches, we've updated the icon used to cancel a search to better represent the action.  \n![Cancel search icon](images/1_38/cancel-search-icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_38#_updated-cancel-search-icon",
    "id": 1238
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Validation for string array settings  \nThe settings editor now displays errors for array-of-string items if the current value does not satisfy the specified `minItems`, `maxItems`, `item.enum`, or `item.pattern` schema.  \n![String of array error validation](images/1_38/string-of-array-error-validation.png)",
    "url": "https://code.visualstudio.com/updates/v1_38#_validation-for-string-array-settings",
    "id": 1239
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Link protection for outgoing links  \nVS Code now shows a prompt before opening outgoing links.  \n![Link protection prompt](images/1_38/link-protection.gif)  \nYou can open the link directly or trust specific domains to bypass this prompt. With the **Configure Trusted Domains** button or command, you can enable/disable link protection for specific domains or all outgoing links.",
    "url": "https://code.visualstudio.com/updates/v1_38#_link-protection-for-outgoing-links",
    "id": 1240
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Explorer improvements  \n**Top-level resource creation**  \nWe have improved the process of creating top-level files and folders in the Explorer. There are now three ways to create a file or folder in the root of the File Explorer:  \n* Scrolling beyond the last element in order to invoke the context menu on the empty space.\n* Pressing `kbstyle(Escape)` clears both focus and selection in the Explorer thus making the title area actions execute on the Explorer root.\n* Using a context menu on the scroll bar.  \n**Open file and preserve focus**  \nIt is now possible to open a file in preview from the Explorer while keeping focus in the Explorer. The new command is `filesExplorer.openFilePreserveFocus` and by default, it can be triggered via the `kbstyle(Space)` key.  \n**Explorer file naming**  \nThere is a new setting, `explorer.incrementalNaming`, to control duplicate file naming, which can have the values `simple` or `smart`.  \n* `simple` - Appends the word \"copy\" at the end of the duplicated name potentially followed by a number. This is the current VS Code stable behavior.\n* `smart` - Adds a number at the end of the duplicated name. If a number is already part of the name, increment that number.",
    "url": "https://code.visualstudio.com/updates/v1_38#_explorer-improvements",
    "id": 1241
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Maximize editor toggle command  \nA new command **Toggle Editor Group Sizes** (`workbench.action.toggleEditorWidths`) will toggle between maximizing the active editor group and evening out the editor group widths.",
    "url": "https://code.visualstudio.com/updates/v1_38#_maximize-editor-toggle-command",
    "id": 1242
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Grid layout for the workbench  \nThe layout engine of the workbench has been rewritten to use the same grid widget as the editor area itself. This work has been in progress for some time and Insiders builds have had this enabled by default for the past couple iterations. The setting is `workbench.useExperimentalGridLayout` and will now be enabled by default.  \n**Toggling the editor area / Maximizing the panel**  \nThe new engine provides more flexibility for the workbench layout in the future. For now, this manifests itself with the ability to hide the editor area. There is a new command available with the grid layout, **Toggle Editor Area** that will hide the editor area and allow the panel (for example Output or Debug console) to fill the layout. The **Toggle Maximized Panel** command also has the same effect. This means that a maximized panel is now truly maximized without the tiny gap previously left of the editor.  \nBelow you can see the maximized Integrated Terminal:  \n![Maximized panel](images/1_38/maximized-panel.png)  \nThe editor will automatically reappear if you try to open a file from anywhere such as the panel or sidebar.",
    "url": "https://code.visualstudio.com/updates/v1_38#_grid-layout-for-the-workbench",
    "id": 1243
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Hide individual macOS Touch Bar entries  \nA new setting `keyboard.touchbar.ignored` can selectively remove VS Code commands from the macOS Touch Bar. VS Code adds the following commands by default:  \n* `workbench.action.navigateBack`\n* `workbench.action.navigateForward`\n* `workbench.action.debug.start`\n* `workbench.action.debug.run`\n* `workbench.action.debug.continue`\n* `workbench.action.debug.pause`\n* `workbench.action.debug.stepOver`\n* `workbench.action.debug.stepInto`\n* `workbench.action.debug.stepOut`\n* `workbench.action.debug.restart`\n* `workbench.action.debug.stop`",
    "url": "https://code.visualstudio.com/updates/v1_38#_hide-individual-macos-touch-bar-entries",
    "id": 1244
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### New editor group context keys  \nThere are two new when clause contexts for conditionally binding keyboard shortcuts:  \n* `activeEditorGroupIndex` - A number starting from `1` reflecting the position of an editor group in the editor grid. The group with index `1` will be the first in the top-left corner.\n* `activeEditorGroupLast` - Will be `true` for the last editor group in the editor grid.  \n**Note:** See [when clause contexts reference](https://code.visualstudio.com/api/references/when-clause-contexts) for a full list of when clause contexts.",
    "url": "https://code.visualstudio.com/updates/v1_38#_new-editor-group-context-keys",
    "id": 1245
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Accessibility improvements  \nWe continue to fix [accessibility issues](https://github.com/microsoft/vscode/issues?q=is%3Aissue+label%3Aaccessibility+milestone%3A%22August+2019%22+is%3Aclosed) in this milestone. Highlights are:  \n* Word navigation now follows what NVDA and VoiceOver expect. Words are properly announced when navigating using word navigation in the editor.\n* The Windows Magnifier Tool can now follow the cursor in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_38#_accessibility-improvements",
    "id": 1246
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Screencast mode  \nThere have been several improvements to the Screencast mode (**Developer: Toggle Screencast Mode**):  \n* There's now a limit on the length of the screencast keybinding label.\n* The keybinding label vertical position can be adjusted via the `screencastMode.verticalOffset` setting.\n* The keybinding label can be configured to render only actual keyboard shortcuts via the `screencastMode.onlyKeyboardShortcuts` setting.\n* The keyboard shortcuts render style was improved.",
    "url": "https://code.visualstudio.com/updates/v1_38#_screencast-mode",
    "id": 1247
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Editor  \n### Cursor surrounding lines (scrollOff)  \nYou can now customize the number of visible lines to display around the cursor when moving the cursor towards the beginning or end of a file by setting `editor.cursorSurroundingLines`. In the Vim editor, this feature is called `scrollOff`.  \n![Cursor surrounding lines](images/1_38/cursor-surrounding-lines.gif)",
    "url": "https://code.visualstudio.com/updates/v1_38#_cursor-surrounding-lines-scrolloff",
    "id": 1248
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Multi-line search in Find  \nThe editor Find control now supports multiple line text search and replace. By pressing `kbstyle(Ctrl+Enter)`, you can insert new lines into the input box.  \n![Multi-line search in the editor](images/1_38/multiple-line-support.gif)",
    "url": "https://code.visualstudio.com/updates/v1_38#_multi-line-search-in-find",
    "id": 1249
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Copy and revert in the inline diff editor  \nThere are new actions for copying or reverting deleted content when using the inline diff editor. Hover on deleted content in the inline diff editor and you can now:  \n* Copy the whole deleted content\n* Copy a specific line\n* Revert the change  \n![Diff actions](images/1_38/diff-actions.gif)",
    "url": "https://code.visualstudio.com/updates/v1_38#_copy-and-revert-in-the-inline-diff-editor",
    "id": 1250
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Go to Line supports negative line numbers  \nYou can now type in negative line numbers to the **Go to Line** picker to navigate from the end of the file. For example, typing `-1` will reveal the last line of the file.",
    "url": "https://code.visualstudio.com/updates/v1_38#_go-to-line-supports-negative-line-numbers",
    "id": 1251
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Global search minimap decorations  \nThe minimap (code overview) now shows search results for searches both within a file and global search.",
    "url": "https://code.visualstudio.com/updates/v1_38#_global-search-minimap-decorations",
    "id": 1252
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Integrated Terminal  \n### Improved fallback behavior when using variables in terminal.integrated.cwd  \nWhen using variables in the `cwd` setting such as:  \n```json\n\"terminal.integrated.cwd\": \"${fileDirname}\"\n```  \ninstead of throwing an error when a variable cannot be resolved, the terminal will now log an error to the console and fallback to the workspace directory.",
    "url": "https://code.visualstudio.com/updates/v1_38#_improved-fallback-behavior-when-using-variables-in-terminal.integrated.cwd",
    "id": 1253
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Automation shell setting  \nIn addition to setting the shell for the Integrated Terminal, you can now specify a shell for automation (such as Tasks). This is particularly useful if you use tmux as your shell since that doesn't work with all automation.  \n```json\n\"terminal.integrated.shell.osx\": \"/Users/user/bin/tmux_script\"\n\"terminal.integrated.automationShell.osx\": \"bash\",\n```",
    "url": "https://code.visualstudio.com/updates/v1_38#_automation-shell-setting",
    "id": 1254
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Languages  \n### MDN Reference for HTML and CSS  \nVS Code now displays a URL pointing to the relevant MDN Reference in completion and hover of HTML & CSS entities:  \n![HTML & CSS MDN Reference](images/1_38/html-css-mdn-reference.gif)  \nWe thank the MDN documentation team for their effort in curating [mdn-data](https://github.com/mdn/data) / [mdn-browser-compat-data](https://github.com/mdn/browser-compat-data) and making MDN resources easily accessible by VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_38#_mdn-reference-for-html-and-css",
    "id": 1255
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Improved Less support  \nVS Code now supports many new Less.js features including root functions, map lookups and anonymous mixins.",
    "url": "https://code.visualstudio.com/updates/v1_38#_improved-less-support",
    "id": 1256
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Deprecation mark for nonstandard and obsolete CSS properties  \nThe CSS language server adopts the [Deprecation Tag](https://code.visualstudio.com/updates/v1_38#_deprecation-tags-for-symbols-and-completions) experimental API and shows a deprecation mark for CSS properties marked as `nonstandard` or `obsolete` in auto completion.  \n![CSS deprecated properties](images/1_38/css-deprecated-properties.png)",
    "url": "https://code.visualstudio.com/updates/v1_38#_deprecation-mark-for-nonstandard-and-obsolete-css-properties",
    "id": 1257
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### TypeScript 3.6  \nVS Code now ships with TypeScript 3.6.2. This major update brings some TypeScript language improvements\u2014including [stricter generators](https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/#stricter-generators) and [support for `import.meta`](https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/#import-meta-support-in-systemjs), as well as some new tooling features for both JavaScript and TypeScript. As always, this release also includes a number of important bug fixes.  \nYou can read more about the TypeScript 3.6 features on the [TS 3.6 blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/).",
    "url": "https://code.visualstudio.com/updates/v1_38#_typescript-3.6",
    "id": 1258
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Add missing await Quick Fix  \nIs your code getting a little ahead of itself? The new **Add 'await'** Quick Fix helps you `await` values that you may have overlooked in asynchronous code:  \n![Detect missing calls to await in JavaScript using @ts-check and Quick Fix them](images/1_38/js-await-quickfix.gif)  \nThis Quick Fix is available in TypeScript and JavaScript source code that has [type checking enabled](https://code.visualstudio.com/Docs/languages/javascript#_type-checking).",
    "url": "https://code.visualstudio.com/updates/v1_38#_add-missing-await-quick-fix",
    "id": 1259
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Semicolon aware editing for JavaScript and TypeScript  \nWhen you add an import or apply a refactoring in JavaScript or Typescript source code, VS Code now tries to infer whether or not to  include semicolons from existing code in the file:  \n![No semicolons](images/1_38/js-no-semicolon.gif)  \nYou can find the details of how this semicolon detection works on the [pull request that added this feature](https://github.com/microsoft/TypeScript/pull/31801). Some Quick Fixes and refactorings as still not semicolon aware, but we will be working to address this in future updates.",
    "url": "https://code.visualstudio.com/updates/v1_38#_semicolon-aware-editing-for-javascript-and-typescript",
    "id": 1260
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### JSDoc comments no longer merge for IntelliSense  \nPreviously, our JavaScript and TypeScript IntelliSense would combine multiple JSDoc comments if they appeared before a definition. In the example below, notice how the documentation for the `User` type is merged with that of the `getUser` function:  \n![Older TS versions merged multiple JSDoc comments](images/1_38/js-jsdoc-merge-before.png)  \nWith TypeScript 3.6, our IntelliSense now only uses the immediately preceding JSDoc comment for documentation and typing information:  \n![TS 3.6 only uses the immediately preceding JSDoc comment](images/1_38/js-jsdoc-merge-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_38#_jsdoc-comments-no-longer-merge-for-intellisense",
    "id": 1261
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Source Control  \n### Git: Branch name on commit input  \nThe current Git branch name now appears in the commit input box, to avoid committing on the wrong branch:  \n![Git branch name in input box](images/1_38/branch-name.png)",
    "url": "https://code.visualstudio.com/updates/v1_38#_git:-branch-name-on-commit-input",
    "id": 1262
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Git: Sort branch list alphabetically  \nThere's a new `git.branchSortOrder` setting to change the order of branches when checking out to a branch with the **Git: Checkout to...** command.",
    "url": "https://code.visualstudio.com/updates/v1_38#_git:-sort-branch-list-alphabetically",
    "id": 1263
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Git: Support pull cancellation  \nWhen enabling the `git.supportCancellation` setting, you'll have the opportunity to cancel ongoing **Git Pull** requests, which is useful when pulling from slow remotes.",
    "url": "https://code.visualstudio.com/updates/v1_38#_git:-support-pull-cancellation",
    "id": 1264
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Debugging  \n### Breaking when value changes (Data Breakpoints)  \nFrom the Variables view, it is now possible to create data breakpoints that will get hit when the value of the underlying variable changes. Just like other breakpoints, data breakpoints can be disabled/enabled and removed in the Breakpoints view.  \n![Data breakpoints](images/1_38/data-breakpoints.png)  \nPlease note that data breakpoints require specific support by an underlying runtime or debugger, and we expect only a few debug extensions like C++ and C# (but not Node.js) to opt into this feature in the future. For this release, only our example debugger [Mock Debug](https://marketplace.visualstudio.com/items?itemName=andreweinand.mock-debug) \"mocks\" data breakpoints.",
    "url": "https://code.visualstudio.com/updates/v1_38#_breaking-when-value-changes-data-breakpoints",
    "id": 1265
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Call Stack view improvements  \nWe have done some improvements to the Call Stack view, most notably:  \n* When a debug session has just one thread, we will always hide the thread and show the call stack directly.\n* Clicking on the threads and debug sessions in the Call Stack view no longer expands / collapses them. Only an explicit click on the twistie will do the expansion. The reason for this change is that it was tedious to change the focused session without doing some unwanted expansion. The same behavior can be seen in our Outline view.\n* Previously when there was a new debug session, the Debug view would get focus. Now the Debug view gets focus only if a session actually breaks.\n* Debug session elements only display a twistie when there are actually threads for that session.",
    "url": "https://code.visualstudio.com/updates/v1_38#_call-stack-view-improvements",
    "id": 1266
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### New shell setting for launching a debug target  \nWhen launching a debug target in the Integrated Terminal, VS Code now respects the new \"shell for automation\" setting (`terminal.integrated.automationShell...`). This setting is useful if you use a specific default shell for the Integrated Terminal (for example, tmux) that does not work with automation, when launching a debug target.  \n```json\n\"terminal.integrated.shell.osx\": \"/Users/user/bin/tmux_script\"\n\"terminal.integrated.automationShell.osx\": \"bash\",\n```",
    "url": "https://code.visualstudio.com/updates/v1_38#_new-shell-setting-for-launching-a-debug-target",
    "id": 1267
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Contributions to extensions  \n### Helping webview extensions add a Content Security Policy  \nWe've identified a number of extensions that create [Webviews](https://code.visualstudio.com/api/extension-guides/webview) that don't have a [Content Security Policy](https://developer.mozilla.org/docs/Web/HTTP/CSP). While this does not present an immediate concern, all webview should have a content security policy as a good security best practice. This iteration, we've [started to open issues](https://github.com/microsoft/vscode/issues/79340) against these extensions to make them aware of the recommendation.  \nIf you are interested in making some of the extensions you use everyday a bit more secure, take a look at [VS Code issue #79340](https://github.com/microsoft/vscode/issues/79340) and submit PRs to help them out.",
    "url": "https://code.visualstudio.com/updates/v1_38#_helping-webview-extensions-add-a-content-security-policy",
    "id": 1268
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### GitHub Pull Requests  \nThis milestone we continued working on improvements to the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, including bug fixes and features like **Delete branch and remote after merging a pull request**. See our [August Milestone plan](https://github.com/microsoft/vscode-pull-request-github/milestone/5?closed=1) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_38#_github-pull-requests",
    "id": 1269
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Remote Development (Preview)  \nWork has continued on the [Remote Development](https://aka.ms/vscode-remote/download/extension) extensions, which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nTo help get you started with the Remote Development extensions, there are three introductory tutorials:  \n* [Dev Containers](https://code.visualstudio.com/docs/devcontainers/tutorial) - Run Visual Studio Code in a Docker Container.\n* [Remote via SSH](https://code.visualstudio.com/docs/remote/ssh-tutorial) - Connect to remote and virtual machines with Visual Studio Code via SSH.\n* [Working in WSL](https://code.visualstudio.com/docs/remote/wsl-tutorial) - Run Visual Studio Code in Windows Subsystem for Linux.  \nYou can also read a recent blog post describing [Tips and Tricks for Linux development with WSL and Visual Studio Code](https://devblogs.microsoft.com/commandline/tips-and-tricks-for-linux-development-with-wsl-and-visual-studio-code/).  \nFeature highlights in 1.38 include:  \n* VS Code Stable preview support for Alpine Linux Containers, Alpine WSL distributions, and ARMv7l / AArch32 SSH hosts.\n* VS Code Insiders experimental support for ARMv8l / AArch64 SSH hosts.\n* Improvements to Dev Containers including a new container explorer!  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_38.md).",
    "url": "https://code.visualstudio.com/updates/v1_38#_remote-development-preview",
    "id": 1270
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Extension authoring  \n### VS Code icon repository  \nWe've published a repository of all of the [VS Code icons](https://github.com/microsoft/vscode-icons) for use by extension authors. There are dark/light versions of each icon, and we also linked to our [Figma design file](https://www.figma.com/file/7wJdjbq2rKZffZqPdz6OjN/VS-Code-Icons-%E2%80%94-Public?node-id=0%3A1).  \n![VS Code icons](images/1_38/vscode-icons-repo.png)",
    "url": "https://code.visualstudio.com/updates/v1_38#_vs-code-icon-repository",
    "id": 1271
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Webview.asWebviewUri and Webview.cspSource  \nThere are two new properties on webviews:  \n* `Webview.asWebviewUri` -Convert a URI for the local file system to one that can be used inside webviews.  \nFor desktop VS Code, this will convert `file:` URIs into `vscode-resource:` URIs.  \n* `Webview.cspSource` -The content security policy source for webview resources.  \nFor desktop VS Code, this would be the string `vscode-resource:`.  \n```ts\nconst panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {\n// Restrict the webview to only loading local content from our extension's `media` directory.\nlocalResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]\n});\n\nconst imagePath = vscode.Uri.file(path.join(extensionPath, 'media'));\n\npanel.html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src ${panel.webview.cspSource} https:;\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Cat Coding</title>\n</head>\n<body>\n<img src=\"${panel.webview.asWebviewUri(imagePath)}/cat.gif\" width=\"300\" />\n</body>\n</html>`\n```",
    "url": "https://code.visualstudio.com/updates/v1_38#_webview.aswebviewuri-and-webview.cspsource",
    "id": 1272
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Warning when creating webview without a Content Security Policy  \nWhile developing an extension that uses the [Webview API](https://code.visualstudio.com/api/extension-guides/webview), we now log a warning when you create a webview that does not set a [Content Security Policy](https://developer.mozilla.org/docs/Web/HTTP/CSP).  \n![Debug warning for a webview that lacks a CSP](images/1_38/webview-csp-warning.png)  \nAll webviews (even very simple ones) should set a content security policy. This helps limit the potential impact of content injections and is generally a good measure for defense in depth. We've documented how to add a content security policy to VS Code webviews in the [Webview extension guide](https://code.visualstudio.com/api/extension-guides/webview#content-security-policy).",
    "url": "https://code.visualstudio.com/updates/v1_38#_warning-when-creating-webview-without-a-content-security-policy",
    "id": 1273
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Machine-specific overridable settings  \nYou can now define a machine specific setting that can be overridable at workspace and folder level using the scope `machine-overridable`.  \n```json\n\"configuration\": {\n\"title\": \"My Extension Settings\",\n\"properties\": {\n\"myextension.libPath\": {\n\"type\": [\n\"string\",\n\"null\"\n],\n\"markdownDescription\": \"Specify the path to the library.\",\n\"default\": null,\n\"scope\": \"machine-overridable\"\n}\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_38#_machine-specific-overridable-settings",
    "id": 1274
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Multi-select in custom tree view  \nTrees contributed through `createTreeView` can now add the `canSelectMany` option to the `TreeViewOptions<T>`. This enables multi-select in the contributed tree view and causes commands that are run on tree elements to receive all the selected tree elements as an array in the second command argument.",
    "url": "https://code.visualstudio.com/updates/v1_38#_multi-select-in-custom-tree-view",
    "id": 1275
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### markdown.api.render  \nThe new `markdown.api.render` command from VS Code's built-in Markdown extension takes a `string` of Markdown or a `vscode.TextDocument` and returns the rendered Markdown as HTML:  \n```ts\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\nvscode.commands.executeCommand('markdown.api.render', '# Hello Markdown').then(result => {\nconsole.log(`rendered markdown: ${result}`);\n});\n}\n```  \nLogs:  \n```html\nrendered markdown: <h1 id=\"hello-markdown\" data-line=\"0\" class=\"code-line\">Hello Markdown</h1>\n```",
    "url": "https://code.visualstudio.com/updates/v1_38#_markdown.api.render",
    "id": 1276
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Custom Data marked as Stable  \nThe custom data format introduced as experimental feature in the [January 2019 1.31 release](https://code.visualstudio.com/updates/v1_31#_html-and-css-custom-data-support) is now marked as Stable.  \n* `html.experimental.customData` - This setting is deprecated and superseded by `html.customData`.\n* `css.experimental.customData` - This setting is deprecated and superseded by `css.customData`.\n* `contributes.html.experimental.customData` - This Contribution Point is deprecated and superseded by `contributes.html.customData`.\n* `contributes.css.experimental.customData` - This Contribution Point is deprecated and superseded by `contributes.css.customData`.  \nYou can learn more about how to use the custom data format to enhance VS Code's HTML/CSS language support in the documentation and samples at [microsoft/vscode-custom-data](https://github.com/microsoft/vscode-custom-data).",
    "url": "https://code.visualstudio.com/updates/v1_38#_custom-data-marked-as-stable",
    "id": 1277
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Deprecated workspace.rootPath  \nWhen we added support for multi-root workspaces, we deprecated the API `workspace.rootPath` in favor of `workspace.workspaceFolders` and `workspace.getWorkspaceFolder`. We have noticed that many extensions still use this API, even though it won't work properly in multi-root workspaces. If you own an extension that uses this API, please update it as we may want to get rid of this API in the future. You can find more details about moving away from `rootPath` on the [Adopting-Multi-Root-Workspace-APIs wiki page](https://github.com/microsoft/vscode/wiki/Adopting-Multi-Root-Workspace-APIs#eliminating-rootpath).",
    "url": "https://code.visualstudio.com/updates/v1_38#_deprecated-workspace.rootpath",
    "id": 1278
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n## Debug Adapter Protocol  \n### Improvements for completion proposals  \nA debug adapter can now use the new capability `completionTriggerCharacters` for announcing the characters that a frontend UI should use to trigger the completion proposals UI in a REPL or debug console. If none is specified, the frontend UI should use the '.' character to trigger the proposal UI.  \nIn addition, we've added an optional `sortText` attribute to the `CompletionItem` type. With this attribute, a debug adapter can control how the frontend UI sorts the completion proposals returned by the adapter. If the attribute is missing, the frontend may sort items based on the `label` attribute.",
    "url": "https://code.visualstudio.com/updates/v1_38#_improvements-for-completion-proposals",
    "id": 1279
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Fixed a type issue in DAP's JSON schema  \nIn the [Debug Adapter Protocol JSON schema](https://github.com/microsoft/debug-adapter-protocol/blob/gh-pages/debugAdapterProtocol.json), we've changed the use of the type specifier `number` to `integer` in those places where a float type makes no sense, for example for IDs.",
    "url": "https://code.visualstudio.com/updates/v1_38#_fixed-a-type-issue-in-dap's-json-schema",
    "id": 1280
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Pseudoterminal.onDidClose now accepts a number  \nThe proposed `Pseudoterminal.onDidClose` has changed from an `Event<void>` to an `Event<void | number>`, allowing extension authors to indicate that the terminal or `CustomExecution2` task failed.",
    "url": "https://code.visualstudio.com/updates/v1_38#_pseudoterminal.ondidclose-now-accepts-a-number",
    "id": 1281
  },
  {
    "content": "See what is new in the Visual Studio Code August 2019 Release (1.38)  \n### Deprecated proposed terminal APIs removed  \nThe deprecated `TerminalOptions.runInBackground` and `createTerminalRenderer` APIs have been removed. If you need to migrate off of these, you should use `TerminalOptions.hideFromUser` (stable) and `ExtensionTerminalOptions` (proposed) respectively.",
    "url": "https://code.visualstudio.com/updates/v1_38#_deprecated-proposed-terminal-apis-removed",
    "id": 1282
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Workbench  \n### Updated Source Control view  \nThe Source Control view has been updated to use the latest tree widget. You can now toggle between a list and a tree view with the **Toggle View Mode** button on the Source Control title bar.  \n![Source Control toggle view mode button](images/1_39/scm-toggle-view-mode.png)  \nYou can change the default view using the `scm.defaultViewMode` setting, which takes the values `list` or `tree`.  \nYou also now benefit from the automatic keyboard navigation and filtering of the updated tree widget by simply starting to type in the view.  \n![Updated SCM view](images/1_39/scm.gif)  \nWhen in tree view mode, which displays folders, the Git extension now contributes commands to folders, for example **Stage Changes**, which will be applied to all files within a folder.",
    "url": "https://code.visualstudio.com/updates/v1_39#_updated-source-control-view",
    "id": 1284
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Improved Trusted Domains setting  \nWe simplified the management of trusted domains for the [outgoing link protection](https://code.visualstudio.com/updates/v1_38#_link-protection-for-outgoing-links) feature introduced in the 1.38 release.  \nYou can now use the command **Manage Trusted Domains** to easily add, remove, or modify trusted domains as a JSON text file.  \n![Improved trusted domains management](images/1_39/improved-trusted-domains-management.gif)",
    "url": "https://code.visualstudio.com/updates/v1_39#_improved-trusted-domains-setting",
    "id": 1285
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Selectable completion details  \nAuto completion details can now be selected for copy and paste.  \n![Selectable completion details](images/1_39/selectable-completion-details.gif)",
    "url": "https://code.visualstudio.com/updates/v1_39#_selectable-completion-details",
    "id": 1286
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Updated Japanese UI font on Windows  \nOn Windows, we have switched the Japanese UI typeface from `Meiryo` to `Yu Gothic UI` and `Meiryo UI`.  \nThe `UI` typefaces save horizontal space by using narrower Japanese kana characters. You can use the Japanese UI by installing the [Japanese Language Pack](https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja) and, with the **Configure Display Language** command, setting the display language identifier to `ja`.  \nIn the image below, you can see how the narrower `UI` typeface looks in the Insiders (green icon) menu bar.  \n![Japanese typeface](images/1_39/japanese-typeface.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_updated-japanese-ui-font-on-windows",
    "id": 1287
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Improved monospace typeface display in suggestions and hovers  \nPreviously, the inline `<code>` segments in the suggestion and hover widgets didn't specify `font-family`. On Windows / macOS, these segments were rendered with Chrome's default choice for `font-family: monospace`.  \nIn this iteration, we aligned them with the system sans-serif typefaces that are used throughout the VS Code UI.  \n* Windows: `Courier New` -> `Consolas` (To align with `Segoe UI`)\n* macOS: `Courier` -> `SF Mono`, `Monaco`, `Menlo` (To align with `SF Text` and `Helvetica Neue`)\n* Linux: No change. Inline code segments still rendered in `Liberation Mono`, which is Chrome's default for `font-family: monospace` on Linux.  \nBelow you can see that `SF Mono` gives a more consistent appearance to the inline code blocks.  \n![Suggest and Hover widgets monospace typeface](images/1_39/suggest-hover-widgets-monospace-typeface.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_improved-monospace-typeface-display-in-suggestions-and-hovers",
    "id": 1288
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Validation for uniqueItems in the Settings editor  \n[Validation for string array settings](https://code.visualstudio.com/updates/v1_38#_validation-for-string-array-settings), which was introduced in the 1.38 release, now supports `uniqueItems`.  \nIf using `\"uniqueItems\": true`, duplicate entries in the Settings editor will show a warning.",
    "url": "https://code.visualstudio.com/updates/v1_39#_validation-for-uniqueitems-in-the-settings-editor",
    "id": 1289
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Code block highlighting in extension READMEs  \nCode blocks in extension READMEs, which are displayed in the Extensions view Details pane, are now highlighted in VS Code:  \n![A block of JSON being highlighted](images/1_39/extension-readme-highlighting.png)  \nThe highlighting uses the current [color theme](https://code.visualstudio.com/docs/getstarted/themes).",
    "url": "https://code.visualstudio.com/updates/v1_39#_code-block-highlighting-in-extension-readmes",
    "id": 1290
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Editor  \n### Toggle folding  \nYou can now expand and collapse a folding region with the **Toggle Fold** (`kb(editor.toggleFold)`) command.",
    "url": "https://code.visualstudio.com/updates/v1_39#_toggle-folding",
    "id": 1291
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Minimap editor selection decorations  \nThe editor selection is now highlighted within the minimap:  \n![Minimap displays the editor selection](images/1_39/minimap-selection.png)  \nYou can change the color of these decorations by modifying the `minimap.selectionHighlight` theme color.",
    "url": "https://code.visualstudio.com/updates/v1_39#_minimap-editor-selection-decorations",
    "id": 1292
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Touch events for the minimap  \nThe minimap slider can now be dragged with touch.",
    "url": "https://code.visualstudio.com/updates/v1_39#_touch-events-for-the-minimap",
    "id": 1293
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### New option for multi cursor pasting  \nIn the past, when pasting multi-line text from the clipboard, VS Code would check if the clipboard text line count matched the cursor count, and if it did, it would \"distribute\" or \"spread\" each line to a cursor. You can now control this behavior with the `editor.multiCursorPaste` setting, which can have the values:  \n* `spread` - Each cursor pastes a line of text (default).\n* `full` - Each cursor pastes the full clipboard text.",
    "url": "https://code.visualstudio.com/updates/v1_39#_new-option-for-multi-cursor-pasting",
    "id": 1294
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Integrated Terminal  \n### Open new terminals with custom working directories  \nThere is a new command that allows the creation of terminals with a custom current working directory (cwd):  \n```json\n{\n\"key\": \"cmd+shift+h\",\n\"command\": \"workbench.action.terminal.newWithCwd\",\n\"args\": {\n\"cwd\": \"${fileDirname}\"\n}\n}\n```  \nYou can create your own keyboard shortcuts to open new terminals in any number of handy working directories. The `cwd` value can either be a normal path or a [variable](https://code.visualstudio.com/docs/editor/variables-reference).",
    "url": "https://code.visualstudio.com/updates/v1_39#_open-new-terminals-with-custom-working-directories",
    "id": 1295
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Better locale detection  \nThe `terminal.integrated.setLocaleVariables` setting has been replaced with the new `terminal.integrated.detectLocale` setting. The default value is `auto`, which will set the `$LANG` variable in your terminal session to the detected language UTF-8 value but only when it has not been explicitly configured by the user. This better default should lead to fewer issues related to language and encoding in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_39#_better-locale-detection",
    "id": 1296
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Languages  \n### HTML ARIA attributes reference  \nAuto completion and hover information for HTML ARIA attributes now include a reference to the corresponding [WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/) documentation.  \n![HTML ARIA reference](images/1_39/html-aria-reference.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_html-aria-attributes-reference",
    "id": 1297
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### CSS property completion with semicolon  \nCSS property completion now inserts a semicolon at the end of a line.  \nYou can use this feature with `kbstyle(Ctrl+Enter)` (Windows / Linux) or `kbstyle(Cmd+Enter)` (macOS) to create a new line without pushing the ending `;` to the new line.  \nYou can control this feature with the `[css|scss|less].completion.completePropertyWithSemicolon` settings.  \n![CSS property completion semicolon](images/1_39/css-property-completion-semicolon.gif)",
    "url": "https://code.visualstudio.com/updates/v1_39#_css-property-completion-with-semicolon",
    "id": 1298
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### CSS color preview for variable completion  \nWhen completing CSS variables, if the original variable is a color string, VS Code now shows the completion item with its color:  \n![CSS variable completion with color swatch](images/1_39/css-color-swatch-variable.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_css-color-preview-for-variable-completion",
    "id": 1299
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### markdown.links.openLocation  \nThe new `markdown.links.openLocation` setting controls where links within Markdown files are opened.  \n`markdown.links.openLocation` has two values:  \n* `currentGroup` - Opens links in the current editor group (default).\n* `beside` -Open links to the side of the current Markdown editor.  \n`\"markdown.links.openLocation\": \"beside\"` can be useful when working on documentation.",
    "url": "https://code.visualstudio.com/updates/v1_39#_markdown.links.openlocation",
    "id": 1300
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Debugging  \n### Improved UI for column breakpoints  \nWhile debugging, VS Code now shows all the breakpoint candidate locations inline. This makes it easier for the user to place a breakpoint on a more accurate position. To not clutter the UI, candidate breakpoints are only shown if there is more than one possible location on the line.  \nYou can interact directly with inline breakpoints; clicking to enable and disable them and invoking their context menu for more actions.  \n![Inline breakpoints](images/1_39/breakpoints.gif)  \nNote that this feature requires support by the underlying runtime or debugger, and we expect only a few debug extensions will use this feature in the future. For this release, **Node Debug** and the **Debugger for Chrome** support this. As an example for extension authors, our [Mock Debug](https://marketplace.visualstudio.com/items?itemName=andreweinand.mock-debug) sample \"mocks\" support for this.",
    "url": "https://code.visualstudio.com/updates/v1_39#_improved-ui-for-column-breakpoints",
    "id": 1301
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Inline debug actions in CALL STACK view  \nWhen there are sessions or threads shown in the CALL STACK view, we now show debug actions inline on hover. This will make it easier to control the debug flow when debugging multiple sessions or threads. You no longer need to first set focus on a session or thread in order to perform an action on it.  \nIf a session has only one thread, all actions are shown on the session since the thread is not displayed. Otherwise all actions are shown in their context (session actions on sessions and thread actions on threads).  \n![Inline debug actions from the Call Stack view](images/1_39/callstack.gif)",
    "url": "https://code.visualstudio.com/updates/v1_39#_inline-debug-actions-in-call-stack-view",
    "id": 1302
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Improved CALL STACK view behavior  \nWe improved the functionality of the CALL STACK view:  \n* Clicking on the debug session or the thread no longer expands them. You have to click on the chevron (**>**) UI element directly. This prevents accidentally expanding a session or thread when you just want to move focus.\n* VS Code no longer automatically focuses new debug sessions if they did not break.",
    "url": "https://code.visualstudio.com/updates/v1_39#_improved-call-stack-view-behavior",
    "id": 1303
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Improved link detection in Debug Console  \nVS Code now detects links in expressions in the Debug Console, not only in string output. The link detection algorithm was also improved.",
    "url": "https://code.visualstudio.com/updates/v1_39#_improved-link-detection-in-debug-console",
    "id": 1304
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### PreLaunchTask can now refer to default build  \nWith the introduction of a new variable `${defaultBuildTask}`, it is now possible to have a generic `preLaunchTask` that always refers to the default build task:  \n```json\n{\n\"name\": \"Hello World\",\n\"type\": \"node\",\n\"request\": \"launch\",\n\"preLaunchTask\": \"${defaultBuildTask}\"\n}\n```  \n`${defaultBuildTask}` resolves to the name of the task that is run when the command **Tasks: Run Build Task** is executed. Similar to using the **Run Build Task** command, if there are multiple default build tasks, or no default build task, then a Quick Pick is shown to select the build task.",
    "url": "https://code.visualstudio.com/updates/v1_39#_prelaunchtask-can-now-refer-to-default-build",
    "id": 1305
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Save choice when preLaunchTask errors  \nYou can now remember your choice when there is a `preLaunchTask` error with the **Remember my choice in user settings** checkbox. Your choice is stored in user settings with `debug.onTaskErrors`, which can have three values; `prompt` (default), `debugAnyway`, and `showErrors`.  \n![PreLaunchTask error choice dialog](images/1_39/prelaunch-choice.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_save-choice-when-prelaunchtask-errors",
    "id": 1306
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Contributions to extensions  \n### Remote Development (Preview)  \nWork has continued on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.39 include:  \n* Remote Explorer now supports the WSL extension and lets you easily connect to installed Linux distros.\n* New **Clone Repository in Container Volume** command so you can work on source code repositories in isolation.\n* Experimental support for SSH connection sharing and using SSH to connect to Windows remote machines.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_39.md).  \nYou can also read two recent blog posts describing:  \n* [Remote SSH Tips and Tricks](https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks)\n* [WSL 2 with Visual Studio Code](https://code.visualstudio.com/blogs/2019/09/03/wsl2).",
    "url": "https://code.visualstudio.com/updates/v1_39#_remote-development-preview",
    "id": 1307
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Extension authoring  \n### Extension terminal API  \nThe extension terminal API has been finalized, allowing an extension to react to terminal input and fully control its output. The following creates an extension terminal and prints 'Hello world' in red on startup:  \n```ts\nconst writeEmitter = new vscode.EventEmitter<string>();\nconst pty: vscode.Pseudoterminal = {\nonDidWrite: writeEmitter.event,\nopen: () => writeEmitter.fire('\\x1b[31mHello world\\x1b[0m'),\nclose: () => {}\n};\nvscode.window.createTerminal({ name: 'My terminal', pty });\n```  \nSee the [API reference](https://code.visualstudio.com/api/references/vscode-api) and the [extension-terminal-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/extension-terminal-sample) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_39#_extension-terminal-api",
    "id": 1308
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Deprecation tags for symbols and completions  \nThe symbol tag API that allows completion items and symbols to be marked as deprecated has been finalized. Learn more about it in the [1.38 release notes](https://code.visualstudio.com/updates/v1_38#_deprecation-tags-for-symbols-and-completions).  \nHere you can see that the [Java extension](https://marketplace.visualstudio.com/items?itemName=redhat.java) is using `SymbolTag.Deprecated` to show source code that references deprecated types or members with a strike-through line.  \n![Java deprecated method](images/1_39/java-deprecated-method.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_deprecation-tags-for-symbols-and-completions",
    "id": 1309
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Debug Session name is no longer readonly  \nIt is possible to change the name of the `DebugSession`. The debug session's name is initially taken from the `DebugConfiguration`. Any changes will be properly reflected in the UI.",
    "url": "https://code.visualstudio.com/updates/v1_39#_debug-session-name-is-no-longer-readonly",
    "id": 1310
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Warning if webviews don't use Webview.asWebviewUri for local resources  \nWhile developing an extension that uses the [Webview API](https://code.visualstudio.com/api/extension-guides/webview), we now log a warning when you create a webview that loads local resources using `vscode-resource:` URIs directly instead of using the new [Webview.asWebviewUri API](https://code.visualstudio.com/updates/v1_38#_webviewaswebviewuri-and-webviewcspsource).  \n![Debug warning for a webview that uses vscode-resources](images/1_39/webview-resource-warning.png)  \nAlthough old `vscode-resource:` URIs will continue to work, we want all webview extensions to migrate to the `Webview.asWebviewUri` API as the new API:  \n* Handles some tricky edge cases around loading local resources from network drives.\n* Makes it possible to have a webview that can load a mix of local and remote content.\n* Will work more reliably for web versions of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_39#_warning-if-webviews-don't-use-webview.aswebviewuri-for-local-resources",
    "id": 1311
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### TreeView message API  \nThe API to set a message in a tree view has been finalized. You can see an example of how to use the message API in the [tree view extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/tree-view-sample).",
    "url": "https://code.visualstudio.com/updates/v1_39#_treeview-message-api",
    "id": 1312
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Updated Octicons style  \nWe've updated our [Octicons](https://code.visualstudio.com/api/references/icons-in-labels) to match our [new icon outline style](https://code.visualstudio.com/updates/v1_37#_new-product-icons) so that all of our iconography is consistent.  \n![Updated Octicons](images/1_39/updated-octicons.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_updated-octicons-style",
    "id": 1313
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### SCM folder menu  \nThe updated SCM view now supports rendering changes as a tree. As an SCM provider, you can contribute commands to a folder's menu using the `scm/resourceFolder/context` menu id.",
    "url": "https://code.visualstudio.com/updates/v1_39#_scm-folder-menu",
    "id": 1314
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Finding possible breakpoints in a source range  \nThe new `breakpointLocations` request can be used by a DAP client to find all possible breakpoint locations in a given source range. This can be used in the UI in order to improve the discoverability of \"inline\" (\"column\") breakpoints.  \nA client may only call the `breakpointLocations` request if the `supportsBreakpointLocationsRequest` capability is defined and has the value of `true`.",
    "url": "https://code.visualstudio.com/updates/v1_39#_finding-possible-breakpoints-in-a-source-range",
    "id": 1315
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### vscode.env.asExternalUri  \nThe proposed `vscode.env.asExternalUri` API allows an extension to resolve an **external** URI - such as a `http:` or `https:` URI - from where the extension is running to a URI for the same resource on the client machine. This is a companion to the `vscode.env.openExternal` API, except instead of opening the resolved URI using an external program, it returns the result to extensions.  \n```ts\nimport * as vscode from 'vscode';\nimport * as http from 'http';\n\nconst PORT = 3000;\n\nexport function activate(context: vscode.ExtensionContext) {\nstartLocalServer(PORT);\n\ncontext.subscriptions.push(vscode.commands.registerCommand('example.command', async () => {\nconst resolved = vscode.env.asExternalUri(vscode.Uri.parse(`http://localhost:${PORT}`));\nvscode.window.showInformationMessage(`Resolved to: ${resolved} on client and copied to clipboard`);\nvscode.env.clipboard.writeText(resolved.toString());\n}));\n}\n\nfunction startLocalServer(port: number) {\nconst server = http.createServer((req, res) => {\nres.end('Hello world!');\n});\nserver.on('clientError', (err, socket) => {\nsocket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(port);\nvscode.window.showInformationMessage(`Started local server on port: ${port}`);\n}\n```  \n`vscode.env.asExternalUri` currently only supports `http:` and `https:` URIs. It is a no-op if the extension is running on the client machine. However, if the extension is running remotely, `vscode.env.asExternalUri` automatically establishes a port forwarding tunnel from the local machine to `target` on the remote and returns a local URI to the tunnel.",
    "url": "https://code.visualstudio.com/updates/v1_39#_vscode.env.asexternaluri",
    "id": 1316
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Readonly webview editors for resources  \nYou can find VS Code extensions for previewing everything from shaders to Excel files to 3D models. A few bold extensions have even built complex editor-style experiences for visually editing binary or XML files. While it's great that all this is already possible using VS Code's existing extension API, building a preview or custom editor currently requires cobbling together a bunch of APIs in non-intuitive ways. It also leaves a lot up to extensions themselves, often resulting in user experiences that are not consistent with the rest of VS Code. The [custom editor API](https://github.com/microsoft/vscode/issues/82115) proposal aims to improve this.  \nThe custom editor API will provide a framework for extensions to create fully customizable read/write editors that are used in place of VS Code's standard text editor for specific resources. A XAML custom editor, for example, could show a WYSIWYG style editor for your `.xaml` files. Our end goal is to give extensions the most flexibility possible while keeping VS Code fast, lean, and consistent.  \nThis iteration, we are sharing the first pieces of the custom editor API proposal: readonly, webview-based custom editors. You can find an overview of the custom editor proposal [here](https://github.com/microsoft/vscode/issues/82115). Custom editors are already being used to power VS Code's built-in image preview.  \nThe current proposal is only a first step and will likely be heavily revised. We will continue to iterate on the custom editor API over the coming months.",
    "url": "https://code.visualstudio.com/updates/v1_39#_readonly-webview-editors-for-resources",
    "id": 1317
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### TreeView title  \nThe tree view title has always been taken from the extension's `package.json` file. Now, a tree view title is initially taken from `package.json` but can be changed later. Changes to the `title` property will be properly reflected in the UI in the title of the view.",
    "url": "https://code.visualstudio.com/updates/v1_39#_treeview-title",
    "id": 1318
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### startDebugging consoleMode option to merge Debug Consoles  \nIn order to support hierarchical debug sessions better, we've added an optional argument `consoleMode` to the `vscode.debug.startDebugging` API. This argument controls if VS Code should merge the Debug Console of the parent and child debug sessions. For example, this is particularly useful for cluster debugging, where there are many child sessions and it is much cleaner if all the debug sessions go to the same Debug Console.",
    "url": "https://code.visualstudio.com/updates/v1_39#_startdebugging-consolemode-option-to-merge-debug-consoles",
    "id": 1319
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Removed deprecated Terminal.onDidWriteData API  \nThe `Terminal.onDidWriteData` proposed API has been removed in favor of the global event `window.onDidWriteTerminalData`.",
    "url": "https://code.visualstudio.com/updates/v1_39#_removed-deprecated-terminal.ondidwritedata-api",
    "id": 1320
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## Engineering  \n### Website refresh  \nWe updated the [Visual Studio Code website](https://code.visualstudio.com) icons and colors to better match our brand. This is reflected throughout the website and [documentation](https://code.visualstudio.com/docs) pages.  \n![Website colors updated](images/1_39/website-refresh.png)",
    "url": "https://code.visualstudio.com/updates/v1_39#_website-refresh",
    "id": 1321
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### JavaScript minification via terser  \nWe changed the minifier used for minification of JavaScript for the product build to be [terser](https://github.com/terser/terser). Previously we had been using an older version of `uglify-es`. The terser developers have been very helpful supporting us during the adoption.",
    "url": "https://code.visualstudio.com/updates/v1_39#_javascript-minification-via-terser",
    "id": 1322
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Filewatcher update (Chokidar)  \nDuring this milestone, we updated our file watcher for macOS and Linux to version `3.x`, which brings improved performance, reduced memory consumption, and a smaller package size. You can learn more from the [Chokidar repo](https://github.com/paulmillr/chokidar) and [Chokidar 3 blog post](https://paulmillr.com/posts/chokidar-3-save-32tb-of-traffic/).",
    "url": "https://code.visualstudio.com/updates/v1_39#_filewatcher-update-chokidar",
    "id": 1323
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Integration tests run against the real build  \nOur product builds run a large integration test suite as part of the build. Previously, these tests were executing against VS Code running out of sources. Now, these tests use the built version of VS Code to verify that the build is ready to be released.",
    "url": "https://code.visualstudio.com/updates/v1_39#_integration-tests-run-against-the-real-build",
    "id": 1324
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Building VS Code using TypeScript 3.6  \nVS Code core and the built-in extensions are now built using [TypeScript 3.6](https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/).",
    "url": "https://code.visualstudio.com/updates/v1_39#_building-vs-code-using-typescript-3.6",
    "id": 1325
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n### Image preview moved to a built-in extension  \nVS Code's image preview functionality has been moved out of the core codebase and into a built-in **Image Preview** extension. The functionality of image previews should be almost exactly the same as before.  \n![The built-in Image Preview extension](images/1_39/image-preview-extension.png)  \nExtracting image preview into a built-in extension makes it easier to fix bugs and add features, and will eventually allow extensions to override VS Code's built-in image preview more easily.  \nThis change was enabled by the [custom editor API](#readonly-webview-editors-for-resources) work we completed this iteration.",
    "url": "https://code.visualstudio.com/updates/v1_39#_image-preview-moved-to-a-built-in-extension",
    "id": 1326
  },
  {
    "content": "See what is new in the Visual Studio Code September 2019 Release (1.39)  \n## New documentation  \n### Node.js deployment tutorials  \nThe [Node.js deployment tutorials](https://code.visualstudio.com/docs/azure/deployment) have moved to the [Azure JavaScript Developer Center](https://learn.microsoft.com/azure/developer/javascript) on [learn.microsoft.com](https://learn.microsoft.com).  \nThere you can find tutorials for using Visual Studio Code to:  \n* [Deploy Azure Functions](https://learn.microsoft.com/azure/developer/javascript/tutorial/azure-function-cosmos-db-mongo-api)\n* [Deploy to Azure App Service](https://learn.microsoft.com/azure/app-service/tutorial-nodejs-mongodb-app)\n* [Deploy Docker containers](https://learn.microsoft.com/azure/developer/javascript/tutorial/tutorial-vscode-docker-node/tutorial-vscode-docker-node-01)\n* [Create a static website](https://learn.microsoft.com/azure/static-web-apps/getting-started)",
    "url": "https://code.visualstudio.com/updates/v1_39#_node.js-deployment-tutorials",
    "id": 1327
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Themable window border  \nWe've introduced two new theme colors, `window.activeBorder` and `window.inactiveBorder`, for providing a border around the VS Code window. The `window.activeBorder` applies to the active (focused) window, while the `window.inactiveBorder` applies to inactive (unfocused) windows. These new colors do not inherit from any color, so they must either be provided by the theme or by the `workbench.colorCustomizations` setting. If only one color is specified, a border with that color will be applied to both active and inactive windows.  \n![Animated image showing the use of the new window border colors](images/1_40/window-border.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_themable-window-border",
    "id": 1329
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### List and tree keyboard scrolling  \nYou can now press `kb(list.scrollUp)` and `kb(list.scrollDown)` to scroll lists and trees using the keyboard.",
    "url": "https://code.visualstudio.com/updates/v1_40#_list-and-tree-keyboard-scrolling",
    "id": 1330
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Fewer notifications in Zen mode  \nWhile using Zen mode, notification toasts will no longer distract you unless they inform about errors. You can control this behavior with the new `zenMode.silentNotifications` setting. You can always access all notifications from the status bar by clicking on the notification icon in the bottom-right corner.",
    "url": "https://code.visualstudio.com/updates/v1_40#_fewer-notifications-in-zen-mode",
    "id": 1331
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Type filters for outline and breadcrumbs  \nThere are new settings to configure what symbols are displayed in the Outline view and breadcrumb navigation. The settings are called `outline.show{symbol type}` and `breadcrumbs.show{symbol type}`. For example, `outline.showVariables`, `outline.showFunctions`, etc.  \n![Filtered Outline view](images/1_40/outline_filtered.png)  \nThe screen shot above shows the Outline view configured to not show local variables and you can see that the variable `hidden` isn't shown.  \nNote that it's up to the language extension to assign the type of a symbol. You can hover over the symbol label in the Outline view to see which symbol type is being used (shown in parentheses).",
    "url": "https://code.visualstudio.com/updates/v1_40#_type-filters-for-outline-and-breadcrumbs",
    "id": 1332
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Control the sizing behavior when splitting editors  \nA new setting `workbench.editor.splitSizing` controls the layout of editors when splitting them. By default, the size will be distributed evenly among all editors as shown below:  \n![splitSizing with distribute value](images/1_40/split-distribute.gif)  \nChange this setting to `split` for the current editor to be split in half and not affect the size of other editors:  \n![splitSizing with split value](images/1_40/split-split.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_control-the-sizing-behavior-when-splitting-editors",
    "id": 1333
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Disable GPU acceleration  \nWe have heard issue reports from users that seem related to how the GPU is used to render VS Code's UI. These users have a much better experience when running VS Code with the additional `--disable-gpu` command-line argument. Running with this argument will disable the GPU hardware acceleration and fall back to a software renderer.  \nTo make life easier, you can add this flag as a setting so that it does not have to be passed on the command line each time.  \nTo add this flag:  \n* Open the Command Palette (`kb(workbench.action.showCommands)`).\n* Run the **Preferences: Configure Runtime Arguments** command.\n* This command will open a `argv.json` file to configure runtime arguments. You might see some default arguments there already.\n* Add `\"disable-hardware-acceleration\": true`.\n* Restart VS Code.  \n**Note:** Do not use this setting unless you are seeing issues!",
    "url": "https://code.visualstudio.com/updates/v1_40#_disable-gpu-acceleration",
    "id": 1334
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Editor  \n### files.eol per language  \nThe `files.eol` setting can now be set per language. For example, you could define that all files of 'mylanguage' language identifier use `\\n` as the default end-of-line sequence for all new files.  \n```jsonc\n\"[mylanguage]\": {\n\"files.eol\": \"\\n\"\n}\n```  \nThe end-of-line sequence is used for new files. For existing files, the current end-of-line sequence is always preserved. To change the end-of-line sequence for an existing file, use the **Change End Of Line Sequence** command.  \nUsing a `files.eol` language setting, the default end-of-line sequence for 'shellscript' is now defined as `\\n`.",
    "url": "https://code.visualstudio.com/updates/v1_40#_files.eol-per-language",
    "id": 1335
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Minimap scaling and improved font rendering  \nA new setting `editor.minimap.scale` configures the minimap's size to one of several constant values, particularly useful for high DPI or ultra-wide displays. Also, the rendering of the minimap's font is now smoother and clearer.  \n![Animated image showing the ability to resize the minimap](images/1_40/minimap-scaling.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_minimap-scaling-and-improved-font-rendering",
    "id": 1336
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Definition Preview Hover from the keyboard  \nThere is a new command **Show Definition Preview Hover** for better accessibility of the definition preview hover widget, which can be triggered by hovering a symbol with the mouse and pressing a modifier key dependent on the platform and configuration. Previously, only the command **Show Hover** was provided, which is equivalent to hovering the mouse cursor over a symbol. Now, with **Show Definition Preview Hover**, the detailed hover information can be shown via the keyboard.  \n![Animated image showing the use of the new Show Definition Preview Hover command](images/1_40/definition-preview-hover.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_definition-preview-hover-from-the-keyboard",
    "id": 1337
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Improvements to bracket matching  \nPreviously, VS Code would only highlight matching brackets when the cursor was next to a bracket character. Now VS Code will always highlight enclosing brackets if they exist.  \n![Image showing highlighted enclosing brackets](images/1_40/bracket-matching-enclosing.png)  \nWe have also adjusted our **Go to Bracket** and **Select to Bracket** actions to use enclosing brackets.",
    "url": "https://code.visualstudio.com/updates/v1_40#_improvements-to-bracket-matching",
    "id": 1338
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Duplicate selection  \nWe have added a new action named **Duplicate Selection**. When executed, the current selection will be duplicated and the result will be selected. When there is no selection, the current line will be duplicated, all without writing to the system clipboard.",
    "url": "https://code.visualstudio.com/updates/v1_40#_duplicate-selection",
    "id": 1339
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Font feature settings  \nThere is now more fine grained control over the font features. When configuring `\"editor.fontLigatures\": true`, VS Code would turn on `liga` and `calt`. But some fonts have more settings, such as stylistic sets used by [Fira Code](https://github.com/tonsky/FiraCode/releases).  \nWe now allow these font features to be explicitly controlled, for example:  \n```js\n\"editor.fontFamily\": \"Fira Code\",\n\"editor.fontLigatures\": true,\n\"[javascript]\": {\n\"editor.fontLigatures\": \"'ss02', 'ss19'\",\n},\n```  \nThe above settings configure the editor to use the **Fira Code** font family, turn on font ligatures for all languages, and in JavaScript files enable the 'Horizontal Bar' ('ss02') and the 'Dotted zero' ('ss19') font feature settings. These make the `>=` ligature render with a horizontal bar and the `0` render with a dot inside it in JavaScript:  \n![Image showing font feature settings in the editor](images/1_40/font-feature-settings.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_font-feature-settings",
    "id": 1340
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Better handling for Unicode combining characters  \nWe have made improvements around handling of [Unicode combining characters](https://en.wikipedia.org/wiki/Combining_character) and we treat such sequences as atomic characters (in cursor movement, editing operations, or in block cursor rendering). This is best demonstrated using the block cursor style and a before/after animation:  \nBefore:<br/>\n![Animation showing cursor movement before](images/1_40/unicode-before.gif)  \nAfter:<br/>\n![Animation showing cursor movement after](images/1_40/unicode-after.gif)  \nIn a related change, the status bar now shows the Unicode point count in the `Col` section.",
    "url": "https://code.visualstudio.com/updates/v1_40#_better-handling-for-unicode-combining-characters",
    "id": 1341
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Cursor Redo  \nThe **Soft Undo** command has been renamed to **Cursor Undo**. This action is useful, for example when using `kb(editor.action.addSelectionToNextFindMatch)` to select the next match and going one time too far, as it undoes only the last cursor state change. Additionally, we now have added **Cursor Redo**, which redoes the previously undone cursor state change.",
    "url": "https://code.visualstudio.com/updates/v1_40#_cursor-redo",
    "id": 1342
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Diff editor improvements  \nThe built-in diff computation used to have a hard-coded timeout of 5 seconds, after which it would give up and return a non-minimal diff. You can now configure this timeout using `\"diffEditor.maxComputationTime\"` and setting the timeout to `0` will always compute a minimal diff, no matter how long that would take. Additionally, the diff editor now renders a progress bar when the computation takes longer than one second.  \nA source of confusion when using the diff editor was when comparing files with only leading or trailing whitespace differences and the diff editor was configured to ignore trim whitespace. This would result in Source Control showing the files as modified, while the diff editor would render no diffs. VS Code now displays a **Show Whitespace Differences** button when it detects this case to help you quickly show diffs in whitespace. This can be toggled using the **Show/Ignore Trim Trailing Whitespace Difference** command at the top of the diff editor:  \n![Animation for button that shows when comparing two files that contain only whitespace diffs but the diff editor is configured to ignore trim whitespace](images/1_40/diff-editor-show-whitespace-button.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_diff-editor-improvements",
    "id": 1343
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Integrated Terminal  \n### Chords are now supported by default  \nThe new setting `terminal.integrated.allowChords` (default `true`) allows keybindings that are part of a chord keybinding to skip the terminal for evaluation and instead get handled by VS Code (bypassing the `terminal.integrated.commandsToSkipShell` allow list).  \nNote that the same limitations around keybindings in the terminal still apply; the chord keybinding with the highest priority will be considered when making this evaluation.  \nFor example, if an extension contributes keybinding `kbstyle(Ctrl+M A)` and you have the following defined in your `keybindings.json` file:  \n```json\n[\n{\"key\": \"ctrl+m a\", \"command\": \"workbench.action.terminal.toggleTerminal\" },\n{\"key\": \"ctrl+m a\", \"command\": \"workbench.action.focusLastEditorGroup\" }\n]\n```  \n`kbstyle(Ctrl+M A)` will result in the `workbench.action.focusLastEditorGroup` command executing since it's the final keybinding and [user keybindings are of higher priority](https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-rules) than extension contributed keybindings.",
    "url": "https://code.visualstudio.com/updates/v1_40#_chords-are-now-supported-by-default",
    "id": 1344
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Fast scroll support  \nThe terminal now supports `kbstyle(Alt)` with mouse wheel to scroll faster based on the multiplier defined in the `editor.fastScrollSensitivity` setting.",
    "url": "https://code.visualstudio.com/updates/v1_40#_fast-scroll-support",
    "id": 1345
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### New \"paste\" option for right-click behavior  \nA new option has been added to the `rightClickBehavior` setting to always paste in the terminal on right-click:  \n```json\n\"terminal.integrated.rightClickBehavior\": \"paste\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_40#_new-paste-option-for-right-click-behavior",
    "id": 1346
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Double-click to select word uses more separator characters  \nThe characters `,`, `:`, and `;` are now counted as word separators when double-clicking to select a word(s) in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_40#_double-click-to-select-word-uses-more-separator-characters",
    "id": 1347
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Symlink cwds are no longer resolved  \nIf a terminal's initial working directory is set to a symlink, the symlink will now be preserved in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_40#_symlink-cwds-are-no-longer-resolved",
    "id": 1348
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Command navigation now works from the scroll position  \nCommand navigation enables navigating between or selecting between commands that have been run in the terminal. This now takes the scroll position of the terminal into account so you can scroll, find the previous command, and the terminal will scroll up from the terminal's viewport (previously it would scroll from the bottom).  \n![Command navigation jumps to nearest command after scrolling](images/1_40/command-navigation.gif)  \nCommand navigation is only bound on macOS by default as `Cmd+Up/Down` and command selection as `Cmd+Shift+Up/Down`.  \nHere are some example keybindings if you want to use this feature on Windows or Linux:  \n```jsonc\n{\n// Terminal command tracking on Windows and Linux\n{ \"key\": \"ctrl+up\",          \"command\": \"workbench.action.terminal.scrollToPreviousCommand\", \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+down\",        \"command\": \"workbench.action.terminal.scrollToNextCommand\", \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+shift+up\",    \"command\": \"workbench.action.terminal.selectToPreviousCommand\", \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+shift+down\",  \"command\": \"workbench.action.terminal.selectToNextCommand\", \"when\": \"terminalFocus\" },\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_40#_command-navigation-now-works-from-the-scroll-position",
    "id": 1349
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Tasks  \n### Task Quick Pick lists  \nThe **Tasks: Configure Task** command now always skips the Quick Pick list of tasks if you only have one task defined. To extend this behavior to **Tasks: Run Task** and other task Quick Picks, you can set the `task.quickOpen.skip` setting to `true`.  \nThe new setting `task.quickOpen.history` controls how many tasks are shown in the task Quick Pick as **recently used** tasks. Set `task.quickOpen.history` to `0` to disable the recent tasks section of the tasks Quick Pick.  \nTasks that have a `detail` property will now show it in some task lists. You can turn off details in the task Quick Pick by setting `task.quickOpen.detail` to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_40#_task-quick-pick-lists",
    "id": 1350
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Option to run NPM scripts for a folder  \nWhen the setting `npm.enableRunFromFolder` is enabled, the File Explorer's context menu shows the command **Run NPM Script in Folder...** when a folder is selected. The command shows a Quick Pick list of the NPM scripts contained in this folder and you can select the script to be executed as a task.",
    "url": "https://code.visualstudio.com/updates/v1_40#_option-to-run-npm-scripts-for-a-folder",
    "id": 1351
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Slow task provider warning  \nWhen a task provider is running slowly, we now show a warning offering suggestions for how to avoid the slowdown. The warning can be disabled for individual task types, or it can be disabled for all tasks by setting `task.slowProviderWarning` to `false`.  \n![Slow task provider warning](images/1_40/slow-taskprovider.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_slow-task-provider-warning",
    "id": 1352
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Disable task autodetection  \nIf all the tasks you care about are defined in a `tasks.json` file, then you might want to disable all extension task providers to improve performance when you run tasks. It is good practice for individual extensions to provide a setting to disable their task providers, but you can now disable all task providers setting  `task.autoDetect` to `off`.",
    "url": "https://code.visualstudio.com/updates/v1_40#_disable-task-autodetection",
    "id": 1353
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Problem matcher prompt  \nIn the past, any task without a problem matcher would need to have an empty problem matcher set in `tasks.json` to skip the problem matcher prompt. Now, you can use `task.problemMatchers.neverPrompt` to disable the problem matcher prompt for all tasks or for specific task types. There's also a new option in the problem matcher prompt to disable the prompt.  \n![Problem matcher prompt dropdown](images/1_40/task-problemmatcher-prompt.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_problem-matcher-prompt",
    "id": 1354
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Source Control  \n### Highlight file on active editor change  \nThe Source Control view will now automatically highlight the active editor file in its tree/list view:  \n![SCM view highlighting the active file](images/1_40/scm-highlight.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_highlight-file-on-active-editor-change",
    "id": 1355
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Git: Improved untracked files management  \nYou can now manage untracked files separately by using the **Git: Untracked Changes** setting. Choose the `separate` option, if you'd like to see untracked files in a separate group in the Source Control view. Choose `hidden` if you'd like to never see them. The default commit action will adjust itself to this setting and will only include untracked changes in a commit when using the `mixed` setting value.  \n![Git untracked files](images/1_40/untracked.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_git:-improved-untracked-files-management",
    "id": 1356
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Git: Automatic commit message on merge commits  \nWhenever VS Code detects you're in a middle of a git merge commit, it will automatically populate the commit input box with Git's default commit message.  \n![Git merge commit message](images/1_40/conflict.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_git:-automatic-commit-message-on-merge-commits",
    "id": 1357
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Git: Reveal in Explorer  \nThere's now a context menu action **Reveal in Explorer** to reveal files in the File Explorer, from a Git repository in the Source Control view.  \n![Git Reveal in Explorer](images/1_40/reveal-in-explorer.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_git:-reveal-in-explorer",
    "id": 1358
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Git: Clone progress  \nThe clone operation now supports displaying progress in the bottom-right corner notification:  \n![Git clone progress](images/1_40/clone.gif)",
    "url": "https://code.visualstudio.com/updates/v1_40#_git:-clone-progress",
    "id": 1359
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Debugging  \n### Breakpoints can be shown in overview ruler  \nTo make life easier when working with breakpoints in large files, you can now show breakpoints in the editor's overview ruler by enabling the new setting `debug.showBreakpointsInOverviewRuler`.  \n![breakpoints in overview ruler](images/1_40/bpts-in-overview.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_breakpoints-can-be-shown-in-overview-ruler",
    "id": 1360
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### PreLaunch tasks for compound debug configurations  \nToday every debug configuration can specify a task to be run before the debug session is started via the `preLaunchTask` attribute. This works well when debugging a single program, but it gets unwieldy when using compound configurations where multiple programs are involved.  \nIn this milestone, we've added support for a `preLaunchTask` per compound debug configuration. With this addition, a single task can build all debug targets before the individual debug sessions are started. In case of a build error, no session is started.  \n![prelaunch task for compound debug configurations](images/1_40/prelaunch-compound-config.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_prelaunch-tasks-for-compound-debug-configurations",
    "id": 1361
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Languages  \n### CSS media query symbols  \nIn CSS/SCSS/Less files, media query symbols are now shown in the Outline view, the breadcrumb path, and the **Go to Symbols in File** list:  \n![CSS media query symbols](images/1_40/css-media-query-symbols.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_css-media-query-symbols",
    "id": 1362
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### typescript.tsserver.maxTsServerMemory  \nIf you are working with a large TypeScript project containing thousands of files, the new `typescript.tsserver.maxTsServerMemory` setting lets you increase the maximum memory usage for the TypeScript server that powers IntelliSense.",
    "url": "https://code.visualstudio.com/updates/v1_40#_typescript.tsserver.maxtsservermemory",
    "id": 1363
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Extension authoring  \n### vscode.env.uiKind  \nA new API `vscode.env.uiKind` was added so that an extension can know in which kind of UI is it running. To support running VS Code in a browser, the possible values are `UIKind.Web` and `UIKind.Desktop`.",
    "url": "https://code.visualstudio.com/updates/v1_40#_vscode.env.uikind",
    "id": 1364
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Call Hierarchy Provider API  \nWe have finalized the call hierarchy provider API: [CallHierarchyProvider](https://github.com/microsoft/vscode/blob/3a5209ec6474137f69078727f7fe255c97fb8795/src/vs/vscode.d.ts#L3983-L4021). It supports the **Peek Call Hierarchy** feature, which finds callers to and calls from functions, methods, etc.",
    "url": "https://code.visualstudio.com/updates/v1_40#_call-hierarchy-provider-api",
    "id": 1365
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Task CustomExecution  \nThe `CustomExecution` task type API has been finalized. If a shell or process task isn't suitable for your task, you can use a `CustomExecution` task to execute a callback in your extension. Learn more in the [task provider extension guide](https://code.visualstudio.com/api/extension-guides/task-provider#customexecution).",
    "url": "https://code.visualstudio.com/updates/v1_40#_task-customexecution",
    "id": 1366
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Debug API: \"consoleMode\" option for \"startDebugging\" request  \nIn the last milestone, we had introduced a [new proposed API](https://code.visualstudio.com/updates/v1_39#_startdebugging-consolemode-option-to-merge-debug-consoles)\nfor controlling whether a hierarchy of debug sessions shares a single Debug Console or use individual consoles. This API is now official so you can use it in extensions published on the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_40#_debug-api:-consolemode-option-for-startdebugging-request",
    "id": 1367
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Icon color tokens  \nWe're excited to finally introduce new color tokens for our icons. We're slowly adding these for certain areas, below is the first batch.  \n**Symbols**  \nThese icons appear in the Outline view, breadcrumb navigation, and suggest widget.  \n* `symbolIcon.arrayForeground`\n* `symbolIcon.booleanForeground`\n* `symbolIcon.classForeground`\n* `symbolIcon.colorForeground`\n* `symbolIcon.constructorForeground`\n* `symbolIcon.constantForeground`\n* `symbolIcon.enumeratorForeground`\n* `symbolIcon.enumeratorMemberForeground`\n* `symbolIcon.eventForeground`\n* `symbolIcon.fieldForeground`\n* `symbolIcon.fileForeground`\n* `symbolIcon.folderForeground`\n* `symbolIcon.functionForeground`\n* `symbolIcon.interfaceForeground`\n* `symbolIcon.keyForeground`\n* `symbolIcon.keywordForeground`\n* `symbolIcon.methodForeground`\n* `symbolIcon.moduleForeground`\n* `symbolIcon.namespaceForeground`\n* `symbolIcon.nullForeground`\n* `symbolIcon.numberForeground`\n* `symbolIcon.objectForeground`\n* `symbolIcon.operatorForeground`\n* `symbolIcon.packageForeground`\n* `symbolIcon.propertyForeground`\n* `symbolIcon.referenceForeground`\n* `symbolIcon.snippetForeground`\n* `symbolIcon.stringForeground`\n* `symbolIcon.structForeground`\n* `symbolIcon.textForeground`\n* `symbolIcon.typeParameterForeground`\n* `symbolIcon.unitForeground`\n* `symbolIcon.variableForeground`  \n![Symbol icon colors](images/1_40/icon-symbols.png)  \n**Problems and Notifications**  \nWe've set the default colors for the problems and notifications icons to inherit from the editor foreground colors, so if you change those colors, it will inherit to the other areas:  \n![Problem icon colors](images/1_40/icon-editor.png)  \nYou can also explicitly set the icon colors for the Problems panel and Notifications:  \n* `problemsErrorIcon.foreground`\n* `problemsWarningIcon.foreground`\n* `problemsInfoIcon.foreground`\n* `notificationsErrorIcon.foreground`\n* `notificationsInfoIcon.foreground`\n* `notificationsWarningIcon.foreground`  \n**Lightbulb**  \nThe lightbulb icons are also themable:  \n* `editorLightBulb.foreground`\n* `editorLightBulbAutoFix.foreground`  \n![Lightbulb icon colors](images/1_40/icon-lightbulb.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_icon-color-tokens",
    "id": 1368
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### vscode.env.asExternalUri  \nThe `vscode.env.asExternalUri` API allows an extension to resolve an **external** URI - such as a `http:` or `https:` URI - from where the extension is running to a URI for the same resource on the client machine. This is a companion to the `vscode.env.openExternal` API, except instead of opening the resolved URI using an external program, it returns the result to extensions.  \n```ts\nimport * as vscode from 'vscode';\nimport * as http from 'http';\n\nconst PORT = 3000;\n\nexport function activate(context: vscode.ExtensionContext) {\nstartLocalServer(PORT);\n\ncontext.subscriptions.push(vscode.commands.registerCommand('example.command', async () => {\nconst resolved = vscode.env.asExternalUri(vscode.Uri.parse(`http://localhost:${PORT}`));\nvscode.window.showInformationMessage(`Resolved to: ${resolved} on client and copied to clipboard`);\nvscode.env.clipboard.writeText(resolved.toString());\n}));\n}\n\nfunction startLocalServer(port: number) {\nconst server = http.createServer((req, res) => {\nres.end('Hello world!');\n});\nserver.on('clientError', (err, socket) => {\nsocket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(port);\nvscode.window.showInformationMessage(`Started local server on port: ${port}`);\n}\n```  \nFor `http:` and `https:` URIs, `asExternalUri` is a no-op if the extension is running on the client machine. However, if the extension is running remotely, `vscode.env.asExternalUri` automatically establishes a port forwarding tunnel from the local machine to `target` on the remote and returns a local URI to the tunnel.  \nIf `asExternalUri` is called with a `vscode.env.uriScheme` URI, then it returns a URI that - if opened in a browser (for example via `openExternal`) - will result in the registered URI handler being triggered.",
    "url": "https://code.visualstudio.com/updates/v1_40#_vscode.env.asexternaluri",
    "id": 1369
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Removal of experimental Custom Data settings and Contribution Points  \n`[html/css].experimental.customData` settings and `contributes.[html/css].experimental.customData` Contribution Points were [deprecated in 1.38](https://code.visualstudio.com/updates/v1_38#_custom-data-marked-as-stable) and now removed. You can use the stable Custom Data settings and Contribution Points instead. To read more about the Custom Data Format, see the [microsoft/vscode-custom-data](https://github.com/microsoft/vscode-custom-data) repository.",
    "url": "https://code.visualstudio.com/updates/v1_40#_removal-of-experimental-custom-data-settings-and-contribution-points",
    "id": 1370
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### extensionKind can be an array  \nIn `package.json`, the `extensionKind` property could have the value `\"ui\"` or `\"workspace\"` to indicate where an extension should run in the remote case. With this release, `extensionKind` can now be an array. For example, `[\"ui\", \"workspace\"]` would indicate that an extension can run both on the `\"ui\"` and `\"workspace\"` side, with a preference to running on the `\"ui\"` side, if installed there.",
    "url": "https://code.visualstudio.com/updates/v1_40#_extensionkind-can-be-an-array",
    "id": 1371
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Task detail  \nThere is a new property on `Task` that task providers can use to add a `detail` to the task when it is shown in UI. You can also use the detail property in `tasks.json`. The built-in npm extension uses the task detail to show which npm script will run.  \n![tasks with detail](images/1_40/task-detail.png)",
    "url": "https://code.visualstudio.com/updates/v1_40#_task-detail",
    "id": 1372
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Support for passing WebviewPanelOptions to Custom Editors  \nWe continued our work on the [Custom Editor API proposal](https://github.com/microsoft/vscode/issues/82115) this iteration. Now the proposed `registerWebviewEditorProvider` function takes a set of `options` that lets you enable [`retainContextWhenHidden`](https://code.visualstudio.com/api/extension-guides/webview#retaincontextwhenhidden) and other features in custom editor webviews:  \n```ts\nexport function registerWebviewEditorProvider(\nviewType: string,\nprovider: WebviewEditorProvider,\noptions?: WebviewPanelOptions\n): Disposable;\n```",
    "url": "https://code.visualstudio.com/updates/v1_40#_support-for-passing-webviewpaneloptions-to-custom-editors",
    "id": 1373
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n## Engineering  \n### Test VS Code running in a browser  \nThere is now a minimal setup where VS Code can run in a browser that is available for development and testing. The browser instance is still missing some features and is under active development.  \nIn your local fork of the [vscode](https://github.com/microsoft/vscode) repository, execute `yarn web` from the command line and access `http://localhost:8080/`. For more details about cloning and building the vscode repo, see the [setup instructions](https://github.com/microsoft/vscode/wiki/How-to-Contribute).  \n![VS Code running in a browser](images/1_40/yarn-web.png)  \n**Note:** Do not use this setup for any serious development. The intent is to allow the community to contribute changes back to VS Code to improve the overall experience in the browser.",
    "url": "https://code.visualstudio.com/updates/v1_40#_test-vs-code-running-in-a-browser",
    "id": 1374
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Building VS Code with TypeScript 3.7  \nVS Code is now built using TypeScript 3.7. This is an exciting update as it lets us use [optional chaining (`?.`)](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7-beta/) in our codebase (as well as bringing many other improvements).  \nYou can start using TypeScript 3.7 features in VS Code today by installing the [JavaScript and TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).",
    "url": "https://code.visualstudio.com/updates/v1_40#_building-vs-code-with-typescript-3.7",
    "id": 1375
  },
  {
    "content": "See what is new in the Visual Studio Code October 2019 Release (1.40)  \n### Electron 6.0 Update  \nIn this milestone, we finished the exploration of bundling Electron 6 into VS Code, making it the first time this Electron version ships with stable. This is a major Electron release and comes with Chromium 76.0.3809.146 and Node.js 12.4.0 (a major leap forward from our current version with Chromium 69 and Node.js 10.11.0).  \nWe have started to explore updating to Electron 7, which we hope to push to Insiders soon.",
    "url": "https://code.visualstudio.com/updates/v1_40#_electron-6.0-update",
    "id": 1376
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Edit left side in diffs  \nIf you compare two editors that are editable (for example, from the File Explorer by comparing two files or running a global Search & Replace), the left-hand side is now also editable and can be saved (`kb(workbench.action.files.save)`).  \n![Diff view left hand side edit](images/1_41/save-diff.gif)  \n**Note:** You can enable Auto Save (**File** > **Auto Save**) if you are tired of pressing `kb(workbench.action.files.save)`.",
    "url": "https://code.visualstudio.com/updates/v1_41#_edit-left-side-in-diffs",
    "id": 1378
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Save from Peek editors  \nIf you bring up a Peek view and type into it, you can now save changes via `kb(workbench.action.files.save)`, if the focus is inside that embedded editor.  \n![Saving in a Peek view](images/1_41/save-peek.gif)",
    "url": "https://code.visualstudio.com/updates/v1_41#_save-from-peek-editors",
    "id": 1379
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Problems panel  \n**More Filters**  \nMore predefined filters were added to the Problems panel. You can now filter problems by type (errors, warnings, and information) and also see problems scoped to the current active file.  \n![Problems panel filters](images/1_41/problems-filters.gif)  \n*Theme: GitHub Sharp Dark, Font: FiraCode*  \n**Show current problem in Status bar**  \nYou can now configure VS Code to show the current problem message in the Status bar. This allows you to see the summary of the selected problem in the active file without any additional keyboard or mouse gestures.  \n**Note:** Enabling this feature needs enabling the setting `problems.showCurrentInStatus`.  \n![Current problem displayed in the Status bar](images/1_41/problems-show-current.gif)  \n*Theme: GitHub Sharp Dark, Font: FiraCode*  \n**Flexible filter box layout**  \nThe filter box in the Problems panel now adjusts its position according to the panel's position and size.  \n![Problems panel filter box adjustable layout](images/1_41/problems-flexible-filter.gif)  \n*Theme: GitHub Sharp Dark, Font: FiraCode*",
    "url": "https://code.visualstudio.com/updates/v1_41#_problems-panel",
    "id": 1380
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Improved font rendering (Windows, Linux)  \nWhen we updated to Electron 6 last milestone, many users reported that font rendering regressed for them. Specifically, fonts did not render as smoothly as they used to. We immediately [addressed the issue](https://github.com/microsoft/vscode/issues/84214) in the editor and the fix was made available in a 1.40 recovery release. However, other areas in the workbench still suffered from less than ideal font rendering.  \nIn this release, we improved font rendering in more parts of the workbench (for Windows and Linux). The screenshots below show a before and after comparison (zoomed in to show the difference). In particular, many tree and list elements of the workbench were rendered using greyscale antialiasing and they now render with subpixel antialiasing.  \nBefore (left) and after (right):  \n![Improved font rendering before and after](images/1_41/lcd.png)  \nWe plan to improve font rendering in even more parts of the workbench. You can check out this [query of text rendering issues](https://github.com/microsoft/vscode/labels/lcd-text-rendering) to view progress.",
    "url": "https://code.visualstudio.com/updates/v1_41#_improved-font-rendering-windows,-linux",
    "id": 1381
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Faster read/write file performance for remote scenarios  \nReading and writing files (from the text editor) should now be faster for scenarios where the file system is remote and the latency is high (for example when using VS Code in a browser with a slow connection or being connected to a remote host that is not in the same region). We switched to a stream-based implementation for reads and writes that greatly reduces communication overhead.",
    "url": "https://code.visualstudio.com/updates/v1_41#_faster-read/write-file-performance-for-remote-scenarios",
    "id": 1382
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Search  \n### Update search results as you type  \nIn full text search, results will now update as you type. This is especially helpful in scenarios like constructing complicated Regular Expression queries, where fast feedback on a query can help you to write the RegEx.  \nHere, the instant feedback helps in constructing a RegEx Find and Replace query for adopting TypeScript's optional chaining syntax:  \n![Search result updates on type](images/1_41/search-on-type.gif)  \n*Theme: Noctis Hibernus, Font: Hasklig*  \n**Note:** This feature can be disabled by setting `search.searchOnType` to `false`, and the delay between typing and searching can be adjusted with `search.searchOnTypeDebouncePeriod`, which defaults to 300 ms.",
    "url": "https://code.visualstudio.com/updates/v1_41#_update-search-results-as-you-type",
    "id": 1383
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Add cursors to search results  \nWe've added a command to add cursors to all matches of a text search. With focus on a file's search results in the Search view, you can press `kb(addCursorsAtSearchResults)` to edit all matches in that one file simultaneously. This is the same keyboard shortcut used when searching inside a single editor with the Find widget.  \n![Add cursors to search results](images/1_41/add-cursors-to-search-results.gif)",
    "url": "https://code.visualstudio.com/updates/v1_41#_add-cursors-to-search-results",
    "id": 1384
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Expand all search results by default  \nPreviously, if a full text search returned more than 10 results in a single file, it would appear collapsed in the Results tree. However, this sometimes made finding a particular result difficult, so with this release all results will appear expanded.  \nYou can set `search.collapseResults` to `auto` to revert to the old behavior.",
    "url": "https://code.visualstudio.com/updates/v1_41#_expand-all-search-results-by-default",
    "id": 1385
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Editor  \n### Minimap decorations for errors, warnings, and content changes  \nErrors and warnings are now highlighted inline in the minimap (code overview). You can change the color of these decorations with the new `minimap.errorHighlight` and `minimap.warningHighlight` theme colors.  \nBelow you can see the minimap highlighting a subtle missing comma typo:  \n![Minimap error and warning decorations](images/1_41/minimap-errors-and-warnings.png)  \nContent changes decorations are also shown in the gutter of the minimap:  \n![Minimap content change decorations](images/1_41/minimap-content-changes.png)  \nYou can modify the content change colors with:  \n* `minimapGutter.addedBackground`\n* `minimapGutter.modifiedBackground`\n* `minimapGutter.deletedBackground`  \nYou can change the visibility of source control decorations with the `scm.diffDecorations` setting, which has the values:  \n* `all` - Show source control diff decorations in all locations.\n* `gutter` - Only show in the left side editor gutter.\n* `minimap` - Only show in the minimap gutter.\n* `overview` - Only show in the overview ruler.\n* `none` -  Do not show the diff decorations.",
    "url": "https://code.visualstudio.com/updates/v1_41#_minimap-decorations-for-errors,-warnings,-and-content-changes",
    "id": 1386
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Code navigation alternate commands  \nVS Code used to do nothing when selecting **Go to Definition** while already at the definition. With this release, alternate commands can be executed instead. For instance, **Go to Definition** can be mapped to run **Go to References**.  \nThis is customized via the `editor.gotoLocation.alternativeDefinitionCommand` setting. For example, you can make the alternate for **Go to Definition** be **Go to Declaration** and vice versa. You can leave the setting empty if you prefer the old behavior.",
    "url": "https://code.visualstudio.com/updates/v1_41#_code-navigation-alternate-commands",
    "id": 1387
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Peek, Go to, and Find All commands  \nEach **Peek** command now has a **Go to** counterpart. For instance, there are now both **Peek Implementations** and **Go to Implementations**. The Peek view doesn't change the current editor and allows for a quick in-place look at source code.  \nThe video below shows using **Peek Implementations** to see all implementations of the `ICommandService` interface in a Peek view:  \n![Peek Implementations command](images/1_41/peek-impl.gif)  \n*Theme: GitHub Sharp, Font: FiraCode*  \nIn contrast, **Go to Implementations** is for navigation and gets you to an implementation quickly.  \nThe video below (using the `\"editor.gotoLocation.multipleImplementations\": \"goto\"` setting) navigates to all implementations of the `ICommandService` interface by repeatedly pressing `kbstyle(F12)`:  \n![Go to Implementations command with F12](images/1_41/goto-impl.gif)  \n*Theme: GitHub Sharp, Font: FiraCode*  \nLast but not least, similar to the **Find All References** command, there is now **Find All Implementations**. It presents the implementations as a stable list to the side of the editor. This can be used as a TODO list, for example when performing a refactoring that affects all implementations of an interface.  \n![Find All Implementations in the Side bar](images/1_41/find-impl.gif)  \n*Theme: GitHub Sharp, Font: FiraCode*",
    "url": "https://code.visualstudio.com/updates/v1_41#_peek,-go-to,-and-find-all-commands",
    "id": 1388
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Language-specific filtering for breadcrumbs and Outline view  \nLast milestone, we have added the capability to filter certain types, like variables, from the Outline view and breadcrumbs navigation. This release refines this features and allows language-specific filtering, for example don't show TypeScript variables but do show JavaScript variables.  \nBelow you can see how the `value` constant is displayed in the Outline view for the JavaScript file but not the TypeScript version.  \n![Language-specific filter for Outline view](images/1_41/lang-filter.gif)  \n*Theme: GitHub Sharp, Font: Fira Code*",
    "url": "https://code.visualstudio.com/updates/v1_41#_language-specific-filtering-for-breadcrumbs-and-outline-view",
    "id": 1389
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### IntelliSense keyboard shortcuts on macOS  \nIntelliSense is usually triggered via `kbstyle(Ctrl+Space)`. On macOS however, this keyboard shortcut is taken by the operating system when multiple input sources are configured. This often leads to confusion and users thinking IntelliSense is broken.  \nThere are now two ways to handle this:  \n* Use the new `kbstyle(Alt+Escape)` keyboard shortcut that we have added for macOS.\n* Disable Input Source switching via `kbstyle(Ctrl+Space)` in your macOS preferences through **Preferences** > **Keyboard** > **Shortcuts** > **Input Sources**.  \n![macOS Keyboard Shortcuts Input Sources option](images/1_41/macos-shortcuts.png)",
    "url": "https://code.visualstudio.com/updates/v1_41#_intellisense-keyboard-shortcuts-on-macos",
    "id": 1390
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Screen reader output  \nThere is a new setting `editor.accessibilityPageSize` that controls the number of lines in the editor that can be read out by a screen reader at once. Note that this has performance implications for numbers larger than the default of 10.  \nIf you use the screen reader **Say All** command, we recommend setting `editor.accessibilityPageSize` to 100 or 1000. Next milestone, we will look into changing the default value of this setting.",
    "url": "https://code.visualstudio.com/updates/v1_41#_screen-reader-output",
    "id": 1391
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### New bracket matching option  \nIt is now possible to configure `\"editor.matchBrackets\": \"near\"` to get the old behavior of highlighting matching brackets only when the cursor is on either side of a bracket. The default is `always`, which highlights the matching brackets enclosing the current cursor position.",
    "url": "https://code.visualstudio.com/updates/v1_41#_new-bracket-matching-option",
    "id": 1392
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### New auto indentation option  \nThe setting `editor.autoIndent` can now take different values. This setting impacts multiple features, such as pressing `kbstyle(Enter)`, pressing `kbstyle(Tab)`, or when indenting and unindenting lines. You can think of the setting like a \"slider\" that becomes more and more opinionated:  \n* `\"none\"`: Pressing `kbstyle(Enter)` will insert `\\n` and nothing more.\n* `\"keep\"`: Pressing `kbstyle(Enter)` will keep the indentation of the current line.\n* `\"brackets\"`: All of the above and special logic around language-specific brackets.\n* `\"advanced\"`: All of the above and respecting language-specific rules that are defined via `onEnterRules`.\n* `\"full\"` (default): All of the above and respecting language-specific rules that are defined via `indentationRules`.",
    "url": "https://code.visualstudio.com/updates/v1_41#_new-auto-indentation-option",
    "id": 1393
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Code Action menu keyboard shortcuts  \nThe Code Action and Refactoring menus now display [custom keybindings](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions), if they exist.  \n![A keybinding for extract constant](images/1_41/code-action-keybinding.png)",
    "url": "https://code.visualstudio.com/updates/v1_41#_code-action-menu-keyboard-shortcuts",
    "id": 1394
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Integrated terminal  \n### Minimum contrast ratio  \nApplications working with colors in the terminal can be tricky and they can use the following colors for text:  \n* The default foreground color\n* A palette of 16 colors as defined by the terminal theme\n* A set of 240 fixed colors\n* Any RGB color (16 million)  \nThe problem is the application doesn't know what the default background color or foreground color is and whether it will have good contrast with colors used by the application. To solve this problem, the terminal can now change the foreground color of text dynamically to meet a specified contrast ratio.  \nSet the foreground color to the desired contrast ratio ranging from 1 to 21:  \n```json\n// 4.5 is recommended for baseline website accessibility\n\"terminal.integrated.minimumContrastRatio\": 4.5\n```  \nTerminal colors will increase or decrease luminance until either the contrast ratio is met or the foreground becomes `#000000` or `#ffffff`.  \n![Terminal minimum contrast ratio setting](images/1_41/terminal-contrast.gif)  \n*Theme: Sapphire, Font: Hack*",
    "url": "https://code.visualstudio.com/updates/v1_41#_minimum-contrast-ratio",
    "id": 1395
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### New experimental WebGL renderer  \nA new WebGL-based renderer is available for the terminal, which boasts performance gains of up to 900%\\* compared to the old canvas-based approach.  \nYou can opt in to use the new renderer with this setting:  \n```json\n\"terminal.integrated.rendererType\": \"experimentalWebgl\"\n```  \nThe speed improvements are attributed to many things but here are the highlights:  \n* WebGL allows us to talk more directly to the GPU, as opposed to going via the web platform's `CanvasRenderingContext2D` API.\n* The renderer deals almost exclusively with numbers and typed arrays, which are extremely fast. Object and array creation is also kept to a minimum to avoid unnecessary garbage collection.\n* All characters are now cached in a texture atlas as opposed to just ASCII characters with a limited set of styles. This means repeated drawing of the same character is much faster.  \nWe observed rendering of frames varying wildly based on a user's hardware/environment with the canvas renderer. Each frame would typically take anywhere from 1 ms to 40 ms but could reach to over 200 ms in extreme cases, where hardware issues were a factor. So far, WebGL seems much more consistent, typically sitting in the 0.2 ms to 2 ms range:  \n![WebGL frames are much faster](images/1_41/webgl1.png)  \nReliability is one of the things we expect to improve once this is integrated. With the canvas renderer, the browser would try to be clever and fall back to rendering on the CPU if there were problems with the GPU/canvas, but we never want that to happen as we have a DOM-based renderer, which is much more suited for that. With WebGL, it should either work as expected or fail hard (a WebGL context cannot be acquired), in which case we can fall back to the DOM renderer.  \nSince rendering takes so much less time, the CPU is freed up to focus on parsing incoming data, which results in more frames rendered and commands that run faster. The following performance data was generated from running `ls -lR` inside the vscode  repository:  \n![Commands run faster on the WebGL renderer](images/1_41/webgl2.png)  \nThe new renderer also fixes a nasty bug with the canvas renderer, where characters would get their sides clipped when they are larger than the cell size. This issue was most commonly observed with certain fonts on Linux with underscores.  \n\\* *More info on benchmarks available at [xtermjs/xterm.js#1790](https://github.com/xtermjs/xterm.js/pull/1790)*",
    "url": "https://code.visualstudio.com/updates/v1_41#_new-experimental-webgl-renderer",
    "id": 1396
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Source Control  \n### Git: Relative paths in git.ignoredRepositories  \nThe `git.ignoredRepositories` setting now supports relative paths, which are useful when you're configuring workspace settings and you'd like to ignore certain repositories in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_41#_git:-relative-paths-in-git.ignoredrepositories",
    "id": 1397
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Git: Adoption of FileSystemProvider  \nThe Git extension now uses the [FileSystemProvider API](https://code.visualstudio.com/api/references/vscode-api#FileSystemProvider) which, besides fixing certain encoding issues, provides a more performant and more reliable way of exposing older versions of your files, from a Git repository.",
    "url": "https://code.visualstudio.com/updates/v1_41#_git:-adoption-of-filesystemprovider",
    "id": 1398
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Languages  \n### HTML mirror cursor  \nVS Code now adds a \"mirror cursor\" when you are editing HTML tags. This behavior is controlled by the setting `html.mirrorCursorOnMatchingTag`, which is on by default.  \nThis feature works by adding a [multi-cursor](https://code.visualstudio.com/docs/editor/codebasics#_multiple-selections-multicursor) to the matching tag when your cursor moves into an HTML tag name range. Just like in multi-cursor mode, you can use word-wise deletion or word-wise selection. The mirrored cursor is removed when you move your cursor outside the tag name range.  \nOne special case is entering `kbstyle(Space)` when the cursor is at the end of the opening tag, for example at the end of a `div` like `<div`|`></div`|`>`. In this case, VS Code removes the inserted space after the closing tag name and exits mirror cursor mode, so you can continue to edit HTML attributes.  \n![HTML mirror cursor](images/1_41/html-mirror-cursor.gif)  \n*Theme: [Nord](https://marketplace.visualstudio.com/items?itemName=arcticicestudio.nord-visual-studio-code), Font: [Input Mono](https://input.fontbureau.com/)*",
    "url": "https://code.visualstudio.com/updates/v1_41#_html-mirror-cursor",
    "id": 1399
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### HTML rename tags  \nYou can now use `kb(editor.action.rename)` to rename the opening/closing tag pairs in HTML.  \n![HTML rename tag](images/1_41/html-rename.gif)",
    "url": "https://code.visualstudio.com/updates/v1_41#_html-rename-tags",
    "id": 1400
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Ranking of autocompleted CSS properties  \nCSS autocompletion now ranks properties by their popularity:  \n![CSS suggestions ranked by popularity](images/1_41/css-ranking-by-popularity.png)  \nThe usage data is sourced from [ChromeStatus.org](https://www.chromestatus.com/metrics/css/popularity).",
    "url": "https://code.visualstudio.com/updates/v1_41#_ranking-of-autocompleted-css-properties",
    "id": 1401
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Sass module support  \nSass recently introduced a [new module system](http://sass.logdown.com/posts/7858341-the-module-system-is-launched).  \nWe have added syntax highlighting support, as well as language feature support, for Sass modules in **SCSS** files. The language features include:  \n* Auto completion of `@use` and `@forward`.\n* Path completion for `@use` and `@forward` path.\n* Auto completion of Sass [built-in modules](https://sass-lang.com/documentation/modules) such as `sass:math` and `sass:color`.\n* Document link for `@use` and `@forward` import paths.  \n![Sass module support](images/1_41/sass-module-support.gif)",
    "url": "https://code.visualstudio.com/updates/v1_41#_sass-module-support",
    "id": 1402
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### JSON  \nTo avoid performance issues with large JSON files, JSON language support now has an upper limit on the number of folding regions and document symbols it computes (for the Outline view and breadcrumbs). By the default, the limit is 5000 items, but you can change the limit with the setting `json.maxItemsComputed`.  \n![JSON large file warning](images/1_41/json-large-file-warning.png)",
    "url": "https://code.visualstudio.com/updates/v1_41#_json",
    "id": 1403
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### TypeScript 3.7  \nVS Code now ships with TypeScript 3.7.3. This major update brings some TypeScript language improvements - including [optional chaining](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#optional-chaining), [nullish coalescing](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#nullish-coalescing), and [assertion functions](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#assertion-functions) - as well as some new tooling features for both JavaScript and TypeScript. As always, this release also includes a number of important bug fixes.  \nYou can read more about the TypeScript 3.7 features on the [TS 3.7 blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/).",
    "url": "https://code.visualstudio.com/updates/v1_41#_typescript-3.7",
    "id": 1404
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Optional chaining support for JavaScript and TypeScript  \nThanks to TypeScript 3.7, VS Code now supports [option chaining](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Optional_chaining) out of the box for both JavaScript and TypeScript. This includes syntax highlighting and IntelliSense:  \n![Optional chaining and nullish coalescing](images/1_41/ts-the-chain.png)  \nAdditionally, VS Code can automatically insert a `?.` when you accept a completion on an optional property:  \n![Selecting a completion on a potentially undefined value automatically inserts an optional chain](images/1_41/ts-chain-completion.gif)  \nAutomatic insertion of `?.` depends on [strict null checking](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks) being enabled. Automatic `?.` insertion can be disabled with the `\"typescript.suggest.includeAutomaticOptionalChainCompletions\"` or `\"javascript.suggest.includeAutomaticOptionalChainCompletions\"` settings.",
    "url": "https://code.visualstudio.com/updates/v1_41#_optional-chaining-support-for-javascript-and-typescript",
    "id": 1405
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Extract interface refactoring for TypeScript  \nThe new **Extract to interface** refactoring lets you quickly extract an inline type to an interface so that it can be reused.  \n![Selecting the new 'extract interface' refactoring](images/1_41/ts-extract-interface-pre.png)  \nBelow you can see that the 'Neural' interface has been extracted out of 'keyes':  \n![After extracting the 'Neural' interface out of 'keyes'](images/1_41/ts-extract-interface-post.png)",
    "url": "https://code.visualstudio.com/updates/v1_41#_extract-interface-refactoring-for-typescript",
    "id": 1406
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Semicolon formatter options for JavaScript and TypeScript  \nThe new `javascript.format.semicolons` and `typescript.format.semicolons` formatting settings let you control how the formatter handles semicolons in JavaScript and TypeScript files.  \nValid semicolon format settings values are:  \n* `ignore`- Does not add or remove semicolons (default).\n* `insert`- Insets semicolons at statement ends.\n* `remove`- Remove unnecessary semicolons.",
    "url": "https://code.visualstudio.com/updates/v1_41#_semicolon-formatter-options-for-javascript-and-typescript",
    "id": 1407
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Uncalled function checks  \nVS Code will now alert you if you forget to call a function in a conditional.  \nConsider the following TypeScript snippet:  \n```ts\nimport * as fs from 'fs';\n\nfs.stat('/path/to/file', function(err, stats) {\nif (stats.isDirectory) {\nhandleDirectory(stats);\n}\n});\n```  \nThe example above uses the Node.js [`fs.stat` API](https://nodejs.org/api/fs.html#fs_fs_stat_path_options_callback) to get information about a file. But there's a bug! `.isDirectory` is actually a function, not a property! This means that `handleDirectory` will be called on every file, not just directories as intended, as the function `isDirectory` is defined and evaluates to `true`.  \n![VS Code can alert when you forget to call a function](images/1_41/js-missing-function-call.png)  \nNote that you will only see this diagnostic when [strict null checking](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks) is enabled.",
    "url": "https://code.visualstudio.com/updates/v1_41#_uncalled-function-checks",
    "id": 1408
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Debugging  \n### Debug START view  \nWe have introduced a new debug START view to make it easier for users to start and configure debugging in a new workspace. Based on the active file, we will choose the appropriate debug extension and make it possible to debug or run your application. For more elaborate debug and run configurations, it is still best to configure a `launch.json` file.  \nBelow you can see quickly starting to debug an Express JavaScript application and then creating a `launch.json` file if more control is needed.  \n![Debug Start view](images/1_41/debug.gif)",
    "url": "https://code.visualstudio.com/updates/v1_41#_debug-start-view",
    "id": 1409
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Restart frame as an inline action in the CALL STACK view  \nTo improve the discoverability of the **Restart Frame** action, there is now an inline action in the CALL STACK view visible on hover. Restarting frames is a handy way to rerun the preceding source code after a breakpoint is hit. If the debug extension does not support restarting frames, this action is not shown.  \n![Restart frame button](images/1_41/restart-frame.png)",
    "url": "https://code.visualstudio.com/updates/v1_41#_restart-frame-as-an-inline-action-in-the-call-stack-view",
    "id": 1410
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Debug console shows input and output  \nIn order to better distinguish input and output in the Debug console, we have added input `>` and output `<` decorations to the left.  \n![Debug console input and output decorations](images/1_41/repl-decorations.png)",
    "url": "https://code.visualstudio.com/updates/v1_41#_debug-console-shows-input-and-output",
    "id": 1411
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Inline breakpoint display  \nA new setting `debug.showInlineBreakpointCandidates` controls whether inline breakpoints candidate decorations are shown in the editor while debugging. By default, they are visible.",
    "url": "https://code.visualstudio.com/updates/v1_41#_inline-breakpoint-display",
    "id": 1412
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Call Hierarchy view  \nThe call hierarchy API is available in Stable and language extension authors are busy implementing it, so we have added a Call Hierarchy view. This complements the **Peek Call Hierarchy** view and shares the same Side bar view as **Find All References** and **Find All Implementations**. Once a language extension supports the call hierarchy API, you will be able to select **Show Call Hierarchy** from the context menu or the Command Palette to see the view:  \n![Call Hierarchy view](images/1_41/callhierarchy-view.png)  \n*Theme: GitHub Sharp, Font: FiraCode*  \nThe Call Hierarchy view allows you to drill into the callers from and calls of a symbol. It highlights calls in the active editor, allows reparenting the view from any children, and it keeps a history of previous runs.",
    "url": "https://code.visualstudio.com/updates/v1_41#_call-hierarchy-view",
    "id": 1413
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### JavaScript Debugger  \nWe're working on a new debugger for Node.js and Chrome. You can install the nightly extension [`js-debug-nightly`](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly), and use it as a drop-in replacement by updating your settings to add:  \n```json\n{\n\"debug.chrome.useV3\": true,\n\"debug.node.useV3\": true,\n}\n```  \nYou should not need to change your existing launch configurations in order to use the new debugger.  \nThe debugger brings an assortment of new features, such as the ability to debug and step through webworkers:  \n![An animation showing stepping through postMessage calls to and from a webworker](images/1_41/js-debug-worker.gif)  \n*Theme: Earthsong, Font: Fira Code*  \n...debug npm scripts with no extra configuration or flags...  \n![An animation dispatching the \"run npm script\" command, selecting \"npm start\", and then hitting a breakpoint in an executed script](images/1_41/js-debug-run-npm.gif)  \n...and more! If you run into problems, please [file an issue](https://github.com/microsoft/vscode-pwa/issues/new).",
    "url": "https://code.visualstudio.com/updates/v1_41#_javascript-debugger",
    "id": 1414
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.41 include:  \n* Dev Containers: Easier to try out sample repositories (for example [vscode-remote-try-python](https://github.com/microsoft/vscode-remote-try-python)) in a container.\n* Dev Containers: Improved performance when creating a container and new options for `devcontainer.json`.\n* WSL: Support on Windows 10 ARM-based PCs such as Surface Pro X.\n* Remote Explorer can now scope available views to specific remote types.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_41.md).  \nYou can also read a recent blog post about [Inspecting Containers with VS Code](https://code.visualstudio.com/blogs/2019/10/31/inspecting-containers) and try the updated [Using C++ and WSL in VS Code](https://code.visualstudio.com/docs/cpp/config-wsl) tutorial.",
    "url": "https://code.visualstudio.com/updates/v1_41#_remote-development",
    "id": 1415
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### ESLint  \nImprovements to the [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extension:  \n* Better support for ESLint 6.x - In most cases, it shouldn't be necessary to configure working directories when using ESLint 6.x.\n* Improved TypeScript detection - As soon as TypeScript is correctly configured inside ESLint, you no longer need additional configuration through VS Code's `eslint.validate` setting. The same is true for HTML and Vue.js files.\n* Glob working directory support - Projects that have a complex folder structure and need to customize the working directories via `eslint.workingDirectories` can now use glob patterns instead of listing every project folder. For example, `code-*` will match all project folders starting with `code-`. In addition, the extension now changes the working directory by default. You can disable this feature with the new `!cwd` property.\n* Improved Auto Fix on Save - Auto Fix on Save is now part of VS Code's Code Action on Save infrastructure and computes all possible fixes in one round. It is customized via the `editor.codeActionsOnSave` setting. The setting supports the ESLint specific property `source.fixAll.eslint`. The extension also respects the generic property `source.fixAll`.  \nThe setting below turns on Auto Fix for all providers including ESLint:  \n```json\n\"editor.codeActionsOnSave\": {\n\"source.fixAll\": true\n}\n```  \nIn contrast, this configuration only turns it on for ESLint:  \n```json\n\"editor.codeActionsOnSave\": {\n\"source.fixAll.eslint\": true\n}\n```  \nYou can also selectively disable ESLint via:  \n```json\n\"editor.codeActionsOnSave\": {\n\"source.fixAll\": true,\n\"source.fixAll.eslint\": false\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_41#_eslint",
    "id": 1416
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### vscode-scss  \nThe [vscode-scss](https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-scss) extension offers cross-file language support for SCSS variables, mixins, and functions. In this milestone, we helped its development for a new release, [0.8.0](https://github.com/mrmlnc/vscode-scss/releases/tag/v0.8.0).  \nThe new version improves:  \n* Better import path resolution\n* Color preview for autocompleted color variable\n* Better performance",
    "url": "https://code.visualstudio.com/updates/v1_41#_vscode-scss",
    "id": 1417
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Extension authoring  \n### Figma design toolkit  \nWe've created a [Figma](https://www.figma.com) design toolkit to better help extension authors design experiences for their extensions. Check out the [toolkit repo on GitHub](https://aka.ms/vscode-figma-toolkit) that has instructions on how to access and use the toolkit.  \nBelow is an example of some of the components included:  \n![Figma design toolkit components](images/1_41/figma-toolkit-1.gif)  \nAll components should be resizable and editable.  \n![Editing Figma components](images/1_41/figma-toolkit-2.gif)  \nIf you run into any problems or have any requests for certain components, please create an issue in the toolkit repo so that we can triage and track the requests.",
    "url": "https://code.visualstudio.com/updates/v1_41#_figma-design-toolkit",
    "id": 1418
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Debug icon color tokens  \nWe've added a set of new color tokens for the Debug view.  \nDebug toolbar:  \n* `debugIcon.startForeground`\n* `debugIcon.continueForeground`\n* `debugIcon.disconnectForeground`\n* `debugIcon.pauseForeground`\n* `debugIcon.restartForeground`\n* `debugIcon.stepBackForeground`\n* `debugIcon.stepIntoForeground`\n* `debugIcon.stepOutForeground`\n* `debugIcon.stepOverForeground`\n* `debugIcon.stopForeground`  \n![Debug toolbar colors](images/1_41/debug-color-tokens-1.png)  \n*Theme: [Min Dark](https://marketplace.visualstudio.com/items?itemName=miguelsolorio.min-theme), Font: [Input Mono](https://input.fontbureau.com/)*  \nDebug breakpoints:  \n* `debugIcon.breakpointForeground`\n* `debugIcon.breakpointDisabledForeground`\n* `debugIcon.breakpointUnverifiedForeground`\n* `debugIcon.breakpointStackframeForeground`\n* `debugIcon.breakpointCurrentStackframeForeground`  \n![Debug breakpoint colors](images/1_41/debug-color-tokens-2.png)  \n*Theme: [Min Dark](https://marketplace.visualstudio.com/items?itemName=miguelsolorio.min-theme), Font: [Input Mono](https://input.fontbureau.com/)*",
    "url": "https://code.visualstudio.com/updates/v1_41#_debug-icon-color-tokens",
    "id": 1419
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Workspace file events  \nThere are new events for when files and folders change:  \n* `vscode.workspace.on[Will|Did]CreateFile`\n* `vscode.workspace.on[Will|Did]RenameFile`\n* `vscode.workspace.on[Will|Did]DeleteFile`  \nThe events are fired when files are created, renamed, or deleted from the Explorer or from extensions via the `vscode.workspace.applyEdit(WorkspaceEdit)` API but not when files change on disk or when files are modified via the `vscode.workspace.fs` API.  \nA possible use case for these events is a language server, which might update the contents of a file before renaming it or update project files after deletion/creation of files.",
    "url": "https://code.visualstudio.com/updates/v1_41#_workspace-file-events",
    "id": 1420
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### SnippetString  \nThe `SnippetString` type has now a builder-method for choice-elements.",
    "url": "https://code.visualstudio.com/updates/v1_41#_snippetstring",
    "id": 1421
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Strict getWordRangeAtPosition  \nThe [`TextDocument.getWordRangeAtPosition`](https://github.com/microsoft/vscode/blob/58479e80ab899402283b522da173c34867d7c78f/src/vs/vscode.d.ts#L224) API is now more strict and instead of ignoring invalid regular expressions that result in empty string matches, it will throw an error.",
    "url": "https://code.visualstudio.com/updates/v1_41#_strict-getwordrangeatposition",
    "id": 1422
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Deprecated string type for extensionKind  \nExtension authors can use the `extensionKind` property in `package.json` to indicate where an extension should run in the remote case. In release (1.40), this value could be a string or an array. Starting with this release, this property only supports an array value and using a string is deprecated. See the [Remote Development documentation](https://code.visualstudio.com/api/advanced-topics/remote-extensions#incorrect-execution-location) for more information.",
    "url": "https://code.visualstudio.com/updates/v1_41#_deprecated-string-type-for-extensionkind",
    "id": 1423
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Convert DAP Sources to URIs  \nThe VS Code extension API uses document URIs when referring to resources that can be opened in editors, whereas the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/) is based on [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) descriptors. In this milestone, we've added an API for connecting the two worlds. The function `debug.asDebugSourceUri` creates a URI from a DAP Source object. This makes opening a DAP Source into a VS Code editor simple:  \n```ts\nexport async function openDAPSource(session: vscode.DebugSession, source: DebugProtocol.Source) {\nconst uri = vscode.debug.asDebugSourceUri(source, session);\nvscode.window.showTextDocument(vscode.workspace.openTextDocument(uri));\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_41#_convert-dap-sources-to-uris",
    "id": 1424
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Custom Editors editing capabilities  \nWe continued to work on the [custom editor proposal](https://github.com/microsoft/vscode/issues/77131) this iteration. As a reminder, custom editors are webview-based views that can be used in place of VS Code's normal text editor for specific file types. As of VS Code 1.41, Custom editors can now integrate with VS Code's Undo/Redo and Save functionality, which enables many interesting use cases including using them as visual and WYSIWYG editors.  \nYou can find the current API proposal in [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts)\nand we have also put together some [very simple extension samples](https://github.com/mjbvz/vscode-experimental-webview-editor-extension) that demonstrate using custom editors for text and for binary files.  \nIf you are interested in custom editors, please share your feedback on the current proposal and let us know if you would be able to implement it.",
    "url": "https://code.visualstudio.com/updates/v1_41#_custom-editors-editing-capabilities",
    "id": 1425
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Semantic tokens provider  \nWe have added new proposed API for a [semantic tokens provider](https://github.com/microsoft/vscode/issues/86415). The new API allows extensions to provide additional token information to be used by the editor to enrich the TextMate based syntax highlighting.  \nEach semantic token annotates a range with a token **type** and any number of token **modifiers**. For example, type `variable` and modifiers `member` and `modification` would describe a write access to a member variable. The token types and modifiers are then used to add styles in the editor.  \nStyling can be configured in both color themes and user settings:  \n```json\n\"editor.tokenColorCustomizationsExperimental\": {\n\"variable.member\": {\n\"foreground\": \"#35166d\"\n},\n\"*.modification\": {\n\"fontStyle\": \"underline\"\n}\n}\n\n```  \nIf you are interested in this feature, we would like to get your feedback regarding the current proposal and we would love to encourage experimentation and some early implementations.  \nA full sample is available in the [vscode-extensions-samples repo](https://github.com/microsoft/vscode-extension-samples/tree/main/semantic-tokens-sample).",
    "url": "https://code.visualstudio.com/updates/v1_41#_semantic-tokens-provider",
    "id": 1426
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### More features available running in a browser  \nLast milestone, we [introduced support](https://code.visualstudio.com/updates/v1_40#_test-vs-code-running-in-a-browser) for running `yarn web` from our repository to set up VS Code running in the browser. This setup is still meant to be used for testing issues in browsers and not for development.  \nThis milestone we added more features that can be tested:  \n* Debug\n* Search\n* Tasks\n* Problems  \nHere is a video showing the new features in action:  \n![VS Code running in a browser](images/1_41/yarn-web.gif)  \n**Note:** Do not use this setup for any serious development. The intent is to allow the community to contribute changes back to VS Code to improve the overall experience in the browser.",
    "url": "https://code.visualstudio.com/updates/v1_41#_more-features-available-running-in-a-browser",
    "id": 1427
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n## Engineering  \n### Insiders available in the yum repository  \nThe Insiders build is now available in the yum repository and is automatically published just like with the apt repository. Follow the [instructions on the website](https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions) to set up the repo and install using `sudo dnf install code-insiders`.",
    "url": "https://code.visualstudio.com/updates/v1_41#_insiders-available-in-the-yum-repository",
    "id": 1428
  },
  {
    "content": "See what is new in the Visual Studio Code November 2019 Release (1.41)  \n### Continuous build for Monaco Editor  \nThis iteration we added [continuous build and a test pipeline](https://github.com/microsoft/monaco-editor/issues/1668) for the Monaco Editor. We build the Monaco Editor core from the VS Code repository main branch and perform sanity testing to catch potential bugs or unexpected breaking changes as early as possible.",
    "url": "https://code.visualstudio.com/updates/v1_41#_continuous-build-for-monaco-editor",
    "id": 1429
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Limit the number of open editors  \nThere are new settings to limit the maximum number of editors that are open at the one time.  \n* `workbench.editor.limit.enabled`: Enable this feature (off by default).\n* `workbench.editor.limit.perEditorGroup`: Whether to apply the limit per editor group or across all groups.\n* `workbench.editor.limit.value`: The maximum number of open editors (10 by default).  \nIf enabled, VS Code will close the least recently used editor when you open a new editor.  \nBelow you can see the behavior when the limit is set to 3:  \n![Open editor limit](images/1_42/editor-limit.gif)  \n*Theme: [Nord](https://marketplace.visualstudio.com/items?itemName=arcticicestudio.nord-visual-studio-code)*  \n**Note:** Dirty editors (files with unsaved changes) are never automatically closed but still count in the total number of open editors.",
    "url": "https://code.visualstudio.com/updates/v1_42#_limit-the-number-of-open-editors",
    "id": 1431
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Untitled editor improvements  \nUntitled editors in VS Code are text buffers that have not yet been saved to disk. You can leave them open for as long as you like and all text content is stored and restored between restarts.  \n**Untitled editor titles**  \nIn the past, untitled editors were given generic names such as `Untitled-1`, counting upwards. In this release, untitled editors will use the content of the first line of the document for the editor title and include the generic name as the description:  \n![Untitled file title using first line of text](images/1_42/untitled-title2.gif)  \n*Theme: [Nord](https://marketplace.visualstudio.com/items?itemName=arcticicestudio.nord-visual-studio-code)*  \n**Note:** If the first line is empty or does not contain any words, the title will fall back to `Untitled-*` as before.  \n**Default language mode**  \nBy default, untitled files do not have a specific language mode configured. VS Code has a setting, `files.defaultLanguage`, to configure a default language for untitled files. With this release, the setting can take a new value `{activeEditorLanguage}` that will dynamically use the language mode of the currently active editor instead of a fixed default.  \nIn addition, when you copy and paste text into an untitled editor, VS Code will now automatically change the language mode of the untitled editor if the text was copied from a VS Code editor:  \n![Untitled file language mode dynamically set](images/1_42/untitled-copy2.gif)  \n*Theme: [One Dark Pro](https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme)*  \n**Note:** If the untitled editor already has a language mode specified, pasting text will not change it.",
    "url": "https://code.visualstudio.com/updates/v1_42#_untitled-editor-improvements",
    "id": 1432
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Navigate most recently used editors  \nWith this release, there is now a list of most recently used (MRU) editors across all editor groups. An editor is considered recently used when it either opens as the active editor or becomes the new active editor if already opened. Once an editor is closed, it is removed from this list.  \nOne application of this list is the new `edt mru` picker that you can open through the new **View: Show All Editors By Most Recently Used** (`workbench.action.showAllEditorsByMostRecentlyUsed`) command:  \n![MRU editor list](images/1_42/editor-mru.png)  \nYou can add keyboard shortcuts to quickly navigate in this picker without using the mouse. For example, below is a keybinding so that `kbstyle(Ctrl+Tab)` and `kbstyle(Ctrl+Shift+Tab)` navigates across editors of all groups (instead of only within the active group as the default keybindings do):  \n```json\n[\n{\n\"key\": \"ctrl+tab\",\n\"command\": \"workbench.action.quickOpenPreviousRecentlyUsedEditor\",\n\"when\": \"!inEditorsPicker\"\n},\n{\n\"key\": \"ctrl+shift+tab\",\n\"command\": \"workbench.action.quickOpenLeastRecentlyUsedEditor\",\n\"when\": \"!inEditorsPicker\"\n}\n]\n```  \nIf you want to navigate the list without using a picker, there are new commands:  \n* **View: Open Next Recently Used Editor** (`workbench.action.openNextRecentlyUsedEditor`)\n* **View: Open Previous Recently Used Editor** (`workbench.action.openPreviousRecentlyUsedEditor`)  \nTo differentiate which editor navigation commands work with a picker and which ones don't, the behavior of some existing commands has changed. Specifically, the **Recently Used Editor in Group** commands no longer use a picker:  \n* **View: Open Next Recently Used Editor in Group** (`workbench.action.openNextRecentlyUsedEditorInGroup`)\n* **View: Open Previous Recently Used Editor in Group** (`workbench.action.openPreviousRecentlyUsedEditorInGroup`)  \nFor picker-based navigation use:  \n* **View: Quick Open Previous Recently Used Editor in Group** (`workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup`)\n* **View: Quick Open Least Recently Used Editor in Group** (`workbench.action.quickOpenLeastRecentlyUsedEditorInGroup`)",
    "url": "https://code.visualstudio.com/updates/v1_42#_navigate-most-recently-used-editors",
    "id": 1433
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Moving the panel  \nThe panel, which holds the Output, Debug Console, Terminal, and Problems panes, can now be moved to the left side of the editor.  \nThe command **View: Toggle Panel Position** (`workbench.action.togglePanelPosition`) was removed in favor of the following new commands:  \n* **View: Move Panel Left** (`workbench.action.positionPanelLeft`)\n* **View: Move Panel Right** (`workbench.action.positionPanelRight`)\n* **View: Move Panel To Bottom** (`workbench.action.positionPanelBottom`)",
    "url": "https://code.visualstudio.com/updates/v1_42#_moving-the-panel",
    "id": 1434
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Restore all windows on restart  \nVS Code's setting for restoring windows on startup has changed to restore all windows by default. If you want to go back to the previous behavior, configure `\"window.restoreWindows\": \"one\"` to only open a single window.",
    "url": "https://code.visualstudio.com/updates/v1_42#_restore-all-windows-on-restart",
    "id": 1435
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Save conflict resolution  \nVS Code has a built-in mechanism to show a notification when you try to save a dirty file that has been changed outside of VS Code or by another program (for example Git):  \n![Save conflict dialog with overwrite](images/1_42/save-conflict.png)  \nThe motivation is to inform you that saving will overwrite the contents on disk even though the file was changed after the file became dirty. Selecting the **Compare** button lets you review your changes along with the version on disk and either overwrite or revert the file.  \nIn cases where you know that the changes on disk can be overwritten, there is now an **Overwrite** button directly on the notification. You can also configure `files.saveConflictResolution` globally, per workspace, or file type to disable this behavior altogether. The options are `askUser` (default) or `overwriteFileOnDisk`.",
    "url": "https://code.visualstudio.com/updates/v1_42#_save-conflict-resolution",
    "id": 1436
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Handling slow save operations  \nVS Code allows extensions to change a file's contents when saving files to disk. Features like **Format on Save** and **Fix on Save** are examples. However, saving is a critical operation and extensions doing processing during a save must finish quickly so that the actual save operation can proceed. \"Quickly\" used to be enforced by VS Code, where VS Code would cancel extension save operations after a timeout. That enforcement guaranteed speedy saving but could be frustrating because sometimes expected processing would not happen.  \nWith this release, we have given up the timeout-based approach and instead show a progress notification that allows you to cancel extensions participating in save (\"Save Participants\"). The notification lets you know that save operations are running and you can decide if you want to wait for a save participant to finish or not.  \n![Save Participant notification](images/1_42/save-participant.png)  \n*Theme: Light+*",
    "url": "https://code.visualstudio.com/updates/v1_42#_handling-slow-save-operations",
    "id": 1437
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Source Control input  \nThe input box in the Source Control view now uses the [Monaco Editor](https://github.com/microsoft/monaco-editor). The Monaco Editor supports useful features such as multiple cursors and move/copy line commands.",
    "url": "https://code.visualstudio.com/updates/v1_42#_source-control-input",
    "id": 1438
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Two-step collapse in multi-root Explorer  \nWhen you are using a [multi-root workspace](https://code.visualstudio.com/docs/editor/multi-root-workspaces), the **Collapse Folder** button in the File Explorer now has two-step behavior. The first click will collapse all folders within each top-level, and the second click will collapse the top-level folders. The Search view already has this behavior.  \n![Two-step File Explorer collapse button](images/1_42/2-step-collapse.gif)  \n*Theme: Monokai*",
    "url": "https://code.visualstudio.com/updates/v1_42#_two-step-collapse-in-multi-root-explorer",
    "id": 1439
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Auto switch Theme based on OS color scheme  \nWindows and macOS now support light and dark color schemes. There is a new setting, `window.autoDetectColorScheme`, that instructs VS Code to listen to changes to the OS's color scheme and switch to a matching theme accordingly.  \nTo customize the themes that are used when a color scheme changes, you can set the preferred light and dark theme with the settings:  \n* `workbench.preferredLightColorTheme`\n* `workbench.preferredDarkColorTheme`",
    "url": "https://code.visualstudio.com/updates/v1_42#_auto-switch-theme-based-on-os-color-scheme",
    "id": 1440
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Editor  \n### Control Peek view focus  \nThere is a new setting and command to control where the Peek view initially places focus. By default, Peek focuses the tree on the right-hand side so that you can quickly navigate to references. Initial focus on the tree is not best for people wanting to use Peek for making quick code changes in the editor. You can now define your preference with the `editor.peekWidgetDefaultFocus` setting, which can be set to `editor` or `tree`. There is also a new command `togglePeekWidgetFocus` (`kb(togglePeekWidgetFocus)`) that allows you to move focus between the Peek editor and tree.",
    "url": "https://code.visualstudio.com/updates/v1_42#_control-peek-view-focus",
    "id": 1441
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Folded region highlighting  \nFolded code regions are now easier to discover with the addition of a background highlight.  \n![Fold highlight color](images/1_42/fold-highlight.png)  \n*Theme: Dark+*  \nThe feature is controlled by the setting `editor.foldingHighlight` and the color can be customized with the color `editor.foldBackground`.  \n```json\n\"workbench.colorCustomizations\": {\n\"editor.foldBackground\": \"#355000\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_42#_folded-region-highlighting",
    "id": 1442
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Folding refinements  \n`Shift + Click` once on the folding indicator to first fold the inner ranges. `Shift + Click` again (when all inner ranges are already folded) will fold the parent. `Shift + Click` again unfolds all.  \n![Folding with Shift + Click](images/1_42/folding-shift-click.gif)  \nWhen using the **Fold** command (`kb(editor.fold)`) on an already folded range, the next unfolded parent range will be folded.",
    "url": "https://code.visualstudio.com/updates/v1_42#_folding-refinements",
    "id": 1443
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### New wrapping option  \nBy default, the editor computes word wrap breaks by assuming that all characters have the same width. This assumption allows the default algorithm to be fast, but its results are poor when using a non-monospace font, or when writing text in a script where characters vary in width. There is a new setting, `editor.wrappingStrategy`, that can be set to `advanced` to have the editor delegate word wrap break computation to the browser.",
    "url": "https://code.visualstudio.com/updates/v1_42#_new-wrapping-option",
    "id": 1444
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Accessibility  \n### Suggest widget improvements  \nThe suggestions widget now no longer uses ARIA alerts and properly indicates to the screen reader that it is focused. This should prevent the screen reader from accidentally getting in the way.",
    "url": "https://code.visualstudio.com/updates/v1_42#_suggest-widget-improvements",
    "id": 1445
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### editor.accessibilityPageSize set to 160 when screen reader detected  \nThe `editor.accessibilityPageSize` setting controls the number of lines in the editor that can be read out by a screen reader at one time. However, there are performance implications when using a large value. We have decided to automatically set the value to 160 lines when we detect a screen reader (and not more, due to an NVDA bug).",
    "url": "https://code.visualstudio.com/updates/v1_42#_editor.accessibilitypagesize-set-to-160-when-screen-reader-detected",
    "id": 1446
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Linux accessibility with Orca  \nWe have started looking into making VS Code accessible on Linux with the Orca screen reader. However, since this work requires Electron 7, we expect to make more progress in the next stable release. In the meantime, for Linux accessibility you can use our [Insiders](https://code.visualstudio.com/insiders) version and provide feedback.",
    "url": "https://code.visualstudio.com/updates/v1_42#_linux-accessibility-with-orca",
    "id": 1447
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Integrated Terminal  \n### Scrolling sensitivity  \nThe terminal's scrolling sensitivity can now be configured independent of the editor using the new settings:  \n* `terminal.integrated.mouseWheelScrollSensitivity` - Mouse wheel scrolling multiplier (default is 1).\n* `terminal.integrated.fastScrollSensitivity` - Fast scroll multiplier when `kbstyle(Alt)` is pressed (default is 5).",
    "url": "https://code.visualstudio.com/updates/v1_42#_scrolling-sensitivity",
    "id": 1448
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Debugging  \n### Simplified initial Debug view  \nTo simplify starting with the Debug view, VS Code now only shows one **Run and Debug** button. The **Run Without Debugging** action (which is not supported by all debuggers) is still available in the Debug main menu.  \nBased on user feedback, the Breakpoints pane is displayed in the starting view, if you have at least one breakpoint set.  \n![Simplified initial Debug view](images/1_42/debug-start.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_simplified-initial-debug-view",
    "id": 1449
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Debug Console improvements  \n**Debug Console input**  \nThe Debug Console input now uses the language mode of the current active editor. This means that Debug Console input supports syntax coloring, indentation, auto closing of quotes, and other language features.  \n![Debug Console input with syntax coloring](images/1_42/debug-console-mode.png)  \n**Input/output presentation**  \nWe have tuned the presentation of input and output in the Debug Console to make it more distinguishable. VS Code displays an arrow only next to the input expression.  \n![Debug Console input with arrow display](images/1_42/debug-input-output.png)  \n**Debug Console input history suggestions**  \nThe Debug Console input box now automatically suggests previously entered entries. The text icon is used to distinguish the history suggestions from other IntelliSense entries.  \n![Debug console history](images/1_42/debug-console-history.png)  \n**Hide Debug Console after debugging**  \nThere is a new setting `debug.console.closeOnEnd` that controls whether the Debug Console should automatically close after debugging has stopped.  \n**Support for console.table(...)**  \nThe Debug Console can now show output coming from the Node.js `console.table(...)` API.  \n![Debug Console table output](images/1_42/debug-console-table.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_debug-console-improvements",
    "id": 1450
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Loaded Scripts View improvements  \nThe Loaded Scripts View was updated to use VS Code's new tree view. It now renders single child folders in the same compact form as VS Code's File Explorer. In addition, it is now possible to search and expand the tree as you type:  \n![Expand as you type in Loaded Scripts view](images/1_42/loaded-scripts-view.gif)  \nWe are planning to remove the **Debug: Open Loaded Scripts** command in the next release because it duplicates the \"search and expand as you type\" functionality of the tree.",
    "url": "https://code.visualstudio.com/updates/v1_42#_loaded-scripts-view-improvements",
    "id": 1451
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Launch configuration sorting and grouping  \nLaunch configurations and compounds now support a new structured attribute `presentation`. Using the `order`, `group`, and `hidden` attributes, you can sort, group, and hide configurations and compounds in the Debug configuration dropdown and in the Debug Quick Pick.  \nFor example, a launch configuration in `launch.json` can have the following `presentation` field:  \n```json\n\"presentation\": {\n\"group\": \"5_tests\",\n\"order\": 10,\n\"hidden\": false\n}\n```  \nAs an example, we've added presentations to some VS Code's own launch configurations in order to group them in a more meaningful way and to hide those configurations that are only a part of a compound launch config.  \n![Debug view context menu](images/1_42/debug-dropdown.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_launch-configuration-sorting-and-grouping",
    "id": 1452
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Debug Activity Bar icon and decoration  \nBased on user feedback, we've updated our Debug icon in the Activity Bar to better represent **Run and Debug**. And when debugging, there is a number decoration on the Debug icon to show the count of active debug sessions.  \n![Debug Activity Bar icon showing two debug sessions](images/1_42/debug-activity.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_debug-activity-bar-icon-and-decoration",
    "id": 1453
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Tasks  \n### User level tasks  \nTasks declared in `tasks.json` are now supported at the User Settings level. If you have a build script that you use across many projects, or if you don't want your tasks in a project folder, you can add your tasks in the user `tasks.json` file. Run the **Tasks: Open User Tasks** command to create user level tasks and these tasks will be available across all folders and workspaces. Only the `shell` and `process` task types are supported here.",
    "url": "https://code.visualstudio.com/updates/v1_42#_user-level-tasks",
    "id": 1454
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Input pickString label  \nIf you use task `inputs`, you can add a friendly label to the `pickString` input `options`:  \n```json\n\"inputs\": [\n{\n\"id\": \"pickAnInputValue\",\n\"description\": \"Pick a Value\",\n\"type\": \"pickString\",\n\"options\": [\n\"first-value\",\n{\n\"label\": \"Second Value\",\n\"value\": \"second-long-value-that-can-be-simplified-for-display\"\n}\n],\n\"default\": \"first-value\"\n}\n]\n```  \nThe label will show as:  \n![Task pickString input with label](images/1_42/task-pickstring-label.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_input-pickstring-label",
    "id": 1455
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Languages  \n### TypeScript 3.7.5  \nWe've updated our bundled TypeScript version to 3.7.5. This minor update includes some important bugs fixes, including fixing IntelliSense for projects that are not stored on C: drives on Windows.",
    "url": "https://code.visualstudio.com/updates/v1_42#_typescript-3.7.5",
    "id": 1456
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### HTML Mirror Cursor off by default  \nThe HTML [Mirror Cursor](https://code.visualstudio.com/updates/v1_41#_html-mirror-cursor) is now an opt-in feature. In the upcoming iteration, we'll continue to [improve its implementation](https://github.com/microsoft/vscode/issues/88424) to make this feature more easily understandable and available to more languages. You can still use this feature by turning on `html.mirrorCursorOnMatchingTag`.",
    "url": "https://code.visualstudio.com/updates/v1_42#_html-mirror-cursor-off-by-default",
    "id": 1457
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Search Editor  \nWe've continued work on our new Search editor, with the goal this iteration for the Search editor to be the primary search experience. To that end, we implemented a UI for configuring the Search editor's query:  \n![Search Editor UI](images/1_42/search-editor.png)  \n*Theme: [Noctis Lilac](https://marketplace.visualstudio.com/items?itemName=liviuschera.noctis), Font: [Hasklig](https://github.com/i-tu/Hasklig/)*  \nThere are now several commands for the Search editor, which you can bind to keyboard shortcuts of your choice:  \n* `search.action.openNewEditor`: Open a new search editor in the active editor group.\n* `search.action.openInEditor`: Copy the current Search results into a new Search editor.  \nFor more information and further updates on the Search editor, see [issue #23931](https://github.com/microsoft/vscode/issues/23931).  \n**Note:** Search Editors are enabled by default in [Insiders](https://code.visualstudio.com/insiders), and can be opted into in Stable by setting `search.enableSearchEditorPreview` to `true`.",
    "url": "https://code.visualstudio.com/updates/v1_42#_search-editor",
    "id": 1458
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Semantic highlighting for TypeScript & JavaScript  \nSemantic highlighting support for TypeScript and JavaScript is in development and not yet enabled by default. You can try it out by adding the following setting:  \n```json\n\"editor.semanticHighlighting.enabled\": true\n```  \nWhen enabled, you will see that some identifiers have new colors and styles and are now highlighted according to their resolved type. The default syntax (TextMate) highlighter classifies many tokens as `variables` and these are now resolved into namespaces, classes, parameters, and so on.  \nYou can see this best in the imports section, where now each imported symbol is colored with the symbol's type:  \n![TypeScript semantic highlighting](images/1_42/ts-semantic-highlighting.png)  \nYou can use the **Developer: Inspect Editor Tokens and Scopes** command to inspect the semantic and syntax tokens that are computed for each location.",
    "url": "https://code.visualstudio.com/updates/v1_42#_semantic-highlighting-for-typescript-&-javascript",
    "id": 1459
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### New JavaScript debugger  \nWe've been working on a new debugger for Node.js and Chrome. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code Stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting. Below are some of the new features we added this month.  \nThe new JS debugger will automatically debug commands you run in the new JavaScript Debug terminal, which you can open via the **Debug: Create JavaScript Debug Terminal** command:  \n![JavaScript debug terminal](images/1_42/js-debug-terminal.gif)  \n*Theme: Earthsong, Font: Fira Code*  \nThe new debugger also provides a **Debug** CodeLens in your package.json's `scripts` section that can run and debug scripts without extra configuration:  \n![JavaScript debug CodeLens](images/1_42/js-debug-code-lens.png)  \nYou can configure the visibility and location (top or inline) of the CodeLens via the `debug.javascript.codelens.npmScripts` setting.  \nTry it out! You can file issues in the [vscode-js-debug](https://github.com/microsoft/vscode-js-debug/issues/new) repository, if you run into any problems with the new debugger.",
    "url": "https://code.visualstudio.com/updates/v1_42#_new-javascript-debugger",
    "id": 1460
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Moving views from the Sidebar to the Panel  \nWork is actively being done to make it easier to customize the layout of VS Code. You can test out the progress with the setting:  \n```json\n\"workbench.view.experimental.allowMovingToNewContainer\": true\n```  \nWith the setting enabled, some views have a new context menu entry to move them between the Sidebar and Panel. Currently this setting only affects the Outline view in the Explorer and views contributed by extensions. You also cannot combine these views in the Panel like you can in the Sidebar.  \n![Outline view moving to panel and back](images/1_42/moving-outline-view-preview.gif)  \n*Theme: [LaserWave](https://marketplace.visualstudio.com/items?itemName=jaredkent.laserwave), Font: [Cascadia Code](https://github.com/microsoft/cascadia-code)*  \nThis is only a preview of the features and many aspects of it are likely to change including the limitations mentioned above. Feel free to check out further progress in our [Insiders](https://code.visualstudio.com/insiders) version.  \n**Note about Search**: With the new generalized method of moving views, the old Search view setting `search.location` and command **Search: Toggle Search View Position** (`search.action.toggleSearchViewPosition`) are being deprecated. Your setting should migrate automatically, but you will need to use the new generalized method to move the Search view going forward. You do not need to enable the experimental preview setting above in order to move the Search view with the new context menu entry.",
    "url": "https://code.visualstudio.com/updates/v1_42#_moving-views-from-the-sidebar-to-the-panel",
    "id": 1461
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### TypeScript 3.8 beta support  \nAlthough VS Code will not bundle TypeScript 3.8 until its official release next month, this iteration we added support for all the [exciting new TypeScript 3.8-beta features](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta).  \nThese include:  \n* IntelliSense and syntax highlighting of [private fields](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#ecmascript-private-fields) in JavaScript and TypeScript files.\n* Call Hierarchy support for JavaScript and TypeScript.\n* The convert to template string refactoring!  \nYou can easily try all these new TypeScript 3.8 features today by installing the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with the TypeScript 3.8 beta!",
    "url": "https://code.visualstudio.com/updates/v1_42#_typescript-3.8-beta-support",
    "id": 1462
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Contributions to extensions  \n### Java debugger supports Data Breakpoints  \nThe [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension now supports [Data Breakpoints](https://code.visualstudio.com/updates/v1_38#_debugging), introduced in VS Code 1.38. This feature allows you to create breakpoints that will get hit when the value of a variable changes.  \nBelow you can see the debugger breaks when the `Owner.telephone` string changes:  \n![Java Data Breakpoints](images/1_42/data-breakpoints.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_java-debugger-supports-data-breakpoints",
    "id": 1463
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Java Call Hierarchy view  \nThe [Language Support for Java](https://marketplace.visualstudio.com/items?itemName=redhat.java) extension now supports a [Call Hierarchy](https://code.visualstudio.com/updates/v1_40#_extension-authoring) view, which shows all calls from or to a function and allows you to drill into callers of callers and call of calls.  \nRight-click on a symbol and select **Peek** > **Peek Call Hierarchy** to see the call hierarchy:  \n![Java Call Hierarchy view](images/1_42/call-hierarchy.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_java-call-hierarchy-view",
    "id": 1464
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.42 include:  \n* Remote - SSH: Improved support for Windows servers, including automatic OS detection.\n* WSL: Support for **Reveal in Explorer** to open the Windows Explorer for WSL resources.\n* Dev Containers: Pre-built container images, which include dependencies such as Git and zsh.\n* Forwarded Ports view: Map, view, and reuse SSH and container ports.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_42.md).",
    "url": "https://code.visualstudio.com/updates/v1_42#_remote-development",
    "id": 1465
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## Extension authoring  \n### Codicons for reuse  \nFor most VS Code icons, the [codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) icon-font is used. Extensions can now reuse those icons in simple and declarative ways:  \n* The `vscode.ThemeIcon` type can now be instantiated with the name of a codicon. For example, `new vscode.ThemeIcon(\"zap\")`.\n* The `vscode.MarkdownString` type now supports the `$(<name>)` inline syntax. For example, `myMdString.appendMarkdown('Hello $(globe)');`. Note that to use codicons within `MarkdownString`, you must enable the `supportThemeIcons` constructor argument.\n* `commands` defined in an extension's [`package.json`](https://code.visualstudio.com/api/references/contribution-points#contributes.commands) file can now use a codicon for their icon. Use the inline syntax, for example `\"icon\": \"$(zap)\"`.  \n![All available codicons displayed in a hover](images/1_42/codicon-api-md.png)  \n*Theme: Light+*  \nThe hover example above is rendering every available codicon. The hover was created with the snippet below but for readability, most of the codicon names were removed from the `all` constant.  \n```ts\nvscode.languages.registerHoverProvider('*', new class implements vscode.HoverProvider {\nprovideHover(doc: vscode.TextDocument, pos: vscode.Position) {\nconst all = `$(activate-breakpoints)$(add)...$(zoom-out)`;\nconst md = new vscode.MarkdownString(all, true);\nreturn new vscode.Hover(md, doc.getWordRangeAtPosition(pos));\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_42#_codicons-for-reuse",
    "id": 1466
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Insert and replace for completion items  \nCompletions that are triggered at the end of a word usually replace that word. However when completions are triggered inside words, it's not clear if the word-end should be replaced or not. Depending on the preference of the extension author, users get the one behavior or the other. That's not ideal and now there is an API to express the insert and replace ranges for a completion item.  \nFor that, we have added a new OR-type to `CompletionItem#range`:  \n```ts\nexport class CompletionItem {\n\nrange?: Range | { inserting: Range; replacing: Range; };\n\n//...\n}\n```  \n1. If the range is `undefined`, then VS Code uses the current word range for **replacing** and the same range cropped at the cursor position for **inserting**.\n2. If the range is a simple `vscode.Range`, then VS Code knows there is only one location for inserting or replacing.\n3. If the range is an object with `inserting` and `replacing` ranges, VS Code will use them directly.  \nThis information is used in combination with `editor.suggest.insertMode` setting that allows users to define their preference. We ask extension authors to please adopt this API quickly because we have plans to make insert and replace behavior more visible in the next release.",
    "url": "https://code.visualstudio.com/updates/v1_42#_insert-and-replace-for-completion-items",
    "id": 1467
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Refined CallHierarchyProvider  \nWe made a small change to [CallHierarchyProvider#prepareCallHierarchy](https://github.com/microsoft/vscode/blob/8486d683444d324eaaa53ec41e5be7b47fd47a6a/src/vs/vscode.d.ts#L4027) so that it can now return one or many `CallHierarchyItem` elements. The `many` option is useful when asking for the call hierarchy on an element that has multiple overloads.",
    "url": "https://code.visualstudio.com/updates/v1_42#_refined-callhierarchyprovider",
    "id": 1468
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Creation options exposed on Terminals  \nThe `Terminal` object has a new `creationOptions` property that can be used by extensions to identify how the terminal was created.",
    "url": "https://code.visualstudio.com/updates/v1_42#_creation-options-exposed-on-terminals",
    "id": 1469
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Language-specific settings  \nExtensions can now contribute settings that can be language overridable using the new configuration scope `language-overridable`.  \nExample:  \n```json\n\"contributes\": {\n\"configuration\": {\n\"title\": \"sample\",\n\"properties\": {\n\"sample.languageSetting\": {\n\"type\": \"boolean\",\n\"scope\": \"language-overridable\"\n}\n}\n}\n}\n```  \nThe Configuration API is enhanced to support these settings. You can read and update these settings using the API by passing the necessary `languageId`.  \nExample:  \n```ts\n/**\n* Read language configuration.\n*/\nconst textDocumentConfiguration = vscode.workspace.getConfiguration('sample', {resource, languageId});\ntextDocumentConfiguration.get('languageSetting');\n\n/**\n* Override configuration under language\n*/\ntextDocumentConfiguration.update('languageSetting', false, ConfigurationTarget.Global, true);\n\n/**\n* Listen language configuration changes\n*/\nworkspace.onDidChangeConfiguration(e => {\nif(e.affectsConfiguration('sample.languageSetting',  {resource, languageId}) {\n}\n});\n```  \nFor more information, see the [Configuration API](https://github.com/microsoft/vscode/blob/be0aca7188ec6a76e7c2379758c0fbc1e9c21f7b/src/vs/vscode.d.ts#L8753).",
    "url": "https://code.visualstudio.com/updates/v1_42#_language-specific-settings",
    "id": 1470
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Extensions view context menu  \nYou can now contribute commands to an extension's context menu in the Extensions view using the new menu location `extension/context`.  \nExample:  \n```json\n\"contributes\": {\n\"commands\": [\n{\n\"command\": \"extension.helloWorld\",\n\"title\": \"Hello World\"\n}\n],\n\"menus\": {\n\"extension/context\": [\n{\n\"command\": \"extension.helloWorld\",\n\"group\": \"2_configure\",\n\"when\": \"extensionStatus==installed\",\n}\n]\n}\n}\n```  \n![Extensions view context menu](images/1_42/extension-context-menu-action.png)  \nThe ID of the extension is passed as an argument when the command is run.  \nExample:  \n``` ts\nvscode.commands.registerCommand('extension.helloWorld', (extensionId) => {\nvscode.window.showInformationMessage(extensionId);\n});\n```  \nThe following predefined contexts are supported, which you can use in `when` conditions for the command:  \n* `extensionStatus==installed`\n* `isBuiltinExtension`",
    "url": "https://code.visualstudio.com/updates/v1_42#_extensions-view-context-menu",
    "id": 1471
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### DebugConfigurationProvider hook for accessing substituted variables  \nThe extension API for debugging offers a hook `resolveDebugConfiguration` on the `DebugConfigurationProvider` that can be used to validate a debug configuration before it is passed to the debug adapter. Since this hook is called **before variables are substituted**, the validation code can easily add more variables to the debug configuration and still get them substituted in time.  \nThis approach can make it difficult to use the **resolved variable values** in the `resolveDebugConfiguration` hook, for example to validate or implement functionality that solely exists in the extension (and not in the debug adapter where the substituted values **are** available). See [issue #85206](https://github.com/microsoft/vscode/issues/85206) for an example. Some extensions have started to substitute variables on their own (which is often incomplete since it does not cover all cases).  \nFrom an user's perspective, this is confusing. In debug configurations, some attributes variables can be used (because they are processed in the debug adapter after substitution has occurred) and some attributes variables cannot (because they are processed in the extension where substitution has not yet occurred). [Issue #87450](https://github.com/microsoft/vscode/issues/87450) is a good example of the latter problem.  \nIn this milestone, we have addressed this problem by adding a second hook `resolveDebugConfigurationWithSubstitutedVariables` to the `DebugConfigurationProvider` that receives the debug configuration with **all variables substituted**.  \nWith the availability of this new API, we are asking all debug extension authors to review their current implementations of `DebugConfigurationProvider.resolveDebugConfiguration` carefully and to move all code that does not introduce new variables but would profit from being run on the substituted variables into the new method `resolveDebugConfigurationWithSubstitutedVariables`.",
    "url": "https://code.visualstudio.com/updates/v1_42#_debugconfigurationprovider-hook-for-accessing-substituted-variables",
    "id": 1472
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Implement a debug adapter inside an extension  \nThe existing debugging extension API supports registering a `DebugAdapterDescriptorFactory` for running a debug adapter several ways.  \nAs an external process:  \n```ts\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\ncreateDebugAdapterDescriptor: (_session) => {\nreturn new vscode.DebugAdapterExecutable('mockDebug.exe');\n}\n});\n```  \nAs a network session:  \n```ts\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\ncreateDebugAdapterDescriptor: (_session) => {\nreturn new vscode.DebugAdapterServer(12345, 'localhost');\n}\n});\n```  \nIn this milestone, we've added a third variant where an 'inline' implementation of a debug adapter can be provided:  \n```ts\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\ncreateDebugAdapterDescriptor: (_session) => {\nreturn new vscode.DebugAdapterInlineImplementation(new InlineDebugAdapter());\n}\n});\n```  \nThis eliminates the need for communicating with the adapter via a stream-based mechanism and simplifies development because the adapter runs inside the extension and can be easily debugged as part of VS Code's extension debugging.  \nThe inline implementation (for example, the `InlineDebugAdapter` from above) needs to implement the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/specification). Since we do not want to include the full Debug Adapter Protocol in VS Code's extension API, we have introduced a minimalistic subset of that protocol. The interface `vscode.DebugAdapter` has just two methods, one for passing a DAP message to the adapter (`handleMessage`), and one for listening for DAP messages received from the adapter (`onDidSendMessage`).  \nBased on this interface, an implementation of a debug adapter would start with this source code:  \n```ts\nclass InlineDebugAdapter implements vscode.DebugAdapter {\n\nprivate sendMessage = new vscode.EventEmitter<DebugProtocol.ProtocolMessage>();\nprivate sequence: 1;\n\nreadonly onDidSendMessage: vscode.Event<DebugProtocol.ProtocolMessage> = this.sendMessage.event;\n\nhandleMessage(message: DebugProtocol.ProtocolMessage): void {\nswitch (message.type) {\ncase 'request':\nconst request = <DebugProtocol.Request> message;\nswitch (request.command) {\ncase 'initialize':\nconst response: DebugProtocol.Response = {\ntype: 'response',\nseq: this.sequence++,\nsuccess: true,\nrequest_seq: request.seq,\ncommand: request.command,\n};\nthis.sendMessage.fire(response);\nbreak;\n// many more requests needs to be handled here...\ndefault:\nbreak;\n}\nbreak;\ncase 'response':\nbreak;\ncase 'event':\nbreak;\n}\n}\n\ndispose() {\n// clean up resources\n}\n}\n```  \nSince the debug adapter protocol (available as node module [vscode-debugprotocol](https://www.npmjs.com/package/vscode-debugprotocol)) is a compatible superset of the `vscode.DebugAdapter` interface, you can import the module if you need the full protocol and want to implement a debug adapter all by yourself.  \nA much simpler alternative is to (continue to) use our default implementation of a debug adapter, available as node module [vscode-debugadapter](https://www.npmjs.com/package/vscode-debugadapter). Starting with version 1.38.0-pre.4, the `DebugSession` (or `LoggingDebugSession`) introduced in this module is compatible with the interface `vscode.DebugAdapter` defined in the extension API.  \nWith this API, an existing debug adapter implementation can be easily used like this:  \n```ts\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\ncreateDebugAdapterDescriptor: (_session) => {\nreturn new vscode.DebugAdapterInlineImplementation(new MockDebugSession());\n}\n});\n```  \nFor details, see the [Mock debug](https://github.com/microsoft/vscode-mock-debug/blob/668fa6f5db95dbb76825d4eb670ab0d305050c3b/src/extension.ts#L144-L150) example.  \n**Attention:** In this release, we have completed the extension APIs for creating debug adapters. As such, we are announcing that we will **remove support for two deprecated attributes of the `debuggers` contribution point in the March release**:  \n* `adapterExecutableCommand` - Use the extension APIs `vscode.DebugAdapterDescriptorFactory` and a `vscode.DebugAdapterExecutable` instead. The Mock debug example [shows how to use the API](https://github.com/microsoft/vscode-mock-debug/blob/28b4fde41228b0aabe93eab9064992e276859405/src/extension.ts#L91-L116).\n* `enableBreakpointsFor` - Use the `breakpoints` contribution point instead. The conversion needs to be done in `package.json`.  \nIf the current (deprecated) JSON looks like this:  \n```json\n\"contributes\": {\n\"debuggers\": [{\n\"type\": \"csharp\",\n// ...\n\"enableBreakpointsFor\": [ \"csharp\", \"razor\" ]\n// ...\n}]\n```  \nThe conversion would be:  \n```json\n\"contributes\": {\n\"breakpoints\": [\n{ \"language\": \"csharp\" },\n{ \"language\": \"razor\" }\n],\n\"debuggers\": [{\n\"type\": \"csharp\",\n// ...\n}]\n```  \nWe suggest that affected extensions adapt their implementation to the new APIs in the February timeframe so that we have enough time to fix issues until March.",
    "url": "https://code.visualstudio.com/updates/v1_42#_implement-a-debug-adapter-inside-an-extension",
    "id": 1473
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Semantic highlighting  \nIf you are interested in adding semantic highlighting to your language, the [Semantic Highlighting Overview](https://github.com/microsoft/vscode/wiki/Semantic-Highlighting-Overview) has a summary of the concepts and the new APIs.",
    "url": "https://code.visualstudio.com/updates/v1_42#_semantic-highlighting",
    "id": 1474
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Authentication providers  \nSome extensions require authenticating to other services. The proposal in [issue #88309](https://github.com/microsoft/vscode/issues/88309) would make it possible for extensions to register authentication providers that can be accessed by other extensions, providing a common mechanism for performing authentication.",
    "url": "https://code.visualstudio.com/updates/v1_42#_authentication-providers",
    "id": 1475
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Timeline providers  \nExtension will soon be able contribute their own sources into the new [Timeline view](#timeline-view). Interested in adding your own timeline source? Check out this early proposal in [issue #84297](https://github.com/microsoft/vscode/issues/84297) and provide any feedback you have.",
    "url": "https://code.visualstudio.com/updates/v1_42#_timeline-providers",
    "id": 1476
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Documentation.Refactoring contribution point  \nThe proposed `documentation.refactoring` contribution point lets extensions provide documentation for their refactorings. Users can choose to view this documentation when they request refactorings:  \n![Refactoring documentation](images/1_42/refactor-documentation.png)  \nThe proposed contribution point gives extensions control over how their documentation is shown by using commands:  \n```json\n\"contributes\": {\n\"documentation\": {\n\"refactoring\": [\n{\n\"title\": \"Learn more about JS/TS refactorings\",\n\"when\": \"typescript.isManagedFile\",\n\"command\": \"_typescript.learnMoreAboutRefactorings\"\n}\n]\n}\n}\n```  \n* `title` \u2014Label for the documentation action shown to users.\n* `when` \u2014[When clause](https://code.visualstudio.com/api/references/when-clause-contexts) for when to display the documentation.\n* `command` \u2014 Command that shows the documentation. For example, this command could open a webpage or show the documentation directly in VS Code.  \n[Issue #86788](https://github.com/microsoft/vscode/issues/86788) tracks the status of the proposal.",
    "url": "https://code.visualstudio.com/updates/v1_42#_documentation.refactoring-contribution-point",
    "id": 1477
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Backup and hot exit hooks for custom editors  \nWe continued to iterate on the proposed [custom editor API](https://github.com/microsoft/vscode/issues/77131) this iteration. Our major investigation this month was how to enable [hot exit](https://code.visualstudio.com/blogs/2016/11/30/hot-exit-in-insiders) for custom editors. [Issue #88719](https://github.com/microsoft/vscode/issues/88719) covers some of the challenges we ran into to support hot exit and some of the approaches we considered.  \nThe outcome of this investigation is a new optional `backup` method on the `WebviewCustomEditorEditingDelegate` interface. This method is invoked by VS Code a second or so after the resource is changed. Inside the `backup` method, extensions should persist the resource in its current state. Most often, this means writing the resource to the workspace storage folder. Then, when the editor is reloaded, it should check to see if any persisted backups exist before loading the resource from the workspace itself.  \nWe will continue iterating on the custom editor API next iteration.",
    "url": "https://code.visualstudio.com/updates/v1_42#_backup-and-hot-exit-hooks-for-custom-editors",
    "id": 1478
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Complex completion label  \nWe are evolving the `CompletionItem` API to accommodate complex completion items that need to provide qualified name, import path, return type, and other information. The information must be provided upfront, not resolved later. Provided information will be shown inline in the suggest widget. We'll iterate on the [current proposal](https://github.com/microsoft/vscode/issues/39441) in the next iteration. Meanwhile, we are considering [adding a Status Bar to the suggest widget](https://github.com/microsoft/vscode/issues/88749) to solve some of the UI and discoverability challenges. We look forward to your feedback on the API.  \n![Complex completion label](images/1_42/complex-completion-label.png)  \n*Theme: [Nord](https://marketplace.visualstudio.com/items?itemName=arcticicestudio.nord-visual-studio-code), Font: [Input Mono](https://input.fontbureau.com/)*",
    "url": "https://code.visualstudio.com/updates/v1_42#_complex-completion-label",
    "id": 1479
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Adding links to diagnostic errors  \nDiagnostic errors can now have a link associated with its error code. When a link is provided, it will be shown in the Problems panel, inline error view, and diagnostic error hover. As we continue to work on this feature in the next iteration, you can provide feedback in [issue #11847](https://github.com/microsoft/vscode/issues/11847).  \n![Diagnostic with link](images/1_42/diagnostic-link.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_adding-links-to-diagnostic-errors",
    "id": 1480
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Building VS Code with TypeScript 3.8-beta  \nVS Code is now built using the [TypeScript 3.8 beta](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/) release.",
    "url": "https://code.visualstudio.com/updates/v1_42#_building-vs-code-with-typescript-3.8-beta",
    "id": 1482
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n### Support for hosting the Monaco Editor in Shadow DOM  \nWe have fixed various issues around mouse handling and dynamic CSS so that the Monaco Editor can now be hosted inside a [Shadow DOM](https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM) API [shadow root](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot).",
    "url": "https://code.visualstudio.com/updates/v1_42#_support-for-hosting-the-monaco-editor-in-shadow-dom",
    "id": 1483
  },
  {
    "content": "See what is new in the Visual Studio Code January 2020 Release (1.42)  \n## New documentation  \n### Containers  \nThere are new articles covering creating [containers](https://code.visualstudio.com/docs/containers/overview) with the Microsoft [Docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) extension. You'll find tutorials for containerizing [Node.js](https://code.visualstudio.com/docs/containers/quickstart-node) and [ASP.NET Core](https://code.visualstudio.com/docs/containers/quickstart-aspnet-core) applications, pushing to a [container registry](https://code.visualstudio.com/docs/containers/quickstart-container-registries), and [deploying containers](https://code.visualstudio.com/docs/containers/app-service) to the cloud.  \n![Docker extension](images/1_42/docker-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_42#_containers",
    "id": 1484
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Draggable sash corners  \nDid you know you could resize two orthogonal sashes simultaneously by grabbing and dragging the intersection between them? This already worked for editor sashes, and now it also works in the edges between editors and views:  \n![Draggable sash corners](images/1_43/sash-corners.gif)  \n*Theme: [GitHub Sharp](https://marketplace.visualstudio.com/items?itemName=joaomoreno.github-sharp-theme), Font: [Fira Code](https://github.com/tonsky/FiraCode)*",
    "url": "https://code.visualstudio.com/updates/v1_43#_draggable-sash-corners",
    "id": 1486
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Notarized macOS builds  \nVisual Studio Code for macOS is now notarized by Apple, so you should no longer get the following dialog:  \n![macOS missing notarization warning](images/1_43/notarization.jpg)  \nRead the [investigation issue](https://github.com/microsoft/vscode/issues/74782) and [Apple's developer documentation](https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_43#_notarized-macos-builds",
    "id": 1487
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Progress notifications  \nNotifications that indicate a long running operation behave slightly differently starting with this release:  \n* They do not provide a generic **Close** button anymore, as it gave the wrong impression about the operation being canceled or not. You can still press the `kbstyle(Esc)` key to hide the notifications.\n* The notifications indicate the progress of their operation in the Status bar, whenever the notification is hidden while the operation is still ongoing.  \nThe later change helps you know that an operation is continuing to run in the background (such as a long running save operation) after you have dismissed the notification.  \nBelow the operation is still running until the **Cancel** button is selected:  \n![Progress Notification](images/1_43/progress-notification.gif)  \n*Theme: [Dracula Official](https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula), Font: [Fira Code](https://github.com/tonsky/FiraCode)*",
    "url": "https://code.visualstudio.com/updates/v1_43#_progress-notifications",
    "id": 1488
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Untitled editors  \nA new setting `workbench.editor.untitled.labelFormat` lets you control whether untitled editors should use the file contents as the title or not. Possible values are `content` or `name`. Configure `'workbench.editor.untitled.labelFormat': 'name'` for the previous behavior, where untitled editors would have a short title, such as **Untitled-1**.  \nWhen pasting text into an untitled editor, VS Code now automatically tries to detect the language mode from the first line of text. For example, pasting XML will set the XML mode automatically upon paste if the first line contains the typical XML header `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`.",
    "url": "https://code.visualstudio.com/updates/v1_43#_untitled-editors",
    "id": 1489
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Open workspaces via application links  \nVS Code supports opening files through protocol links (for example `vscode://file/<file-path>`). In this milestone, we've expanded support to include opening folders or workspaces.  \nThe syntax for folders or workspaces is the same as for files:  \n```bash\nvscode://file/<path>\nvscode-insiders://file/<path>\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_open-workspaces-via-application-links",
    "id": 1490
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Welcome views  \nWelcome views are a new addition to the workbench, which allows a view to create starting experiences for users to create content or configure VS Code, whenever there isn't any meaningful content to be displayed. Some views have already adopted this infrastructure, for example the File Explorer, which will offer to open a folder or clone a Git repository to get you started.  \n![File Explorer Welcome view](images/1_43/explorer.png)  \n*Theme: [GitHub Sharp](https://marketplace.visualstudio.com/items?itemName=joaomoreno.github-sharp-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_43#_welcome-views",
    "id": 1491
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Source Control Welcome view  \nThanks to the new Welcome view infrastructure, the Source Control view now provides a better experience for certain situations, in which it would otherwise appear empty. For example, it can now guide users to open folders or clone repositories or to install Git, when no installation is detected.  \n![Source Control Welcome view](images/1_43/scm.png)  \n*Theme: [GitHub Sharp](https://marketplace.visualstudio.com/items?itemName=joaomoreno.github-sharp-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_43#_source-control-welcome-view",
    "id": 1492
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Editor  \n### Minimap size  \nThere is a new setting, `editor.minimap.size`, which controls how the minimap uses vertical space:  \n* When set to `proportional` (the default), each line gets a certain amount of vertical space in the minimap, depending on `editor.minimap.scale`. For example, on a high-DPI monitor, with a configured scale of `1` (the default), each line gets 4 px in the minimap. So for a file of 100 lines, the height of the lines rendered in the minimap is 400 px, and for a file of 1000 lines, it is 4000 px. That means that for large files, the minimap will also scroll, as the current file is scrolled.\n* When set to `fit`, the height of the minimap is limited to never be larger than the editor height. So if a file has many lines, they will be sampled and only a subset will be rendered in the minimap, such that there is no need for the minimap to scroll.\n* When set to `fill`, the height of the minimap is always the editor height. For large files, this is also achieved by sampling lines, but for small files, this is achieved by reserving more vertical space for each line (stretching the lines).  \nHere the size is changed from `proportional` to `fit`, and then in a smaller file, from `fit` to `fill`:  \n![Minimap size](images/1_43/minimap-size.gif)",
    "url": "https://code.visualstudio.com/updates/v1_43#_minimap-size",
    "id": 1493
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Minimap background and slider colors  \nThere are now new colors for customizing the minimap and its slider. One of the new colors is `minimap.background` and when the color is defined to be transparent (lowering the #RRGGBBAA Alpha channel), the minimap will be rendered transparently:  \n![Transparent minimap](images/1_43/transparent-minimap.png)  \n```json\n{\n\"workbench.colorCustomizations\": {\n\"minimap.background\": \"#00000055\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_minimap-background-and-slider-colors",
    "id": 1494
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Column Selection mode  \nThere is a new global toggle, accessible via the **Selection** > **Column Selection Mode** menu item. Once this mode is entered, as indicated in the Status bar, the mouse gestures and the arrow keys will create a column selection:  \n![Column selection](images/1_43/column-selection.gif)  \nYou can also disable Column Selection mode from the Status bar.",
    "url": "https://code.visualstudio.com/updates/v1_43#_column-selection-mode",
    "id": 1495
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Render whitespace on selection  \nThe default value of the `editor.renderWhitespace` setting has changed from `none` to `selection`. Whitespace characters will now be rendered on highlighted text by default.  \nHere the tab and space whitespace characters are displayed in the selected region:  \n![Render whitespace characters on selection](images/1_43/whitespace-on-selection.png)",
    "url": "https://code.visualstudio.com/updates/v1_43#_render-whitespace-on-selection",
    "id": 1496
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Definition links in Peek  \nThere is now more control over the behavior of the **Go to Definition** mouse gesture. By default, **Go to Definition** via mouse opens a separate editor but with the new setting `editor.definitionLinkOpensInPeek` as `true`, the gesture will open in a Peek view.  \n![Definition with mouse in Peek](images/1_43/def_link_peek.gif)",
    "url": "https://code.visualstudio.com/updates/v1_43#_definition-links-in-peek",
    "id": 1497
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Unfold anywhere on a folded line  \nThere's a new setting **Editor: Unfold On Click After End of Line** (`editor.unfoldOnClickAfterEndOfLine`) that controls what happens when you click in the empty space to the right of a folded line (after the `...`). When set to `true`, you can click anywhere after the text on the folded line and not worry about exactly selecting the ellipses (`...`). By default, this option is off.  \n![folded line with ellipses](images/1_43/fold-ellipses.png)",
    "url": "https://code.visualstudio.com/updates/v1_43#_unfold-anywhere-on-a-folded-line",
    "id": 1498
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Undo textual edits across multiple files  \nWhen undoing a rename or a Code Action that affects multiple files, VS Code will now allow you to undo the change in all the affected files.  \nA prompt will be presented when undoing a cross-file edit:  \n![Undo across files prompt](images/1_43/undo-across-files-prompt.png)  \n>**Note**: File operations, like renaming a file, are not yet supported. For example, renaming a class name in Java (where the file name gets renamed as well) is not yet supported with cross-file undo.",
    "url": "https://code.visualstudio.com/updates/v1_43#_undo-textual-edits-across-multiple-files",
    "id": 1499
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Multiple rulers with different colors  \nThe existing `editor.rulers` setting has been extended to allow defining rulers that have custom colors. In the following screenshot, there is a magenta ruler at column 80 and a red one at column 90:  \n![Colored rulers](images/1_43/colored-rulers.png)  \n```json\n{\n\"editor.rulers\": [\n{ \"column\": 80, \"color\": \"#ff00ff\" },\n{ \"column\": 90, \"color\": \"#ff0000\" }\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_multiple-rulers-with-different-colors",
    "id": 1500
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Editor top and bottom padding  \nIt is now possible to reserve whitespace (number of pixels) at the top or bottom of the editor using `editor.padding.top` and `editor.padding.bottom`.  \nHere is the editor with a top padding of 50 pixels:  \n![editor.padding.top set to 50 pixels](images/1_43/editor-padding-top.png)  \n```json\n{\n\"editor.padding.top\": 50\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_editor-top-and-bottom-padding",
    "id": 1501
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Scrolling predominant axis  \nWhen trying to scroll vertically using a modern touchpad, it oftentimes happens that the file scrolls horizontally as well. There is now a new setting, `editor.scrollPredominantAxis` (which is set to true by default) which blocks \"diagonal\" scrolling. This forces scrolling gestures to be either vertical or horizontal (based on the highest absolute scroll delta), but never diagonal.",
    "url": "https://code.visualstudio.com/updates/v1_43#_scrolling-predominant-axis",
    "id": 1502
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Shift+Insert on Linux  \nWith 1.42, `Shift+Insert` was modified to paste from the selection clipboard. We received a lot of feedback that this was breaking existing muscle-memory and so we decided to roll back and have `Shift+Insert` paste from the regular clipboard, as before.",
    "url": "https://code.visualstudio.com/updates/v1_43#_shift+insert-on-linux",
    "id": 1503
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Accessibility  \n### Linux screen reader support  \nWith the help of the community, we have been working on making VS Code accessible on Linux with the Orca screen reader. Orca and Chromium are still actively working on screen reader support, so there are a couple of things needed in order to have this fully working:  \n* Make sure to use the latest version of Orca out of master. Instructions can be found in [issue #91063](https://github.com/microsoft/vscode/issues/91063).\n* Make sure to have the setting `\"editor.accessibilitySupport\": \"on\"` in VS Code. You can do this using settings, or by running the **Show Accessibility Help** command and pressing `kbstyle(Ctrl+E)` to turn on Screen Reader Optimized mode.  \nAfter enabling that setting, VS Code should work with the Orca screen reader.",
    "url": "https://code.visualstudio.com/updates/v1_43#_linux-screen-reader-support",
    "id": 1504
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Languages  \n### TypeScript 3.8.3  \nVS Code now bundles TypeScript 3.8.3. This [major update](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/) brings support for new language features including [ECMAScript private fields](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/#ecmascript-private-fields), [top-level await](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/#top-level-await) expressions, and the [export * as ns](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/#export-star-as-namespace-syntax) syntax, along with many tooling features and improvements. The update also fixes a number of important bugs.  \nYou can read more about TypeScript 3.8 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/#export-star-as-namespace-syntax).",
    "url": "https://code.visualstudio.com/updates/v1_43#_typescript-3.8.3",
    "id": 1505
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Convert to template string refactoring  \nYou can use the new **Convert to template string** refactoring for JavaScript and TypeScript to quickly convert string concatenations to [template strings](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals):  \n![Converting string concatenation to a template string](images/1_43/ts-convert-to-template-string.gif)",
    "url": "https://code.visualstudio.com/updates/v1_43#_convert-to-template-string-refactoring",
    "id": 1506
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Call hierarchy support for JavaScript and TypeScript  \nTypeScript 3.8 brings [call hierarchy](https://code.visualstudio.com/updates/v1_33#_call-hierarchy) support in JavaScript and TypeScript.  \n![Viewing incoming calls using call hierarchy in a TypeScript file](images/1_43/ts-call-hierarchy.png)",
    "url": "https://code.visualstudio.com/updates/v1_43#_call-hierarchy-support-for-javascript-and-typescript",
    "id": 1507
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Support for http(s) @link JSDoc inline tags  \nIntelliSense now renders [JS Doc @link inline tags](https://jsdoc.app/tags-inline-link.html) for http and https links. In the example image below, notice how the `@link` for `lightbulb menu` is rendered in the hover:  \n![A hover with a rendered @link JSDoc tag](images/1_43/ts-jsdoc-link.png)  \n`@link` to URLs work for both JavaScript and TypeScript and are rendered as clickable links in hovers, suggestion details, and signature help.",
    "url": "https://code.visualstudio.com/updates/v1_43#_support-for-https-@link-jsdoc-inline-tags",
    "id": 1508
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### TypeScript semantic highlighting  \nSemantic highlighting is now on by default for TypeScript and JavaScript. Semantic highlighting is provided by the TypeScript language server and goes on top of the syntax highlighting based on TextMate grammars. The default syntax (TextMate) highlighter classifies many tokens as `variables` and these are now resolved into namespaces, classes, parameters, and so on.  \nSemantic highlighting is controlled by the following setting:  \n```json\n\"editor.semanticHighlighting.enabled\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_typescript-semantic-highlighting",
    "id": 1509
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### JSON schemas  \nWhen associating file names to schemas, you can now also use exclusion patterns. Exclusion patterns start with '!'. To match, at least one pattern needs to match and the last matching pattern must not be an exclusion pattern.  \n```json\n\"json.schemas\": [\n{\n\"fileMatch\": [\n\"/receipts/*.json\",\n\"!/receipts/*.excluded.json\"\n],\n\"url\": \"./receipts.schema.json\"\n}\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_json-schemas",
    "id": 1510
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Debugging  \n### \"Run\" more prominent in the UI  \nUser studies revealed that new users have difficulties finding how to run their programs in VS Code. One reason is that the existing \"Debugging\" functionality is not something that they relate to \"Running\" a program. For that reason, we are making \"Run\" more prominent in the UI.  \n* The main menu **Debug** has become the **Run** menu.\n* The **Run and Debug** view has become the **Run** view and the corresponding Activity Bar icon now shows a large \"Play\" icon with a small \"bug\" decoration.  \n![Run and Debug Activity Bar icon](images/1_43/run.png)",
    "url": "https://code.visualstudio.com/updates/v1_43#_run-more-prominent-in-the-ui",
    "id": 1511
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Debug Console grouping  \nThe VS Code Debug Console now supports **output grouping**. Debug extensions can indicate when Debug Console output should be grouped together under a common parent. For now, only the Mock Debug extension implements output grouping, but soon other debug extensions will follow - most notably the JavaScript debugger.  \n![Debug Console grouping](images/1_43/debug-console.png)",
    "url": "https://code.visualstudio.com/updates/v1_43#_debug-console-grouping",
    "id": 1512
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Disable Debug Console history suggestions  \nYou can now turn off history suggestions in the Debug Console via the new `debug.console.historySuggestions` setting. By default, history suggestions are on.",
    "url": "https://code.visualstudio.com/updates/v1_43#_disable-debug-console-history-suggestions",
    "id": 1513
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Integrated Terminal  \n### Unicode 11 support  \nThe width of characters in the terminal now default to the Unicode 11 widths. What this means to most people is that emojis will be correctly showing up as wide characters.  \n![Emojis are correctly wide characters](images/1_43/unicode11.png)",
    "url": "https://code.visualstudio.com/updates/v1_43#_unicode-11-support",
    "id": 1514
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Better Alt+Click to navigate prompt support  \nThe terminal has a feature that lets you `Alt+Click` on a cell and the cursor will navigate to that cell. Historically when in a shell's prompt, this only worked on a single line, even if it was wrapped. This has been improved to work on a full wrapped line.  \n![Alt+Click can move across wrapped lines](images/1_43/altclick.gif)\n*Theme: [Sapphire](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire)*  \nNote that this may not work correctly on Windows yet but [recent changes to ConPTY](https://github.com/microsoft/terminal/issues/405) should improve this in the future.",
    "url": "https://code.visualstudio.com/updates/v1_43#_better-alt+click-to-navigate-prompt-support",
    "id": 1515
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Tasks  \n### Task Quick Pick updates  \nThe task Quick Pick, shown when the **Run Task** command is executed, has been updated to show you which task providers are still running. If you don't need tasks from that provider, the **Stop Detecting** button will immediately show you the tasks that have been detected so far, so you don't have to wait for any slow task providers.  \n![Tasks Stop Detecting](images/1_43/tasks_stop_detecting.gif)\n*Theme: [One Dark Pro](https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme), Font: [Fira Code](https://github.com/tonsky/FiraCode)*",
    "url": "https://code.visualstudio.com/updates/v1_43#_task-quick-pick-updates",
    "id": 1516
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Task instance limit  \nThe tasks `\"runOptions\"` now includes an `\"instanceLimit\"`, which specifies the number of instances of a task that are permitted. The default `\"instanceLimit\"` is 1.",
    "url": "https://code.visualstudio.com/updates/v1_43#_task-instance-limit",
    "id": 1517
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### promptString password input  \nThe `\"promptString\"` user input type can have `\"password\": true`, which will cause the dropdown input box to obscure the typed content like a password.",
    "url": "https://code.visualstudio.com/updates/v1_43#_promptstring-password-input",
    "id": 1518
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Timeline view  \nIn this iteration, we've continued making progress on our new Timeline view. It's now enabled by default on the [Insiders](https://code.visualstudio.com/insiders/) edition, and can be enabled on Stable via the following setting:  \n```json\n\"timeline.showView\": true\n```  \nBelow the Timeline view displays the Git commit history of a file:  \n![Timeline view](images/1_43/timeline.png)  \n*Theme: [Dark Amethyst](https://marketplace.visualstudio.com/items?itemName=eamodio.amethyst-theme)*  \nWe've now added paging support (via the **Load more** action shown above), and added a relative timestamp over on the right. Extensions can also contribute menu items to the Timeline view as well as to individual timeline items. In the screenshot above, the built-in Git extension is contributing the commands, **Copy Commit ID** and **Copy Commit Message**.",
    "url": "https://code.visualstudio.com/updates/v1_43#_timeline-view",
    "id": 1519
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### New JavaScript debugger  \nThis month we've continued making progress on our new JavaScript debugger. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code Stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting. Here are some new features we added this month:  \n**Pretty printing**  \n![Animation of VS Code asking whether to pretty-print a minified file when the debugger steps into it. Selecting \"yes\" formats the file and moves the debugger into the new beautified code.](images/1_43/js-debug-pretty-printing.gif)  \n*Theme: Earthsong, Font: Fira Code*  \nThe debugger can now pretty print files, especially useful when dealing with minified sources. It will show a prompt when you step into or open a file that looks minified, and you can also trigger pretty printing manually via the **Debug: Pretty print for debugging** command.  \nYou can turn off the suggestion prompt by selecting **Never**, or changing the setting `debug.javascript.suggestPrettyPrinting` to `false`.  \n**Support for Microsoft Edge and WebView2**  \nWe now support launching the [new Microsoft Edge browser](https://www.microsoft.com/edge), just change your debug type from `chrome` or `pwa-chrome` to `pwa-msedge` to try it out. It supports all the same configuration settings as `chrome` does.  \nWith this comes support for the [WebView2](https://learn.microsoft.com/microsoft-edge/webview2) control in desktop Windows applications. Check out our [webview demo](https://github.com/microsoft/vscode-js-debug/tree/main/demos/webview) to learn how to set this up.  \n![Image showing the debugger paused at a breakpoint for code running in a native window's WebView.](images/1_43/js-debug-webview.png)  \n**Remote Debugging**  \nYou can now debug browser source code from a remote workspace, such as [GitHub Codespaces](https://github.com/features/codespaces) or [Remote SSH](https://code.visualstudio.com/docs/remote/ssh), in the new debugger. To set this up, port forward your web server (or a use a [simple static web server](https://github.com/zeit/serve/blob/master/README.md)), and then create a `chrome` or `pwa-msedge` launch configuration that points to the forwarded port.  \nFor example:  \n```json\n{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"pwa-msedge\",\n\"request\": \"launch\",\n\"name\": \"Debug my App\",\n\"url\": \"http://localhost:5000\", // <- debug an app forwarded on port 5000\n}\n]\n}\n```  \nWhen you launch the debugging session, a browser will open on your machine and you can debug like you normally would from VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_43#_new-javascript-debugger",
    "id": 1520
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### More views are movable  \nLast release, VS Code gave you just a taste of relocating views to the Panel. In this release, this experience has been expanded to many more views. You can now move views such as the Debug/Run view or the new Timeline view. You can also move views into other views in the Side Bar. For example, perhaps you'd like to move the **Open Editors** view into the Source Control view. You can do all of this by dragging the views and dropping them in the desired location in the Activity Bar or Panel.  \nThe animation below highlights moving the **Open Editors** view to a different view and then to the Panel:  \n![Moving views around](images/1_43/moving-views-around.gif)  \n*Theme: [Horizon Bright](https://marketplace.visualstudio.com/items?itemName=jolaleye.horizon-theme-vscode), Font: [Cascadia Code](https://github.com/microsoft/cascadia-code)*  \nWe've also introduced a new command to make moving views easier with the keyboard: **View: Move Focused View** (`workbench.action.moveFocusedView`).  \nThis is a preview feature, and so if you get into a state that you can't fix, there is a command to reset all views to their original locations: **View: Reset View Locations** (`workbench.action.resetViewLocations`).",
    "url": "https://code.visualstudio.com/updates/v1_43#_more-views-are-movable",
    "id": 1521
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.43 include:  \n* Open remote workspaces via application links.\n* Remote - SSH: Support for Windows and macOS SSH hosts.\n* Remote - SSH: Connection sharing on by default.\n* WSL: Check out the recent [Using Docker in WSL 2](https://code.visualstudio.com/blogs/2020/03/02/docker-in-wsl2) blog post.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_43.md).",
    "url": "https://code.visualstudio.com/updates/v1_43#_remote-development",
    "id": 1522
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Vetur  \nThe [Vetur](https://github.com/vuejs/vetur) extension for Vue.js now includes better auto completion for template interpolation. You can find the changelog in the [0.24.0 release](https://github.com/vuejs/vetur/releases/tag/v0.24.0).",
    "url": "https://code.visualstudio.com/updates/v1_43#_vetur",
    "id": 1523
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Extension authoring  \n### Debugger Extension API  \n**Debug Welcome view**  \nAs described in the [Welcome View Content API](#welcome-view-content-api) section, the `debug` view is now open for Welcome View Content contributions. These additions can be used to guide beginning users to specific features that simplify running or debugging programs.  \nIn order for the view to not become cluttered by too many Welcome View Content contributions, we suggest that individual contributions are only enabled for the current active language. To facilitate this, we have introduced a new context key `debugStartLanguage`, which is set to the last active editor language for which a debugger was used.  \nFor example, if your debugger targets Python, you would contribute Welcome View Content only if `debugStartLanguage == \"python\"`. In case your debugger targets multiple languages, you can use the OR operator (`||`) to combine multiple conditions.  \n**New Debug Hover API**  \nToday VS Code's debug hover uses a regular expression-based heuristic to find an expression under the mouse that the VS Code debugger evaluates and then shows the result in a hover. Since the regular expression is not configurable, not all languages are handled correctly (or they are not handled to the full extent possible). Issues [#84044](https://github.com/microsoft/vscode/issues/84044#issuecomment-576777272), [#89603](https://github.com/microsoft/vscode/issues/89603), and [#89332](https://github.com/microsoft/vscode/issues/89332) describe typical problems.  \nIn this milestone, we've introduced new extension API to control the behavior of the debug hover.  \nAn `EvaluatableExpressionProvider` can be registered for a language to provide an expression under the mouse that the VS Code debugger will evaluate against an active debug session.  \nHere is a simple example from the [Mock debug](https://github.com/microsoft/vscode-mock-debug) sample that shows a (simple) implementation based on `getWordRangeAtPosition` API:  \n```ts\nvscode.languages.registerEvaluatableExpressionProvider('markdown', {\nprovideEvaluatableExpression(document: vscode.TextDocument, position: vscode.Position):\nvscode.ProviderResult<vscode.EvaluatableExpression> {\nconst wordRange = document.getWordRangeAtPosition(position);\nif (wordRange) {\nreturn new vscode.EvaluatableExpression(wordRange);\n}\nreturn undefined; // nothing evaluatable found under mouse\n}\n});\n```  \n**No longer escaping whitespace**  \nThe VS Code debugger UI no longer escapes or quotes any whitespace received from a debug extension or debug adapter. For example, all strings received in DAP Variables or as DAP Output events are shown in the UI as they are without modification.  \nThis means that it is now up to the debug extension or debug adapter to decide if whitespace needs to be escaped before sending the data to VS Code. More details can be found in [issue #73845](https://github.com/microsoft/vscode/issues/73845).",
    "url": "https://code.visualstudio.com/updates/v1_43#_debugger-extension-api",
    "id": 1524
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### CodeAction.disabled  \nWith the `CodeAction.disabled` property, extension can now tell VS Code why a given `CodeAction` is not possible for the user's current selection. This is especially useful for [refactorings](https://code.visualstudio.com/docs/editor/refactoring).  \nHere's an example of using `.disabled` in our [Code Action sample extension](https://github.com/microsoft/vscode-extension-samples/tree/main/code-actions-sample).  \n```ts\nimport * as vscode from 'vscode';\n\nexport class Emojizer implements vscode.CodeActionProvider {\n\npublic provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] | undefined {\nconst action = new vscode.CodeAction(`Convert to ${emoji}`, vscode.CodeActionKind.Refactor.append('emojize'));\n\nif (!this.isAtStartOfSmiley(document, range)) {\n// Tell the user why our action is not available\naction.disabled = { reason: 'Selection is not currently on a :)' };\nreturn [action];\n}\n\naction.edit = new vscode.WorkspaceEdit();\naction.edit.replace(document.uri, new vscode.Range(range.start, range.start.translate(0, 2)), '\ud83d\ude00');\nreturn action;\n}\n}\n```  \nIf the user tries to apply a disabled Code Action [through a keybinding](https://code.visualstudio.com/docs/getstarted/keybindings#_custom-keybindings-for-refactorings), VS Code will display the `.disabled` error message to the user:  \n![Showing the '.disabled' error in the editor](images/1_41/code-action-disabled-error.png)  \nIn addition, to help with discoverability, disabled Code Actions are shown as faded in the **Refactor** and **Source Action** context menus:  \n![A '.disabled' Code Action in the Refactor menu](images/1_41/code-action-disabled-faded.png)  \nNote that disabled actions are not shown in the top-level lightbulb menu.",
    "url": "https://code.visualstudio.com/updates/v1_43#_codeaction.disabled",
    "id": 1525
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Terminal.exitStatus  \nExtensions can now determine whether terminals have exited and if they did, which exit code was used (if any).  \n```ts\nwindow.onDidCloseTerminal(t => {\nif (t.exitStatus && t.exitStatus.code) {\nvscode.window.showInformationMessage(`Exit code: ${t.exitStatus.code}`);\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_terminal.exitstatus",
    "id": 1526
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Adding links to diagnostic errors  \nWe have promoted the [proposed diagnostic link API](https://code.visualstudio.com/updates/v1_42#_adding-links-to-diagnostic-errors) to Stable:  \n```ts\nclass Diagnostic {\n...\n\n/**\n* A code or identifier for this diagnostic.\n* Should be used for later processing, e.g. when providing [code actions](#CodeActionContext).\n*/\ncode?: string | number | {\n/**\n* A code or identifier for this diagnostic.\n* Should be used for later processing, e.g. when providing [code actions](#CodeActionContext).\n*/\nvalue: string | number;\n\n/**\n* A target URI to open with more information about the diagnostic error.\n*/\ntarget: Uri;\n};\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_43#_adding-links-to-diagnostic-errors",
    "id": 1527
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Workspace Edit Metadata  \nWe have finalized the `WorkspaceEditEntryMetadata` API. It allows extension authors to classify the changes of a workspace edit, in particular if a change needs to be reviewed before being applied.",
    "url": "https://code.visualstudio.com/updates/v1_43#_workspace-edit-metadata",
    "id": 1528
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Debug Adapter Protocol  \n### Support grouping in output events  \nAn optional `group` attribute has been added to the `output` event in order to keep an output log organized by grouping related messages. Possible values for `group` are `start` and `startCollapsed` to open a group either expanded or collapsed, and `end` for closing a group.  \n**Note:** Starting with this release, VS Code supports this DAP enhancement.",
    "url": "https://code.visualstudio.com/updates/v1_43#_support-grouping-in-output-events",
    "id": 1529
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Allow cursor placement via completion items  \nOptional `selectionStart` and `selectionLength` attributes have been added to the completion item. With these attributes, the client's current selection (or caret position) can be controlled after the completion text has been inserted.  \n**Note:** VS Code does not yet support this DAP enhancement. It is planned for the next release.",
    "url": "https://code.visualstudio.com/updates/v1_43#_allow-cursor-placement-via-completion-items",
    "id": 1530
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Proposal: Progress events  \nWe made some progress on a proposal for adding **progress events** to the Debug Adapter Protocol. If you are interested, you can contribute to the discussion on this [DAP feature request](https://github.com/microsoft/debug-adapter-protocol/issues/92).",
    "url": "https://code.visualstudio.com/updates/v1_43#_proposal:-progress-events",
    "id": 1531
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Custom Editor API  \nWe continued to work on the [custom editor API proposal](https://github.com/microsoft/vscode/issues/77131) this iteration. Notable changes include:  \n* Renaming API methods to be shorter and more consistent.\n* Simplifying creation of custom editors for text files by introducing `CustomTextEditorProvider`. This custom editor uses VS Code's normal `TextDocument` as its data model, so that you don't have to implement `save`, `backup`, and other operations yourself. This also makes it easy to have live synchronization between a custom editor for a resource and a text editor for the same resource.\n* Introduction of `CustomDocument` to store the model that a binary `CustomEditor` works with. There is one `CustomDocument` per resource, but a user may open multiple custom editors on that resource.  \nPlease continue to test and share feedback on our [custom editor API proposal](https://github.com/microsoft/vscode/issues/77131). Although the specifics of the API may still change, we believe the current proposal reflects what we are hoping to finalize soon.",
    "url": "https://code.visualstudio.com/updates/v1_43#_custom-editor-api",
    "id": 1532
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### CodeActionProviderMetadata.documentation  \nWe've revised [our previous proposal](https://code.visualstudio.com/updates/v1_42#_documentationrefactoring-contribution-point) about standardizing how extensions contribute documentation for their Code Actions. With the updated proposal, documentation is now provided using a `documentation` property on the `CodeActionProviderMetadata` type.  \nFor example, here's how our built-in JavaScript and TypeScript extension contributes documentation:  \n```ts\nclass TypeScriptRefactorProvider implements vscode.CodeActionProvider {\n\npublic static readonly metadata: vscode.CodeActionProviderMetadata = {\nprovidedCodeActionKinds: [ vscode.CodeActionKind.Refactor ],\ndocumentation: [\n{\nkind: vscode.CodeActionKind.Refactor,\n\n// This command opens a webpage when executed\ncommand: {\ncommand: LearnMoreAboutRefactoringsCommand.id,\ntitle: localize('refactor.documentation.title', \"Learn more about JS/TS refactorings\")\n}\n}\n]\n};\n...\n}\n```  \nThe documentation is rendered after the main Code Action list, whenever the user requests refactorings:  \n![The JS/TS Code Action documentation entry](images/1_43/code-action-documentation.png)  \n[Issue #86788](https://github.com/microsoft/vscode/issues/86788) tracks the status of the proposal.",
    "url": "https://code.visualstudio.com/updates/v1_43#_codeactionprovidermetadata.documentation",
    "id": 1533
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Welcome View Content API  \nCertain views now support Welcome content contributed from extensions. Refer to the [original issue](https://github.com/microsoft/vscode/issues/89080) for more information.  \nThe views that have adopted this API are:  \n* `explorer` - File Explorer\n* `scm` - Source Control\n* `debug` - Run/Debug  \nAs an example, here's a Welcome view content contribution from the Git extension to clone a repository, on the `explorer` Welcome view:  \n![Explorer Welcome view](images/1_43/explorer.png)  \n*Theme: [GitHub Sharp](https://marketplace.visualstudio.com/items?itemName=joaomoreno.github-sharp-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_43#_welcome-view-content-api",
    "id": 1534
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### OpenDialogOptions and SaveDialogOptions title  \nThe `OpenDialogOptions` and `SaveDialogOptions` both have a proposed `title` property. Whether the `title` is shown is platform-dependent, but if the platform does show the `title`, it is shown above the Save or Open dialog. For example, the built-in command **Workspaces: Save Workspace As...** sets the title to **Save Workspace**.",
    "url": "https://code.visualstudio.com/updates/v1_43#_opendialogoptions-and-savedialogoptions-title",
    "id": 1535
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n## Engineering  \n### Electron 7.0 Update  \nIn this milestone, we finished the exploration to bundle Electron 7 into VS Code. This is a major Electron release and comes with Chromium 78.0.3904.130 and Node.js 12.8.1.  \n**For HDR displays**  \nWe are tracking an issue from **Windows** users with high dynamic range (HDR) displays in [issue #88491](https://github.com/microsoft/vscode/issues/88491), where VS Code looks dull and unusable. This is an issue with all Chromium-based applications on 78.0.3904.130 and the issue is fixed in more recent versions of Chromium 81. VS Code will get this fix once we upgrade to Electron 9 and there are technical reasons why the fix couldn't be backported to Chromium 78.  \nIn the meantime, we have a temporary workaround for this issue:  \n* Open the Command Palette (`kb(workbench.action.showCommands)`).\n* Run the **Preferences: Configure Runtime Arguments** command.\n* This command will open a `argv.json` file to configure runtime arguments. There might be some default arguments there already.\n* Edit `\"disable-color-correct-rendering\": true` to `\"disable-color-correct-rendering\": false`.\n* Restart VS Code.  \n**Note:** Do not edit this setting unless you are experiencing issues!  \nWe added this default runtime argument so that we can override Chromium's default color correction to sRGB and instead use the display color space on macOS. Doing this avoids problems like [issue #84154](https://github.com/microsoft/vscode/issues/84154) but doesn't work for HDR displays.",
    "url": "https://code.visualstudio.com/updates/v1_43#_electron-7.0-update",
    "id": 1536
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### \"strict\": true  \nWhen we first released VS Code, TypeScript was still a new and rapidly evolving language that was missing some of the useful type safety checks that you probably take for granted today, such as [strict null checking](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks). Over the past few years, the TypeScript team has introduced a number of options that make the TypeScript compiler more \"strict\". These strict options can catch many common programming mistakes and eliminate entire classes of errors. The benefits of strict mode are well documented, and we've long wanted to enable strict mode for the VS Code codebase. However doing so seemed like an almost impossible task, given that it would require fixing thousands of errors in the roughly half a million lines of source code that make up the core VS Code codebase.  \nStill, the value of strict mode was great enough that we decided it was worth working towards, even if it would take us some time to get there. So over the past two years, we've been incrementally updating our code base to be strict mode compliant. We did all this work incrementally and directly in our development branch so that every strict mode related fix made our codebase a little bit safer for everyone. Enabling strict null checks was probably the most complicated part of the process, and we documented how we accomplished this in a [blog post](https://code.visualstudio.com/blogs/2019/05/23/strict-null).  \nThis iteration, we finally finished enabling the last strict mode option: `strictFunctionTypes`. With this done, a [rather anticlimactic commit](https://github.com/microsoft/vscode/commit/2158e77627d56d463314f003242e763b3da6b62b) enabled strict mode for our entire codebase!  \nEnabling strict mode was a long journey that everyone on the core VS Code team and many community members contributed to. However, by doing this work incrementally, we were able to benefit from all this hard work starting on day one. Going forward, strict mode should encourage coding best practices, make refactoring safer, and ultimately let us ship faster and with fewer bugs!",
    "url": "https://code.visualstudio.com/updates/v1_43#_strict:-true",
    "id": 1537
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Improved CI build performance  \nVS Code uses [Azure Pipelines](https://azure.microsoft.com/services/devops/pipelines/) for its continuous integration builds and we recently improved the build performance considerably. You can learn more about this in the [Improving CI Build Times](https://code.visualstudio.com/blogs/2020/02/18/optimizing-ci) blog post.",
    "url": "https://code.visualstudio.com/updates/v1_43#_improved-ci-build-performance",
    "id": 1538
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2020 Release (1.43)  \n### Running tests against browsers  \nIn this milestone, we enabled all of our tests (unit, integration, smoke) to run in browsers by leveraging the [Playwright](https://github.com/microsoft/playwright) library, which gives us increased coverage on browsers such as Chrome, Firefox, and Safari. You can refer to our [VS Code Tests README](https://github.com/microsoft/vscode/blob/afcaaa613186832493bb1813dee048890a3c2a2f/test/README.md) for how to run these tests.",
    "url": "https://code.visualstudio.com/updates/v1_43#_running-tests-against-browsers",
    "id": 1539
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Improved Extension Pack display  \nTo identify Extension Packs in the Extensions view, there is now a number badge that shows the number of extensions included in the Extension Pack.  \n![Extension Pack number of extensions badge](images/1_44/extension-pack-badge.png)  \n*Theme: GitHub Sharp with Customizations*  \nThe Extension details page now shows all extensions bundled in the Extension Pack.  \n![Extension Pack details page showing bundled extensions](images/1_44/extension-pack-editor.png)  \n*Theme: GitHub Sharp with Customizations*",
    "url": "https://code.visualstudio.com/updates/v1_44#_improved-extension-pack-display",
    "id": 1541
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Adjust height of editor tabs scroll bar  \nA new setting `workbench.editor.titleScrollbarSizing` lets you increase the size of the scroll bar for editor tabs and breadcrumbs. This makes it easier to scroll through a long list of open editors.  \nConfigure it to `large` for a larger scroll bar:  \n![Large scrollbar](images/1_44/large-scrollbar.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_adjust-height-of-editor-tabs-scroll-bar",
    "id": 1542
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### File Explorer can show hidden files  \nIf a file is hidden (via the `files.exclude` setting) but it is open and visible in the editor, the file is shown in the File Explorer along with its parent chain. Those files and their parents are displayed in the File Explorer using a dimmed color as long as the file is visible in the editor area.",
    "url": "https://code.visualstudio.com/updates/v1_44#_file-explorer-can-show-hidden-files",
    "id": 1543
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### View: Reopen with  \nThe new **View: Reopen with** command lets you reopen the currently active file using a different [custom editor](#custom-text-editors).  \n![Using the Reopen With command with the custom editor example extension](images/1_44/reopen-with.png)  \nYou can use this command to switch between VS Code's standard text editor and the custom editor, or to switch between multiple custom editors for a resource.",
    "url": "https://code.visualstudio.com/updates/v1_44#_view:-reopen-with",
    "id": 1544
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### workbench.editorAssociations setting  \nAlso for [custom editors](#custom-text-editors), the new `workbench.editorAssociations` setting lets you configure which editor is used for a specific resource.  \nThe example below configures all files ending in `.catScratch` to open using the [example custom text editor](https://github.com/microsoft/vscode-extension-samples/tree/main/custom-editor-sample) from our extension samples.  \n```json\n\"workbench.editorAssociations\": [\n{\n\"viewType\": \"catCustoms.catScratch\",\n\"filenamePattern\": \"*.catScratch\"\n}\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_44#_workbench.editorassociations-setting",
    "id": 1545
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### View progress now shown on the view  \nWe have changed progress indication for custom views to now show on each view itself, rather than at the top of the view container. This allows for a more direct connection between the long-running operation and its progress. There is also a [new API option](#view-level-progress-indication) for extensions to show custom progress on views as well.  \nHere you can see the progress display on the GitLens extension view:  \n![View progress indication](images/1_44/view-progress.gif)",
    "url": "https://code.visualstudio.com/updates/v1_44#_view-progress-now-shown-on-the-view",
    "id": 1546
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### New default monospace font  \nWe have updated the monospace font used in VS Code UI to:  \n```css\n.mac { --monaco-monospace-font: \"SF Mono\", Monaco, Menlo, Courier, monospace; }\n.windows { --monaco-monospace-font: Consolas, \"Courier New\", monospace; }\n.linux { --monaco-monospace-font: \"Ubuntu Mono\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Courier New\", monospace; }\n```  \nThis change does not affect the font choice in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_44#_new-default-monospace-font",
    "id": 1547
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Editor  \n### Keep Undo stack when reopening files  \nVS Code will now keep the **Undo/Redo** stack of a file when the file is closed. When the file is reopened, if its contents hasn't changed since it was closed, the Undo/Redo stack will be restored.  \nThis is very useful if you limit the number of open editors with the `workbench.editor.limit.value` setting or you accidentally close a file you are working on.",
    "url": "https://code.visualstudio.com/updates/v1_44#_keep-undo-stack-when-reopening-files",
    "id": 1548
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Explicit ordering for Code Actions on save  \nYou can now set `editor.codeActionsOnSave` to an array of Code Actions to execute in order. You can use this to guarantee that a specific Code Action is always run before or after another one that may conflict with it.  \nThe following `editor.codeActionsOnSave` will always run **Organize Imports** followed by **Fix All** once organize imports finishes:  \n```json\n\"editor.codeActionsOnSave\": [\n\"source.organizeImports\",\n\"source.fixAll\"\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_44#_explicit-ordering-for-code-actions-on-save",
    "id": 1549
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Using editor.wordSeparators for Next Find Match  \nThe command **Add Selection to Next Find Match** (`kb(editor.action.addSelectionToNextFindMatch)`) now respects the setting `editor.wordSeparators`. Previously, the command would use the word definition as defined by the current file's language.",
    "url": "https://code.visualstudio.com/updates/v1_44#_using-editor.wordseparators-for-next-find-match",
    "id": 1550
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Debugging  \n### Call Stack view improvements  \nThe CALL STACK view is a complex view because it shows different types of objects (sessions, processes, threads, stack frames, and separator elements) and provides different actions for different types. In order to make it easier to differentiate the object types and to understand their supported interactions, we have started to make some visual improvements:  \n* Debug sessions are now decorated with an icon.\n* Clickable elements use the link color.\n* Smaller separator and presentation elements.  \n![Call Stack](images/1_44/callstack.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_call-stack-view-improvements",
    "id": 1551
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### New Debug Console icon  \nWe've introduced a new icon for the Debug Console and also use it in the Activity Bar when the Debug Console view is moved from the panel.  \n![Debug Console icon](images/1_44/debug-console-icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_new-debug-console-icon",
    "id": 1552
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Progress feedback UI for debug extensions  \nVS Code now supports the \"progress events\" that were [proposed](https://github.com/microsoft/debug-adapter-protocol/issues/92) for the Debug Adapter Protocol (DAP) in the last milestone. With progress events, a debug extension can provide feedback to users for long running operations.  \nThe VS Code debugging UI shows progress feedback in two locations:  \n* As a progress bar at the top of the debug view.\n* As a \"silent notification\", which means that progress is shown \"silently\" (without interrupting the user) in the Status bar and can be opened into a notification by clicking on it. The notification shows more detailed information and allows cancellation of the underlying long running operation (if the operation supports cancel).  \nIn order to avoid flicker for short operations, the progress UI only starts after a 0.5 second delay.  \nThe following video shows the new progress UI for a (simulated) long running operation in Mock Debug (the only supporting debug extension as of today). We expect that other debug extensions will adopt the progress support soon.  \n![Debug progress UI](images/1_44/debug-progress.gif)",
    "url": "https://code.visualstudio.com/updates/v1_44#_progress-feedback-ui-for-debug-extensions",
    "id": 1553
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Code completion selection in the Debug Console  \nIn the last milestone, we added [selection control](https://github.com/microsoft/debug-adapter-protocol/issues/87) to the \"completion\" request of the Debug Adapter Protocol. With this release, VS Code now fully supports the protocol addition and a debug extension can adjust the selection (or insertion point) after a completion item has been inserted.",
    "url": "https://code.visualstudio.com/updates/v1_44#_code-completion-selection-in-the-debug-console",
    "id": 1554
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Integrated Terminal  \n### Allow menu bar mnemonics to skip the terminal  \nWhen the new setting `terminal.integrated.allowMenubarMnemonics` is enabled, all keystrokes using `Alt` will skip the terminal so they are processed by VS Code's keybinding manager, making all menu mnemonics work at the cost of `Alt` hotkeys within the terminal. This setting is disabled by default.",
    "url": "https://code.visualstudio.com/updates/v1_44#_allow-menu-bar-mnemonics-to-skip-the-terminal",
    "id": 1555
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Languages  \n### Auto import style in JavaScript  \nThe new `javascript.preferences.importModuleSpecifierEnding` setting lets you control the style of imports that VS Code's auto imports use. This can be useful if you are writing code for platforms such as browsers that support native ES6 modules.  \nPossible values are:  \n* `auto` -The default. Uses the project's [jsconfig](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_javascript-projects-jsconfigjson) to determine the import style to use.\n* `minimal` - Use's Node.js style imports. This shortens imports for `src/component/index.js` to `src/component`.\n* `index` - Include the `index` part of the path as well. This shortens `src/component/index.js` to `src/component/index`.\n* `js` - Use the full path, including the file extension (`.js`).",
    "url": "https://code.visualstudio.com/updates/v1_44#_auto-import-style-in-javascript",
    "id": 1556
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Tasks  \n### Faster task Quick Pick  \nThe task Quick Pick used to fetch all tasks from all task-providing extensions before displaying the list of tasks to choose from. Now, VS Code doesn't fetch any additional extension tasks before showing the Quick Pick dropdown, making it much faster. Extension contributed tasks are also only fetched when you ask for them, which frees up the extension host.  \nBelow the TypeScript contributed `tsc` tasks are only fetched after the user selects the **typescript** extension.  \n![Task Quick Pick](images/1_44/task-pick.gif)  \n*Theme: One Dark Pro*",
    "url": "https://code.visualstudio.com/updates/v1_44#_faster-task-quick-pick",
    "id": 1557
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Account management  \nExtensions that contribute an [Authentication Provider](https://github.com/microsoft/vscode/issues/88309) will now have their accounts appear on a new **Accounts** context menu above the settings gear. You can view all accounts you are currently signed into, sign out of them, and manage trusted extensions. Signing into a Microsoft account from here is another way to start Settings Sync.  \n![Accounts context menu](images/1_44/accounts_menu.png)  \n*Theme: Pop Light with Customizations*",
    "url": "https://code.visualstudio.com/updates/v1_44#_account-management",
    "id": 1558
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### New JavaScript debugger  \nThis month we've continued making progress on our new JavaScript debugger. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code Stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting. Here are some new features added this month:  \n**Link handling in the debug terminal**  \nYou could use the debug terminal (**Debug: Create JavaScript Debug Terminal**) to automatically debug any Node.js process. Now, the debugger also handles links to start debugging your browser whenever you `Cmd/Ctrl+Click` on links, no configuration needed.  \n![Animation showing clicking on a link in the debug terminal, Chrome opening, and hitting a breakpoint](images/1_44/js-debug-link-handler.gif)  \n*Theme: Earthsong, Font: Fira Code*  \n**Reference $returnValue in Watch and Debug Console**  \nWhen it's available in the call stack, you can now reference a function's `$returnValue` in the Debug Console and Watch expressions.  \n![Screenshot showing $returnValue being referenced in the Debug Console and Watch expression](images/1_44/js-debug-returnvalue.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_new-javascript-debugger",
    "id": 1559
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### TypeScript 3.9 Beta support  \nThis iteration we added support for the new [TypeScript 3.9 Beta features](https://devblogs.microsoft.com/typescript/announcing-typescript-3-9-beta). Some highlights of TypeScript 3.9 include:  \n* Suggestions for the `// @ts-expect-error` directive.\n* Refactorings that better preserve newlines and formatting.\n* Auto imports in JavaScript can now add common JS style imports (`require(...)`).  \nYou can try the new TypeScript 3.9 features today by installing the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with the TypeScript 3.9 beta!",
    "url": "https://code.visualstudio.com/updates/v1_44#_typescript-3.9-beta-support",
    "id": 1560
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Increased view placement flexibility  \nFor several iterations, we have worked to improve the flexibility of our layout by allowing individual views to be moved around. With this iteration, we not only added features but also polished the experience.  \n**New Drag and Drop experience**  \nThe dragging and dropping of Activity Bar icons, panels, and views within the Side Bar has been simple, but ambiguous. It could be difficult to know exactly what was going to happen when you actually dropped any of those items. The new experience aims to improve clarity and highlight the new features we are enabling along the way.  \nBelow, the user begins by reordering views within the Side Bar, followed by reordering tabs in the Panel and icons in the Activity Bar:  \n![New Drag and Drop experience](images/1_44/dnd.gif)  \n**Multiple views in a single panel**  \nYou can now have multiple views within a single panel to make better use of horizontal space. One common request is to see the terminal at the same time as the Problems view. This can now be done by dragging the terminal into the Problems view as shown below.  \n![Terminal and Problems view side by side](images/1_44/multipanel.gif)  \n**Creating new Side Bar groups and moving panels**  \nIt is now possible to move views to new Side Bar groups, creating a new icon entry in the Activity Bar. The built-in panels are no exception and can now be moved into the existing Side Bar entries or their own entries.  \nThe next video shows the user dragging the Terminal into the Activity Bar, which creates a Terminal icon and space for the Terminal in the Side Bar. Next, the user drops Output within the Terminal Side Bar. Finally, Outline is moved from the Explorer into the Activity Bar, creating its own Side Bar area.  \n![Dragging views into the Activity Bar](images/1_44/viewsinactivitybar.gif)  \n**Contributing a View Container to the panel**  \nWe now have everything required to allow an extension to contribute a view directly to the panel, much like you can today with the Activity Bar, which is documented in the [Tree View API guide](https://code.visualstudio.com/api/extension-guides/tree-view#_view-container). Note that this feature is still in preview and the Tree View documentation will not reflect these changes until they are considered stable. However, to try it out, you can update the snippet in the documentation to this:  \n```json\n\"contributes\": {\n\"viewsContainers\": {\n\"panel\": [\n{\n\"id\": \"package-explorer\",\n\"title\": \"Package Explorer\",\n\"icon\": \"media/dep.svg\"\n}\n]\n}\n}\n```  \n**Commands for view movement**  \nFinally, there are new commands to move views with the keyboard and to reset your layout. The command **View: Move Focused View** (`workbench.action.moveFocusedView`) has been updated to support the new features of the iteration. The command **View: Reset Focused View Location** (`workbench.action.resetFocusedViewLocation`) was added to place an individual view back into its default location.  \n**Activity Bar icons for panel and custom views**  \nWith the introduction of the flexible layout, there are now dedicated icons for the default panel views when they move into the Activity Bar. There is also a (default) icon for custom views when combining multiple views.  \n![Panel view icons](images/1_44/panel-view-icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_increased-view-placement-flexibility",
    "id": 1561
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Synced Regions  \nWe have improved the [mirror cursor](https://code.visualstudio.com/updates/v1_41#_html-mirror-cursor) feature introduced last November with a new implementation called Synced Regions. Currently this feature is available for HTML and you can try it out by one of the following ways:  \n* Running the command **On Type Rename Symbol** on an HTML tag (bound to `kb(editor.action.onTypeRename)` by default).\n* Turning on the `editor.renameOnType` setting and move the cursor to an HTML tag.  \n![HTML rename on type](images/1_44/html-rename-on-type.gif)  \nThe red regions are Synced Regions. As their name suggests, any change in one region will be synced to other regions. You can exit this mode by either moving your cursor out of the regions or pressing `ESC`. Additionally, typing or pasting any content leading with a whitespace in any region exits this mode.  \nWe look forward to [providing an API](https://github.com/microsoft/vscode/issues/94316) that could make this rename-on-type experience available to other languages such as JSX, XML, or even local variables in TypeScript.",
    "url": "https://code.visualstudio.com/updates/v1_44#_synced-regions",
    "id": 1562
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.44 include:  \n* Dev Containers: Check out a PR directly into a container.\n* Dev Containers: Kubernetes container attach support.\n* Dev Containers: Experimental WSL 2 Docker engine support.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_44.md).",
    "url": "https://code.visualstudio.com/updates/v1_44#_remote-development",
    "id": 1563
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Extension authoring  \n### Welcome View Content API  \nCertain views now support Welcome content contributed from extensions. Refer to the [original issue](https://github.com/microsoft/vscode/issues/89080) for more information. For details about how to use this API with extension provided views, you can read the [Tree View documentation](https://code.visualstudio.com/api/extension-guides/tree-view#_welcome-content).  \nThis API was added as proposed in the last milestone and we have now finalized it.",
    "url": "https://code.visualstudio.com/updates/v1_44#_welcome-view-content-api",
    "id": 1564
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Semantic tokens provider API  \nThe [semantic tokens provider](https://code.visualstudio.com/api/references/vscode-api#DocumentSemanticTokensProvider) API has now been finalized.",
    "url": "https://code.visualstudio.com/updates/v1_44#_semantic-tokens-provider-api",
    "id": 1565
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Theme support for semantic tokens  \nColor themes can now write rules to color semantic tokens reported by language extensions like TypeScript.  \n```json\n\"semanticHighlighting\": true,\n\"semanticTokenColors\": {\n\"variable.declaration.readonly:java\": { \"foreground\": \"#00ff00\" \"fontStyle\": \"bold\" }\n}\n```  \nThe rule above defines that all declarations of readonly variables in Java should be colored green and bold.  \nThe [Semantic Highlighting Wiki Page](https://github.com/microsoft/vscode/wiki/Semantic-Highlighting-Overview) has more information.",
    "url": "https://code.visualstudio.com/updates/v1_44#_theme-support-for-semantic-tokens",
    "id": 1566
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### TypeScript semantic token improvements  \nMore semantic token types are returned by the Typescript Language Server. Color themes can take advantage of these new token types for [styling](#theme-support-for-semantic-tokens).  \n* All symbols from the JavaScript default library get a `defaultLibrary` modifier.\n* Function parameters that are callbacks are classified as `function`.  \nRead the [TypeScript Semantic Highlighting plugin README](https://github.com/aeschli/typescript-vscode-sh-plugin/blob/main/README.md) for an overview of all semantic token types and modifiers returned by the TypeScript language server.",
    "url": "https://code.visualstudio.com/updates/v1_44#_typescript-semantic-token-improvements",
    "id": 1567
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### File system error code  \nWe have added [FileSystemError#code](https://github.com/microsoft/vscode/blob/b91e67b58ce596a3a57bb4711ed22ae8a0b73ce0/src/vs/vscode.d.ts#L6285), which is a string identifying the error. When a file system error is created through any of its factory functions, then `code` is the name of that function, for example `FileSystemError.FileNotFound(msg).code === 'FileNotFound'`.",
    "url": "https://code.visualstudio.com/updates/v1_44#_file-system-error-code",
    "id": 1568
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Arguments for StatusBarItem.command  \n`StatusBarItem.command` now accepts a full `Command` object instead of just a command ID. This lets extensions pass arguments to the command when the Status bar item is activated.",
    "url": "https://code.visualstudio.com/updates/v1_44#_arguments-for-statusbaritem.command",
    "id": 1569
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Custom text editors  \nWith custom text editors, extensions can now replace VS Code's standard editor with a custom [webview](https://code.visualstudio.com/api/extension-guides/webview)-based view for specific text-based resources. Potential use cases include:  \n* Previewing assets, such as shaders or `.obj` files.\n* Creating WYSIWYG editors for markup languages such as XAML.\n* Providing alternative, interactive views of data files such as JSON or CSV.  \nThe [custom editors documentation](https://code.visualstudio.com/api/extension-guides/custom-editors) covers how to use the new custom text editor API and how to make sure your new editor works well with VS Code. Also be sure to check out the [custom editors extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/custom-editor-sample).  \n![The custom editor example extension](images/1_44/custom-editors.png)  \nNext iteration, we're hoping to finalize the full custom editor proposal that extends custom editors to also support binary files.",
    "url": "https://code.visualstudio.com/updates/v1_44#_custom-text-editors",
    "id": 1570
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### View-level progress indication  \nWe've added a [new option](https://github.com/microsoft/vscode/blob/e8dbc5ea6092ba73ae70069d3e730f2cc56addff/src/vs/vscode.d.ts#L8216) to the `ProgressOptions.location` of the `window.withProgress` API to allow progress to be shown on a specific view. To use, set `ProgressOptions.location = { viewId: <view-id> };` where `<view-id>` specifies the ID of the view you'd like to show progress for. There is short video of this in action in the [view progress section](#view-progress-now-shown-on-the-view) above.",
    "url": "https://code.visualstudio.com/updates/v1_44#_view-level-progress-indication",
    "id": 1571
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Extensions view context menu when-clause context  \nWe've added a new `extension` when-clause context to the Extension view's context menu, which contains the extension's identifier.  \nExample:  \n```json\n\"extension/context\": [\n{\n\"command\": \"gitlens.showSettingsPage\",\n\"group\": \"2_configure\",\n\"when\": \"extension == eamodio.gitlens && extensionStatus == installed\",\n}\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_44#_extensions-view-context-menu-when-clause-context",
    "id": 1572
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### New Codicons  \nWe've added the following icons to the [Codicon](https://code.visualstudio.com/api/references/icons-in-labels) library:  \n* account\n* bell-dot\n* debug-console\n* library\n* output\n* run-all\n* sync-ignored  \n![New codicons](images/1_44/new-codicons.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_new-codicons",
    "id": 1573
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Documentation for writing embedded language server  \nWriting language server for embedded programming languages is more involved than writing a plain language server. Given the popularity of embedded languages today, we added an [Embedded Languages](https://code.visualstudio.com/api/language-extensions/embedded-languages) topic to our Language Extensions section. The documentation contains two samples to illustrate the two approaches to building embedded language servers: Language services and Request forwarding. Start by reviewing the [Embedded Languages](https://code.visualstudio.com/api/language-extensions/embedded-languages) documentation or go directly to the two samples:  \n* [Language Server for Embedded Language with Language Services](https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-embedded-language-service)\n* [Language Server for Embedded Language with Request Forwarding](https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-embedded-request-forwarding)",
    "url": "https://code.visualstudio.com/updates/v1_44#_documentation-for-writing-embedded-language-server",
    "id": 1574
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Debug Adapter Protocol  \n### New progress events  \nWe've finalized support for reporting progress in the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/). Debug adapters can now send progress events (`progressStart`, `progressUpdate`, and `progressEnd`) to the frontend client, in order to display progress for long running debug adapter operations. The `progressStart` event can be marked as cancellable to make the client present a cancellation UI and send an `cancel` request. In order to enable progress events in a supporting debug adapter, the frontend client needs to include the new **client** capability `supportsProgressReporting` in the `initialize` request.  \nMore details can be found in the corresponding [DAP feature request](https://github.com/microsoft/debug-adapter-protocol/issues/92). VS Code supports progress events starting with this milestone.",
    "url": "https://code.visualstudio.com/updates/v1_44#_new-progress-events",
    "id": 1575
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Clipboard context value for the \"evaluate\" request  \nDAP clients (frontends) use the `evaluate` request when copying variable and expression values to the clipboard. To help debug adapters detect this scenario, a new value `clipboard` has been added to the value set for the `context` argument that is passed to the `evaluate` request. To ensure backward compatibility, a client is only allowed to pass the new value if the debug adapter returns a `supportsClipboardContext` capability.",
    "url": "https://code.visualstudio.com/updates/v1_44#_clipboard-context-value-for-the-evaluate-request",
    "id": 1576
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Terminal link handlers  \nThis new API allows extensions to intercept and handle links that are clicked in the terminal.  \n```ts\nwindow.registerTerminalLinkHandler({\nhandleLink((terminal, link) => {\nif (link === 'https://code.visualstudio.com') {\nwindow.showInformationMessage('Handled');\nreturn true;\n}\nreturn false;\n});\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_44#_terminal-link-handlers",
    "id": 1577
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Contribute to terminal environments  \nThis new API allows extensions to change environment variables when the terminal is starting up.  \n```ts\nconst collection = window.getEnvironmentVariableCollection(true);\nconst separator = process.platform === 'win32' ? ';' : ':';\ncollection.prepend('PATH', `/foo${separator}`);\ncollection.replace('JAVA_HOME', '/bar');\n```  \nThese collections are extension and workspace-specific and VS Code handles how conflicts between multiple extensions are dealt with. They can optionally be persisted across window reloads and care was taken to ensure this is done in such a way that terminals created immediately after the window is loaded do not block on the extension host launching but instead use the last known version. These persisted collections can get removed by disposing of the collection or creating a new non-persistent collection, or when the extension is uninstalled.  \nThe plan is to surface these environment modifications to the user through some indicator that allows updating \"stale\" terminal environments but this is still a work in progress. You can follow the discussion in [issue #46696](https://github.com/microsoft/vscode/issues/46696).",
    "url": "https://code.visualstudio.com/updates/v1_44#_contribute-to-terminal-environments",
    "id": 1578
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Browser support  \n### Remote indicator  \nWhen using VS Code in a browser, there is now a remote indicator. This lets you know the remote environment you are connected to and allows extensions to add additional commands associated with the remote. With this change, the **Open in Desktop** link was removed from the Status bar and will move into the remote picker.  \n**Note:** VS Code currently does not support connecting to a different remote - such as SSH, a container, or WSL - from the browser.  \n![Web remote indicator](images/1_44/web-remote-indicator.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_remote-indicator",
    "id": 1579
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Navigational links  \nA new menu location lets extensions running in the browser contribute links to the hamburger menu in the upper left.  \n![Web navigational links](images/1_44/web-navigational-links.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_navigational-links",
    "id": 1580
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Engineering  \n### VS Code compiles to ES6  \nVS Code has adopted ES6 - all the way. Thanks to TypeScript, we have been using ES6 syntax for a long time, but we now assume that the target runtime also supports ES6. This allows us to use ES6 \"globals\" like `Strings#endsWith` and allows the use of new language features, like generator-functions and symbols.",
    "url": "https://code.visualstudio.com/updates/v1_44#_vs-code-compiles-to-es6",
    "id": 1581
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Automating issue triage with GitHub Actions  \nThis iteration we migrated our existing triage automations from using GitHub Apps over to [GitHub Actions](https://github.com/features/actions). With this came some nice benefits, such as getting logs in the [vscode repo](https://github.com/microsoft/vscode/actions), and an increase in development speed. We additionally added several new automations, such as an Action that notifies issue authors when fixes get pulled into [VS Code Insiders](https://code.visualstudio.com/insiders/), allowing authors to quickly verify whether fixes are effective.  \nThe full set of Actions we use is released on [GitHub](https://github.com/microsoft/vscode-github-triage-actions) under an MIT license.",
    "url": "https://code.visualstudio.com/updates/v1_44#_automating-issue-triage-with-github-actions",
    "id": 1582
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n## Documentation and extensions  \n### Python  \nThere are two new Python tutorials:  \n* [Python in a container](https://code.visualstudio.com/docs/containers/quickstart-python) - Learn how to build a Python application in a Docker container.\n* [Python for Data Science](https://code.visualstudio.com/docs/datascience/data-science-tutorial) - Use Python data science libraries to create a machine learning model.",
    "url": "https://code.visualstudio.com/updates/v1_44#_python",
    "id": 1583
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### C++  \nThe [C++ extension tutorials](https://code.visualstudio.com/docs/cpp/config-mingw) have been rewritten and there is a new tutorial specific to [Using C++ on Linux](https://code.visualstudio.com/docs/cpp/config-linux).",
    "url": "https://code.visualstudio.com/updates/v1_44#_c++",
    "id": 1584
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Docker extension  \nThe 1.0 version of the Microsoft [Docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) extension is now available. The extension can add Docker files to your project, build and debug Docker images, and includes an Explorer to easily start, stop, inspect, and remove containers and images.  \n![Docker extension](images/1_44/docker-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_docker-extension",
    "id": 1585
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2020 Release (1.44)  \n### Azure extensions  \nThere are two new extensions for working with Azure assets directly from within VS Code.  \n* [Azure Virtual Machines](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurevirtualmachines) - Create Ubuntu Virtual Machines with pre-configured SSH access so you can connect to them using the [Remote-SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension.  \n* [Azure Resource Groups](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureresourcegroups) - View all of your Azure Resources and quickly navigate to them in the Azure View.  \n![Azure Virtual Machines extension](images/1_44/azure-virtual-machines.png)",
    "url": "https://code.visualstudio.com/updates/v1_44#_azure-extensions",
    "id": 1586
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Workbench  \n### Switch tabs using mouse wheel  \nWhen you use the mouse wheel to scroll over editor tabs, you currently cannot switch tabs, only reveal tabs that are out of view. Now with a new setting `workbench.editor.scrollToSwitchTabs`, you can change the behavior to switch the active editor tab.  \nBelow when the cursor focus in the editor tab region, if the user scrolls their mouse wheel, the active editor changes.  \n![Changing editor tabs using the mouse wheel](images/1_45/scroll-tabs.gif)  \n**Note:** You can also press and hold the `Shift` key while scrolling to get the opposite behavior (for example, you can switch editor tabs even when the `scrollToSwitchTabs` setting is off).",
    "url": "https://code.visualstudio.com/updates/v1_45#_switch-tabs-using-mouse-wheel",
    "id": 1588
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Custom window title separator  \nA new setting `window.titleSeparator` lets you change the separator character that is used in the window title. By default, a dash `'-'` is used.  \n![Window title separator using dash](images/1_45/window-title-separator.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_custom-window-title-separator",
    "id": 1589
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Updated Side Bar section headers for default themes  \nWe've updated the styling of the Side Bar section headers for our default Dark and Light themes. We now use a transparent background and show a border for each header.  \nBelow the **OPEN EDITORS** section header does not have a background color and the **VSCODE** and **OUTLINE** headers have an upper border.  \n![Side Bar section headers](images/1_45/sidebar-section-header.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_updated-side-bar-section-headers-for-default-themes",
    "id": 1590
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Editor  \n### Faster syntax highlighting  \nSyntax Highlighting in VS Code runs by [interpreting Text Mate Grammars](https://code.visualstudio.com/blogs/2017/02/08/syntax-highlighting-optimizations). These grammars are authored with regular expressions and can be evaluated using the [oniguruma regular expression library](https://github.com/kkos/oniguruma). Up until now, we have been using two distinct libraries for evaluating such regular expressions, one for VS Code desktop (a native node module), and another one for VS Code in the browser (a Web Assembly binary).  \nWe have now written a dedicated Web Assembly binding that is optimized for usage by our TextMate interpreter. By avoiding memory allocations in inner loops and adopting new APIs added just a few months ago to oniguruma, we have been able to create a variant that is faster than both of the previous approaches and delivers up to 3 times faster performance for highlighting regular programming files. You can review [pull request #95958](https://github.com/microsoft/vscode/pull/95958) more details and measurements.",
    "url": "https://code.visualstudio.com/updates/v1_45#_faster-syntax-highlighting",
    "id": 1591
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Semantic token styling  \nYou can now customize semantic theming rules in your user settings. Semantic coloring is available for TypeScript and JavaScript, with support for Java and C++ under development. It is enabled by default for built-in themes and is being adopted by theme extensions.  \nThe `editor.semanticTokenColorCustomizations` setting allows users to override the default theme rules and to customize the theming.  \n![Semantic token color customization](images/1_45/customized-semantic-highlighting.png)  \nThe setting above changes the **Default Dark+** theme. It gives a new style to parameters (italic and a new color) and underlines all symbols from a default library (for example, `Promise`, `Map`, and their properties).  \nThe example below adds semantic styling to all themes:  \n```ts\n\"editor.semanticTokenColorCustomizations\": {\n\"enabled\": true, // enable semantic highlighting for all themes\n\"rules\": {\n// different color for all constants\n\"property.readonly\": \"#35166d\",\n\n// make all symbol declarations bold\n\"*.declaration\": { \"bold\": true }\n}\n}\n```  \nTheming for semantic tokens is explained in more details in the [Semantic Highlighting Guide](https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#theming).",
    "url": "https://code.visualstudio.com/updates/v1_45#_semantic-token-styling",
    "id": 1592
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### New color for constants in the Default Dark+ theme  \nThe Default Dark+ and the Default Light+ themes now color constants in a different shade than writable variables.  \nBelow notice that the `htmlMode` and `range` constants are a different color than the `result` variable.  \nDefault Dark+ theme:  \n![Constant color in the Dark+ theme](images/1_45/new-constant-color-dark-theme.png)  \nDefault Light+ theme:  \n![Constant color in the Light+ theme](images/1_45/new-constant-color-light-theme.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_new-color-for-constants-in-the-default-dark+-theme",
    "id": 1593
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Disable persistent Undo  \nLast milestone, changed the Undo/Redo stack to be persisted when you close a file and reopen it. Not everyone wanted this new feature, so there is now a setting, `files.restoreUndoStack`, to disable persistent Undo.",
    "url": "https://code.visualstudio.com/updates/v1_45#_disable-persistent-undo",
    "id": 1594
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Integrated Terminal  \n### Removal of several prompt-related commands  \nThe following commands have been removed:  \n* `workbench.action.terminal.deleteWordLeft`\n* `workbench.action.terminal.deleteWordRight`\n* `workbench.action.terminal.deleteToLineStart`\n* `workbench.action.terminal.moveToLineStart`\n* `workbench.action.terminal.moveToLineEnd`  \nThese commands worked by sending a particular character sequence to the terminal, which was a best effort guess based on what command keybindings terminals use. The problem with these commands was that they were a closed box, you needed to literally search through the vscode codebase to figure out how they worked. They have been replaced with custom keybindings for the `workbench.action.terminal.sendSequence` command, which does the same thing in a generic way.  \nThese are advanced keyboard shortcuts and cannot be viewed in their entirety via the Keyboard Shortcuts UI as they contain arguments but you can view their JSON definitions by running the **Preferences: Open Default Keyboard Shortcuts (JSON)** command:  \n![Terminal sendSequence keybindings JSON](images/1_45/terminal-send-sequence.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_removal-of-several-prompt-related-commands",
    "id": 1595
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Support for pasting of multi-line text in PowerShell  \nMulti-line pasting never worked in PowerShell as VS Code always sent over the text in exactly the same way as typing it out. As explained above, several keybindings have been swapped to use the `workbench.action.terminal.sendSequence` command and you might have noticed a new keybinding was added for Windows only:  \n```json\n{ \"key\": \"ctrl+v\",                \"command\": \"workbench.action.terminal.sendSequence\",\n\"when\": \"terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'\",\n\"args\": {\"text\":\"\\u0016\"} },\n```  \nThis new keybinding will send the text representing `Ctrl+V` directly to PowerShell, which gets picked up by PSReadLine and handled properly.  \nBefore:  \n![Terminal paste error before](images/1_45/terminal-paste-before.png)  \nAfter:  \n![Terminal paste correctly after](images/1_45/terminal-paste-after.png)  \n*Theme: [Sapphire (Dim)](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire)*",
    "url": "https://code.visualstudio.com/updates/v1_45#_support-for-pasting-of-multi-line-text-in-powershell",
    "id": 1596
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Control double-click word selection  \nThe new `terminal.integrated.wordSeparators` setting lets you customize the separator characters used to delimit a word when you double-click in the terminal.  \nThe default separators are:  \n```json\n\"terminal.integrated.wordSeparators\": \" ()[]{}',\\\"`\u2500\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_45#_control-double-click-word-selection",
    "id": 1597
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Debugging  \n### Automatic debug configurations  \nSetting up debugging in VS Code can be a daunting task because a user has to create a new debug configuration (or at least modify a template to their needs). In our continuing effort to simplify the debugging experience, we have added a new feature that gives debug extension authors a means to analyze the current project and offer quality debug configurations automatically that do not require additional user configuration.  \nIn a similar way to how build tasks are provided, the automatic debug configurations are grouped under the appropriate debugger (folder icon) in the Debug view's configuration dropdown and the **Select and Start Debugging** Quick Pick. Once the debugger is chosen, VS Code presents all the automatic configurations available. Selecting a configuration will start a new debugging session.  \nThe following screen cast shows the feature for the new JavaScript debugger (in preview) and our educational Mock Debug:  \n![Automatic debug configurations](images/1_45/dynamic.gif)  \nThe debug Quick Pick can be opened by typing 'debug ' (with a space) in **Quick open** (`kb(workbench.action.quickOpen)`) or by triggering the **Debug: Select and Start Debugging** command.  \nIn the next milestone, we'll add UI so that an automatic debug configuration can be easily added to the `launch.json` for further configuration.",
    "url": "https://code.visualstudio.com/updates/v1_45#_automatic-debug-configurations",
    "id": 1598
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Tasks  \n### Disable faster Quick Pick  \nWith version 1.44, we improved the task picker that shows when you run the **Tasks: Run Task** command by changing the layout and making it faster. However, the faster Quick Pick does make the task picker two levels deep depending on which task you want to run. If you want the previous UI, you can now disable the faster picker with the `task.quickOpen.showAll` setting.",
    "url": "https://code.visualstudio.com/updates/v1_45#_disable-faster-quick-pick",
    "id": 1599
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Save on run  \nPreviously, all dirty editors were always saved when a task is run. If you don't want to have your editors saved when you run a task, you can now configure that behavior with `task.saveBeforeRun`.",
    "url": "https://code.visualstudio.com/updates/v1_45#_save-on-run",
    "id": 1600
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Languages  \n### TypeScript status bar entry enhancements  \nWhen you are focused on a TypeScript file, VS Code shows the current TypeScript version in the status bar:  \n![TypeScript version status bar entry](images/1_45/ts-version-entry.png)  \nClicking on the version now brings up commands appropriate for the current TypeScript project:  \n![TypeScript project commands](images/1_45/ts-version-ui.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_typescript-status-bar-entry-enhancements",
    "id": 1601
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Prompt users to switch to the workspace version of TypeScript  \nThe new `typescript.enablePromptUseWorkspaceTsdk` setting brings up a prompt asking users if they want to switch to the workspace version of TypeScript:  \n![Prompt shown when opening a workspace with local TypeScript version](images/1_45/ts-prompt.png)  \nTo enable the prompt, include `\"typescript.enablePromptUseWorkspaceTsdk\": true` and `typescript.tsdk` as workspace settings for your project.",
    "url": "https://code.visualstudio.com/updates/v1_45#_prompt-users-to-switch-to-the-workspace-version-of-typescript",
    "id": 1602
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Markdown link to folders  \nEditor links in Markdown files and links in the Markdown preview can now point to folders. Clicking on one of these links will reveal the target folder in VS Code's File Explorer.",
    "url": "https://code.visualstudio.com/updates/v1_45#_markdown-link-to-folders",
    "id": 1603
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Source Control  \n### GitHub authentication for GitHub repositories  \nVS Code now has automatic GitHub authentication against GitHub repositories. You can now clone, pull, push to and from public and private repositories without configuring any credential manager in your system. Even Git commands invoked in the Integrated Terminal, for example `git push`, are now automatically authenticated against your GitHub account.  \nYou can disable GitHub authentication with the `git.githubAuthentication` setting. You can also disable the terminal authentication integration with the `git.terminalAuthentication` setting.",
    "url": "https://code.visualstudio.com/updates/v1_45#_github-authentication-for-github-repositories",
    "id": 1604
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Hide Git commit input box  \nA new setting `git.showCommitInput` allows you to hide the commit input box for Git repositories.",
    "url": "https://code.visualstudio.com/updates/v1_45#_hide-git-commit-input-box",
    "id": 1605
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Inline diff is now editable  \nYou can now edit inside the quick diff editor, when previewing changes in a file.  \n![Editable inline diff](images/1_45/quickdiff.gif)",
    "url": "https://code.visualstudio.com/updates/v1_45#_inline-diff-is-now-editable",
    "id": 1606
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### New JavaScript debugger  \nThis month we continued making progress on our new JavaScript debugger. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting.  \nHere are some new features added this month:  \n**Profiling Support**  \nYou can capture CPU profiles from your Node.js or browser applications by clicking the new **Profile** button in the Call Stack view, or using the **Debug: Take Performance Profile** command. Once you do, you can choose how long the profile will run: until you stop it, for a length of time, or until you hit another breakpoint.  \nAfter the profile ends, it's saved in your workspace folder and opened in VS Code. If you're running our stable build, you'll want to install our [visualizer extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-js-profile-table) to view it. On Insiders, the extension is already built-in. When you open the profile, CodeLens are added to your files that contain performance information at the function level and for certain 'hot' lines. Unlike profiles captured in many other tools, the recorded profile is sourcemap-aware.  \n![Animation showing the process of taking a profile](images/1_45/js-debug-profiling.gif)  \n*Theme: Earthsong, Font: Fira Code*  \n**Auto Attach integration**  \nWhen `debug.javascript.usePreview` is turned on, VS Code's [Auto Attach](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-feature) will use a new method provided by `js-debug` that allows all terminals to work similarly to the Debug Terminal.  \nImprovements to Auto Attach over the existing debugger:  \n* The debugger is attached immediately allowing you to hit breakpoints early on in the program.\n* Child processes are debugged automatically.\n* There's no process-polling overhead during Auto Attach.  \n**Copy Complex Values from Variables View**  \nPreviously, trying to copy complex values, like objects, from the VS Code **Variables** view would often result in truncated or incomplete data. Changes in VS Code and js-debug allow us to copy the complete value.  \n![Animation showing copying and pasting a very large array](images/1_45/js-debug-copy.gif)",
    "url": "https://code.visualstudio.com/updates/v1_45#_new-javascript-debugger",
    "id": 1607
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Product icon themes  \nVisual Studio Code contains a set of built-in icons that are used in views and the editor, but can also be used in hovers, the status bar, and by extensions. These icons are **product icons** as opposed to **file icons**, which are displayed next to file names throughout the UI.  \nThe product icons that ship with VS Code are contained in the [Codicon icon font](https://github.com/microsoft/vscode-codicons) and are used for the **default** product icon theme. Extensions can now provide new product icon themes to redefine these icons and give VS Code a new appearance.  \n![Custom product icon themes](images/1_45/product-icon-themes.png)  \nThe [Product Icon Themes](https://code.visualstudio.com/api/extension-guides/product-icon-theme) documentation has more details and there is a [Product Icon Theme Sample](https://github.com/microsoft/vscode-extension-samples/tree/main/product-icon-theme-sample).",
    "url": "https://code.visualstudio.com/updates/v1_45#_product-icon-themes",
    "id": 1608
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### TypeScript/JavaScript symbol search across all open projects  \nWhen using TypeScript 3.9+, VS Code's [workspace symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) now includes results from all opened JavaScript and TypeScript projects by default. We previously only searched the project of the currently active file.  \nThis is controlled by the new `\"typescript.workspaceSymbols.scope\"` setting. To revert to the old behavior, set: `\"typescript.workspaceSymbols.scope\": \"currentProject\"`.",
    "url": "https://code.visualstudio.com/updates/v1_45#_typescript/javascript-symbol-search-across-all-open-projects",
    "id": 1609
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Improved links in the terminal  \nLinks in the terminal have undergone an overhaul, changing out the backing system for a much more robust implementation that enables:  \n* The use of the editor's link detection for better web and `file://` link detection.\n* Folder link support, either opening the folder in the Explorer or opening a new VS Code window.\n* Different link actions for different link types, falling back to \"word\" links that search the workspace (based on the `terminal.integrated.wordSeparators` setting).\n* Similar link highlighting and hover experience to the editor.  \n![Terminal with various links](images/1_45/terminal-links.gif)  \n*Theme: [Topaz (Dim)](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-topaz)*  \nA list of known issues is available [in this query](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aintegrated-terminal-links).",
    "url": "https://code.visualstudio.com/updates/v1_45#_improved-links-in-the-terminal",
    "id": 1610
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Dynamic view icons and titles  \nThis milestone, we continued on the work to make the layout more flexible. Moving views around the workbench allows you to create new icons in the Activity Bar or new tabs in the Panel. To make it easier to understand what is held in one of these newly created view containers, we have updated the logic to be easier to understand.  \nNow, when you have a custom container, we will inherit the title and icon from the first visible view. This will allow you to change it by rearranging the views. For containers that are built-in or from extensions, we will try to preserve this icon as long as possible. Below when a new view is placed at the top of the view container, its icon and title are updated.  \n![Dynamic icons and titles](images/1_45/dynamic-views.gif)  \nLastly, you can now move your custom containers around with all of the containing views in one movement. The short video below shows dragging a Terminal and Output view combination into the Activity Bar.  \n![Moving whole View Containers](images/1_45/move-composite.gif)",
    "url": "https://code.visualstudio.com/updates/v1_45#_dynamic-view-icons-and-titles",
    "id": 1611
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.45 include:  \n* Dev Containers: Provide container configuration recommendations.\n* Dev Containers: WSL 2 Docker and Podman engines support.\n* Dev Containers: New `devcontainer.json` variables for local and container folders.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_45.md).",
    "url": "https://code.visualstudio.com/updates/v1_45#_remote-development",
    "id": 1612
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### GitHub Pull Requests and Issues  \nFormerly named \"GitHub Pull Requests\", the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension has been letting you manage and review pull requests from within VS Code for [over a year now](https://code.visualstudio.com/blogs/2018/09/10/introducing-github-pullrequests). Now, the extension as been expanded to include support for GitHub Issues.  \nIssue support includes:  \n* Hovers for #-referenced issues and @-mentioned users.\n* Inline completion suggestions for issues and users.\n* An **Issues** view where you can use custom queries.\n* An action to start working on an issue, which creates a branch and populates the commit message.  \nThere is also new repository support:  \n* Clone a repository using a [remote source provider](#git).\n* Publish a repository to GitHub.  \nThe short video below illustrates publishing to a new private repository on GitHub, with an option to browse the repo on GitHub once the files have been successfully uploaded.  \n![Publish repository](images/1_45/publish-repository.gif)  \nFor more information, you can read the recent [GitHub Issues Integration](https://code.visualstudio.com/blogs/2020/05/06/github-issues-integration) blog post and [Working with GitHub](https://code.visualstudio.com/docs/sourcecontrol/github) documentation.",
    "url": "https://code.visualstudio.com/updates/v1_45#_github-pull-requests-and-issues",
    "id": 1613
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### GitHub Issue Notebook  \nThe VS Code team is working on native support for Notebooks. The most popular Notebooks in use these days are Jupyter Notebooks and while investigating them, we began looking at ways to build a Notebook solution that is unbiased and supports different styles of Notebooks.  \nOne of those Notebooks is the [GitHub Issue Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks) extension, which lets you manage issue and pull request searches and render results inline:  \n![GitHub Issue Notebook](images/1_45/gh-issue-notebook.gif)  \nThis extension is still under development and only works with VS Code Insiders but with it you can experience Notebooks first hand and you can provide us with feedback.",
    "url": "https://code.visualstudio.com/updates/v1_45#_github-issue-notebook",
    "id": 1614
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Extension authoring  \n### New theme colors for editor tabs  \nNew colors were added to further theme the workbench editor tabs:  \n* `tab.unfocusedInactiveBackground`: Inactive tab background color in an unfocused group\n* `tab.hoverForeground`: Tab foreground color when hovering\n* `tab.unfocusedHoverForeground`: Tab foreground color in an unfocused group when hovering",
    "url": "https://code.visualstudio.com/updates/v1_45#_new-theme-colors-for-editor-tabs",
    "id": 1615
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### New theme color for editor title border  \nThe existing color `editorGroupHeader.tabsBorder` was changed to render a border below editor tabs but above breadcrumbs. A new color `editorGroupHeader.border` lets you render a border below the editor group header (for example, below breadcrumbs if enabled) to restore the previous behavior of `editorGroupHeader.tabsBorder`.",
    "url": "https://code.visualstudio.com/updates/v1_45#_new-theme-color-for-editor-title-border",
    "id": 1616
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Deprecating and archiving of the vscode NPM module  \nIn June 2019, we [split the vscode module](https://code.visualstudio.com/updates/v1_36#_splitting-vscode-package-into-typesvscode-and-vscodetest)  into `@types/vscode` and `vscode-test` in light of the `event-stream` incident. Today, a [security alert for minimist](https://snyk.io/blog/prototype-pollution-minimist/) has caused security alerts for extensions that still depend on `vscode`, which depends on `mocha@5.2.0` and therefore `minimist@0.0.8`. Unfortunately, `mocha@5.2.0` no longer receive updates and upgrading to a new `mocha` version would break existing functionalities.  \nWe published a new version of `vscode` that removes some unnecessary dependencies. We also archived the [repository](https://github.com/microsoft/vscode-extension-vscode) and deprecated the [vscode module](https://www.npmjs.com/package/vscode) on NPM. Please [migrate](https://code.visualstudio.com/api/working-with-extensions/testing-extension#migrating-from-vscode) to `@types/vscode` and `vscode-test`.",
    "url": "https://code.visualstudio.com/updates/v1_45#_deprecating-and-archiving-of-the-vscode-npm-module",
    "id": 1617
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### New Completion Item Kinds  \nThere are two new entries to `vscode.CompletionItemKind` that represent issues and users. These can be used for instance to suggest usernames when adding TODO tags.",
    "url": "https://code.visualstudio.com/updates/v1_45#_new-completion-item-kinds",
    "id": 1618
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Working with URIs  \nWe have added a `vscode.Uri.joinPath` utility. It is a factory function that creates new URIs by joining path segments with an existing URI. Think of this as Node.js' `path.join` utility but for URIs.  \nFor extensions, VS Code exposes the URI where extensions are installed via `Extension.extensionUri` and via `ExtensionContext.extensionUri`. With the join utility, you can now create URIs for resources of your extension.  \nFor example:  \n```ts\n\nconst fileUri = vscode.Uri.joinPath(context.extensionUri, './file.png');\nconst bytes = await vscode.workspace.fs.readFile(fileUri);\n```",
    "url": "https://code.visualstudio.com/updates/v1_45#_working-with-uris",
    "id": 1619
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### debug/callstack/context menu inline group  \nVS Code now supports contributions to the `debug/callstack/context` menu `inline` group. Commands contributed to this group will be rendered inline in the Call Stack when a user hovers over the Debug Session element.  \n![Call Stack inline contribution](images/1_45/callstack-inline.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_debug/callstack/context-menu-inline-group",
    "id": 1620
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### New Debug theme colors  \nThere are new colors for styling the Debug view:  \n* `debugView.exceptionLabelForeground`: Foreground color for a label shown in the CALL STACK view when the debugger breaks on an exception\n* `debugView.exceptionLabelBackground`: Background color for a label shown in the CALL STACK view when the debugger breaks on an exception\n* `debugView.stateLabelForeground`: Foreground color for a label in the CALL STACK view showing the current session's or thread's state\n* `debugView.stateLabelBackground`: Background color for a label in the CALL STACK view showing the current session's or thread's state\n* `debugView.valueChangedHighlight`: Color used to highlight value changes in the Debug views (for example, the Variables view)\n* `debugTokenExpression.name`: Foreground color for the token names shown in Debug views (for example, the Variables or Watch view)\n* `debugTokenExpression.value`: Foreground color for the token values shown in Debug views\n* `debugTokenExpression.string`: Foreground color for strings in Debug views\n* `debugTokenExpression.boolean`: Foreground color for booleans in Debug views\n* `debugTokenExpression.number`: Foreground color for numbers in Debug views\n* `debugTokenExpression.error`: Foreground color for expression errors in Debug views",
    "url": "https://code.visualstudio.com/updates/v1_45#_new-debug-theme-colors",
    "id": 1621
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Source control management  \n**New preserveFocus argument to open resource commands**  \nWhen invoking the `SourceControlResourceState.command` command, an additional `preserveFocus: boolean` argument will be passed, which lets extension authors to provide a better user experience.  \n**Input text mimetype**  \nThe Source Control input text now has a dedicated mimetype: `text/x-scm-input`.  \n**Control input box visibility**  \nExtensions can now control the visibility of the Source Control input box for each repository using the `SourceControlInputBox.visible` property.",
    "url": "https://code.visualstudio.com/updates/v1_45#_source-control-management",
    "id": 1622
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Git  \n**Remote source providers**  \nThe Git extension API now allows other extensions to [provide remote sources](https://github.com/microsoft/vscode/blob/68213a7df9ee450fecec51f4f2a6dc8a44592f53/extensions/git/src/api/git.d.ts#L230) in order to participate in the **Git: Clone** command.  \nHere's an example by the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension:  \n![Clone from GitHub](images/1_45/clone.gif)  \n**Credential providers**  \nThe Git extension API was expanded so that extensions can [provide authentication credentials](https://github.com/microsoft/vscode/blob/68213a7df9ee450fecec51f4f2a6dc8a44592f53/extensions/git/src/api/git.d.ts#L231) in order to authenticate Git commands invoked against HTTPS Git repositories within the workbench and Integrated Terminal.",
    "url": "https://code.visualstudio.com/updates/v1_45#_git",
    "id": 1623
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### SignatureInformation.activeParameter  \nThe new `activeParameter` property on `SignatureInformation` lets you specify the active parameter for every signature individually. When provided, this overrides the top level `SignatureHelp.activeParameter` property.",
    "url": "https://code.visualstudio.com/updates/v1_45#_signatureinformation.activeparameter",
    "id": 1624
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Strict null fix for EventEmitter  \nIn VS Code 1.44 and below, the argument to `EventEmitter.fire` is optional:  \n```ts\n// Valid in VS Code 1.44\nconst emitter = new EventEmitter<number>();\n\nemitter.event((x: number) => console.log(x));\n\n// Calling fire with no argument was valid but resulted in the `x` above being `undefined`\nemitter.fire();\n```  \nThis violated [strict null checking](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks) but did not cause compile errors.  \nIn VS Code 1.45, the `fire` now requires an argument. If you still want to be able to call `.fire()` with no arguments in your source code, use `new EventEmitter<void>`.",
    "url": "https://code.visualstudio.com/updates/v1_45#_strict-null-fix-for-eventemitter",
    "id": 1625
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Contribute to terminal environments  \nThis new proposed API was introduced last month so that extension authors can contribute to terminal environments. This month has mainly been applying some UI on top of the feature and polishing it up. There is now a warning icon when a terminal has a \"stale\" environment, which shows a rich hover explaining what's going to change and includes a convenient **Relaunch terminal** action. There's also an information icon available when changes are active but this is disabled by default.  \n![Terminal stale environment warning](images/1_45/terminal-env-stale.png)",
    "url": "https://code.visualstudio.com/updates/v1_45#_contribute-to-terminal-environments",
    "id": 1626
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Providing debug configurations dynamically  \nWe have updated the debugging extension API to give debug extension authors a way to add debug configurations dynamically, based on information found in the workspace or project. These debug configurations appear in the same UI locations where static debug configurations from the `launch.json` are shown.  \nIn this release, dynamic debug configurations are shown in the Debug view's configuration dropdown and the **Select and Start Debugging** Quick Pick. In a future release, we are considering showing them in the \"Welcome\" view as well.  \nThe new API is based on the `provideDebugConfigurations` method of the existing `DebugConfigurationProvider`. Until this release, the `provideDebugConfigurations` was called by VS Code to provide the initial \"static\" debug configurations to be copied into a newly created `launch.json`. With the new API, a `DebugConfigurationProvider` can now be registered via `vscode.debug.registerDebugConfigurationProvider` for the \"dynamic\" case by passing the value `DebugConfigurationProviderTriggerKind.Dynamic` to the new optional `triggerKind` argument. With this new registration, VS Code will call the `provideDebugConfigurations` method whenever the list of all debug configurations is about to be presented in the UI.  \nIn order to activate extensions that make use of this new API on time, a new activation event `onDebugDynamicConfigurations:<debug type>` has been introduced. The `<debug type>` is mandatory and denotes for which debugger the dynamic debug configurations are specified.  \nA [usage example](https://github.com/microsoft/vscode-mock-debug/blob/6be4f5b4b246dafe25f1e1d8ef420f7dccd8f627/src/extension.ts#L31-L55) can be found in Mock Debug.",
    "url": "https://code.visualstudio.com/updates/v1_45#_providing-debug-configurations-dynamically",
    "id": 1627
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Binary Custom Editor API  \nWe spent this iteration reworking the proposed API for binary custom editors to prepare it for stabilization. As a reminder, custom editors let extensions provide their own editor user interface in place of VS Code's normal text editor. We've already stabilized support for [custom editors for text based files](https://code.visualstudio.com/api/extension-guides/custom-editors#custom-text-editor). The proposed API extends custom editors to binary file formats such as images or hex dumps.  \n![A custom editor for binary files](images/1_45/custom-editor.png)  \nWe want your feedback on this API so that we can hopefully finalize it next iteration. Check out the [custom editor extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/custom-editor-sample) to review an example implementation of a custom editor for binary files. The [Custom Editor API](https://code.visualstudio.com/api/extension-guides/custom-editors) documentation now also covers custom editors for binary files.  \nPlease [let us know](https://github.com/microsoft/vscode/issues/77131) if this API works for you or if you run into any problems implementing your custom editor.",
    "url": "https://code.visualstudio.com/updates/v1_45#_binary-custom-editor-api",
    "id": 1628
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## Engineering  \n### Native iterators  \nWe're now using native ES6 iterators to speed up performance. You can find more details in [issue #94540](https://github.com/microsoft/vscode/pull/94540).",
    "url": "https://code.visualstudio.com/updates/v1_45#_native-iterators",
    "id": 1629
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Compilation daemon  \nThanks to the [deemon](https://github.com/joaomoreno/deemon) utility, we now run our selfhost compilation task as a background process: it stays running even if VS Code is restarted.",
    "url": "https://code.visualstudio.com/updates/v1_45#_compilation-daemon",
    "id": 1630
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Automated issue classification  \nContinuing with our work in moving our issue triaging flow over to GitHub Actions, we have created Actions for automatic issue classification. These Actions work by automatically downloading all of our issues and generating Machine Learning models to classify issues into feature-areas on a scheduled basis. The full implementation of all our Actions is in our [GitHub Triage Actions](https://github.com/microsoft/vscode-github-triage-actions/) repository.",
    "url": "https://code.visualstudio.com/updates/v1_45#_automated-issue-classification",
    "id": 1631
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n## New documentation  \n### Docker Compose  \nThere is a new [Docker Compose](https://code.visualstudio.com/docs/containers/docker-compose) topic explaining how the Microsoft [Docker extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) can help you add Docker Compose files to your projects to work easily with multiple Docker containers.",
    "url": "https://code.visualstudio.com/updates/v1_45#_docker-compose",
    "id": 1632
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### Java topics  \nThe Java topics have been updated and include new topics on [Linting](https://code.visualstudio.com/docs/java/java-linting) and [Refactoring](https://code.visualstudio.com/docs/java/java-refactoring) Java source code using the [Java extensions](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).",
    "url": "https://code.visualstudio.com/updates/v1_45#_java-topics",
    "id": 1633
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2020 Release (1.45)  \n### GitHub  \nWith the expanded GitHub integration, there is a new [Working with GitHub](https://code.visualstudio.com/docs/sourcecontrol/github) topic that shows how you can use GitHub from within VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_45#_github",
    "id": 1634
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Workbench  \n### Flexible layout  \nFor several iterations, we have announced progress on making our layout more flexible. With this release, that set of features are now ready for general use. Below is an overview of these features.  \n**Moving views between Side Bar and Panel**  \nPerhaps you would prefer a view from the Side Bar to be located in the Panel or vice versa. To do this, you can now drag a view by its header or an entire group by its icon or title from its current placement and move it to the desired location. From the keyboard, the commands **View: Move View** (`workbench.action.moveView`) and **View: Move Focused View** (`workbench.action.moveFocusedView`) can be used.  \nBelow is a demonstration of dragging Search to the Panel and Problems into the Side Bar.  \n![Moving Views Between Side Bar and Panel](images/1_46/move-views-panel-sidebar.gif)  \n*Dragging Search to the Panel and Problems into the Activity Bar*  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \nEarlier there was a setting for moving the Search view from the Side Bar to the Panel and now that setting is obsolete since drag and drop can be used instead.  \n**Grouping views**  \nYou might also want to group some views together that come from different extensions or you feel the default groups of built-in views aren't quite right for you. You can both move views into existing groups or create new groups for a select set of views. This works across the Side Bar and Panel just as before. Below are a couple of examples of this.  \n![Moving Timeline from Explorer to Source Control](images/1_46/timeline-to-scm.gif)  \n*Dragging the Timeline view from Explorer to Source Control*  \n![Side By Side Debug Console and Watch View](images/1_46/watch-with-debug-console.gif)  \n*Dragging the Watch view from the Run Side Bar to be next to the Debug Console in Panel*  \n![Custom History Group](images/1_46/custom-view-group.gif)  \n*Creating a custom history group in the Side Bar and Panel with Timeline and GitLens*  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Resetting view Locations**  \nViews and groups of views can be reset to their default locations via their context menus. When a view has been moved from its default location, there will be an entry **Reset Location** to move it back to its home. There are also commands **View: Reset Focused View Location** (`workbench.action.resetFocusedViewLocation`) and **View: Reset View Locations** (`workbench.action.resetViewLocations`) for resetting all views and groups back to their default locations.  \n**For extension authors contributing views or view containers**  \nWhen views are moved around the workbench, they sometimes need to be presented differently, either with an icon or extra context if they aren't in their default location. When contributing a view, authors may now provide an `icon` property and a `contextualTitle`. If not provided, these will default to the icon and title of the view container to which they are contributed.  \nLastly, extension authors can now start contributing view containers directly to the `panel` as opposed to `activitybar` as outlined in the [Tree view extension guide](https://code.visualstudio.com/api/extension-guides/tree-view#view-container).",
    "url": "https://code.visualstudio.com/updates/v1_46#_flexible-layout",
    "id": 1636
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Pin tabs  \nYou can now pin tabs either from the context menu or using the new command `workbench.action.pinEditor` (`kb(workbench.action.pinEditor)`).  \n![Pin Tabs](images/1_46/pin-tabs.gif)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \nPinned tabs have a number of useful features to help mark files that are important to you:  \n* Pinned tabs always appear first before non-pinned tabs.\n* They do not scroll out of view if you have many tabs opened.\n* They do not close when using commands such as **Close Others**.\n* They do not close even if you exceed a set limit on the number of opened editors.  \nYou can also drag and drop tabs in and out to change the pinned state.  \nPinned tabs visually shrink to the size of an icon (or will show the first letter of the filename if icons are disabled) to save space. If you want to see the dirty indicator with pinned tabs, you can set `workbench.editor.highlightModifiedTabs: true`.  \n**Note:** We are still thinking about other ways to present pinned tabs. If you have an opinion, feel free to share your ideas in the existing issues for [showing a secondary tab bar](https://github.com/microsoft/vscode/issues/98160) or having a setting to [show more context for pinned tabs](https://github.com/microsoft/vscode/issues/98161).",
    "url": "https://code.visualstudio.com/updates/v1_46#_pin-tabs",
    "id": 1637
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Search Editor  \nThere are several new options for configuring how [Search Editors](https://code.visualstudio.com/updates/v1_43#_search-editors) are created:  \n* `search.searchEditor.defaultNumberOfContextLines` - Configure how many context lines a Search Editor shows by default.\n* `search.searchEditor.reusePriorSearchConfiguration` - Reuse the last active Search Editor's configuration when creating a new Search Editor.\n* Support for passing Search Editor configuration variables in keybinding arguments ([parameter details](https://github.com/microsoft/vscode/issues/95582#issuecomment-625537626)).",
    "url": "https://code.visualstudio.com/updates/v1_46#_search-editor",
    "id": 1638
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Explorer auto reveal focus without forcing a scroll  \nThere is a new option `focusNoScroll` for the `explorer.autoReveal` setting. When using this option, the Explorer will automatically select files when opening them but will not scroll to reveal them in the Explorer view.",
    "url": "https://code.visualstudio.com/updates/v1_46#_explorer-auto-reveal-focus-without-forcing-a-scroll",
    "id": 1639
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Smooth scrolling for lists and trees  \nEnabling the `workbench.list.smoothScrolling` setting will make scrolling in lists and trees much smoother with hardware that lacks smooth scrolling (for example, discrete mouse wheel on Windows).  \n![Smooth scrolling](images/1_46/smooth-scrolling.gif)",
    "url": "https://code.visualstudio.com/updates/v1_46#_smooth-scrolling-for-lists-and-trees",
    "id": 1640
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Sash size configuration  \nYou can now use the `workbench.sash.size` setting to configure the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.",
    "url": "https://code.visualstudio.com/updates/v1_46#_sash-size-configuration",
    "id": 1641
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Screencast mode font size  \nThe new `screencastMode.fontSize` setting lets you configure the font size in pixels that is being used in screencast mode.",
    "url": "https://code.visualstudio.com/updates/v1_46#_screencast-mode-font-size",
    "id": 1642
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Trusted link protection  \nVS Code will now allow directly opening URL links to any GitHub remotes in your workspace. Additionally, if you have signed in with GitHub, all links to pages under your GitHub profile will be trusted.",
    "url": "https://code.visualstudio.com/updates/v1_46#_trusted-link-protection",
    "id": 1643
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Editor  \n### Cross file Undo for closed files  \nIt is now possible to Undo across files, even if the files have been closed in the meantime. The edited files will be reopened and a cross-file operation, such as a rename symbol, will be undone in all affected files.",
    "url": "https://code.visualstudio.com/updates/v1_46#_cross-file-undo-for-closed-files",
    "id": 1644
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Unusual line terminators  \nVS Code currently recognizes CR (Carriage Return), LF (Line Feed), and CRLF as line terminators. Some programming languages have different definitions for what constitutes a line terminator. This varies across languages, for example LS (Line Separator) and PS (Paragraph Separator) are line terminators in C# and JavaScript, but not in HTML, PHP, or Java. These line ending differences can cause problems when VS Code communicates with a language server, since various concepts are communicated between VS Code and the language server using `(line;char)` coordinates. If there are different definitions of a line terminator, it can result in different mappings of lines and locations in the file.  \nWhen opening a file, VS Code will now check if LS or PS are present in the opened file, and will prompt and ask for permission to remove these characters. These unusual line terminators are rare in practice and are most likely inserted in source code by accident, via copy-pasting.",
    "url": "https://code.visualstudio.com/updates/v1_46#_unusual-line-terminators",
    "id": 1645
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Integrated Terminal  \n### Improved link support  \nThe Integrated Terminal link preview from last month has replaced the old implementation. The new links implementation now enables:  \n* Improved web and `file://` link detection, by using the editor's link detection.\n* Folder link support, either opening the folder in the Explorer or opening a new VS Code window.\n* Different link actions for different link types, falling back to \"word\" links that search the workspace (based on the `terminal.integrated.wordSeparators` setting).\n* Similar link highlighting and hover experience to the editor.  \n![Terminal with various links](images/1_45/terminal-links.gif)  \n*Theme: [Topaz (Dim)](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-topaz)*",
    "url": "https://code.visualstudio.com/updates/v1_46#_improved-link-support",
    "id": 1646
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Add remote from GitHub  \nYou can now add a GitHub repository as a remote to your local repositories using the **Git: Add Remote...** command.  \n![Use Add Remote Command](images/1_46/git-add-remote.gif)",
    "url": "https://code.visualstudio.com/updates/v1_46#_add-remote-from-github",
    "id": 1647
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Generate .gitignore when publishing to GitHub  \nIt's now possible to generate a `.gitignore` file when publishing a workspace to GitHub. When publishing a workspace to GitHub, you are prompted to select which files to include in the repository and those files not included will be added to a `.gitignore` file.  \n![Select which files to include in the repository](images/1_46/publish-to-github.png)",
    "url": "https://code.visualstudio.com/updates/v1_46#_generate-.gitignore-when-publishing-to-github",
    "id": 1648
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Input field font family  \nYou can now customize the font family used in the Source Control input field using the **Scm: Input Font Family** setting. The setting supports the following values:  \n* `default` - Workbench user interface font family.\n* `editor` - Font family specified in the **Editor: Font Family** setting.\n* `font family name` - The name of the font family to be used in the input field (for example, `Cascadia Code`).",
    "url": "https://code.visualstudio.com/updates/v1_46#_input-field-font-family",
    "id": 1649
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Abort in progress rebase  \nYou can now abort in progress rebase operations using the **Git: Abort Rebase** command.",
    "url": "https://code.visualstudio.com/updates/v1_46#_abort-in-progress-rebase",
    "id": 1650
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Debugging  \n### Automatic debug configurations improvements  \nThis milestone we have improved the experience for automatic debug configurations:  \n* Last milestone, we introduced a feature so that extension authors can analyze the current project and offer debug configurations automatically. These debug configurations are dynamically created and so they do not show up in the `launch.json` configuration file. This is nice as long as they work out of the box, but sometimes you may need to modify the configuration, for instance to add an additional argument. There is now an option to save an automatic debug configuration into a `launch.json`, in order to open it up for editing. To do this, use the gear button at the end of the automatic debug configuration in the **Debug: Select and Start Debugging** Quick Pick:  \n![Selecting Edit automatic debug configuration in launch](images/1_46/edit-auto-configs.gif)  \n* It is now possible to show all automatic debug configurations from the Run and Debug start view.  \n![Automatic debug configs in start view](images/1_46/automatic-debug-configs.png)  \n* The Debug dropdown now remembers the previously chosen automatic debug configuration.",
    "url": "https://code.visualstudio.com/updates/v1_46#_automatic-debug-configurations-improvements",
    "id": 1651
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Step Into Targets  \nDebugging into a statement with many nested function calls can be painful because you might have to step through functions you are not really interested in. To improve this scenario, the Debug Adapter Protocol has supported the \"Step Into Target\" feature that displays UI for directly stepping into the function you are interested in.  \nIn this milestone, VS Code has started to use this feature. When debugging has stopped on a statement, the context menu shows a new action **Step Into Targets**. This action presents a list of all targets (typically functions) that are available at the current stack frame. Selecting one of them will step into that target.  \nNote that every stack frame can have its own set of targets. So the result of the **Step Into Targets** actions depends on the currently selected frame in the CALL STACK view.  \n![Step into targets in context menu](images/1_46/step-into.png)  \nFor now, only the Mock Debug extension has (fake) **Step Into Target** support, but soon other debug extensions will follow - such as the Julia debugger.",
    "url": "https://code.visualstudio.com/updates/v1_46#_step-into-targets",
    "id": 1652
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Languages  \n### TypeScript 3.9  \nVS Code now includes TypeScript 3.9.4. This major TS update brings some new tooling features, performance improvements, and a number of bug fixes. You can read more about TS 3.9 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-3-9/).",
    "url": "https://code.visualstudio.com/updates/v1_46#_typescript-3.9",
    "id": 1653
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### CommonJS auto imports  \nIf VS Code detects that you are working in a CommonJS style JavaScript module, [auto imports](https://code.visualstudio.com/docs/languages/javascript#_auto-imports) will now use `require` instead of `import`.  \n![Auto imports using 'require' in a JS file](images/1_46/ts-common-js-auto-import.gif)",
    "url": "https://code.visualstudio.com/updates/v1_46#_commonjs-auto-imports",
    "id": 1654
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Refactorings preserve newlines  \nRefactorings for JavaScript and TypeScript, such as **Extract to method** and **Move to new file**, now try to preserve the original formatting of the refactored source code. This includes any newlines present in the selection:  \n![The 'extract method' refactoring preserving newlines](images/1_46/ts-refactor-newline.gif)",
    "url": "https://code.visualstudio.com/updates/v1_46#_refactorings-preserve-newlines",
    "id": 1655
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Add all missing imports source action  \nVS Code has long supported a Quick Fix that adds all missing imports in a JavaScript or TypeScript file. This iteration, we introduced a new **Add all missing imports** source action that lets you trigger this from anywhere in a file.  \n![Adding imports using a source action](images/1_46/ts-import-all-source-action.gif)  \nThis also allows you to set up a keybinding for **Add all missing imports**:  \n```json\n{\n\"key\": \"ctrl+shift+i\",\n\"command\": \"editor.action.sourceAction\",\n\"args\": {\n\"kind\": \"source.addMissingImports\",\n\"apply\": \"first\"\n}\n}\n```  \nOr even enable **Add all missing imports** on save:  \n```json\n\"editor.codeActionsOnSave\": [\n\"source.addMissingImports\"\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_46#_add-all-missing-imports-source-action",
    "id": 1656
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### JS/TS Go to Symbol in workspace includes all opened projects  \nBy default, [workspace symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) for JavaScript and TypeScript now searches all opened `jsconfig` and `tsconfig` projects. It previously only included search results from the project the focused file belonged to.  \nThis behavior is controlled by the `typescript.workspaceSymbols.scope` setting and requires TS 3.9+. To revert to the previous behavior and only search the current project, set `\"typescript.workspaceSymbols.scope\": \"currentProject\"`",
    "url": "https://code.visualstudio.com/updates/v1_46#_js/ts-go-to-symbol-in-workspace-includes-all-opened-projects",
    "id": 1657
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Add missing import Quick Fixes can now be marked preferred  \nThe **Adding missing import** Quick Fix for JavaScript and TypeScript can now be [marked as the preferred fix](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions) for an error. This lets you add the missing import with a single keypress using `kb(editor.action.autoFix)`.  \nNote that **Adding missing import** will only be marked as the preferred fix if there is a single valid import. If there are multiple potential imports in your projects, you still need to use the normal Code Actions menu to select which import to use. Also, to enable **Add missing import** Quick Fixes in JavaScript, you must [enable type checking](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript).",
    "url": "https://code.visualstudio.com/updates/v1_46#_add-missing-import-quick-fixes-can-now-be-marked-preferred",
    "id": 1658
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### JSON offline mode  \nA new setting `json.schemaDownload.enable` lets you control whether the JSON extension is allowed to fetch JSON schemas from `http` and `https`.  \nA warning triangle in the Status bar will appear when the current editor would like to use schemas that cannot be downloaded. Schema-based features like validation, code completion, and hovers will then be limited.  \n![JSON warning triangle](images/1_46/json-no-schema-download.png)",
    "url": "https://code.visualstudio.com/updates/v1_46#_json-offline-mode",
    "id": 1659
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Browser support  \n### Debugging stopped indicator in tab title  \nWhen debugging an extension in the browser, the debugged extension shows up in a new browser tab that deactivates (hides) the debugger tab. When the debuggee stops for some reason, for example, hits a breakpoint, we are not able to activate the debugger tab (because browsers don't provide an API for this). This makes it almost impossible to discover that the debugged extension has stopped.  \nTo alleviate this problem, we now update the tab title to include a red circle indicator \ud83d\udd34 (resembling a breakpoint). As soon as the debugger tab is activated, the red dot is removed.  \n![Debuggee stopped indicator in web view](images/1_46/breakpoint.gif)",
    "url": "https://code.visualstudio.com/updates/v1_46#_debugging-stopped-indicator-in-tab-title",
    "id": 1660
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Running VS Code from the Integrated Terminal  \nWhen you open an Integrated Terminal in VS Code running in the browser, you can type `code` to get access to several useful commands that all work in the browser.  \n![Terminal Remote](images/1_46/terminal-web.png)  \nIn this iteration, we expanded support for many options:  \n* `--goto` to open a file on a specific line\n* `--diff` to compare two files\n* `--wait` to let a program wait for files closing\n* `--add` to add a folder to the current workspace  \nIn [GitHub Codespaces](https://github.com/features/codespaces), for example, this enables you to use the browser-based VS Code as an editor for Git:  \n![VS Code Git Editor in Browser](images/1_46/code-git-editor.gif)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_46#_running-vs-code-from-the-integrated-terminal",
    "id": 1661
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### File/folder upload  \nVS Code lets you drop files into the File Explorer to upload them. In this iteration, we improved this feature to allow you to drop folders to upload them, including all child folders and files. Since this can be a long running operation, you will see progress reported in the Status bar and you can cancel the operation if needed.  \n![Drag files into File Explorer](images/1_46/web-upload.gif)",
    "url": "https://code.visualstudio.com/updates/v1_46#_file/folder-upload",
    "id": 1662
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Settings Sync  \nWe have been working the last couple of months to support synchronizing VS Code preferences across machines and this feature is available for preview on the [Insiders](https://code.visualstudio.com/insiders) release.  \nIn this milestone, we enhanced support for administering and diagnosing Settings Sync.  \n**Synced Machines view**  \nWe added the **Synced Machines** view to show the list of machines synchronizing your VS Code preferences. A default name is provided based on the type of VS Code (Insiders or Stable) and platform you are using, but you can always update the name using the edit action available on the machine entry in the view.  \n![Synced Machines view](images/1_46/settings-sync-machines.png)  \n*Theme: GitHub Sharp with Customizations*  \nYou can open this view using **Preferences Sync: Show Synced Data** command from the Command Palette.  \n**Synced Data view**  \nWe added following enhancements to the Synced Data view.  \n* You can now see the machine from which data is being synced.\n* You can restore to a specific state using the **Restore** action available on the data entry in the view.\n* You can reset data on the cloud using the **Reset Synced Data** action available under **More Action** (**...**) button in the view header.  \n![Synced Data view](images/1_46/settings-sync-data.png)  \n*Theme: GitHub Sharp with Customizations*  \nWe now provide more assistance while turning on sync by checking if you are about to sync with data from a different machine and allow you to take appropriate action.  \n* **Replace Local** - Replace your data on the current machine with the synced data from the cloud.\n* **Merge** - Merge your data on the current machine with the synced data from the cloud.\n* **Show Synced Data** - Open Synced Data view to see the synced data from the cloud.  \n![Replace or Merge pop-up](images/1_46/settings-sync-merge.png)",
    "url": "https://code.visualstudio.com/updates/v1_46#_settings-sync",
    "id": 1663
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### New JavaScript debugger  \nThis month we continued making progress on our new JavaScript debugger. Since mid-May, it has become the default debugger on Insiders, and is included (but not enabled by default) on VS Code Stable in this release. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting.  \nProgress this month was primarily focused on polishing and stabilizing existing functionality:  \n* **Multi-tab support for browser debugging:** You can now attach to multiple tabs when running browsers or webviews. By default, js-debug attaches to all tabs that match the `urlFilter`. When attaching to browsers, you can set `\"targetSelection\": \"pick\"` in your launch configuration to connect to a single tab as in the previous debugger.\n* **Improved tab disambiguation:** The debug session names more accurately disambiguate multiple tabs. Additionally, we added a **Focus Tab** action in the context menu for the debug session in the Call Stack view, which you can use to make sure you're looking at the right page.\n* **Option to auto-expand getters:** Matching the behavior of Chrome, property getters are not evaluated by default when shown in the Variables view or the Debug Console. You can now configure this behavior by setting the `debug.javascript.autoExpandGetters` option.\n* **Performance improvements for types of webpack bundles:** Certain types of webpack bundles, those built with `eval` sourcemaps, ran slowly under js-debug. They no longer do so.",
    "url": "https://code.visualstudio.com/updates/v1_46#_new-javascript-debugger",
    "id": 1664
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### TS 4.0 nightly build support  \nVS Code 1.46 includes preview support for TypeScript 4.0 nightly builds. The nightly build includes support for some new tooling features that we are actively working on, such as [more flexible selections for refactoring](https://github.com/microsoft/TypeScript/pull/38378).  \nYou can try TypeScript 4.0 nightly builds today by installing the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with the TypeScript 4.0.",
    "url": "https://code.visualstudio.com/updates/v1_46#_ts-4.0-nightly-build-support",
    "id": 1665
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Contributions to extensions  \n### Notebooks  \n**Quick outline**  \nNotebook extensions, such as [GitHub Issue Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks), now support quick outline. Press `kb('workbench.action.gotoSymbol')`, or use the **Go to Symbol in Editor** command, and see a preview of all Markdown and code cells of the current notebook.  \n![Notebook quick outline preview list](images/1_46/notebook-quickouline.png)  \n*Theme: [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Error and symbol navigation**  \nWe have improved how `F8` and **Find All References** work. All code navigation gestures should feel as natural as they to do outside of Notebooks. For instance, the Problems view will now show all errors of all cells grouped by the Notebook, not by cell anymore:  \n![Problems panel with errors grouped by notebook](images/1_46/notebook-problems.png)  \n*Theme: [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Join/Split cells**  \nWe introduced two sets of commands for you to quickly join cells or split cells into smaller fragments:  \n![Running Join and Split Notebook cells commands](images/1_46/notebook-join-split-cells.gif)  \n*Theme: [GitHub Dark Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Retained Notebook**  \nPinned or dirty Notebook editors are now persistent in the workspace, so users won't lose the working state in the Notebook if the Notebook is moved to the background or moved to another editor group.  \n![Persisted Notebook](images/1_46/retained-notebook-editor.gif)  \n*Theme: [GitHub Dark Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Unified Undo/Redo stack**  \nUsers operations of manipulating Notebook cells or modifying Notebook cell content are now tracked in the same Undo/Redo stack.  \n![Show tracking of Unified Undo/Redo stack](images/1_46/notebook-unified-undo-redo-stack.gif)  \n*Theme: [GitHub Dark Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_46#_notebooks",
    "id": 1666
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Some updates for this release include:  \n* Improved labels in issue hovers.\n* Issue and user suggestions now only trigger in comments and plaintext.\n* The new issue editor enables you to set assignees and labels.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.17.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_46#_github-pull-requests-and-issues",
    "id": 1667
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nNew features in 1.46 include:  \n* Dev Containers: Support for GPG forwarding.\n* Dev Containers: Support for inspecting a Docker volume.\n* Dev Containers: New `devcontainer.json` command properties.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_46.md).",
    "url": "https://code.visualstudio.com/updates/v1_46#_remote-development",
    "id": 1668
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Hex Editor  \nWith the custom editor API finalized with support for [binary editors](#custom-binary-editors), we have developed a [hex editor extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor) to provide a native hex editing experience.  \n![Hex Editor](images/1_46/hex-editor.gif)  \nThis extension is still under development and currently only supports opening and navigating files as hex. We will continue to work on the navigational experience and then move on to support editing. You can try out the extension and provide feedback or file issues against the [vscode-hexeditor repository](https://github.com/microsoft/vscode-hexeditor).",
    "url": "https://code.visualstudio.com/updates/v1_46#_hex-editor",
    "id": 1669
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Extension authoring  \n### File path casing  \nWe have fixed a couple of bugs with how VS Code handles paths and URIs on case-insensitive file systems. Before this release, paths with different casing would not open the same document but separate, disconnected documents. That behavior often caused confusion and sometimes data loss.  \nHowever, in fixing these bugs, the behavior of the `openTextDocument` function has changed. The function can now return a document with a URI with different casing than the URI that was passed in. This means extensions should use [TextDocument#uri](https://github.com/microsoft/vscode/blob/11fda69d237b9aa006eb53da724fa509afe92e0a/src/vs/vscode.d.ts#L99) as the source of truth, not the URI that they request it with.  \nThe sample below illustrates the new behavior:  \n```ts\n// case-insensitive file system\n\nconst uriA = vscode.Uri.file('/foo/bar.code');\nconst docA = await vscode.workspace.openTextDocument(uriA);\n\nconst uriB = vscode.Uri.file('/foo/BAR.code');\nconst docB = await vscode.workspace.openTextDocument(uriB);\n\nassert.ok(docA === docB); // same document\nassert.ok(docB.uri.toString() === uriA.toString()); // uriA is used, NOT uriB\nassert.ok(docB.uri.toString() !== uriB.toString());\n```",
    "url": "https://code.visualstudio.com/updates/v1_46#_file-path-casing",
    "id": 1670
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### New Debug Console theme colors  \nThere are new colors for styling the Debug Console view:  \n* `debugConsole.infoForeground`: Foreground color for info messages in Debug Console\n* `debugConsole.warningForeground`: Foreground color for warning messages in Debug Console\n* `debugConsole.errorForeground`: Foreground color for error messages in Debug Console\n* `debugConsole.sourceForeground`: Foreground color for source filenames in Debug Console\n* `debugConsoleInputIcon.foreground`: Foreground color for Debug Console input marker icon",
    "url": "https://code.visualstudio.com/updates/v1_46#_new-debug-console-theme-colors",
    "id": 1671
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### New input theme colors  \nWe also have new color theme option for inputs. You can set the foreground color for active input options via `inputOption.activeForeground`. These appear in the Search view and Find widget (editor, terminal, debug console).  \n![Input option foreground color](images/1_46/input-option-foreground.png)  \n*Theme: [GitHub Dark Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_46#_new-input-theme-colors",
    "id": 1672
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### New codicon icons  \nWe've added the following new icons to our [codicon](https://code.visualstudio.com/api/references/icons-in-labels) library:  \n* `server-process`\n* `server-environment`\n* `record`\n* `pass`\n* `stop-circle`\n* `play-circle`  \n![New available icons](images/1_46/new-codicons.png)  \n*Theme: [GitHub Dark Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_46#_new-codicon-icons",
    "id": 1673
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Providers use generic types  \nOur `vscode.d.ts` typings now makes all two phase providers\u2014ones that have separate 'provide' and 'resolve' methods\u2014generic. The goal was to make it clearer that the results from the 'provide' call are passed back into the 'resolve' call.  \nFor example, here is the new generic definition of `DocumentLinkProvider`:  \n```ts\nexport interface DocumentLinkProvider<T = DocumentLink> {\n\nprovideDocumentLinks(document: TextDocument, token: CancellationToken): ProviderResult<T[]>;\n\nresolveDocumentLink?(link: T, token: CancellationToken): ProviderResult<T>;\n}\n```  \nAll providers have a default generic argument so this change should not cause any errors with your existing extension. If you were previously using casts or type checks while implementing 'resolve', consider updating your code to use a generic provider instead:  \n```ts\nclass MyDocLinkProvider implements DocumentLinkProvider<MyDocumentLink> {\n\nprovideDocumentLinks(document: TextDocument, token: CancellationToken): MyDocumentLink[] { ... }\n\nresolveDocumentLink(link: MyDocumentLink, token: CancellationToken): MyDocumentLink { ... }\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_46#_providers-use-generic-types",
    "id": 1674
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Writing theme-specific CSS in webviews  \nThe body element of webviews has a new data attribute called `vscode-theme-name` that stores the full name of the currently active theme. This lets you write theme-specific CSS in webviews:  \n```css\nbody[data-vscode-theme-name=\"One Dark Pro\"] {\nbackground: hotpink;\n}\n```  \nKeep in mind that given the number of themes that are available for VS Code, you should only write theme-specific CSS in exceptional cases. Normal webviews should instead use the `.vscode-light` and `.vscode-dark` class names along with the [VS Code CSS variables](https://code.visualstudio.com/api/extension-guides/webview#theming-webview-content) to write CSS that adapts to whatever theme the user selects.",
    "url": "https://code.visualstudio.com/updates/v1_46#_writing-theme-specific-css-in-webviews",
    "id": 1675
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Custom Binary Editors  \nWe've finalized the API for custom binary editors. The custom editor API lets extensions create custom webview-based editors that either replace VS Code's default text editor or can be switched to by users. This can be used for previewing asset files, such as images or 3D models, directly within VS Code, or for building more specialized editing interfaces for specific file types. With the new binary custom editor API, you can now build read/write editors for non-text based file formats as well.  \n![A custom editor for binary files](images/1_46/custom-editor.png)  \nThe [custom editor extension guide](https://code.visualstudio.com/api/extension-guides/custom-editors) covers the API in much more detail. Also check out the [custom editor extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/custom-editor-sample), which includes examples custom editors for both text and binary file formats.",
    "url": "https://code.visualstudio.com/updates/v1_46#_custom-binary-editors",
    "id": 1676
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Relaxed resolveCompletionItem  \nThe [CompletionItemProvider#resolveCompletionItem](https://github.com/microsoft/vscode/blob/11fda69d237b9aa006eb53da724fa509afe92e0a/src/vs/vscode.d.ts#L3966) function allows providers to lazily enrich completions with more data. This \"lazy\" data must be optional and must not change the insert behavior of completions. Extensions can still fill in `additionalTextEdits` and if additional edits arrive **after** a completion has been inserted, the editor will still attempt to apply them. Note that this only applies to additional edits, not to the main edit (`insertText`) which must not change once provided.",
    "url": "https://code.visualstudio.com/updates/v1_46#_relaxed-resolvecompletionitem",
    "id": 1677
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### onStartupFinished activation event  \nWe now have a new activation event, similar to the already existing `*` activation event. The new `onStartupFinished` activation event should be used when an extension wishes to be activated sometime soon after VS Code startup, but not as part of the startup.",
    "url": "https://code.visualstudio.com/updates/v1_46#_onstartupfinished-activation-event",
    "id": 1678
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Environment variable collection  \nThe `ExtensionContext.EnvironmentVariableCollection` API is now stable and allows extensions to contribute to terminal environments.  \n```ts\nconst collection = context.environmentVariableCollection;\nconst separator = process.platform === 'win32' ? ';' : ':';\ncollection.prepend('PATH', `/foo${separator}`);\ncollection.replace('JAVA_HOME', '/bar');\n```  \nThese collections are extension and workspace-specific and VS Code handles how conflicts between multiple extensions are dealt with. They are persisted across window reloads such that terminals created immediately after the window is loaded do not block on the extension host launching but instead use the last known version. These persisted collections are removed by disposing of the collection or when the extension is uninstalled.  \nWhen collections change, an indicator will appear on the terminal. Whether this indicator shows for any active change or just for \"stale\" terminals is defined by the `terminal.integrated.environmentChangesIndicator` setting. This API is now also used by the built-in Git extension to let VS Code be an authentication provider.",
    "url": "https://code.visualstudio.com/updates/v1_46#_environment-variable-collection",
    "id": 1679
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Debug Adapter Protocol  \n### New instruction breakpoints  \nThere is a new \"instruction\" breakpoint type, which makes it possible to break on an instruction at a memory address. Memory addresses are specified in symbolic form that is optionally available from `evaluate`, `variables`, `stackTrace`, and `gotoTargets` requests. A corresponding capability `supportsInstructionBreakpoints` indicates whether a debug adapter supports instruction breakpoints.",
    "url": "https://code.visualstudio.com/updates/v1_46#_new-instruction-breakpoints",
    "id": 1680
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Support for \"stepping granularity\"  \nA new optional `granularity` argument has been added to the stepping requests `next`, `stepIn`, `stepOut`, `stepBack` to control whether the request steps a \"statement\", a \"line\", or an \"instruction\". A corresponding capability `supportsSteppingGranularity` indicates whether a debug adapter supports the feature.",
    "url": "https://code.visualstudio.com/updates/v1_46#_support-for-stepping-granularity",
    "id": 1681
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### AccessibilityInformation  \nWe have added `AccessibilityInformation` to the `TreeItem`, `StatusBarItem`, and `TimelineItem` elements to support screen readers. `AccessibilityInformation` contains a `label` and a `role`. The `label` is read by screen readers and the `role` describes the accessibility characteristics of the element.",
    "url": "https://code.visualstudio.com/updates/v1_46#_accessibilityinformation",
    "id": 1682
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Engineering  \n### Windows ARM64 Insiders  \nThere are new official Insider builds for Windows for ARM 64-bit, available on the [Insiders download page](https://code.visualstudio.com/insiders).  \nThese builds work with the Microsoft Surface Pro X, so give it a try and let us know what you think.  \n![Windows ARM64](images/1_46/win-arm64.png)",
    "url": "https://code.visualstudio.com/updates/v1_46#_windows-arm64-insiders",
    "id": 1683
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### --crash-reporter-directory argument for diagnosing issues  \nA new command-line argument `--crash-reporter-directory` allows you to pass a local folder where you'd like to save crash reports. This even works for crashes in the extension host and can be used whenever VS Code is crashing and you want to report an issue.",
    "url": "https://code.visualstudio.com/updates/v1_46#_--crash-reporter-directory-argument-for-diagnosing-issues",
    "id": 1684
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Preload Scripts  \nWe have added Electron `preload` scripts to VS Code for exposing certain Electron APIs to the window. This is one of the first steps towards a fully sandboxed window. Progress is outlined in [issue #92164](https://github.com/microsoft/vscode/issues/92164).",
    "url": "https://code.visualstudio.com/updates/v1_46#_preload-scripts",
    "id": 1685
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Extension samples now use ESLint  \nOur [extension samples](https://github.com/microsoft/vscode-extension-samples) have all been updated to use [ESLint](https://eslint.org) for linting instead of the now deprecated TSLint. If your  extension is still using TSLint, you can review the [TSLint to ESLint Migration guide](https://code.visualstudio.com/api/advanced-topics/tslint-eslint-migration) and our newly updated extension samples to see how to migrate to ESLint.",
    "url": "https://code.visualstudio.com/updates/v1_46#_extension-samples-now-use-eslint",
    "id": 1686
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### GitHub Triage Extension  \nWe created an extension for chromium-based browsers to help us with issue triaging on GitHub by providing a single fuzzy-filterable menu of assignees, labels, milestones, and various special comments we use to trigger our triaging [GitHub Actions](https://github.com/microsoft/vscode-github-triage-actions/). We have open sourced the code [on GitHub](https://github.com/microsoft/vscode-github-triage-extension).  \n![Screenshot of Extension](images/1_46/vscode-github-triage-ext-screenshot.png)",
    "url": "https://code.visualstudio.com/updates/v1_46#_github-triage-extension",
    "id": 1687
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n## Documentation and extensions  \n### Visual Studio Code at Build  \nThe VS Code team presented at the [Microsoft Build 2020](https://mybuild.microsoft.com/) conference and you can find an overview of the VS Code sessions and online talks in this [VS Code at Build](https://code.visualstudio.com/blogs/2020/05/14/vscode-build-2020) blog post.  \nSeveral talks by VS Code team members:  \n* [VS Code Tips and Tricks](https://aka.ms/Build2020AppDev-VSCodeTips) - 20 tips and tricks to make you more productive with VS Code.\n* [What every Visual Studio Code user should know about GitHub](https://aka.ms/Build2020AppDev-VSCodeAndGitHub) - Learn about VS Code's GitHub integration for PRs and issues.\n* [Remote Development with Visual Studio Code](https://mybuild.microsoft.com/sessions/5bf61d0b-f4af-4b2e-bcb4-56829ada4e5b?source=sessions) - Learn how Visual Studio Code enables developers to work remotely from anywhere.\n* [The History of Visual Studio Code](https://mybuild.microsoft.com/sessions/6b571733-8198-48da-b870-ef804dcfea93?source=sessions) - Learn about how VS Code started and evolved until today.",
    "url": "https://code.visualstudio.com/updates/v1_46#_visual-studio-code-at-build",
    "id": 1688
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2020 Release (1.46)  \n### Azure extensions  \nThere are several new extensions for working with and deploying Azure assets directly from within VS Code.  \n* [Azure Static Web Apps](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) - Create and manage Azure Static Web Apps directly from VS Code.\n* [Azure Databases](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb) - Create, browse, and update globally distributed, multi-model databases in Azure.  \n![Azure Databases extension](images/1_46/azure-static-web-apps-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_46#_azure-extensions",
    "id": 1689
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Select and keep focus in a list view  \nThere is a new command, `list.selectAndPreserveFocus`, which lets you select an item from a list, while keeping focus in that list. This can be helpful if you want to select multiple files from a list, such as the File Explorer, without having focus go to the file editor.  \nThe command is not bound to any keyboard shortcut by default, but you can add your own keybinding:  \n```json\n{\n\"key\": \"ctrl+o\",\n\"command\": \"list.selectAndPreserveFocus\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_47#_select-and-keep-focus-in-a-list-view",
    "id": 1691
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Stable Windows ARM builds  \nVS Code for Windows on ARM is now [available](https://aka.ms/win32-arm64-user) for the stable release! \ud83c\udf89",
    "url": "https://code.visualstudio.com/updates/v1_47#_stable-windows-arm-builds",
    "id": 1692
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Install VSIX through drag and drop  \nVS Code now supports installing an extension VSIX file through drag and drop onto the Extensions view.",
    "url": "https://code.visualstudio.com/updates/v1_47#_install-vsix-through-drag-and-drop",
    "id": 1693
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New Search editor command arguments  \nThere are two new arguments added to the Search editor commands (`search.action.openNewEditor`, `search.action.openNewEditorToSide`) to allow keybindings to configure how a new Search editor should behave:  \n* `triggerSearch` - Whether a search be automatically run when a Search editor is opened. Default is true.\n* `focusResults` - Whether to put focus in the results of a search or the query input. Default is true.  \nFor example, the following keybinding runs the search when the Search editor is opened but leaves the focus in the search query control.  \n```json\n{\n\"key\": \"ctrl+o\",\n\"command\": \"search.action.openNewEditor\",\n\"args\": { \"query\": \"VS Code\", \"triggerSearch\":true, \"focusResults\": false }\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-search-editor-command-arguments",
    "id": 1694
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New Search editor context default  \nThe `search.searchEditor.defaultNumberOfContextLines` setting has been updated to have a default value of 1 instead of 0, meaning one context line will be shown before and after each result line in the Search editor. To go back to the old behavior, set the value back to 0.",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-search-editor-context-default",
    "id": 1695
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### List/Tree: Dynamic horizontal scrolling  \nThe previously existing `workbench.list.horizontalScrolling` setting can now be toggled at runtime without forcing you to reload the workbench.",
    "url": "https://code.visualstudio.com/updates/v1_47#_list/tree:-dynamic-horizontal-scrolling",
    "id": 1696
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Editor  \n### Case changing in regex replace  \nVS Code now supports changing the case of regex matching groups while doing a find/replace in the editor. This is done with the modifiers `\\u\\U\\l\\L`, where `\\u` and `\\l` will upper/lowercase a single character, and `\\U` and `\\L` will upper/lowercase the rest of the matching group.  \nExample:  \n![Changing case while doing find and replace](images/1_47/case-change-replace.gif)  \nThe modifiers can also be stacked - for example, `\\u\\u\\u$1` will uppercase the first three characters of the group, or `\\l\\U$1` will lowercase the first character, and uppercase the rest.  \nCurrently, these are only supported in the editor's Find control, and not in global **Find in Files**.",
    "url": "https://code.visualstudio.com/updates/v1_47#_case-changing-in-regex-replace",
    "id": 1697
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Debugging  \n### New JavaScript Debugger  \nOur new JavaScript debugger, after being the default debugger on Insiders last month, is now the default debugger for JavaScript (Node.js and Chrome) in VS Code. If you skipped the \"Preview Features\" section of the last few VS Code changelogs, you can catch up on the [what's new section](https://github.com/microsoft/vscode-js-debug#whats-new) of the debugger README.  \nYou should not need to change any settings or launch configurations to take advantage of the new debugger. If you run into any problems, please [open an issue](https://github.com/microsoft/vscode-js-debug/issues/new/choose)!",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-javascript-debugger",
    "id": 1698
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Single file debugging  \nUntil today, the VS Code debugger had no standard way of showing that a file in the editor could be easily debugged with just a click of a button. Some debug extensions would allow you to do so, usually with a debug configuration that prompted you to \"Debug file in editor.\" However, users still had to select the correct configuration in the debug configuration dropdown menu before they can use **F5**. Other debug extensions implement a fallback strategy for **F5**: if no `launch.json` exists, **F5** will try to debug the file currently open in the active editor.  \nSince both approaches are not easily discoverable, some debug extensions (for example, Python) have started to add a **Run** button to the editor's title area.  \nSince we haven't found a better approach, and this method can be implemented without any need for new APIs, we wrote some guidelines for how to implement it in a standard way. Extension authors can find these guidelines below in the \"Extension Authoring\" section.  \nUsers need only to remember these icons:  \n![Run and debug action in editor title](images/1_47/run-and-debug-actions.png)  \nIf one or both show up on the left-hand side of the editor's title area, then running or debugging the file in the editor is just one click away.",
    "url": "https://code.visualstudio.com/updates/v1_47#_single-file-debugging",
    "id": 1699
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Less cluttered CALL STACK view  \nWe've started to make the CALL STACK less crowded for common cases: the CALL STACK view now supports hiding debug session nodes that exist for technical reasons, but do not provide much value to users.  \nThe first debug extension that has opted into this feature is the new JavaScript debugger, which could eliminate a parent debug session whenever there is only a single child session.  \n![Screenshot of two \"Call Stack\" views. Without compaction, there is an extra child session between the parent session and each attached worker processes.](images/1_47/call-stack-compaction.png)  \nWe hope that other debug extensions will follow. Please see the new proposed API below.",
    "url": "https://code.visualstudio.com/updates/v1_47#_less-cluttered-call-stack-view",
    "id": 1700
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New command alias **Set Next Statement** for **Jump to Cursor**  \nTo make the command **Jump to Cursor** more discoverable for users coming from Visual Studio, we've added the command alias **Set Next Statement**.  \nIf you don't know what **Jump to Cursor** does: it lets you move program execution to a new location without executing any of the source code in between.",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-command-alias-**set-next-statement**-for-**jump-to-cursor**",
    "id": 1701
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Breakpoint Path on Hover  \nWhen hovering over a source breakpoint in the BREAKPOINTS view, VS Code now shows the absolute path of the breakpoint.",
    "url": "https://code.visualstudio.com/updates/v1_47#_breakpoint-path-on-hover",
    "id": 1702
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Tasks  \n### pnpm package manager support  \n[pnpm](https://pnpm.js.org) is now a valid choice for the `npm.packageManager` setting, along with `npm` and `yarn`, to run your scripts.",
    "url": "https://code.visualstudio.com/updates/v1_47#_pnpm-package-manager-support",
    "id": 1703
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Source Control  \n### Single view  \nThe Source Control view has been consolidated into a single view:  \n![Source Control with a single view](images/1_47/scm.png)  \nAll repositories are rendered in a single view, so you can get a better overview of the entire workspace status. Additionally, the Source Control view can now be moved to the panel and other views can be moved to the Source Control view container.",
    "url": "https://code.visualstudio.com/updates/v1_47#_single-view",
    "id": 1704
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### View and Sort  \nWe have added support for sorting your changes in the source control view by name, path (default), and state when using the list view option. We have consolidated the view options (list vs. tree) and sort options into a new **View & Sort** menu item in the context menu.  \n![View & Sort in Source Control](images/1_47/scm-view&sort.png)",
    "url": "https://code.visualstudio.com/updates/v1_47#_view-and-sort",
    "id": 1705
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Git: Restore squash message  \nSimilar to usual `git merge` command, the SCM view will now restore the SCM input with the default message if the user is in the middle of a `git merge --squash` command.",
    "url": "https://code.visualstudio.com/updates/v1_47#_git:-restore-squash-message",
    "id": 1706
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Languages  \n### TypeScript 3.9.6  \nVS Code now bundles TypeScript 3.9.6. This minor update fixes a few bugs, including one that could cause the TypeScript server to crash on certain source code patterns.",
    "url": "https://code.visualstudio.com/updates/v1_47#_typescript-3.9.6",
    "id": 1707
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Browser support  \n### Large file upload support  \nYou can now upload large files and folders to the web version of VS Code and progress will be reported accurately so that you can track the number of bytes that have been uploaded, as well as the upload speed.  \n![Web upload indicator in bottom Status bar](images/1_47/web-upload.gif)",
    "url": "https://code.visualstudio.com/updates/v1_47#_large-file-upload-support",
    "id": 1708
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Towards text file encoding support  \nDuring this milestone, a lot of work went into full support for text encodings in the browser for reading and writing files. We rely on two libraries that are now supported in browsers by leveraging webpack:  \n* [`iconv-lite`](https://github.com/ashtuchkin/iconv-lite) to read and write encodings\n* [`jschardet`](https://github.com/aadsm/jschardet): to guess encodings from textual content  \nThis work will continue in July and should be generally available soon.",
    "url": "https://code.visualstudio.com/updates/v1_47#_towards-text-file-encoding-support",
    "id": 1709
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### TypeScript 4.0 support  \nThis iteration, we've continued improving our support for [TypeScript 4.0](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-beta/). Some highlights include:  \n* **Highlight calls to deprecated symbols in the editor with strikethrough**  \n![Call to a deprecated function rendered in the editor](images/1_47/ts-deprecated.png)  \n* **Explain reasons why a given refactoring cannot be applied**  \n![Displaying the reason a refactoring cannot be applied](images/1_47/ts-refactor-reason.png)  \n* **Improved auto imports** - Read more in the [TypeScript 4.0 blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-beta/#smarter-auto-imports).  \nYou can try out these features today by installing the [TypeScript nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).",
    "url": "https://code.visualstudio.com/updates/v1_47#_typescript-4.0-support",
    "id": 1710
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Partial IntelliSense support while large JavaScript or TypeScript projects are loading  \nThe TypeScript 4.0 beta also brings a new feature that should help reduce the time you spend waiting while a large JavaScript or TypeScript project is being loading. To explain how this works, we first need to cover a little background on how current versions of TypeScript work.  \nWhen you open a JavaScript or TypeScript file in VS Code, the TypeScript language service determines which project that file belongs to and then loads the associated project for it. Sometimes this project can be quite large, such as with the core VS Code codebase, which consists of many thousands of TypeScript files. While a project is being loaded, VS Code able to handle basic syntax operations, such as getting the document outline and enabling code folding, but it cannot currently provide IntelliSense or other more advanced language features because they depend on understanding the entire project. In order to provide auto imports, for example, the TypeScript language service needs to know all exported symbols in a project.  \nThe changes in TypeScript 4.0 make it possible for VS Code provide IntelliSense and other more advanced language features while a large project is still loading. The caveat is that the IntelliSense we can provide is limited to consulting the current file instead of the entire project. This means that features such as suggestions and **Go to Definition** will work, but we will only show suggestions from the current file and you can only run **Go to Definition** to jump to another symbol in the current file.  \nIf you work with large JavaScript and TypeScript projects, we are interested in hearing your feedback on this new feature. You can try it today using the  [TypeScript nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Our hope is that it allows you to start work with your code almost instantly until the more complete, project-wide IntelliSense becomes available.",
    "url": "https://code.visualstudio.com/updates/v1_47#_partial-intellisense-support-while-large-javascript-or-typescript-projects-are-loading",
    "id": 1711
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Undo/Redo for Code Action  \nWe are working on being able to undo and redo Code Actions and refactorings. A prominent example is the Java class rename refactoring, which makes a textual change as well as renaming the file on disk. This can now be undone but it still requires triggering undo two times. Stay tuned as we further improve this and please provide early feedback.",
    "url": "https://code.visualstudio.com/updates/v1_47#_undo/redo-for-code-action",
    "id": 1712
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Contributions to extensions  \n### Notebooks  \nThe VS Code team is continuing on native support for Notebooks. To help with development, we've created a [GitHub Issue Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks) extension, which lets you search GitHub issues and pull requests. This extension is still in preview and requires using VS Code [Insiders](https://code.visualstudio.com/insiders), but it lets experience Notebooks first hand and we welcome your feedback.  \n**Updated UX**  \nWe've updated the visual look of Notebook cells for a more compact design. We've also added shadow outlines to selected cells to make the selection state more obvious.  \n![Updated Notebook UX](images/1_47/notebook-ux.gif)  \n**Notebook Hot Exit support**  \nWe have added Hot Exit support in Notebooks to allow extensions to handle backups and restoration. Your unsaved local changes can now be serialized by extensions and restored when the workspace is reopened.  \n**Undo/Redo enhancement**  \nWe added support for extensions to contribute to the Undo/Redo stacks. Extensions can now control what operations are undoable. For example, in a GitHub Issue Notebook, you can select the **Lock** button to make the cell content readonly, and also undo/redo this operation through the normal Undo/Redo commands.  \n![Undo/Redo in GitHub Issue Notebook](images/1_47/notebook-undo-redo.gif)  \n*Theme: [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Create Untitled Notebook**  \nWe extended the **New File** command (`kb(workbench.action.files.newUntitledFile)`) to support creating new untitled Notebook files. For example, you can use the keybinding below to quickly create a GitHub Issue Notebook and run queries.  \n```json\n{\n\"key\": \"cmd+i\",\n\"command\": \"workbench.action.files.newUntitledFile\",\n\"args\": { \"viewType\": \"github-issues\" }\n}\n```  \n![Create Untitled GitHub Issue Notebook](images/1_47/notebook-create-untitled.gif)  \n*Theme: [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Notebook color tokens**  \nWe've also added the following color tokens for Notebooks:  \n* `notebook.cellBorderColor`: The border color for Notebook cells\n* `notebook.cellHoverBackground`: The background color of a cell when the cell is hovered\n* `notebook.cellInsertionIndicator`: The color of the Notebook cell insertion indicator\n* `notebook.focusedCellBackground`: The background color of a cell when the cell is focused\n* `notebook.focusedCellBorder`: The color of the cell's top and bottom border when the cell is focused\n* `notebook.focusedCellShadow`: The color of the cell shadow when cells are focused\n* `notebook.focusedEditorBorder`: The color of the Notebook cell editor border  \n**Two new samples show how to support debugging in Notebooks**  \n* [Debugging in a JavaScript Notebook](https://github.com/microsoft/vscode-nodebook/blob/main/README.md) sample  \nThis sample shows how to implement Notebook debugging functionality based on the existing VS Code debugger extensions.  \n![Running and evaluating JavaScript Notebook cells](images/1_47/debugging-in-nodebook.gif)  \n* [Jupyter Notebook Debugging with the Xeus Kernel](https://github.com/microsoft/vscode-simple-jupyter-notebook/blob/main/README.md) sample  \nThis sample shows how to implement Notebook debugging functionality based on the xeus kernel and its native support for the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/).  \n![Running and evaluating Jupyter Notebook cells](images/1_47/debugging-cells.gif)",
    "url": "https://code.visualstudio.com/updates/v1_47#_notebooks",
    "id": 1713
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Notebook extension guide  \nIf you're interested in creating Notebook extensions for VS Code, there is a new guide detailing the [Notebook API](https://code.visualstudio.com/api/extension-guides/notebook). You'll learn about the API as well as the details of the VS Code Notebook infrastructure and Notebook extension development best practices.",
    "url": "https://code.visualstudio.com/updates/v1_47#_notebook-extension-guide",
    "id": 1714
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.47 include:  \n* Remote - SSH: Remote server can listen on a socket instead of a port.\n* Dev Containers: Prompt to open repository in a volume.\n* Dev Containers and WSL: Check out the recent [Using Dev Containers in WSL 2](https://code.visualstudio.com/blogs/2020/07/01/containers-wsl) blog post.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_47.md).  \nIf you are new to VS Code Remote Development, you can get started with these introductory tutorials:  \n* [Working over SSH](https://code.visualstudio.com/docs/remote/ssh-tutorial)\n* [Developing inside Dev Containers](https://code.visualstudio.com/docs/devcontainers/tutorial)\n* [Using Windows Subsystem for Linux](https://code.visualstudio.com/docs/remote/wsl-tutorial)",
    "url": "https://code.visualstudio.com/updates/v1_47#_remote-development",
    "id": 1715
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Azure Account  \nThe newest version of the Azure Account extension now exposes a credentials object that can be used with the latest [Azure SDK](https://github.com/azure/azure-sdk-for-js).",
    "url": "https://code.visualstudio.com/updates/v1_47#_azure-account",
    "id": 1716
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Some updates for this release include:  \n* Markdown hovers in the Issues view.\n* Label suggestions in the new issue editor.\n* Hover support for issues formatted as GH-123.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.18.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_47#_github-pull-requests-and-issues",
    "id": 1717
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Hex Editor  \nThe [HexEditor](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor) extension continues to be improved upon to provide a native hexadecimal editing experience within VS Code. The major updates to the extension this release include simple editing support (allowing users to undo, redo, edit existing hex cells, and add new cells to the end of the document) and large file optimization allowing users to open files above 18 megabytes, which previously wasn't possible.  \n![Editing in the HexEditor extension](images/1_47/hex-editor-editing.gif)  \nA full list of notable changes can be found in the [CHANGELOG](https://github.com/microsoft/vscode-hexeditor/blob/main/CHANGELOG.md). Any feedback or issues experienced can be filed against the [vscode-hexeditor repository](https://github.com/microsoft/vscode-hexeditor).",
    "url": "https://code.visualstudio.com/updates/v1_47#_hex-editor",
    "id": 1718
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Extension authoring  \n### AccessibilityInformation  \nWe have finalized the `AccessibilityInformation` in the `TreeItem`, `StatusBarItem`, and `TimelineItem` elements to support screen readers. `AccessibilityInformation` contains a `label` and a `role`. The `label` is read out by a screen reader once the item has focus. `role` of the item defines how a screen reader interacts with it. The `role` should be set in special cases when, for example, a tree-like element behaves like a checkbox. If `role` is not specified, VS Code will pick the appropriate `role` automatically.",
    "url": "https://code.visualstudio.com/updates/v1_47#_accessibilityinformation",
    "id": 1719
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Fallback message for \"go to location\"  \nThe `editor.action.goToLocations` command can now show a fallback message when no locations could be found. This allows extensions to implement features like **Go to Super Type** that behave just like built-in features, for example **Go to Definition**. The snippet below is a full sample of an extension invoking this command:  \n```ts\nvscode.commands.executeCommand(\n'editor.action.goToLocations',\nvscode.window.activeTextEditor.document.uri, //anchor uri and position\nvscode.window.activeTextEditor.selection.start,\n[], // results (vscode.Location[])\n'goto', // mode\n'No Super Types Found' // <- message\n);\n```",
    "url": "https://code.visualstudio.com/updates/v1_47#_fallback-message-for-go-to-location",
    "id": 1720
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Guidelines for improving the single file debug experience  \nFor debug extensions that want to improve the single file debug experience by adding a \"Run\" and/or \"Debug\" button to the editor, we recommend following these guidelines for a consistent look and feel:  \n* Contribute Run and/or Debug commands in the package.json (see [Mock Debug](https://github.com/microsoft/vscode-mock-debug/blob/dc3ccfeb2195a1d2e5876f40fc9436b3b6f58a40/package.json#L82-L93)):\n* Use the command titles \"Run File\"/\"Debug File\" or \"Run Python File\"/\"Debug Python File\".\n* Use the `$(play)` icon for Run and `$(debug-alt-small)` for Debug.\n* Add the commands to the editor title area ([see Mock Debug](https://github.com/microsoft/vscode-mock-debug/blob/dc3ccfeb2195a1d2e5876f40fc9436b3b6f58a40/package.json#L68-L81)):\n* To make the commands only visible for specific languages use a \"when\" clause, for example, `\"resourceLangId == python\"`.\n* Put the Run command in the `1_run@10` group and the Debug command in the `1_run@20` group.",
    "url": "https://code.visualstudio.com/updates/v1_47#_guidelines-for-improving-the-single-file-debug-experience",
    "id": 1721
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### CodeActionProviderMetadata.documentation  \nThe new `documentation` property on `CodeActionProviderMetadata` lets extension provide static documentation for the code actions they return. This documentation is shown at the bottom of the list of code actions when the provide returns a code action:  \n![A documentation entry in the Code Actions menu](images/1_47/ts-refactor-docs.png)  \nA command is executed when the user selects the documentation entry. This command can show the documentation in the editor or open it in a browser.",
    "url": "https://code.visualstudio.com/updates/v1_47#_codeactionprovidermetadata.documentation",
    "id": 1722
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Open and Save dialog title  \nThe API for providing a `title` for Open and Save file dialogs via the `OpenDialogOptions` and `SaveDialogOptions` has been finalized. Note that not all operating systems allow this title to be set, so the behavior may differ depending on where your extension is running.",
    "url": "https://code.visualstudio.com/updates/v1_47#_open-and-save-dialog-title",
    "id": 1723
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New extension categories  \nYou can now use following newly added categories to categorize your extensions.  \n* Data Science\n* Machine Learning\n* Visualization\n* Testing\n* Notebooks",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-extension-categories",
    "id": 1724
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Secondary button style  \nWe've introduced a secondary button style to be used when needing to make a button less prominent:  \n* `button.secondaryForeground`\n* `button.secondaryBackground`\n* `button.secondaryHoverBackground`",
    "url": "https://code.visualstudio.com/updates/v1_47#_secondary-button-style",
    "id": 1725
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### GitHub Workflow badges  \nYou can now add [GitHub Workflow badges](https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge) to the list of badges of a published extension, since `github.com` was added to the [list of Approved Badge sources](https://code.visualstudio.com/api/references/extension-manifest#approved-badges).  \n![GitHub Workflow badge](images/1_47/github-badge.png)",
    "url": "https://code.visualstudio.com/updates/v1_47#_github-workflow-badges",
    "id": 1726
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Enabling Proposed API through argv.json  \nThe field `enable-proposed-api` is now supported in `argv.json`. This allows extension authors to run their proposed API extension in released builds for long-term dogfooding, without needing to open VS Code via the command line and pass the `--enable-proposed-api` CLI flag.",
    "url": "https://code.visualstudio.com/updates/v1_47#_enabling-proposed-api-through-argv.json",
    "id": 1727
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New codicon icons  \nWe've added the following new icons to our [codicon](https://code.visualstudio.com/api/references/icons-in-labels) library:  \n* `debug-alt-small`\n* `vm-connect`  \n![Codicons icons](images/1_47/codicons-icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-codicon-icons",
    "id": 1728
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Terminal link provider  \nBuilding on top of [the terminal's new link system added in the previous release](https://code.visualstudio.com/updates/v1_46#_improved-link-support), this new proposal `window.registerLinkProvider` allows an extension to attach links to the terminal, including a tooltip label that is displayed on hover.  \n![Terminal Link Provider](images/1_47/terminal-link-provider.png)  \nThis contrasts with the previously proposed (now deprecated) [\"link handler\" API,](https://code.visualstudio.com/updates/v1_44#_terminal-link-handlers) which would allow your extension to possibly handle the link in question, and if it doesn't, there would be a fallback chain. This new model where links will definitely be handled fits in better with the vision in mind where links could have a list of possible actions.",
    "url": "https://code.visualstudio.com/updates/v1_47#_terminal-link-provider",
    "id": 1729
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New API for Run without Debugging  \nVS Code's \"Run without Debugging\" feature is a variant of debugging where an existing debug configuration is reused for running a program instead of debugging it. A consequence of this run mode is that the program does not break into the debugger, neither for hitting breakpoints nor for any other reason.  \nIn this milestone we provide official extension API for \"Run without Debugging\": a new property `noDebug` has been added to the `DebugSessionOptions` of the `debug.startDebugging` function. `noDebug` controls whether the session about to start should run with or without debugging. When the `noDebug` property is missing, the value from the parent session (if there is one) is used. If there is no parent session, the value 'false' is assumed for a missing `noDebug` property.  \nPlease note: Previously it was possible to add a `noDebug` flag to a launch configuration to achieve the same effect. This unofficial API is now deprecated (but still supported) and we suggest that extensions transition to the new API.",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-api-for-run-without-debugging",
    "id": 1730
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### New API for reducing clutter in the CALLSTACK view  \nWith the arrival of sophisticated debug extensions and debug setups, more debug sessions show up in the CALL STACK tree view and make them look crowded.\nIn most cases the debug sessions are useful to users and they need to have full control over them. In other cases some debug sessions are just implementation artifacts or a grouping mechanism for a set of child sessions.  \nIn order to make the CALL STACK view less crowed in common cases, we have introduced a feature to hide a parent debug session node if it only has a single child session.\nThis feature is called \"compact mode\" and is available through a new optional `compact` property on the `DebugSessionOptions` of the `debug.startDebugging` function.  \nIf `compact` is true, the parent of the newly created debug session will be hidden in the CALL STACK view as long as it only has a single child.\nIf `compact` is false or missing, the parent node stays visible (which is the current behavior).",
    "url": "https://code.visualstudio.com/updates/v1_47#_new-api-for-reducing-clutter-in-the-callstack-view",
    "id": 1731
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Markdown hovers in trees  \nThere is new proposed API that allows the `tooltip` of a `TreeItem` to be a `MarkdownString`. In addition to allowing Markdown for the tooltip, there is also a new `resolveTreeItem` on the `TreeDataProvider`. The idea behind `resolveTreeItem` is that properties that might take longer to calculate (currently only the `tooltip`) can be resolved later, instead of calculated up front for every tree item. You can see `resolveTreeItem` and the Markdown `tooltip` in use in the [GitHub Pull Requests and Issues extension](https://github.com/microsoft/vscode-pull-request-github/commit/c94ce87cc2f66d372d891ab19052b54f31ae6146#diff-ec21c136b5245a574a4d0925bf536fef).",
    "url": "https://code.visualstudio.com/updates/v1_47#_markdown-hovers-in-trees",
    "id": 1732
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Engineering  \n### Using TypeScript 4.0 to build VS Code  \nVS Code is now built using a [nightly build](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) of TypeScript 4.0.  \nThis new TypeScript version helped us catch a few [potential bugs around accessors](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-beta/#breaking-changes) and also helps us test the upcoming TypeScript release.",
    "url": "https://code.visualstudio.com/updates/v1_47#_using-typescript-4.0-to-build-vs-code",
    "id": 1733
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n## Documentation and extensions  \n### CMake Tools for C++  \nNew tutorial for [developing C++ applications with CMake](https://code.visualstudio.com/docs/cpp/cmake-linux) and the [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools) extension.  \n![CMake Tools extension](images/1_47/cmake-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_47#_cmake-tools-for-c++",
    "id": 1734
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2020 Release (1.47)  \n### Java Pack installer for macOS  \nThe [Visual Studio Code for Java Pack Installer](https://aka.ms/vscode-java-installer-mac) downloads the necessary dependencies and extensions for Java development in Visual Studio Code on macOS.  \n![Java Pack installer for macOS](images/1_47/java-installer-macos.png)",
    "url": "https://code.visualstudio.com/updates/v1_47#_java-pack-installer-for-macos",
    "id": 1735
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Workbench  \n### Search Editor  \nWe added an **Open Search Editor** command to open an existing search editor if one exists, or to otherwise create a new one. The pre-existing command **Open new Search Editor** has been renamed to **New Search Editor**, and will always create a new Search Editor.  \nSearch Editors also now support custom `search.sortOrder` configurations, such as sorting by file type, modified date, or result count.",
    "url": "https://code.visualstudio.com/updates/v1_48#_search-editor",
    "id": 1737
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Extensions: Overflow menu cleanup  \nThe Extensions view filter actions are now displayed under a separate filter action (funnel button):  \n![Extensions filter menu](images/1_48/extensions-filter-menu.png)  \n*Theme: GitHub Light*  \nThe Extensions view **Views and More Actions** (**...**) menu has been refactored for better organization of extension queries (such as Installed or Recommended) and other actions like **Check for Extension Updates** and **Enable All Extensions**:  \n![Extensions overflow menu](images/1_48/extensions-overflow-menu.png)  \n*Theme: GitHub Light*",
    "url": "https://code.visualstudio.com/updates/v1_48#_extensions:-overflow-menu-cleanup",
    "id": 1738
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Source Control  \n### Always show repositories  \nThere's a new setting, `scm.alwaysShowRepositories`, that makes the Source Control view always show the repository rows, even if there's only a single repository open:  \n![Always show repositories](images/1_48/scm-always-show-repositories.gif)",
    "url": "https://code.visualstudio.com/updates/v1_48#_always-show-repositories",
    "id": 1739
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Better keyboard navigation  \nAs you navigate the Source Control view, pressing `kbstyle(Space)` on a change will now open it as a preview editor and keep the focus in the Source Control view, for easier keyboard navigation.",
    "url": "https://code.visualstudio.com/updates/v1_48#_better-keyboard-navigation",
    "id": 1740
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Git: Overflow menu cleanup  \nThanks to the new submenu proposed API, the Git **View and More Actions** (**...**) menu has been refactored for better organization of several commands:  \n![Git menu with submenus](images/1_48/git-submenus.png)",
    "url": "https://code.visualstudio.com/updates/v1_48#_git:-overflow-menu-cleanup",
    "id": 1741
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### GitHub: Publish to a public repository  \nWhen publishing a repository to GitHub, you now have the option to make the repository public, as opposed to the previous default, private:  \n![Publish public repo](images/1_48/github-publish-public.png)",
    "url": "https://code.visualstudio.com/updates/v1_48#_github:-publish-to-a-public-repository",
    "id": 1742
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Debugging  \n### UX improvements  \n* The default value of the `debug.openDebug` setting has been changed to `openOnFirstSessionStart`. As a result, the Debug view will only be automatically opened when the first debug session is started.  \n* We have updated the debug icon in the Status bar to be better aligned with the icon we use in the Activity bar. This new icon should represent more clearly that the breakpoints will be respected when the program is started this way.  \n![Debug status new icon](images/1_48/debug-status.png)",
    "url": "https://code.visualstudio.com/updates/v1_48#_ux-improvements",
    "id": 1743
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Debug: Open Link command  \nA new **Debug: Open Link** command has been added to quickly debug any URL. Previously, to debug a browser, you had to install the Debugger for Chrome extension and write a `launch.json` config file to debug a page. This command allows you to debug any URL without needing additional launch configurations.  \n![Debug URL](images/1_48/debug-open-link.gif)  \n*Theme: Earthsong*  \nIf you have a URL selected in your active editor, it will open that automatically. Otherwise, VS Code will prompt you to enter a URL, pre-filling with the URL in your clipboard, if any.  \nYou can adjust the debug configuration used in this command via the `debug.javascript.debugByLinkOptions` setting.",
    "url": "https://code.visualstudio.com/updates/v1_48#_debug:-open-link-command",
    "id": 1744
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### JavaScript Debugger improvements  \nThe previous release of VS Code included our new JavaScript debugger. We'd like to thank the community for your feedback on it, and this release includes dozens of resulting [fixes and improvements](https://github.com/issues?q=is%3Aopen+is%3Aclosed+label%3Abug+assignee%3Aconnor4312+milestone%3A%22July+2020%22). If you run into any issues with debugging, please make sure to [file an issue](https://github.com/microsoft/vscode-js-debug/issues/new/choose) if you haven't already.",
    "url": "https://code.visualstudio.com/updates/v1_48#_javascript-debugger-improvements",
    "id": 1745
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Browser support  \n### Text file encoding support  \nAll of the text file encodings of the desktop version of VS Code are now also supported when running in a browser.  \n![Web encoding support](images/1_48/web-encoding.gif)  \nAs such, the settings `files.encoding` and `files.autoGuessEncoding` can be now configured for web and work, in the same way as in the desktop version.",
    "url": "https://code.visualstudio.com/updates/v1_48#_text-file-encoding-support",
    "id": 1746
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Settings editor improvements  \nThe highlight of this milestone was our work on improving the Settings editor accessibility, which is still a work in progress. Over the past couple iterations, we have been listening to feedback and exploring options for making the Settings editor easier to use with a screen reader. We investigated two possible solutions to these issues and have produced two prototypes, and we are now looking for your feedback to help us learn what works best. Please see GitHub [issue #104318](https://github.com/microsoft/vscode/issues/104318) for details, download links, and to leave your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_48#_settings-editor-improvements",
    "id": 1747
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### TypeScript 4.0 support  \nWe will be picking up [TypeScript 4.0](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/) next iteration, but the current VS Code release includes support for all the upcoming features if you want to try the [4.0-RC](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/) ahead of time. Some highlights:  \n* Partial IntelliSense while a project is loading.\n* Highlight calls to deprecated symbols in the editor with strikethrough.\n* Explain reasons why a given refactoring cannot be applied.\n* Improved auto imports - Read more in the [TypeScript 4.0 blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/#smarter-auto-imports).  \nYou can try out these features today by installing the [TypeScript 4.0-rc](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/) into your workspace or by installing the [TypeScript nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).",
    "url": "https://code.visualstudio.com/updates/v1_48#_typescript-4.0-support",
    "id": 1748
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Contributions to extensions  \n### Hex Editor  \nThe [HexEditor extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor) sees further improvements this iteration with support for copy and paste, file watching, and find and replace. A full list of notable changes can be found in the [CHANGELOG](https://github.com/microsoft/vscode-hexeditor/blob/main/CHANGELOG.md). Any feedback or issues experienced can be filed against the [vscode-hexeditor repository](https://github.com/microsoft/vscode-hexeditor/issues).  \n**Copy and Paste Support**  \nWe've added the ability to copy values to your clipboard and paste them either inside the editor, or into whatever other source you want.  \n![Copy and Paste](images/1_48/hex-copy-paste.gif)  \n**Find and Replace Support**  \nThe hex editor now comes with a similar find and replace widget to the  one found within VS Code. It supports searching hexadecimal fields using wildcards (for example, `FF ?? DD`) and regex searching on the decoded text section.  \n![Find and Replace](images/1_48/hex-find-replace.gif)  \n**Multi Select**  \nYou can now use drag and drop selection, `kbstyle(Shift)` and `(Ctrl+click)` selection, and holding `kbstyle(Shift)` and navigating with the keyboard to create a selection.  \n![Multi Select](images/1_48/hex-selection.gif)",
    "url": "https://code.visualstudio.com/updates/v1_48#_hex-editor",
    "id": 1749
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.48 include:  \n* Dev Containers: Pull environment variables from login and shell scripts.\n* Remote - SSH: Fewer prompts when starting or maintaining an SSH connection.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_48.md).",
    "url": "https://code.visualstudio.com/updates/v1_48#_remote-development",
    "id": 1750
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Notebooks  \nThe VS Code team is continuing work on native support for Notebooks. To help with development, we've created a [GitHub Issue Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks) extension, which lets you search GitHub issues and pull requests. This extension is still in preview and requires using VS Code [Insiders](https://code.visualstudio.com/insiders), but it lets you experience Notebooks first hand, and we welcome your feedback.  \n**Notebook UX**  \nWe continue to tweak the general UX of Notebooks. This month we made cells even more compact and added a **Cell menu** (**...**) to the toolbar to make cell-related actions even easier to find.  \n![Cell menu](images/1_48/notebook-ux.png)  \n**Drag and drop enhancement**  \nWe improved the experience of drag and drop in Notebooks. Dragging a collapsed Markdown cell will move all nested cells inside the folding region.  \n![Drag grouped cells](images/1_48/notebook-dnd-grouped-cells.gif)  \n**Reopen with editor**  \nYou can now reopen the Notebook document in the text editor, or any other available editor types directly from the context menu of the editor title.  \n![Reopen with](images/1_48/notebook-reopen-with.gif)  \n**Collapsing cells and outputs**  \nYou can now collapse cell outputs and inputs, which are useful when you want to clean up your Notebook view to focus on other parts of it.  \n![Collapse cells](images/1_48/cell-collapse.gif)  \n**Jupyter notebooks using the Python Extension**  \nThe Python Extension team has announced a preview for using Jupyter with VS Code's native notebooks. You can read details in their [Python Notebooks blog post](https://devblogs.microsoft.com/python/notebooks-are-getting-revamped/).",
    "url": "https://code.visualstudio.com/updates/v1_48#_notebooks",
    "id": 1751
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Some updates for this release include:  \n* Offer to fork a repository when you don't have permissions, when you want to push a commit or **Start Working on an  Issue**.\n* Upgraded the version of the GitHub rest API we use for better performance.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.19.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0190) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_48#_github-pull-requests-and-issues",
    "id": 1752
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Extension authoring  \n### Task definition when clause  \nTask definitions now have an optional `when` property. You can use the `when` property to set a condition for when tasks of that type are available. If there is a case where even if one of your tasks has been configured in the users `tasks.json` file but it shouldn't be available anywhere from the VS Code UI, you can set a `when` condition to prevent the task from showing anywhere.",
    "url": "https://code.visualstudio.com/updates/v1_48#_task-definition-when-clause",
    "id": 1753
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Tree view initial visibility  \nTree views can set a `visibility` on their `package.json` contribution. The options are `visible` (default), `collapsed`, and `hidden`. The visibility state is only used the first time the user opens a workspace, after that, the visibility is always restored to whatever the user set it to.",
    "url": "https://code.visualstudio.com/updates/v1_48#_tree-view-initial-visibility",
    "id": 1754
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Git: Get remote sources command  \nThe Git extension now exposes a new extension API command to show a remote source Quick Pick interface: `git.api.getRemoteSources`. Read more about this in [issue #102394](https://github.com/microsoft/vscode/issues/102394#issuecomment-658195488).",
    "url": "https://code.visualstudio.com/updates/v1_48#_git:-get-remote-sources-command",
    "id": 1755
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Using Authentication Providers  \nThe API for retrieving authentication information from Authentication Providers is now stable. Using `getSession` and `onDidChangeSession`, extensions are able to request login information and listen for changes for the two built- in Authentication Providers, Microsoft and GitHub. See [here](https://github.com/microsoft/vscode-extension-samples/tree/main/github-authentication-sample) for a sample extension on how to authenticate to GitHub.",
    "url": "https://code.visualstudio.com/updates/v1_48#_using-authentication-providers",
    "id": 1756
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### New Webview with codicons extension sample  \nWe've added a new [Webview extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-codicons-sample) that includes a reference to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels). This uses the [vscode-codicons npm package](https://www.npmjs.com/package/vscode-codicons) and references the packages from a webview.  \n![Webview codicons sample](images/1_48/codicons-webview.png)",
    "url": "https://code.visualstudio.com/updates/v1_48#_new-webview-with-codicons-extension-sample",
    "id": 1757
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Submenus  \nThe menu API has been extended to support submenus. This has already been adopted by the Git extension to clean its overflow menu. Check out the [syntax](https://github.com/microsoft/vscode/issues/100172#issuecomment-645203070) as well as the [possibilities](https://github.com/microsoft/vscode/pull/102784#issuecomment-663036534) that this API enables.  \n![Git menu with submenus](images/1_48/git-submenus.png)",
    "url": "https://code.visualstudio.com/updates/v1_48#_submenus",
    "id": 1758
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Stopping debug sessions  \nVS Code uses the function `vscode.debug.startDebugging` for starting debug sessions. In this milestone, we introduced the matching function `vscode.debug.stopDebugging` to stop a specific session (or all sessions). With this new API, it is no longer necessary to use the less predictable **Debug: Stop** command (command ID: `workbench.action.debug.stop`) which only stops the \"active\" debug session.",
    "url": "https://code.visualstudio.com/updates/v1_48#_stopping-debug-sessions",
    "id": 1759
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n## Documentation and extensions  \n### New Dev Container topics  \nThere are new topics for working with Containers in VS Code:  \n* [Attach to Container](https://code.visualstudio.com/docs/devcontainers/attach-container) - Attach to an already running Docker Container.\n* [Create a Dev Container](https://code.visualstudio.com/docs/devcontainers/create-dev-container) - Create a custom container matching your development environment.\n* [devcontainer.json reference](https://containers.dev/implementors/json_reference) - Control container creation through `devcontainer.json` properties.  \nAnd check out this blog post on using [Dev Containers in Education](https://code.visualstudio.com/blogs/2020/07/27/containers-edu) to help educators and students create stable, reproducible classroom setups.",
    "url": "https://code.visualstudio.com/updates/v1_48#_new-dev-container-topics",
    "id": 1760
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Java lightweight mode  \nThe [Language Support for Java](https://marketplace.visualstudio.com/items?itemName=redhat.java) extension now supports a [lightweight mode](https://code.visualstudio.com/docs/java/java-project#_lightweight-mode), for when you want to quickly work with your Java source files. You'll still get powerful language features such as code completion, navigation, outlining, and syntax checking for your source code, as well as the JDK.",
    "url": "https://code.visualstudio.com/updates/v1_48#_java-lightweight-mode",
    "id": 1761
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2020 Release (1.48)  \n### Azure Cache extension  \nThe new [Azure Cache](https://marketplace.visualstudio.com/items?itemName=ms-azurecache.vscode-azurecache) extension makes it easy to browse through data in your [Azure Caches](https://azure.microsoft.com/services/cache).",
    "url": "https://code.visualstudio.com/updates/v1_48#_azure-cache-extension",
    "id": 1762
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Format multiple selections  \nThe **Format Selection** command is now multi-cursor aware. Select multiple lines or statements, trigger **Format Selection**, and formatting will be applied to all sections.",
    "url": "https://code.visualstudio.com/updates/v1_49#_format-multiple-selections",
    "id": 1764
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Find cursor move on type control  \nWhen typing in the Find input box, VS Code automatically searches and moves the cursor to the nearest find result. You can now control if the cursor should jump to the find matches while typing by configuring `editor.find.cursorMoveOnType`. When disabled, VS Code will only move the cursor when you press `Enter/Shift+Enter`.  \nBelow, when searching for the word 'bash', the cursor doesn't jump to `bash_completion` until `kbstyle(Enter)` is pressed:  \n![Disable editor.find.cursorMoveOnType](images/1_49/editor-find-cursorMoveOnType.gif)",
    "url": "https://code.visualstudio.com/updates/v1_49#_find-cursor-move-on-type-control",
    "id": 1765
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Only show trailing whitespace  \nThere is a new option `trailing` for the editor setting `editor.renderWhitespace` to only show trailing whitespace.  \n```json\n\"editor.renderWhitespace\": \"trailing\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_49#_only-show-trailing-whitespace",
    "id": 1766
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Numeric font-weight values  \nNumeric value support was added to the editor setting `editor.fontWeight`, which now accepts values in the range from 1 to 1000, in addition to the string values `\"normal\"` and `\"bold\"`.  \n```json\n\"editor.fontWeight\": 350\n```",
    "url": "https://code.visualstudio.com/updates/v1_49#_numeric-font-weight-values",
    "id": 1767
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Workbench  \n### Case changing in regex replace  \nIn June, we added support for changing the case of regex matching groups while doing a Find/Replace in the editor. This month, we've added the same feature for Search/Replace across the workspace. This is done with the modifiers `\\u\\U\\l\\L`, where `\\u` and `\\l` will upper/lowercase a single character, and `\\U` and `\\L` will upper/lowercase the rest of the matching group.",
    "url": "https://code.visualstudio.com/updates/v1_49#_case-changing-in-regex-replace",
    "id": 1768
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Improved keybinding diagnostics  \nTo troubleshoot keybinding problems, there is now a command **Developer: Toggle Keyboard Shortcuts Troubleshooting**. This will activate logging of dispatched keyboard shortcuts and will open an output panel with the corresponding log file.  \nYou can then press your desired keybinding and check what keyboard shortcut VS Code detects and what command is invoked.  \nFor example, when pressing `cmd+/` in a code editor on macOS, the logging output would be:  \n```\n[KeybindingService]: / Received  keydown event - modifiers: [meta], code: MetaLeft, keyCode: 91, key: Meta\n[KeybindingService]: | Converted keydown event - modifiers: [meta], code: MetaLeft, keyCode: 57 ('Meta')\n[KeybindingService]: \\ Keyboard event cannot be dispatched.\n[KeybindingService]: / Received  keydown event - modifiers: [meta], code: Slash, keyCode: 191, key: /\n[KeybindingService]: | Converted keydown event - modifiers: [meta], code: Slash, keyCode: 85 ('/')\n[KeybindingService]: | Resolving meta+[Slash]\n[KeybindingService]: \\ From 2 keybinding entries, matched editor.action.commentLine, when: editorTextFocus && !editorReadonly, source: built-in.\n```  \nThe first keydown event is for the `MetaLeft` key (`cmd`) and cannot be dispatched. The second keydown event is for the `Slash` key (`/`) and is dispatched as `meta+[Slash]`. There were two keybinding entries mapped from `meta+[Slash]` and the one that matched was for the command `editor.action.commentLine`, which has the `when` condition `editorTextFocus && !editorReadonly` and is a built-in keybinding entry.",
    "url": "https://code.visualstudio.com/updates/v1_49#_improved-keybinding-diagnostics",
    "id": 1769
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Screencast mode customization  \nThere are several new settings so you can tune your screencast sessions:  \n* `screencastMode.keyboardOverlayTimeout` - Change the timeout (milliseconds) for the keyboard shortcut overlay.\n* `screencastMode.mouseIndicatorColor` - Set the mouse indicator color (hex #RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n* `screencastMode.mouseIndicatorSize` - Control the mouse indicator size (pixels).",
    "url": "https://code.visualstudio.com/updates/v1_49#_screencast-mode-customization",
    "id": 1770
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Source Control  \n### Source Control Repositories view  \nThe Source Control Repositories view (formerly known as Source Control Providers view) was reintroduced to allow finer grain control over which source control repositories should be visible in the Source Control view. As before, this view supports multiple selection so you can have multiple repositories visible at the same time.  \n![Source Control repository view](images/1_49/scm-repositories.gif)",
    "url": "https://code.visualstudio.com/updates/v1_49#_source-control-repositories-view",
    "id": 1771
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Debugging  \n### Debug Console filter  \nThe Debug Console now supports filtering, making it easier for users to find the output they are looking for, or to hide irrelevant logging output. The filter also supports exclude patterns (for example, patterns starting with an exclamation mark `!`). The filter only applies to program output but not to evaluations run by a user. Like other input boxes in VS Code, you can use the `up` and `down` arrow keys to navigate between old filter inputs.  \nIn the short video below, the output is filtered to entries that include the text 'http', do not include the text 'http' (using the filter `!http`), and then include the word 'Severity':  \n![Debug Console filtering](images/1_49/filter.gif)",
    "url": "https://code.visualstudio.com/updates/v1_49#_debug-console-filter",
    "id": 1772
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### UX improvements  \n* When debugging multiple sessions, VS Code now only renders the arrow in the glyph margin for the focused session. This should make it easier for users to distinguish which editor Call Stack decoration belongs to the debug session the user is interested in.\n* Large stack frames now show a **Load All Stack Frames** button to load all the remaining stack frames. Previously this was a **Load More Stack Frames** button, which would require multiple clicks for large stack traces.  \n![Load All Stack Frames](images/1_49/load-all.png)",
    "url": "https://code.visualstudio.com/updates/v1_49#_ux-improvements",
    "id": 1773
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### JavaScript debugger improvements  \n**Improved Auto Attach**  \n[Auto Attach](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-feature) can now debug processes even without manually passing an `--inspect` flag to them. When Auto Attach is turned on, by default VS Code uses its \"smart\" mode to debug any Node.js script outside of `node_modules` folders, as well as some common 'runner' tools such as mocha and ts-node.  \n![Image showing VS Code debugging a Node.js process launched from a terminal without an \"--inspect\" flag](images/1_49/auto-attach-no-inspect.png)  \n*Theme: [Codesong Theme](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*  \nYou can switch back to the old behavior, or choose to debug **all** Node.js scripts, using the **debug.javascript.autoAttachFilter** setting. If you want to change when the \"smart\" mode attaches, you can configure it in the **debug.javascript.autoAttachSmartPattern** setting.  \nAs part of this, Auto Attach also now works with terminal multiplexers such as `tmux`, provided they inherit the session's environment variables.  \n**Sourcemap handling in logged errors**  \nPreviously, the stack trace when logging a JavaScript error like `console.log(error)` would show the locations in your compiled code. If sourcemaps are available, VS Code will now process the stack trace to use the source locations. This is useful when debugging web apps that use bundlers like Webpack.  \n![Image shows a beautified stack trace from a React app](images/1_49/error-stacktraces.png)  \nPreviously, a stack trace like this would have referenced links in the compiled `bundle.js` file.  \n**Notable improvements**  \n* Previously, VS Code aggressively cached sourcemaps in a way that interfered with some types of tooling, such as Angular's `ng serve` and Nest.js `nest start --watch`. This is now fixed.\n* When working in a remote (SSH, Containers, or WSL), VS Code did not support attaching to browsers already running locally; this is now fixed.\n* You can now choose to stop if a conditional breakpoint throws an error by toggling the **debug.javascript.breakOnConditionalError** setting.",
    "url": "https://code.visualstudio.com/updates/v1_49#_javascript-debugger-improvements",
    "id": 1774
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Languages  \n### TypeScript 4.0  \nVS Code now ships with TypeScript 4.0.2. This major update brings support for new language features such as [variadic tuple types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/#variadic-tuple-types), along with editor tooling enhancements and many bug fixes.  \nYou can read more about TypeScript 4.0 [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/).",
    "url": "https://code.visualstudio.com/updates/v1_49#_typescript-4.0",
    "id": 1775
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Convert to optional chain refactoring  \nUse the new `convert to optional chain` refactoring to quickly convert a sequence of expressions such as `a && a.b && a.b.c()` to instead use optional chaining: `a?.b?.c()`. Just select an expression to use it:  \n![Converting an expression sequence to an optional chain](images/1_49/ts-convert-chain.gif)  \nMany older codebases have a lot of repetitive null checks that optional chaining can simplify. Now it's easier than ever to automate some of this cleanup.",
    "url": "https://code.visualstudio.com/updates/v1_49#_convert-to-optional-chain-refactoring",
    "id": 1776
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Deprecated tag support for JavaScript and TypeScript  \nVS Code now supports the `@deprecated` JSDoc tag in JavaScript and TypeScript files. To mark an API as deprecated, simply add a `@deprecated` JSDoc comment:  \n```ts\n/**\n* @deprecated Use `getMode()` instead.\n*/\nexport function mode() { ... }\n```  \nVS Code renders IntelliSense suggestions for deprecated properties with a strike through (see the `show` and `hide` suggestions below for example):  \n![Example of deprecated suggestions](images/1_49/ts-deprecated-suggest.png)  \nTo help you detect usage of deprecated API in your codebase, VS Code will also add a strike through to any references to deprecated APIs:  \n![A deprecated API with a strike through](images/1_49/ts-deprecated-warning.png)  \nDisable these strike throughs by setting `\"editor.showDeprecated\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_49#_deprecated-tag-support-for-javascript-and-typescript",
    "id": 1777
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Refactoring disabled reasons  \nVS Code can now show why a requested JavaScript/TypeScript refactoring cannot be applied:  \n![Trying to extract a function with a 'continue' statement](images/1_49/ts-refactor-reason.png)  \nThese reasons are shown when you try to [apply a refactoring with a keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions).",
    "url": "https://code.visualstudio.com/updates/v1_49#_refactoring-disabled-reasons",
    "id": 1778
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Smarter auto imports  \nWe are now better at searching your installed npm packages for potential JavaScript and TypeScript auto imports. Packages that are listed in your `package.json` dependencies are now scanned for imports even if they are not yet referenced anywhere in your codebase. This can be especially helpful after you've installed a new package and want to start using it.  \nYou can read more about the improved auto imports behavior [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/#smarter-auto-imports).",
    "url": "https://code.visualstudio.com/updates/v1_49#_smarter-auto-imports",
    "id": 1779
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Partial IntelliSense during project loads  \nWith TypeScript 4.0, VS Code can now provide IntelliSense and other more advanced language features while a large project is still loading. This should allow you to start working with your code faster.  \nTo explain how this feature works, you first need to understand how VS Code worked previously. When you open a JavaScript or TypeScript file in VS Code, the TypeScript language service tries to load the project that file belongs to. Sometimes this project can be quite large, such as with the core VS Code codebase, which consists of many thousands of TypeScript files. While a project is being loaded, VS Code is able to handle basic syntax operations\u2014such as getting the document outline and enabling code folding\u2014but it previously could not provide IntelliSense or other more advanced language features because they depend on understanding the entire project.  \nThanks to TypeScript 4.0, VS Code can offer limited IntelliSense while a large project is still loading. However the IntelliSense provided is limited to using the current file, instead of the entire project. This means that features such as suggestions and **Go to Definition** will work, but suggestions are only shown from the current file and you can only run **Go to Definition** to jump to another symbol in the current file. You also will not get features such as auto import since that relies on VS Code processing the entire project.  \nPartial mode IntelliSense will only be used while a project is loading. Once the project as loaded, VS Code will automatically switch over to full IntelliSense. If you work with large JavaScript or TypeScript projects, partial IntelliSense should let you start working with your code almost instantly until more complete, project-wide IntelliSense becomes available.",
    "url": "https://code.visualstudio.com/updates/v1_49#_partial-intellisense-during-project-loads",
    "id": 1780
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### HTML tag rename on type  \nThere were several bug and performance fixes for **Rename on Type** in HTML files. When modifying a tag, the feature automatically renames the matching HTML tag. The feature is optional and can be enabled by setting: `\"editor.renameOnType\": true`.",
    "url": "https://code.visualstudio.com/updates/v1_49#_html-tag-rename-on-type",
    "id": 1781
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Contributions to extensions  \n### Notebooks  \n**Improve cell execution order label discoverability**  \nPreviously, the cell execute button would take the place of the execution order label **[#]** when hovering or selecting a cell. This made it impossible to see the execution order label while executing a cell. We have moved it to be below the execute button, aligned with the base of the editor. This should make it easier to find.  \nIn this example, the cell execution order label displays **[6]**:  \n![Cell execution order](images/1_49/cell_execution_order.png)  \n**Customize cell appearance**  \nWe've added two settings that let users customize the cell appearance:  \n* `notebook.cellToolbarLocation`: Whether the toolbar should be shown on the left, the right, or hidden.\n* `notebook.showCellStatusBar`: Whether or not the cell Status bar should be visible.  \n**Cell Status bar item contributions**  \nIt's now possible for extensions to contribute custom items to the cell Status bar, similarly to the VS Code Status bar. These items can be buttons that trigger commands, or plain text items.  \nAs an example, our GitHub issues notebook extension now contributes the **Open X results** command as a Status bar item:  \n![Cell Status bar item](images/1_49/cell_status_bar_item.png)  \n**Enhanced text diff editor**  \nIn this release, we added a new type of diff editor for viewing changes in notebook documents. Traditional notebooks are stored in JSON format, which is easy to parse but not effective for diffing since most diff algorithms on text files are line-based. To improve this experience, we built an enhanced diff editor, which is aware of the concept of notebook documents and cells to help users quickly identify what cell content or metadata are changed.  \n![Enhanced notebook text diff](images/1_49/notebook-enhanced-text-diff.gif)  \n*Theme: [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \nYou can still switch to regular text diff editor temporarily from the editor action tool bar or disable this feature by turning off the setting `notebook.diff.enablePreview`.  \n![Switch to regular text diff editor](images/1_49/notebook-switch-to-regular-text-diff.gif)",
    "url": "https://code.visualstudio.com/updates/v1_49#_notebooks",
    "id": 1782
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.49 include:  \n* Automatic port forwarding: Ports detected in terminal output are automatically forwarded to the client.\n* Welcome views: All Remote extensions include a new Welcome experience to help you get started.\n* Dev Containers: You can now directly clone a repository from GitHub into a container volume.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_49.md).",
    "url": "https://code.visualstudio.com/updates/v1_49#_remote-development",
    "id": 1783
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. One useful update in this release is being able to track multiple repositories, similar to how the build-in Git extension works.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.20.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0200) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_49#_github-pull-requests-and-issues",
    "id": 1784
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Extension authoring  \n### Terminal link providers  \nThe terminal link provider API is now stable. This API enables language/lint extensions to handle more obscure link formats that are not already supported and even support language-specific behavior.  \nTake the following Java exception for example:  \n```\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 9\nat MyProgram.main(MyFile.java:10)\n```  \nUsing terminal link providers, it is now possible to have a link for `java.lang.ArrayIndexOutOfBoundsException` that goes to API documentation and create links for the symbols `MyProgram` or `main`.  \nThe following example implementation creates a link for the first instance of the word `\"test\"` on each line:  \n```ts\nwindow.registerTerminalLinkProvider({\nprovideTerminalLinks: (context, token) => {\n// Detect the first instance of the word \"test\" if it exists and linkify it\nconst startIndex = (context.line as string).indexOf('test');\nif (startIndex === -1) {\nreturn [];\n}\n// Return an array of link results, this example only returns a single link\nreturn [\n{\nstartIndex,\nlength: 'test'.length,\ntooltip: 'Show a notification',\n// You can return data in this object to access inside handleTerminalLink\ndata: 'Example data'\n}\n];\n},\nhandleTerminalLink: (link: any) => {\nvscode.window.showInformationMessage(`Link activated (data = ${link.data})`);\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_49#_terminal-link-providers",
    "id": 1785
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Debug extension APIs  \n* **DebugAdapterNamedPipeServer**: VS Code offers three different ways of communication with Debug Adapters: via direct method calls, stdin/stdout, or TCP sockets. In this milestone, we've added a fourth type: via \"named pipes\". Our [debugger sample \"Mock Debug\"](https://github.com/microsoft/vscode-mock-debug/blob/f4b0e37cfd0cb1653c82a26bdab4910c87489713/src/extension.ts#L215-L244) shows how to use the `DebugAdapterNamedPipeServer`.  \n* **Changed timing of 'preLaunchTask'**: Before a debug session starts, the debug configuration's `preLaunchTask` is now launched in between the `resolveDebugConfiguration` and the `resolveDebugConfigurationWithSubstitutedVariables` calls of a `DebugConfigurationProvider`. Previously, it was launched **after** the `resolveDebugConfigurationWithSubstitutedVariables` call. For details, see [issue #95162](https://github.com/microsoft/vscode/issues/95162).  \n* **Access Debug Adapter Protocol breakpoints**: VS Code breakpoints are independent from debug adapters and they exist outside of debug sessions. When a debug session starts, VS Code breakpoints are registered with the debug adapter of the debug session and VS Code receives Debug Adapter Protocol (DAP) breakpoints in return. That means one VS Code breakpoint maps to zero, one, or more DAP breakpoints (depending on the number of concurrently active debug sessions). VS Code maintains a mapping between its breakpoints and corresponding DAP breakpoints. In this milestone, we've added an API for accessing the mapping: the method `DebugSession.getDebugProtocolBreakpoint` returns a DAP breakpoint for a given VS Code breakpoint.  \n* **Finalized APIs**: Three proposed extension APIs for debugging have been finalized and can now be used in extensions published on the Marketplace:  \n* The function `vscode.debug.stopDebugging` for stopping a single specific or all debug sessions. With this new API, it is no longer necessary to use the less predictable **Debug: Stop** command (command ID: `workbench.action.debug.stop`) which only stops the \"active\" debug session.\n* The `noDebug` property of `DebugSessionOptions` controls whether the session about to start should run with or without debugging.\n* The `compact` property of `DebugSessionOptions` controls whether the parent of the newly created debug session will be hidden in the CALL STACK view as long as it only has a single child.",
    "url": "https://code.visualstudio.com/updates/v1_49#_debug-extension-apis",
    "id": 1786
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Task custom execution variable resolving  \nThe API to resolve variables for custom execution tasks has been finalized. Variables in a custom execution task's definition are resolved and then passed into the task's callback.  \n```typescript\nexport class CustomExecution {\n/**\n* Constructs a CustomExecution task object. The callback will be executed the task is run, at which point the\n* extension should return the Pseudoterminal it will \"run in\". The task should wait to do further execution until\n* [Pseudoterminal.open](#Pseudoterminal.open) is called. Task cancellation should be handled using\n* [Pseudoterminal.close](#Pseudoterminal.close). When the task is complete fire\n* [Pseudoterminal.onDidClose](#Pseudoterminal.onDidClose).\n* @param process The [Pseudoterminal](#Pseudoterminal) to be used by the task to display output.\n* @param callback The callback that will be called when the task is started by a user.\n*/\nconstructor(callback: (resolvedDefinition: TaskDefinition) => Thenable<Pseudoterminal>);\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_49#_task-custom-execution-variable-resolving",
    "id": 1787
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Task detail  \nThe task `detail` API, which is used to show additional information about a task in the task Quick Pick, has been finalized.  \n![Task Detail shown](images/1_49/task-detail.png)",
    "url": "https://code.visualstudio.com/updates/v1_49#_task-detail",
    "id": 1788
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### 'in' operator for 'when' clauses  \nThere is a new `in` operator for `when` clauses. This new operator allows for a dynamic lookup of a context key's value within another context key's value. For example, if you wanted to add a context menu command to folders that contain a certain type of file (or something that can't be statically known), you can now use the `in` operator to achieve it.  \nFirst, determine which folders should support the command, and the folder name to an array. Then, use the `setContext` command to turn the array into a context key:  \n```ts\nvscode.commands.executeCommand('setContext', 'ext:supportedFolders', [ 'test', 'foo', 'bar' ]);\n\n// or\n\n// Note in this case (using an object), the value doesn't matter, it is based on the existence of the key in the object\nvscode.commands.executeCommand('setContext', 'ext:supportedFolders', { 'test': true, 'foo': 'anything', 'bar': false });\n```  \nThen, in the `package.json` you could add a menu contribution for the `explorer/context` menu:  \n```json\n// Note, this assumes you have already defined a command called ext.doSpecial\n\"menus\": {\n\"explorer/context\": [\n{\n\"command\": \"ext.doSpecial\",\n\"when\": \"explorerResourceIsFolder && resourceFilename in ext:supportedFolders\"\n}\n]\n}\n```  \nIn that example, we are taking the value of `resourceFilename` (which is the name of the folder in this case) and checking for its existence in the value of `ext:supportedFolders`. If it exists, the menu will be shown. This powerful operator should allow for richer conditional and dynamic contributions that support `when` clauses, for example menus, views, etc.",
    "url": "https://code.visualstudio.com/updates/v1_49#_'in'-operator-for-'when'-clauses",
    "id": 1789
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Contributable context menu for Variables view  \nWe've added command contribution support for the context menu in the Variables view. This makes it possible to implement frequently requested features like variable formatting (for example **View as Hex**) or viewing variables in custom data views:  \n![Java variables context menu](images/1_49/java-variables.png)  \nWhen a registered context menu command is executed, both the underlying variable and its container are passed as Debug Adapter Protocol (DAP) objects. Please note that VS Code's extension API uses opaque stand-in types instead of the real DAP types. In order to access their properties, they can be easily coerced into the corresponding DAP types.  \nMenu contributions for the Variables view are identified by a `\"debug/variables/context\"` key. General information about menu contributions can be found in the [contributions points documentation](https://code.visualstudio.com/api/references/contribution-points#contributes.menus).  \nTo help with structuring menu commands into meaningful groups, we have added some predefined groups:  \n* `navigation`: Commands related to navigation across VS Code. This group always comes first and is currently empty by default.\n* `1_view`: Commands related to displaying variables in different view formats. Currently empty by default.\n* `3_modifications`:  Commands related to modifications of variables. Currently home of the **Set Value** command.\n* `5_cutcopypaste`: Commands related to cutting, copying and pasting of variables. Currently home of the **Copy Value** and **Copy as Expression** commands.\n* `z_commands`: Other commands that do not belong to the above categories. This group comes last and currently contains the **Add to Watch** and **Break on Value changes** commands.  \nTypically, menu contributions in the Variables view should only apply to a specific debug type. This can be easily achieved by adding a `when` clause to the contribution. Here is one for Java:  \n```js\n\"when\": \"debugConfigurationType == 'java'\"\n```  \nSince some menu contributions should only be available for variables of a specific kind, we have introduced a new optional context key `debugProtocolVariableMenuContext`, which receives its value from a property `__vscodeVariableMenuContext` of the underlying DAP type `Variable` (please note that the `__vscodeVariableMenuContext` property is not part of the DAP specification, because it is specific to VS Code and its menu contribution support).  \nThis makes it possible to show an array related menu command only on variables where a property `__vscodeVariableMenuContext` got a value `'array'` from the debug adapter:  \n```js\n\"contributes\": {\n\"menus\": {\n\"debug/variables/context\": [\n{\n\"command\": \"variables-view.showArrayAsCustomDataView\",\n\"when\": \"debugConfigurationType == 'java' &&\ndebugProtocolVariableMenuContext == 'array'\"\n}\n]\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_49#_contributable-context-menu-for-variables-view",
    "id": 1790
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Webview Views  \nThe newly proposed [Webview View API](https://github.com/microsoft/vscode/issues/46585) allows extensions to contribute webview based views to the sidebar of panel. These views can offer specialized presentations of data, more advanced user interfaces, and much more.  \n![The 'calico colors' webview view sample extension in the side bar](images/1_49/webview-view.png)  \nCheck out the [webview view extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-view-sample) to get started, and let us know if you have any feedback about the new API.",
    "url": "https://code.visualstudio.com/updates/v1_49#_webview-views",
    "id": 1791
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n## Engineering  \n### Electron 9.0 Update  \nIn this milestone, we finished the exploration to bundle Electron 9 into VS Code. This is a major Electron release and comes with Chromium 83.0.4103.122 and Node.js 12.14.1.",
    "url": "https://code.visualstudio.com/updates/v1_49#_electron-9.0-update",
    "id": 1792
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Disabling crash reporter  \nDue to architectural changes for the crash reporter from Electron, the preferred way to disable the crash reporter in VS Code has been changed and is now configured via the `enable-crash-reporter` runtime argument. The existing value for the user setting `telemetry.enableCrashReporter` will be copied over to this runtime argument to ease the transition.  \n* Open the Command Palette (`kb(workbench.action.showCommands)`).\n* Run the **Preferences: Configure Runtime Arguments** command.\n* This command will open a `argv.json` file to configure runtime arguments.\n* Edit `\"enable-crash-reporter\": false`.\n* Restart VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_49#_disabling-crash-reporter",
    "id": 1793
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Web Playground moved to a separate repository  \nThe extension that drives our [online web playground](https://vscode-web-test-playground.azurewebsites.net/), as well as `yarn web` when running out of sources, has moved into its own [repository](https://github.com/microsoft/vscode-web-playground).",
    "url": "https://code.visualstudio.com/updates/v1_49#_web-playground-moved-to-a-separate-repository",
    "id": 1794
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Web Playground support for different versions  \nOur [online web playground](https://vscode-web-test-playground.azurewebsites.net/) is now capable of running not only the latest Insiders version of VS Code, but also the Stable version or any released version by commit.  \nNew query parameters allow you to drive this:  \n* `quality=<stable|insider>`\n* `commit=<commit-sha>`  \n**Note:** If you specify a `commit`, you must also specify it's associated `quality`.",
    "url": "https://code.visualstudio.com/updates/v1_49#_web-playground-support-for-different-versions",
    "id": 1795
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Minimal sandboxed workbench  \nWe continue to explore enabling Electron's `sandbox` option in VS Code. During this milestone, we worked on being able to bring up a minimal VS Code instance that is fully sandboxed by shimming various internals that today still require Node.js access. This will be a multi-milestone journey and you can track progress in [issue #92164](https://github.com/microsoft/vscode/issues/92164).",
    "url": "https://code.visualstudio.com/updates/v1_49#_minimal-sandboxed-workbench",
    "id": 1796
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### Making VS Code Trusted Types compliant  \nWe have started an effort to make VS Code \"Trusted Types\" compliant. The goal is to prevent DOM-based cross site scripting vulnerabilities. You can learn more about trusted types at the web.dev [Trusted Types site](https://web.dev/trusted-types) and follow our progress in [issue #103699](https://github.com/microsoft/vscode/issues/103699).",
    "url": "https://code.visualstudio.com/updates/v1_49#_making-vs-code-trusted-types-compliant",
    "id": 1797
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2020 Release (1.49)  \n### New version of Marked library  \nWe picked up a new version of the [Marked](https://marked.js.org) Markdown processing library. This library is used for VS Code's internal Markdown rendering, such as in hovers and IntelliSense. The update includes important bug fixes and improved support for more complicated Markdown patterns.",
    "url": "https://code.visualstudio.com/updates/v1_49#_new-version-of-marked-library",
    "id": 1798
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Key binding support within the Integrated Terminal  \nA new setting `terminal.integrated.commandsToSkipShell` was added that contains an array of commands that skip processing by the shell and instead are processed by VS Code's key binding system. This allows keys such as `kbstyle(F1)` to now work while focus is in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_5#_key-binding-support-within-the-integrated-terminal",
    "id": 1801
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n## Editor  \n### Editor settings  \nThere are several useful Editor [settings](/docs/getstarted/settings.md) in this release:  \n* `editor.renderLineHighlight` - Disables the current line highlight\n* `editor.fontWeight` - Customizes the editor's font weight (**normal**, **bold**).\n* `editor.wordWrap` - Toggles word wrapping while respecting `editor.wrappingColumn`.",
    "url": "https://code.visualstudio.com/updates/v1_5#_editor-settings",
    "id": 1802
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Auto Save when application loses focus  \nYou can now configure Auto Save (`files.autoSave` setting) with the new value `onWindowChange` to trigger save automatically when switching windows.",
    "url": "https://code.visualstudio.com/updates/v1_5#_auto-save-when-application-loses-focus",
    "id": 1803
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Quick Open got a lot quicker  \nOver the last two iterations, we looked into making Quick Open fast, even for large workspaces ('large' as in 'Chromium-repository-large'). A newly cloned Chromium repository contains more than 220,000 files. On our development machines, Quick Open went from around 30s in VS Code version 1.3 to around 3-4s (depending on your platform) in version 1.5. This is the performance without any caches. However we do use caches and with those, it takes around 0.5s to get the results. Since we start updating the caches immediately when the user invokes Quick Open and don't block the UI thread when we read from the caches, the 0.5 seconds is the perceived end-user performance even when the caches were out-of-date. As said, this is for the large Chromium repository. If your projects are smaller, you may not see any delay now.",
    "url": "https://code.visualstudio.com/updates/v1_5#_quick-open-got-a-lot-quicker",
    "id": 1804
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Keep Quick Open visible even when focus is outside  \nWe added a new setting `workbench.quickOpen.closeOnFocusLost` to control if Quick Open should close when focus moves out of the widget. By default, Quick Open will close, but you can set it to `false` to stay open even when focus is outside of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_5#_keep-quick-open-visible-even-when-focus-is-outside",
    "id": 1805
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Include symbol results in file Quick Open results  \nWe added a new setting `search.quickOpen.includeSymbols` to control if symbols should appear in Quick Open file searches. Previously, we included symbol results in the general file picker but this had enough issues that we decided to make this optional. If you want the symbol results back, please set this option to `true`. Note that enabling this setting will make the overall file search speed slower depending on the time it needs for the global symbol search to return results.  \n>**Note:** You can always search for global symbols using **Show All Symbols** (`kb(workbench.action.showAllSymbols)`).",
    "url": "https://code.visualstudio.com/updates/v1_5#_include-symbol-results-in-file-quick-open-results",
    "id": 1806
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### New actions to move Tabs left or right within a group  \nThere are new actions to move a Tab (tabbed header) left or right within a group of editors.  \nThe two actions and their default key bindings are:  \nAction | Command Palette | Key Binding\n--- | --- | ---\n`workbench.action.moveEditorLeftInGroup` | Move Editor Left | `kb(workbench.action.moveEditorLeftInGroup)`\n`workbench.action.moveEditorRightInGroup` | Move Editor Right | `kb(workbench.action.moveEditorRightInGroup)`",
    "url": "https://code.visualstudio.com/updates/v1_5#_new-actions-to-move-tabs-left-or-right-within-a-group",
    "id": 1807
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Closed editors reopen at their previous index  \nWe always provided an action to reopen an editor after it was closed, `workbench.action.reopenClosedEditor` (`kb(workbench.action.reopenClosedEditor)`). With this release, editors will now reopen at the same index, preserving the order that existed before they were closed.",
    "url": "https://code.visualstudio.com/updates/v1_5#_closed-editors-reopen-at-their-previous-index",
    "id": 1808
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Mac OS: Cmd+E no longer opens Quick Open  \nWe decided to remove an (undocumented) key binding to bring up quick open for file search. You can bring back `kbstyle(Cmd+E)` with the following key binding configuration:  \n```json\n{ \"key\": \"cmd+e\", \"command\": \"workbench.action.quickOpen\" }\n```  \nThe reason behind this change is that `kbstyle(Cmd+E)` on Mac OS is typically associated with running a search in the current active file.",
    "url": "https://code.visualstudio.com/updates/v1_5#_mac-os:-cmd+e-no-longer-opens-quick-open",
    "id": 1809
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n## Languages  \n### TypeScript  \nWe bundle the officially released version of TypeScript with Visual Studio Code. For the August release, this will be version `1.8.10`. During September, the version `2.0` will become available and you can already install the release candidate using `npm install -g typescript@rc`. Using a different version of TypeScript inside VS Code as on the command line or by a build tool is confusing, since you will get different errors. `2.0` supports features that are not supported in `1.8.10`. If you want to use the newer version of TypeScript inside VS Code then please use the `typescript.tsdk` setting and refer to the corresponding [documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions).  \nVS Code now checks if the workspace folder contains a custom TypeScript version (typically installed via `npm install typescript@x.x.x`). If this is the case and the `typescript.tsdk` setting isn't used, then VS Code informs the user about the local version and ask whether the local version should be used.  \n![TypeScript Version Check](images/1_5/ts-version-check.png)  \nThe **More Information** action takes you to documentation for how to configure VS Code to always use a locally installed TypeScript version. VS Code now also checks whether the used TypeScript language server is different than the globally installed `tsc` compiler. When this is the case, a corresponding information message is shown.",
    "url": "https://code.visualstudio.com/updates/v1_5#_typescript",
    "id": 1810
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### HTML  \nNew settings have been added to control which built-in code completion providers are active. Use these settings if you prefer not to see the corresponding proposals.  \n```json\n// Configures if the built-in HTML language suggests Angular V1 tags and properties.\n\"html.suggest.angular1\": true,\n\n// Configures if the built-in HTML language suggests Ionic tags, properties and values.\n\"html.suggest.ionic\": true,\n\n// Configures if the built-in HTML language suggests HTML5 tags, properties and values.\n\"html.suggest.html5\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_5#_html",
    "id": 1811
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### LESS  \nThe LESS syntax validation has been brought up-to-date to support some of the features recently added to LESS. These include:  \n- Named Parameters in Mixins\n- Mixins as functions\n- Passing Rulesets to Mixins\n- CSS Guards\n- Merge  \nCheck out the [LESS documentation](http://lesscss.org/features/) to learn more about these features.",
    "url": "https://code.visualstudio.com/updates/v1_5#_less",
    "id": 1812
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Settings to enable/disable Emmet for languages  \nYou can now associate existing Emmet syntax profiles (such as `html`, `css`) with other languages with the new `emmet.syntaxProfiles` setting. The setting takes a language Id and associates it with an Emmet profile.  \nFor example, to use Emmet HTML abbreviations inside JavaScript:  \n```json\n{\n\"emmet.syntaxProfiles\": {\n\"javascript\": \"html\"\n}\n}\n```  \nYou can disable Emmet abbreviations for a particular language using the  `emmet.excludeLanguages` setting. The setting below disables Emmet in PHP files:  \n```json\n{\n\"emmet.excludeLanguages\": [\n\"php\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_5#_settings-to-enable/disable-emmet-for-languages",
    "id": 1813
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Linter Extensions  \nThe `vscode-eslint` and `vscode-tslint` extensions now provide settings to run the linter only on save and not while typing.  \n```json\n{\n\"tslint.run\": \"onSave\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_5#_linter-extensions",
    "id": 1814
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n## Extensions  \n### Easier Updates  \nThere is now an action to **Update All Extensions**.  \n![Extension update all](images/1_5/extension-update-all.png)  \nAdditionally, there is now an `extensions.autoUpdate` setting which, when set to `true`, will let extension automatically update themselves without user intervention.",
    "url": "https://code.visualstudio.com/updates/v1_5#_easier-updates",
    "id": 1815
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Extension Contribution Details View  \nWhen browsing extensions in VS Code, there is now a **Contributions** section which will display each extension's contributions, even before installing the extension.  \n![Extension Details](images/1_5/extension-details.png)",
    "url": "https://code.visualstudio.com/updates/v1_5#_extension-contribution-details-view",
    "id": 1816
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Extension Sorting  \nYou can now sort extensions not only by install count, in the extensions view:  \n![Extension sort](images/1_5/extension-sort.png)",
    "url": "https://code.visualstudio.com/updates/v1_5#_extension-sorting",
    "id": 1817
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Marketplace Performance Improvements  \nThe [Marketplace](https://marketplace.visualstudio.com/vscode) has been revamped with a CDN, in order to improve download times and availability for extension queries and downloads.",
    "url": "https://code.visualstudio.com/updates/v1_5#_marketplace-performance-improvements",
    "id": 1818
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n## Debugging  \n### Suggestions in Debug Console  \nThe **Debug Console** now shows suggestions while typing. Currently this is only available for Node.js debugging, but other debuggers can implement suggestions as well through the debug protocol.  \n![Debug Console Suggest](images/1_5/debug_repl_suggest.png)",
    "url": "https://code.visualstudio.com/updates/v1_5#_suggestions-in-debug-console",
    "id": 1819
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### MultiLine Debug Console Input  \nThe **Debug Console** input now expands to multiple lines when needed. The expansion can be triggered using `kbstyle(Shift + Enter)`.  \n![Debug Console Multiline](images/1_5/debug_repl_multiline.png)",
    "url": "https://code.visualstudio.com/updates/v1_5#_multiline-debug-console-input",
    "id": 1820
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Multi-Level Variable Paging  \nData structures with a large number of children are displayed in multi-level chunks. This results in better performance and makes it easier to traverse a large number of children.  \n![Variable Multi Level Paging](images/1_5/debug_variable_paging.png)",
    "url": "https://code.visualstudio.com/updates/v1_5#_multi-level-variable-paging",
    "id": 1821
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n## Node Debugging  \n### Launch debug target in Integrated Terminal  \nIt is now possible to launch the Node.js debug target in the **Integrated Terminal** which helps when developing Node.js based command line applications that read from an interactive terminal and/or need to control their output on the terminal they are running in.  \nSince there are now three options where to run a node program (**Debug Console**, **Integrated Terminal**, **External Terminal**), we've deprecated the boolean `launch.json` attribute `externalConsole` and introduced a new attribute `console` which accepts these corresponding values: `internalConsole`, `integratedTerminal`, `externalTerminal`.  \n![New launch attribute Attribute console](images/1_5/debug-console-attribute.png)  \n>**Note:** Depending on what options you have configured for the `internalConsoleOptions` attribute, VS Code may decide to open the **Debug Console** which will hide the **Integrated Terminal**. To avoid this, please set `internalConsoleOptions` to `neverOpen`.  \n>**Note:** In this release, every debug session creates a new **Integrated Terminal**. In the next release, we will reuse an existing **Integrated Terminal** if possible.",
    "url": "https://code.visualstudio.com/updates/v1_5#_launch-debug-target-in-integrated-terminal",
    "id": 1822
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Powerful Completion Items  \nThe [`Completion Item`](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L2246) now supports additional text edits and an additional command.  \nWith those, you can do rich things like:  \n* Add an import statement when completing a symbol.\n* Add a library to the project when completing.",
    "url": "https://code.visualstudio.com/updates/v1_5#_powerful-completion-items",
    "id": 1823
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Stable Input Box and Quick Open  \nWhen showing Quick Open or asking for input, you can provide the `ignoreFocusOut` option so that the dialogs will not close when focus moves to another part of VS Code or another window. Also, you can now programmatically close them using a cancellation token.",
    "url": "https://code.visualstudio.com/updates/v1_5#_stable-input-box-and-quick-open",
    "id": 1824
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### New context menu keys  \nWe added new context keys for more control over key bindings and menu items:  \n* `explorerResourceIsFolder` - Will reflect if a file or folder is selected in the Explorer.\n* `resourceFilename`  - The name of the file currently active in the editor/Explorer.",
    "url": "https://code.visualstudio.com/updates/v1_5#_new-context-menu-keys",
    "id": 1825
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### New Theme Settings  \nIn this release, we exposed the following internal colors as TextMate theme settings and now theme writers can customize them with their themes.  \n- `rangeHighlight`: Background color of range highlighted, used by Quick Open and Find features.\n- `selectionHighlight`: Background color of regions highlighted while selecting.\n- `inactiveSelection`: Background color of selections when not in focus.\n- `wordHighlight`: Background color of a symbol during read-access, like reading a variable.\n- `wordHighlightStrong`: Background color of a symbol during write-access, like writing to a variable.\n- `findMatchHighlight`: Background color of regions matching the search.\n- `currentFindMatchHighlight`: Background color of the current region matching the search.\n- `findRangeHighlight`: Background color of regions selected for search.\n- `activeLinkForeground`: Color of active links.\n- `hoverHighlight`: Background color when hovered.\n- `referenceHighlight`: Background color of a reference when finding all references.\n- `guide`: Color of the indentation guides which indicate nesting levels.",
    "url": "https://code.visualstudio.com/updates/v1_5#_new-theme-settings",
    "id": 1826
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Integrated Terminal API  \nAn API has been added that provides extensions with some basic control over the integrated terminal like creating terminal(s) and sending text to them. See the [`window` API reference page](https://code.visualstudio.com/docs/extensionAPI/vscode-api#_window) for a full description of the API.",
    "url": "https://code.visualstudio.com/updates/v1_5#_integrated-terminal-api",
    "id": 1827
  },
  {
    "content": "See what is new in the Visual Studio Code August 2016 Release (1.5)\n### Additions to the Debug Protocol  \nThe [debug protocol](https://github.com/microsoft/vscode-debugadapter-node/blob/main/protocol/src/debugProtocol.ts) has been extended in the following areas (and VS Code already provides the corresponding UI):  \n* **IntelliSense Support for the Debug Console**: Debug adapters can now implement the `completions` request to provide suggestion proposals for IntelliSense in the **Debug Console**. To enable this feature in VS Code, a debug adapter has to set the `supportsCompletionsRequest` capability to true.  \n* **Run in Terminal Request**: Debug adapters can now easily run the debug target in VS Code's **Integrated Terminal** via the `runInTerminal` request (which happens to be the first request that is called from the debug adapter into VS Code). The **Integrated Terminal** is an alternative to the **Debug Console** and better supports development of command line applications that read from an interactive terminal and/or need to control their output on the terminal they are running in. Before calling `runInTerminal` make sure that the front-end client supports it by verifying that the arguments passed to the `initialize` request have a `supportsRunInTerminalRequest` attribute and that its value is true.",
    "url": "https://code.visualstudio.com/updates/v1_5#_additions-to-the-debug-protocol",
    "id": 1828
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Workbench  \n### Pinned tabs improvements  \nPinned tabs were introduced in our [May 2020](https://code.visualstudio.com/updates/v1_46#_pin-tabs) release. Since then, we've received valuable feedback on how to improve this experience further, and for this milestone there are a couple of changes worth mentioning.  \nA new setting `workbench.editor.pinnedTabSizing` allows you to configure how large a pinned tab should appear:  \n* `normal`: a pinned tab inherits the look of other tabs (new default)\n* `shrink`: a pinned tab shrinks to a fixed size showing parts of the editor label\n* `compact`: a pinned tab will only show as icon or first letter of the editor label  \nIf you liked how pinned tabs looked prior to this release, make sure to configure `\"workbench.editor.pinnedTabSizing\": \"compact\"`.  \nPinned tabs also show a new \"pinned\" icon to allow you to unpin with one click. This icon will also appear in the \"Open Editors\" view.  \n![Pinned Tabs](images/1_50/pinned_tabs.gif)\n_Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=github.github-vscode-theme)_  \nSome other improvements include:  \n* Editors can now be pinned even when tabs are disabled.\n* `Cmd+W` (`Ctrl+W`) no longer closes a pinned editor, but selects the next non-pinned editor.\n* A new command **workbench.action.closeActivePinnedEditor** can be assigned to close a pinned editor.\n* A new `tab.lastPinnedBorder` color can be assigned to draw a border to the right of the last pinned tab.",
    "url": "https://code.visualstudio.com/updates/v1_50#_pinned-tabs-improvements",
    "id": 1831
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Renamed some editor-related context keys  \nA few new editor context keys have been introduced, deprecating some of the existing ones. If you are using these in your keybinding settings, please update them:  \n* `groupActiveEditorDirty` was renamed to `activeEditorIsDirty`\n* `editorPinned` was renamed to `activeEditorIsNotPreview`\n* `editorSticky` was renamed to `activeEditorIsPinned`",
    "url": "https://code.visualstudio.com/updates/v1_50#_renamed-some-editor-related-context-keys",
    "id": 1832
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Added new resource (explorer-related) context keys  \nTwo new context keys have been added for resources.  \n* `resourceDirname` for the folder path of the resource, equivalent to `dirname(uri.fsPath)`\n* `resourcePath` for the full path of the resource, equivalent to `uri.fsPath`",
    "url": "https://code.visualstudio.com/updates/v1_50#_added-new-resource-explorer-related-context-keys",
    "id": 1833
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Extensions: Simplified recommendation notifications  \nIn this release, we improved the experience of recommending extensions using notifications by making them smarter and less noisy to users.  \n* Recommendations notifications are not shown again after you tried them or went through them.\n* Only one recommendation notification is shown at any time in VS Code window. You can access already recommended notifications under the notification manager, the `bell` icon in the status bar.  \n![Extension Recommendations Queue](images/1_50/ext-recommendations-queue.gif)  \n*Theme: GitHub Sharp Dark*  \n* Recommendation notifications supporting installations, like WSL, Docker etc., on your system, are made less noisy by showing only one such notification once per VS Code session - a session begins when you open VS Code and ends when you quit.",
    "url": "https://code.visualstudio.com/updates/v1_50#_extensions:-simplified-recommendation-notifications",
    "id": 1834
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Panel layout improvements  \n**New panel maximization setting**  \nFor those who prefer to work with the panel maximized, you no longer have to maximize the panel each time after toggling it open. For those that don't, the old panel behavior isn't going away.  \nInstead, a new setting, `panel.opensMaximized`, allows users to adjust to their own preference whether or not the panel always opens maximized when toggled with `Toggle Panel`. The options are `always`, `never`, and the default value `preserve`. The `preserve` option opens the panel maximized if it was maximized before being closed, and opens it non-maximized otherwise.  \nAdditionally, if the panel is hidden, `Toggle Maximized Panel` will now always open the panel maximized.  \n**Decreased minimum window width when panel is on the bottom**  \nWhen the panel is on the bottom rather than on the side, the minimum window width is 400px instead of 600px. This way, developers who want a narrower editor-only or panel-only window can now move the panel to the bottom, optionally hide or maximize it, and then resize the window to the new narrower minimum width.",
    "url": "https://code.visualstudio.com/updates/v1_50#_panel-layout-improvements",
    "id": 1835
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Linux ARM builds  \nVS Code is now available for both Linux ARMv7 and ARM64 architectures. This means you can now officially use VS Code on a Raspberry Pi, Chromebook, and other ARM-based devices!\nOn these devices, you can also leverage the VS Code extensions for [Remote Development](https://code.visualstudio.com/docs/remote/remote-overview) to get access to more powerful development environments when you need them.  \n![Linux ARM](images/1_50/linux-arm.png)  \n**[Download it now](https://code.visualstudio.com/#alt-downloads)**! Also available for [Insiders](https://code.visualstudio.com/insiders/#linux).",
    "url": "https://code.visualstudio.com/updates/v1_50#_linux-arm-builds",
    "id": 1836
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Editor  \n### Trigger IntelliSense  \nFor years, `Ctrl+Space` has been the predominant keybinding to trigger IntelliSense. However, on macOS and Windows, the same keybinding is used to toggle between keyboard layouts. To minimize confusion, we added another keybinding to trigger IntelliSense: on Windows and Linux it's `Ctrl+I`, and on macOS it's `Cmd+I`.",
    "url": "https://code.visualstudio.com/updates/v1_50#_trigger-intellisense",
    "id": 1837
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Debugging  \n### Debug hover improvements  \n* **Language hover now available while debugging**  \nWhile debugging, the debug hover takes precedence over the language hover, making it impossible to see the language hover. Starting with this release, you can switch from the debug hover back to the language hover by holding down the `Alt` modifier key. As long as `Alt` is pressed, the language hover is shown instead of the debug hover. This makes it much easier to read Javadoc while debugging.  \n* **Auto sizing debug hover**  \nIn order to minimize the need for scrolling, the debug hover width and height now automatically adapts to the size of the hover contents. This not only helps you the full strings, but you can also drill down into object structures, and the hover grows as needed.  \n![Auto Sizing debug hover](images/1_50/autosize-hover.gif)",
    "url": "https://code.visualstudio.com/updates/v1_50#_debug-hover-improvements",
    "id": 1838
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Debug console filter improvements  \nThe Debug Console now supports filtering, making it easier for users to find the output they are looking for, or to hide irrelevant logging output. We've added a badge to make it clear how many items are filtered away.  \n![Debug console badge](images/1_50/debug-console-badge.png)",
    "url": "https://code.visualstudio.com/updates/v1_50#_debug-console-filter-improvements",
    "id": 1839
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### JavaScript debugging  \n**Consolidated auto attach flows**  \nLast month, we introduced [new auto attach modes](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-feature) as an experimental feature. This month, they have left the experimental state. The previous **debug.autoAttach** setting is deprecated in favor of the **debug.javascript.autoAttachFilter** option. The auto attach badge in the status bar now shows the current mode and allows you to toggle between modes.  \n**Real-time performance view**  \nThe [flame chart extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-js-profile-flame) will now show a real-time view of performance metrics while debugging JavaScript code. CPU and memory usage are shown for Node.js programs and extension debugging. Debugging Chrome or Edge will additionally show metrics for DOM nodes, relayouts, and restyles.  \n![Debug realtime view](images/1_50/js-debug-realtime.gif)  \n*Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*  \nIn addition to the controls in the view, there are a few settings you can use to control it:  \n* **debug.flameGraph.realtimePollInterval**: how often stats are updated\n* **debug.flameGraph.realtimeViewDuration**: how much time should be displayed on the graph\n* **debug.flameGraph.realtimeEasing**: whether easing is enabled  \n**Left-heavy flame chart view**  \nAlso new in the [flame chart extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-js-profile-flame) is a \"left heavy\" view, toggled by clicking the button in the upper-right corner of the chart.  \nThis view groups call stacks and orders them by time, creating a visual representation of the \"top down\" table you might have used in other tools. This is especially useful if your profile has lots of thin call stacks (common with things like web servers) which are hard to get a sense of in the chronological view.  \nHere we have the same profile opened in the traditional chronological view on the right, and the left-heavy view on the left. With the left-heavy view, it's much easier to tell exactly where time is being spent.  \n![Screenshot of an editor showing the two flame graphs described above](images/1_50/left-heavy-flame.png)\n*Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*  \n**Step through missing code**  \nPreviously if you tried to debug a file that has a sourcemap, but for which the source was not available, you would get stuck on a \"could not load source\" error and would be unable to view the compiled code. We now show a prompt allowing you to ignore the sourcemap and step through compiled code in these cases.  \n![Notification that says \"This is a missing file referenced by a sourcemap. Would you like to debug the compiled version instead?\"](images/1_50/js-debug-compiled-code-step.png)\n*Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*",
    "url": "https://code.visualstudio.com/updates/v1_50#_javascript-debugging",
    "id": 1840
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Source Control  \n### Git: Commit --no-verify commands  \nGit commit commands with the `--no-verify` flag are now available after enabling the `git.allowNoVerifyCommit` setting.  \n![git --no-verify in command palette](images/1_50/git-no-verify.png)",
    "url": "https://code.visualstudio.com/updates/v1_50#_git:-commit---no-verify-commands",
    "id": 1841
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Git: Multiple git.path values  \nYou can now specify a list of locations to look for the git executable via the same `git.path` setting, by using an array of strings.",
    "url": "https://code.visualstudio.com/updates/v1_50#_git:-multiple-git.path-values",
    "id": 1842
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Source Control view saves input on window reload  \nAddresses [this request](https://github.com/microsoft/vscode/issues/41232) to save the Source Control view input on window reload.  \n![a message is typed in the SCM and the window is reloaded showing the saved message](images/1_50/scm-saves.gif)",
    "url": "https://code.visualstudio.com/updates/v1_50#_source-control-view-saves-input-on-window-reload",
    "id": 1843
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Terminal  \n### Search the workspace by selecting text in the terminal  \nThe standard shortcut for searching the workspace `kb(workbench.action.terminal.searchWorkspace)` will now use the terminal's selection if it's focused.",
    "url": "https://code.visualstudio.com/updates/v1_50#_search-the-workspace-by-selecting-text-in-the-terminal",
    "id": 1844
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### TypeScript 4.1 beta support  \nVS Code supports the [TypeScript 4.1 beta](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/) and nightly builds. The 4.1 update brings some new TypeScript language features, such as support for [recursive conditional types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#recursive-conditional-types), as well as tooling improvements. One focus area has been [adding initial support](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#jsdoc-see-tag) for `@see` tags in JSDoc comments.  \nTo start using the TypeScript 4.1 nightly builds, just install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with TypeScript 4.1.",
    "url": "https://code.visualstudio.com/updates/v1_50#_typescript-4.1-beta-support",
    "id": 1845
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Contributions to extensions  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.21.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0210) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_50#_github-pull-requests-and-issues",
    "id": 1846
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.50 include:  \n* Improved log access and rendering for containers.\n* Better recovery support for cloning repositories in container volumes.\n* Ability to install an extension in a remote context (container, SSH, WSL) without having to reload VS Code.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_50.md).",
    "url": "https://code.visualstudio.com/updates/v1_50#_remote-development",
    "id": 1847
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### ESLint  \nThe approval flow to allow the execution of a ESLint library got reworked. The initial experience is now as follows:  \n* No modal dialog is shown when the ESLint extension tries to load a ESLint library for the first time and an approval is necessary. Instead, the ESLint status bar item changes to ![ESLint status icon](images/1_50/eslint-status.png) indicating that the execution is currently blocked.\n* If the active text editor content can be validated using ESLint, a problem at the top of the file is shown in addition.  \nThe execution of the ESLint library can be denied or approved using the following gestures:  \n* Clicking on the Status Bar icon.\n* Using the quick fix for the corresponding ESLint problem.\n* Executing the command **ESLint: Manage Library Execution** from the command palette.  \nAll gestures will open the following dialog:  \n![ESLint Dialog](images/1_50/eslint-dialog.png)  \nThe chosen action is then reflected in the ESLint Status Bar item in the following way:  \n* `Allow` will prefix the status bar item with a check mark.\n* `Allow Everywhere` will prefix the status bar item with a double check mark.\n* `Deny` and `Disable` will prefix the status bar item with a blocked sign.  \nYou can manage our decisions using the following commands:  \n* **ESLint: Manage Library Execution** will reopen above dialog.\n* **ESLint: Reset Library Decisions** lets you reset previous decisions you have made.",
    "url": "https://code.visualstudio.com/updates/v1_50#_eslint",
    "id": 1848
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Template string converter  \nThe **[Template String Converter](https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter)** extension converts quotes to backticks when a `$` and `{` are entered within a string in JavaScript and TypeScript files.  \n![typing a dollar sign then open curly brace within a string converts the quotes to backticks](images/1_50/template-string-converter-extension.gif)",
    "url": "https://code.visualstudio.com/updates/v1_50#_template-string-converter",
    "id": 1849
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Docs View  \nThe [Docs View](https://marketplace.visualstudio.com/items?itemName=bierner.docs-view) extension uses the new [Webview View API](#webview-views) to show documentation for the symbol at the current cursor position in the sidebar or panel:  \n![Showing the docs for Array.from in the panel](images/1_50/docs-view.png)",
    "url": "https://code.visualstudio.com/updates/v1_50#_docs-view",
    "id": 1850
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Extension authoring  \n### Submenus  \nThe submenu API has been promoted out of proposed state. Extension authors can now define and use submenus across supported menu locations. Check out the [syntax](https://github.com/microsoft/vscode/issues/100172#issuecomment-645203070) as well as the [possibilities](https://github.com/microsoft/vscode/pull/102784#issuecomment-663036534) that this API enables.",
    "url": "https://code.visualstudio.com/updates/v1_50#_submenus",
    "id": 1851
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Source Control Resource State context value  \nInstances of `SourceControlResourceState` now support an optional `contextValue: string` field, which allows defining a context value to match again `when` clauses in the `scm/resourceState/context` menu. The context key to use is `scmResourceState`. More details on the original [feature request](https://github.com/microsoft/vscode/issues/86180) and respective [pull request](https://github.com/microsoft/vscode/pull/90952).",
    "url": "https://code.visualstudio.com/updates/v1_50#_source-control-resource-state-context-value",
    "id": 1852
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Asynchronously resolve code action  \nFor code action providers, we have added an optional function ([`CodeActionProvider#resolveCodeAction`](https://github.com/microsoft/vscode/blob/1fd7ee15d3a2c50547228b08cefc7c13a5a739d2/src/vs/vscode.d.ts#L2237-L2252)) which allows you to defer the computation of the actual edits a code action is going to make. This should help reduce the time it takes to provide code actions.",
    "url": "https://code.visualstudio.com/updates/v1_50#_asynchronously-resolve-code-action",
    "id": 1853
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### References Viewlet API  \nThe references viewlet now [exports an API](https://github.com/microsoft/vscode-references-view/blob/main/src/references-view.d.ts) that allows its content to be defined by other extensions.",
    "url": "https://code.visualstudio.com/updates/v1_50#_references-viewlet-api",
    "id": 1854
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### New theme colors  \n* `tab.lastPinnedBorder`: Border on the right of the last pinned editor to separate from unpinned editors.\n* `gitDecoration.stageDeletedResourceForeground`: Foreground color for staged deletions git decorations.\n* `gitDecoration.stageModifiedResourceForeground`: Foreground color for staged modifications git decorations.\n* `charts.red`, `charts.blue`, `charts.yellow`, `charts.orange`, `charts.green`, `charts.purple`, `charts.foreground`, `charts.lines`: Colors intended to be used by data visualization extensions.",
    "url": "https://code.visualstudio.com/updates/v1_50#_new-theme-colors",
    "id": 1855
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Webview Views  \nThe [Webview View API](https://github.com/microsoft/vscode/issues/46585) allows extensions to contribute [webview](https://code.visualstudio.com/api/extension-guides/webview) based views to the sidebar or panel. These views can offer specialized presentations of data, more advanced user interfaces, and much more.  \n![The 'calico colors' webview view sample extension in the side bar](images/1_50/webview-view.png)  \nTo get started with webview views, take a look at the [webview view extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-view-sample).",
    "url": "https://code.visualstudio.com/updates/v1_50#_webview-views",
    "id": 1856
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Updated Codicons  \nWe've added the following new icons to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels):  \n* `export`\n* `graph-left`\n* `magnet`\n* `notebook`\n* `redo`\n* `check-all`\n* `pinned`  \n![Updated codicons](images/1_50/codicons.png)",
    "url": "https://code.visualstudio.com/updates/v1_50#_updated-codicons",
    "id": 1857
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### View title description  \nThe `TreeView` now has an optional [`description`](https://github.com/microsoft/vscode/blob/1fd7ee15d3a2c50547228b08cefc7c13a5a739d2/src/vs/vscode.d.ts#L8618-L8622) property which can be used to show less prominent text next to a tree's title.  \n![TreeView description](images/1_50/treeview-description.png)",
    "url": "https://code.visualstudio.com/updates/v1_50#_view-title-description",
    "id": 1858
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Comments API  \nWe have added a new property `readOnly` to `CommentThread` to allow hiding the reply button in a comment thread.",
    "url": "https://code.visualstudio.com/updates/v1_50#_comments-api",
    "id": 1859
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Debug Adapter Protocol  \n### New invalidated event  \nA new `invalidated` event has been added to the protocol. This event signals that some state in the debug adapter has changed and requires that the client (frontend) needs to re-render the data previously requested.\nDebug adapters do not have to emit the event for runtime changes like \"stopped\" or thread changes because in these cases the client refetches the new state anyway. However, the event can be used to refresh the UI after rendering formatting has changed in the debug adapter. Debug adapters should only send the event if a true `supportsInvalidatedEvent` capability was received from the client in the \u2018initialize\u2019 request. Mock debug has an [example](https://github.com/microsoft/vscode-mock-debug/blob/23fd6bf224234f188eff23eba83b086e1ee5917c/src/mockDebug.ts#L553) for how to use the event.",
    "url": "https://code.visualstudio.com/updates/v1_50#_new-invalidated-event",
    "id": 1860
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Proposal for Conditional Exception support  \nWe are planning to support \"Conditional Exceptions\" in a future version of VS Code. Since this requires support in the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/) (DAP) we've prepared a [proposal for \"Conditional Exception\" support](https://github.com/microsoft/debug-adapter-protocol/issues/137#issuecomment-698211532). If you are a debug extension author and interested in this DAP protocol addition, we'd appreciate your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_50#_proposal-for-conditional-exception-support",
    "id": 1861
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Engineering  \n### Building VS Code with TypeScript 4.1 beta  \nWe now use the TypeScript 4.1 nightly builds to build VS Code. TypeScript 4.1 adds a few new strictness checks, including [more strict types for `resolve` in promises](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#resolves-parameters-are-no-longer-optional-in-promises). This improved type checking helped us to identify and fix potential bugs in our code.",
    "url": "https://code.visualstudio.com/updates/v1_50#_building-vs-code-with-typescript-4.1-beta",
    "id": 1862
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n## Documentation  \n### Updated Create a Dev Container tutorial  \nWe've updated the documentation to help you [create a Dev Container](https://code.visualstudio.com/docs/devcontainers/create-dev-container). The tutorial now clearly walks you through the steps to create a reusable Docker container to match your development environment. You'll learn how to:  \n* Author a `devcontainer.json` to describe how VS Code will create and start your container.\n* Add additional software and frameworks through a `Dockerfile`.\n* Combine multiple Docker containers through Docker Compose.\n* Build and test your custom development container.",
    "url": "https://code.visualstudio.com/updates/v1_50#_updated-create-a-dev-container-tutorial",
    "id": 1863
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Microsoft Edge Tools extension  \nThe [Microsoft Edge Tools for VS Code](https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.vscode-edge-devtools) extension is out of preview and provides the Microsoft Edge dev tools directly in VS Code. You will be able to see your site's runtime HTML structure, alter its layout, fix styling issues as well as see your site's network requests.  \n![Microsoft Edge Tools for VS Code extension](images/1_50/edge-tools-extension.png)  \nYou can read more about this release and the extension's powerful features in this recent [blog post](https://blogs.windows.com/msedgedev/2020/10/01/microsoft-edge-tools-vscode/).",
    "url": "https://code.visualstudio.com/updates/v1_50#_microsoft-edge-tools-extension",
    "id": 1864
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2020 Release (1.50)  \n### Azure Cognitive Search extension  \nTry out the new Microsoft [Azure Cognitive Search](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurecognitivesearch) extension for working with [Azure Cognitive Search](https://learn.microsoft.com/azure/search/search-what-is-azure-search). The extension makes it easy to develop and manage your search service directly from VS Code and includes full IntelliSense and a rich set of snippets.  \n![Azure Cognitive Search extension](images/1_50/azure-cognitive-search.png)",
    "url": "https://code.visualstudio.com/updates/v1_50#_azure-cognitive-search-extension",
    "id": 1865
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Workbench  \n### More prominent pinned tabs  \nPinned tabs will now always show their pin icon, even while inactive, to make them easier to identify. If an editor is both pinned and contains unsaved changes, the icon reflects both states.  \n![Inactive pinned tabs showing pin icons](images/1_51/pinned-tabs.png)",
    "url": "https://code.visualstudio.com/updates/v1_51#_more-prominent-pinned-tabs",
    "id": 1866
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Extension trees use custom hover  \nInstead of using the native tooltip in extension tree views, we now use a custom hover that is consistent cross-platform and fits better with the overall UX.  \n![Custom tree hover](images/1_51/custom-tree-hover.gif)",
    "url": "https://code.visualstudio.com/updates/v1_51#_extension-trees-use-custom-hover",
    "id": 1867
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Install an extension without synchronizing  \nYou can now install an extension without synchronizing it while settings sync is enabled.  \n![Install extension without syncing](images/1_51/extension-install-donot-sync.png)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=github.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_51#_install-an-extension-without-synchronizing",
    "id": 1868
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Install an extension from Explorer  \nVS Code now supports installing an extension VSIX file from the Explorer by right-clicking on a VSIX file and choosing the **Install Extension VSIX** context menu item.",
    "url": "https://code.visualstudio.com/updates/v1_51#_install-an-extension-from-explorer",
    "id": 1869
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Input blur command  \nA new internal `workbench.action.blur` command is now available, which removes focus from any focusable input. You can assign a keyboard shortcut for this command in the **Keyboard Shortcuts Preferences**.",
    "url": "https://code.visualstudio.com/updates/v1_51#_input-blur-command",
    "id": 1870
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Integrated Terminal  \n### Local Echo  \nMaking modifications in the terminal traditionally requires information to be sent to the terminal process, processed, and returned to VS Code in order to be affected. This can be slow when working on a poor or distant connection to an [SSH server](https://code.visualstudio.com/docs/remote/ssh) or [Codespace](https://github.com/features/codespaces).  \nThis release adds a \"local echo\" mode to the terminal, which attempts to predict modifications and cursor movements made locally and show them in the UI without requiring a round trip to the server. By default, predicted characters show as \"dimmed\":  \n![Gif showing typing with 250ms latency where characters entered immediately are dimmed](images/1_51/local-echo.gif)  \nThere are two settings you can use to configure this:  \n- `terminal.integrated.localEchoLatencyThreshold` configures the detected delay threshold, in milliseconds, at which local echo will activate. This can be set to `0` to turn on the feature all the time, or `-1` to disable it. Defaults to `30`.\n- `terminal.integrated.localEchoStyle` configures the style or color of local character, defaults to `dim`.",
    "url": "https://code.visualstudio.com/updates/v1_51#_local-echo",
    "id": 1871
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## IntelliSense  \n### Resizable suggestions  \nThis milestone, we've made several improvements to the suggestions UI. First and foremost, it can now be resized. Drag the sides or corners to resize the control.  \n![Resizable Suggestions control](images/1_51/suggest-drag.gif)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=github.github-vscode-theme), Font: FiraCode*  \nThe size of the suggestions list will be saved and restored across sessions. The size of the details pane is only saved per session, since that size tends to be more variable. Also, the `editor.suggest.maxVisibleSuggestions` setting has become obsolete.",
    "url": "https://code.visualstudio.com/updates/v1_51#_resizable-suggestions",
    "id": 1872
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Status bar for suggestions  \nThe suggestions control can now also show its own status bar at the bottom of the window. Enable it using the `editor.suggest.showStatusBar` setting. It makes toggling details simpler, and shows if a completion supports inserting, replacing, or both.  \n![Suggestions Status Bar](images/1_51/suggest-status.png)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=github.github-vscode-theme), Font: FiraCode*  \nIn the sample above, selecting \"Insert\" results in `Math.floorceil` and selecting \"Replace\" results in `Math.floor`.  \nThe new `editor.suggest.insertMode` setting allows you to configure whether you prefer insert or replace. When a suggestion supports both, your preference will be the default.",
    "url": "https://code.visualstudio.com/updates/v1_51#_status-bar-for-suggestions",
    "id": 1873
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Move cursor to select suggestions  \nLast but not least, you can now move the cursor while suggestions are showing. For instance, you can trigger suggestions at the end of a word, move left to see more suggestions, and then use replace to overwrite the word.  \n![Moving cursor while suggestions are showing](images/1_51/suggest-left.gif)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=github.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_51#_move-cursor-to-select-suggestions",
    "id": 1874
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Git: Tag commands in submenu  \nTag related Git commands have been added to the **...** Git menu.  \n![Git tags submenu](images/1_51/git-tags.png)",
    "url": "https://code.visualstudio.com/updates/v1_51#_git:-tag-commands-in-submenu",
    "id": 1875
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Git: Rebase command  \nA new **Git: Rebase branch...** command has been added which lets you rebase a branch using the UI.",
    "url": "https://code.visualstudio.com/updates/v1_51#_git:-rebase-command",
    "id": 1876
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Git: Recursive clone command  \nWith the **Git: Clone (Recursive)** command, you can now recursively clone Git repositories, including its nested Git submodules.",
    "url": "https://code.visualstudio.com/updates/v1_51#_git:-recursive-clone-command",
    "id": 1877
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Timeline: Emoji shortcode rendering  \nWe now render emoji shortcodes, such as `:smile:`, in the Timeline View.  \n![Timeline view with emoji](images/1_51/timeline.png)",
    "url": "https://code.visualstudio.com/updates/v1_51#_timeline:-emoji-shortcode-rendering",
    "id": 1878
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Languages  \n### Markdown smart select  \nExpand and shrink selection in Markdown documents using the following new commands:  \n* Expand: `kb(editor.action.smartSelect.expand)`\n* Shrink: `kb(editor.action.smartSelect.shrink)`  \nSelection applies to the following, and follows a traditional hierarchical pattern:  \n* Headers\n* Lists\n* Block quotes\n* Fenced code blocks\n* Html code blocks\n* Paragraphs  \n![Smart select within a Markdown document expands from a block element, to the block element containing it, to the rest of the content under a header, to the header itself](images/1_51/markdown-smart-select-demo.gif)",
    "url": "https://code.visualstudio.com/updates/v1_51#_markdown-smart-select",
    "id": 1879
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Empty brace formatting option for JavaScript and TypeScript  \nThe new `javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces` and `typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces` formatting configuration option controls if spaces are inserted between empty braces. The default value for these settings is true. For example, for the JavaScript:  \n```java\nclass Foo {\ndoFoo() { }\n}\n```  \nSetting `\"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces\": false` and formatting the code results in:  \n```java\nclass Foo {\ndoFoo() {} // Notice that the space has been removed\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_51#_empty-brace-formatting-option-for-javascript-and-typescript",
    "id": 1880
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Browser support  \n### Download folders (Edge, Chrome)  \nLeveraging the new [File System Access](https://wicg.github.io/file-system-access/) API, VS Code running in a browser can now offer a download action for folders from the File Explorer to download all files and folders to disk.  \n![Download folder](images/1_51/download-folder.gif)  \n**Note:** This requires a recent version of Microsoft Edge or Google Chrome.",
    "url": "https://code.visualstudio.com/updates/v1_51#_download-folders-edge,-chrome",
    "id": 1881
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Open Workspace notification  \nIf you open a folder that contains `.code-workspace` files at the top level, you'll now see a notification asking you to open it. This was always the case in VS Code for desktop, and will now work in the browser too.  \n![Open workspace notification](images/1_51/open-workspace.png)",
    "url": "https://code.visualstudio.com/updates/v1_51#_open-workspace-notification",
    "id": 1882
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Prevent accidental close  \nA new setting `window.confirmBeforeClose` was added to show a confirmation dialog before closing or leaving the workbench.  \nPossible values are:  \n* `keyboardOnly` The confirmation will only be shown when you use a keybinding to close (for example, `kb(workbench.action.closeWindow)`). (default)\n* `always`: The confirmation dialog will always be shown, even if you close from a mouse gesture.\n* `never`: The confirmation will never be shown.  \n![Close confirmation dialog](images/1_51/web-confirmation.png)  \n**Note**: This setting may not cover all cases. Browsers may still decide to close a tab or window without confirmation.",
    "url": "https://code.visualstudio.com/updates/v1_51#_prevent-accidental-close",
    "id": 1883
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Contributions to extensions  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.21.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0210) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_51#_github-pull-requests-and-issues",
    "id": 1884
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.51 include:  \n* Ability to persist/reconnect to terminal sessions.\n* Improved port forwarding experience.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_51.md).",
    "url": "https://code.visualstudio.com/updates/v1_51#_remote-development",
    "id": 1885
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Remember proxy credentials  \nWe are overhauling the login dialog that shows when a network connection requires authentication with a proxy. A new setting, `window.enableExperimentalProxyLoginDialog: true`, will enable this new experience that we plan to make the default in a future release.  \n![Proxy Login](images/1_51/proxy-login.png)  \n*Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=github.github-vscode-theme)*  \nThe dialog will appear inside the VS Code window and offer a way to remember the credentials so that you do not have to provide them each time you start VS Code. Credentials will be stored in the OS standard credential store (keychain on macOS, Windows Credential Manager on Windows, and gnome keyring on Linux).  \nWe still only show this dialog once per session, but might revisit this decision in the future. You will see the dialog appear again in case the credentials you selected to be remembered are not valid. Providing them again allows you to change them.  \nPlease enable this option and let us know if something does not work as expected through our [issue tracker](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_51#_remember-proxy-credentials",
    "id": 1886
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### TypeScript 4.1 beta support  \nVS Code supports the [TypeScript 4.1 beta](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/) and nightly builds. The 4.1 update brings some new TypeScript language features, such as support for [recursive conditional types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#recursive-conditional-types), as well as tooling improvements. One focus area has been [adding initial support](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#jsdoc-see-tag) for `@see` tags in JSDoc comments.  \nTo start using the TypeScript 4.1 nightly builds, just install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with TypeScript 4.1.",
    "url": "https://code.visualstudio.com/updates/v1_51#_typescript-4.1-beta-support",
    "id": 1887
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Extension authoring  \n### Updated extension samples  \nWe've updated some of our [extension samples](https://github.com/microsoft/vscode-extension-samples) to include VS Code default styles that are hooked up to our color theme tokens. This means that common elements (text, buttons, inputs) will be themeable and match the default styles in the product. Below are the extensions that include this:  \n* [custom-editor-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/custom-editor-sample)\n* [webview-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-sample)\n* [webview-view-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-view-sample)  \n![Webview style samples](images/1_51/webview-styles.gif)",
    "url": "https://code.visualstudio.com/updates/v1_51#_updated-extension-samples",
    "id": 1888
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Codicon colors in trees  \nWith the finalization of the [`ThemeIcon` color API](https://github.com/microsoft/vscode/blob/5dbb54cab77218f8f722c49fb10dfe44fd909298/src/vs/vscode.d.ts#L821-L826), extension authors can use theme colors on codicons in custom tree views.  \n![Tree view with icon colors](images/1_51/tree-icon-color.png)",
    "url": "https://code.visualstudio.com/updates/v1_51#_codicon-colors-in-trees",
    "id": 1889
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Sync Global State  \nExtensions can now sync their global state by providing the keys, whose values should be synchronized when Settings Sync is enabled, using the newly introduced `setKeysForSync` API in `globalState` memento.  \n```ts\n/**\n* Set the keys whose values should be synchronized across devices when synchronizing user-data\n* like configuration, extensions, and mementos.\n*\n* Note that this function defines the whole set of keys whose values are synchronized:\n*  - calling it with an empty array stops synchronization for this memento\n*  - calling it with a non-empty array replaces all keys whose values are synchronized\n*\n* For any given set of keys this function needs to be called only once but there is no harm in\n* repeatedly calling it.\n*\n* @param keys The set of keys whose values are synced.\n*/\nsetKeysForSync(keys: string[]): void;\n```",
    "url": "https://code.visualstudio.com/updates/v1_51#_sync-global-state",
    "id": 1890
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Comment thread reply button visibility  \n[Comment](https://code.visualstudio.com/api/references/vscode-api#comments) extensions can now control the visibility of the reply button in a comment thread with a new property, `CommentThread#canReply`. When it's set to `false`, users will not see the reply button or comment box in the comment thread.",
    "url": "https://code.visualstudio.com/updates/v1_51#_comment-thread-reply-button-visibility",
    "id": 1891
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n### Password APIs  \nAs part of continued work on [Authentication Providers](https://github.com/microsoft/vscode/issues/88309), we have introduced API for storing and retrieving sensitive information. Internally, this acts as a wrapper of the [keytar](https://github.com/atom/node-keytar) library that VS Code uses for storing secrets.  \n```ts\n/**\n* Retrieve a password that was stored with key. Returns undefined if there\n* is no password matching that key.\n* @param key The key the password was stored under.\n*/\nexport function getPassword(key: string): Thenable<string | undefined>;\n\n/**\n* Store a password under a given key.\n* @param key The key to store the password under\n* @param value The password\n*/\nexport function setPassword(key: string, value: string): Thenable<void>;\n\n/**\n* Remove a password from storage.\n* @param key The key the password was stored under.\n*/\nexport function deletePassword(key: string): Thenable<void>;\n\n/**\n* Fires when a password is set or deleted.\n*/\nexport const onDidChangePassword: Event<void>\n```",
    "url": "https://code.visualstudio.com/updates/v1_51#_password-apis",
    "id": 1892
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Engineering  \n### Making VS Code Trusted Types compliant  \nWe have continued the effort to make VS Code \"Trusted Types\" compliant. The goal is to prevent DOM-based cross site scripting vulnerabilities. You can learn more about trusted types at the web.dev [Trusted Types site](https://web.dev/trusted-types) and follow our progress in [issue #103699](https://github.com/microsoft/vscode/issues/103699).",
    "url": "https://code.visualstudio.com/updates/v1_51#_making-vs-code-trusted-types-compliant",
    "id": 1893
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2020 Release (1.51)  \n## Documentation  \n### Getting started  \nWe are focusing on ways to make getting started with the editor easier. We've created a new [\"Learn to Code\" landing page](https://code.visualstudio.com/learntocode) on our website with coding packs and new content geared towards folks who are new to coding. We've also created new student-friendly videos and resources on the site at [code.visualstudio.com/learn](https://code.visualstudio.com/learn).  \n![Learn to code](images/1_51/learn-to-code.png)",
    "url": "https://code.visualstudio.com/updates/v1_51#_getting-started",
    "id": 1894
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Workbench  \n### Preview editor improvements  \nWe've made several updates to how we handle [preview editors](https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode) based on user feedback.  \nThe `workbench.editor.enablePreviewFromQuickOpen` setting is now disabled by default, so that editors opened from **Quick Open** will no longer appear in preview mode.  \nWhen you start a code navigation (for example, with **Go to Definition**), the editor you start from will move out of preview mode and stay open, while the new editor will be in preview mode until you navigate further.  \n![Go to Definition](images/1_52/goto-definition.gif)  \nWe changed all of our custom trees (the ones used in the Extensions or Git views, for example) to work more consistently like other built-in trees (such as the File Explorer). This means, the following interactions now apply to all of them:  \n* Double-click or mouse-middle-click to open in non-preview.\n* `kbstyle(Enter)` to open in non-preview mode (`kbstyle(Space)` to open in preview mode).\n* `Alt+Click` to open an editor to the side of the active one.  \n**Note:** If you are an extension author who is using our custom tree API, you get the benefit of this change as well. Make sure to use the `vscode.open` or `vscode.diff` commands for the `TreeItem.command` to get the new preview mode behavior.  \nA new menu item, **Keep Editors Open**, in the editor overflow menu allows you to quickly turn off preview editors altogether:  \n![Selecting Keep Editors Open in the overflow menu](images/1_52/keep-open.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_preview-editor-improvements",
    "id": 1896
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Restore previous session windows  \nA new value `preserve` for the existing `window.restoreWindows` setting lets you force that every window you had opened before closing VS Code is restored when you restart VS Code, even if VS Code is explicitly asked to open a specific folder or file. A common example is double-clicking on a file in your platform's file explorer to open it in VS Code or using the terminal to open a specific file or folder. Without the `window.restoreWindows: preserve` setting, VS Code will only open the file or folder as instructed, but not restore any other window.",
    "url": "https://code.visualstudio.com/updates/v1_52#_restore-previous-session-windows",
    "id": 1897
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Disable editor group splitting on drag & drop  \nA new setting `workbench.editor.splitOnDragAndDrop` prevents editor group splitting when using dragging and dropping editors. There is also a way to toggle this conditionally during the drag and drop operation by pressing and holding the `kbstyle(Shift)` key (macOS) or `kbstyle(Alt)` key (Windows, Linux).",
    "url": "https://code.visualstudio.com/updates/v1_52#_disable-editor-group-splitting-on-drag-&-drop",
    "id": 1898
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Undo file operations in Explorer  \nThe File Explorer now supports **Undo** and **Redo** for all file operations: delete, rename, copy, move, new file, and new folder. Make sure the focus is in the File Explorer and trigger the **Undo** or **Redo** commands and your last file operation will be undone or redone respectively. Keep in mind that we have separate undo stacks for the editor and the File Explorer, and we choose which one to undo based on focus.  \n![Selecting undo from the Edit menu while in the Explorer](images/1_52/explorer-undo.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_undo-file-operations-in-explorer",
    "id": 1899
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Progress for long running operations in Explorer  \nWe now show progress in the File Explorer and Status bar for long running file operations (longer than 500 ms). There is also initial support for canceling long running operations. This should be helpful when copying large folders or downloading resources from remote locations.  \n![Showing progress in the File Explorer](images/1_52/explorer-progress.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_progress-for-long-running-operations-in-explorer",
    "id": 1900
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Open Editors sorting  \nThere is a new setting `explorer.openEditors.sortOrder` to control the sort order in the **OPEN EDITORS** list.  \nThe values are:  \n* `editorOrder` - Editors are listed in the same order as editor tabs are shown (default).\n* `alphabetical` - Editors are listed in alphabetical order inside each editor group.  \nThe `alphabetical` sorting only has an effect on the Open Editors view - it will not \"move tabs\" in any way.  \nThis can be helpful when you have lots of files open and you want to match up files that are associated (for example, hello.component.js and hello.component.html).  \n![Open Editors sorted](images/1_52/open-editors-sorted.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_open-editors-sorting",
    "id": 1901
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Accessible progress control  \nThe workbench progress display has been made more accessible. VS Code sets the appropriate ARIA roles so that screen readers can  report progress for all long running operations in VS Code. Most screen readers by default only announce progress if it is ongoing for more than 10 seconds.",
    "url": "https://code.visualstudio.com/updates/v1_52#_accessible-progress-control",
    "id": 1902
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Source Control changes show their parent folder path  \nDiff editors opened from the Source Control view will now reveal their file path (when tabs are disabled). Previously, only the filename would show, but now the parent folder appears if the before and after files are within the same folder.  \n![SCM changes showing parent folder path](images/1_52/git-editor-label.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_source-control-changes-show-their-parent-folder-path",
    "id": 1903
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### New proxy login dialog enabled by default  \nOur new proxy login dialog is now enabled by default. You can read our [previous release notes](https://code.visualstudio.com/updates/v1_51#_remember-proxy-credentials) for more details. The setting `window.enableExperimentalProxyLoginDialog` can be used to enable the old dialog, but we will remove this support in the near future. If you find an issue with the new login dialog, please let us know by filing an [issue](https://github.com/Microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_52#_new-proxy-login-dialog-enabled-by-default",
    "id": 1904
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Improved terminal environment handling (Linux, macOS)  \nWhen you start VS Code on Linux or macOS for the first time via the dock or a launcher (and not the terminal), VS Code starts a background process to resolve your shell environment (as defined or changed by `.bashrc` or `.zshrc`). All environment variables detected are then used by VS Code so that starting from a terminal or the dock/launcher does not make any difference, which is important when debugging or executing tasks.  \nUnfortunately, VS Code does not open until this background process has executed. In order to not block startup for too long, VS Code will begin opening after 10 seconds. In this case, VS Code now informs you that it was unable to resolve the shell environment and offers a link to learn more:  \n![Shell environment error after being unable to resolve in a reasonable time](images/1_52/shell-env-error.png)  \nSimilarly, VS Code now shows a warning after three seconds to indicate that VS Code startup was blocked resolving your shell environment:  \n![Shell environment warning if it takes longer than 3 seconds](images/1_52/shell-env-warning.png)  \nWe are actively looking into changing our strategy to not block VS Code from starting while still resolving the shell environment in the background, but this will only be possible in future milestones.  \nOther noteworthy changes in this area are:  \n* You can now define and change environment variables from a terminal before launching a second window of VS Code, and these will properly overwrite the variables from the first launch, effectively allowing for per-window environment variables (for example, this enables you to change the Node.js version via a tool such as `nvm` per window before starting).\n* Environment variables that are set from a terminal before launching a second window of VS Code are now preserved even when you switch folders in that second window.",
    "url": "https://code.visualstudio.com/updates/v1_52#_improved-terminal-environment-handling-linux,-macos",
    "id": 1905
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Improved workbench overflow  \nWhenever there isn't enough space to fit all views inside the workbench, VS Code will now show scrollbars to pan the contents and let you get access to everything. This applies to several areas across the workbench such as the side bar, editor grid, and more.  \n![Improved workbench overflow](images/1_52/splitview-overflow.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_improved-workbench-overflow",
    "id": 1906
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Sash hover border color  \nYou can now customize a border hover color for sashes (`sash.hoverBorder`) across the workbench.  \n![Sash hover border color](images/1_52/sash.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_sash-hover-border-color",
    "id": 1907
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Tree: Expand mode  \nA new `workbench.tree.expandMode` setting lets you control how folders expand in trees: using a single or a double-click.",
    "url": "https://code.visualstudio.com/updates/v1_52#_tree:-expand-mode",
    "id": 1908
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### macOS Big Sur updates  \nDue to an Electron 9 issue, whenever you select **Restart to Update**, VS Code won't automatically restart, but simply exit. Until the next VS Code release, which should include Electron 11, you must manually relaunch VS Code when this happens. Read more in [issue #109728](https://github.com/microsoft/vscode/issues/109728).",
    "url": "https://code.visualstudio.com/updates/v1_52#_macos-big-sur-updates",
    "id": 1909
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Source Control  \n### Preserve Source Control view state  \nThe Source Control view state is now preserved across sessions. Collapsed tree nodes will stay collapsed even after exiting and relaunching VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_52#_preserve-source-control-view-state",
    "id": 1910
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Source Control gutter action  \nThe new `scm.diffDecorationsGutterAction` setting lets you control what happens when you select the Source Control gutter decorations on the left side of the editor. The possible values are:  \n* `diff` - Open the inline diff peek view on click (default).\n* `none` - Disables any action.",
    "url": "https://code.visualstudio.com/updates/v1_52#_source-control-gutter-action",
    "id": 1911
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: New commands  \nSeveral new Git commands have been added to the Command Palette:  \n* **Git: Cherry Pick...** - Cherry pick a specific commit to your branch.\n* **Git: Rename** - Perform a git rename of the active file.\n* **Git: Push Tags** - Push all local tags to the remote.\n* **Git: Checkout to (Detached)...** - Perform a checkout in detached mode.",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-new-commands",
    "id": 1912
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: New settings  \nAdditionally, new Git settings have been added:  \n* `git.pruneOnFetch` - Make VS Code run `git fetch --prune` when fetching remote refs.\n* `git.ignoreSubmodules` - You can now make sure VS Code ignores changes in submodule repositories, which is useful in large monorepos.\n* `git.openAfterClone` - Control whether and how to open a folder after you cloned a git repository: on the current window, on a new window, when no folder is opened and by prompting the user.\n* `git.useCommitInputAsStashMessage` - Enable VS Code to use the commit message in the source control input box as a stash message, when running **Git: Stash**.\n* `git.followTagsWhenSync` - Follow tags when running **Git: Sync**.\n* `git.checkoutType` - Control what refs are shown, and in what order, when you run the **Git: Checkout...** command.",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-new-settings",
    "id": 1913
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: Prompt to save files before stashing  \nVS Code will now prompt you to save unsaved files whenever you attempt to stash changes.",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-prompt-to-save-files-before-stashing",
    "id": 1914
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: Better diff for deleted file merge conflicts  \nDeleted file merge conflicts now have an improved diff experience, showing the actual change in the file on the opposite branch to the deletion.",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-better-diff-for-deleted-file-merge-conflicts",
    "id": 1915
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: Fetch on remote addition  \nVS Code will now run `git fetch` right after you add a remote, fetching all the refs from that remote.",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-fetch-on-remote-addition",
    "id": 1916
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: Checkout detached  \nIt's now possible to checkout refs in detached mode from VS Code:  \n![Selecting Git: Checkout to (detached)... and then selecting a ref to checkout in detached mode](images/1_52/checkout-detached.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-checkout-detached",
    "id": 1917
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: Show command output on error  \nWhen a git command throws an error, you can now see the entire error message with a new **Show Command Output** option.  \n![Show command output option in error message](images/1_52/git-show-output.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-show-command-output-on-error",
    "id": 1918
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Git: New options for the git.api.getRemoteSources command  \nThe `git.api.getRemoteSources` Git API command options now support an optional `branch?: boolean` property that will make Git prompt the user to pick a branch from a remote source, given there's support from the remote source provider.  \nAdditionally, the command now supports a `providerName?: string` option that allows the caller to bypass the remote source choice by the user and use a specific provider directly.",
    "url": "https://code.visualstudio.com/updates/v1_52#_git:-new-options-for-the-git.api.getremotesources-command",
    "id": 1919
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Debugging  \n### Breakpoints view: Conditions for exception breakpoints  \nVS Code now supports editing conditions for Exception breakpoints from the Breakpoints view using the **Edit Condition** context menu action.  \nFor now, only the Mock Debug extension has (fake) Exception Breakpoint condition support, but soon other debug extensions will follow - such as the JavaScript debugger.  \n![Edit Condition menu item](images/1_52/edit-condition.png)  \n![Exception Condition](images/1_52/exception-condition.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_breakpoints-view:-conditions-for-exception-breakpoints",
    "id": 1920
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Exception area accessibility  \nThe exception information area in the editor has been made more accessible. While debugging, once an exception is hit, VS Code will automatically move focus to the Exception area, which will make screen readers report the exception details and the stack frame.  \nIt is now also possible to close the Exception area using the `kbstyle(Escape)` key or the **X** button in the top right of the Exception area.",
    "url": "https://code.visualstudio.com/updates/v1_52#_exception-area-accessibility",
    "id": 1921
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### UI Improvements  \n**Debugged line shown in overview ruler**  \nThe currently debugged line is now shown in the overview ruler on the right of the editor. For this decoration, we use the already present `editor.stackFrameHighlightBackground` color. In addition to this, VS Code shows the currently focused debugged line in the overview ruler using the `editor.focusedStackFrameHighlightBackground` color (focused debugged lines are non-top stack frame locations, which are manually selected in the **Call Stack View**).  \n**Automatic debug configuration improvements**  \nPreviously, we've introduced a feature so that debug extensions can analyze the current project and offer debug configurations automatically. These debug configurations are dynamically created and so they do not show up in the `launch.json` configuration file. In this milestone, we are also preserving recently used automatic debug configurations across VS Code restarts (and reloads) to make the whole experience smoother. In the case that an automatic debug configuration is no longer valid after a restart, VS Code will ask you to pick a new automatic configuration from the same provider once debugging is started.  \n**Debug Hover: help text/tip in the bottom to switch to normal hover**  \nThere is now help text on the bottom of the debug hover to make the `kbstyle(Alt)` switch to editor language hover while debugging more discoverable. As a reminder, when you are debugging, the debug hover takes precedence over the language hover, making it impossible to see the language hover. You can switch from the debug hover back to the language hover by holding down the `kbstyle(Alt)` modifier key. As long as `kbstyle(Alt)` is pressed, the language hover is shown instead of the debug hover. This makes it much easier to read hovers like Javadoc descriptions while debugging.  \n![Debug hover showing the message \"Hold Alt key to switch to editor language hover\"](images/1_52/debug-hover-alt.png)  \n**Debug Console: collapse identical lines**  \nThe Debug Console now collapses identical output and shows the number of occurrences. This feature makes it much easier to grasp repetitive program output.  \n![Debug Console collapsing identical lines](images/1_52/repl-collapse.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_ui-improvements",
    "id": 1922
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### New variables for launch.json and tasks.json  \nThe following new variables have been introduced:  \n* `${fileWorkspaceFolder}` - Resolves to the workspace folder path of the file open in the active VS Code editor.\n* `${fileDirnameBasename}` - Resolves to name of the folder that the file open in the active VS Code editor is in.\n* `${pathSeparator}` - Resolves to the character used by the operating system to separate components in file paths.",
    "url": "https://code.visualstudio.com/updates/v1_52#_new-variables-for-launch.json-and-tasks.json",
    "id": 1923
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### serverReadyAction: launch other debug config by name  \nThe [serverReadyAction](https://code.visualstudio.com/docs/editor/debugging#_automatically-open-a-uri-when-debugging-a-server-program) has historically been able to launch a browser or Chrome debugging by matching a URL. This release adds a new option to launch another arbitrary configuration by name. For example, in your `launch.json` you can specify:  \n```js\n\"serverReadyAction\": {\n\"action\": \"startDebugging\",\n\"pattern\": \"listening on port ([0-9]+)\",\n\"name\": \"Launch Browser\"\n}\n```  \nThis allows you to pass additional options in standard Chrome debug configurations and use other debuggers with the `serverReadyAction`.",
    "url": "https://code.visualstudio.com/updates/v1_52#_serverreadyaction:-launch-other-debug-config-by-name",
    "id": 1924
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Temporarily disable Auto Attach  \nAuto attach can now be disabled temporarily via the **Auto Attach** item in the Status bar, or via the **Debug: Toggle Auto Attach** command. Disabling auto attach in this way applies only to the current window and does not require restarting your terminal. It can be re-enabled in the same way.  \n![Showing the auto attach Quick Pick with an option that reads \"Temporarily disable auto attach in this session\"](images/1_52/auto-attach-disable.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_temporarily-disable-auto-attach",
    "id": 1925
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### JavaScript debugger  \nA complete list of changes can be found in the debugger's [changelog](https://github.com/microsoft/vscode-js-debug/blob/main/CHANGELOG.md#changelog).  \n**Breakpoint Diagnostic Tool**  \nThere is a new tool that is designed to help troubleshoot build or configuration issues that prevent debugging or prevent breakpoints from binding. To use it, run the **Debug: Create Diagnostic Information for Current Session** command while a debug session is running. In a later VS Code version, a hint for this diagnostic tool will appear automatically when appropriate.  \n**Setting for Default Executable Locations**  \nThere is a user setting, `debug.javascript.defaultRuntimeExecutable`, which allows you to specify the default locations of Node.js or Chrome binaries. For example, `{ \"pwa-chrome\": \"dev\" }` will use the \"dev\" build of Chrome whenever you debug with Chrome-type configurations.  \nNote that to use this new option, you want to make sure that your launch configuration is `pwa-node` instead of `node`, or `pwa-chrome` instead of Chrome.",
    "url": "https://code.visualstudio.com/updates/v1_52#_javascript-debugger",
    "id": 1926
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Tasks  \n### npm  \nThe built-in npm extension's setting `npm.packageManager` has a new default value: `auto`. The `auto` value will cause the package manager to be automatically detected based the `.lock` files and which package manager was used to install dependencies in the workspace. When there are multiple `.lock` files detected, a package manager will still be chosen, and a warning will indicate that there was a conflict.",
    "url": "https://code.visualstudio.com/updates/v1_52#_npm",
    "id": 1927
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Remove recent tasks  \nThe tasks Quick Pick has always had a **Recent Tasks** section at the top. Since this is a valuable location, you can now better curate your recent tasks by removing them from the Quick Pick with the **Remove Recently Used Task** button on the right.  \n![Remove recent task from Quick Pick menu](images/1_52/remove-recent-task.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_remove-recent-tasks",
    "id": 1928
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Hide inline details  \nSuggestions in VS Code have details that are displayed in a separate flyout beside the suggestion. The details view can be closed and then a preview of the details will be shown inline with the suggestions. Showing the details inline with the suggestion can take away too much space and so can now be disabled via a new boolean setting, `editor.suggest.showInlineDetails`.",
    "url": "https://code.visualstudio.com/updates/v1_52#_hide-inline-details",
    "id": 1930
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### TypeScript suggestions show path  \nTypeScript can provide completions that also add an import statement. However, when there are multiple symbols with the same name, it is hard to pick the right completion. This release makes this simpler because paths of auto-import completions are shown with the label.  \n![TypeScript show import path](images/1_52/suggest-details.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_typescript-suggestions-show-path",
    "id": 1931
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Customize CodeLens  \nYou can now configure the font family and size of CodeLens items.  \n![Custom CodeLens font](images/1_52/codelens-custom.png)  \nIn the screen capture above, font and size are customized using these two settings:  \n```json\n\"editor.codeLensFontFamily\": \"Comic Sans MS\",\n\"editor.codeLensFontSize\": 12,\n```",
    "url": "https://code.visualstudio.com/updates/v1_52#_customize-codelens",
    "id": 1932
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Editor  \n### Sticky tab stops when indenting with spaces  \nIf you prefer to indent your code with spaces, there is a new setting called `editor.stickyTabStops`, which makes VS Code treat cursor movements in leading spaces similar to tabs.  \n![Sticky Tab Stops](images/1_52/sticky-tab-stops.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_sticky-tab-stops-when-indenting-with-spaces",
    "id": 1933
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Delete Word command  \nThe existing delete word actions will either delete from the current cursor position to the start of the word (for example `kbstyle(Ctrl+Backspace)` on Windows/Linux) or to the end of the word (`kbstyle(Ctrl+Delete)` on Windows/Linux). There is now a new command that will delete the entire word under the cursor named **Delete Word**.",
    "url": "https://code.visualstudio.com/updates/v1_52#_delete-word-command",
    "id": 1934
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Word wrap in the diff editor  \nBoth the side-by-side and the inline views of the diff editor now support word wrapping. In general, the diff editor will respect the editor settings related to word wrapping. In the case of Markdown files, which are word wrapped by default, the diff editor will also word wrap them:  \n![Word wrap in the diff editor](images/1_52/word-wrap-diff-editor.png)  \nIf you would like the diff editor to either never wrap or always wrap, you can use the new `diffEditor.wordWrap` setting and configure it `\"on\"` or `\"off\"` (the default is `\"inherit\"`, which means the diff editor inherits the editor wrapping settings).",
    "url": "https://code.visualstudio.com/updates/v1_52#_word-wrap-in-the-diff-editor",
    "id": 1935
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Snippets  \n### Hide extension snippet  \nSnippets contributed by extensions can now be hidden from IntelliSense. This feature is available from the Insert Snippet picker when you run **Insert Snippet**. Find an extension snippet that you want to hide, and select the eye-icon on the right.  \n![Hide Extension Snippet](images/1_52/snippet-hide.png)  \nHidden snippets aren't showing in IntelliSense but can still be used via **Insert Snippet**. Last, when using Settings Sync, the hidden snippet preferences will be synchronized across your devices.",
    "url": "https://code.visualstudio.com/updates/v1_52#_hide-extension-snippet",
    "id": 1936
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Snippets without prefix  \nWhen authoring snippets, you can now omit the prefix property. Snippets without a prefix don't show in IntelliSense but can be used via **Insert Snippet**.",
    "url": "https://code.visualstudio.com/updates/v1_52#_snippets-without-prefix",
    "id": 1937
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Integrated Terminal  \n### Terminal configuration support  \nYou can now modify terminal settings by selecting **Configure Terminal Settings** in the terminal dropdown menu.  \n![Configure Terminal Settings](images/1_52/configure-terminal-settings.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_terminal-configuration-support",
    "id": 1938
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Keybindings management  \nBy default, keybindings are dispatched to the workbench instead of the terminal as specified in the `terminal.integrated.commandsToSkipShell` setting. A new notification informs the user when they have entered a keybinding corresponding to one of these commands and provides the option to configure the relevant settings.  \nTo send most keybindings to the terminal instead of the workbench, you can set `terminal.integrated.sendKeybindingsToShell`.  \n![Send Keybindings to Shell](images/1_52/terminal-keybindings-notification.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_keybindings-management",
    "id": 1939
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Languages  \n### Markdown inline smart select  \nExpand and shrink selection in Markdown documents using the following commands:  \n* Expand: `kb(editor.action.smartSelect.expand)`\n* Shrink: `kb(editor.action.smartSelect.shrink)`  \nSelection applies to italics, bold, inline code blocks, and links.  \n![Smart select within a Markdown document expands from the content within an inline Markdown type to include the Markdown symbols.](images/1_52/inline-markdown-smart-select.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_markdown-inline-smart-select",
    "id": 1940
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### TypeScript 4.1  \nThis release of VS Code includes [TypeScript 4.1.2](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1). This major TypeScript update brings support for a number of new language features\u2014including [template literal types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/#template-literal-types) and support for [React 17's factories\u2014as improving language tooling for JavaScript and TypeScript. As always, it also includes a number of bug fixes.  \nYou can read more about TypeScript 4.1 on the [TypeScript Blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1).  \n**Initial support for JSDoc @see tags**  \nJSDoc `@see` tags let you reference other functions and classes in your JSDoc comments. The example below shows the `crash` function referencing the `WrappedError` class from another file:  \n```js\n// @filename: somewhere.ts\nexport class WrappedError extends Error { ... }\n\n// @filename: ace.ts\nimport { WrappedError } from './somewhere'\n\n/**\n* @see {WrappedError}\n*/\nfunction crash(kind) {\nthrow new WrappedError(kind);\n}\n```  \nVS Code will now include basic `@see` references while performing renames. You can also run **Go to Definition** on the `@see` tag's content and `@see` tags will also show up in the list of references.  \nWe plan to continue improving support for `@see` tags in future releases.  \n**New settings for IntelliSense behavior and type checking**  \nThere are two new settings that control IntelliSense and type checking behavior in JavaScript and TypeScript files that are not part of an explicit tsconfig or jsconfig project.  \n* The `js/ts.implicitProjectConfig.strictNullChecks` setting enables [strict null checks](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html). It is `false` by default.  \nIf you are working in TypeScript, you definitely want to enable strict null checks as it can catch many common programming mistakes.  \nStrict null checks are also helpful while working in JavaScript. When strict null checks are enabled, hover and IntelliSense information will show which types can `undefined` and `null`. If you [enable type checking in your JavaScript](https://code.visualstudio.com/Docs/languages/javascript#_type-checking), VS Code can also use strict null checks to catch some common programming mistakes.  \n* The `js/ts.implicitProjectConfig.strictFunctionTypes` setting enables [strict function types](https://github.com/Microsoft/TypeScript/pull/18654). It is `true` by default.  \nStrict function types are more difficult to explain but also generally improve IntelliSense and can catch some programming mistakes.  \nKeep in mind that these settings are both overridden if a file is part of a jsconfig or tsconfig project.  \n**Renaming the other implicit JS/TS project settings**  \nThe other implicit project settings for JavaScript and TypeScript have been renamed to make them more accurate:  \n* `javascript.implicitProjectConfig.checkJs` -> `js/ts.implicitProjectConfig.checkJs`\n* `javascript.implicitProjectConfig.experimentalDecorators` -> `js/ts.implicitProjectConfig.experimentalDecorators`  \nThese settings were renamed because they apply to both JavaScript and TypeScript files that are not part of a jsconfig or tsconfig project. The previous setting names suggested they only applied to JavaScript files.",
    "url": "https://code.visualstudio.com/updates/v1_52#_typescript-4.1",
    "id": 1941
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### HTML  \n**New formatter settings**  \nThe HTML extension uses [JSBeautify](https://beautifier.io/) as the formatter. The update to the latest version of JSBeautify (1.13)  brings some new formatter settings:  \n* `html.format.wrapAttributesIndentSize`: Alignment size when using `force aligned` and `aligned multiple` in `html.format.wrapAttributes` or `null` to use the default indent size.\n* `html.format.templating`: Honor django, erb, handlebars, and php templating language tags.\n* `html.format.unformattedContentDelimiter`: Keep text content together between this string.  \nThe last setting lets you set a tag to mark areas that should not be formatted:  \n```json\n\"html.format.unformattedContentDelimiter\": \"<!-- DoNotFormat -->\"\n```  \n![Unformatted tag example](images/1_52/html-unformattedContent.png)  \n**New setting name for onTypeRename**  \nThe **On Type Rename** feature for editing a tag when its matching closing tag is modified is now called **linked editing**. The command to enable linked editing is **Start Linked Editing** (`kb(editor.action.linkedEditing)`) and `kbstyle(Escape)` disables linked editing mode.  \nThe setting to enable it is now:  \n```json\n\"editor.linkedEditing\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_52#_html",
    "id": 1942
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.52 include:  \n* Automatic port forwarding on Linux remotes.\n* New command to install remote extensions locally.\n* You can now select a branch when you open a repository in a container.\n* Server startup performance improvements by installing extensions in the background.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_52.md).",
    "url": "https://code.visualstudio.com/updates/v1_52#_remote-development",
    "id": 1943
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Notebooks  \nThe VS Code team is [continuing work](https://github.com/microsoft/vscode/issues?q=is%3Aissue+label%3Anotebook+milestone%3A%22November+2020%22+is%3Aclosed) on native support for Notebooks and improving its UX and performance.  \n**Improve large text output rendering**  \nThe native Notebook editor will now truncate the output if its content is too large to ensure the UI is always responsive. You can still open the full raw content of the output in a text editor.  \n![Large Output Rendering Optimization](images/1_52/notebook-large-output-optimization.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_notebooks",
    "id": 1944
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Extension authoring  \n### File Decoration API  \nThe `FileDecorationProvider` API is now final and can be used by any extension. With this API ambient information can be added to files, for the SCM and error decorations that show in the explorer use this API.",
    "url": "https://code.visualstudio.com/updates/v1_52#_file-decoration-api",
    "id": 1945
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Undoing resource changes  \nExplorer operations like create file, rename file or delete file raise events, which allow participation, for example, `onWillCreateFiles`, `onWillRenameFiles`, or `onWillDeleteFiles`. This release adds support for undoing such explorer operations and you should know that the aforementioned events are not fired when undoing an operation.",
    "url": "https://code.visualstudio.com/updates/v1_52#_undoing-resource-changes",
    "id": 1946
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### New theme colors  \n* `statusBarItem.errorBackground`: Status bar error items background color. Error items stand out from other status bar entries to indicate error conditions.\n* `statusBarItem.errorForeground`: Status bar error items foreground color. Error items stand out from other status bar entries to indicate error conditions.",
    "url": "https://code.visualstudio.com/updates/v1_52#_new-theme-colors",
    "id": 1947
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Error background colors  \nTheme authors can now leverage new theme colors for errors in the editor. Editor errors, warnings, and infos can now be styled via:  \n* `editorError.background`\n* `editorWarning.background`\n* `editorInfo.background`  \n![Error background colors](images/1_52/editor-error-background.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_error-background-colors",
    "id": 1948
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Updated Codicons  \nWe've added the following new icons to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels):  \n* `check-all`\n* `circle-large-filled`\n* `circle-large-outline`\n* `pass-filled`\n* `pinned-dirty`  \n![Codicons updates](images/1_52/codicons-updated.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_updated-codicons",
    "id": 1949
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Support for codicons for view containers & views  \nYou can now use codicons as icons for view containers and views. Example:  \n```json\n\"views\": {\n\"explorer\": [\n{\n\"id\": \"npm\",\n\"name\": \"NPM Scripts\",\n\"icon\": \"$(code)\",\n\"visibility\": \"hidden\"\n}\n]\n}\n```  \nSee the [icon listing](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing) for a list of available icons.",
    "url": "https://code.visualstudio.com/updates/v1_52#_support-for-codicons-for-view-containers-&-views",
    "id": 1950
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Linked editing range provider  \nWhat was formerly known as `OnTypeRenameProvider` is now a public API as `LinkedEditingRangeProvider`.  \nFor a given position in a document, a `LinkedEditingRangeProvider` links ranges with the same content. A change to one of the ranges can be applied to all other ranges.  \nThis can be seen in action in HTML. When editing the name of an opening tag, the closing tag is automatically updated as well.",
    "url": "https://code.visualstudio.com/updates/v1_52#_linked-editing-range-provider",
    "id": 1951
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### FoldingRangeProvider.onDidChangeFoldingRanges  \n`FoldingRangeProvider.onDidChangeFoldingRanges` has been made a public API. It is an optional event to signal that the folding ranges from a provider have changed.",
    "url": "https://code.visualstudio.com/updates/v1_52#_foldingrangeprovider.ondidchangefoldingranges",
    "id": 1952
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Open Keyboard Shortcuts editor with query filter  \nExtensions can now pass query text while opening the Keyboard Shortcuts editor using the command `workbench.action.openGlobalKeybindings`.  \n```ts\nvscode.commands.executeCommand('workbench.action.openGlobalKeybindings', 'query')\n```",
    "url": "https://code.visualstudio.com/updates/v1_52#_open-keyboard-shortcuts-editor-with-query-filter",
    "id": 1953
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### fs.isWritableFileSystem  \nThe new `fs.isWritableFileSystem` API lets you check if a given file system supports writing. For example, to check if a document with a url of `example:/path/to/file` is on a writeable file system:  \n```ts\n\nswitch (vscode.fs.isWritableFileSystem('example')) {\ncase true:\n// The `example` filesystem supports writing.\n// Keep in mind the permissions or other issues may still prevent\n// a file from being written.\nbreak;\n\ncase false:\n// The `example` filesystem does not support writing (it is readonly).\nbreak;\n\ncase undefined:\n// VS Code does not know about the `example` filesystem\nbreak;\n}\n```  \n[Custom editors](https://code.visualstudio.com/api/extension-guides/custom-editors) can use `fs.isWritableFileSystem` to determine if they show a readonly UI.",
    "url": "https://code.visualstudio.com/updates/v1_52#_fs.iswritablefilesystem",
    "id": 1954
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Markdown Tree tooltip API  \nThe API for using Markdown for `tooltip` on `TreeItem` has been finalized. You can set the `tooltip` to a Markdown string when you create the `TreeItem`, or, if your Markdown might take additional time to compute, you can use the new `TreeDataProvider.resolveTreeItem` to set the tooltip.  \n![Markdown tree tooltip](images/1_52/markdown-tree-tooltip.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_markdown-tree-tooltip-api",
    "id": 1955
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### TreeItem highlights API  \nThe long awaited `TreeItemLabel` API has been finalized. This API can be used to set highlights on the `label` of a `TreeItem`. You can see it in action in the References view.  \n![Tree item highlights](images/1_52/tree-item-highlights.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_treeitem-highlights-api",
    "id": 1956
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### listDoubleSelection and listMultiSelection  \nUsing the context values `listDoubleSelection` and `listMultiSelection` for command enablement in contributed tree views now works.",
    "url": "https://code.visualstudio.com/updates/v1_52#_listdoubleselection-and-listmultiselection",
    "id": 1957
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### View welcome content button enablement  \nYou can now set an enablement context clause for view welcome content sections.  \n![View welcome content button enablement](images/1_52/view-welcome.gif)",
    "url": "https://code.visualstudio.com/updates/v1_52#_view-welcome-content-button-enablement",
    "id": 1958
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### More themeable icons  \nWork has resumed on the product icon themes. [Product icon theme](https://code.visualstudio.com/api/extension-guides/product-icon-theme) is a proposed feature that allows you to style VS Code with a custom set of icons. It works for all icons in the built-in views, as well as all extensions that use icons from the Codicon library. Product icon theme will be made public in the next milestone.  \nMany more icons names have been added, in particular for the debug, extensions, and terminal views, as well as the settings and notebook editors.  \nCheck out the updated [icon listing](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing).",
    "url": "https://code.visualstudio.com/updates/v1_52#_more-themeable-icons",
    "id": 1959
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Removal of proposed logging API  \nA proposal for a logging API, `LogLevel` and `onDidChangeLogLevel`, existed around a year ago, and has now been removed. Extensions can use the output channel API for logging, or, when using a custom logger, use `ExtensionContext#logUri`.",
    "url": "https://code.visualstudio.com/updates/v1_52#_removal-of-proposed-logging-api",
    "id": 1960
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Initial addition of proposed testing API  \nWe are investigating [testing in VS Code](https://github.com/microsoft/vscode/issues/107467), and the first version of the API is now present in `vscode.proposed.d.ts`. Please read the linked issue for additional context, and participate if you have input to give. We expect to ship the provider portion of the API significantly earlier than the observer portion.",
    "url": "https://code.visualstudio.com/updates/v1_52#_initial-addition-of-proposed-testing-api",
    "id": 1961
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### New context key operators  \n`<`, `<=`, `>`, or `>=` can now be used for context key expressions. Here is an example for contributing a command that appears only when having two or more workspace folders opened:  \n```json\n\"contributes\": {\n\"menus\": {\n...\n\"when\": \"workspaceFolderCount >= 2\"\n...\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_52#_new-context-key-operators",
    "id": 1962
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Clarified semantics of StackTraceResponse.totalFrames  \nThe description of the `supportsDelayedStackTraceLoading` capability in the Debug Adapter Protocol seems to suggest that in order for delayed stack frame loading to work, the adapter must populate the `totalFrames` field of the `StackTraceResponse` with the **correct** number of available stack frames. However, for some debuggers or runtimes, this value is not easy to compute which makes it expensive to support delayed stack frame loading.  \nSince the total number of frames is never surfaced in the UI, we have clarified the original - somewhat lacking - semantics description of `totalFrames`: a debug adapter is now free to provide a large (incorrect) value for `totalFrames` and a client should be prepared to receive fewer frames than requested, and use this as an indication that the end of the stack has been reached.",
    "url": "https://code.visualstudio.com/updates/v1_52#_clarified-semantics-of-stacktraceresponse.totalframes",
    "id": 1963
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Clarified semantics of RunInTerminalRequestArguments.cwd  \nSince the `cwd` property (\"current working directory\") of the `runInTerminal` request is **not** optional, it is not possible omit the property in order to express the \"don't care\" case. For example if a debug adapter knows that the \"cwd\" is already correct and that there is no need to have the client generate a \"change directory\" command, the DAP specification does not describe how to achieve this.  \nTo address this shortcoming, we have clarified the DAP specification by adding that a client is only expected to execute a change directory command if the `cwd` property contains a non-empty path.",
    "url": "https://code.visualstudio.com/updates/v1_52#_clarified-semantics-of-runinterminalrequestarguments.cwd",
    "id": 1964
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n## Engineering  \n### Sandbox and context isolation enabled for issue reporter and process explorer  \nTo get more feedback from enabling Electron's [sandbox](https://www.electronjs.org/docs/api/sandbox-option) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation), we pushed to enable it for our Process Explorer and Issue Reporter windows. This configuration will eventually be the default also for the main VS Code window:  \n* `sandbox` enabled\n* `contextIsolation` enabled\n* resources are served from a custom `vscode-file` scheme (and not `file`)",
    "url": "https://code.visualstudio.com/updates/v1_52#_sandbox-and-context-isolation-enabled-for-issue-reporter-and-process-explorer",
    "id": 1965
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Secure supply chain for NPM dependencies  \nWe've improved our NPM dependency supply chain by leveraging source scanning and testing services, in order to increase our build pipeline security and reliability.",
    "url": "https://code.visualstudio.com/updates/v1_52#_secure-supply-chain-for-npm-dependencies",
    "id": 1966
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### Linux ARM Repositories  \nVS Code for ARM architectures (`aarch64` and `armhf`) is now published in the following Linux repositories:  \n* Deb: [https://packages.microsoft.com/repos/code](https://packages.microsoft.com/repos/code)\n* RPM: [https://packages.microsoft.com/yumrepos/vscode](https://packages.microsoft.com/yumrepos/vscode)",
    "url": "https://code.visualstudio.com/updates/v1_52#_linux-arm-repositories",
    "id": 1967
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### GitHub integration  \n* Check out our new Learn module on how to best leverage the editor's GitHub integration with this [Introduction to GitHub in Visual Studio Code](https://learn.microsoft.com/training/modules/introduction-to-github-visual-studio-code/).  \n![Learn module for GitHub and VS Code](images/1_52/github-learn-module.png)",
    "url": "https://code.visualstudio.com/updates/v1_52#_github-integration",
    "id": 1968
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### How we make VS Code in the open  \nWatch the recording of developers Alex Ross and Benjamin Pasero's session at GitHub Universe [How we make VS Code in the open](https://aka.ms/AAakyjs) to learn how our team builds VS Code as open source and collaborates with the community on GitHub.",
    "url": "https://code.visualstudio.com/updates/v1_52#_how-we-make-vs-code-in-the-open",
    "id": 1969
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2020 Release (1.52)  \n### VS Code on Chromebooks  \nDid you know you can run VS Code on a Chromebook? We think this is a great option for students and beginning programmers. Learn how to set up VS Code on Chrome OS (via [Crostini](https://chromeos.dev/en/linux)) with our [Learning with VS Code on Chromebook](https://code.visualstudio.com/blogs/2020/12/03/chromebook-get-started) blog post, which includes instructions on getting started with coding using JavaScript and Python.",
    "url": "https://code.visualstudio.com/updates/v1_52#_vs-code-on-chromebooks",
    "id": 1970
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Tab decorations  \nTwo new settings allow you to configure whether editor tabs show decorations, such as git status or diagnostics. Use `workbench.editor.decorations.colors` to decorate tabs with colors, like red/green for files with errors and warnings, and use `workbench.editor.decorations.badges` to decorate tabs with badges, like **M** for git modified.  \n![Editor tab with decorations](images/1_53/tabs-deco.png)\n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_53#_tab-decorations",
    "id": 1972
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Open Editors view hidden by default  \nThe Open Editors view is now hidden by default. This will only affect new VS Code users, and existing users will still see the Open Editors view. We wanted to present a cleaner look in the Explorer view out-of-the-box, and we believe that the functionality provided in the Open Editors view is covered in other areas of the workbench, like tabs. The visibility of the Open Editors view can be controlled by the context menu in the Explorer view title area.  \n![Open Editors in menu](images/1_53/open-editors.png)",
    "url": "https://code.visualstudio.com/updates/v1_53#_open-editors-view-hidden-by-default",
    "id": 1973
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### New confirmation dialogs  \nIf a user tries to quit VS Code while there is a file operation in progress, we now show a confirmation dialog. We also show a confirmation dialog for destructive undo operations from the Explorer.  \nWe always want to avoid data loss, so we've introduced these dialogs to make sure it doesn't happen by accident.  \n![Destructive undo operation confirmation](images/1_53/destructive-undo.png)",
    "url": "https://code.visualstudio.com/updates/v1_53#_new-confirmation-dialogs",
    "id": 1974
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### New setting workbench.editor.enablePreviewFromCodeNavigation  \nA new setting `workbench.editor.enablePreviewFromCodeNavigation` allows you to explicitly enable preview editors from code navigations, such as **Go to Definition**. In our previous release, we changed the default to open editors normally from code navigations. This setting allows you to choose which option you prefer.",
    "url": "https://code.visualstudio.com/updates/v1_53#_new-setting-workbench.editor.enablepreviewfromcodenavigation",
    "id": 1975
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Emmet performance and feature improvements  \nEmmet now works much faster in HTML and CSS files. The extension also uses the latest Emmet, meaning that features such as countdowns are now supported.  \nHere's an example of Emmet expanding with a countdown in a large HTML file, with a 20x performance improvement:\n![Emmet expanding with a countdown in a large HTML file](images/1_53/emmet-large-html-example.gif)",
    "url": "https://code.visualstudio.com/updates/v1_53#_emmet-performance-and-feature-improvements",
    "id": 1976
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Improved refactor participants UI  \nExtensions can participate when you create, move, rename, or delete files. This is useful when automatically running refactorings, for example, when you rename a Java file and also need to rename its public class.  \n![Preview dialog for an extension making refactoring changes](images/1_53/refactor-preview.png)  \nThe unified UI allows you to accept, skip, and preview the other changes that an extension is making.",
    "url": "https://code.visualstudio.com/updates/v1_53#_improved-refactor-participants-ui",
    "id": 1977
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Open with supports alternative opening mode  \nAfter running the **Reopen Editor With** command, you can now hold down `Ctrl` when selecting the editor to use to open the new editor to the side of the current editor. This matches the behavior of VS Code's quick open.  \nAdditionally, pressing `Right Arrow` in the **Reopen Editor With** dialog will now open the editor in the background.",
    "url": "https://code.visualstudio.com/updates/v1_53#_open-with-supports-alternative-opening-mode",
    "id": 1978
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Issue reporting  \nIf you're signed in with GitHub, you can now directly create issues from the issue reporter (**Help** > **Report Issue**).",
    "url": "https://code.visualstudio.com/updates/v1_53#_issue-reporting",
    "id": 1979
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Default search mode  \nThe `search.mode` setting is now available to allow configuring what search UI commands like **Search: Find in Files**, and the explorer's **Find in Folder...** and **Find in Workspace** context menu entries use, with options of:  \n* `view`: Default existing behavior, search using the search view in the sidebar or panel\n* `newEditor`: Search in a new Search Editor\n* `existingEditor`: Reusing an existing open Search Editor if one exists, otherwise create a new one  \nIn the past, it was advised to configure default search UI by editing keybindings. This is no longer necessary, and these keybindings can be removed in favor of this setting.  \n![Recording of the different search mode options](images/1_53/SearchMode.gif)\n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_53#_default-search-mode",
    "id": 1980
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### New file and folder icons  \nWe've updated our **New File** and **New Folder** icons to make them consistent with the rest of our [iconography library](https://code.visualstudio.com/api/references/icons-in-labels):  \n![New file and folder icons](images/1_53/new-folder-file-icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_53#_new-file-and-folder-icons",
    "id": 1981
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Editor  \n### New snippet variables  \nThere are new snippet variables for inserting UUIDs, and for inserting the relative path of the current file. The sample snippet below would print:  \n`let someId = 'foo/test.js/c13d226f-1932-40e2-9fd9-10198c219e33'`  \n```json\n// sample snippet using UUID and RELATIVE_FILEPATH\n{\n\"scope\": \"javascript\",\n\"prefix\": \"newVars\",\n\"body\": \"let someId = '${RELATIVE_FILEPATH}/${UUID}'$0\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_53#_new-snippet-variables",
    "id": 1982
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Transform to snake case  \nThere is a new command **Transform to Snake Case** that will convert the selected text to [snake case](https://en.wikipedia.org/wiki/Snake_case) (for example, `myVariable` -> `my_variable`).",
    "url": "https://code.visualstudio.com/updates/v1_53#_transform-to-snake-case",
    "id": 1983
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Integrated Terminal  \n### Flow control  \nThe connection between the terminal processes and the frontend is now protected by a flow control mechanism that will pause the process when the frontend needs to catch up. Previously, this would cause stability/performance issues when using a terminal in a remote connection. This change only applies when using VS Code's remoting functionality for now, but it will be used for local windows soon, after we tweak where terminal processes get launched.",
    "url": "https://code.visualstudio.com/updates/v1_53#_flow-control",
    "id": 1984
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Better PowerShell 7 discovery  \n[PowerShell 7](https://github.com/PowerShell/PowerShell) is the latest and greatest version of PowerShell, which can be installed on Windows, macOS, and Linux. If you install PowerShell 7 on Windows, VS Code will use that as the default shell. If you don't have PowerShell 7 installed, VS Code will continue to use Windows PowerShell as the default.  \nAdditionally, if you open the **Select Default Shell** Quick Pick, the enumeration of all of the installed PowerShell versions will show up (MSI installation, Microsoft Store installation, etc.).  \n![Select Default Shell showing possible PowerShell options](images/1_53/choose-default-shell.png)  \n> **Note**: macOS and Linux default shell discovery and shell enumeration are unaffected by this because they use the default set by the OS and /etc/shells respectively.\n> Additionally, the `terminal.integrated.shell.windows` setting is still honored.",
    "url": "https://code.visualstudio.com/updates/v1_53#_better-powershell-7-discovery",
    "id": 1985
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Languages  \n### Markdown preview auto updates when images are changed on disk  \nThe Markdown preview will now automatically update when any embedded images are changed on disk:  \n![The markdown preview updating after editing an image with an external editor](images/1_53/md-preview-update.gif)  \nThis can happen when you edit the image file using an external program or from a source control operation, such as switching branches.",
    "url": "https://code.visualstudio.com/updates/v1_53#_markdown-preview-auto-updates-when-images-are-changed-on-disk",
    "id": 1986
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Notebooks  \n### Outline and breadcrumbs  \nNotebook cells now show up in the outline pane and breadcrumbs. This allows for a better overview and fast navigation within notebooks.  \n![Notebook with outline and breadcrumbs](images/1_53/notebook-outline.png)  \nThere are two settings that allow you to define if code cells are part of the outline or not.  \n* `notebook.outline.showCodeCells`: Whether outline contains code cells\n* `notebook.breadcrumbs.showCodeCells`: Whether breadcrumbs contain code cells",
    "url": "https://code.visualstudio.com/updates/v1_53#_outline-and-breadcrumbs",
    "id": 1987
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Notebook diff editor: rich output rendering and performance improvement  \nThe diff editor for notebook documents now supports rendering rich output like tables, images, or HTML output.  \n![Notebook rich output in diff](images/1_53/notebook-rich-diff.png)  \nThis feature is currently available in [Insiders](https://code.visualstudio.com/insiders) and you can install either the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) or [.NET Interactive](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode) extension to preview.  \nWe also improved the scrolling performance to ensure a smooth experience while browsing changes in the diff editor.",
    "url": "https://code.visualstudio.com/updates/v1_53#_notebook-diff-editor:-rich-output-rendering-and-performance-improvement",
    "id": 1988
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Add new cell toolbar  \nWe've updated our add new cell toolbar to appear whenever you hover over a cell to make it more discoverable.  \n![Add new cell toolbar](images/1_53/add-new-cell.gif)",
    "url": "https://code.visualstudio.com/updates/v1_53#_add-new-cell-toolbar",
    "id": 1989
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Source Control  \n### Git: Open All Changes command  \nA new Git command has been added to the Command Palette:  \n* **Git: Open All Changes...** - Opens all modified and untracked files.",
    "url": "https://code.visualstudio.com/updates/v1_53#_git:-open-all-changes-command",
    "id": 1990
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Git: Warning when pulling (or syncing) and the current branch has been rebased  \nVS Code will now warn you whenever you attempt to pull (or sync) and the current branch looks like it has been rebased (for example, when published history has been rewritten).",
    "url": "https://code.visualstudio.com/updates/v1_53#_git:-warning-when-pulling-or-syncing-and-the-current-branch-has-been-rebased",
    "id": 1991
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Git: New settings  \nAdditionally, new Git settings have been added:  \n* `git.requireGitUserConfig` - In VS Code 1.51 we made a privacy change to require a user name or email address before committing. You can now disable that requirement if desired.\n* `git.ignoreRebaseWarning` - Disables the new warning when pulling (or syncing) and the current branch has been rebased.\n* `git.autofetch` - Auto fetch can now additionally be set to `all` to fetch all remotes.",
    "url": "https://code.visualstudio.com/updates/v1_53#_git:-new-settings",
    "id": 1992
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Preview features  \n### Search in open editors  \nThis release comes with experimental support for searching in open editors, which has been a [highly requested feature](https://github.com/microsoft/vscode/issues/20530) for some time. This feature is enabled by default in Insiders, and can be enabled with the `search.experimental.searchInOpenEditors` setting in Stable.  \n![Searching in open editors](images/1_53/SearchInOpenEditors.gif)\n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_53#_search-in-open-editors",
    "id": 1993
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### TypeScript 4.2 support  \nThis release continues to improve our support for the upcoming TypeScript 4.2 release. You can read more about the new language features and improvements in TypeScript 4.2 [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-2-beta/). Here are some of the editor improvements it enables:  \n* JS Doc templates now generate `@returns`.\n* Deprecated DOM APIs are now marked as such.\n* A quick fix to declare missing functions.\n* Native support for semantic highlighting, instead of using a TypeScript service plugin.  \nTo start using the TypeScript 4.2 nightly builds, just install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share your feedback and let us know if you run into any bugs with TypeScript 4.2.",
    "url": "https://code.visualstudio.com/updates/v1_53#_typescript-4.2-support",
    "id": 1994
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### New Find References to File command  \nIf you are using TypeScript 4.2, you can also try the new **Find References to File** command for JavaScript and TypeScript to find all places where a file is being referenced.  \n![Finding all references to a file](images/1_53/ts-file-references.png)  \nYou can trigger this command in a few different ways:  \n* For the active file using **TypeScript: Find File References** command.\n* Right-click on an editor tab and select **Find File References**.\n* Right-click on a file in the File Explorer and select **Find File References**.",
    "url": "https://code.visualstudio.com/updates/v1_53#_new-find-references-to-file-command",
    "id": 1995
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.53 include:  \n* You can now restore the UI state of reconnected terminals.\n* Connection compression to help with weak network connectivity.\n* Attributes can now be configured for ports in settings.\n* Privileged ports are now detected and autoforwarded.\n* Containers now support SSH connection with password entry.\n* Installation of extensions from a WSL shell.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_53.md).",
    "url": "https://code.visualstudio.com/updates/v1_53#_remote-development",
    "id": 1996
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Extension authoring  \n### Extension guidelines  \nThere is now a set of detailed [extension guidelines](https://code.visualstudio.com/api/ux-guidelines/overview) for extension authors. The guidelines cover best practices for contributing to VS Code's users interface and conventions for notifications and status updates.  \nAs an example, below are the Do's and Dont's for contributing commands to the Command Palette:  \n![Extension guidelines for contributing to the Command Palette](images/1_53/command-palette-dos-and-donts.png)",
    "url": "https://code.visualstudio.com/updates/v1_53#_extension-guidelines",
    "id": 1997
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Product icon themes  \nThe [product icon theme](https://code.visualstudio.com/api/extension-guides/product-icon-theme) APIs are now stable. Theme authors can publish themes that replace the built-in icons used in views and editors.  \nUsers can switch to new themes with the **Preferences: Product Icon Theme** command.",
    "url": "https://code.visualstudio.com/updates/v1_53#_product-icon-themes",
    "id": 1998
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Status bar entry background color API  \nThe previously proposed `backgroundColor` for the `StatusBarItem` API is now stable. Currently only `statusBarItem.errorBackground` is supported to avoid the Status bar looking too colorful. We may expand this support to more colors in the future.  \n![Status bar error in red](images/1_52/status-error.png)  \nThe use case for this new API is to enable extensions to indicate error conditions in the Status bar. For example, the ESLint extension may decide to use this color to alert the user that ESLint has not yet been enabled for a workspace.",
    "url": "https://code.visualstudio.com/updates/v1_53#_status-bar-entry-background-color-api",
    "id": 1999
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Adding CancellationError type  \nWe have added a new error type: `vscode.CancellationError`. This type can be used in response to a `CancellationToken` being canceled or when an operation is being canceled by the executor of that operation.",
    "url": "https://code.visualstudio.com/updates/v1_53#_adding-cancellationerror-type",
    "id": 2000
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### OnEnterRule.previousLineText  \nIt is now possible to target the text on the previous line when evaluating an `OnEnterRule` using the newly added property `previousLineText`.",
    "url": "https://code.visualstudio.com/updates/v1_53#_onenterrule.previouslinetext",
    "id": 2001
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### onEnterRules in language configuration files  \nUntil now, `onEnterRules` could be defined only using the `vscode.languages.setLanguageConfiguration` API. Now, `onEnterRules` can also be defined in the language configuration file.  \nFor example:  \n```json\n\"onEnterRules\": [\n{\n\"beforeText\": \"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\",\n\"action\": { \"indent\": \"indent\" }\n}\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_53#_onenterrules-in-language-configuration-files",
    "id": 2002
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Semantic token commands  \nThere are now new commands to invoke the semantic tokens provider. The commands are:  \n* `vscode.provideDocumentSemanticTokensLegend` with an argument of type `Uri`\n* `vscode.provideDocumentSemanticTokens` with an argument of type `Uri`\n* `vscode.provideDocumentRangeSemanticTokensLegend` with an argument of type `Uri`\n* `vscode.provideDocumentRangeSemanticTokens` with two arguments: the first an `Uri` and the second a `Range`.",
    "url": "https://code.visualstudio.com/updates/v1_53#_semantic-token-commands",
    "id": 2003
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Secrets API  \nSimilar to the storage API, there is now an API for storing and retrieving secrets on a per-extension basis. This allows extensions to store sensitive information in the OS credential manager or keystore.",
    "url": "https://code.visualstudio.com/updates/v1_53#_secrets-api",
    "id": 2004
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### workspaceContains extension activation behavior change  \nThis month, we fixed a bug with the behavior of the `workspaceContains` extension activation event that could change how an extension is activated.  \nThe bug caused us to start a search over the entire workspace, when the `workspaceContains` pattern was only targeting files in the root of the workspace. Since this could affect the startup performance of VS Code, we needed to fix this and scope these searches correctly. But as a result, some extensions that were previously activated by this behavior may no longer get activated.  \nThe change has been in our Insiders build since the beginning of January. For more information, see [this comment](https://github.com/microsoft/vscode/issues/110510#issuecomment-770133700) on the GitHub issue.",
    "url": "https://code.visualstudio.com/updates/v1_53#_workspacecontains-extension-activation-behavior-change",
    "id": 2005
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Updated loading icon  \nWe've updated our loading icon to make for a smoother experience.  \n![Loading icon](images/1_53/loading-icon.gif)",
    "url": "https://code.visualstudio.com/updates/v1_53#_updated-loading-icon",
    "id": 2006
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Git extension APIs  \n* A new `API.onDidPublish` event has been added, which fires when a repository or branch is published from the VS Code Git extension.\n* A new `API.openRepository` method has been added, to allow extensions to tell the Git extension about other Git repositories, for example, outside the workspace, or more deeply nested within it.\n* The `API.push` method now has an additional optional `force` parameter.\n* The `API.commit` method's `CommitOptions` now has an additional optional `requireUserConfig` to avoid requiring a user or email address.",
    "url": "https://code.visualstudio.com/updates/v1_53#_git-extension-apis",
    "id": 2007
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Welcome view content link enablement  \nA `viewsWelcome` contribution from an extension in which an `enablement` expression is specified will now render command links inactive when the expression evaluates as false.",
    "url": "https://code.visualstudio.com/updates/v1_53#_welcome-view-content-link-enablement",
    "id": 2008
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### resolveTreeItem  \nThe `resolveTreeItem` API now supports cancellation. You can also now use `resolveTreeItem` to resolve the `command` property of your `TreeItem`.",
    "url": "https://code.visualstudio.com/updates/v1_53#_resolvetreeitem",
    "id": 2009
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Testing  \nWe are investigating [testing in VS Code](https://github.com/microsoft/vscode/issues/107467), and the first version of the API is now present in `vscode.proposed.d.ts`. Please read the linked issue for more context, and participate if you have input.  \nThis iteration focused building out the **Selfhost Test Provider** for VS Code and foundational UI, primarily the test explorer, gutter decorations, and peek views for results.  \nFor example, here's a failed test showing the difference between actual and expected values in a diff peek view:\n![Screenshot of a failed test with a diff peek view open showing the difference between actual and expected values.](images/1_53/testing.png)\n*Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*",
    "url": "https://code.visualstudio.com/updates/v1_53#_testing",
    "id": 2010
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### External URI opener  \nThe proposed external URI opener API allows extensions to handle opening HTTP and HTTPS links that the user selects in the editor. For example, a browser preview extension could use this to open links to a local server in VS Code directly, instead of opening the link with the user's default browser:  \nTo use the external opener API, first add an `onOpenExternalUri` activation event for the URL schemes your opener supports. Currently only `http` and `https` URLs are supported:  \n```json\n\"activationEvents\": [\n\"onOpenExternalUri:http\",\n\"onOpenExternalUri:https\"\n]\n```  \nThen in your extension's activation, call `registerExternalUriOpener` to register your external URI opener:  \n```ts\nvscode.window.registerExternalUriOpener('myExtension.opener', {\ncanOpenExternalUri(uri: vscode.Uri) {\n// Check if a URI can be opened.\n// This is called when the user first selects a link and VS Code\n// needs to determine which openers are available.\n\nif (uri.authority === 'localhost:8080') {\n// This opener has default priority for this URI.\n// This will result in the user being prompted since VS Code always has\n// its own default opener.\nreturn vscode.ExternalUriOpenerPriority.Default;\n}\n\n// The opener can be used but should not be used by default\nreturn vscode.ExternalUriOpenerPriority.Option;\n},\nopenExternalUri(resolveUri: vscode.Uri) {\n// Actually open the URI.\n// This is called once the user has selected this opener.\n}\n}, {\nschemes: ['http', 'https'],\nlabel: localize('openTitle', \"Open URL using My Extension\"),\n});\n```  \nNow when you select links to `localhost:8080` in the editor or terminal, you will be prompted to select how the URL should be opened:  \n![Selecting the opener for a URI](images/1_53/external-opener-prompt.png)  \nAdditionally, you can configure a default opener for a URI using the new `workbench.externalUriOpeners` setting:  \n```json\n\"workbench.externalUriOpeners\": {\n\"localhost:8081\": \"myExtension.opener\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_53#_external-uri-opener",
    "id": 2011
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Electron 11 update  \nIn this milestone, we finished the exploration to bundle Electron 11 into VS Code, thanks to everyone involved with testing and self-hosting on insiders. This is a major Electron release and comes with Chromium 87.0.4280.141 and Node.js 12.18.3.  \n**Breaking change**  \nAs a side effect of this update, we had to bump our build image to use `Ubuntu-18.04` for `x64` linux machines to consume Electron. This update raised the minimum GLIBCXX requirement to `3.4.22` for our native modules, which breaks support for older distros on desktop. After some changes to the build system, we were able to go back as far as using gcc-5 toolchain, which brings the minimum GLIBCXX requirement to `3.4.21`. With these changes, the following are the distros known to work for the `x64` desktop app:  \n* Ubuntu 16.04 and newer\n* Fedora 24 and newer\n* Debian 9 and newer\n* CentOS 8 and newer  \n**Note:** Our remote development components continue to use GLIBCXX `3.4.19`, so there is no change in supported platforms.  \nA workaround for the other distros would be to install gcc-5 or higher toolchain to avoid the GLIBCXX error with native modules, but there is no guarantee that all components of the runtime will work fine. There is also the option of using our [remote development suite](https://code.visualstudio.com/docs/remote/remote-overview) to work with the older distros.",
    "url": "https://code.visualstudio.com/updates/v1_53#_electron-11-update",
    "id": 2013
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Apple Silicon Insiders  \nThanks to Electron 11, we continue to make progress on fully supporting Apple Silicon. For the Insiders build, we offer three variations of downloads under macOS:  \n* `x64` version for Mac devices with Intel chip\n* `arm64` version for Mac devices with Apple Silicon chip\n* `universal` version that can run natively on either of the above devices  \nThe `universal` version is the default download option on the website. We will work towards removing the architecture specific downloads later this year. More updates on this will follow in upcoming iterations.  \nUniversal apps are created by bundling both `x64` and `arm64` version of the apps, hence there is a significant increase in download size for the first install but simplifies the transition for a user to the new Apple Silicon Macs.  \n**Note:** We originally planned to push the Apple Silicon builds to Stable this iteration. However, late in the iteration, users reported that on macOS Big Sur 11.2 loading a WASM module crashed the extension host. You can follow along with our investigation of the problem in the upstream issue [#115646](https://github.com/microsoft/vscode/issues/115646).",
    "url": "https://code.visualstudio.com/updates/v1_53#_apple-silicon-insiders",
    "id": 2014
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Debian repository migration  \nIn order to support x64, ARM, and ARM 64-bit architectures in a single repository, we have moved to a new repository location:  \n```\nhttp://packages.microsoft.com/repos/code\n```  \nThe VS Code Debian packages will automatically migrate your system to the new repository, so there's no adoption necessary.",
    "url": "https://code.visualstudio.com/updates/v1_53#_debian-repository-migration",
    "id": 2015
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### Progress on Electron sandbox  \nThis milestone we continued to make the VS Code window fit for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation).  \n**Specifically:**  \n* The IPC connection to our background shared process changed from a Node.js socket connection to using Electron's [MessagePort](https://www.electronjs.org/docs/api/message-port-main) API.\n* There is a new internal option to enable the experimental `vscode-file` protocol for the main window that enables us to do some selfhosting (the issue reporter and process explorer already run with this option since last milestone).\n* We removed the more direct Node.js API that is used in the VS Code window.",
    "url": "https://code.visualstudio.com/updates/v1_53#_progress-on-electron-sandbox",
    "id": 2016
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### VS Code is now Trusted Types compliant  \nWe have finished the work to make VS Code trusted types compliant per the [W3C Trusted Types](https://github.com/w3c/webappsec-trusted-types) specification.",
    "url": "https://code.visualstudio.com/updates/v1_53#_vs-code-is-now-trusted-types-compliant",
    "id": 2017
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n## Documentation  \n### Remote Development  \nCheck out our new [Beginner's Series to: Dev Containers](https://channel9.msdn.com/Series/Beginners-Series-to-Dev-Containers?WT.mc_id=devcloud-11496-cxa), a set of eight videos that show you how to get, create, and configure a container-based development environment using VS Code [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers).  \n![Beginner's dev containers videos series](images/1_53/containers-series.png)",
    "url": "https://code.visualstudio.com/updates/v1_53#_remote-development",
    "id": 2018
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### when clause reference  \nThe `when` clause documentation is now in its own [when clause contexts reference](https://code.visualstudio.com/api/references/when-clause-contexts). Here you can learn how to [conditionally](https://code.visualstudio.com/api/references/when-clause-contexts#_conditional-operators) enable or disable custom keybindings depending on the currently active VS Code UI ([contexts](https://code.visualstudio.com/api/references/when-clause-contexts#_available-contexts)) and tune the visibility of menus and views when contributing extensions.  \n```json\n{ \"key\": \"f5\",  \"command\": \"workbench.action.debug.start\",\n\"when\": \"debuggersAvailable && debugState != 'initializing'\" }\n```",
    "url": "https://code.visualstudio.com/updates/v1_53#_when-clause-reference",
    "id": 2019
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### CodeTour for educators  \nA new [CodeTour](https://code.visualstudio.com/learn/educators/codetour) topic introduces educators to the [CodeTour extension](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) that lets them easily author walkthroughs for codebases. Educators can create self-paced tours for their students as they ramp up on new projects and assignments.  \n![CodeTour extension](images/1_53/codetour-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_53#_codetour-for-educators",
    "id": 2020
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2021 Release (1.53)  \n### What is a VS Code \"workspace\"?  \nA new topic explains what \"workspaces\" are in VS Code. If you are interested in learning more about the differences between single-folder, multi-root and untitled workspaces, take a look at [What is a VS Code \"workspace\"?](https://code.visualstudio.com/docs/editor/workspaces).",
    "url": "https://code.visualstudio.com/updates/v1_53#_what-is-a-vs-code-workspace?",
    "id": 2021
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Accessibility  \n### Toolbars and tabs occupy one tab stop  \nAll toolbars in the workbench now follow the standard navigation behavior, so the toolbar occupies only a single position in the tab order, and is navigable with the arrow keys. Once the focus is on the toolbar, arrow keys should be used to move focus to a specific item in the toolbar. As a result of this change, the workbench has far fewer tab stops, making it easier to navigate across all the parts.  \nFor consistency, the same change was applied to the tabs area. Thus the whole tab area is only one tab stop, and keyboard navigation between tabs should be done with the left and right arrow keys.",
    "url": "https://code.visualstudio.com/updates/v1_54#_toolbars-and-tabs-occupy-one-tab-stop",
    "id": 2023
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Word navigation on Windows  \nWe have improved how word navigation is done on Windows to align with what Screen Readers on Windows expect from an Electron-based application. Now, when using word navigation, each word will be properly read out by the Screen Reader.  \nDue to this change, we are deprecating the following commands. They will still work, but we might remove them in the future.  \n* `cursorWordAccessibilityLeft`\n* `cursorWordAccessibilityLeftSelect`\n* `cursorWordAccessibilityRight`\n* `cursorWordAccessibilityRightSelect`  \nNon-Windows platforms already worked as expected, so we made no changes there.",
    "url": "https://code.visualstudio.com/updates/v1_54#_word-navigation-on-windows",
    "id": 2024
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Improved roles for views and buttons  \nBased on user feedback, we have improved the roles of multiple views and buttons across the workbench. **Activity Bar**, **Side Bar**, and **Panel** now have `role:none`, which will make the screen reader less chatty. **Manage** and **Accounts** buttons inside the Activity Bar now properly announce they have a popup.",
    "url": "https://code.visualstudio.com/updates/v1_54#_improved-roles-for-views-and-buttons",
    "id": 2025
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Integrated Terminal  \n### Retain terminal processes on window reload  \nLocal terminal processes are now restored on window reload, such as when an extension install requires a reload. The terminal will be reconnected and the UI state of the terminals will be restored, including the active tab and split terminal relative dimensions.  \n![In a local window, two split terminals are created and resized. On reload, the layout appears unchanged.](images/1_54/local-terminal-reconnection.gif)  \nThis feature can be disabled by setting `terminal.integrated.enablePersistentSessions` to false.",
    "url": "https://code.visualstudio.com/updates/v1_54#_retain-terminal-processes-on-window-reload",
    "id": 2026
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Windows performance improvements  \nThanks to the [new terminal process layout](#new-terminal-process-layout), frequent pty data events from terminal processes should now process more quickly. This is expected to affect Windows more than other platforms due to the smaller events provided by conpty on Windows.",
    "url": "https://code.visualstudio.com/updates/v1_54#_windows-performance-improvements",
    "id": 2027
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Automatically relaunch terminal requiring environment changes  \nRecently a new feature was rolled out that enabled extensions to influence the terminal's environment. This is used by various language extensions and the built-in git extension to enable VS Code as a git auth provided to negate the need to sign in. Previously the UX for this was to present a subtle \u26a0\ufe0f icon in the top-right corner to indicate that a terminal's environment was stale. The indicator was subtle, since environment changes may or not be important.  \nWe've tweaked this to automatically relaunch terminals that have stale environments when they have not yet been interacted with. This may result in some flickering, but extension terminal integration is much more seamless now. For example, the first terminal in a WSL window should no longer show a Git auth error, provided the relaunch happened before typing in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_54#_automatically-relaunch-terminal-requiring-environment-changes",
    "id": 2028
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Workbench  \n### Emmet  \nThe **Wrap with Abbreviation** and **Wrap Individual Lines with Abbreviation** commands have been merged into a single **Wrap with Abbreviation** command to reduce any confusion over which wrap command to use. Additionally, the **Wrap with Abbreviation** command now shows the preview whitespace properly.  \nThe `emmet.extensionsPath` setting can now also take in an array of paths, rather than just a string. Therefore, when combined with Settings Sync, one can point to different snippet files depending on the machine they are on, without having to update the setting per machine.",
    "url": "https://code.visualstudio.com/updates/v1_54#_emmet",
    "id": 2029
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Product Icon Themes  \nThe first Product Icon Themes have become available in the Extension Marketplace. Thanks to the theme authors for the great work!  \nTo select or find a theme, use the  **Preference: Product Icon Theme** command from the command prompt or the Settings gear.  \n![Product icon themes in the Extension Marketplace](./images/1_54/product-icon-themes.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_product-icon-themes",
    "id": 2030
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### IntelliSense for context keys  \nVS Code uses [when](https://code.visualstudio.com/api/references/when-clause-contexts)-clauses to enable and disable keybindings. Extensions also use when-clauses to control [menu](https://code.visualstudio.com/api/references/contribution-points#contributes.menus)- and [view](https://code.visualstudio.com/api/references/contribution-points#contributes.views)-contributions. Authoring these when-clauses is now much simpler because the editor offers completions for them.  \n![IntelliSense for context key in keybindings.json](./images/1_54/suggest-when-clause.png)\n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme), Font: FiraCode*",
    "url": "https://code.visualstudio.com/updates/v1_54#_intellisense-for-context-keys",
    "id": 2031
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Open Editors New Untitled File action  \nThere is now a **New Untitled File** action in the **Open Editors** view title area.  \n![New untitled file in Open Editors view](./images/1_54/new-untitled-file.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_open-editors-new-untitled-file-action",
    "id": 2032
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Updated application menu settings  \nThe `window.menuBarVisibility` setting for the application menu visibility has been updated to better reflect the options. Two primary changes have been made.  \nFirst, the `default` option for the setting has been renamed to `classic`.  \nSecond, the **Show Menu Bar** entry in the application menu bar now toggles between the `classic` and `compact` options. To hide it completely, you can update the setting, or use the context menu of the Activity Bar when in `compact` mode.  \n![Show Menu Bar entry in application menu](./images/1_54/show-menu-bar.png)\n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_54#_updated-application-menu-settings",
    "id": 2033
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Webview caching improvements  \nWe've improved caching for a local file inside a webview. If a webview reloads a file from disk, then we now use [ETags](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) to avoid reading the file again if it has not changed. This can eliminate data transfer, and improves response time, especially for remote workspaces.  \nThis caching currently only applies when an existing webview reloads a resource. It does not apply to newly created webviews, even if that webview belongs to an extension that previously created a similar webview.",
    "url": "https://code.visualstudio.com/updates/v1_54#_webview-caching-improvements",
    "id": 2034
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Changes to workspace search actions  \nWe have modified the existing `workbench.view.search` to no longer place the selected text into the search input, but instead open the input. To create a new search using the selected text and respecting the `search.mode` setting, `workbench.action.findInFiles` should be used.",
    "url": "https://code.visualstudio.com/updates/v1_54#_changes-to-workspace-search-actions",
    "id": 2035
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Modifier only keybindings  \nIt is now possible to define keybindings for duplicate modifiers, for example, `shift shift`, `alt alt`, `ctrl ctrl` or `cmd cmd` / `meta meta` / `win win`. These keybindings can be entered manually in `keybindings.json`, for example:  \n```\n{ \"key\": \"shift shift\", \"command\": \"workbench.action.quickOpen\" }\n```",
    "url": "https://code.visualstudio.com/updates/v1_54#_modifier-only-keybindings",
    "id": 2036
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Updated list/tree UI  \nWe have updated the list/tree styles to match native focus and selection indicators: focused elements will now be rendered with an outline color.  \n![List/tree UI showing focused element](./images/1_54/tree-ux.png)  \n**Breaking change**  \nTheme publishers are advised to adopt this style as well simply by swapping the customization of the `list.focusBackground` color for the `quickInput.list.focusBackground` color. To see an example, check out this [commit](https://github.com/microsoft/vscode/commit/4a941b1853a7b9e0173fd3f9c6eeeb6af13503f0#diff-f264602aa6d3cb74d6e344ffe88192b001c1611314325bad2b4f2cfa58b62031).",
    "url": "https://code.visualstudio.com/updates/v1_54#_updated-list/tree-ui",
    "id": 2037
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Table widget  \nWe introduced a new table widget, built on top of the existing list widget, so we can render tabular data with the same performance as we can render list elements. For now, it is used in the Ports view for our Remote features.  \n![Table widget view of remote Ports](./images/1_54/table.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_table-widget",
    "id": 2038
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Getting Started  \nWe are experimenting with a new editor to show on startup, called the Getting Started editor. This is intended to make some of VS Code's features more approachable to new users. Some Insiders users may have already seen it, and it will be slowly rolled out to more Stable users over the course of this iteration. You can always opt in or out of the new behavior by modifying the `workbench.startupEditor` setting to or away from `gettingStarted`.  \n![Getting Started experience walkthrough](./images/1_54/getting-started.gif)",
    "url": "https://code.visualstudio.com/updates/v1_54#_getting-started",
    "id": 2039
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Timeline view  \nYou can now compare changes across Git history timeline entries, using the **Select for Compare** and **Compare with Selected** commands\u2014similar to comparing files in the Explorer view. This feature lets you quickly see all the changes between any two commits in your Git file history.  \n![Select for Compare command in context menu](./images/1_54/select-for-compare.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_timeline-view",
    "id": 2040
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Default sash hover border color  \nIn the [1.52 release](https://code.visualstudio.com/updates/v1_52#_sash-hover-border-color), we introduced the hover border color token for sashes (`sash.hoverBorder`), but did not set a default. We now show this color by default on all themes.  \n![Sash hover border color](./images/1_54/sash-hover-color.gif)",
    "url": "https://code.visualstudio.com/updates/v1_54#_default-sash-hover-border-color",
    "id": 2041
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Debugging  \n### Breakpoints view improvements  \n**New inline action for removing breakpoints**  \nWe have added an inline action **X** to remove breakpoints in the **Breakpoints view**. This action should make it easier to remove breakpoints.  \n![Breakpoints view showing X next to selected breakpoint](./images/1_54/breakpoints-x.png)  \n**Help text support for exception filters**  \nRecently we have added support for editing conditions on exception filters in the **Breakpoints view**.  \nIn order to make these conditions more discoverable and their syntax self-explanatory, VS Code now shows a hover on the exception filter and a placeholder text in the condition text box.  \nSince the information for both is provided by the underlying debug extension, it can be much more specific (and thus helpful) than some generic message.  \nSince this new feature is based on additions to the Debug Adapter Protocol (see below), it requires an opt-in of debug extensions. In this release, only VS Code's built-in JavaScript debugger supports the new feature.  \n![Breakpoint placeholder](./images/1_54/breakpoint-placeholder.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_breakpoints-view-improvements",
    "id": 2042
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### New settings and other improvements  \n**Collapse identical lines in the Debug Console**  \nThere is a new setting, `debug.console.collapseIdenticalLines`, that controls if the Debug Console should collapse identical lines and show many occurrences with a badge. The default is to collapse.  \n**Control which editors to save before debugging**  \nThere is a new setting, `debug.saveBeforeStart`, that controls what editors to save before debugging starts. This setting has the following values:  \n* `allEditorsInActiveGroup`: Save all editors in the active group. The default value.\n* `nonUntitledEditorsInActiveGroup`: Save all editors in the active group except untitled ones.\n* `none`: Don't save any editors.  \nThis setting is useful for PowerShell debugging since the PowerShell debugger supports debugging unsaved files.  \n**Improved Enablement for Restart Frame action**  \nWith a new addition to the Debug Adapter Protocol debug extensions are now able to communicate to the VS Code UI whether the \"Restart Frame\" action is available on a selected stack frame. VS Code now disables the restart frame inline action in the **Call Stack view** for stack frames that cannot be restarted.  \nFor example JS-Debug extension has adopted this and now async stack traces disable the restart frame action.",
    "url": "https://code.visualstudio.com/updates/v1_54#_new-settings-and-other-improvements",
    "id": 2043
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Languages  \n### TypeScript 4.2  \nVS Code now ships with TypeScript 4.2.2. This major update includes many TypeScript language improvements, along with many improvements and bug fixes for JavaScript and TypeScript tooling.  \nYou can read more about TypeScript 4.2 [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-2/).",
    "url": "https://code.visualstudio.com/updates/v1_54#_typescript-4.2",
    "id": 2044
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Quick Fix to declare missing functions  \nThe new **Add missing function declaration** Quick Fix stubs out missing functions. For example, if we have a call to a missing function `add`:  \n```ts\nconst x: number = add(1, 2);\n```  \nUsing **Add missing function declaration** on `add` results in:  \n```ts\nconst x: number = add(1, 2);\nfunction add(arg0: number, arg1: number): number {\nthrow new Error(\"Function not implemented.\");\n}\n```  \nYou can use this Quick Fix while writing code to quickly stub out a function based on a call signature.  \nTo use this Quick Fix in JavaScript, you must [enable type checking](https://code.visualstudio.com/Docs/languages/javascript#_type-checking).",
    "url": "https://code.visualstudio.com/updates/v1_54#_quick-fix-to-declare-missing-functions",
    "id": 2045
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### JS Doc templates now generate @returns  \nJS Doc templates now automatically include `@returns` if the function being annotated includes a `return` statement. For example, for the function `getViz`:  \n```js\nfunction getViz(el){\nreturn el?.viz;\n}\n```  \nThe generated JSDoc template is:  \n```js\n/**\n*\n* @param {*} el\n* @returns\n*/\nfunction getViz(el){\nreturn el?.viz;\n}\n```  \nYou can disable `@returns` in JSDoc comments with `javascript.suggest.jsdoc.generateReturns` and `typescript.suggest.jsdoc.generateReturns`.",
    "url": "https://code.visualstudio.com/updates/v1_54#_js-doc-templates-now-generate-@returns",
    "id": 2046
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Deprecated DOM APIs are now marked  \nDeprecated DOM methods are now marked as deprecated in suggestions and in code:  \n![document.clear being marked as deprecated in code](images/1_54/ts-deprecated-dom.png)  \nYou can disable showing deprecated properties and functions in the editor by setting `editor.showDeprecated: false`.",
    "url": "https://code.visualstudio.com/updates/v1_54#_deprecated-dom-apis-are-now-marked",
    "id": 2047
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Notebooks  \n### Automatically reload notebooks  \nNotebooks now automatically reload when their file changes on disk and when they don't have unsaved changes. This should make it much simpler to work with notebooks that are under version control.",
    "url": "https://code.visualstudio.com/updates/v1_54#_automatically-reload-notebooks",
    "id": 2048
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Improved focus for large cells  \nWhen a large notebook cell is focused, you can now better tell which cell is focused when the top and bottom of the cells are out of view. We now show a border on the left and right side of the focused cell.  \n![Notebook focus for a large cell](./images/1_54/notebook-focus.gif)",
    "url": "https://code.visualstudio.com/updates/v1_54#_improved-focus-for-large-cells",
    "id": 2049
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Hovers in CSS/LESS/SCSS and HTML  \nYou can now fine-tune the content of hovers in HTML and CSS to:  \n* Not show the documentation from MDN\n* Not show the link to the MDN page  \nUse the settings `css.hover.documentation` and `css.hover.references` to change the hovers for CSS. Replace `css` with `html`, `css`, `scss` or `less` to change the settings for those languages.",
    "url": "https://code.visualstudio.com/updates/v1_54#_hovers-in-css/less/scss-and-html",
    "id": 2050
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Preview features  \n### Extensible Markdown renderers for notebooks  \nThis iteration, we explored making the Markdown renderer for notebook cells extensible. In the screenshot below, for example, we've extended VS Code's Markdown renderer to support showing math formula in notebook cells:  \n![A math formula being rendered in a notebook cell](images/1_54/notebook-math.png)  \nIn order to make our Markdown renderer extensible, we explored using [Markdown It](https://github.com/markdown-it/markdown-it) to render all notebook Markdown. We also explored moving the rendered Markdown into the backlayer webview of the notebook.  \nWhile we aren't yet ready to open up an official API for this, we plan on continuing this exploration in March. You can also try out the new extensible Markdown renderers today with the undocumented `notebook.experimental.useMarkdownRenderer: true` setting.",
    "url": "https://code.visualstudio.com/updates/v1_54#_extensible-markdown-renderers-for-notebooks",
    "id": 2051
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Contributions to extensions  \n### Brackets  \nDevelopers coming from the Brackets source code editor can keep using their same keyboard shortcuts in VS Code with the [Brackets Keymap](https://marketplace.visualstudio.com/items?itemName=ms-vscode.brackets-keybindings) extension. There is also a [Brackets Extension Pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode.brackets-pack), which bundles extensions for working with CSS and creating live previews.  \n![Brackets Extension Pack in the Marketplace](images/1_54/brackets-keymap-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_brackets",
    "id": 2052
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.24.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0240) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_54#_github-pull-requests-and-issues",
    "id": 2053
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.54 include:  \n* Ports view table layout\n* Remote - SSH: X11 Forwarding\n* WSL: Improved WSL 2 support  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_54.md).",
    "url": "https://code.visualstudio.com/updates/v1_54#_remote-development",
    "id": 2054
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Extension authoring  \n### Limits for editor title menu and \"run\" submenu  \nThe space in the editor toolbar (`editor/title`) is limited. Therefore, we have  \n* implemented an overflow behavior. When the primary group, that is, the group of actions that get rendered with icons, exceeds nine commands then all additional commands overflow into the `...` menu.\n* added the `editor/title/run` submenu. We ask extension authors to contribute run- and debug-commands into this menu, not into the `editor/title`-menu anymore as we had recommended in a [previous release](https://code.visualstudio.com/updates/v1_47#_guidelines-for-improving-the-single-file-debug-experience). In addition, it is no longer necessary to use the magic group values `1_run@10` and `1_run@20` in order to make the commands show up in the correct position.  \n![Run dropdown menu](./images/1_54/run-menu.png)  \nAlso know that the run submenu is dynamic, will replace itself with its first child when that's the only child.",
    "url": "https://code.visualstudio.com/updates/v1_54#_limits-for-editor-title-menu-and-run-submenu",
    "id": 2055
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Authentication Provider API  \nYou can now register an authentication provider, which can be used by other extensions to perform authentication against a service.",
    "url": "https://code.visualstudio.com/updates/v1_54#_authentication-provider-api",
    "id": 2056
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### New feedback channel for the Extension Marketplace  \nThere's a new [public repository](https://github.com/microsoft/vsmarketplace) for issues related to the Extension Marketplace. If you have technical issues, want to give feedback, or have feature requests, please [open an issue](https://github.com/microsoft/vsmarketplace/issues).",
    "url": "https://code.visualstudio.com/updates/v1_54#_new-feedback-channel-for-the-extension-marketplace",
    "id": 2057
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Updated codicons  \nWe've added the following new icons to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels):  \n* `debug-rerun`\n* `gather`\n* `git-pull-request-create`\n* `notebook-template`\n* `run-above`\n* `run-below`\n* `type-hierarchy`\n* `type-hierarchy-sub`\n* `type-hierarchy-super`\n* `variable-group`  \n![Codicons for tasks](./images/1_54/codicons.png)  \nWe've also updated the following icons to be consistent:  \n* `debug-alt-small`\n* `debug-alt`\n* `debug-rerun`\n* `play-circle`\n* `play`\n* `run-above`\n* `run-all`\n* `run-below`  \n![Consistent codicons](./images/1_54/codicons-updated.png)",
    "url": "https://code.visualstudio.com/updates/v1_54#_updated-codicons",
    "id": 2058
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Inline value provider API  \nToday the **Show Inline Values** feature of VS Code's debugger is based on a generic implementation in VS Code core, and doesn't provide customizability through settings or extensibility via extensions. As a consequence, it is not a perfect fit for all languages and sometimes shows incorrect values because it doesn't understand the underlying source language. For this reason, we are working on an extension API that allows to replace the built-in implementation completely or to replace parts of the implementation with custom code.  \nIn this milestone, we've made a first implementation of the [proposed API](https://github.com/microsoft/vscode/blob/57c918802b88902adc2094d70c8fd3aa29a13102/src/vs/vscode.proposed.d.ts#L667-L813) available.  \nHere is the inline values provider API in a nutshell:  \n* an `InlineValuesProvider` must be registered for a language.\n* for a given document the `InlineValuesProvider` must locate all language elements for which inline values should be shown.\n* for every element an `InlineValue` descriptor object must be returned which instructs VS Code what information to show. Currently three types of `InlineValue` objects are supported:\n* `InlineValueText`: the complete text to be shown,\n* `InlineValueVariableLookup`: the name of a variable that VS Code will try to look up in the VARIABLES view to find its value. The name and the value are then shown in the form \"name = value\",\n* `InlineValueEvaluatableExpression`: an expression that VS Code will send to the debugger for evaluation. The expression and the result are then shown in the form \"expression = result\".  \nThe following snippet (from [Mock Debug](https://github.com/microsoft/vscode-mock-debug/blob/c11887591467730d561ad43e286749a1a96cd874/src/activateMockDebug.ts#L106-L131)) shows a minimal inline values provider for \"markdown\" files that uses a regular expression to locate \"variables\" and then instructs VS Code to find their values via the **Variables view**:  \n```ts\nvscode.languages.registerInlineValuesProvider('markdown', {\nprovideInlineValues(document: TextDocument, viewport: Range, context: InlineValueContext) : ProviderResult<InlineValue[]> {\nconst allValues: InlineValue[] = [];\nfor (let l = 0; l <= context.stoppedLocation.end.line; l++) {\nconst line = document.lineAt(l);\nvar regExp = /local_[ifso]/ig;// match variables of the form local_i, local_f, Local_i, LOCAL_S...\ndo {\nvar match = regExp.exec(line.text);\nif (match) {\nconst varName = match[0];\nconst varRange = new Range(l, match.index, l, match.index + varName.length);\nallValues.push(new InlineValueVariableLookup(varRange, varName));\n}\n} while (match);\n}\nreturn allValues;\n}\n});\n```  \nAnd now the inline values provider in action:  \n![Debugger shows inline values](images/1_54/inline-values.gif)  \nIf you want to provide feedback for this proposed API, please add comments to [this issue](https://github.com/microsoft/vscode/issues/105690).",
    "url": "https://code.visualstudio.com/updates/v1_54#_inline-value-provider-api",
    "id": 2059
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Testing  \nWe continued to make progress on [testing in VS Code](https://github.com/microsoft/vscode/issues/107467). This month we focused on refining the base experience in VS Code and the extension APIs. We have also published some [provisional documentation](/api/extension-guides/testing) on testing, which will be fleshed out as the APIs continue to stabilize.",
    "url": "https://code.visualstudio.com/updates/v1_54#_testing",
    "id": 2060
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Improved description for setExceptionBreakpoints request  \nWe have improved the description of the `setExceptionBreakpoints` request by adding guidance for what an adapter should do if the user inputs an invalid exception breakpoint condition.",
    "url": "https://code.visualstudio.com/updates/v1_54#_improved-description-for-setexceptionbreakpoints-request",
    "id": 2061
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### New canRestart property for stack frames  \nA new optional boolean property `canRestart` has been added to the stack frame. It indicated whether the stack frame can be restarted with the `restart` request.\nBased on this information a client can enable or disable a **Restart Frame** context menu action.",
    "url": "https://code.visualstudio.com/updates/v1_54#_new-canrestart-property-for-stack-frames",
    "id": 2062
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Engineering  \n### Progress on Electron sandbox  \nThis milestone we continued to make the VS Code window ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation) features.  \nSpecifically:  \n* We were able to move some of the native module requirements we have in the renderer to other processes.\n* The `MessagePort` communication channel was implemented to work when sandbox is enabled.",
    "url": "https://code.visualstudio.com/updates/v1_54#_progress-on-electron-sandbox",
    "id": 2063
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### New terminal process layout  \nTerminal processes are now spawned under a new \"pty host\" process, instead of the window process. This change is not only part of the Electron sandbox but should also improve stability and performance of the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_54#_new-terminal-process-layout",
    "id": 2064
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Windows installers published to Windows Package Manager  \nWindows user and system installers for `x86` and `x64` are now being published to the [Windows Package Manager](https://learn.microsoft.com/windows/package-manager/). You can use the [winget](https://learn.microsoft.com/windows/package-manager/winget/) tool to search for all Visual Studio Code installers - `winget search vscode`, and [install](https://learn.microsoft.com/windows/package-manager/winget/install) any of the published installers.",
    "url": "https://code.visualstudio.com/updates/v1_54#_windows-installers-published-to-windows-package-manager",
    "id": 2065
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Building VS Code using TypeScript 4.3  \nVS Code now is built using a nightly build of TypeScript 4.3. This lets us validate the TypeScript team's latest work and also provide feedback on new changes.  \nThe latest TypeScript version already helped us catch a few cases where we were [missing awaits in conditionals](https://github.com/microsoft/TypeScript/issues/25330).",
    "url": "https://code.visualstudio.com/updates/v1_54#_building-vs-code-using-typescript-4.3",
    "id": 2066
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Prevent yarn.lock changes  \nWe now have CI that prevents PRs against `yarn.lock` files, in order to improve supply chain security.",
    "url": "https://code.visualstudio.com/updates/v1_54#_prevent-yarn.lock-changes",
    "id": 2067
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Default branch: main  \nWe have started renaming the default branch of all our repositories to `main`, including `microsoft/vscode`. We are about 60% finished with this effort.",
    "url": "https://code.visualstudio.com/updates/v1_54#_default-branch:-main",
    "id": 2068
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n## Documentation  \n### VS Code and Python in the classroom  \nRead the [case study](https://code.visualstudio.com/learn/educators/python) of a Computer Science professor at Harvey Mudd College, who uses VS Code in his introductory CS classes with Python. Learn about the settings he recommends for his students, as well as helpful extensions and free self-paced Python and Data Science lessons.",
    "url": "https://code.visualstudio.com/updates/v1_54#_vs-code-and-python-in-the-classroom",
    "id": 2069
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2021 Release (1.54)  \n### Troubleshooting extensions blog post  \nEverybody loves installing and using VS Code extensions. However, when you have lots of extensions installed, sometimes the editor can start to act \"funny\" and it would be great to know if the behavior is caused by a specific extension. If you missed the earlier announcement of the [extension bisect](https://code.visualstudio.com/updates/v1_52#_troubleshooting-extension-bisect) utility, you can read this [\"Resolving extension issues with bisect\"](https://code.visualstudio.com/blogs/2021/02/16/extension-bisect) blog post, which describes how you can quickly troubleshoot \"bad\" extensions and even help the extension author(s) with feedback.",
    "url": "https://code.visualstudio.com/updates/v1_54#_troubleshooting-extensions-blog-post",
    "id": 2070
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Increased limit to 1000 lines for screen reader  \nThanks to upstream issues being fixed, we have increased the number of lines that a \"Say All\" command can read. Previously, we had a hard limit of 100 lines that could be announced by a screen reader at one time, and we have now increased this limit to 1000. Further upstream fixes are needed in order for us to not have any limit at all.  \nDue to this change, the setting `editor.accessibilityPageSize` is now deprecated. We will still support this setting in the next couple of releases, however we plan to fully drop it in the future.",
    "url": "https://code.visualstudio.com/updates/v1_55#_increased-limit-to-1000-lines-for-screen-reader",
    "id": 2072
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Workbench  \n### Encryption update on Windows  \nWe've changed the way we encrypt secrets on Windows, which impacts Settings Sync and extensions using the `secrets` API. Users on Windows will be automatically signed out on update and will need to authenticate again.",
    "url": "https://code.visualstudio.com/updates/v1_55#_encryption-update-on-windows",
    "id": 2073
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Updated brand icons for macOS Big Sur  \n![Brand icons on macOS Big Sur](images/1_55/brand-icon-example.png)  \nWe've been working on updating the VS Code brand icons on macOS to match the new visual style of [Big Sur](https://developer.apple.com/design/human-interface-guidelines/macos/icons-and-images/app-icon/). We've appreciated all of the feedback from the community, and we are happy to release the new logos for Stable and Insiders. We are also using the same logos on all platforms.  \n| Stable                                            | Insiders                                              | Exploration                                                 |\n| ------------------------------------------------- | ----------------------------------------------------- | ----------------------------------------------------------- |\n| ![Stable icon](images/1_55/brand-icon-stable.png) | ![Insiders icon](images/1_55/brand-icon-insiders.png) | ![Exploration icon](images/1_55/brand-icon-exploration.png) |",
    "url": "https://code.visualstudio.com/updates/v1_55#_updated-brand-icons-for-macos-big-sur",
    "id": 2074
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Improved sash customization  \nA new `workbench.sash.hoverDelay` setting lets you define the delay for the hover feedback of sashes. The existing `workbench.sash.size` setting has been improved in order to still provide a large surface grabbing area for touch devices, while keeping the UI clean.",
    "url": "https://code.visualstudio.com/updates/v1_55#_improved-sash-customization",
    "id": 2075
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Improved List/Tree navigation  \nLists and Trees now support a custom keyboard navigation mode that behaves more naturally in specific areas such as Notebooks.  \nAdditionally, `Shift+Click` range selections behave more deterministically.",
    "url": "https://code.visualstudio.com/updates/v1_55#_improved-list/tree-navigation",
    "id": 2076
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Tab decorations on by default  \nTab decorations for editors are now on by default, to configure them use `workbench.editor.decorations.colors` and `workbench.editor.decorations.badges`  \n![Editor tab with decorations showing that the file has warnings and is modified for git](images/1_55/tabs-deco.png)\n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_55#_tab-decorations-on-by-default",
    "id": 2077
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Resizing columns in Keyboard Shortcuts editor  \nThe Keyboard Shortcuts editor is now refactored to use the new table widget, allowing users to resize the columns in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_55#_resizing-columns-in-keyboard-shortcuts-editor",
    "id": 2078
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Extension management improvements  \n* VS Code now detects extensions installed/uninstalled through the VS Code CLI. Extensions can be activated/de-activated in the active window (instance) and will be correctly displayed in the Extensions view.  \n* VS Code now shows the set of extensions included in an extension that sets the `extensionPack` property in a separate **Extension Pack** tab even when the extension is not categorized as **Extension Packs**.  \n![Extension that is not an extension pack but includes other extensions](images/1_55/extension-pack.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_55#_extension-management-improvements",
    "id": 2079
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Negative text filtering in Problems view  \nYou can now filter problems that do not contain specific text from the Problems view by prepending `!` to the filter text.",
    "url": "https://code.visualstudio.com/updates/v1_55#_negative-text-filtering-in-problems-view",
    "id": 2080
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Reporting Marketplace issues  \nLast month we highlighted that there's a new [public repository](https://github.com/microsoft/vsmarketplace) for issues related to the Extension Marketplace. Now, VS Code's issue reporter supports creating issues in this repository.",
    "url": "https://code.visualstudio.com/updates/v1_55#_reporting-marketplace-issues",
    "id": 2081
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Configure tree hover delay  \nThe hover delay for extension contributed tree views can now be configured with `workbench.hover.delay`.",
    "url": "https://code.visualstudio.com/updates/v1_55#_configure-tree-hover-delay",
    "id": 2082
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Emmet  \nThe `emmet.extensionsPath` setting now takes in only string arrays, and can be directly edited in the Settings editor.",
    "url": "https://code.visualstudio.com/updates/v1_55#_emmet",
    "id": 2083
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Search in Open Editors  \nYou can now toggle the **Search Only in Open Editors** checkbox in a workspace search to change from searching the entire workspace to only searching in files that have been opened in editor tabs. This previously was enabled via an opt-in, this iteration we've enhanced the behavior with files that have not yet been loaded in the VS Code session and enabled it by default.",
    "url": "https://code.visualstudio.com/updates/v1_55#_search-in-open-editors",
    "id": 2084
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Control the font size of the Source Control input  \nYou can now change the font size of the Source Control input via the new `scm.inputFontSize` setting.",
    "url": "https://code.visualstudio.com/updates/v1_55#_control-the-font-size-of-the-source-control-input",
    "id": 2085
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Integrated Terminal  \n### Terminal profiles  \nThe terminal now supports defined profiles, which appear in the terminal's dropdown, to conveniently launch non-default shells:  \n![Terminal profiles show up below the terminal processes and above the configuration items](images/1_55/terminal-profiles.png)  \nVS Code will automatically detect and surface some of the more commonly used shells through this menu, but they can also be configured using the `terminal.integrated.profiles.<platform>` setting. With this setting, it's possible to add new profiles, change existing profiles and remove default profiles. For example:  \n```json\n\"terminal.integrated.profiles.windows\": {\n// Add a PowerShell profile that doesn't run the profile\n\"PowerShell (No Profile)\": {\n// Some sources are available which auto detect complex cases\n\"source\": \"PowerShell\",\n\"args\": [\"-NoProfile\"],\n// Name the terminal \"PowerShell (No Profile)\" to differentiate it\n\"overrideName\": true\n},\n// Remove the builtin Git Bash profile\n\"Git Bash\": null,\n// Add a Cygwin profile\n\"Cygwin\": {\n\"path\": \"C:\\\\cygwin64\\\\bin\\\\bash.exe\",\n\"args\": [\"--login\"]\n}\n}\n```  \nThe recommended way to initially add a profile is via the **Select Default Profile** command, which allows creating profiles based on either an existing profile or other detected shells.  \n![The Select Default Profile command shows all configured and detected profiles](images/1_55/terminal-profile-selector.png)",
    "url": "https://code.visualstudio.com/updates/v1_55#_terminal-profiles",
    "id": 2086
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Auto detected WSL profiles and improved defaults on Windows  \nAlong with the new profiles feature, we now auto detect WSL profiles and show them in the list by default. This can be turned off with the `terminal.integrated.useWslProfiles` setting.  \nCygwin is also now auto detected and exposed in the **Select Default Profile** command and Git Bash will run as a login shell (running `~/.bash_profile`).",
    "url": "https://code.visualstudio.com/updates/v1_55#_auto-detected-wsl-profiles-and-improved-defaults-on-windows",
    "id": 2087
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### WebGL renderer is the new default  \nThe terminal first got the experimental WebGL renderer back in the [November 2019 release](https://code.visualstudio.com/updates/v1_41#_new-experimental-webgl-renderer), which based our calculations at the time could increase performance by up to 900% and by even more if your environment had issues with rendering using a standard 2D canvas context.  \nSince then, the WebGL renderer has gradually improved in stability and had its feature gap closed. We decided now is as good a time as any to make the transition, but will be watching for any issue reports.  \nAs part of this work we also added some fallback logic. When `\"terminal.integrated.rendererType\": \"auto\"`, the following happens:  \n1. The WebGL renderer will try to start up.\n2. If it fails, for example due to lack of OS/browser support:\n- The canvas renderer will be enabled and the time it takes to render a frame will start to be measured.\n3. If the first 20 frames are rendering slowly, for example if there are hardware issues or GPU rendering is disabled:\n- The DOM renderer will be enabled.  \nIn the next release, we plan on removing the `rendererType` setting all together in favor of a much more understandable `\"terminal.integrated.gpuAcceleration\": \"auto\" | \"on\" | \"off\"`.",
    "url": "https://code.visualstudio.com/updates/v1_55#_webgl-renderer-is-the-new-default",
    "id": 2088
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Seamless terminal relaunching  \nLast release, we introduced automatic relaunching of terminals when an extension wants to change the environment. This release will now prevent the flickering that was caused before when the relaunch occurs. If the output of the new terminal is identical to the last, there is no feedback or distractions caused by the relaunch.  \nThere is also a new setting to disable this automatic relaunching all together `terminal.integrated.environmentChangesRelaunch`.",
    "url": "https://code.visualstudio.com/updates/v1_55#_seamless-terminal-relaunching",
    "id": 2089
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Editor  \n### New auto closing pair deletion  \nThe behavior of pressing `kbstyle(Backspace)` has changed when inside auto-closing pairs. The editor will now delete the matching closing bracket or matching closing quote only if the editor auto-inserted that character. This behavior is controlled via a newly introduced setting called `editor.autoClosingDelete`, which can be configured to `\"always\"` to get the previous behavior.",
    "url": "https://code.visualstudio.com/updates/v1_55#_new-auto-closing-pair-deletion",
    "id": 2090
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Debugging  \n### Improvements to breakpoints  \n**Inline menu to edit conditions and hit count**  \nWe now show an inline menu for editing conditions and hit counts for function breakpoints. Previously the inline edit button would choose automatically what condition to edit. Now, the menu should make the flow easier and give more control to the user.  \n![Breakpoint condition menu](images/1_55/breakpoint-condition.png)  \n**Support for all access types of data breakpoints**  \nNow VS Code's generic debugger UI supports all data breakpoint _access types_ defined in the Debug Adapter Protocol as context menu actions in the VARIABLES view:  \n* **Break on Value Read**: breakpoint will be hit every time a variable gets read.\n* **Break on Value Change**: breakpoint will be hit every time a variable gets changed (this action was previously available).\n* **Break on Value Access**: breakpoint will be hit every time a variable is read or changed.  \nPlease note that debug extensions have to opt into this feature in order to make individual actions available.\nFor now, only the Mock Debug extension has (simulated) support for all three access types, but we expect other debug extensions to follow soon - such as the Java extension.  \n![Data breakpoints break on access types](images/1_55/break-on-value.png)",
    "url": "https://code.visualstudio.com/updates/v1_55#_improvements-to-breakpoints",
    "id": 2091
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Clearing a terminal before launching a debuggee  \nSome debug extensions allow you to launch debuggees in VS Code's Integrated Terminal. In order to keep the number of Integrated Terminals small, VS Code tries to reuse a terminal if it is not blocked by a still running command. A consequence of this approach is that previous commands and program output will remain visible in the terminal, which is sometimes confusing.  \nIn this release, we've introduced a new feature to automatically clear the Integrated Terminal before starting a new debug session. The feature is controlled by the new setting `debug.terminal.clearBeforeReusing`.",
    "url": "https://code.visualstudio.com/updates/v1_55#_clearing-a-terminal-before-launching-a-debuggee",
    "id": 2092
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### JavaScript debugging  \nAs usual, the complete list of changes can be found in the [vscode-js-debug changelog](https://github.com/microsoft/vscode-js-debug/blob/main/CHANGELOG.md#v1551---2021-03-24).  \n**Start Debugging and Stop on Entry**  \nWhen we moved to our new debugger, last year, the **Debug: Start Debugging and Stop on Entry** was left behind. It once again works, and requests the debugger to pause on the first line of your Node.js program. By default it is bound to `kbstyle(F10)`.  \n**Improved handling of symbolic links**  \nDebugging Node.js programs with symbolic links [can require special flags](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_can-i-debug-if-im-using-symlinks) to be passed to the program. Without these flags, breakpoints remained unbound, and it was hard to figure out what was going wrong. Now, the debugger will automatically detect these cases and provide a helpful notification.  \n![Notification that says \"It looks like you have symlinked files. You might need to update your configuration to make this work as expected,\" with buttons to \"Read More\" and \"Ignore\"](images/1_55/js-debug-symlinks.png)",
    "url": "https://code.visualstudio.com/updates/v1_55#_javascript-debugging",
    "id": 2093
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Notebooks  \n### Multiple cell selection  \nWe now support selecting multiple cells in a Notebook using the mouse (`Shift+Click`) or keyboard shortcuts (`Shift+Arrow`). Once multiple cells are selected, you can then copy/cut/paste/move/duplicate selected cells.  \n![Notebook multiple cells selection](images/1_55/notebook-multi-cells-selection.gif)  \nYou can also drag and drop multiple cells together.  \n![Notebook multiple cells selection drag and drop](images/1_55/notebook-multi-cells-selection-dnd.gif)  \n**Limitations**: When there are multiple distinct ranges of cells selected, most commands will only be executed against the first range or the focused range. We will continue improving this experience in upcoming releases.  \nWe also added a new color token, `notebook.inactiveSelectedCellBorder`, that has no default color but is available for themes that prefer to use borders for multi-select instead of background colors:  \n![Notebook cells being multi-selected via border instead of background colors](images/1_55/notebook-multiselect-border.gif)",
    "url": "https://code.visualstudio.com/updates/v1_55#_multiple-cell-selection",
    "id": 2094
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Show/hide output and metadata differences in the diff editor  \nWe have heard from users that when reviewing changes in a Notebook, the modifications in notebook cell metadata or outputs can be distracting or irrelevant. VS Code now allows you to control the visibility of metadata or output changes in the diff editor using the settings `notebook.diff.ignoreMetadata` and `notebook.diff.ignoreOutputs`. They can also be toggled by using the **Show Outputs/Metadata Differences** command from the editor title toolbar.  \n![Notebook show metadata/outputs differences](images/1_55/notebook-show-differences.gif)",
    "url": "https://code.visualstudio.com/updates/v1_55#_show/hide-output-and-metadata-differences-in-the-diff-editor",
    "id": 2095
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Preview features  \n### Continued improvements to extensible Markdown renderers in Notebooks  \nWe continued improving our support extending the Markdown renderer in Notebooks. Our focus this iteration was improving performance of the new renderers. We also fixed many regressions that the new renders introduced.  \n![Emoji and a math formula being rendered in a notebook cell](images/1_55/notebook-math.png)  \nThe new renderers are still disabled by default but we are now more confident that we will be able to enable them soon. You can try out the new extensible Markdown renderers today with the undocumented `notebook.experimental.useMarkdownRenderer: true` setting. After enabling this setting and restarting VS Code, you should be able to use `:emoji:` and KaTeX `$math$` formulas in Markdown cells.",
    "url": "https://code.visualstudio.com/updates/v1_55#_continued-improvements-to-extensible-markdown-renderers-in-notebooks",
    "id": 2096
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Getting Started  \nWe are continuing an overhaul of our default startup editor in order to provide relevant extension-contributed tips and walkthroughs, intended to make both core VS Code features and extension contributions more approachable to new users. Many Insiders users may have already seen it, and it will be slowly rolled out to more Stable users over the course of this iteration. You can always opt in or out of the new behavior by modifying the `workbench.startupEditor` setting to or away from `gettingStarted`.  \n![Getting Started experience walkthrough](./images/1_55/getting-started.gif)\n*Theme: GitHub Light*",
    "url": "https://code.visualstudio.com/updates/v1_55#_getting-started",
    "id": 2097
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.55 include:  \n* Double-click to name ports\n* Configure default port detection behavior\n* Updated experience for cloning a repository in a container volume  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_55.md).",
    "url": "https://code.visualstudio.com/updates/v1_55#_remote-development",
    "id": 2098
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.25.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0250) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_55#_github-pull-requests-and-issues",
    "id": 2099
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Extension authoring  \n### Untitled file API for custom editors & Notebooks  \nCustom editors and Notebooks now include an `untitledDocumentData` property on the open context, which includes the buffer of the data included in the untitled file that the user triggered a **Reopen With** on. This property should be read instead of the URI if populated as the URI doesn't point to a file on disk in the untitled file case.",
    "url": "https://code.visualstudio.com/updates/v1_55#_untitled-file-api-for-custom-editors-&-notebooks",
    "id": 2100
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Inline values provider API  \nThe proposed inline values provider API [introduced last milestone](https://code.visualstudio.com/updates/v1_54#_inline-value-provider-api) has been finalized and can now be used in extensions published on the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_55#_inline-values-provider-api",
    "id": 2101
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### New Copy As submenus  \nThere are two new menu locations, which appear in the UI as a **Copy As** submenu:  \n* `menuBar/edit/copy` - for the title bar **Edit** menu\n* `editor/context/copy` - for the editor context menu  \n![Copy As submenu](images/1_55/copyas.png)",
    "url": "https://code.visualstudio.com/updates/v1_55#_new-copy-as-submenus",
    "id": 2102
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### New extension property on ExtensionContext  \nExtension authors can now use the new `extension` property on `ExtensionContext`, which is passed into the extension's `activate` function. This returns the same `Extension` instance that `vscode.extensions.getExtension(<extension-id>)` returns, which contains properties such as the extension's ID, version, and a serialized `packageJSON` property where you can access data directly from your extension's `package.json` file.",
    "url": "https://code.visualstudio.com/updates/v1_55#_new-extension-property-on-extensioncontext",
    "id": 2103
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Docker compose language  \nA new Docker compose language has been added. This won't have much user facing change; however, extension authors can now use this to target Docker compose files. The language ID is `dockercompose`.",
    "url": "https://code.visualstudio.com/updates/v1_55#_docker-compose-language",
    "id": 2104
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Telemetry enablement API  \nExtensions could always check whether or not the user had disabled telemetry via the configuration value of `telemetry.telemetryLevel`, but it was not possible to check if the user had used the CLI flag `--disable-telemetry`. This milestone, we've added two more properties to the `env` object of extension API: `isTelemetryEnabled` and `onDidChangeTelemetryEnabled`. The former takes into account the CLI flag and the current configuration value. The latter is event that fires any time `isTelemetryEnabled` changes.",
    "url": "https://code.visualstudio.com/updates/v1_55#_telemetry-enablement-api",
    "id": 2105
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Workspace Trust development  \nFor several iterations, we have been exploring a security feature we refer to as *Workspace Trust*. As we near its release, we seek to engage extension authors to start their onboarding process and get feedback. At the present, extensions that are not updated to handle *Workspace Trust* will inherit safe defaults; however, for an optimal user-experience,  we request extension authors read more information [in issue #106488](https://aka.ms/AAbow1d) and subscribe for updates as we progress through the next iteration.",
    "url": "https://code.visualstudio.com/updates/v1_55#_workspace-trust-development",
    "id": 2106
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### CodeActionContext.triggerKind  \nThe proposed `triggerKind` property on `CodeActionContext` tracks why code actions are being requested from a `CodeActionProvider`. The possible values of this property are:  \n* `Invoke`: Code actions were requested explicitly, either with a keyboard shortcut or command.  \n* `Automatic`: Code actions were requested without explicit user action. This includes requesting code actions when the contents of a document change.  \nProviders can use `triggerKind` to return different sets of results depending on how code actions are requested. For example, a refactoring code action provider that is triggered automatically may only return refactorings for the exact current selection in order to limit how often the code action lightbulb shows up. However when code actions are explicitly requested, the same provider may automatically expand the current selection to try to show all the refactorings that a user may be interested in at the current location.",
    "url": "https://code.visualstudio.com/updates/v1_55#_codeactioncontext.triggerkind",
    "id": 2107
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### PortAttributesProvider  \nAny extension that starts processes that listen on ports and wants to have a stellar experience when used with a [VS Code remote extension](https://code.visualstudio.com/docs/remote/remote-overview) should consider providing feedback and adopting the new `PortsAttributesProvider` API. Since VS Code detects and automatically forwards ports when using one of the remote extensions, any extension that listens on ports will have those ports automatically forwarded. Often though, these ports are only important for the internal workings of the extension, and it isn't useful for the user to have these ports forwarded. This API can be used to set the behavior when a port is detected to prevent unwanted autoforwarding of ports that shouldn't be user facing.",
    "url": "https://code.visualstudio.com/updates/v1_55#_portattributesprovider",
    "id": 2108
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Quick input options title  \nThe `QuickPickOptions` passed in to `showQuickPick` and `InputBoxOptions` passed into `showInputBox` now have an optional `title` property that was previously only available in the `createQuickPick` API. This property, when set, displays a title bar on the quick input with the title you specified.",
    "url": "https://code.visualstudio.com/updates/v1_55#_quick-input-options-title",
    "id": 2109
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Engineering  \n### Faster Snap launch  \nThe snap package now uses the `lzo` compression algorithm, which provides faster launch times. For more information, see [the blog post from Ubuntu about the algorithm](https://ubuntu.com//blog/snap-speed-improvements-with-new-compression-algorithm).",
    "url": "https://code.visualstudio.com/updates/v1_55#_faster-snap-launch",
    "id": 2110
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Progress on Electron sandbox  \nThis milestone we continued to make the VS Code window ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation) features.  \nSpecifically:  \n- We were able to move some of the native module requirements we have in the renderer to other processes.\n- We were able to make more components and services available when sandbox option is enabled.",
    "url": "https://code.visualstudio.com/updates/v1_55#_progress-on-electron-sandbox",
    "id": 2111
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n## Documentation  \n### VS Code and JavaScript in the classroom  \nRead the [case study](https://code.visualstudio.com/learn/educators/nodejs) of a Computer Science lecturer at Naresuan University in Thailand, who uses VS Code in his introductory Web Development classes with JavaScript and Node.js. Learn about the settings and extensions he recommends for his students, as well as a helpful [Node.js and JavaScript Education Extension Pack](https://marketplace.visualstudio.com/items?itemName=tanhakabir.node-js-education-extension-pack).",
    "url": "https://code.visualstudio.com/updates/v1_55#_vs-code-and-javascript-in-the-classroom",
    "id": 2112
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2021 Release (1.55)  \n### Raspberry Pi  \nThere is a new topic describing how to install [VS Code on Raspberry Pi](https://code.visualstudio.com/docs/setup/raspberry-pi) devices.  \n![Raspberry Pi logo](images/1_55/raspberry-pi.png)",
    "url": "https://code.visualstudio.com/updates/v1_55#_raspberry-pi",
    "id": 2113
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Untitled editors hint  \nWe have noticed that many new users are not aware that a language has to be set in order to get full VS Code language support. To help with this problem, we have introduced a hint for untitled editors to help users set the correct language mode. The untitled hint might not be helpful to advanced users, so it goes away immediately as you start typing or you can select **don't show** to never display the hint again.  \n![Untitled editor shows an untitled hint](images/1_56/untitled-hint.png)",
    "url": "https://code.visualstudio.com/updates/v1_56#_untitled-editors-hint",
    "id": 2115
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Default custom editor and notebook resolution  \nIf you have two editors that both state they should be your default editor for a resource (for example, an image viewer and an image editor), you will receive a prompt to resolve the conflict.  \nIn the short video below, the user opens a PNG file, which is associated with two editors. The notification lets the user keep using the Luna Paint Image Editor or configure a new default, which they do and start using the binary Hex Editor.  \n![A image editor is opened and the user is prompted with a notification to configure their default editor or keep the current one](images/1_56/conflicting-defaults.gif)",
    "url": "https://code.visualstudio.com/updates/v1_56#_default-custom-editor-and-notebook-resolution",
    "id": 2116
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Updated custom dialogs  \nWe have updated our custom dialog styles, which you can enable via `\"window.dialogStyle\": \"custom\"`. VS Code now dims the background so there is better focus on the dialog and also uses the secondary button style when there is more than one action.  \n![An example of a custom dialog with a dimmed background and secondary buttons](images/1_56/custom-dialogs.png)  \n*Product Icon Theme: [Fluent Icons](https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons)*  \nYou can [theme](https://code.visualstudio.com/api/references/theme-color)  the secondary button style by using the following color tokens:  \n* `button.secondaryBackground`\n* `button.secondaryForeground`\n* `button.secondaryHoverBackground`",
    "url": "https://code.visualstudio.com/updates/v1_56#_updated-custom-dialogs",
    "id": 2117
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Auto update only enabled extensions  \nYou can now configure VS Code to auto update only your extensions that are currently enabled.  \n![Auto update only enabled extensions](images/1_56/extensions-auto-update.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_56#_auto-update-only-enabled-extensions",
    "id": 2118
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Terminal  \n### Profile improvements  \nLast iteration, we introduced [terminal profiles](https://code.visualstudio.com/updates/v1_55#_terminal-profiles). The terminal now supports setting a default profile with the `terminal.integrated.defaultProfile.<platform>` settings.  \nEnvironment and icon support was also added to the profiles system:  \n```json\n\"terminal.integrated.profiles.windows\": {\n\"PowerShell\": {\n\"source\": \"PowerShell\",\n\"overrideName\": true,\n\"icon\": \"terminal-powershell\",\n\"env\": {\n\"TEST_VAR\": \"value\"\n}\n}\n},\n\"terminal.integrated.defaultProfile.windows\": \"PowerShell\",\n```  \nGoing forward, these settings are the recommended way to switch out the default terminal configuration and the `terminal.integrated.shell` and `terminal.integrated.shellArgs` settings have been deprecated.",
    "url": "https://code.visualstudio.com/updates/v1_56#_profile-improvements",
    "id": 2119
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### New terminal picker  \nProfiles and setting shortcuts have moved out of the dropdown and into a new **+** button with a dropdown.  \n![When selected, the dropdown button displays a menu](images/1_56/tabs-dropdown-button.png)  \nThis also supports creating a new split terminal based on a non-default profile.",
    "url": "https://code.visualstudio.com/updates/v1_56#_new-terminal-picker",
    "id": 2120
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### New keybindings  \nThe terminal has several new default keybindings this release:  \n* Move to previous terminal - `Ctrl+PageUp` (macOS `Cmd+Shift+]`)\n* Move to next terminal - `Ctrl+PageDown` (macOS `Cmd+shift+[`)\n* Focus terminal tabs view - `Ctrl+Shift+\\` (macOS `Cmd+Shift+\\`) - [Terminal tabs preview](#terminal-tabs)  \nAs always, these default keybindings can be removed or custom keybindings can be added via the [keybindings system](https://code.visualstudio.com/docs/getstarted/keybindings).",
    "url": "https://code.visualstudio.com/updates/v1_56#_new-keybindings",
    "id": 2121
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Linux selection paste command  \nThe new command `workbench.action.terminal.pasteSelection` is available on Linux to paste into the terminal from the selection clipboard.",
    "url": "https://code.visualstudio.com/updates/v1_56#_linux-selection-paste-command",
    "id": 2122
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Terminal workspace shell permissions changed  \nIn order to support incoming changes related to profiles, the prompt that would show if terminal settings were present in `.vscode/settings.json` was removed in favor of a setting to opt into workspace settings use. Note that this can be dangerous in untrusted workspaces.  \n```json\n\"terminal.integrated.allowWorkspaceConfiguration\": true\n```  \nWhen Workspace Trust is enabled by default, we will remove this and use that system.",
    "url": "https://code.visualstudio.com/updates/v1_56#_terminal-workspace-shell-permissions-changed",
    "id": 2123
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Tasks  \n### Removal of Tasks 0.1.0 with upgrade  \nTasks 2.0.0 has been available and working well for over three years, and tasks 0.1.0 has been deprecated throughout that time. In light of our [Node.js-free renderer](https://github.com/microsoft/vscode/issues/92164) goal, tasks 0.1.0 has been deleted rather than brought into the Node.js-free world. When you open a folder that contains 0.1.0 tasks, they will be automatically upgraded to version 2.0.0 for you.  \n![Tasks upgrade notification](images/1_56/tasks-upgrade.png)",
    "url": "https://code.visualstudio.com/updates/v1_56#_removal-of-tasks-0.1.0-with-upgrade",
    "id": 2124
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### No \"Task\" prefix in terminal tabs  \nWhen using the new [Terminal tabs](#terminal-tabs) feature, the \"Task\" prefix will no longer be added to the terminal name. Instead, tasks are indicated by the \"tools\" icon to make better use of the available space.  \n![Tasks as terminal tabs](images/1_56/tasks-terminal-tabs.png)",
    "url": "https://code.visualstudio.com/updates/v1_56#_no-task-prefix-in-terminal-tabs",
    "id": 2125
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Better matching with eslint-stylish  \nThe `$eslint-stylish` problem matcher matches multiline problems more accurately.",
    "url": "https://code.visualstudio.com/updates/v1_56#_better-matching-with-eslint-stylish",
    "id": 2126
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Debugging  \n### Breakpoints view improvements  \n**Access type is shown for data breakpoints**  \nFor data breakpoints, VS Code now shows the access type (\"Read\", \"Write\", or \"Access\") next to its name in the Breakpoints view.  \n![The Breakpoints view shows the access types \"Read\", \"Write\" and \"Access\" being rendered next to the breakpoint name](images/1_56/data-breakpoints.png)  \n**Better status/error reporting for exception breakpoints**  \nFor exception breakpoints, VS Code now shows their individual verification status and detailed reason in the Breakpoints view. If an exception breakpoint cannot be verified (for example because its condition contains a syntax error), it will be grayed out and, on hover, the corresponding error message is shown.  \n![The Breakpoints view shows disabled exception breakpoints that on hover show the error message](images/1_56/exception-breakpoints.png)",
    "url": "https://code.visualstudio.com/updates/v1_56#_breakpoints-view-improvements",
    "id": 2127
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Other UI improvements  \n**Alternative behavior for Stop and Disconnect commands**  \nA debug session is typically stopped via the **Debug: Stop** and **Debug: Disconnect** commands. If the debug session is of type `launch`, the **Stop** command does not only stop the session but it also terminates the debuggee. For `attach` type debug sessions, there is a **Disconnect** command, which stops debugging and resumes execution of the debuggee.  \nWith this release, it is now possible to flip this behavior by pressing the `Alt` modifier while triggering the command from the Debug toolbar. Altering the behavior makes it possible to leave the debuggee running for `launch` type debug sessions, and to terminate the debuggee for `attach` type debug sessions. Apart from using `Alt` with the default commands, it is also possible to access both the **Debug: Stop** and **Debug: Disconnect** commands from the Command Palette for both `launch` and `attach` debug sessions.  \nThe alternative behavior is only available for debug extensions that have opted in to this feature.  \n**Improved flow for installing missing debug extensions**  \nWe have improved the flow if a user wants to start debugging but hasn't installed the necessary language extension that provides debugging support (like Python or Java). When this happens, VS Code now prompts the user to install the appropriate extension.  \n![VS Code prompts to install the Python extension if it is missing](images/1_56/python-flow.gif)  \n**Call stack column stopped indicator**  \nVS Code now renders the Call Stack column indicator every time a debuggee is stopped on a line. This should help identify where on a line the program is currently stopped.  \n![An code execution is stopped and a column indicator is rendered in the middle of a line](images/1_56/debug-column.gif)",
    "url": "https://code.visualstudio.com/updates/v1_56#_other-ui-improvements",
    "id": 2128
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Inline values by default for some languages  \nVS Code's debugger UI supports **Inline values** that show variable values **inline** in the editor when stepping through source code. This feature is based on a generic implementation in VS Code core and so may not be a perfect fit for all languages, even sometimes showing incorrect values because the generic approach doesn't understand the underlying source language. For these reasons, the feature was not enabled by default.  \nWith a new debugger extension API, it is now possible for language extensions to provide correct inline value support and we are enabling the **Improved inline values** feature by default.  \nTo enable this feature, the `debug.inlineValues` setting has a new (default) value `auto`. When set to `auto`, inline values are automatically enabled for those languages that have \"improved inline value\" support.  \nThe [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension is one of the first debugger extensions to adopt the API. In the screenshot below, the accurate values of the Java variables are displayed right next to their usage.  \n![Java extension displaying inline values in the editor while debugging](images/1_56/java-inline-values.png)  \nYou can get inline values while debugging PowerShell scripts using the [Inline Values support for PowerShell](https://marketplace.visualstudio.com/items?itemName=TylerLeonhardt.vscode-inline-values-powershell) extension.",
    "url": "https://code.visualstudio.com/updates/v1_56#_inline-values-by-default-for-some-languages",
    "id": 2129
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Debug view displayed on break  \nThe default value of the `debug.openDebug` setting is now `openOnDebugBreak` so that on every breakpoint hit, VS Code will open the Debug view. The Debug view is also displayed on first session start.",
    "url": "https://code.visualstudio.com/updates/v1_56#_debug-view-displayed-on-break",
    "id": 2130
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### JavaScript debugging  \nAs usual, the complete list of changes can be found in the [vscode-js-debug changelog](https://github.com/microsoft/vscode-js-debug/blob/main/CHANGELOG.md#changelog).  \n**Improved breakpoint diagnostic tool discoverability**  \nBased on [heuristics](https://github.com/microsoft/vscode/issues/57590#issuecomment-813616178), VS Code will show a notification that suggests opening the breakpoint diagnostic tool if it detects the user may be having trouble getting breakpoints to bind.  \n![Notification that reads \"It looks like you might be having trouble with breakpoints, would you like to open our diagnostic tool?\"](images/1_56/js-debug-diagnostic-tool.png)  \nThis prompt will initially be visible only to a subset of users as we experiment with its efficacy and assertiveness.  \n**Private Class Field Support**  \n[Private class fields](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Classes/Private_class_fields) are now visible and can be inspected in the debugger.",
    "url": "https://code.visualstudio.com/updates/v1_56#_javascript-debugging",
    "id": 2131
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Notebooks  \n### Toggle line numbers  \nYou can now temporarily toggle the line numbers of a cell in the current session from the cell toolbar, or change the visibility of line numbers for all notebooks through the `notebook.lineNumbers` setting.  \n![Toggle line number of a cell](images/1_56/notebook-toggle-line-numbers.gif)",
    "url": "https://code.visualstudio.com/updates/v1_56#_toggle-line-numbers",
    "id": 2132
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Cell toolbar position per file type  \nThe cell toolbar position can be now customized per file type through the `notebook.cellToolbarLocation` setting. For example, you can have the cell toolbar on the right side for [GitHub Issue](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks) notebooks but have it on the left for Jupyter notebooks.",
    "url": "https://code.visualstudio.com/updates/v1_56#_cell-toolbar-position-per-file-type",
    "id": 2133
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Math support in Markdown cells  \nYou can now use math equations inside of notebook Markdown cells:  \n![Math being rendered in a Jupyter notebook](images/1_56/notebook-math.png)  \nVS Code uses [KaTeX](https://katex.org) for rendering the equations. There are two ways to embed a math equation into a Markdown cell:  \n* Using single dollar signs: `$...$`. This creates an inline math equation.\n* Using double dollar signs:  `$$...$$`. This creates a centered, block math equation.  \nWe implemented math support using an experimental notebook markup renders API, which is still in development. Our eventual goal with this API is to also allow extensions to extend the rendering of Markdown in notebooks.",
    "url": "https://code.visualstudio.com/updates/v1_56#_math-support-in-markdown-cells",
    "id": 2134
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Languages  \n### Markdown preview typographer support  \nThe new `markdown.preview.typographer` setting lets you enabled smart quotes and simple [typographic replacements](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) in the built-in Markdown preview.  \nIn the example below, Markdown text such as `(c)` gets automatically replaced by copyright symbol `\u00a9` in the preview:  \n![Smart quotes and text replacement in the Markdown preview](images/1_56/markdown-typographer.png)  \nThe `markdown.preview.typographer` setting is disabled by default.",
    "url": "https://code.visualstudio.com/updates/v1_56#_markdown-preview-typographer-support",
    "id": 2135
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### More files recognized as shellscript  \nFiles with the `.xsession` and `.xprofile` filename extensions will be automatically recognized as shellscript.",
    "url": "https://code.visualstudio.com/updates/v1_56#_more-files-recognized-as-shellscript",
    "id": 2136
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Preview features  \n### Terminal tabs  \nTabs in the terminal are available as a preview feature and can be enabled with the following setting:  \n```json\n\"terminal.integrated.tabs.enabled\": true\n```  \n![The tabs view is a split pane to the right of two split terminals. It contains icons and labels for each terminal instance.](images/1_56/tabs.png)  \nWhen enabled, the new tabs view will only show by default when there are at least two terminals. For single terminals, the tab is \"inlined\" into the panel title like so:  \n![Terminal tab inlined into the panel title for a single terminal](images/1_56/tabs-single.png)  \nEach tab supports several actions via the context menu.  \n![Right-clicking on a tab displays a menu](images/1_56/tabs-menu-right-click.png)  \nSplit and kill terminal are available on hover.  \n![Hovering the tab item shows inline action icons](images/1_56/tabs-inline-actions.png)  \nWe've tried to align how the new tabs behave with how the Explorer works. Here are some of the other behaviors:  \n* Double-clicking the empty space will create a new terminal.\n* Double-clicking the sash will toggle the tabs view width between the \"ideal\" size that displays all the titles without truncating and a narrow view that shows only the icons.\n* The tabs can be moved to the left side using the `terminal.integrated.tabs.location` setting.\n* Various other configuration settings are available under `terminal.integrated.tabs`.",
    "url": "https://code.visualstudio.com/updates/v1_56#_terminal-tabs",
    "id": 2137
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Terminal statuses  \nAlong with tabs, we have introduced the concept of **statuses** to the terminal. A terminal can have many statuses, each of which represents a state the terminal can be in temporarily, with the highest severity one being displayed next to the tab. Status icons appear to the right of the terminal title in the tabs view. On hover, details of the status and any associated actions are presented.  \n![On a tab associated with a terminal that requires a relaunch, a yellow triangle with an exclamation mark is to the right of the terminal title](images/1_56/status-icon.png)  \nFor now, these states are supported:  \n* Relaunch needed: A warning icon status is used if an extension wants to change a terminal's environment.\n* Disconnected: A plug icon status is used when the terminal loses its connection with its process.\n* Bell: A bell icon appears when the bell is enabled via the `terminal.integrated.enableBell` setting and the terminal bell triggers.  \nWe plan to support task states soon so that task run status is available at a glance even without activating the tab.",
    "url": "https://code.visualstudio.com/updates/v1_56#_terminal-statuses",
    "id": 2138
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Welcome Page walkthroughs  \nWe have expanded the `walkthroughs` contribution for placing content on the Getting Started page to allow for Markdown in both step descriptions and step main content. Extension contributions to the Getting Started page are an experimental feature, and can be enabled with `\"workbench.welcomePage.experimental.extensionContributions\": true,`.  \nThe short video belows show an example walkthrough to teach users about the [Luna Paint](https://marketplace.visualstudio.com/items?itemName=Tyriar.luna-paint) extension.  \n![Stepping through the Luna Paint extension's walkthrough contribution](images/1_56/getting-started-markdown.gif)",
    "url": "https://code.visualstudio.com/updates/v1_56#_welcome-page-walkthroughs",
    "id": 2139
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Custom hover support in Activity bar and Panel  \nIn this milestone, we added experimental support for custom hovers in the Activity bar and Panel. You can enable custom hovers using the setting `workbench.experimental.useCustomHover`.  \n![Custom hover in Activity Bar and Panel](images/1_56/custom-hover.gif)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*\n*Product Icon Theme: [Fluent Icons](https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons)*",
    "url": "https://code.visualstudio.com/updates/v1_56#_custom-hover-support-in-activity-bar-and-panel",
    "id": 2140
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Remote Repositories (RemoteHub)  \nAs part of this release, we are previewing a new built-in extension, **Remote Repositories (RemoteHub)**, which allows you to instantly browse, search, edit, and commit to any GitHub repository directly from within VS Code without having to clone or have the repository locally. It is currently only available in the [Insiders](https://code.visualstudio.com/insiders/) edition of VS Code.  \n**Getting started**  \nTo get started, run the **Open Remote Repository...** command from the Command Palette. From there, you can paste in any GitHub URL, or choose to search for a specific repository or pull request.  \n![Open Remote Repository picker](images/1_56/open-remote-repository.png)  \n*Theme: [Amethyst Dark Theme](https://marketplace.visualstudio.com/items?itemName=eamodio.amethyst-theme)*  \nOnce you enter a URL or choose a repository or pull request, VS Code will open a new workspace for that repository. The remote status indicator, on the left side of the Status bar, shows the connected remote provider name, for example GitHub, for the remote repository.  \n![Remote Repositories Demo showing various source control operations](images/1_56/remote-repositories.gif)  \n*Theme: [Amethyst Dark Theme](https://marketplace.visualstudio.com/items?itemName=eamodio.amethyst-theme)*  \n**Features**  \n* Instantly open any GitHub repository without cloning or having the repository locally.\n* Easily edit and contribute to any GitHub repository - directly commit your changes to GitHub, or open a pull request.\n* Continue in another environment - via the **Continue on...** command (accessible from the Command Palette or the remote indicator quick pick menu).\n* Clone the repository locally\n* Clone the repository into a container - requires the [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension\n* Provides a familiar user interface similar to working on a local repository (*see \"Limitations\" below).\n* **Explorer** - Open, copy, move, rename, and delete files and folders\n* **Search** - Fast full-text search<sup>*</sup>\n* **Source Control** - Stage and commit your changes, as well as many other source control actions\n* **Timeline** view - See file history with diff support\n* **Quick Open** - Quickly find files to open\n* **Remote Indicator** - Shows the provider that the remote repository is connected to (for example, GitHub)\n* Work on different branches simultaneously - each remote branch is treated like a separate worktree (in Git parlance), meaning that any changes you make are isolated to that branch. You don't need to stash your changes just to switch to a new branch in order to checkout a PR or start on a new work item. And when you go back to the previous branch, your changes will still be there.\n* Install the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, and quickly view, explore, and checkout pull requests, view and start working on issues.  \n**Limitations**  \n* Limited language intelligence - Many language servers don't yet understand this virtualized environment. TypeScript supports single file intelligence for remote repositories.\n* Limited extension support - As with language servers, many extensions don't work with remote repositories. Extensions can opt-out and will not be activated for virtual workspaces. See the [Extension authoring section](#extension-authoring) below for more details.\n* Search - Full-text search requires a pre-built index for exact text matching, otherwise it will fallback to GitHub's fuzzy default-branch only native search.\n* Terminals - Not supported. Any terminals open will be on your local file system.\n* Debugging - Not supported.\n* Tasks - Not supported.  \n**Tell us what you think**  \nWe are very excited for you to play with **Remote Repositories (RemoteHub)** and can't wait for your thoughts and feedback. We are just getting started on this journey, so expect the feature set to grow and the limitations to shrink as we continue development. We will also be expanding the set of supported providers. GitHub is just the first provider we are supporting, with Azure Repos coming soon.",
    "url": "https://code.visualstudio.com/updates/v1_56#_remote-repositories-remotehub",
    "id": 2141
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### TypeScript 4.3  \nThis release continues to improve our support for the upcoming TypeScript 4.3 release. You can read more about the new language features and improvements in TypeScript 4.3 [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-3-beta/). Here are some of the editor improvements it enables:  \n* Support for `override`. There are also Quick Fixes for adding the `override` keyword.\n* Import statement completions. This is like auto import, except you are typing in the import statement itself.\n* JSDoc `@link` tag support.  \nTo start using the TypeScript 4.3 nightly builds, just install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share your feedback and let us know if you run into any bugs with TypeScript 4.3.",
    "url": "https://code.visualstudio.com/updates/v1_56#_typescript-4.3",
    "id": 2142
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Workspace Trust  \nIn last milestone's release notes, we shared our work on Workspace Trust specifically for extension authors. We made great progress this milestone for both the extension API and user experiences. That being said, Workspace Trust will remain disabled for this release, but we would love for you to try it out and provide feedback.  \nYou can enable the feature with the following setting `security.workspace.trust.enabled`. Once enabled, you will see the following dialog when opening folders in VS Code.  \n![Workspace Trust startup dialog](images/1_56/trust-dialog.png)  \nThis dialog is important for allowing the user to make a decision early and understand the impact of their decision. Once you understand the feature, you may want to customize when to display the dialog using the `security.workspace.trust.startupPrompt` setting.  \nYou can follow the development of Workspace Trust and provide feedback in [issue #106488](https://github.com/microsoft/vscode/issues/106488).",
    "url": "https://code.visualstudio.com/updates/v1_56#_workspace-trust",
    "id": 2143
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.56 include:  \n* New volume view when you **Clone Repository in Container Volume**.\n* Local terminal warning when connected to a remote.\n* Prompt to install Docker Desktop when starting with the Dev Containers extension.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_56.md).",
    "url": "https://code.visualstudio.com/updates/v1_56#_remote-development",
    "id": 2144
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.26.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0260) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_56#_github-pull-requests-and-issues",
    "id": 2145
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Extension authoring  \n### Define whether your extension supports a virtual workspace  \nThe new [Remote Repositories](#remote-repositories-remotehub) extension lets you open a folder with content directly from GitHub. It does so by providing a [virtual file system](https://github.com/microsoft/vscode/blob/dc8bd9cd7e5231745549ac6218266c63271f48cd/src/vs/vscode.d.ts#L7038) and opening a workspace on it. Other extensions do the same. They serve content from ftp-servers, from cloud storage, or from databases and seamlessly provide these as files to the user in VS Code.  \nThe virtual file system feature has existed for some time, however we have observed that not all extensions can support running in a **virtual workspace**, where the workspace files do not exist physically on disk. For this reason, we have added support for an extension to signal whether it supports running in a virtual workspaces or not. When an extension has opted-out, it will not be activated by VS Code for a virtual workspace and the user will not see errors from this extension.  \nAn extension opts out of a virtual workspace setup in the `package.json` as shown below:  \n```json\n{\n\"capabilities\": {\n\"virtualWorkspaces\": false\n}\n}\n```  \nThe goal is that as many extensions as possible support running in a virtual workspace. However, this is not always possible, particularly when an extension is using components that assume that files are physically present.  The [Virtual Workspaces guide](https://github.com/microsoft/vscode/wiki/Virtual-Workspaces) documents how an extension can support a virtual workspace.  \n**Call to Action**: Please check whether your extension can handle virtual workspaces, and set the `virtualWorkspaces` capability accordingly in your `package.json`.  \nThere will be a transition period until extensions have adopted the new `virtualWorkspaces` property. Until then, we maintain an internal list for extensions that we think should have the `virtualWorkspaces` capability set to `false`. This was done based on an analysis whether the extensions is using the Node.js `fs` module and is therefore accessing the file system directly. However, the extension author is in a much better position to assess whether an extension supports the `virtualWorkspaces` capability. To track the adoption, we have created the following [tracking issue #122836](https://github.com/microsoft/vscode/issues/122836). If your extension is in the list and you have adopted the `virtualWorkspaces` capability, please add a comment in the above issue.",
    "url": "https://code.visualstudio.com/updates/v1_56#_define-whether-your-extension-supports-a-virtual-workspace",
    "id": 2146
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Remote indicator menu  \nExtensions can now contribute to the remote indicator menu:  \n![Remote indicator on the left of the Status bar](images/1_56/remote-indicator.png)  \nThe `statusBar/remoteIndicator` menu contribution point adds a command to the remote indicator menu.  \n```json\n\"contributes\": {\n\"menus\": {\n\"statusBar/remoteIndicator\": [\n{\n\"command\": \"remote-wsl.newWindow\",\n\"when\": \"!remoteName && isWindows\",\n\"group\": \"remote_10_wsl_0_local@1\"\n}\n]},\n\"commands\": [\n{\n\"command\": \"remote-wsl.newWindow\",\n\"title\": \"New WSL Window\",\n\"category\": \"Remote-WSL\"\n}\n]\n}\n```  \nTo allow the menu to sort entries based on the provider, the `group` needs to follow a specific syntax:  \nFor commands from remotes: `remote_${orderOfGroups}_${remoteName)_${internalGrouping}@${orderInGroup}`  \nFor commands from virtual file systems: `virtualfs_${orderOfGroups}_${fileScheme)_${internalGrouping}@${orderInGroup}`  \n* `orderOfGroups` is a 2-digit number used to sort the groups\n* `remoteName` is first part of the remoteAuthority (wsl, ssh,...)\n* `fileScheme` is the URI schema of the virtual file system\n* `internalGrouping` is of free use for each contribution\n* `orderInGroup` is used to sort entries within your group  \nExample: `remote_10_wsl_1-open@1`",
    "url": "https://code.visualstudio.com/updates/v1_56#_remote-indicator-menu",
    "id": 2147
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### iframes now used for most webviews  \nEver since the webview API was first introduced, we've implemented webview using [Electron's webview tag](https://www.electronjs.org/docs/api/webview-tag). On the web however, VS Code's webviews are instead implemented using standard `<iframe>` elements since `<webview>` is not available.  \nWe've been exploring migrating desktop versions of VS Code to use `<iframe>` backed webviews for a while, as this change will give extensions a more consistent webview environment between desktop and web. Migrating off of `<webview>` will also help with our Electron sandboxing efforts.  \nThis iteration, we have switched the majority of webviews over to use iframes. The `<webview>` tag is now only used for webviews that enable the Find widget, and we plan on migrating them to use iframes as well after a bit more engineering work.  \nThis change should not cause issues, however there are some corner cases where the behavior of `<iframe>` and `<webview>` elements differ. Be sure to give your extension a quick test pass to verify that everything works as expected.",
    "url": "https://code.visualstudio.com/updates/v1_56#_iframes-now-used-for-most-webviews",
    "id": 2148
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Easier inspecting of webviews  \nOne clear benefit of `<iframe>`-backed webviews is that they are now much easier to inspect.  \nIf you've worked with webviews previously, you may remember that you had to use the **Developer: Open Webview Developer Tools** command to inspect the contents of your webview. This would open a new developer tools panel just for your webview.  \n![Inspecting a webview in its own developer tools window](images/1_56/webview-inspect-open.png)  \nWith `<iframe>`-backed webviews, you can instead use VS Code's standard developer tools (**Developer: Toggle Developer Tools**) to inspect webviews.  \n![Inspect a webview in the main developer tools window](images/1_56/webview-inspect-in-main.png)  \nThis makes it easy to inspect multiple webviews. The developer tools also no longer close when your webview goes away.  \nIn addition, exceptions and console messages that occur inside of webviews are now printed in the top-level developer tools console.  \n![Exceptions from a webview printed in the main developer tools](images/1_56/webview-inspect-exceptions.png)  \nYou can also use the developer tools to evaluate expressions in a webview's context. After opening VS Code's dev tools with **Developer: Toggle Developer Tools**, open the console, and select the `active-frame` for your webview from the context selector.  \n![Selecting the current scope of the debug console](images/1_56/webview-inspect-debug-scope.png)  \nOverall, being able to use VS Code's standard developer tools should provide a nicer development experience for webviews.",
    "url": "https://code.visualstudio.com/updates/v1_56#_easier-inspecting-of-webviews",
    "id": 2149
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### CodeActionTriggerKind  \nThe new `triggerKind` property on `CodeActionContext` tracks why Code Actions are being requested from a `CodeActionProvider`. The possible values of this property are:  \n* `Invoke` - Code Actions were requested explicitly, either with a keyboard shortcut or command.\n* `Automatic` - Code Actions were requested without explicit user action. This includes requesting Code Actions when the contents of a document change.  \nProviders can use `triggerKind` to return different sets of results depending on how Code Actions are requested. For example, a refactoring Code Action provider that is triggered automatically may only return refactorings for the exact current selection in order to limit how often the Code Action lightbulb shows up. However when Code Actions are explicitly requested, the same provider may automatically expand the current selection to try to show all the refactorings that a user may be interested in at the current location.",
    "url": "https://code.visualstudio.com/updates/v1_56#_codeactiontriggerkind",
    "id": 2150
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Updated codicons  \nWe've added the following new icons to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels):  \n* `arrow-swap`\n* `copy`\n* `debug-line-by-line`\n* `filter-filled`\n* `person-add`\n* `terminal-bash`\n* `terminal-cmd`\n* `terminal-debian`\n* `terminal-linux`\n* `terminal-powershell`\n* `terminal-tmux`\n* `terminal-ubuntu`\n* `wand`  \n![List displaying updated codicons with their names](images/1_56/codicons.png)",
    "url": "https://code.visualstudio.com/updates/v1_56#_updated-codicons",
    "id": 2151
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Keybinding label colors  \nKeybinding labels are shown when there is a keybinding associated with a command. Usages of the keybinding label include (but are not limited to):  \n* The Command Palette\n* The Keyboard Shortcuts editor\n* The Keyboard Shortcuts recorder modal\n* The \"feature contribution\" section of an extension's marketplace page  \nThe following customizations are available:  \n* `keybindingLabel.background`: Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\n* `keybindingLabel.foreground`: Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\n* `keybindingLabel.border`: Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\n* `keybindingLabel.bottomBorder`: Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.",
    "url": "https://code.visualstudio.com/updates/v1_56#_keybinding-label-colors",
    "id": 2152
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Workspace Trust extension API  \nLast milestone, we mentioned the work we had been doing on a feature called Workspace Trust. We asked extension authors to keep an eye on [issue #120251](https://github.com/microsoft/vscode/issues/120251) for updates and we continue to do so. The following information and updates can be found in that issue as well.  \nThis milestone we moved the Workspace Trust extension API from proposed to stable. This allowed us to release the first cut of our guide for onboarding your extension to Workspace Trust. The API is small, so here is a quick look.  \nYou can declare your extension to provide complete or partial or no support in untrusted workspaces using the `untrustedWorkspaces` capability in `package.json`.  \nThe following example declares that the extension is supported completely in untrusted workspaces. In this case, the extension is enabled in untrusted workspaces.  \n```json\n\"capabilities\": {\n\"untrustedWorkspaces\": {\n\"supported\": true\n}\n}\n```  \nThe next example declares that the extension is not supported in untrusted workspaces. In this case, the extension is disabled in untrusted workspaces.  \n```json\n\"capabilities\": {\n\"untrustedWorkspaces\": {\n\"supported\": false\n}\n}\n```  \nThe third option is to declared `limited` support. There are three tools provided to you when you select the `limited` option.  \nFirst, if you have a setting that can be configured in the workspace but requires the workspace to be trusted in order to apply the workspace value, then you can include the setting using `restrictedConfigurations` array property in `untrustedWorkspaces` object. Doing so, VS Code will ignore the workspace value of these restricted settings when your extension reads these settings values using the VS Code [Workspace Configuration](https://code.visualstudio.com/api/references/vscode-api#WorkspaceConfiguration) API.  \nThe following example declares the settings that are restricted in untrusted workspaces.  \n```json\n\"capabilities\": {\n\"untrustedWorkspaces\": {\n\"supported\": \"limited\",\n\"restrictedConfigurations\": [\n\"markdown.styles\"\n]\n}\n}\n```  \nNext, you can also check and listen if the current workspace is trusted or not programmatically using the following API:  \n```ts\nexport namespace workspace {\n/**\n* When true, the user has explicitly trusted the contents of the workspace.\n*/\nexport const isTrusted: boolean;\n/**\n* Event that fires when the current workspace has been trusted.\n*/\nexport const onDidGrantWorkspaceTrust: Event<void>;\n}\n```  \nLastly, you can hide commands or views declaratively with the `isWorkspaceTrusted` context key in your when clauses.  \n**Call to Action**: Please review the \"Workspace Trust Extension Guide\" in [issue #120251](https://github.com/microsoft/vscode/issues/120251) and set the `untrustedWorkspaces.supported` value as appropriate for your extension.",
    "url": "https://code.visualstudio.com/updates/v1_56#_workspace-trust-extension-api",
    "id": 2153
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Testing  \nWe intended to finalize a subset of the new testing APIs this month, however we focused on refinement and deferred finalization to next month, tracked in [issue #122208](https://github.com/microsoft/vscode/issues/122208). API changes made this iteration were primarily:  \n* The `TestProvider` was renamed to the `TestController` and its methods were renamed accordingly.\n* The `TestItem`s are now managed objects called by `vscode.test.createTestItem`.\n* Test results are now created through a standard `vscode.test.createTestResults` method, which can be called within or outside of `TestController.runTests`.  \nWith these changes came a few additional features, such as the ability to display raw test output and for extensions to indicate errors in loading tests. We believe these changes provide a solid foundation for additional capabilities going forward and align more closely to our existing extension APIs.  \nWe also created a [Test Adapter Converter](https://marketplace.visualstudio.com/items?itemName=ms-vscode.test-adapter-converter) extension that allows any adapter working with the existing [Test Explorer UI](https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer) extension to automatically plug into native VS Code testing. The converter extension can be installed manually today, and soon it will integrate with the Test Explorer UI for a seamless migration path for existing users and adapters into native testing.",
    "url": "https://code.visualstudio.com/updates/v1_56#_testing",
    "id": 2154
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Improved transfer of ArrayBuffers to and from webviews  \nIn current versions of VS Code, sending typed arrays to or from a webview has a few quirks:  \n* Typed arrays, such as `UInt8Array`, serialize very inefficiently. This can cause performance issues when you need to transfer many megabytes of data.\n* Sent typed arrays are not recreated as the correct type on the receiving side. If you send a `UInt8Array`, the receiver instead gets a generic object that has the data values of the `UInt8Array`.  \nWhile both of these issues are bugs, we also can't fix them without potentially breaking extensions that rely on the existing behavior. At the same time, there's zero reason a newly written extension would want the current confusing and inefficient behavior.  \nTherefore, we've decided to leave the existing behavior in place for existing extensions but opt new extensions into the more correct behavior. This is done by looking at the `engines` in your extension's `package.json`.  \n```json\n\"engines\": {\n\"vscode\": \"^1.57.0\",\n}\n```  \nIf the extension targets VS Code 1.57+, then typed arrays should be recreated on the receiver side and the transfer of large typed arrays to and from webviews should be much more efficient.  \nPlease test out this behavior and let us know if it either doesn't work as expect or causes unexpected regressions for your existing code.",
    "url": "https://code.visualstudio.com/updates/v1_56#_improved-transfer-of-arraybuffers-to-and-from-webviews",
    "id": 2155
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### TerminalOptions.message  \nThis new proposal allows an extension to display a message in the terminal before the process is launched.  \n```ts\nvscode.window.createTerminal({\nmessage: '\\x1b[3;1mSome custom message\\x1b[0m'\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_56#_terminaloptions.message",
    "id": 2156
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Debug Adapter Protocol  \n### Exception breakpoints are better aligned with regular breakpoints  \nThe `setExceptionBreakpoints` request can now optionally return an array of `Breakpoint`s similar to other `set*Breakpoints` requests. This allows clients to show validation error messages for individual exception breakpoints or filters. Starting with this release, VS Code shows these errors in the Breakpoints view.",
    "url": "https://code.visualstudio.com/updates/v1_56#_exception-breakpoints-are-better-aligned-with-regular-breakpoints",
    "id": 2157
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Restart request can now pick up debug configuration changes  \nThe `restart` request now takes a new optional parameter `arguments`, where clients can pass the latest version of a launch or attach configuration. With this addition, a debug adapter can restart the session with up-to-date values from the debug configuration.",
    "url": "https://code.visualstudio.com/updates/v1_56#_restart-request-can-now-pick-up-debug-configuration-changes",
    "id": 2158
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Disconnect debugger and keep debuggee suspended  \nThe `disconnect` request is used to end a debug session and to either continue execution of the debuggee or to terminate it. There is a new option to keep the debuggee in the suspended state after the debugger disconnects. This makes it possible to pick up debugging with a new session.  \nA debug adapter implementing this feature must announce its support with the `supportSuspendDebuggee` capability. A client can use the feature by passing a new optional argument `suspendDebuggee` to the `disconnect` request.",
    "url": "https://code.visualstudio.com/updates/v1_56#_disconnect-debugger-and-keep-debuggee-suspended",
    "id": 2159
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Engineering  \n### Electron 12 update  \nIn this milestone, we finished the exploration to bundle Electron 12 into VS Code, thanks to everyone involved with testing and self-hosting on Insiders. This is a major Electron release and comes with Chromium 89.0.4389.114 and Node.js 14.16.0.",
    "url": "https://code.visualstudio.com/updates/v1_56#_electron-12-update",
    "id": 2160
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Progress on Electron sandbox  \nThis milestone we continued to make the VS Code window ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation) features.  \nSpecifically:  \n* We changed all of the environmental properties needed for a VS Code window to be accessible in a sandboxed renderer.\n* We are exploring switching to `iframe` elements instead of `webview` for custom editors by selectively enabling the `iframe` in certain cases where possible.\n* We were able to move some of the native module or Node.js requirements we have in the renderer to other processes or remove them entirely.\n* We made `windows-process-tree` context-aware.",
    "url": "https://code.visualstudio.com/updates/v1_56#_progress-on-electron-sandbox",
    "id": 2161
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Service workers now used to load resource in webview  \nIn desktop VS Code, webviews now use service workers to load local resources. Web versions of VS Code have always used service workers for this, but previously desktop VS Code was using an [Electron protocol](https://www.electronjs.org/docs/api/protocol).  \nUsing service workers in the desktop version, lets us better align the behavior of webviews between desktop and web. It also helped us fix a few tricky bugs and let us delete around 1000 lines of code.  \nWhile this change should have no impact on the majority of webview extensions, it could cause problems in a few edge cases:  \n* Extensions that make assumptions about how webviews load resources  \nIf your extension was using the `vscode-webview-resource:` protocol directly or hard coding other assumptions about resource URIs, it may no longer work.  \nInstead, make sure you always use `.asWebviewUri` to create URIs for resources. Also remember that the format of the returned URI may chance in the future.  \n* Extensions that set the `src` of an iframe to point to an HTML file on disk  \nService workers cannot not see this request so we no longer support this. This was already the case on web, and we don't think this pattern is common.  \nThe recommended fix is to not use an iframe and to inline the contents of the HTML file into the webview instead.",
    "url": "https://code.visualstudio.com/updates/v1_56#_service-workers-now-used-to-load-resource-in-webview",
    "id": 2162
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### No implicit override enabled in codebase  \nThe upcoming TypeScript 4.3 release a new [override keyword](https://github.com/microsoft/TypeScript/issues/2000) which tells the compiler that a method in a subclass overrides a method in its superclass. There's also a new `--noImplicitOverride` flag that enforces that all methods that override a method from a superclass must use the `override` keyword:  \n```ts\nclass Foo {\nfoo() {...}\n}\n\nclass SubFoo extends Foo {\nfoo() { ... } // Error when noImplicitOverride is enabled: missing override specifier\n}\n```  \nThe override keyword has a few benefits:  \n* When reading code, it alerts you that a method is overriding one from the base class  \n* It is an error to try to override a method that does not exist on the base class. This can help catch errors caused by renaming a method in a base class but forgetting to update the method name in the subclasses.  \nThis iteration we adopted the override keyword in our codebase and also enabled `--noImplicitOverride` for both core VS Code and all builtin extensions. While we automated the majority of this work, the change did help us catch a few cases where our code was incorrectly re-declaring a property or had unclear inheritance patterns.  \nThis new strictness rule should also help us catch some common programming mistakes in the future.",
    "url": "https://code.visualstudio.com/updates/v1_56#_no-implicit-override-enabled-in-codebase",
    "id": 2163
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### Windows installers consolidated in Windows Package Manager  \nWe have updated our [Windows Package Manager](https://learn.microsoft.com/windows/package-manager/) publishing pipeline to publish our user and system installers for `arm64`, and to adopt the [v1 package manifest schema](https://github.com/microsoft/winget-cli/blob/master/doc/ManifestSpecv1.0.md), allowing us to consolidate the user and system installers for `x86`, `x64` and `arm64` into a single manifest. Users can pick between the user and system installers using the `--scope` parameter when [installing](https://learn.microsoft.com/windows/package-manager/winget/install) a package or using the [winget CLI settings](https://aka.ms/winget-settings#scope).",
    "url": "https://code.visualstudio.com/updates/v1_56#_windows-installers-consolidated-in-windows-package-manager",
    "id": 2164
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Documentation  \n### Updated introductory videos  \nThe VS Code [introductory videos](https://code.visualstudio.com/docs/getstarted/introvideos) have been updated. The videos range from [Getting Started](https://code.visualstudio.com/docs/introvideos/basics) and [Using extensions](https://code.visualstudio.com/docs/introvideos/extend) to VS Code features like [Debugging](https://code.visualstudio.com/docs/introvideos/debugging) and [Version Control](https://code.visualstudio.com/docs/introvideos/versioncontrol).  \n[![Intro to Debugging in VS Code video](images/1_56/intro-video-debugging.png)](https://code.visualstudio.com/docs/introvideos/debugging)",
    "url": "https://code.visualstudio.com/updates/v1_56#_updated-introductory-videos",
    "id": 2165
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### New C++ videos  \nThe [C++ extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) team has created a set of [introductory videos](https://code.visualstudio.com/docs/cpp/introvideos-cpp) explaining how to configure IntelliSense, build, and debug your C++ projects.",
    "url": "https://code.visualstudio.com/updates/v1_56#_new-c++-videos",
    "id": 2166
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n### The Story and Technology Behind VS Code  \nYou can read about the history and underlying technology of VS Code in [this interview](https://www.git-tower.com/blog/developing-for-the-desktop-vscode/) with VS Code engineer, [Ben Pasero](https://twitter.com/benjaminpasero). Ben talks about the early days of VS Code and what it's like to use Electron as an application framework enabling VS Code run on macOS, Windows, and Linux.",
    "url": "https://code.visualstudio.com/updates/v1_56#_the-story-and-technology-behind-vs-code",
    "id": 2167
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2021 Release (1.56)  \n## Partner extensions  \n### Azure Machine Learning  \nThe [Azure Machine Learning](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.vscode-ai) extension enables you to create and manage powerful cloud computing resources for your machine learning workflows. With its remote capabilities, you can seamlessly [connect to your compute resources](https://techcommunity.microsoft.com/t5/azure-ai/supercharge-azure-ml-code-development-with-new-vs-code/ba-p/2260129) in a secure, auditable, and compliant manner.  \n[![Microsoft Azure Machine Learning extension](images/1_56/azure-machine-learning.png)](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.vscode-ai)",
    "url": "https://code.visualstudio.com/updates/v1_56#_azure-machine-learning",
    "id": 2168
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### New Getting Started experience  \nOver the past couple iterations, we have been working on refreshing the welcome page for VS Code, and we're happy to announce that starting this iteration our new welcome page (**Getting Started**) is enabled by default for all users. In this new experience, both the core of VS Code and installed extensions can contribute \"walkthroughs\" to the welcome page, which are designed to help you get started in either VS Code itself or with a new extension. For example, the [Luna Paint](https://marketplace.visualstudio.com/items?itemName=Tyriar.luna-paint) extension contributes a Walkthrough with guides to help understand each component of the image editor.  \n![New welcome page, showing some of the walkthroughs core and extensions can contribute](images/1_57/welcomePageWalkthroughs.gif)  \nAdditionally, once you've completed (or dismissed) all walkthroughs, VS Code rearranges the contents to double the number of recent workspaces accessible with one click.  \n![New welcome page with all walkthroughs dismissed, showing extra recent workspaces entries](images/1_57/welcomePageNoWalkthroughs.png)  \n**Settings**  \n* `workbench.startupEditor` - Controls the default editor to show on startup. The new value `gettingStarted` replaces the old default `welcome`. Some of the other available options include `readme`, `gettingStartedInEmptyWorkbench`, `newUntitledFile`, or `none`.\n* `workbench.welcomePage.walkthroughs.openOnInstall` - Whether to automatically open extension-contributed walkthroughs upon install.  \nThe new page will be called **Getting Started** until we phase the existing Welcome page out entirely.",
    "url": "https://code.visualstudio.com/updates/v1_57#_new-getting-started-experience",
    "id": 2170
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Remote Repositories  \nThe **Remote Repositories** extension was introduced as a [built-in preview feature in 1.56](https://code.visualstudio.com/updates/v1_56#_remote-repositories-remotehub) and is now publicly available, but it is no longer built-in to VS Code so you'll need install it from the [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=github.remotehub).  \nAs a quick recap, the [Remote Repositories extension](https://marketplace.visualstudio.com/items?itemName=github.remotehub) allows you to instantly browse, search, edit, and commit to any GitHub repository directly from within VS Code without having to clone or have the repository locally.  \nIn this iteration, while we were mainly focused on bug fixing and polishing the extension for release, we did add a few new features. You can now see your remote repositories in the **Remote Explorer** to quickly open or compare any uncommitted changes you may have. Additionally, you can apply changes, from the same repository, to the current remote repository allowing you to quickly and easily move uncommitted changes from one branch to another.  \n![Remote Repositories Remote Explorer view](images/1_57/remote-repositories-remote-explorer.png)  \n*Theme: [Amethyst Dark Theme](https://marketplace.visualstudio.com/items?itemName=eamodio.amethyst-theme)*  \nTo learn more about Remote Repositories, you can check out the [Remote Repositories blog post](https://code.visualstudio.com/blogs/2021/06/10/remote-repositories) and [YouTube video](https://www.youtube.com/watch?v=wHsmaXoGIXI).",
    "url": "https://code.visualstudio.com/updates/v1_57#_remote-repositories",
    "id": 2171
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Improved editor drag and drop across windows  \nSupport for dragging editors to other windows was improved in this release. You can now drag diff editors, custom editors, and the entire editor group to another window to open the editors there.  \n![Improved editor drag and drop across windows](images/1_57/editor-dnd.gif)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \n**Note:** If you frequently use this feature, make sure to have Auto Save enabled (`files.autoSave`) so that changes in the one window are automatically reflected in the other window.",
    "url": "https://code.visualstudio.com/updates/v1_57#_improved-editor-drag-and-drop-across-windows",
    "id": 2172
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Removed Cmd+W / Ctrl+W keybinding to close window when no editor is opened  \nWe have gotten [feedback](https://github.com/microsoft/vscode/issues/54492) that users are frustrated when the VS Code window (instance) suddenly closes after having closed the last editor via rapid `Cmd+W` / `Ctrl+W` usages. A quick poll in the team also revealed that many people had unassigned this keybinding for closing the window, so we went ahead and removed `Cmd+W` / `Ctrl+W` as a keybinding to close the window when no editor is opened.  \nYou can easily bring back the keybinding by configuring it as follows in your user `keybindings.json` file:  \n**macOS**  \n```json\n{\n\"key\": \"cmd+w\",\n\"command\": \"workbench.action.closeWindow\",\n\"when\": \"!editorIsOpen && !multipleEditorGroups\"\n}\n```  \n**Windows/Linux**  \n```json\n{\n\"key\": \"ctrl+w\",\n\"command\": \"workbench.action.closeWindow\",\n\"when\": \"!editorIsOpen && !multipleEditorGroups\"\n}\n```  \n**Note:** On all platforms, there is a dedicated assigned keybinding to close the window:  \n* macOS: `Cmd+Shift+W`\n* Linux: `Alt+F4`\n* Windows: `Alt+F4`",
    "url": "https://code.visualstudio.com/updates/v1_57#_removed-cmd+w-/-ctrl+w-keybinding-to-close-window-when-no-editor-is-opened",
    "id": 2173
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Notebook layout customization  \nWe added several notebook layout settings this month to allow users to customize the notebook editor for their workflow. The customizations that are turned on by default are:  \n**Notebook Toolbar**  \nWe added a notebook toolbar in the editor, in which you easily access actions like insert cell, run all cells or switch kernels. The toolbar can be disabled by setting `notebook.globalToolbar` to `false`.  \n![Notebook toolbar](images/1_57/notebook-toolbar.png)  \n**Output toolbar**  \nThe **Clear Cell Outputs** action and the button to pick a different output renderer or mimetype are now combined into a single **...** ellipsis menu next to cell outputs. This can be disabled by setting `notebook.consolidatedOutputButton` to `false`  \n![Notebook output toolbar](images/1_57/notebook-output-toolbar.png)  \n**Focused cell highlight on gutter**  \nVS Code now supports rendering focused cell highlight in the gutter area of a cell, which helps identify which cell is focused when a notebook contains many cells. The setting `notebook.cellFocusIndicator` can be either `gutter`, the new default, or `border` to highlight the entire cell border.  \n![Notebook focus indicator on gutter](images/1_57/notebook-focus-indicator.png)  \n**Show folding icon on mouse over**  \nThe folding icon on Markdown cells is now visible on mouse over rather than visible all the time. You can customize the behavior by setting `notebook.showFoldingControls` to either `mouseover` (default) or `always`.  \n![Notebook show focus icon on mouse over](images/1_57/notebook-show-folding-icon-on-mouse-over.gif)  \nThe full list of notebook layout settings implemented this month are:  \n* `notebook.cellFocusIndicator`: Adds the option for cells to indicate their focused state with a colored bar on the side of the cell (`gutter`), similar to Jupyter.\n* `notebook.cellToolbarVisibility`: Determines whether the cell toolbar should appear when the cell is focused, or hovered. The default is to only show up when a cell is focused.\n* `notebook.compactView`: When enabled, cells are rendered in a more compact style with less empty space. It is enabled by default.\n* `notebook.consolidatedOutputButton`: The **Clear Cell Outputs** action and the button to pick a different output renderer or mimetype have been combined into a single **...** ellipsis menu next to cell outputs. The new menu can be disabled with this setting.\n* `notebook.consolidatedRunButton`: There are two new actions, **Execute Above Cells** and **Execute Cell and Below**. They will appear in the cell toolbar by default, but enabling this setting moves them to a new context menu next to the execute button.\n* `notebook.dragAndDropEnabled`: Disables drag and drop for cells. You can still rearrange cells using the commands (`kbstyle(Alt+Up)`/`kbstyle(Alt+Down)` by default).\n* `notebook.globalToolbar`: Adds a toolbar to the top of the notebook editor.\n* `notebook.insertToolbarLocation`: Controls whether the buttons to insert new cells appear between cells, in the toolbar, both, or are hidden.\n* `notebook.showCellStatusBar`: This setting has a new option, `visibleAfterExecute`, which will hide the cell Status bar to save space until a cell is executed. Once it's executed, it will become visible so the user can review the execution details.\n* `notebook.showFoldingControls`: Controls whether the folding chevron that appears on Markdown headers is always visible, or only visible on mouseover.\n* `notebook.editorOptionsCustomizations`: Lets the user customize the cell editor settings in the notebook.  \nThe image below shows the effects of several of these settings (toolbar at the top, gutter highlight, output **...** button):  \n![Notebook layout changes](images/1_57/notebook-layout.png)",
    "url": "https://code.visualstudio.com/updates/v1_57#_notebook-layout-customization",
    "id": 2174
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Updated Quick Pick & suggest widget colors  \nWe've update the focus state in the Quick Pick and suggest widget to better align with our tree widget styles. This introduces a few new color tokens that control focus foreground:  \n* `list.focusHighlightForeground`\n* `quickInputList.focusForeground`\n* `editorSuggestWidget.selectedForeground`  \n![Quick Pick style in light theme](images/1_57/quick-pick-light.png)  \n![Suggest style in light theme](images/1_57/suggest-light.png)  \n*Icon Theme: [Fluent Icons](https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons)*",
    "url": "https://code.visualstudio.com/updates/v1_57#_updated-quick-pick-&-suggest-widget-colors",
    "id": 2175
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Updated Touch Bar icons for macOS  \nWe've updated our macOS Touch Bar icons so they align with our updated iconography style.  \n![macOS Touch Bar icons](images/1_57/tb-default.png)\n_Default view_  \n![macOS Touch Bar icons while debugging with more controls](images/1_57/tb-debugging.png)\n_While debugging_",
    "url": "https://code.visualstudio.com/updates/v1_57#_updated-touch-bar-icons-for-macos",
    "id": 2176
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Context menus for webviews  \nVS Code now supports showing a simple context menu inside webviews, such as the Markdown preview, release notes, and Extension Details pages:  \n![A context menu in a webview](images/1_57/webview-context-menu.png)  \nThis context menu currently contains actions for copy and pasting text. We may add additional actions to the menu in the future.  \nIf this context menu is interfering with a webview in your extension, you can prevent it from showing up by calling `preventDefault` on the `contextmenu` event:  \n```js\ndocument.body.addEventListener('contextmenu', e => {\ne.preventDefault(); // cancel the built-in context menu\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_context-menus-for-webviews",
    "id": 2177
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Editor  \n### Suggestion preview  \nWith the new setting `editor.suggest.preview` enabled, a preview of the selected suggestion or snippet is shown at the cursor position.  \n![Suggestion preview showing smart completions for the letter 'i'](images/1_57/suggest-preview.gif)  \n*Theme: Dark+ (default dark)*",
    "url": "https://code.visualstudio.com/updates/v1_57#_suggestion-preview",
    "id": 2178
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Hide deprecated suggestions  \nThere is a new setting `editor.suggest.showDeprecated`, which defaults to `on`, but when turned `off`, suggestions will not show items that are marked as deprecated.",
    "url": "https://code.visualstudio.com/updates/v1_57#_hide-deprecated-suggestions",
    "id": 2179
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Integrated Terminal  \n### Terminal tabs  \nTerminal tabs were introduced as a [preview feature in 1.56](https://code.visualstudio.com/updates/v1_56#_terminal-tabs) and are now enabled by default. The new tabs view will only show by default when there are at least two terminals. For single terminals, the tab is \"inlined\" into the panel title. This also introduces the concept of terminal statuses such as whether a task is running, succeeded, or failed:  \n![Single inlined terminal tab, terminal tabs with status, and collapsed terminal tabs](images/1_57/tabs-overview.png)  \nBelow are some of the highlights in this release:  \n* A tab's color can be changed to enable quick navigation and differentiation between them.\n* Tabs can be dragged and dropped to allow for rearranging.<br>![drag and drop](images/1_57/tabs-drag-and-drop.gif)\n* Dragging a tab in a terminal group into the empty area will remove it from the group (unsplit the terminal, also available via the context menu).<br>![unsplit](images/1_57/tabs-unsplit.gif)\n* Dragging a tab into the main terminal area allows joining a group (also available via the context menu).<br>![dragging a terminal tab to join a tab group](images/1_57/tabs-joining.gif)\n* `kbstyle(Alt)` now splits the terminal when clicking on a tab, the **+** button, or the single tab. The same works for middle-click to kill a terminal.<br>![split terminal buttons](images/1_57/tabs-split.gif)\n* The inline actions won't be shown unless the tabs list is sufficiently large to avoid accidentally splitting/killing terminals.\n* When killing a terminal such that there will only be one, the tabs list won't hide until the mouse leaves the view.  \nIf you're not a fan of the new UX, you can go back to the dropdown by setting `\"terminal.integrated.tabs.enabled\": false`, the plan is to continue to support this as an option going forward.",
    "url": "https://code.visualstudio.com/updates/v1_57#_terminal-tabs",
    "id": 2180
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Terminal profile improvements  \nThe terminal profile system has many improvements in this release, here are some highlights:  \n* `defaultProfile` will be respected if the terminal is restored upon launching VS Code and will be used for tasks and debugging.\n* Intellisense now works in `settings.json` for `icon` and `defaultProfile`.\n* `overrideName` now works for the default profile.\n* `defaultProfile` can now be set in workspace settings. This is also now controlled by the new Workspace Trust feature.\n* If `defaultProfile` and `shell` or `shellArgs` settings are used, you will now be asked to migrate the deprecated settings to the profiles system.\n* `color` can now be set on a profile.",
    "url": "https://code.visualstudio.com/updates/v1_57#_terminal-profile-improvements",
    "id": 2181
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Title sequence support  \nThe setting `terminal.integrated.experimentalUseTitleEvent` setting has been promoted to stable as `terminal.integrated.titleMode`. By default, this setting will be `executable`, which names terminals based on the detected foreground process:  \n![Running 'git show' will result in the terminal's title changing to 'git'](images/1_57/terminal-title-executable.png)  \nWhen this is set to `sequence`, the title will be based on what the shell sets it to. This needs shell support to work, an example of this in action is oh-my-zsh's default prompt, which shows additional information about the session:  \n![The oh-my-zsh default prompt will show the computer's name and current working directory](images/1_57/terminal-title-sequence.png)",
    "url": "https://code.visualstudio.com/updates/v1_57#_title-sequence-support",
    "id": 2182
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Improved launching with clean environment  \nThe setting `terminal.integrated.inheritEnv` has been available since the [v1.36](https://code.visualstudio.com/updates/v1_36#_launch-terminals-with-clean-environments) but the implementation had some flaws where it could fail due to permissions issues on Linux and may not work as expected on macOS.  \nDue to improvements to how VS Code sets up its underlying environment, it's now possible to access the initial environment it was launched with, which is how most terminals work. When `inheritEnv` is set to `true`, VS Code will now use the initial environment and, when `false`, use the sourced \"shell environment\". This setting can help the terminal act more like a regular terminal. However, you may run into problems if your profile/rc configuration is not set up correctly.",
    "url": "https://code.visualstudio.com/updates/v1_57#_improved-launching-with-clean-environment",
    "id": 2183
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Native line wrapping support on Windows  \nLine wrapping in the terminal drives task problem matchers and link detection. Historically, the Windows terminal has used a heuristic to flag lines as wrapped since the emulation technology that simulates a Unix pty didn't support wrapping. This changed on recent versions of Windows, and when updating to Windows 10 21376+ (currently Insiders only), this heuristic will be disabled and wrapped lines should work correctly as in Windows Terminal.",
    "url": "https://code.visualstudio.com/updates/v1_57#_native-line-wrapping-support-on-windows",
    "id": 2184
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Tasks  \n### Task status on terminal tab  \nThe status of a task is now shown in its terminal tab. For background tasks, the status is only shown when there is an associated problem matcher.  \n![Task status on a terminal tab](images/1_57/terminal-task-status.png)",
    "url": "https://code.visualstudio.com/updates/v1_57#_task-status-on-terminal-tab",
    "id": 2185
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Automatically close task terminals  \nThe task `presentation` property has a new `close` property. Setting `close` to `true` will cause the terminal to close when the task exits.  \n```json\n{\n\"type\": \"shell\",\n\"command\": \"node build/lib/preLaunch.js\",\n\"label\": \"Ensure Prelaunch Dependencies\",\n\"presentation\": {\n\"reveal\": \"silent\",\n\"close\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_automatically-close-task-terminals",
    "id": 2186
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Debugging  \n### JavaScript debugging  \nAs usual, the complete list of changes can be found in the [vscode-js-debug changelog](https://github.com/microsoft/vscode-js-debug/blob/main/CHANGELOG.md#v157-may-2021).  \n**Edge Developer Tools integration**  \nThe JavaScript debugger integrates with the Microsoft Edge Developer Tools to provide a DOM, style, and network inspector for browser debugging, accessible via the new \"Inspect\" icon in the debug toolbar.  \n![Debugger inspect button](images/1_57/debug-inspect-button.png)  \nThe short video below demonstrates selecting the \"Inspect\" button and navigating through elements in Edge DevTools.  \n![Demonstration of clicking the \"Inspect\" icon and clicking through elements in Edge](images/1_57/js-debug-edge.gif)\n*Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*  \nIf you aren't already using [Microsoft Edge](https://aka.ms/getedge) for browser debugging, you can switch to it by replacing `\"type\": \"chrome\"` or `\"type\": \"pwa-chrome\"` with `\"type\": \"pwa-msedge\"` in your `launch.json`. This is also supported in [Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor) applications by setting `\"browser\": \"edge\"` in its launch config.  \n**Support for renamed identifiers in sourcemaps**  \nA long-requested feature, the JavaScript debugger now supports renamed identifiers in sourcemaps. This is particularly useful when debugging minified code:  \n![A screenshot paused at a breakpoint. Minified code is being run, but the variables, watch, and debug console views show that variables can be accessed by the original names.](images/1_57/js-debug-renames.png)\n*Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*  \nRenamed variables are supported in the Variables view, Watch view, and in the Debug Console REPL. You can check whether your tooling emits renames by looking for a non-empty \"names\" array in the sourcemap files it generates.",
    "url": "https://code.visualstudio.com/updates/v1_57#_javascript-debugging",
    "id": 2187
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Reveal hit breakpoint in the BREAKPOINTS view  \nWhen a breakpoint gets hit, VS Code now selects and reveals it in the BREAKPOINTS view. This should make it easier to understand which exact breakpoint has caused the program to break.  \nCurrently only the JS-debug extension supports this feature, but we expect other debug extensions to follow soon.  \n![As the user steps in the program, a breakpoint that got hit is selected and revealed in the BREAKPOINTS view](images/1_57/reveal-breakpoint.gif)",
    "url": "https://code.visualstudio.com/updates/v1_57#_reveal-hit-breakpoint-in-the-breakpoints-view",
    "id": 2188
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Languages  \n### TypeScript 4.3.2  \nVS Code now ships with TypeScript 4.3.2. This major update includes many TypeScript language improvements, along with many improvements and bug fixes for JavaScript and TypeScript tooling.  \nYou can read more about TypeScript 4.3 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-3/).",
    "url": "https://code.visualstudio.com/updates/v1_57#_typescript-4.3.2",
    "id": 2189
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### JSDoc @link support  \nVS Code now supports [JSDoc @link tags](https://jsdoc.app/tags-inline-link.html) in JavaScript and TypeScript comments. These let you create clickable links to a symbol in your documentation:  \n![Navigating code using JSDoc @link tags](images/1_57/js-link.gif)  \nJSDoc `@link` tags are written as: `{@link symbolName}`. You can also optionally specify text to be render in place of the symbol name: `{@link class.property Alt text}`.  \n`@link` is supported in hovers, suggestions, and signature help. We have also updated the VS Code extensibility type declaration file `vscode.d.ts` to use `@link`.",
    "url": "https://code.visualstudio.com/updates/v1_57#_jsdoc-@link-support",
    "id": 2190
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Completions in import statements  \nAuto import in JavaScript and TypeScript automatically add imports when you accept a suggestion. With VS Code 1.57, they now also work when writing an import statement itself:  \n![Auto imports in an import statement](images/1_57/ts-import.gif)  \nThis can be a time saver if you ever need to manually add an import.",
    "url": "https://code.visualstudio.com/updates/v1_57#_completions-in-import-statements",
    "id": 2191
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Go to Definition for non JS/TS files  \nMany modern JavaScript bundlers and frameworks use `import` statements to import assets such as images and stylesheets. We now support navigating through these imports with **Go to Definition**:  \n![Navigating to a non-JS/TS import](images/1_57/js-go-def.gif)  \nThis is probably most useful when using `Ctrl`/`Cmd` click to navigate through your code.",
    "url": "https://code.visualstudio.com/updates/v1_57#_go-to-definition-for-non-js/ts-files",
    "id": 2192
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Sort imports source action  \nThe **Sort imports** Code Action for JavaScript and TypeScript sorts your imports. Unlike **Organize imports** however, it does not remove any unused imports.  \nYou can also enable sorting of imports on save by setting:  \n```json\n\"editor.codeActionsOnSave\": {\n\"source.sortImports\": true\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_sort-imports-source-action",
    "id": 2193
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Infer function return type Quick Fix  \nThe **Infer function return type** refactoring for TypeScript adds explicit return type annotations to functions:  \n![The Infer function return type refactoring in action](images/1_57/ts-infer-return.gif)  \nThis is useful if you want to add more explicit typings. This refactoring can also save time when you want to extract the return type to a named type/interface, or if you need to modify a function's return type.",
    "url": "https://code.visualstudio.com/updates/v1_57#_infer-function-return-type-quick-fix",
    "id": 2194
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Prompt to disable TS Server logging  \nVS Code now prompts you if you have TypeScript server logging enabled for a prolonged period of time:  \n![TS server logging enabled notification](images/1_57/ts-log-notification.png)  \nLogging can significantly impact performance so it's best to keep it disabled unless you are actively trying to diagnose an issue.",
    "url": "https://code.visualstudio.com/updates/v1_57#_prompt-to-disable-ts-server-logging",
    "id": 2195
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Contributions to extensions  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.57 include:  \n* Control desired protocol for forwarded ports.\n* Optional watch for forwarded port collision.\n* Dev Containers supports Workspace Trust security feature.\n* Better environment variable detection in dev containers.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_57.md).",
    "url": "https://code.visualstudio.com/updates/v1_57#_remote-development",
    "id": 2196
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Extension authoring  \n### Notebook API  \nWe have finalized most of the notebooks API. The API is structured into three separate parts:  \n1. The `NotebookSerializer` API that, in combination with the `notebooks` contribution point, enables VS Code to open, modify, and save notebook documents.\n1. Notebook renderers that present cell output. They are added via the `notebookRenderer` contribution point of your extensions `package.json` file.\n1. The `NotebookController` API to generate output for code cells.  \nSample of a simple notebook serializer and an echo controller. The serializer uses `JSON.parse` and `stringify` with special handling for empty files. The controller returns the upper-case variant of the cell text - once as plain text and once as html.  \n```ts\n// serialize/deserialize notebook\nvscode.workspace.registerNotebookSerializer(\n'echobook',\nnew class implements vscode.NotebookSerializer {\n// serializer is relying on JSON.parse/stringify\ndeserializeNotebook(content: Uint8Array) {\nreturn JSON.parse(new TextDecoder().decode(content) || '{\"cells\":[]}');\n}\nserializeNotebook(data: vscode.NotebookData) {\nreturn new TextEncoder().encode(JSON.stringify(data));\n}\n})\n\n// notebook controller\nvscode.notebooks.createNotebookController(\n'myId',\n'echobook',\n'Echo',\n(cells, _notebook, controller) => {\nfor (let cell of cells) {\n// execution means to echo in upper-case, once as plain text and once as html\nconst execution = controller.createNotebookCellExecution(cell);\nexecution.start();\nconst echo = cell.document.getText().toUpperCase();\nconst textItem = vscode.NotebookCellOutputItem.text(echo, 'text/plain');\nconst htmlItem = vscode.NotebookCellOutputItem.text(`<b>${echo}</b>`, 'text/html');\nconst output = new vscode.NotebookCellOutput([textItem, htmlItem]);\nexecution.replaceOutput(output)\nexecution.end(true);\n}\n});\n```  \nThe example statically registers the notebook type for `*.echobook` files. Also, VS Code will emit an `onNotebook:echobook` activation event whenever such notebooks are opened.  \n```json\n\"contributes\": {\n\"notebooks\": [{\n\"type\": \"echobook\",\n\"displayName\": \"Echobook\",\n\"selector\": [{\n\"filenamePattern\": \"*.echobook\"\n}]\n}]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_notebook-api",
    "id": 2197
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Status bar item 'id' and 'name' properties  \nWe finalized the API for `StatusBarItem` identifier and name properties. The identifier can be passed from the new overload of the `createStatusBarItem` method while the `name` property can change dynamically on the `StatusBarItem` itself.  \nThese new properties are used for the context menu on the Status bar to give individual entries a name and for allowing a user to show and hide entries. If you do not provide these properties, the menu will aggregate all status entries from one extension under a single entry.  \n![Status bar item menu](images/1_57/status-menu.png)  \nIf your extension contributes to the Status bar, consider updating to the new API.",
    "url": "https://code.visualstudio.com/updates/v1_57#_status-bar-item-'id'-and-'name'-properties",
    "id": 2198
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Print a message in new terminals  \nWhen creating a terminal using `window.createTerminal`, it's now possible to set a message via `TerminalOptions.message` that is printed at the top of the terminal. This message supports ANSI escape sequences to enable text styles:  \n```ts\nvscode.window.createTerminal({\nname: `My terminal`,\nmessage: '\\x1b[3;1mSome custom message\\x1b[0m'\n});\n```  \n![Terminal displaying a custom message](images/1_57/terminal-api-message.png)",
    "url": "https://code.visualstudio.com/updates/v1_57#_print-a-message-in-new-terminals",
    "id": 2199
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### New theme colors for inline values  \nNew colors were added to theme the debugger inline values:  \n* `editor.inlineValuesBackground`: color for the debug inline value foreground text\n* `editor.inlineValuesForeground`: color for the debug inline value background.  \nAs a reminder, inline values are shown during debugging for debug extensions that have inline value providers registered or if the setting `debug.inlineValues` is `true`.  \n![Debug inline values are shown with the foreground and background color customized](images/1_57/inline-values.png)",
    "url": "https://code.visualstudio.com/updates/v1_57#_new-theme-colors-for-inline-values",
    "id": 2200
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### vscode-webview.d.ts  \nThe newly published `@types/vscode-webview` package adds typings for the API [that VS Code exposes inside of webviews](https://code.visualstudio.com/api/extension-guides/webview#passing-messages-from-a-webview-to-an-extension).  \nYou can install these types with `npm install --save-dev @types/vscode-webview`. If the webview types are not being picked up in your project, try adding them to the `typeAcquisition` section of your `jsconfig` / `tsconfig`:  \n```json\n\"typeAcquisition\": {\n\"include\": [\n\"@types/vscode-webview\"\n]\n}\n```  \nOr add a triple-slash reference in your code:  \n```js\n///<reference types=\"@types/vscode-webview\"/>\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_vscode-webview.d.ts",
    "id": 2201
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Improved webview array buffer transfers  \nIn previous versions of VS Code, sending typed arrays to or from a webview had a few quirks:  \n* Typed arrays, such as `UInt8Array`, serialize inefficiently. This can cause performance issues when you need to transfer many megabytes of data.\n* Sent typed arrays are not recreated as the correct type on the receiving side. If you send a `UInt8Array`, the receiver instead gets a generic object that has the data values of the `UInt8Array`.  \nWhile both of these issues are bugs, we also can't fix them without potentially breaking extensions that rely on the existing behavior. At the same time, there's zero reason a newly written extension would want the current confusing and inefficient behavior.  \nTherefore, we've decided to leave the existing behavior in place for existing extensions but move new extensions onto the more correct behavior. This is done by looking at the `engines` value in your extension's `package.json`.  \n```json\n\"engines\": {\n\"vscode\": \"^1.57.0\",\n}\n```  \nIf the extension targets VS Code 1.57+, then typed arrays should be recreated on the receiver side and the transfer of large typed arrays to and from webviews should be much more efficient.",
    "url": "https://code.visualstudio.com/updates/v1_57#_improved-webview-array-buffer-transfers",
    "id": 2202
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### parentSession on Debug Sessions  \nSome time ago, VS Code added support for hierarchical debug sessions, but no information about the hierarchy was exposed in the extension APIs. To address this, there is a new property on the `DebugSession` interface that references the parent session, if any. A session's parent will never change.  \n```ts\nexport interface DebugSession {\n/**\n* The parent session of this debug session, if it was created as a child.\n* @see DebugSessionOptions.parentSession\n*/\nreadonly parentSession?: DebugSession;\n\n// ...\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_parentsession-on-debug-sessions",
    "id": 2203
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Improved VS Code Insiders version targeting  \nWhen working on extensions that use proposed APIs, it's possible that a new Insiders build is released with breaking changes. In order to provide a more seamless transition for users, you can now target Insiders versions precisely with a date tag. For example, setting `engines.vscode` to `^1.56.0-20210428` will target any VS Code 1.56 (or newer) build that was created on or after 0:00 UTC, April 28, 2020. This allows you to safely release post-dated extension updates before an upcoming Insiders version is released.  \n```json\n\"engines\": {\n\"vscode\": \"^1.56.0-20210428\",\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_improved-vs-code-insiders-version-targeting",
    "id": 2204
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Tree hovers support command URIs  \nWhen a `TreeItem` has a trusted Markdown tooltip, that tooltip can contain commands of the format `[this is a link](command:workbench.action.quickOpenView)`. This follows the same format as all other places where command links are supported in Markdown.",
    "url": "https://code.visualstudio.com/updates/v1_57#_tree-hovers-support-command-uris",
    "id": 2205
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Terminal profile contributions  \nThis API will enable extensions to contribute to the terminal profile system. An extension needs to do a few things to get this to work. First contribute the profile in the `package.json`:  \n```json\n\"contributes\": {\n\"terminal\": {\n\"profiles\": [\n{\n\"title\": \"Profile from extension\",\n\"id\": \"my-ext.terminal-profile\",\n\"icon\": \"lightbulb\"\n}\n]\n},\n}\n```  \nThen activate the extension on the new `onTerminalProfile` activation event:  \n```json\n\"activationEvents\": [\n\"onTerminalProfile:my-ext.terminal-profile\"\n]\n```  \nLastly, register the provider in the activation event:  \n```ts\nvscode.window.registerTerminalProfileProvider('my-ext.terminal-profile', {\nprovideProfileOptions(token) {\nreturn {\nname: 'Profile from extension',\nshellPath: 'cmd.exe'\n};\n}\n});\n```  \nIf the proposed API is enabled, the extension contributed profile should show up in the profiles list:  \n![Extension contributed profile is displayed in the profiles list](images/1_57/terminal-api-profile.png)",
    "url": "https://code.visualstudio.com/updates/v1_57#_terminal-profile-contributions",
    "id": 2206
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### iconPath support in terminal options  \nThe standard `iconPath` type is supported on `TerminalOptions` and `TerminalExtensionOptions` to set the terminal's icon, which is displayed on the terminal's tab:  \n```ts\nreadonly iconPath?: Uri | { light: Uri; dark: Uri } | ThemeIcon;\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_iconpath-support-in-terminal-options",
    "id": 2207
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Change title of Pseudoterminal  \nThe new event `Pseudoterminal.onDidChangeName` enabled control of Pseudoterminal-based terminals:  \n```ts\nconst writeEmitter = new EventEmitter<string>();\nconst nameEmitter = new EventEmitter<string>();\nconst pty = {\nonDidWrite: writeEmitter.event,\nopen: () => writeEmitter.fire('Type to change the title of the terminal'),\nclose: () => { /* noop*/ },\nhandleInput: (data: string) => nameEmitter.fire(data)\n};\nconst terminal = vscode.window.createTerminal({\nname: `My Terminal`,\npty\n});\nterminal.show();\n```",
    "url": "https://code.visualstudio.com/updates/v1_57#_change-title-of-pseudoterminal",
    "id": 2208
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Enable file system providers to declare a file as readonly  \nFile system providers can now mark individual files as readonly via a new `permissions` property on the `FileStat` by setting the value of the property to `FilePermission.Readonly`. Readonly files are not editable.  \n**Note:** If all files should be treated readonly, you can use the existing `isReadonly` option when calling `registerFileSystemProvider`.",
    "url": "https://code.visualstudio.com/updates/v1_57#_enable-file-system-providers-to-declare-a-file-as-readonly",
    "id": 2209
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Support workspace URIs in asExternalUri  \nThe pre-existing `vscode.env.asExternalUri` API now supports [handling workspaces URIs](https://github.com/microsoft/vscode/issues/124263). This allows extension authors to create system-wide URIs that directly open the given workspace.  \nFor example:  \n```ts\nconst uri = await vscode.env.asExternalUri('file:///Users/john/work/code');\n```  \nThe resulting `uri` can be opened by the operating system and VS Code will open that workspace.",
    "url": "https://code.visualstudio.com/updates/v1_57#_support-workspace-uris-in-asexternaluri",
    "id": 2210
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Engineering  \n### Progress for Electron sandbox support  \nThis milestone we continued to make the VS Code window ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation) features.  \nSpecifically:  \n* We removed Node.js dependencies from more code that is used in the renderer.\n* We continued investigating dropping `webview` usage entirely and switching to `iframe` for our custom views and editors.",
    "url": "https://code.visualstudio.com/updates/v1_57#_progress-for-electron-sandbox-support",
    "id": 2211
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n## Documentation  \n### VS Code at Build 2021  \nIf you missed the [Microsoft Build 2021](https://mybuild.microsoft.com/) developer event, you can still watch the sessions on-demand. Check out the [Visual Studio Code at Build 2021](https://code.visualstudio.com/blogs/2021/06/02/build-2021) blog post, where we've put together a list of sessions we think will be of interest to VS Code users.  \n[![What's New in VS Code Build 2021 session on YouTube](images/1_57/whats-new-in-vs-code.png)](https://youtu.be/eKJftIqv8Uo)",
    "url": "https://code.visualstudio.com/updates/v1_57#_vs-code-at-build-2021",
    "id": 2212
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### Browser debugging  \nA new topic [Browser debugging in VS Code](https://code.visualstudio.com/docs/nodejs/browser-debugging) describes the built-in debugging support for the Edge and Chrome browsers. You can configure VS Code to either launch a new browser debugging session (via the **Debug: Open Link** command) or attach to a running browser.",
    "url": "https://code.visualstudio.com/updates/v1_57#_browser-debugging",
    "id": 2213
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2021 Release (1.57)  \n### PyTorch  \nThere is a new topic on how to use the [PyTorch](https://pytorch.org) machine learning framework within VS Code. In the [PyTorch support in VS Code](https://code.visualstudio.com/docs/datascience/pytorch-support) article, you'll learn how Jupyter Notebooks can be extended with PyTorch and [TensorFlow](https://www.tensorflow.org) data types.  \n[![PyTorch logo](images/1_57/pytorch-logo-dark.png)](https://pytorch.org)",
    "url": "https://code.visualstudio.com/updates/v1_57#_pytorch",
    "id": 2214
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Settings editor  \nThis iteration adds support to the Settings editor for settings objects with a fixed number of Boolean properties, by rendering the properties as a list of checkboxes.  \n![Settings editor Boolean object renderer demo](images/1_58/bool-object-renderer.gif)  \nThis iteration also adds additional support for arrays of enumerations, by using dropdowns in editing mode instead of plain textboxes.  \n![Settings editor enum array renderer demo](images/1_58/enum-array-renderer.gif)",
    "url": "https://code.visualstudio.com/updates/v1_58#_settings-editor",
    "id": 2216
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Transient workspaces  \nThere is now a new flavor of workspace, called a \"transient\" workspace, that behaves differently than usual workspaces, specifically:  \n* Restarting or reloading VS Code will not attempt to open the workspace again.\n* Workspaces set as transient do not show up in the list of recently opened workspaces.  \nDesignate a transient workspace by adding the `transient` property set to `true` in the workspace `.code-workspace` file:  \n```json\n{\n\"folders\": [],\n\"transient\": true\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_58#_transient-workspaces",
    "id": 2217
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Settings Sync  \nThere is now a **Troubleshoot** view for Settings Sync that contains all logs and the last sync states. You can access this view by running the command **Settings Sync: Show Synced Data** and enabling it by opening the **Views** submenu and checking **Troubleshoot**:  \n![Settings Sync Troubleshoot command in the Settings Sync view menu](images/1_58/settings-sync-troubleshoot.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_58#_settings-sync",
    "id": 2218
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Search max results setting  \nThere is a new setting, `search.maxResults`, which lets you set the maximum number of text search results. The default is 20,000, up from 10,000 previously. You may see some slowness when loading a very large number of search results.",
    "url": "https://code.visualstudio.com/updates/v1_58#_search-max-results-setting",
    "id": 2219
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Integrated Terminal  \n### Terminals in the editor area  \nTerminals can now be created in or moved to the editor area, enabling a multi-dimensional grid layout that persists and remains visible regardless of panel state.  \nTo use terminals in the editor area, there are several options:  \n* Create via the **Create Terminal in Editor Area** command.\n* Drag and drop a terminal from the tabs list to the editor.\n* Run **Move Terminal into Editor Area** with a terminal focused.\n* Select **Move into Editor Area** on the terminal tab context menu.  \n![4 terminals in the editor area are laid out in a 2 by 2 grid](images/1_58/terminal-editor-grid.png)  \nThe new `terminal.integrated.defaultLocation` setting can be set to `editor` to direct newly created terminals to the editor area by default.",
    "url": "https://code.visualstudio.com/updates/v1_58#_terminals-in-the-editor-area",
    "id": 2220
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Explicitly setting canvas renderer  \nIn a prior iteration, we enabled the WebGL terminal renderer by default and replaced the `terminal.integrated.rendererType` setting with the simpler `terminal.integrated.gpuAcceleration`. Unfortunately, some machines see degraded experience with WebGL and the only option available was to disable GPU acceleration all together and move to the much slower DOM-based renderer. `terminal.integrated.gpuAcceleration` can now be set explicitly to `canvas`, which may be preferable for these environments.",
    "url": "https://code.visualstudio.com/updates/v1_58#_explicitly-setting-canvas-renderer",
    "id": 2221
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Hide link hovers  \nThe new `terminal.integrated.showLinkHover` setting lets you disable link hovers in the terminal. This can be useful if you find hovers on terminal links distracting.",
    "url": "https://code.visualstudio.com/updates/v1_58#_hide-link-hovers",
    "id": 2222
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Editor  \n### Editor scroll bar customization  \nThere are new settings to customize the editor's scroll bars:  \n* Control scroll bar visibility using `editor.scrollbar.horizontal` and `editor.scrollbar.vertical`.\n* Change their thickness with `editor.scrollbar.horizontalScrollbarSize` and `editor.scrollbar.verticalScrollbarSize`.\n* Determine whether clicking scrolls by page or jumps to the click position (default behavior) using `editor.scrollbar.scrollByPage`.  \nBelow the editor's vertical scroll bar width is set to 30 pixels.  \n![Vertical editor scroll bar width set to 30 pixels](images/1_58/scroll-bar-width.png)",
    "url": "https://code.visualstudio.com/updates/v1_58#_editor-scroll-bar-customization",
    "id": 2223
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Languages  \n### Math formula rendering in the Markdown preview  \nVS Code's [built-in Markdown preview](https://code.visualstudio.com/docs/languages/markdown#_markdown-preview) can now render math equations using [KaTeX](https://katex.org).  \n![Math rendering in the built-in Markdown preview](images/1_58/markdown-math.png)  \nInline math equations are wrapped in single dollar signs:  \n```markdown\nInline math: $x^2$\n```  \nYou can create a math equation block with double dollar signs:  \n```markdown\nMath block:\n\n$$\n\\displaystyle\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2\n\\leq\n\\left( \\sum_{k=1}^n a_k^2 \\right)\n\\left( \\sum_{k=1}^n b_k^2 \\right)\n$$\n```  \nYou can set `\"markdown.math.enabled\": false` to disable this feature.",
    "url": "https://code.visualstudio.com/updates/v1_58#_math-formula-rendering-in-the-markdown-preview",
    "id": 2224
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Markdown math formula syntax highlighting  \nVS Code also now supports highlighting of math equations in Markdown source:  \n![Syntax highlighting of a math equation in a Markdown file](images/1_58/markdown-math-highlighting.png)  \nThis works both in normal Markdown files and in Markdown cells inside notebooks.",
    "url": "https://code.visualstudio.com/updates/v1_58#_markdown-math-formula-syntax-highlighting",
    "id": 2225
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### TypeScript 4.3.5  \nWe now bundle TS 4.3.5. This minor update fixes a few important bugs, including [auto imports not working in JSX](https://github.com/microsoft/TypeScript/issues/44657).",
    "url": "https://code.visualstudio.com/updates/v1_58#_typescript-4.3.5",
    "id": 2226
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Debugging  \n### Remember chosen environment per file  \nWhen debugging is started without a `launch.json` file, VS Code looks at the active editor and based on the language mode of the editor decides what debug extension to use. However, for some languages, multiple debug extensions are possible, and in that case, VS Code prompts you to choose one of them. To make debugging smoother, VS Code now remembers the chosen debugger per file, so that the next time you start debugging, the session starts without any prompts.  \nIn the short video below, the user selects the Node.js debug environment for debugging a single JavaScript file and that choice is remembered when a new debug session starts for that file.  \n![Debug is started first time and the environment prompt is presented. The next time there is no prompt when the debug session starts](images/1_58/debug-env.gif)",
    "url": "https://code.visualstudio.com/updates/v1_58#_remember-chosen-environment-per-file",
    "id": 2227
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Debug console suggestions no longer accepted on Enter  \nThe Debug Console suggestions are no longer accepted on `Enter`, but only on `Shift+Enter` and `Tab`. Previously, it was easy to accidentally accept a suggestion when you just wanted to evaluate what is already typed in the Debug Console input.  \nIn order to make the `Tab` key more discoverable as a way to accept suggestions, VS Code now has a hint Status bar (\"Insert (Tab)\") in the Debug Console input.  \n![Debug console input box showing a Status bar rendered in the bottom that says \"Insert (Tab)\"](images/1_58/repl.png)",
    "url": "https://code.visualstudio.com/updates/v1_58#_debug-console-suggestions-no-longer-accepted-on-enter",
    "id": 2228
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Contributions to extensions  \n### Jupyter Interactive window  \nWe have started working on providing a built-in interactive window experience on top of the notebook ecosystem and the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension has adopted it behind a setting `jupyter.enableNativeInteractiveWindow`. If the feature is enabled, the Jupyter extension will open the built-in editor instead of the webview implementation, when running code from Python files or directly launching from the Command Palette. The built-in editor works with your customized keybindings/keymaps or language extensions since it's deeply integrated with the workbench.  \n![Jupyter built-in interactive window demo](images/1_58/builtin-interactive-window.gif)",
    "url": "https://code.visualstudio.com/updates/v1_58#_jupyter-interactive-window",
    "id": 2229
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Jupyter notebook debugging  \nWe have been working on supporting debugging in Jupyter notebooks, so that you can set breakpoints in notebook cells, execute cells step-by-step, and use all other VS Code debugger features. This is experimental, but you can try it out by setting `\"jupyter.experimental.debugging\": true`, installing version 6 of ipykernel in your selected kernel, then clicking the **Debug** button in the notebook toolbar.  \n![Jupyter debugging](images/1_58/notebook-debug.png)",
    "url": "https://code.visualstudio.com/updates/v1_58#_jupyter-notebook-debugging",
    "id": 2230
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Remote Repositories  \nIn this iteration, we largely focused on bug fixes and some performance improvements for the [Remote Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) extension, as well as better integration with the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension. Additionally, you can now remove a remote repository from the **Remote Repositories** view in the **Remote Explorer**, and there is better support for opening `\\blob` URLs with line ranges.",
    "url": "https://code.visualstudio.com/updates/v1_58#_remote-repositories",
    "id": 2231
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### GitHub Pull Requests and Issues  \nThe focus this iteration for the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension was on fixing bugs. Check out the [changelog](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0280) to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_58#_github-pull-requests-and-issues",
    "id": 2232
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.58 include:  \n* Option to only open a browser once for forwarded ports.\n* `devcontainer.json` support for cached images.\n* Dev Containers now checks \"hostRequirements\".  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_58.md).",
    "url": "https://code.visualstudio.com/updates/v1_58#_remote-development",
    "id": 2233
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Live Preview  \nWe have developed a [Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) extension, which hosts a local server for web development previewing! \ud83c\udf89  \nIt features an in-editor browser preview, live preview refreshing (on file change or on save), multi-root support, and more!  \n![Live Preview Quick Walkthrough](images/1_58/live-preview-summary-1.gif)  \nThe extension also has a `Live Preview` task, which runs a persistent server and allows you to view server traffic and its associated files.  \n![Live Preview Tasks](images/1_58/live-preview-summary-2.gif)  \nTo learn more about what it can do, you can find details [in the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) or [check out its repo](https://github.com/microsoft/vscode-livepreview).",
    "url": "https://code.visualstudio.com/updates/v1_58#_live-preview",
    "id": 2234
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Preview Features  \n### TypeScript 4.4 support  \nThis release includes initial support for the upcoming TypeScript 4.4 release. You can read more about the new language features and improvements in TypeScript 4.4 [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-beta/).  \nTo start using the TypeScript 4.4 nightly builds, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).  \nPlease share your feedback and let us know if you run into any bugs with TypeScript 4.4.",
    "url": "https://code.visualstudio.com/updates/v1_58#_typescript-4.4-support",
    "id": 2235
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Move terminals between windows  \nIt's now possible to move terminals between windows by detaching via **Terminal: Detach Session** in one window and attaching to another with **Terminal: Attach to Session**. In the future, this should help enable cross-window drag and drop!",
    "url": "https://code.visualstudio.com/updates/v1_58#_move-terminals-between-windows",
    "id": 2236
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Extension authoring  \n### Detailed completion item labels  \nWe have added new API for more detailed and structured completion item labels. You can now use the [vscode.CompletionItemLabel](https://github.com/microsoft/vscode/blob/3cca8288130cb5e0df113571b51c5b62142bb5b0/src/vs/vscode.d.ts#L3978-L4001) type for item's labels and it allows you to specify label, details, and description.  \nThese new properties allow language extensions to show signatures or qualifiers but also other completion provider can utilize this. For instance, the [GitHub Pull Request and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension now shows full names alongside aliases.  \n![Completion for Github aliases with full names](images/1_58/completion-item-label.png)",
    "url": "https://code.visualstudio.com/updates/v1_58#_detailed-completion-item-labels",
    "id": 2237
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Details for modal messages  \nThe API for showing modal information, warning, and error messages now supports providing details. Detail text is rendered below and less prominently than the actual message.  \n![A modal dialog with details](images/1_58/modal-and-detail.png)  \nThe dialog above is produced with the following code snippet. Note that detail text is only supported for modal messages (`modal: true`).  \n```ts\nvscode.window.showInformationMessage('This is the message', {\nmodal: true,\ndetail: 'This is the detail. Rendered less prominent, but with more space for, well, details.'\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_58#_details-for-modal-messages",
    "id": 2238
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Contribute terminal profiles  \nTerminal profiles can now be contributed by extensions and they will be displayed in the profile picker:  \n![A contributed profile will show up along side detected and configured terminal profiles](images/1_58/terminal-profiles.png)  \nTo contribute terminal profiles, you will need to do three things:  \nFirst, add the contribution to your `package.json`:  \n```json\n\"contributes\": {\n\"terminal\": {\n\"profiles\": [\n{\n\"title\": \"Custom Profile\",\n\"id\": \"custom_profile\"\n}\n]\n},\n}\n```  \nNext, add the activation event so the extension is activated when the user requests the profile:  \n```json\n\"activationEvents\": [\n\"onTerminalProfile:custom_profile\"\n]\n```  \nFinally, register the terminal profile provider that will return the set of options used to create the terminal. The options can be either the standard process-based `TerminalOptions` or the custom `ExtensionTerminalOptions`:  \n```ts\nvscode.window.registerTerminalProfileProvider('custom_profile', {\nprovideTerminalProfile() {\nreturn {\noptions: {\nname: 'Profile from extension',\nshellPath: 'cmd.exe'\n}\n};\n}\n})\n```",
    "url": "https://code.visualstudio.com/updates/v1_58#_contribute-terminal-profiles",
    "id": 2239
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Change ExtensionTerminalOptions-based terminal names  \nThe new `Pseudoterminal.onDidChangeName` event allows changing the name of terminals created with `ExtensionTerminalOptions`.  \n```ts\nconst writeEmitter = new vscode.EventEmitter<string>();\nconst nameEmitter = new vscode.EventEmitter<string>();\nconst pty = {\nonDidWrite: writeEmitter.event,\nonDidChangeName: nameEmitter.event,\nopen: () => writeEmitter.fire('Press and key to set the terminal title'),\nclose: () => { /* noop*/ },\nhandleInput: (data: string) => {\nwriteEmitter.fire(`Set title to \"${data}\"`);\nnameEmitter.fire(data);\n}\n};\nconst terminal = (<any>vscode.window).createTerminal({ name: `My Extension REPL`, pty });\nterminal.show();\n```",
    "url": "https://code.visualstudio.com/updates/v1_58#_change-extensionterminaloptions-based-terminal-names",
    "id": 2240
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Set the icon for terminals created via the extension API  \n`window.createTerminal` now accepts an `iconPath`, associating an icon with the terminal in its tab.  \n```ts\nconst term = vscode.window.createTerminal({\nname: `Serve`,\niconPath: new vscode.ThemeIcon('server-process')\n});\nterm.show();\n```  \n![The iconPath will show up next to the terminal's name](images/1_58/terminal-icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_58#_set-the-icon-for-terminals-created-via-the-extension-api",
    "id": 2241
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Enumerate saved Memento keys  \nThere is a new `Memento.keys()` API to enumerate the set of saved `Memento` keys. This API can make it easier to deal with previously saved data and be helpful if you need to migrate saved data.",
    "url": "https://code.visualstudio.com/updates/v1_58#_enumerate-saved-memento-keys",
    "id": 2242
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Testing  \nThe march to finalize the testing APIs continues. This iteration, we refactored some of the testing APIs to better match the style of other APIs in the extension host. To track the finalization process and hear about changes to the APIs, follow [issue #122208](https://github.com/microsoft/vscode/issues/122208).  \nThe primary changes we foresee are to how \"run configurations\" are provided. To track or weigh in on the progress of these runner APIs, follow [issue #127096](https://github.com/microsoft/vscode/issues/127096).  \nFinally, we began investigation and the initial implementation of [test coverage](https://github.com/microsoft/vscode/issues/123713), which will receive surface area in the UI in the coming weeks.",
    "url": "https://code.visualstudio.com/updates/v1_58#_testing",
    "id": 2244
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Inline Suggestions  \nThe inline suggestions API allows extensions to provide inline suggestions that are decoupled from the suggestion widget. An inline suggestion is rendered as if it was already accepted, but with a gray color. Users can cycle through suggestions and accept them with the `Tab` key.  \n```ts\nvscode.languages.registerInlineCompletionItemProvider({ pattern: '**' },\n{\nprovideInlineCompletionItems: async (document, position) => {\nreturn [{ text: \"< 2) {\\n\\treturn 1;\\n\\t}\" }];\n}\n}\n);\n```  \n![Inline suggestions in the editor](images/1_58/inline-suggestions.gif)",
    "url": "https://code.visualstudio.com/updates/v1_58#_inline-suggestions",
    "id": 2245
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Engineering  \n### ES2020  \nWe have updated our TypeScript projects to allow using recent JavaScript APIs, like `Promise.allSettled` or `String.replaceAll`. We also output more modern JavaScript, ES2020, which reduces the overall size of our main bundle slightly.",
    "url": "https://code.visualstudio.com/updates/v1_58#_es2020",
    "id": 2246
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n### Progress for Electron sandbox support  \nThis milestone we continued to make the VS Code window ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) and [context isolation](https://www.electronjs.org/docs/tutorial/context-isolation) features.  \nSpecifically:  \n* We removed our Node.js dependency for loading the resources needed to open VS Code windows in general.\n* We added searching to `iframe` elements to get behavior closer to the deprecated `webview` component, allowing us to drop `webview` in the future. This feature can be enabled by setting `\"webview.experimental.useIframes\": true` in the `settings.json` file.",
    "url": "https://code.visualstudio.com/updates/v1_58#_progress-for-electron-sandbox-support",
    "id": 2247
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2021 Release (1.58)  \n## Documentation  \n### Data Science tutorials and topics  \nThe Data Science tutorials and topics are now under their own section in the [https://code.visualstudio.com](https://code.visualstudio.com/docs/datascience) table of contents. You can find tutorials on using [Jupyter Notebooks](https://code.visualstudio.com/docs/datascience/jupyter-notebooks), the [Python Interactive window](https://code.visualstudio.com/docs/datascience/python-interactive), and even a [Data Science tutorial](https://code.visualstudio.com/docs/datascience/data-science-tutorial) analyzing passenger data from the Titanic.  \n![Data Science table of contents on code.visualstudio.com](images/1_58/data-science-toc.png)",
    "url": "https://code.visualstudio.com/updates/v1_58#_data-science-tutorials-and-topics",
    "id": 2248
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Settings editor  \nThe Settings editor now supports validation on objects. The validation checks for type errors that can be introduced when editing the JSON file directly.  \n![Object setting showing validation errors](images/1_59/object-widget-validation.png)  \nArray settings now have drag and drop support in non-editing mode. Moreover, enum array settings with the property `uniqueItems` set to `true` now only show remaining options rather than all options in the dropdowns:  \n![Drag and drop for array settings](images/1_59/enum-array-dnd.gif)  \nThe Settings editor also now supports multiline string settings, where the value is rendered in a multiline text area instead of a single-line input box:  \n![An example of a multiline string setting](images/1_59/multiline-setting.png)",
    "url": "https://code.visualstudio.com/updates/v1_59#_settings-editor",
    "id": 2250
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Extended theme customization syntax  \nThe color customization settings listed below allow users to customize colors of the current theme:  \n* `workbench.colorCustomizations`\n* `editor.tokenColorCustomizations`\n* `editor.semanticTokenColorCustomizations`  \nThere is new syntax to customize multiple themes at once:  \n```json\n\"workbench.colorCustomizations\": {\n\"[Abyss][Red]\": {\n\"activityBar.background\": \"#ff0000\"\n},\n\"[Monokai*]\": {\n\"activityBar.background\": \"#ff0000\"\n}\n},\n```  \nMultiple themes can be listed as well as the `*` wildcard character can be used at the beginning and the end of the name.",
    "url": "https://code.visualstudio.com/updates/v1_59#_extended-theme-customization-syntax",
    "id": 2251
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Support for Jupyter Notebooks  \nThis month, we moved the code that handles reading `*.ipynb` files from the [Jupyter Notebook](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension into a new built-in extension. This means that you can now open Jupyter notebooks in a clean install of VS Code, without having to install the full Jupyter extension. However, if you want to execute cells or view outputs that use ipywidgets or other complex renderer types, you will have to install the Jupyter extension.",
    "url": "https://code.visualstudio.com/updates/v1_59#_support-for-jupyter-notebooks",
    "id": 2252
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Notebook layout improvements  \nWe have made a few improvements to the notebook layout this iteration:  \n* The first line of the cell input is now rendered when the cell is collapsed.\n* Actions on the notebook editor toolbar will be moved into the overflow menu (**...**) when the window is not wide enough to render all primary actions.\n* The default value of `notebook.undoRedoPerCell` is now changed to `true`.  \n![notebook layout improvements](images/1_59/notebook-layout-improvements.png)  \nWe also updated the default styles for code cells and now show a background color to help distinguish cells apart. Themes can use `notebook.cellEditorBackground` to customize this color.  \n![Example of updated notebook code cells](images/1_59/notebook-cells.png)  \nLastly, you can now toggle the text labels on the notebook toolbar using the setting `notebook.globalToolbarShowLabel`:  \n![Example of notebook toolbar text](images/1_59/notebook-toolbar.png)",
    "url": "https://code.visualstudio.com/updates/v1_59#_notebook-layout-improvements",
    "id": 2253
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Configure the path separator for Copy Relative Path  \nA new setting `explorer.copyRelativePathSeparator` allows you to explicitly set the path separator when invoking the **Copy Relate Path** action.  \nThe available separator options are:  \n* `auto` (default) - Uses operating system specific path separation character.\n* `/` - Use slash as the path separation character.\n* `\\\\` - Use backslash as the path separation character.",
    "url": "https://code.visualstudio.com/updates/v1_59#_configure-the-path-separator-for-copy-relative-path",
    "id": 2254
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Share view state across editor groups  \nA new setting `workbench.editor.sharedViewState` was added to configure how editor view state (for example, the scroll position in the editor) is shared across editor groups.  \nBy default, this setting is disabled to preserve the current behavior. If you open an editor to the side and close that editor group later, only to open the editor again to the side, no view state is restored because you are opening a new editor group. However, when you enable this setting, the most recent editor view state is preserved across all editor groups and will be used, unless more specific view state is found for the editor group.  \nBelow the selection state is preserved when reopening the `package.json` file to the side.  \n![Shared editor group view state](images/1_59/shared-view-state.gif)",
    "url": "https://code.visualstudio.com/updates/v1_59#_share-view-state-across-editor-groups",
    "id": 2255
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Editor  \n### Navigate between folding regions  \nThere are new commands to set the cursor location to a corresponding fold:  \n* **Go to Next Fold** (`editor.gotoNextFold`)\n* **Go to Previous Fold** (`editor.gotoPreviousFold`)\n* **Go to Parent Fold** (`editor.gotoParentFold`)  \nThe commands currently have no default keybindings but you can add you own keyboard shortcuts via **Preferences: Open Keyboard Shortcuts** (`kb(workbench.action.openGlobalKeybindings)`).",
    "url": "https://code.visualstudio.com/updates/v1_59#_navigate-between-folding-regions",
    "id": 2256
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Automatically fold imports  \nUse the setting `editor.foldingImportsByDefault` to have import statements automatically folded. The fold state is stored once a file has been opened once. The feature works with TypeScript, JavaScript, Java, C#, C++, and with all languages that have a folding range provider that annotates import statements with `FoldingRangeKind.Imports`.",
    "url": "https://code.visualstudio.com/updates/v1_59#_automatically-fold-imports",
    "id": 2257
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Seed search string from selection  \nThe Find control setting `editor.find.seedSearchStringFromSelection` has been extended to support seeding the search string only from non-empty selection. By default, the editor will use the selection or the word around the empty selection as the search keyboard when the Find control is revealed.",
    "url": "https://code.visualstudio.com/updates/v1_59#_seed-search-string-from-selection",
    "id": 2258
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Inline suggestions improvements  \nWe have changed the way inline suggestions are rendered. This not only fixes a lot of bugs, but also makes word wrapping aware of inline suggestions.  \nIn addition, multi-line inline suggestions at non-trailing positions are now supported.",
    "url": "https://code.visualstudio.com/updates/v1_59#_inline-suggestions-improvements",
    "id": 2259
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Inlay hints improvements  \nWe have also changed the way inlay hints are rendered. By using the same mechanism as for inline suggestions, inlay hints are now also taken into account for word wrapping. This mechanism also enables separate cursor stops around inlay hints.",
    "url": "https://code.visualstudio.com/updates/v1_59#_inlay-hints-improvements",
    "id": 2260
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Terminal  \n### Drag and drop terminals across windows  \nDrag and drop terminals from the tabs list or editor area of one window into the tabs list, editor area, or panel of another window.  \n![Drag and drop terminal across windows](images/1_59/terminal-dnd.gif)",
    "url": "https://code.visualstudio.com/updates/v1_59#_drag-and-drop-terminals-across-windows",
    "id": 2261
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Child process tracking and close warnings  \nThe existing `terminal.integrated.confirmOnExit` and new `terminal.integrated.confirmOnKill` settings use child process tracking to display a warning when trying to close a terminal that has child processes under the shell process. By default, this tracking only affects terminals in the editor area but can now be configured to show warnings for all terminals or those in the panel area.",
    "url": "https://code.visualstudio.com/updates/v1_59#_child-process-tracking-and-close-warnings",
    "id": 2262
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Set contributed terminal profile as default  \nTerminal profiles contributed by extensions can now be set as the default profile. The default terminal profile is indicated by the **Default** suffix in the terminal dropdown.  \n![The terminal profile dropdown displays indicates the extension terminal profile is set as the default](images/1_59/extension-profile.png)",
    "url": "https://code.visualstudio.com/updates/v1_59#_set-contributed-terminal-profile-as-default",
    "id": 2263
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Underline and strikethrough support  \nThe integrated terminal now supports underline and strikethrough attributes. For example, [Git can be configured](https://git-scm.com/docs/git-config#Documentation/git-config.txt-color) to use these new attributes:  \n![Git output in terminal with underline and strikethrough text](images/1_59/terminal-styles.png)  \n*Theme: [Sapphire Theme](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire)*  \nThe above example uses the following settings in `.gitconfig`:  \n```ini\n[color \"status\"]\nadded = green bold\nchanged = red bold strike\nuntracked = cyan\nbranch = yellow black bold ul\n```",
    "url": "https://code.visualstudio.com/updates/v1_59#_underline-and-strikethrough-support",
    "id": 2264
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Create terminal in editor area to the side  \nThere is a new command `workbench.action.createTerminalEditorSide` to create a terminal in the editor area to the side of the active editor.",
    "url": "https://code.visualstudio.com/updates/v1_59#_create-terminal-in-editor-area-to-the-side",
    "id": 2265
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Active terminal tab indicator  \nThemes can now set the color for a vertical line to indicate the active terminal tab using theme key `terminal.tab.activeBorder`.  \n![Highlighted active terminal](images/1_59/terminal-active.png)  \nThe color will fall back to `tab.activeBorder` if `terminal.tab.activeBorder` is not set.",
    "url": "https://code.visualstudio.com/updates/v1_59#_active-terminal-tab-indicator",
    "id": 2266
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Disable animation in terminal tab icon  \nThe new setting `terminal.integrated.tabs.enableAnimation` will disable animation in the terminal tab icon. For tasks, the play button is used, instead of a spinner animation:  \n![Terminal tab without animation and play button displayed](images/1_59/terminal-animation.png)",
    "url": "https://code.visualstudio.com/updates/v1_59#_disable-animation-in-terminal-tab-icon",
    "id": 2267
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Debugging  \n### Improved Run/Debug button in editor title  \nIn the February release, we introduced a dropdown button to group the Run and Debug commands in a central (and compact) location in the editor's title area (refer to the [1.54 release notes](https://code.visualstudio.com/updates/v1_54#_limits-for-editor-title-menu-and-run-submenu)). Based on user feedback, we've tried to improve the dropdown button by remembering the last executed action. The dropdown button now has two click zones, one for the default action (left) and another for the dropdown (right) which, when selected, runs the action and remembers it as the new default.  \n![Debug/run split button shown for Java](images/1_59/run-debug-splitbutton.gif)  \nThe dropdown behavior:  \n* If there is only a single Run or Debug action, the dropdown menu is omitted.\n* If there is more than one Run or Debug action, all actions appear in the dropdown menu and the default action is set to the first action from the dropdown menu (as long as there is no remembered action).\n* The default action is preserved for a specific workspace across VS Code restarts; it is **not** preserved per editor.",
    "url": "https://code.visualstudio.com/updates/v1_59#_improved-run/debug-button-in-editor-title",
    "id": 2268
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Contributions to extensions  \n### Live Preview  \nThe [Live Preview](http://aka.ms/live-preview) extension, [released last month](https://code.visualstudio.com/updates/v1_58#_live-preview), has some exciting new features. These include:  \n* Compatibility with the built-in JavaScript debugger for external previews.\n* Run **Live Preview: Show Debug Preview** to try it out!\n* Improvements to the embedded browser such as \"Find in Page\" support and quick access to the `webvivew` DevTools.\n* Filesystem watching for auto-generated files.\n* And more! \ud83c\udf89  \nTo see more details on this month's progress, see [the extension's release notes](https://github.com/microsoft/vscode-livepreview/blob/main/release_notes/july-2021.md).  \n![Live Preview Debugging](images/1_59/livepreview-debugging.gif)  \n![Live Preview new browser features](images/1_59/livepreview-browser-features.gif)  \n*Theme: [GitHub Dark Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_59#_live-preview",
    "id": 2269
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. One of this month's highlights is that **Start working** on an issue has been expanded to let you work on issues outside of your current repository.  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.29.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0290) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_59#_github-pull-requests-and-issues",
    "id": 2270
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Jupyter  \nWork continues on the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension. To learn about all the new features and updates, you can read the full [changelog for the July](https://github.com/microsoft/vscode-jupyter/blob/main/CHANGELOG.md#202189-3-august-2021) release of the extension.  \nIf you'd like to know more about VS Code's path to enabling native support for notebooks, you can read the recent [Coming of Age of Notebooks](https://code.visualstudio.com/blogs/2021/08/05/notebooks) blog post.  \n**Interactive window**  \nThe Jupyter Interactive window provides an alternative way to build and work with Jupyter notebooks, using a text file instead of a notebook interface. Last month, we previewed an upgraded version of the Jupyter Interactive window, featuring deeper workbench integration including support for themes, custom keybindings, snippets, compatibility with extensions, and more. Many thanks to our users for providing feedback via GitHub issues on the preview experience. The built-in Interactive window is now the default interface in 1.59. The previous interface will remain available behind the setting `\"jupyter.enableNativeInteractiveWindow\": false` and will be removed in an upcoming release. We look forward to [your feedback](https://github.com/microsoft/vscode-jupyter/issues).  \n![Shift+Enter to run code in the Interactive window](images/1_59/interactive-window.gif)  \n**Run By Line**  \nWe've been working on supporting the \"Run By Line\" feature in Jupyter notebooks. This feature is essentially a simplified debug mode that lets you step through your cell's code line by line without any complex debug UI. This is still experimental, but you can try it out by setting `\"jupyter.experimental.debugging\": true`, installing version 6 of ipykernel in your selected kernel, then selecting the **Run By Line** button in the cell toolbar.  \n![Run by line](images/1_59/run-by-line.gif)",
    "url": "https://code.visualstudio.com/updates/v1_59#_jupyter",
    "id": 2271
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Python  \nIn the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension, we've improved the sorting of the list of Python interpreters. In the past, virtual environments would be displayed at the bottom of the list, resulting in a lot of scrolling and/or searching. Virtual environments located on the project root are now displayed first, followed by globally installed environments.  \n![List of Python interpreters](images/1_59/python-interpreters-list.png)",
    "url": "https://code.visualstudio.com/updates/v1_59#_python",
    "id": 2272
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Dev Containers devcontainer CLI  \nThe [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension, for working with Docker containers from within VS Code, now includes a `devcontainer` command line interface to let you open a folder within a dev container (`devcontainer open`) or build a dev container image (`devcontainer build`).  \nYou can learn about new Remote Development extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_59.md).",
    "url": "https://code.visualstudio.com/updates/v1_59#_dev-containers-devcontainer-cli",
    "id": 2273
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Preview Features  \n### Automatic language detection of untitled files  \nWe're excited to announce the initial preview of automatic language detection of untitled files that uses machine learning to detect which language you are coding in and automatically sets the language mode of the untitled file. This feature uses the open-source ML library, [Tensorflow.js](https://www.tensorflow.org/js/), and the ML model from [Guesslang](https://github.com/yoeo/guesslang) by GitHub user [@yoeo](https://github.com/yoeo).  \nIn this release, this feature will be off by default but we plan on making it the default next iteration. To enable it, apply the following setting:  \n```json\n\"workbench.editor.untitled.experimentalLanguageDetection\": true\n```  \nTo see the feature in action, open an untitled file (**File** > **New File**) and paste source code into your editor.  \nHere's an example of autodetection of Python code:  \n![paste a code snippet right into VS Code and it will detect the language](images/1_59/automaticlanguagedetection.gif)  \n*Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda)*  \nAdditionally, you can see what language(s) are being detected by opening the language picker.  \n![the language picker also shows the detected languages if there are any](images/1_59/language-picker.gif)  \n*Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda)*  \n> **Note**: If language detection isn't confident enough, then you will stay in your current language mode and no results will show in the language picker until language detection has more confidence.  \nThe setting also allows you to provide language overrides to specify language modes you don't want to be automatically switched away from.  \nHere's an example to not autodetect Markdown files:  \n```json\n\"workbench.editor.untitled.experimentalLanguageDetection\": true\n\"[markdown]\": { \"workbench.editor.untitled.experimentalLanguageDetection\": false }\n```  \nWith the settings above, automatic language detection **will not** run while you are editing an untitled Markdown file. However, if you modify an untitled file of any other kind, automatic language detection **will** run with the contents of those files.  \nWe've separated the code that interacts with the ML model into its own library, released as an npm package, in the [vscode-languagedetection repo](https://github.com/Microsoft/vscode-languagedetection).  \nLet us know how automatic language detection for untitled files works for you!",
    "url": "https://code.visualstudio.com/updates/v1_59#_automatic-language-detection-of-untitled-files",
    "id": 2274
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### TypeScript 4.4  \nThis release includes support for the upcoming TypeScript 4.4 release. You can read more about the new language features and improvements in TypeScript 4.4 [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-beta/). Some tooling highlights:  \n* Inlay hints for parameter names and types in both JavaScript and TypeScript files.\n* Basic spelling suggestions in plain JavaScript files. These are only shown if the TypeScript language service is confident in the error and in the fix.  \nTo start using the TypeScript 4.4 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.  \nPlease share your feedback and let us know if you run into any bugs with TypeScript 4.4.",
    "url": "https://code.visualstudio.com/updates/v1_59#_typescript-4.4",
    "id": 2275
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Disassembly view  \nThanks to a large [contribution](https://github.com/microsoft/vscode/pull/125737) by the Microsoft C++ team, we are happy to include a preview of a debug **Disassembly** view in this milestone.  \nThe Disassembly view can be opened from an editor's context menu to show the disassembled source of the active stack frame, and it supports stepping through assembly instructions and setting breakpoints on individual instructions.  \nThe Disassembly view is only available in an active debug session and when the underlying debug extension supports it. As of today only the Microsoft [C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) and [Mock Debug](https://marketplace.visualstudio.com/items?itemName=andreweinand.mock-debug) extensions can feed the Disassembly view.  \n![Disassembly view in Mock Debug extension](images/1_59/disassembly-view.gif)  \nFrom a technical perspective, VS Code's implementation of the Disassembly view now supports four more features of the Debug Adapter Protocol:  \n* The `disassembly` request for providing the disassembled source for a memory location.\n* The `instructionPointerReference` property on stack frames.\n* The `granularity` property on the stepping requests.\n* Instruction breakpoints and the `setInstructionBreakpoints` request.",
    "url": "https://code.visualstudio.com/updates/v1_59#_disassembly-view",
    "id": 2276
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Extension authoring  \n### Testing APIs  \nLast fall we began work on adding native support for running tests in VS Code, and this month the first set of testing-related APIs has been finalized. These APIs provide greater flexibility, better performance, and richer UX over what has been found previously in extensions. Check out the [guide on writing testing extensions](https://code.visualstudio.com/api/extension-guides/testing) to dive in.  \n![Image showing the test explorer and rich diff view experience](images/1_59/testing.png)  \n*Theme: [codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)*  \nExisting users of the [Test Explorer UI](https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer) extension can get the native experience by setting `testExplorer.useNativeTesting` to `true`. However, the conversion is a reflection of the Test Explorer UI extension's existing API, so some features like rich diff support are not included.  \nOne of the first extensions to adopt the testing API was the Microsoft [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) included in the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).  \n![Java extension using the native test API in VS Code](images/1_59/java-extension-test-support.png)",
    "url": "https://code.visualstudio.com/updates/v1_59#_testing-apis",
    "id": 2277
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Contribution point for New File menu  \nExtensions that provide a way to create a new file editor, for instance notebooks or custom editors, can now contribute commands to the new `file/newFile` menu contribution point. This menu can be accessed from the **New File...** item on the Welcome page or in the File menu.  \n![New File menu in use via Welcome page](images/1_59/newFile.gif)",
    "url": "https://code.visualstudio.com/updates/v1_59#_contribution-point-for-new-file-menu",
    "id": 2278
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Rich Status bar hover  \nRich hovers including links and icons are now supported on Status bar items `StatusBarItem.tooltip: string | IMarkdownString`.  \n![Rich Status bar hover](images/1_59/rich-statusbar-hover.png)  \n* If `MarkdownString.supportThemeIcons` is true, you can use icons with the `$(iconName)` syntax.\n* If the `MarkdownString` is trusted, you can also add command links. Syntax: `([test](command:vscode.newWindow))`.",
    "url": "https://code.visualstudio.com/updates/v1_59#_rich-status-bar-hover",
    "id": 2279
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Status bar warning colors  \nStatus bar items that represent warnings can use the newly added colors `statusBarItem.warningBackground` and `statusBarItem.warningForeground`.",
    "url": "https://code.visualstudio.com/updates/v1_59#_status-bar-warning-colors",
    "id": 2280
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Object settings without additionalProperties  \nObject settings must have `additionalProperties` set to `false` for an object to be supported in the Settings editor. Otherwise, the Settings editor will interpret the setting as a complex setting that can take on any shape, and direct the user to the settings JSON file.",
    "url": "https://code.visualstudio.com/updates/v1_59#_object-settings-without-additionalproperties",
    "id": 2281
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Multiline string settings  \nTo add support for a multiline string setting in the Settings editor, add `\"editPresentation\": \"multilineText\"` as a key-value pair to the string setting. Changing a string setting to be multiline will cause the Settings editor to render the setting value in a multiline text area instead of a single-line input box.",
    "url": "https://code.visualstudio.com/updates/v1_59#_multiline-string-settings",
    "id": 2282
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Updated codicons  \nWe've added the following new icons to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels):  \n![List of updated icons](images/1_59/codicons.png)  \n* `azure`\n* `compass-active`\n* `compass-active`\n* `compass-dot`\n* `compass`\n* `debug-all`\n* `debug-coverage`\n* `git-pull-request-closed`\n* `git-pull-request-draft`\n* `issue-draft`\n* `layers-active`\n* `layers-dot`\n* `layers`",
    "url": "https://code.visualstudio.com/updates/v1_59#_updated-codicons",
    "id": 2283
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Text Document change reason  \nWhen the event `workspace.onDidChangeTextDocument` is fired, a new property `reason` on the event object indicates whether the text change was caused by an Undo or Redo operation.",
    "url": "https://code.visualstudio.com/updates/v1_59#_text-document-change-reason",
    "id": 2284
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### forceRecreate for AuthenticationGetSessionOptions  \nUntil now, the `getSession` API, which is used to get an authentication session object, never had the ability to ask the user to log in. Prompting a login is needed for authentication services like GitHub, that use SAML/Single Sign On (SSO) with an access token that eventually looses access to resources when an SSO session expires. This proposal adds another property to `AuthenticationGetSessionOptions` called `forceRecreate` that allows you to ask the user to sign in again. A modal experience similar to when you specify `createIfNone` is shown to the user.",
    "url": "https://code.visualstudio.com/updates/v1_59#_forcerecreate-for-authenticationgetsessionoptions",
    "id": 2286
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n## Engineering  \n### iframe based webviews now used everywhere on desktop  \nThis month we finished our transition from [Electron's webview tag](https://www.electronjs.org/docs/api/webview-tag) element to normal `<iframe>` element based webviews. This better aligns the implementation of VS Code's webviews across desktop and web, and also lets us delete a lot of now-redundant code.",
    "url": "https://code.visualstudio.com/updates/v1_59#_iframe-based-webviews-now-used-everywhere-on-desktop",
    "id": 2287
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Electron 13 update  \nIn this milestone, we finished the exploration to bundle Electron 13 into VS Code and we want to thank everyone involved with testing and self-hosting on Insiders. This is a major Electron release and comes with Chromium 91.0.4472.124. There is no change to the Node.js version with this release and it will remain v14.16.0.",
    "url": "https://code.visualstudio.com/updates/v1_59#_electron-13-update",
    "id": 2288
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Progress for Electron sandbox support  \nAs we continue to make the VS Code workbench ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox), we wanted to enable mixed sandbox mode on Linux and no longer bundle with the CLI argument `--no-sandbox` in our distributed packages deb, rpm, snap and tar archive. Chromium has a [multi-layer sandboxing model on Linux](https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux/sandboxing.md). If Chromium cannot use the namespace sandbox for layer-1, it will try to use the [setuid sandbox](https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux/suid_sandbox.md) via the helper binary `chrome-sandbox` shipped alongside the application binary. For the setuid binary to work, it needs to meet the following conditions:  \n* The sandbox binary must be executable by the Chromium process.\n* It must be SUID and executable by others.  \nWe were able to preserve these conditions for deb and rpm packages. It is currently not possible to achieve these permissions for snap, and we have tracking [issue #127140](https://github.com/microsoft/vscode/issues/127140) to address snap packages moving forward.  \nAs for using the tar archive, if the application cannot use the namespace sandbox, which might the case when running inside containers, it will fail with the following error:  \n```\nFATAL:setuid_sandbox_host.cc(158)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I'm aborting now. You need to make sure that chrome-sandbox is owned by root and has mode 4755.\n```  \nIf that happens, you can use either of the following two options to get it working:  \n* Fix the permissions of setuid helper  \n```bash\nsudo chown root <path-to-vscode>/chrome-sandbox\nsudo chmod 4755 <path-to-vscode>/chrome-sandbox\n```  \n* Run with the `--no-sandbox` flag",
    "url": "https://code.visualstudio.com/updates/v1_59#_progress-for-electron-sandbox-support",
    "id": 2289
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2021 Release (1.59)  \n### Smoke test improvements  \nWe run a suite of smoke tests, triggered on each build, that launch VS Code (both desktop and web) and exercise various UI elements to ensure proper functionality. This milestone we invested in this infrastructure to allow us to remove manual smoke testing from our release checklist.  \nThe smoke tests now run on all platforms (macOS, Linux, and Windows). On top of that, one of our more involved smoke test suites that specifically checks for regressions between the last Stable version of VS Code and the new release, has been automated to run on each commit.  \nFinally, thanks to the awesome [Playwright](https://github.com/microsoft/playwright) library, which we use for automated web smoke testing, we enabled their tracing capabilities to allow us to replay failing smoke tests using their [trace viewer](https://playwright.dev/docs/next/trace-viewer/) tool.",
    "url": "https://code.visualstudio.com/updates/v1_59#_smoke-test-improvements",
    "id": 2290
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Icons Everywhere  \nContinuing on the work we did in the August release to support file icons, we've added file icons to many more places throughout the UI. This includes most trees that show files (for example, Problems panel, Search results, OPEN EDITORS section) as well as in **Quick Open** results and the editor headings.  \nIf you don't want to see icons everywhere, for instance in Tab headings, we added a new setting `workbench.editor.showIcons`.  \n![Icons](images/1_6/icons.png)",
    "url": "https://code.visualstudio.com/updates/v1_6#_icons-everywhere",
    "id": 2292
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Switch between running Windows  \nWe added a new command to let you quickly move between open Windows of VS Code.  Simply open the **Command Palette** (`kb(workbench.action.showCommands)`) and type **Switch Window**. A dropdown will appear showing all the opened VS Code Windows (instances) and you can quickly move from one to the other without leaving the keyboard, right from within VS Code.  \n![switch window](images/1_6/switch-window-animation.gif)",
    "url": "https://code.visualstudio.com/updates/v1_6#_switch-between-running-windows",
    "id": 2293
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Image dimensions & Binary file size  \nWhen you open a binary file in VS Code, extra meta information is now displayed in the Status Bar. For all binary files, we show the size of the file and for images, we also show the image dimensions.  \n![Status](images/1_6/status.png)  \nVS Code also now detects image file changes on disk so you no longer see stale old versions of an image.",
    "url": "https://code.visualstudio.com/updates/v1_6#_image-dimensions-&-binary-file-size",
    "id": 2294
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Editor  \n### Format On Save  \nWould you like your source code formatted each time you save? VS Code now supports \"Format On Save\" which will automatically pick up relevant installed formatter extensions and format the whole document on each save. Enable \"Format On Save\" by setting `\"editor.formatOnSave\": true`  \n> **Note:** To keep cursors and selections stable, we don't format when saving after delay.",
    "url": "https://code.visualstudio.com/updates/v1_6#_format-on-save",
    "id": 2295
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Search term history  \nYou can now navigate to your previous search terms in the global Search View and in the editor Find widget.  \n* `kbstyle(Alt+Up)` navigates backward in the history. Corresponding command is `history.showPrevious`.\n* `kbstyle(Alt+Down)` navigates forward in the history. Corresponding command is`history.showNext`.",
    "url": "https://code.visualstudio.com/updates/v1_6#_search-term-history",
    "id": 2296
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Hover & IntelliSense UI consistency  \nThe Hover widget UI was updated aligning it more with VS Code's IntelliSense experience:  \n![hover](images/1_6/hover.png)",
    "url": "https://code.visualstudio.com/updates/v1_6#_hover-&-intellisense-ui-consistency",
    "id": 2297
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Auto Save Menu Item  \nAuto Save is a great feature for many scenarios. In order to make this feature more discoverable, VS Code now has an **Auto Save** toggle right in the **File** menu. This will toggle the `files.autoSave` [setting](https://code.visualstudio.com/docs/getstarted/settings) in your global User `settings.json` configuration file.",
    "url": "https://code.visualstudio.com/updates/v1_6#_auto-save-menu-item",
    "id": 2298
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### File Associations configuration  \nIt is tedious to repeatedly set the Language Mode of a given file type and configuring a file association mapping was a manual process through your user or workspace settings. Now when changing the Language Mode of a file, you can pick **Configure File Association for...** and your choice will be stored to your User settings file and remembered.",
    "url": "https://code.visualstudio.com/updates/v1_6#_file-associations-configuration",
    "id": 2299
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Unicode improvements  \nVS Code now has better handling of UTF-16 surrogate pairs and validates all edits such that it doesn't break up the surrogate pairs. This is particularly important if you want to add things like Emojis into your source code.",
    "url": "https://code.visualstudio.com/updates/v1_6#_unicode-improvements",
    "id": 2300
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Improvements to LineNumber and Whitespace settings  \nSeveral editor settings have been updated to support new options:  \n* `editor.renderWhitespace` Possible values are now `\"all\"`, `\"boundary\"` and `\"none\"`. The `\"boundary\"` option does not render single spaces between words.  \n* `editor.lineNumbers` Possible values are `\"on\"`, `\"off\"` and `\"relative\"`. `\"relative\"` shows the line count from the current cursor position.",
    "url": "https://code.visualstudio.com/updates/v1_6#_improvements-to-linenumber-and-whitespace-settings",
    "id": 2301
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Languages  \n### TypeScript 2  \nVS Code 1.6 now ships with TypeScript 2.0.3. You can do the following to go back to TypeScript 1.8.10 in your workspace:  \n- Navigate into your workspace folder.\n- Run `npm install typescript@1.8.10` to install TypeScript version 1.8.10.\n- Start VS Code. You will get prompted whether you want to use the workspace version (1.8.10) or the bundled version (2.0.3) of TypeScript. Select workspace version and confirm the `typescript.tsdk` Workspace setting change.",
    "url": "https://code.visualstudio.com/updates/v1_6#_typescript-2",
    "id": 2302
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### TypeScript  \nTypeScript 2.0.3 contains lots of new features, like strict null checking or modular library dependencies to name a few. A complete list of the new features can be found [here](https://github.com/microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#typescript-20).  \nBesides new features, TypeScript 2.0.3 contains many bug fixes. This might result in additional compile time errors when you first compile your project with TypeScript 2.0.3.",
    "url": "https://code.visualstudio.com/updates/v1_6#_typescript",
    "id": 2303
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### JavaScript  \nThe JavaScript in VS Code is powered by TypeScript and the TypeScript version bundled with VS Code has been updated to version 2.0.3.  \nThis brings several improvements for JavaScript support:  \n- The JSDoc support has been improved and many issues have been fixed.\n- The parser now allows any syntax that the TypeScript parser is capable of recognizing and is part of a JavaScript standards proposal. For example, static class properties are no longer flagged as invalid.  \nIn addition, there are improvements to TypeScript that are also applicable to JavaScript:  \n- There is now globbing support in the `jsconfig.json` file.\n- Better support for including [built-in types from new ECMAScript versions using -\u2013lib](https://github.com/microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#including-built-in-type-declarations-with---lib).\n- Better handling for [module imports with file extensions](https://github.com/microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#module-identifiers-allow-for-js-extension).  \nOne very big improvement is that the acquisition of Type Declaration files (typings) has been simplified. You can now use NPM directly to get typings with the `@types` parameter.  \nFor example to get typings for `lodash` you can run:  \n```bash\nnpm install --save-dev @types/lodash\n```",
    "url": "https://code.visualstudio.com/updates/v1_6#_javascript",
    "id": 2304
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### PREVIEW TypeScript JavaScript Grammar  \nThe TypeScript/JavaScript TextMate grammar has been reworked for improved syntax highlighting. This work is currently available as an [extension in the marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.typescript-javascript-grammar). The plan is to switch to this version during October. Please install this extension now and provide us with feedback.",
    "url": "https://code.visualstudio.com/updates/v1_6#_preview-typescript-javascript-grammar",
    "id": 2305
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Updated HTML/Razor/Handlebar Support  \nSince we made VS Code available, we've had the debt item that some languages were implemented inside VS Code directly and they were not implemented as an extension. In the last couple of milestones, we have reduced this debt by extracting the JSON, CSS, LESS, SASS languages into their own extension. In September, we have now done this for HTML and its coupled languages, Razor and Handlebar. These languages are now all implemented using the [language server protocol](https://github.com/microsoft/language-server-protocol).  \nThis is a major refactoring and as a consequence, some language features have not yet been implemented:  \n* Commenting actions inside `<script>` section of an HTML - [Issue 12969](https://github.com/microsoft/vscode/issues/12969)\n* Word highlighting - [Issue 12973](https://github.com/microsoft/vscode/issues/12973)  \nWe will work on bringing these features back during the next iteration.  \nHowever, we are not done yet.. Now that we have extracted languages into extensions, the next challenge is to support the nesting of these languages, that is, embed JavaScript or CSS inside HTML. We will be working on this in October.",
    "url": "https://code.visualstudio.com/updates/v1_6#_updated-html/razor/handlebar-support",
    "id": 2306
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Extensions  \n### Workspace Extension Recommendations  \nOften you have a set of extensions that makes working with a particular workspace more productive. We now support creating a recommended list of extensions for a workspace. The set of recommendations is defined in a file `extensions.json` which is located in the `.vscode` folder. In this way, the recommendations can easily be shared inside a team.  \nYou can create this file using the **Extensions: Configure Workspace Recommended Extensions** command.  \nFor example, this is the `extensions.json` file that we use for the [vscode workspace](https://github.com/microsoft/vscode/blob/main/.vscode/extensions.json):  \n```json\n{\n\"recommendations\": [\n\"eg2.tslint\",\n\"dbaeumer.vscode-eslint\",\n\"msjsdiag.debugger-for-chrome\"\n]\n}\n```  \nAs you can see from the `recommendations` setting above, we recommend that anybody working on the VS Code codebase use the TSLint and ESLint extensions. In addition, we recommend using the Chrome debugger extension.  \nVS Code prompts a user to install the recommended extensions when a workspace is opened for the first time. The user can also review the list with the **Extensions: Show Workspace Recommended Extensions** command.  \n![Show Recommendations](images/1_6/recommendations.png)",
    "url": "https://code.visualstudio.com/updates/v1_6#_workspace-extension-recommendations",
    "id": 2307
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### PREVIEW Extension Packs  \nWe have added support for publishing 'Extension Packs' in the Marketplace. An Extension Pack is a set of extensions that can be installed together. This enables easily sharing your favorite extensions with other users. Another use case is to create a set of extensions for a particular scenario like PHP development to help a PHP developer get started with VS Code quickly. The feature is available as preview with the understanding that more work is still needed.  \nAn Extension Pack is represented as an extension that depends on other extensions. This dependency is expressed using the `extensionDependencies` attribute inside the `package.json` file.  \nFor example, here is an Extension Pack for PHP that includes a debugger and a language service:  \n```json\n\"extensionDependencies\": [\n\"xdebug.php-debug\",\n\"zobo.php-intellisense\"\n]\n```  \nWhen installing an Extension Pack, VS Code will now also install its extension dependencies.",
    "url": "https://code.visualstudio.com/updates/v1_6#_preview-extension-packs",
    "id": 2308
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Extension identifier badge  \nTo ease in the discoverability of the identifier of an extension required for workspace Recommendations and extension packs, we have added a badge to the Extension details view. An extension is uniquely identified using its `publisher name` and `extension name` separated by a period `.`.  \n![Extension identifier](images/1_6/extension-identifier.png).",
    "url": "https://code.visualstudio.com/updates/v1_6#_extension-identifier-badge",
    "id": 2309
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Extension update version check  \nNow you will only see an extension as outdated if there is a new version that is compatible with your VS Code installation available in the [Marketplace](https://marketplace.visualstudio.com/vscode).  \n>**Note:** This is applicable only if the extension is published using the latest version of the [vsce](https://github.com/microsoft/vscode-vsce) publishing tool.",
    "url": "https://code.visualstudio.com/updates/v1_6#_extension-update-version-check",
    "id": 2310
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Debugging  \n### Configurable External Terminal  \nRunning a debug target in an external terminal is now provided as a VS Code service to debugger extensions and we hope that this will result in widespread adoption. A useful side effect of this is that it is now possible to configure which terminal program to use via the existing `terminal.external.windowsExec`, `terminal.external.osxExec`, and `terminal.external.linuxExec` settings.  \n>**Note:** In this release, only the built-in debug extensions have adopted this new feature.",
    "url": "https://code.visualstudio.com/updates/v1_6#_configurable-external-terminal",
    "id": 2311
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Launch configuration supports 'npm' and other tools  \nA frequent feature request was to support running 'npm' scripts directly from a launch configuration. This is now possible by the following changes to the existing launch configuration concepts:  \n- Any program available on the PATH (for example 'npm', 'mocha', 'gulp', etc.) can now be used for the `runtimeExecutable` attribute and arguments can be passed via `runtimeArgs`.\n- The `program` attribute is no longer mandatory which helps if the npm script already specifies the program to launch.\n- If you specify a debug port via the `port` attribute, the `--debug-brk=nnnn` attribute will no longer be automatically added because the debug port is typically specified by the npm scripts as well.  \nLet's look at an 'npm' example. If your `package.json` has a 'debug' script, for example:  \n```json\n\"scripts\": {\n\"debug\": \"node --nolazy --debug-brk=5858 myProgram.js\"\n},\n```  \nthe corresponding launch configuration would look like this:  \n```json\n{\n\"name\": \"Launch via NPM\",\n\"type\": \"node\",\n\"request\": \"launch\",\n\"cwd\": \"${workspaceRoot}\",\n\"runtimeExecutable\": \"npm\",\n\"windows\": {\n\"runtimeExecutable\": \"npm.cmd\"\n},\n\"runtimeArgs\": [\n\"run-script\", \"debug\"\n],\n\"port\": 5858\n}\n```  \n>**Note:** On Windows, make sure to specify the executable with the correct extension, for example use `npm.cmd` instead of just `npm` which exists but is the shell script for Linux and macOS.",
    "url": "https://code.visualstudio.com/updates/v1_6#_launch-configuration-supports-'npm'-and-other-tools",
    "id": 2312
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Glob pattern support for Source Map setup  \nWhen debugging transpiled code (for example TypeScript) where your build process generates JavaScript code into a specific directory, it is necessary to help the Node.js debugger finding the generated code. In previous version of VS Code, this was done by specifying the root directory of the generated source code via the `outDir` attribute.  \nIn the September release, it is now possible to use multiple glob patterns for including and excluding files from the set of generated JavaScript files. For this, a new array typed attribute `outFiles` has been introduced. The old `outDir` is still supported, but we plan to deprecate this in the future.  \nThe following example shows how to configure source maps if the generated code lives in an \"out\" and \"node_modules\" directory and you want to exclude the generated test code:  \n```json\n{\n\"sourceMaps\": true,\n\"outFiles\": [\n\"${workspaceRoot}/{out,node_modules}/**/*.js\",\n\"!${workspaceRoot}/out/tests/**/*.js\"\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_6#_glob-pattern-support-for-source-map-setup",
    "id": 2313
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Experimental Node Debugger  \nWe now have an experimental debug extension that uses the [V8 Inspector Protocol](https://chromedevtools.github.io/debugger-protocol-viewer/v8/), which Node.js now exposes via the `--inspect` flag, only in Node.js versions 6.3+. This is the same protocol exposed by [Chrome and other targets](https://developer.chrome.com/devtools/docs/debugger-protocol). This extension runs on the [vscode-chrome-debug-core](https://github.com/microsoft/vscode-chrome-debug-core) library which also powers the [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension, and several others.  \n>**Note** On Windows, the 6.x versions only support this in 32-bit versions of Node.js. The latest builds of v7 should work in 64 or 32-bit. See [this issue](https://github.com/nodejs/node/issues/8155).  \nThis extension will eventually have feature-parity with vscode-node-debug, but isn't there yet. An overview is recorded [here](https://github.com/microsoft/vscode-node-cdp-debug/issues/7) and you can see issues in the [vscode-node-debug2](https://github.com/microsoft/vscode-node-cdp-debug/issues) repo and the [vscode-chrome-debug-core](https://github.com/microsoft/vscode-chrome-debug-core/issues) repo. For the most part, you should be able to set `\"type\": \"node2\"` in your existing Node.js launch configuration and have things work the same, as long as it's running in Node.js v6.3+.  \n>**Note**: See troubleshooting tips in the extension [README](https://marketplace.visualstudio.com/items?itemName=ms-vscode.node-debug2).",
    "url": "https://code.visualstudio.com/updates/v1_6#_experimental-node-debugger",
    "id": 2314
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Extension Authoring  \n### Authoring in TypeScript  \nThe Yeoman generator for VS Code extensions has been updated to use TypeScript version 2.0.x. If you start a new VS Code extension, simply install yeoman and the extension generator using `npm install -g yo generator-code` and run it using `yo code`. If you have an existing extension using TypeScript 1.8.x, you can migrate it to TypeScript 2.0.3 using the following steps.  \nOpen the `package.json` file and do the following changes:  \n- Change the TypeScript developer dependency from `\"typescript\": \"x.x.x\"` to `\"typescript\": \"^2.0.3\"`.\n- Add a developer dependency for the Node.js typings using `\"@types/node\": \"^6.0.40\"`.\n- If your extension has Mocha tests, change the developer dependency to at least Mocha version 2.3.3.\n- Add a developer dependency for the Mocha typing using `\"@types/mocha\": \"^2.2.32\"`.\n- In the script section, exchange the `compile` script with `\"compile\": \"tsc -watch -p ./\"` and the `vscode:prepublish` with `\"vscode:prepublish\": \"tsc -p ./\"`.  \nThe `devDependencies` section should look like this:  \n```json\n\"devDependencies\": {\n\"typescript\": \"^2.0.3\",\n\"vscode\": \"^1.0.0\", // Or a higher version if necessary\n\"mocha\": \"^2.3.3\",\n\"@types/node\": \"^6.0.40\",\n\"@types/mocha\": \"^2.2.32\"\n}\n```  \nand the `scripts` section something like this:  \n```json\n\"scripts\": {\n\"vscode:prepublish\": \"tsc -p ./\",\n\"compile\": \"tsc -watch -p ./\",\n\"postinstall\": \"node ./node_modules/vscode/bin/install\"\n}\n```  \n- Open the `tsconfig.json` file and exchange the line `\"noLib\": true` with `\"lib\": [ \"ES6\" ]` and `\"target\": \"ES5\"` with `\"target\": \"ES6\"`.  \nThe file should look something like this:  \n```json\n{\n\"compilerOptions\": {\n\"module\": \"CommonJS\",\n\"target\": \"ES6\",\n\"outDir\": \"out\",\n\"lib\": [\n\"ES6\"\n],\n\"sourceMap\": true,\n\"rootDir\": \".\"\n},\n\"exclude\": [\n\"node_modules\",\n\".vscode-test\"\n]\n}\n```  \nThen delete the typings folder in the workspace and run `npm install` from a terminal.",
    "url": "https://code.visualstudio.com/updates/v1_6#_authoring-in-typescript",
    "id": 2315
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Authoring in JavaScript  \nThe Yeoman generator has also been updated to make use of the new TypeScript 2.0.x features to help write JavaScript. If you want to migrate an existing extension to use TypeScript 2.0.3 for JavaScript authoring do the following.  \nOpen the `package.json` file and do the following changes:  \n- Add a TypeScript developer dependency `\"typescript\": \"^2.0.3\"`.\n- Add a developer dependency for the Node.js typings using `\"@types/node\": \"^6.0.40\"`.\n- If your extension has Mocha tests, change the developer dependency to at least Mocha version 2.3.3.\n- Add a developer dependency for the Mocha typing using `\"@types/mocha\": \"^2.2.32\"`.\n- We also recommend using ESLint for linting JavaScript source code. To do so, add the following entry as a developer dependency as well: `\"eslint\": \"^3.6.0\"`. In addition we recommend installing the [ESLint extensions](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint).  \nThe `devDependencies` section should now look something like this:  \n```json\n\"devDependencies\": {\n\"typescript\": \"^2.0.3\",\n\"vscode\": \"^1.0.0\", // Or a higher version if necessary\n\"mocha\": \"^2.3.3\",\n\"eslint\": \"^3.6.0\",\n\"@types/node\": \"^6.0.40\",\n\"@types/mocha\": \"^2.2.32\"\n}\n```  \n- Open the `jsconfig.json` file and exchange the line `\"noLib\": true` with `\"lib\": [ \"ES6\" ]` and `\"target\": \"ES5\"` with `\"target\": \"ES6\"`.  \nThe file should look something like this:  \n```json\n{\n\"compilerOptions\": {\n\"module\": \"CommonJS\",\n\"target\": \"ES6\",\n\"lib\": [\n\"ES6\"\n]\n},\n\"exclude\": [\n\"node_modules\"\n]\n}\n```  \nPlease note that although the target is set to `ES6` you still have to import other modules using require statements. Node.js has no support yet for ES2015 modules.",
    "url": "https://code.visualstudio.com/updates/v1_6#_authoring-in-javascript",
    "id": 2316
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### New APIs  \n* We added an `onWillSaveTextDocument` event that is fired before a document is saved to disk. It allows an extension to change the document before saving and enables features like *remove unused imports on save*, *insert final newline*, etc.  \n* There is now `WorkspaceConfiguration#update` which allows extensions to add/update/remove configuration options. This should ease configuring the editor and extensions. For example, an extension would be able to configure a linter from a warning via a code action.  \n* `Terminal#processId` returns a `Thenable<number>` containing the process ID of the terminal's shell process (eg. bash or cmd).  \n* `window.createTerminal` now includes parameters to set the path and arguments of the shell. This will allows an extension to consistently launch the shell of choice, for example a Python or PowerShell REPL.  \n* `window.onDidCloseTerminal` is a new event that allows extensions to easily track when terminals are closed by the user. Currently, like the rest of the API, this is restricted to only terminals created by the API.",
    "url": "https://code.visualstudio.com/updates/v1_6#_new-apis",
    "id": 2317
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Breaking Change: Button order in messages  \nWhen using any of the methods `showInformationMessage`, `showWarningMessage`, and `showErrorMessage`, you could always pass in a set of strings to show as actions next to the message. Previously, the order of messages was reversed such as the action you passed in first was shown last. We fixed this unexpected behavior in this release and actions are now displayed in order. Please check your extension for usage of this API to see if you are impacted. We think that the new behavior is more natural and thus did not add code that would keep the previous behavior.",
    "url": "https://code.visualstudio.com/updates/v1_6#_breaking-change:-button-order-in-messages",
    "id": 2318
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Breaking Change: Terminals are created in the background  \nAs mentioned in the API documentation, the `window.createTerminal` and `Terminal.sendText` will now be created in the background. So whenever an extension wants to show their terminal in the terminal panel, it requires an explicit call to `Terminal.show`.",
    "url": "https://code.visualstudio.com/updates/v1_6#_breaking-change:-terminals-are-created-in-the-background",
    "id": 2319
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Debug Extension Authoring  \n### VS Code Debug Protocol  \nThe VS Code debug protocol specification is now maintained as a [language neutral JSON schema](https://github.com/microsoft/vscode-debugadapter-node/blob/main/debugProtocol.json) instead of a TypeScript definition file. This schema can be used to generate client or server libraries for a specific language automatically. The project [vscode-debugadapter-node](https://github.com/microsoft/vscode-debugadapter-node) contains a [simple program](https://github.com/microsoft/vscode-debugadapter-node/blob/main/src/generator.ts) to generate the TypeScript `d.ts` from the schema. This program can be used as a starting point for other languages.",
    "url": "https://code.visualstudio.com/updates/v1_6#_vs-code-debug-protocol",
    "id": 2320
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### External Terminal support for 'runInTerminal' request  \nDebug adapters can now easily run the debug target in an **External Terminal** via the `runInTerminal` request and passing a value `external` for the `kind` parameter. The **External Terminal** is an alternative to the **Integrated Terminal** and supports development of command line applications that read from an interactive terminal and/or need to control their output on the terminal they are running in. Before calling `runInTerminal` make sure that the front-end client supports it by verifying that the arguments passed to the `initialize` request have a `supportsRunInTerminalRequest` attribute and that its value is true.",
    "url": "https://code.visualstudio.com/updates/v1_6#_external-terminal-support-for-'runinterminal'-request",
    "id": 2321
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Initial Configurations contributed by a command  \nIt is now possible for a debug adapter to specify a command name as a value for `initialConfigurations` attribute of the `debuggers` contribution in the `package.json` file. The debug adapter extension can then register the specified command which will get called once the `launch.json` file is generated for the first time. The command needs to return the initial content of the `launch.json` file - this way debug adapters have more flexibility on customizing `launch.json`. Our example mock debug illustrates this: ['initialConfigurations' contribution](https://github.com/microsoft/vscode-mock-debug/blob/main/package.json#L83) and [command registration](https://github.com/microsoft/vscode-mock-debug/blob/main/src/extension.ts#L29).",
    "url": "https://code.visualstudio.com/updates/v1_6#_initial-configurations-contributed-by-a-command",
    "id": 2322
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Debug Protocol Additions  \nDebug adapters can now implement 'hit count' support for breakpoints. With this, a user can specify how many hits of a breakpoint to ignore before it 'breaks' the execution. The `SourceBreakpoint` and `FunctionBreakpoint` types now support an optional attribute `hitCondition` for passing a hit count expression to the debug adapter. To enable the UI for this feature in VS Code, a debug adapter has to set the `supportsHitConditionalBreakpoints` capability to true.  \n>**Note:** In the September release, VS Code does not implement UI for editing the hit count condition.",
    "url": "https://code.visualstudio.com/updates/v1_6#_debug-protocol-additions",
    "id": 2323
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n## Miscellaneous  \n### New location for dirty indicator when Tabs are disabled  \nWe decided to move the dirty (unsaved file) indicator over to the **Close** button when Tabs (tabbed headers) are disabled. This makes the experience consistent with other places where we replace the Close button with the dirty indicator (for example, inside **OPEN EDITORS** or when Tabs are enabled).  \n![Status](images/1_6/dirty.png)",
    "url": "https://code.visualstudio.com/updates/v1_6#_new-location-for-dirty-indicator-when-tabs-are-disabled",
    "id": 2324
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Electron update  \nIn this release, we decided to take a major update of the [Electron](https://github.com/electron/electron) framework. We now run with version **1.3.7** which brings big version increments to the Chrome rendering engine (from **49** to **52**) and Node.js (from **5.10.0** to **6.5.0**). This also means that all extensions can expect the full Node.js **6.5.0** runtime when running in this VS Code release. For a full list of changes in Node.js, please refer to the [Node.js Changelog](https://github.com/nodejs/node/blob/master/CHANGELOG.md).  \n> **Note:** We don't recommend extensions to use native `npm` modules. But if you authored an extension that does use native modules, remember to recompile all of them.",
    "url": "https://code.visualstudio.com/updates/v1_6#_electron-update",
    "id": 2325
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Detecting a corrupt installation  \nWe have found ourselves spending many hours investigating VS Code issues that were ultimately caused by corrupt VS Code installations. Some extensions directly modify (patch) the VS Code product in such a way that is semi-permanent (until the next update) and this can cause hard to reproduce issues.  \nWe have therefore added a background check where we try to detect if the VS Code bits have been changed on disk. We are not trying to block VS Code patching, but we want to raise awareness that patching VS Code means you are running an unsupported version.  \n![corrupt install](images/1_6/corrupt-install.png)",
    "url": "https://code.visualstudio.com/updates/v1_6#_detecting-a-corrupt-installation",
    "id": 2326
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Built-in Extensions  \nIt is now possible to bundle a selection of Marketplace extensions with VS Code. These extensions appear as _Built-in_ extensions. This allows us to decouple bundled extension development from VS Code's core development.  \n![builtin](images/1_6/builtin.png)",
    "url": "https://code.visualstudio.com/updates/v1_6#_built-in-extensions",
    "id": 2327
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### Improvements in Issue Reporting  \nRelated to this, we often investigate issues that are caused by an installed extension. To help us with these investigations, we have enriched the **Help** > **Report Issues** action to seed the issue description with the list of installed extensions.  \nPlease use this action when reporting issues so we have more information to help track down the problem and ultimately resolve the issue for you quicker.",
    "url": "https://code.visualstudio.com/updates/v1_6#_improvements-in-issue-reporting",
    "id": 2328
  },
  {
    "content": "See what is new in the Visual Studio Code September 2016 Release (1.6)\n### macOS Sierra support  \nApple recently released the final version of macOS Sierra and with the Electron update, we were able to fix some issues we had seen (fonts and icons did not look sharp on a Retina display). However, [some users](https://github.com/microsoft/vscode/issues/12473) are seeing bad background artifacts in the editor the underlying issue is Chrome related and it seems to happen when you are using a custom color profile. There is a workaround, you can run VS Code with forced GPU rasterization to mitigate this issue:  \n```bash\ncode --force-gpu-rasterization\n```",
    "url": "https://code.visualstudio.com/updates/v1_6#_macos-sierra-support",
    "id": 2329
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Terminal editor confirmation dialog  \nThe dialog presented when closing a terminal editor with running child processes is now specific for the terminal editor and will no longer offer a way to \"Save\" the terminal.  \n![Terminal editor confirmation dialog](images/1_60/dirty-terminal-dialog.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_terminal-editor-confirmation-dialog",
    "id": 2331
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Keep editors open instead of closing when they fail to restore  \nPreviously, when an editor failed to restore after reload of the window or restart of the application, the editor would automatically close until an editor was found that successfully loads. This behavior led to frustrating results, where a carefully created editor layout would go away due to editors closing.  \nWith this release, an editor that was once successfully opened will not close, even if it fails to restore. The editor indicates the problem and offers to retry the operation:  \n![Keep editors open and offer to Try Again](images/1_60/keep-editor-open.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_keep-editors-open-instead-of-closing-when-they-fail-to-restore",
    "id": 2332
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Syntax highlighting of codeblocks in the Settings editor  \n[Fenced code blocks](https://docs.github.com/github/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#syntax-highlighting) in setting descriptions are now syntax highlighted:  \n![Syntax highlighting of TypeScript code in the Settings editor](images/1_60/settings-editor-highlighting.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_syntax-highlighting-of-codeblocks-in-the-settings-editor",
    "id": 2333
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Open Settings editor to the side  \nIt's now possible to open the Settings editor in a side group by configuring a keybinding using the `openToSide` argument.  \n```json\n{\n\"key\": \"cmd+,\",\n\"command\": \"workbench.action.openSettings\",\n\"args\": {\n\"openToSide\": true\n}\n}\n```  \nThis also works with the `workbench.action.openSettingsJson` command.",
    "url": "https://code.visualstudio.com/updates/v1_60#_open-settings-editor-to-the-side",
    "id": 2334
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Editor  \n### High performance bracket pair colorization  \nThe editor now supports native bracket pair colorization:  \n![Side by side comparison with bracket pair colorization on and off](images/1_60/bracket-pair-colorization-on-off.drawio.png)  \nBracket pair colorization can be enabled by setting `\"editor.bracketPairColorization.enabled\": true`. All colors are themeable and up to six colors can be configured.  \nWe implemented this feature to address performance issues of the famous [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2) extension by [CoenraadS](https://github.com/CoenraadS).  \nNow, even changes in huge documents are reflected immediately:  \n<video src=\"images/1_60/bracket-pair-colorization-checker_ts.mp4\" autoplay loop controls muted title=\"Colorization of brackets at the top and bottom of a large file\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization",
    "id": 2335
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Inline suggestions in autocomplete  \nInline suggestions can now extend the suggestion preview when the autocomplete widget is shown. If a suggestion that is selected in the autocomplete widget can be extended by an inline completion provider, the extension is shown in italic. Pressing `Tab` once will still only accept the autocomplete suggestion. Pressing `Tab` a second time will then accept the inline suggestion.  \n<video src=\"images/1_60/inline-suggestions-suggest-preview.mp4\" autoplay loop controls muted title=\"Accepting inline suggestion by pressing the Tab key twice\"></video>  \nThis feature requires the suggest preview to be enabled (`\"editor.suggest.preview\": true`).",
    "url": "https://code.visualstudio.com/updates/v1_60#_inline-suggestions-in-autocomplete",
    "id": 2336
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Updated Peek views  \nWe've given the Peek views a visual refresh to align with the rest of the other editor views:  \n![Peek view for informational items](images/1_60/peek-info.png)  \n![Peek view for warning items](images/1_60/peek-warning.png)  \n![Peek view for error items](images/1_60/peek-error.png)  \n![Peek view for References view](images/1_60/peek-references.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_updated-peek-views",
    "id": 2337
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Terminal  \n### Custom rendering of box drawing and block element characters  \nBox drawing and block element characters now use pixel-perfect custom glyphs instead of using the font when GPU acceleration is on (`terminal.integrated.gpuAcceleration`). This means, for example, that boxes are drawn without gaps, even if you set line height or letter spacing in the terminal.  \n![Terminal glyph rendering before with gaps](images/1_60/terminal-glyph-before.png)\n![Terminal glyph rendering after without gaps](images/1_60/terminal-glyph-after.png)  \nHere is an example of the terminal app [Zenith](https://github.com/bvaisvil/zenith) that shows the box drawing characters around sections as well as block elements for the charts:  \n![Terminal rendering box characters and block elements](images/1_60/terminal-custom-glyphs.png)  \nThis can be disabled by setting `\"terminal.integrated.customGlyphs\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_60#_custom-rendering-of-box-drawing-and-block-element-characters",
    "id": 2338
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Improved rendering of underscore for certain fonts  \nThere were some historical issues with how underscore is rendered in the terminal, most of which were fixed by switching to the WebGL renderer (default). There was one exception to this, where the underscore character in the font is unexpectedly drawn below the bounds of the cell on Linux.  \nNotice how the underscore on the lower row is rendered below the cell:  \n![The underscore was previously rendered 1 pixel below the cell's bounds](images/1_60/underscore-before.png)  \nWhile this works fine in most cases, it fails on the bottom row because it is drawn outside the bounds of the canvas.  \nWe now work around this problem by detecting such a font and shifting the underscore texture up until it is within the bounds of the cell. This solution also applies to the canvas renderer, which previously wouldn't show underscores for any rows because of how it clips the rows to avoid overlapping.  \n![The underscore is now at the bottom of the cell's bounds](images/1_60/underscore-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_improved-rendering-of-underscore-for-certain-fonts",
    "id": 2339
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Faster reconnection after reloading the window  \nPreviously, when reloading a window, it could take up to 300 ms to parse the state of a terminal's buffer and there was also the possibility of corruption. For several busy terminals, this can quickly add up! To fix this, the method of restoring the buffer has changed from recording a large number of recent raw terminal events on the [pty host](https://code.visualstudio.com/updates/v1_54#_new-terminal-process-layout) to maintaining a headless terminal frontend on the pty host and writing all data to that.  \nThis approach brings several benefits:  \n* The amount of scrollback to restore can be fine-tuned. The default is now 100, which is a good balance between speed and the amount of data. The scrollback amount can be changed with the `terminal.integrated.persistentSessionScrollback` setting.\n* Thanks to [xterm.js'](https://github.com/xtermjs/xterm.js) fast parser, this should have minimal impact on CPU usage and reduce overall memory usage on the pty host.\n* Terminal modes are now restored explicitly that could potentially get missed before and cause buffer corruption.\n* There is no longer the need to replay costly resize events as the terminal's buffer is always in sync with its size.\n* Since the restore is relatively quick, it's all handled in a single frame. This means that precious CPU time isn't wasted on rendering the partially restored terminal and slowing things down further.  \nHow much of a speedup this new implementation provides depends on many factors, like the number of terminals, hardware, terminal buffer size, and what was happening in the terminal. A rough estimate of restoring a full terminal buffer should yield an approximate speedup of 5-10x.  \nWe also published the new [xterm-headless](http://npmjs.com/package/xterm-headless) package on npm, so you can use this work in your own project.",
    "url": "https://code.visualstudio.com/updates/v1_60#_faster-reconnection-after-reloading-the-window",
    "id": 2340
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Debugging  \n### Set Value in WATCH view  \nIt is now possible to set the value of a watched expression in the WATCH view using the **Set Value** action in the context menu.  \n![Shows WATCH view with the Set Value action selected in the context menu](images/1_60/set-value.png)  \nDebug extensions have to opt into this feature in order for **Set Value** to be available. For now, the JS-debug, C#, and C++ extensions support this, but we expect other debug extensions to follow soon.",
    "url": "https://code.visualstudio.com/updates/v1_60#_set-value-in-watch-view",
    "id": 2341
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Minor UI improvements  \n* VS Code now detects links for values also in the VARIABLES view, WATCH view, and Debug hover. When a variable's value is a link, this will make it easier to follow that link by clicking on it.\n* When starting another instance of a debug session that is already running, there is now a modal confirmation dialog to prevent accidentally starting two sessions.\n* Clicking on a disabled breakpoint in the editor's breakpoint gutter now enables the breakpoint instead of removing it.\n* When a debug session is active, the **Run To Line** action is now available in the editor's breakpoint gutter context menu:  \n<video src=\"images/1_60/run-to-line.mp4\" autoplay loop controls muted title=\"Run to Line action in breakpoints gutter\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_60#_minor-ui-improvements",
    "id": 2342
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### New settings  \n* If you want to avoid accidentally closing the window during a debug session, you can enable the new setting `debug.confirmOnExit`. With this set to `always`, you will be prompted to confirm that you want to stop the debug session when closing the window.  \n![Confirm quit while debugging](images/1_60/debug-confirm-exit.png)  \n* A new setting `debug.console.acceptSuggestionOnEnter` controls whether suggestions should be accepted on `Enter` in the Debug Console. `Enter` is also used to evaluate whatever is typed in the Debug Console, so this option gives users better control over what happens when pressing `Enter`.",
    "url": "https://code.visualstudio.com/updates/v1_60#_new-settings",
    "id": 2343
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### JavaScript debugging  \n**Legacy node debuggers are gone**  \nVS Code has long included a built-in Node.js debugger, and published a separate Chrome debugger. Last year we introduced a new debugger for Node.js and Chrome, and since VS Code 1.47 (July 2020) it has been the default, with an 'opt out' option.  \nWith this release, the **old** debuggers have been removed from the product and marked as deprecated on the Marketplace. If you're among the majority of VS Code users who didn't opt out of the new JavaScript debugger, nothing will change for you.  \nIf you require the old debuggers\u2014to debug Node.js 6 programs, for example\u2014you can install the [[Deprecated] Node Debug](https://marketplace.visualstudio.com/items?itemName=ms-vscode.node-debug) or [[Deprecated] Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension and use the `legacy-node` or `legacy-chrome` launch types, respectively.  \n**Improved stepping in async functions and Node.js internals**  \nYou can set the debugger's [skipFiles](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_skipping-uninteresting-code) to avoid stepping into certain code, including Node.js internals, which can often be hit when stepping around async functions.  \nHowever, Node.js does not always exhibit correct behavior when dealing with [\"blackboxed\"](https://chromedevtools.github.io/devtools-protocol/tot/Debugger/#method-setBlackboxPatterns) scripts, so this iteration we've introduced \"synthetic blackboxing\" in the debugger. This should result in significantly improved reliability when working with Node.js programs, particularly when stepping into async functions.  \nIn our next release, we plan to make the debugger skip Node.js internals by default.",
    "url": "https://code.visualstudio.com/updates/v1_60#_javascript-debugging",
    "id": 2344
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Installer  \n### Register VS Code for supported file types by default  \nWindows 11 introduces a [new File Explorer context menu](https://blogs.windows.com/windowsdeveloper/2021/07/19/extending-the-context-menu-and-share-dialog-in-windows-11/) that puts **Open With** to the top of the menu, grouped with **Open**. The update makes it easier to find all available editors and change defaults.  \nFollowing the new best practices, VS Code's checkbox **Register VS Code to be the editor for associated file types** will now be checked on by default during Windows installation. We also reviewed the list of associated file types and expanded it to include more of the frequently opened file types.",
    "url": "https://code.visualstudio.com/updates/v1_60#_register-vs-code-for-supported-file-types-by-default",
    "id": 2345
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Microsoft Store on Windows 11  \nWith the upcoming Windows 11, the new Microsoft store can support more traditional application types and installers. If you are already testing Windows 11 via the Windows Insiders program, you can now install the latest release of VS Code today by searching for it in the store. Once installed, you will have the same VS Code that is available as a user install from our website and updates will be handled in-app, just like they are today.",
    "url": "https://code.visualstudio.com/updates/v1_60#_microsoft-store-on-windows-11",
    "id": 2346
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Notebooks  \n### Links between Markdown cells  \nNotebooks now support links between Markdown cells:  \n<video src=\"images/1_60/notebook-links.mp4\" autoplay loop controls muted title=\"Clickable links to the headers of other notebook cells\"></video>  \nYou can create a link to a header in a Markdown cell using:  \n```markdown\n[Link text](#header-slug)\n```  \n`header-slug` is the lowercase text of the header with any spaces or special characters replaced with `-`. The link in the example above will go to the header `# Header Slug`.",
    "url": "https://code.visualstudio.com/updates/v1_60#_links-between-markdown-cells",
    "id": 2347
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Performance improvements when dealing with large outputs  \nWe've optimized how we deal with large outputs in notebooks to significantly improve performance.  \nBehind the scenes, VS Code stores notebook outputs as binary data using [Uint8Arrays](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array). Previously, when transferring output data between the extension host process and the renderer process, data was first converted to an array of number values and then serialized to JSON.  \nTo understand why this is bad for performance, consider a notebook that outputs the text: `Hello Code!`. This is stored internally as a `Uint8Array`:  \n```js\nnew Uint8Array([72, 101, 108, 108, 111, 32, 67, 111, 100, 101, 33])\n```  \nThat data is 11 bytes long. The old implementation would then convert the binary data to a JSON string:  \n```js\n\"[72,101,108,108,111,32,67,111,100,101,33]\"\n```  \nThis string is 41 bytes long, which is over 3.5x times the size of our original data! That's a lot extra bytes to transfer and the receiver now has to parse that string as JSON to convert it back into a `Uint8Array`. This parsing can become a significant bottleneck for notebook outputs that are tens of MB in size.  \nWith the new implementation, notebook outputs are kept as binary data while transferring them. You can read more about the details of how this was implemented [in the pull request](https://github.com/microsoft/vscode/pull/130452).  \nThis fix significantly improves both loading of notebooks with large outputs saved into them, as well as improving performance when notebooks generate large outputs during execution.",
    "url": "https://code.visualstudio.com/updates/v1_60#_performance-improvements-when-dealing-with-large-outputs",
    "id": 2348
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### onNotebook activation event improvement  \nVS Code will emit `onNotebook:{type}` and `onNotebook:*` events when a notebook is opened in the workspace so that notebook extensions can be activated when listening to these events. Previously, VS Code would wait for all extensions listening to these two events prior to opening a file, but now it will only wait for the serializer for the specific notebook to be registered. For example, when users open an `ipynb` file in a fresh workspace, the built-in `ipynb` serializer extension will be activated and the file opened immediately. At the same time, VS Code emits activation events to all other extensions, for example, Jupyter, .NET Interactive, or Julia extensions. The activation of other extensions will not slow down file operations to ensure fast notebook opening.",
    "url": "https://code.visualstudio.com/updates/v1_60#_onnotebook-activation-event-improvement",
    "id": 2349
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Notebook layout customization  \nYou can now customize the notebook layout settings directly through the editor toolbar.  \n![Notebook layout customization actions available in the editor toolbar](images/1_60/notebook-layout-customization.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_notebook-layout-customization",
    "id": 2350
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Language Features  \n### TypeScript 4.4  \nVS Code now includes TypeScript 4.4. This update brings support for a number of new language features and improvements, including [static blocks](https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#static-blocks) and [new strictness options](https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#exact-optional-property-types). It also adds new tooling improvements and fixes some important bugs.  \nYou can read all about TypeScript 4.4 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-4).",
    "url": "https://code.visualstudio.com/updates/v1_60#_typescript-4.4",
    "id": 2351
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Inlay hints for JavaScript and TypeScript  \nThe most significant new tooling feature in TypeScript 4.4 is inlay hint support. Inlay hints add additional inline information to source code to help you understand what the code does.  \nParameter name inlay hints, for example, show the names of parameters in function calls:  \n![Parameter name inlay hints](images/1_60/ts-inlay-parameters.png)  \nThis can help you understand the meaning of each argument at a glance, which is especially helpful for functions that take Boolean flags or have parameters that are easy to mix up.  \nTo enable parameter name hints, set `javascript.inlayHints.parameterNames.enabled` or `typescript.inlayHints.parameterNames.enabled` settings. There are three possible values:  \n* `none` -Disable parameter inlay hints.\n* `literals` -Only show inlay hints for literals (string, number, Boolean).\n* `all` -Show inlay hints for all arguments.  \nIn addition, VS Code also offers inlay hints that show implicit type information in your JavaScript and TypeScript code.  \n**Variable type inlay hints** show the types of variables that don't have explicit type annotations.  \nSettings - `javascript.inlayHints.variableTypes.enabled` and `typescript.inlayHints.variableTypes.enabled`  \n![Variable type inlay hints](images/1_60/ts-inlay-var-types.png)  \n**Property type inlay hints** show the type of class properties that don't have an explicit type annotation.  \nSettings- `javascript.inlayHints.propertyDeclarationTypes.enabled` and `typescript.inlayHints.propertyDeclarationTypes.enabled`  \n![Property type inlay hints](images/1_60/ts-inlay-property-types.png)  \n**Parameter type hints**  show the types of implicitly typed parameters.  \nSettings - `javascript.inlayHints.parameterTypes.enabled` and `typescript.inlayHints.parameterTypes.enabled`  \n![Parameter type inlay hints](images/1_60/ts-inlay-parameter-types.png)  \n**Return type inlay hints** show the return types of functions that don't have an explicit type annotation.  \nSettings - `javascript.inlayHints.functionLikeReturnTypes.enabled` and `typescript.inlayHints.functionLikeReturnTypes.enabled`  \n![Return type inlay hints](images/1_60/ts-inlay-return-type.png)  \nWe plan to continue improving inlay hints going forward so be sure to [share any feedback](https://github.com/microsoft/vscode/issues/new/choose) you have on the new feature!",
    "url": "https://code.visualstudio.com/updates/v1_60#_inlay-hints-for-javascript-and-typescript",
    "id": 2352
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Spelling suggestions in JavaScript files  \nVS Code now helps you catch simple spelling mistakes in JavaScript files:  \n![Spelling suggestions in a plain JS files](images/1_60/js-spelling.png)  \nSpelling suggestions are only shown if there is fairly high confidence that they are actual mistakes and not just code patterns that our IntelliSense engine doesn't understand. You can read more about the details of this [in the PR that added the feature](https://github.com/microsoft/TypeScript/pull/44271).  \nYou also can disable these suggestions by setting:  \n```json\n\"javascript.suggestionActions.enabled\": false\n```  \nFor more comprehensive checking, try [enabling full semantic checking in your JavaScript code](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript). Not only can this help catch more errors, it also enables several helpful Quick Fixes.",
    "url": "https://code.visualstudio.com/updates/v1_60#_spelling-suggestions-in-javascript-files",
    "id": 2353
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### typescript.tsserver.useSyntaxServer  \nThe new `typescript.tsserver.useSyntaxServer` setting allows you to control if TypeScript launches a dedicated server to quickly handle syntax-related operations, such as computing code folding. It replaces the now deprecated `typescript.tsserver.useSeparateSyntaxServer` setting.  \nPossible values are:  \n* `auto` -Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations such as code folding and provide IntelliSense while projects are loading. (Default)\n* `always`-Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.\n* `never`-Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.",
    "url": "https://code.visualstudio.com/updates/v1_60#_typescript.tsserver.usesyntaxserver",
    "id": 2354
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Preview features  \n### Locked editor groups  \nWith the introduction of [terminals in the editor area](https://code.visualstudio.com/updates/v1_58#_terminals-in-the-editor-area), we received reports from users who were frustrated that a terminal editor would be replaced with a file editor too easily or by accident. By default, files will always open in the active editor group and thus, even when a terminal was active, a file would open and hide the terminal.  \n**Locked editor groups** provide a new way of handling this issue, not only for terminals but for any editor. If you have more than one editor group opened, you can now lock it, either using one of the new commands or from the **\"...\"** overflow menu:  \n![Lock Group action on the editor context menu](images/1_60/locked-editor-group.png)  \nLocked groups behave differently than unlocked groups:  \n* New editors will not open in a locked group unless explicitly moved there by the user (for example, via drag and drop).\n* If an editor skips a locked group for opening, it will either open in the most recently used unlocked group or create a new group to the side of the locked one.\n* The locked state of an editor group is persisted and restored across restarts.\n* You can lock empty groups as well allowing for a more stable editor layout.\n* A locked group is indicated by a lock icon in the action toolbar (top right).  \n![Locked editor group layout with lock icon](images/1_60/locked-editor-layout.png)  \nSee the following demo of how locked editor groups behave in action. Even though the Markdown preview is active, new files will open in the left editor group:  \n<video src=\"images/1_60/locked-editor-group.mp4\" autoplay loop controls muted title=\"New files open to the left when Markdown preview is in a locked editor group\"></video>  \nThe commands added for this feature are:  \n* `workbench.action.experimentalLockEditorGroup`\n* `workbench.action.experimentalUnlockEditorGroup`\n* `workbench.action.experimentalToggleEditorGroupLock`  \nA new context key `activeEditorGroupLocked` is available to conditionally bind commands depending on the locked state of a group.  \n**Note:** The associated setting and commands are experimental until we have finalized the design of locked editor groups. We want your feedback on this new feature, so please do not hesitate to [report issues](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_60#_locked-editor-groups",
    "id": 2355
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Auto-lock an editor group  \nBuilding on top of the new locked editor groups concept, the new `workbench.editor.experimentalAutoLockGroups` setting allows you to select editors that should lock a group automatically when they open. This only applies when the editor is the first to open in an otherwise empty or new group.  \nTerminals are configured by default to cause a new group to lock automatically. In the short video below, even though the terminal is active, the selected file from the terminal will open in the left editor group:  \n<video src=\"images/1_60/auto-locked-editor-group.mp4\" autoplay loop controls muted title=\"Auto locked editor group\"></video>  \nIf you want Markdown previews to lock a group automatically, you can add `mainThreadWebview-markdown.preview: true` to the `experimentalAutoLockGroups` setting.  \nIn the next milestones, we will work on improving the settings UX to be able to pick editors without having to know their identifiers. The associated setting and commands are experimental until we have finalized the design of locked editor groups. Again we would like your [feedback](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_60#_auto-lock-an-editor-group",
    "id": 2356
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Quotes support in the \"Search by file name\" Quick Pick  \nThis iteration, we have added the ability to exclude fuzzy search results from the \"Search by file name\" Quick Pick (`kb(workbench.action.quickOpen)`) by placing the search string in quotes.  \nScenarios where this shines:  \nWhen a query is only a few characters:  \n<video src=\"images/1_60/quotes-quick-pick.mp4\" autoplay loop controls muted title=\"Query with only 2 characters yields more accurate results\"></video>  \nIf you want to reduce the \"clutter\" of the results:  \n<video src=\"images/1_60/quotes-query-pieces.mp4\" autoplay loop controls muted title=\"Results disappear when adding quotes\"></video>  \nWe like this quoting experience and it feels intuitive since most search engines use a similar mechanism, but we'd like your feedback. We are also considering other approaches discussed in [issue #131431](https://github.com/microsoft/vscode/issues/131431).",
    "url": "https://code.visualstudio.com/updates/v1_60#_quotes-support-in-the-search-by-file-name-quick-pick",
    "id": 2357
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Contributions to extensions  \n### Jupyter  \n**Run By Line**  \nVS Code now supports the **Run By Line** feature in Jupyter notebooks. This is a simple debug mode that lets you execute the code of a cell line by line. To try it out, make sure that you have `ipykernel` v6+ installed as your selected kernel, then select the **Run By Line** button.  \n<video src=\"images/1_60/jupyter-rbl.mp4\" autoplay loop controls muted title=\"Run By Line in Jupyter notebook\"></video>  \n**Debugging**  \nThere is also experimental support for debugging Jupyter notebooks using the full debug features of VS Code. To try it out, make sure you have `ipykernel` v6+ installed as your selected kernel, set `\"jupyter.experimental.debugging\": true`, set a breakpoint, and select the **Debug Cell** command.  \n<video src=\"images/1_60/jupyter-debug.mp4\" autoplay loop controls muted title=\"Debugging Jupyter notebook\"></video>  \n**Jupyter Keymap**  \nWe extracted the Jupyter classic keybindings to a separate [Jupyter Keymap extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-keymap), which you can disable if you prefer to use another set of [notebook keybindings](https://marketplace.visualstudio.com/search?term=%40tag%3Anotebook-keymap&target=VSCode&category=All%20categories&sortBy=Relevance) from the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_60#_jupyter",
    "id": 2358
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Python  \n**Revamped testing interface**  \nThanks to the [new testing API](https://code.visualstudio.com/api/extension-guides/testing), the [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) has revamped its testing features.  You can now enjoy a more stable experience for test discovery, navigation, and status rendering, as well as new features such as search tests, run a selection of tests, rerun last executed test, and more!  \n![Running tests with the new Python Test Explorer](images/1_60/python-test-explorer.png)  \n**Run and debug Python files in the terminal from the editor**  \nYou can now run **and debug** your Python files in the terminal directly from the editor with the Python extension.  \n<video src=\"images/1_60/python-run-and-debug-buttons.mp4\" autoplay loop controls muted title=\"Using the new button to run and debug a Python file\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_60#_python",
    "id": 2359
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### GitHub Pull Requests and Issues  \nThe much requested ability to expand and collapse all comments in the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension is now available. All comments can be expanded and collapsed via the commands **GitHub Pull Requests: Expand All Comments** and **GitHub Pull Requests: Collapse All Comments**. There is also a setting `githubPullRequests.commentExpandState` to control the expand collapse state. Finally, you can also collapse all comments from within the commenting UI:  \n![Collapse all pull request comments button](images/1_60/collapse-all-comments-button.png)  \nTo learn about all the new features and updates, you can see the full [changelog for the 0.30.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0300) release of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_60#_github-pull-requests-and-issues",
    "id": 2360
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Extension authoring  \n### Web extensions  \nWhen VS Code is running in a browser, extensions are loaded into an extension host also running in the browser. The \"web extension host\" is constrained by the browser and extensions do not have access to the local file system or platform features. To help extension authors update their extensions to support running in VS Code for the web, there is now a [Web Extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) authoring guide. Here you will learn which types of extensions work best on the web, how to access the VS Code APIs, and work with virtual file systems.  \nAlong with the web extension guide, the `yo code` [extension generator](https://www.npmjs.com/package/generator-code) now has an option to scaffold a **Web Extension**, and also includes support for the `@vscode/test-web` module to test web extensions from the command line.  \nIf you haven't seen Visual Studio Code for the Web in action, you can press `'.'` (the period key) in the **<> Code** tab of a GitHub repository and you will launch a web-based version of VS Code to browse and edit the source code.",
    "url": "https://code.visualstudio.com/updates/v1_60#_web-extensions",
    "id": 2361
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Short title for commands  \nThe [commands](https://code.visualstudio.com/api/references/contribution-points#contributes.commands) contribution point allows extensions to define UI-properties for commands, like title, category, or icon. Menus, on the other hand, are \"places\" that display commands and menus may present some or all of the command's UI-properties. For instance, some menus render only icons while others render titles or category plus title. As an extension author, it can be hard to come up with a command title that works equally well for global and local menus. For example, the Command Palette can display more words than a context menu.  \nTo allow for different titles, there is a new `shortTitle` property. It allows commands to provide a shorter title that works well depending on the UI, such as **Notebook: Clear All Cell Output** in the Command Palette and shorter **Clear All** in the notebook toolbar.",
    "url": "https://code.visualstudio.com/updates/v1_60#_short-title-for-commands",
    "id": 2362
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Application host added to environment namespace  \nThe `.env` namespace now includes the application host `appHost` property. `appHost` allows extension developers to determine the environment VS Code is hosted in. Examples include desktop, GitHub Codespaces, github.dev, and vscode.dev.",
    "url": "https://code.visualstudio.com/updates/v1_60#_application-host-added-to-environment-namespace",
    "id": 2363
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### RendererContext.workspace.isTrusted for notebook renderers  \nThe new `workspace.isTrusted` property on the context object passed to [notebook renderers](https://github.com/microsoft/vscode-extension-samples/tree/main/notebook-renderer-sample) lets extension authors check if the current workspace is trusted or not:  \n```ts\nimport type { ActivationFunction } from 'vscode-notebook-renderer';\n\nexport const activate: ActivationFunction<void> = (ctx) => {\nreturn {\nrenderOutputItem: (outputInfo, element) => {\nif (ctx.workspace.isTrusted) {\n// Render normally. Still take precautions to avoid script injection and\n// only enable as much functionality as your renderer needs.\n} else {\n// Only render safe content. Always make sure it has been properly sanitized.\n}\n}\n}\n};\n```",
    "url": "https://code.visualstudio.com/updates/v1_60#_renderercontext.workspace.istrusted-for-notebook-renderers",
    "id": 2364
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Platform-specific extensions  \nWe have been making progress on [platform-specific extensions](https://github.com/microsoft/vscode/issues/23251), which allow extensions authors to create separate extension versions for different platforms (Windows, macOS, Linux). We have been working with the Marketplace team on this feature and have finalized on a solution. In this milestone, we started on the implementation and plan to bring it to extension authors soon. You can follow [issue #23251](https://github.com/microsoft/vscode/issues/23251) for updates and to provide feedback.",
    "url": "https://code.visualstudio.com/updates/v1_60#_platform-specific-extensions",
    "id": 2365
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Updated codicons  \nThe following new icons were added to our [codicon library](https://code.visualstudio.com/api/references/icons-in-labels):  \n![An example of updated codicons](images/1_60/codicons-update.png)  \n* `folder-library`\n* `run-errors`",
    "url": "https://code.visualstudio.com/updates/v1_60#_updated-codicons",
    "id": 2366
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Updates to Walkthrough contributions  \n**Using themeable SVG's as Walkthrough step media**  \nWalkthrough steps can now specify a `svg` property in their `media` object. In addition to better scaling support, SVG's provide access to theme tokens, which can allow the media to visually fit in with the rest of the workbench. See our guide on [theming webview content](https://code.visualstudio.com/api/extension-guides/webview#theming-webview-content) for more information.  \n<video src=\"images/1_60/themed-walkthrough.mp4\" autoplay loop controls muted title=\"Example of built-in walkthrough using color themes\"></video>  \n**Declaring the files of interest for a Walkthrough**  \nWalkthroughs now support an optional `featuredFor` parameter, which lists out the file types that a given walkthrough applies to. When these files are found in a workspace folder, the walkthrough will be rendered with higher visual priority.",
    "url": "https://code.visualstudio.com/updates/v1_60#_updates-to-walkthrough-contributions",
    "id": 2367
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Tasks default group API  \nThe `isDefault` property for `TaskGroup` has been finalized. Extensions can now fetch tasks then read the `isDefault` property of the task's `group` to determine if a task is the default for that group.",
    "url": "https://code.visualstudio.com/updates/v1_60#_tasks-default-group-api",
    "id": 2368
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Debugger extension authoring  \n### New \"managedByParent\" property on \"DebugSessionOptions\"  \nA new flag `managedByParent` has been added to the `DebugSessionOptions` type. When passed to the `startDebugging` API, it controls whether lifecycle requests like `disconnect` and `restart` are sent to the newly created session or its parent session.",
    "url": "https://code.visualstudio.com/updates/v1_60#_new-managedbyparent-property-on-debugsessionoptions",
    "id": 2369
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Debug Adapter Protocol's \"showUser\" property  \nWhen a `launch` request fails, VS Code will now honor the `showUser` property sent with the response from the debug adapter. If the `showUser` property is provided and is false, VS Code will **not** show a modal dialog with the error. In case the `showUser` property is missing or is `true`, VS Code will behave as before and will show the error dialog.  \nFor other Debug Adapter Protocol (DAP) requests, there is no change. If `showUser` is `true`, the error will be shown using a notification. Otherwise, nothing will be shown to the user.",
    "url": "https://code.visualstudio.com/updates/v1_60#_debug-adapter-protocol's-showuser-property",
    "id": 2370
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### VS Code no longer registers breakpoints for \"noDebug\" debug sessions  \nWhen the `noDebug` property of DAP's `launch` request is set to `true`, VS Code will no longer call any breakpoint registering DAP requests (`setBreakpoints`, `setExceptionBreakpoints`, `setDataBreakpoints`, `setFunctionBreakpoints`, `setInstructionBreakpoints`).",
    "url": "https://code.visualstudio.com/updates/v1_60#_vs-code-no-longer-registers-breakpoints-for-nodebug-debug-sessions",
    "id": 2371
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### VS Code now supports the DAP \"setExpression\" request  \nIf a debug adapter implements the `setExpression` request (the `supportsSetExpression` capability is `true`), VS Code will use `setExpression` in two situations:  \n* In the VARIABLES and WATCH view, for changing the value of variables, if the debug adapter does not support the `setVariable` request (`supportsSetVariable` capability is missing or `false`) and if the variable has an `evaluateName` property and is editable (`readOnly` attribute in `VariablePresentationHint` is not `true`).\n* In the WATCH view, for changing the value of an assignable expression, if the watch expression is editable (`readOnly` attribute in `VariablePresentationHint` is not `true`).",
    "url": "https://code.visualstudio.com/updates/v1_60#_vs-code-now-supports-the-dap-setexpression-request",
    "id": 2372
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Suppressing the 'Open launch.json' button in DAP error messages  \nThe Debug Adapter Protocol permits the [Message](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Message) of an [ErrorResponse](https://microsoft.github.io/debug-adapter-protocol/specification#Base_Protocol_ErrorResponse) to return a `url`, where additional information about the message can be found, and a `urlLabel` that is presented to the user as the UI for opening the URL. When VS Code shows the message to the user in a modal dialog, a button is shown captioned with the `urlLabel`. Prior to this release, VS Code would also add a button captioned **Open launch.json**. That button is no longer added if the `url` of the message uses the 'command' scheme, for example `command:myExtension.fixError`.",
    "url": "https://code.visualstudio.com/updates/v1_60#_suppressing-the-'open-launch.json'-button-in-dap-error-messages",
    "id": 2373
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Debug Adapter Protocol  \n### New \"memory\" event released  \nThe `memory` event has been finished and is now available in version 1.49 of the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/) and the corresponding npm modules. If a debug adapter has received a value `true` for the `supportsMemoryEvent` capability of the `initialize` request, the debug adapter can emit the `memory` event to indicate that some memory range has been updated.",
    "url": "https://code.visualstudio.com/updates/v1_60#_new-memory-event-released",
    "id": 2374
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Create terminals anywhere  \nThe [proposed terminal location API](https://github.com/microsoft/vscode/blob/6d2920473c6f13759c978dd89104c4270a83422d/src/vs/vscode.proposed.d.ts#L929-L967) allows creating both terminal splits in the panel as well as in the editor area.",
    "url": "https://code.visualstudio.com/updates/v1_60#_create-terminals-anywhere",
    "id": 2375
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Query and event for whether a terminal has been \"interacted with\"  \nA new proposed API for [Terminal.state and window.onDidChangeTerminalState](https://github.com/microsoft/vscode/blob/6d2920473c6f13759c978dd89104c4270a83422d/src/vs/vscode.proposed.d.ts#L890-L927) allows querying whether a terminal has been \"interacted with\". An interaction means that data has been sent to the process, and could happen for various reasons, the main one being keyboard input.",
    "url": "https://code.visualstudio.com/updates/v1_60#_query-and-event-for-whether-a-terminal-has-been-interacted-with",
    "id": 2376
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Buttons in QuickPickItems  \nThere is a proposed API for [adding and handling buttons in a QuickPickItem](https://github.com/microsoft/vscode/blob/ecc7fdac9014976109db45db3143261a5795169d/src/vs/vscode.proposed.d.ts#L2889-L2899). We hope this will enable extensions to provide richer user interactions with the Quick Pick.  \n![Buttons in QuickPickItems](images/1_60/quick-pick-buttons.png)  \nTry it out and let us know what you think. One thing to note is that there is [currently a known issue around the scroll position](https://github.com/microsoft/vscode/issues/109969) of the Quick Pick, which we think will be amplified by this new proposed API. We are working on the right set of APIs to address this issue. Please let us know your thoughts by [engaging in the issue](https://github.com/microsoft/vscode/issues/109969).",
    "url": "https://code.visualstudio.com/updates/v1_60#_buttons-in-quickpickitems",
    "id": 2377
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Test tags  \n[Test tags](https://github.com/microsoft/vscode/issues/129456) are a proposed API that provide both a method for organizing tests, as well indicating which tests are runnable.",
    "url": "https://code.visualstudio.com/updates/v1_60#_test-tags",
    "id": 2378
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Non-error test output  \nThe test API supports test failure messages, but previously didn't have a way to associate non-error output with a certain test case. We're evaluating a way to do this, by passing an optional `TestItem` and `location` to the `TestRun.appendOutput` method. Please leave feedback on [issue #129201](https://github.com/microsoft/vscode/issues/129201) if you have any input!",
    "url": "https://code.visualstudio.com/updates/v1_60#_non-error-test-output",
    "id": 2379
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Inline Completion Provider: Interaction with Autocomplete widget  \nThe `InlineCompletionContext` has a new field `selectedCompletionInfo` that contains details of the currently selected suggestion in the autocomplete widget. Also, `InlineCompletionItemProvider`s are asked for inline suggestions whenever the user changes the selected item in the autocomplete widget. If the inline suggestion extends the selected suggestion item, the extension is shown in italic.",
    "url": "https://code.visualstudio.com/updates/v1_60#_inline-completion-provider:-interaction-with-autocomplete-widget",
    "id": 2380
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Engineering  \n### Fix support for RHEL7 and Centos7 distros  \nIn VS Code version 1.53, we updated our build images to consume newer Electron versions causing a change in CXXABI requirements for native modules that broke our rpm packages in some distros [issue #115784](https://github.com/microsoft/vscode/issues/115784). With update to Electron v13, we are now able to build our native modules with the same compiler toolchain as the runtime, specifically we now use Clang and statically link the libcxx from the runtime. This allows us to bypass the CXXABI requirements for only a small increase in binary size ~10 MB and bring back support for these distros. Thanks for your patience and help with testing on Insiders.",
    "url": "https://code.visualstudio.com/updates/v1_60#_fix-support-for-rhel7-and-centos7-distros",
    "id": 2381
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n## Documentation  \n### Julia in VS Code  \nThere is a new [Julia in Visual Studio Code](https://code.visualstudio.com/docs/languages/julia) topic describing [Julia programming language](https://julialang.org) support in VS Code with the [Julia extension](https://marketplace.visualstudio.com/items?itemName=julialang.language-julia). The Julia extension includes rich language features such as code completions, code navigation, and debugging as well as an integrated REPL and plot navigator.  \n![Julia extension](images/1_60/julia-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_60#_julia-in-vs-code",
    "id": 2382
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2021 Release (1.60)  \n### Azure Machine Learning  \nYou can read the [Azure Machine Learning in VS Code](https://code.visualstudio.com/docs/datascience/azure-machine-learning) overview to learn how the [Azure Machine Learning extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.vscode-ai) lets you work with Azure Machine Learning cloud-based [machine learning models](https://learn.microsoft.com/azure/machine-learning/overview-what-is-azure-machine-learning) directly from VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_60#_azure-machine-learning",
    "id": 2383
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Locked editor groups  \nWe introduced [locked editor groups](https://code.visualstudio.com/updates/v1_60#_locked-editor-groups) last milestone as an experimental new feature. During this milestone, the settings experience was improved allowing you to easily select an editor that should lock a group automatically when opening:  \n![Locked editor group setting](images/1_61/locked-editor-group-setting.png)  \nThe setting is now called `workbench.editor.autoLockGroups`. Similarly, the commands related to editor group locking have been renamed and are no longer experimental:  \n* `workbench.action.lockEditorGroup`\n* `workbench.action.unlockEditorGroup`\n* `workbench.action.toggleEditorGroupLock`",
    "url": "https://code.visualstudio.com/updates/v1_61#_locked-editor-groups",
    "id": 2385
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Indicate deleted and readonly editors via decorations  \nOpened editors can indicate whether they are readonly or whether their associated resource has been deleted from disk. This indication was given by appending \"deleted\" and/or \"readonly\" to the editor label, requiring quite a bit of space.  \nVS Code now uses decorations for this purpose:  \n* Editors with deleted resource appear with strikethrough and in red.\n* Editors with readonly resources appear with a lock icon.  \n![Editor readonly and deleted decorations](images/1_61/editor-readonly-deleted.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_indicate-deleted-and-readonly-editors-via-decorations",
    "id": 2386
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Split an editor into an existing group  \nWhen you split an editor to the side, VS Code opens a new editor group, even if an existing group is present to the side. However, there are times when you want to split an editor into an already existing group.  \n<video src=\"images/1_61/split-into-group.mp4\" autoplay loop controls muted title=\"Split into existing group\"></video>  \nTo support this, new commands were added:  \n* `workbench.action.splitEditorToPreviousGroup`: Split into the previous group.\n* `workbench.action.splitEditorToNextGroup`: Split into the next group.\n* `workbench.action.splitEditorToAboveGroup`: Split into the group above the current one.\n* `workbench.action.splitEditorToBelowGroup`: Split into the group below the current one.\n* `workbench.action.splitEditorToLeftGroup`: Split into the group to the left of the current one.\n* `workbench.action.splitEditorToRightGroup`: Split into the group to the right of the current one.\n* `workbench.action.splitEditorToFirstGroup`: Split into first group.\n* `workbench.action.splitEditorToLastGroup`: Split into last group.",
    "url": "https://code.visualstudio.com/updates/v1_61#_split-an-editor-into-an-existing-group",
    "id": 2387
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Shorter labels for diff editors  \nWhen you compare two files, the workspace relative folder path was prefixed on file names, making it hard to see the names of the files being compared.  \nIn this release, the folder is now hidden from the label, unless both file names are the same, matching the behavior for normal editor labels.  \nIf both file names are identical, a description is shown that hints at the folder difference:  \n![Diff editor comparing two files](images/1_61/diff-editor.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_shorter-labels-for-diff-editors",
    "id": 2388
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### macOS: File menu changes  \nOn macOS, if you select the **Open...** menu item from the **File** menu, you can open both files and folders. For new users, this may come as a surprise, and people tried to use the **Open Workspace** command to open a folder, when that menu item is specifically to open a `.code-workspace` file.  \nTo avoid confusion, we made slight adjustments to the file menu on macOS:  \n* A new entry **Open Folder...** opens a folder.\n* **Open Workspace...** was renamed to **Open Workspace from File...**  \n![macOS File menu](images/1_61/macos-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_macos:-file-menu-changes",
    "id": 2389
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Telemetry settings  \nThere is a new telemetry setting, `telemetry.telemetryLevel` that provides higher configuration granularity and lets users select whether they want to only send error telemetry and not general usage data. The values are `on`, `error`, and `off`. The values of `on` and `error` will also enable the crash reporter.  \nThe existing settings `telemetry.enableTelemetry` and `telemetry.enableCrashReporter` have been marked for deprecation in favor of the new `telemetry.telemetryLevel` setting but will continue to be respected.",
    "url": "https://code.visualstudio.com/updates/v1_61#_telemetry-settings",
    "id": 2390
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Minimap background transparency  \nIt is now possible to configure the [minimap](https://code.visualstudio.com/docs/getstarted/userinterface#_minimap) background opacity independently of the minimap text's opacity using the newly added `minimap.foregroundOpacity` color.",
    "url": "https://code.visualstudio.com/updates/v1_61#_minimap-background-transparency",
    "id": 2391
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Updated Help menu items  \nWith the ongoing improvements to the getting started experience, the **Help** menu items were updated to more commonly used names. This is based on learnings from new users but hopefully make it easier for everyone to find help. **Introductory Videos** is now **Video Tutorials** and **Interactive Playground** became **Editor Playground**. You will find the new names in both the **Help** menu and the Command Palette. The **Help** menu also has a **Show All Commands** entry as an additional entry point to open the Command Palette.",
    "url": "https://code.visualstudio.com/updates/v1_61#_updated-help-menu-items",
    "id": 2392
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Editor  \n### Bracket pair guides  \nThe editor now supports rudimentary bracket pair guides. Bracket pair guides use the same colors and the same algorithms as the bracket pair colorization feature. The bracket pair matching algorithms are described in detail in the recent [\"Bracket pair colorization 10,000x faster\"](https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization) blog post.  \nSimilar to indentation guides, the active bracket pair guide is highlighted.  \n![Bracket pair guides shown in the editor](images/1_61/bracket-pair-guides.png)  \nBracket pair guides can be enabled by configuring the `editor.guides.bracketPairs` setting (defaults to `false`).\nWe will continue iterating on this feature and explore vertical guides in the next release.",
    "url": "https://code.visualstudio.com/updates/v1_61#_bracket-pair-guides",
    "id": 2393
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Indentation guides settings  \nThe `editor.renderIndentGuides` and `editor.highlightActiveIndentGuide` settings have been deprecated in favor of `editor.guides.indentation` and `editor.guides.highlightActiveIndentation`.",
    "url": "https://code.visualstudio.com/updates/v1_61#_indentation-guides-settings",
    "id": 2394
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Source Control  \n### Publish or Sync \"action button\" for Git repositories  \nThe Git extension now adds a new \"action\" button to the Source Control view, to allow you to more easily publish or sync any unpushed changes.  \n![New Source Control view Sync button](images/1_61/scm-sync-button.png)  \n*Theme: [Amethyst Theme](https://marketplace.visualstudio.com/items?itemName=eamodio.amethyst-theme)*  \nBy default, the Git extension will add a **Sync Changes** button as shown above, if there are unpushed commits, or a **Publish Changes** button if the branch hasn't yet been published. Additionally, users can customize this behavior by configuring the `git.showUnpublishedCommitsButton` setting, which defaults to `whenEmpty` so that the button will only be shown if there are unpushed commits and there are no other changes in the view.  \nThis new action button is available as a new proposed API for Source Control extensions, see the [Proposed API section](#sourcecontrolactionbutton) below for more details.  \nAnd finally, users can completely disable the visibility of any action buttons in the Source Control view via the new `scm.showActionButton` setting, which overrides any Source Control extension's behavior.",
    "url": "https://code.visualstudio.com/updates/v1_61#_publish-or-sync-action-button-for-git-repositories",
    "id": 2395
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Increased limit on changed files display  \nPrior to this release, the Git extension had a hard-coded limit of 5000 changes that it could show in the Source Control view. The limit was to prevent the user from having to wait too long while VS Code processed all the changes reported by Git. This limit is now increased to 10,000 changes, and there is a new `git.statusLimit` setting to allow users to customize the limit (per repository if desired). This setting can also be set to `0` to disable the limit completely, but be aware this could cause updates to take a long time if there are lots of changes.  \nAdditionally, we've added the following warning indicator on the input box when the limit has been exceeded.  \n![New warning indicator, which reads \"Too many changes were detected. Only the first 10,000 changes will be shown below\"](images/1_61/scm-too-many-changes.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_increased-limit-on-changed-files-display",
    "id": 2396
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Terminal  \n### Fixed dimensions  \nYou can now statically set terminal dimensions via the **Terminal: Set Fixed Dimensions** command (`workbench.action.terminal.setDimensions`). This is useful for cases when line wrapping can be jarring or disruptive.  \nThe command will display a prompt where you can enter the preferred width and/or height.  \n![Terminal Set Fixed Dimensions column width prompt](images/1_61/terminal-dimension-dropdown.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_fixed-dimensions",
    "id": 2397
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Custom title and description  \nTerminal names are usually the name of the process they're associated with and it can sometimes be difficult to distinguish between terminals.  \nYou can now configure both the title and description using variables in the `terminal.integrated.tabs.title` and `terminal.integrated.tabs.description` settings.  \nThe current default values are:  \n```json\n{\n\"terminal.integrated.tabs.title\": \"${process}\",\n\"terminal.integrated.tabs.description\": \"${task}${separator}${local}${separator}${cwdFolder}\"\n}\n```  \nVariables available are:  \n* `${cwd}` - The terminal's current working directory\n* `${cwdFolder}` - The terminal's current working directory.\n* `${workspaceFolder}` - The workspace in which the terminal was launched.\n* `${local}` - Indicates a local terminal in a remote workspace.\n* `${process}` - The name of the terminal process.\n* `${separator}` - A conditional separator (\" - \") that only shows when surrounded by variables with values or static text.\n* `${sequence}` - The name provided to xterm.js by the process.\n* `${task}` - Indicates this terminal is associated with a task.",
    "url": "https://code.visualstudio.com/updates/v1_61#_custom-title-and-description",
    "id": 2398
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Emoji IMEs  \nEmojis are now supported for Input Method Editors (IME) on macOS.  \n![Dialog showing Emojis available in the Integrated Terminal for IME on macOS](images/1_61/emoji-ime.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_emoji-imes",
    "id": 2399
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Alt buffer active context key  \nSome terminal UI applications, like nano, use keyboard shortcuts that are consumed by the VS Code workbench, which limits their functionality when integrated within VS Code. A new [when clause context](https://code.visualstudio.com/api/references/when-clause-contexts) key, `TerminalContextKeys.altBufferActive`, directs keybindings to the terminal instead of the workbench when the alt buffer is active to work around this.",
    "url": "https://code.visualstudio.com/updates/v1_61#_alt-buffer-active-context-key",
    "id": 2400
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Languages  \n### New JavaScript and TypeScript language status item  \nThe current TypeScript version and IntelliSense state are now shown in the language Status bar item:  \n![The JavaScript and TypeScript IntelliSense status item showing config file and TypeScript version](images/1_61/ts-intellisense-status.png)  \nPreviously, the TypeScript version was always shown in the Status bar. You can pin the version to restore the old behavior:  \n<video src=\"images/1_61/ts-pin-version-status.mp4\" autoplay loop controls muted title=\"Pinning the TypeScript version via the status item to the Status bar\"></video>  \nThe language status item also shows the current file's `jsconfig/tsconfig` and will indicate if you are currently in [partial mode](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_partial-intellisense-mode).",
    "url": "https://code.visualstudio.com/updates/v1_61#_new-javascript-and-typescript-language-status-item",
    "id": 2401
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### IntelliSense across untitled files  \nAll untitled JavaScript and TypeScript files are now treated as part of the same project. This means that global symbols defined in one untitled file will now show up as suggestions in others.  \nThis better matches the behavior of on-disk files in the workspace. You can add an `import` or `export` to an untitled file to turn it into a module, which will hide its global variables from other files.",
    "url": "https://code.visualstudio.com/updates/v1_61#_intellisense-across-untitled-files",
    "id": 2402
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### IntelliSense across files on the web  \nIntelliSense now works across JavaScript and TypeScript files on [vscode.dev](https://vscode.dev) or [github.dev](https://github.dev) when VS Code is running in a browser.  \n![Cross file JavaScript IntelliSense on github.dev](images/1_61/ts-cross-file-github.png)  \nKeep in mind that when VS Code is running in the browser, it only has access to your currently opened files, so VS Code cannot provide project-wide IntelliSense features such as automatic imports.",
    "url": "https://code.visualstudio.com/updates/v1_61#_intellisense-across-files-on-the-web",
    "id": 2403
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### More consistent folding of JSX tags  \nWhen you fold a JSX tag in JavaScript or TypeScript, VS Code now continues to show the closing tag:  \n![Folding in JSX](images/1_61/ts-fold-jsx.png)  \nThis matches how folding works in HTML.",
    "url": "https://code.visualstudio.com/updates/v1_61#_more-consistent-folding-of-jsx-tags",
    "id": 2404
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Preview features  \n### TypeScript 4.5 support  \nThis update includes initial support for the upcoming TypeScript 4.5 release. See the [TypeScript 4.5 beta announcement post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta) for more information about the new language and tooling features. Some tooling highlights:  \n* Initial support for [JSX attribute completions](https://github.com/microsoft/TypeScript/issues/38891).\n* More accurate reference counts for the references CodeLens.  \nTo start using the TypeScript 4.5 nightly builds, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).  \nPlease share your feedback and let us know if you run into any bugs with TypeScript 4.5.",
    "url": "https://code.visualstudio.com/updates/v1_61#_typescript-4.5-support",
    "id": 2405
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Restore terminal sessions across application restarts  \nTerminal processes are disposed of when a VS Code window is closed. In this release, there is a new opt-in setting for recording and restoring the buffer and using it to recreate processes. Set `terminal.integrated.persistentSessionReviveProcess` to enable this.  \n![The terminal buffer gets restored on application restart with a message indicating when the snapshot was taken](images/1_61/buffer-restore.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_restore-terminal-sessions-across-application-restarts",
    "id": 2406
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Toggle size terminal to content width  \nYou can toggle the terminal width between fitting the full contents and wrapped lines via `kb(workbench.action.terminal.sizeToContentWidth)` or using the tab context menu action **Toggle Size to Content Width**.  \n<video src=\"images/1_61/terminal-content-width.mp4\" autoplay loop controls muted title=\"Toggling the terminal size to the content width\"></video>  \nThis is similar to, and shares the keybinding with, toggling wrapped lines in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_61#_toggle-size-terminal-to-content-width",
    "id": 2407
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Contributions to extensions  \n### Jupyter  \n**Table of Contents**  \nTable of Contents for Jupyter Notebooks can now be accessed via the command **Jupyter: Show Table of Contents** in the Command Palette. This same feature can also be accessed via an icon in the notebook toolbar.  \nThis feature applies to all notebooks within VS Code, hence is accessible via the [Outline view](https://code.visualstudio.com/docs/getstarted/userinterface#_outline-view) in the File Explorer.  \n<video src=\"images/1_61/notebook-toc.mp4\" autoplay loop controls muted title=\"Jupyter Table of Contents\"></video>  \n**Create new Notebooks via New File menu**  \nYou can now create a new Jupyter Notebook using the menu item **File** > **New File...**. This menu can also be accessed from the **New File...** item on the **Welcome** page or in the Command Palette.  \n<video src=\"images/1_61/notebook-new-file.mp4\" autoplay loop controls muted title=\"New notebooks via File menu\"></video>  \n**Debugging**  \nVS Code now supports full debug features for Jupyter Notebooks. To try it out, make sure you have `ipykernel` v6+ installed as your selected kernel, set a breakpoint, and select the **Debug Cell** command.  \n<video src=\"images/1_60/jupyter-debug.mp4\" autoplay loop controls muted title=\"Debugging Jupyter Notebook\"></video>  \n**Remote Debugging**  \nYou can also use **Run by Line** and debug Jupyter Notebooks using remote kernels. To try it out, connect to your remote kernel with the **Jupyter: Specify local or remote Jupyter server for connections** command, make sure you have `ipykernel` v6+ installed as your selected kernel, and use **Run by Line** or debugging as usual.  \n**Separate renderer extension**  \nJupyter Notebook renderers have been split out into a separate extension ([Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)), allowing users to view Notebook outputs such as plotly, vega, latex, and the like on [vscode.dev](https://vscode.dev) and [github.dev](https://github.dev).",
    "url": "https://code.visualstudio.com/updates/v1_61#_jupyter",
    "id": 2408
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Python  \n**New Python walkthrough**  \nThe Python extension now offers a walkthrough with some basic setup steps to improve the getting started experience for Python in VS Code.  \n![New Python walkthrough](images/1_61/new-python-walkthrough.png)  \n**Improved debugging experience**  \nWhen working with workspaces without a `launch.json` configuration file, the [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) would display a debugger configuration menu every time you started debugging a Python file or project. This could be particularly annoying when debugging a web application with custom arguments (such as Flask, Django, or FastAPI).  \nYou now no longer need to choose a configuration every time you start debugging, as the first selection you make is reused for the rest of the session.",
    "url": "https://code.visualstudio.com/updates/v1_61#_python",
    "id": 2409
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.31.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0310) release of the extension to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_61#_github-pull-requests-and-issues",
    "id": 2410
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.61 include:  \n* DNS names in forwarded ports.\n* Easy container additional feature selection.\n* Dev Containers extension can execute CLI commands in WSL.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_61.md).",
    "url": "https://code.visualstudio.com/updates/v1_61#_remote-development",
    "id": 2411
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Extension authoring  \n### Platform specific extensions  \nExtensions can now publish different VSIXs for each platform (Windows, Linux, macOS) supported by VS Code. Starting with VS Code version 1.61.0, VS Code looks for the extension package that matches the current platform. Starting with version 1.99.0, the [vsce](https://github.com/microsoft/vsce) extension publishing tool supports publishing **platform-specific extensions**.  \nPlatform-specific extensions are useful if your extension has platform-specific libraries or dependencies, so you can control the exact binaries that are included in a platform package. A common use case is when an extension uses **native node modules**.  \nMore about this can be found in our [platform-specific extensions documentation](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#platformspecific-extensions).",
    "url": "https://code.visualstudio.com/updates/v1_61#_platform-specific-extensions",
    "id": 2412
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Test tags and non-error output  \nThis month we shipped additional APIs for extensions building on the new [testing APIs](https://code.visualstudio.com/api/extension-guides/testing).  \n* [Test tags](https://github.com/microsoft/vscode/issues/129456) allow you to configure if and how certain tests can be run--or not.\n* [Non-error output](https://github.com/microsoft/vscode/issues/129201#issuecomment-897178325) allows you to associate additional console output with specific test cases.  \nMessages from the output are displayed inline, similarly to failure messages.  \n![Image showing \"hello world\" displayed inline beside a console.log statement](images/1_61/non-error-test-output.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_test-tags-and-non-error-output",
    "id": 2413
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Enable file system providers to declare a file as readonly  \nFile system providers can now mark individual files as readonly via a new `permissions` property on the `FileStat` object by setting the value of the property to `FilePermission.Readonly`. Readonly files are not editable.  \n**Note:** If all files should be treated readonly, you can use the existing `isReadonly` option when calling `registerFileSystemProvider`.",
    "url": "https://code.visualstudio.com/updates/v1_61#_enable-file-system-providers-to-declare-a-file-as-readonly",
    "id": 2414
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Settings editor extension categories  \nThe Settings editor now displays a subtree for an extension's `contributes.configuration` endpoint when there are categories.  \nTo create multiple categories, the `contributes.configuration` accepts an array of configurations, and the `title` key of each configuration is used for the section headings. There is also an `order` field, which allows categories to be reordered within the subtree.  \n![New Setting editor table of contents showing CSS language features having its own subtree](images/1_61/extension-toc-subtree.png)",
    "url": "https://code.visualstudio.com/updates/v1_61#_settings-editor-extension-categories",
    "id": 2415
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Type hierarchy  \nThe API proposal for adding type hierarchy providers has been finalized.",
    "url": "https://code.visualstudio.com/updates/v1_61#_type-hierarchy",
    "id": 2416
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### WebviewOptions.enableForms  \nThe new `enableForms` property on `WebviewOptions` allows you to enable or disable forms inside webviews. For backwards compatibility, `enableForms` defaults to true if you have already set `enableScripts`. Otherwise it defaults to false.  \nWe recommend disabling forms unless your webview content needs them.",
    "url": "https://code.visualstudio.com/updates/v1_61#_webviewoptions.enableforms",
    "id": 2417
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Terminal state  \nA new `state` property is exposed on the `Terminal` object, in addition to a corresponding `window.onDidChangeTerminalState` event, and indicates whether or not a terminal has been interacted with by the user. For example, an extension might want to wait until a user has interacted with the terminal to run an action.",
    "url": "https://code.visualstudio.com/updates/v1_61#_terminal-state",
    "id": 2418
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Running web extension tests on test data  \nThe [@vscode/test-web](https://www.npmjs.com/package/@vscode/test-web) node module offers a CLI and API to test web extensions in Chromium, Firefox, or Webkit.  \nNew for this milestone is the option `folderPath` to open VS Code for the Web on test data. An in-memory file system contains the resources of the given location so that tests have files to work with.  \n```sh\nvscode-test-web --browserType=chromium --extensionDevelopmentPath=$extensionLocation $testDataLocation\n```",
    "url": "https://code.visualstudio.com/updates/v1_61#_running-web-extension-tests-on-test-data",
    "id": 2419
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Updated codicons  \nThe following new icons were added to our [codicon](https://code.visualstudio.com/api/references/icons-in-labels) library:  \n![List of codicon icons that were added](images/1_61/codicons.png)  \n* `beaker-stop`\n* `bracket-dot`\n* `bracket-error`\n* `bracket`\n* `debug-continue-small`\n* `graph-line`\n* `graph-scatter`\n* `pie-chart`",
    "url": "https://code.visualstudio.com/updates/v1_61#_updated-codicons",
    "id": 2420
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Webview UI Toolkit for Visual Studio Code  \nThe [Webview UI Toolkit for Visual Studio Code](https://github.com/microsoft/vscode-webview-ui-toolkit) is a component library for building [webview-based extensions](https://code.visualstudio.com/api/extension-guides/webview) in Visual Studio Code.  \n![Webview Toolkit component artwork](images/1_61/webview-ui-toolkit-artwork.png)  \nFeatures of the library include:  \n* **Implements the Visual Studio Code design language:** Create extensions that have a consistent look and feel with the rest of the editor.\n* **Automatic support for color themes:** All components are designed with theming in mind and will automatically display the current editor theme.\n* **Use any tech stack:** The library ships as a set of web components, meaning developers can use the toolkit no matter what tech stack (React, Vue, Svelte, etc.) their extension is built with.\n* **Accessible out of the box:** All components ship with web standard compliant ARIA labels and keyboard navigation.",
    "url": "https://code.visualstudio.com/updates/v1_61#_webview-ui-toolkit-for-visual-studio-code",
    "id": 2421
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Virtual Workspaces extension guide  \nThere is a new [Virtual Workspaces](https://code.visualstudio.com/api/extension-guides/virtual-workspaces) extension guide to help extension authors test and update their extension when VS Code is running in virtual environments. With the introduction of extensions like [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub), which creates its own virtual file system, and new workflows like [vscode.dev](https://vscode.dev) and [github.dev](https://github.dev), where VS Code is running in your browser, extensions can no longer assume they have direct access to an on-disk file system or platform features.  \nThe Virtual Workspaces extension guide covers:  \n* Whether your extension will work in virtual workspaces without modification.\n* How to update your extension to work in a virtual workspace without an on-disk file system.\n* How to signal to VS Code whether to enable or disable your extension when running in a virtual workspace.",
    "url": "https://code.visualstudio.com/updates/v1_61#_virtual-workspaces-extension-guide",
    "id": 2422
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Tabs API  \nThere is a proposed API for reading and manipulating tabs. This unblocks common feature requests such as wanting access to the list of open resources when there is not a backing `textDocument`. You can provide feedback about this API in [issue #133532](https://github.com/microsoft/vscode/issues/133532).",
    "url": "https://code.visualstudio.com/updates/v1_61#_tabs-api",
    "id": 2423
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### MarkdownString.supportHtml  \nThe newly proposed `supportHtml` property on `MarkdownString` enables rendering of a safe subset of raw HTML that appears inside the Markdown text.  \nThe `supportHtml` property defaults to `false`. When disabled, VS Code will strip out any raw HTML tags that appear in the Markdown text.",
    "url": "https://code.visualstudio.com/updates/v1_61#_markdownstring.supporthtml",
    "id": 2424
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Controller renderer scripts now use JavaScript modules  \n`NotebookController.rendererScripts` lets notebook controllers preload a set of JavaScript files into the notebook before any renderers are run. These scripts can initialize the notebook or define global symbols that the renderers depend on.  \nThe renderer scripts were previously normal JavaScript files. These scripts could use a global symbol exported by VS Code to call VS Code specific APIs.  \nThis global symbol was not discoverable and also didn't give VS Code much control over the renderer scripts themselves. To fix that, renderer scripts now use JavaScript modules that export an `activate` function. This function is passed the VS Code API:  \n```js\ninterface KernelPreloadContext {\nreadonly onDidReceiveKernelMessage: Event<unknown>;\npostKernelMessage(data: unknown): void;\n}\n\nexport function activate(ctx: KernelPreloadContext): Promise<void> | undefined {\n...\n}\n```  \nThis change also better aligns the renderer script from a `NotebookController` with the rendering scripts provided by a contributed [notebook renderer](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer).",
    "url": "https://code.visualstudio.com/updates/v1_61#_controller-renderer-scripts-now-use-javascript-modules",
    "id": 2425
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Quick Pick keepScrollPosition property  \nThe `keepScrollPosition` property on the `QuickPick` object that you get back from `window.createQuickPick()` has been added as a proposed API. This allows you to control whether or not the scroll position (`cursorTop`) in the Quick Pick moves back to the top of the list.  \nHere are a few use cases for this API:  \n* Implementing a \"remove this item from the list\" option using the proposed [`QuickPickItemButton`s](https://github.com/microsoft/vscode/pull/130519) API (for example, Ctrl/Cmd + P `x` QuickPickItemButton).\n* Implementing a \"toggle this item in some way\" option using the proposed [`QuickPickItemButton`s](https://github.com/microsoft/vscode/pull/130519) API (for example, **Insert Snippet** command).\n* Asynchronously loading items in the Quick Pick (like `setInterval` adding an item to the list by reassigning the `.items` property, where scroll shouldn't jump to the top).  \nWithout the ability to control scroll position, every one of these operations would force the scroll position of the Quick Pick to jump up to the top of the list. The `keepScrollPosition` allows extension authors to control this behavior.",
    "url": "https://code.visualstudio.com/updates/v1_61#_quick-pick-keepscrollposition-property",
    "id": 2426
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### SourceControl.actionButton  \nThe source control API now includes a `actionButton` property on `SourceControl` object that allows SCM providers to conditionally show an \"action\" button below the input box. For example, the Git extension uses this new property to show a publish or sync button when there are unpushed changes.",
    "url": "https://code.visualstudio.com/updates/v1_61#_sourcecontrol.actionbutton",
    "id": 2427
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### Using the open command for Big Sur CLI  \nOn macOS Big Sur, we now use the open command to spawn VS Code when launched from the command line. This change allows VS Code to open as though it were launched from the macOS Dock, which fixes some issues involving entitlements.",
    "url": "https://code.visualstudio.com/updates/v1_61#_using-the-open-command-for-big-sur-cli",
    "id": 2428
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n### File watching changes  \nThe file watcher used to detect changes to files and folders on disk changed to a [library](https://github.com/microsoft/vscode-nsfw) that can handle all of our supported platforms (Windows, Linux, macOS) and reduces the overhead of maintaining different watchers for different platforms. We plan to enable this library by default on all platforms. This iteration we enabled it on Windows and macOS, and plan to enable it on Linux shortly.  \nThe new watcher should be faster on startup and result in fewer CPU cycles spent on large folders. One downside of using the library is that the file watcher no longer automatically detects folders in a workspace that are symbolic links on macOS. If you have such a setup, you can use the new `files.watcherInclude` setting to explicitly add symbolic link paths to include for file watching. On the upside, you can use this new setting on Windows to explicitly include symbolic link folders inside the workspace - something that was not possible before on Windows.  \nYou should not notice any difference in your day to day work, but if file watching is broken for you, please report an issue. There is a setting `files.legacyWatcher` to enable the old watcher if you run into problems.",
    "url": "https://code.visualstudio.com/updates/v1_61#_file-watching-changes",
    "id": 2429
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2021 Release (1.61)  \n## Documentation  \n### Advanced container configuration  \nThere is a new section covering the [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension's [advanced container configuration](https://code.visualstudio.com/remote/advancedcontainers/overview).  \nIn the container documentation, you can learn how to:  \n* [Set environment variables](https://code.visualstudio.com/remote/advancedcontainers/environment-variables)\n* [Mount local disk drives](https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount)\n* [Add a non-root user](https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user)\n* [Work with multiple containers](https://code.visualstudio.com/remote/advancedcontainers/connect-multiple-containers)\n* And more...  \nThe advanced container configuration documentation has tips and code examples for setting up your development containers as well as short [YouTube videos](https://www.youtube-nocookie.com/embed/vEb7hKlagAU).",
    "url": "https://code.visualstudio.com/updates/v1_61#_advanced-container-configuration",
    "id": 2430
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Workbench  \n### Settings editor accessibility  \nWe made various Settings editor accessibility improvements:  \n* The Settings editor scrolls back to the top after performing a search, so the user does not end up midway through the search results after each search.\n* The settings scope switcher is accessible via keyboard.\n* Deprecated setting text blocks display an icon. Previously, the deprecated text was distinguished from the rest of the setting text only by color.\n* More UI elements within the Settings editor have the setting ID as their name.",
    "url": "https://code.visualstudio.com/updates/v1_62#_settings-editor-accessibility",
    "id": 2432
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Updated search icons  \nThe search icons are now the same weight and the match whole word icon was updated to be more distinguishable from the rest.  \n![Example of the updated search icons](images/1_62/search-match-whole-word.png)",
    "url": "https://code.visualstudio.com/updates/v1_62#_updated-search-icons",
    "id": 2433
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Parameter hint highlight  \nVS Code now highlights the current parameter in the parameter hint and the color can be themed via `editorHoverWidget.highlightForeground`.  \n![Example of a parameter hint with a highlighted word](images/1_62/parameter-hints.png)",
    "url": "https://code.visualstudio.com/updates/v1_62#_parameter-hint-highlight",
    "id": 2434
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Editor  \n### Improved bracket pair guides  \nWe continued iterating on bracket pair guides. Horizontal lines now outline the scope of a bracket pair. Also, vertical lines now depend on the indentation of the code that is surrounded by the bracket pair.  \n<video src=\"images/1_62/bracket-pair-guides.mp4\" autoplay loop controls muted title=\"Bracket pair horizontal lines moving with text indentation\"></video>  \nBracket pair guides can be enabled by setting `editor.guides.bracketPairs` to `true` (defaults to `false`). We added a third option \"`active`\" to only show a bracket pair guide for the active bracket pair.  \nThe new setting `editor.guides.bracketPairsHorizontal` controls if and when to render horizontal guides (defaults to `active`).  \nNew themable colors `editorBracketPairGuide.background{1,...,6}` and `editorBracketPairGuide.activeBackground{1,...,6}` can be used to customize the color of bracket pair guides.",
    "url": "https://code.visualstudio.com/updates/v1_62#_improved-bracket-pair-guides",
    "id": 2435
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Customizable bracket pairs  \nYou can now configure bracket pairs for a specific programming language through settings. `editor.language.brackets` can be used to configure which bracket characters [should be matched](https://code.visualstudio.com/docs/editor/editingevolved#_bracket-matching). If set, `editor.language.colorizedBracketPairs` independently configures which bracket pairs are colorized when bracket pair colorization or bracket pair guides are enabled.  \n```json\n\"[javascript]\": {\n\"editor.language.brackets\": [\n[\"[\", \"]\"],\n[\"(\", \")\"]\n],\n\"editor.language.colorizedBracketPairs\": [\n[\"[\", \"]\"]\n]\n},\n```",
    "url": "https://code.visualstudio.com/updates/v1_62#_customizable-bracket-pairs",
    "id": 2436
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Display hovers above or below the current line  \nYou can now choose between displaying IntelliSense hovers above (default) or below the current line. By setting `editor.hover.above` to `false`, hovers will render below the current line.  \n![IntelliSense hover below the current line in the editor](images/1_62/hover-below.png)",
    "url": "https://code.visualstudio.com/updates/v1_62#_display-hovers-above-or-below-the-current-line",
    "id": 2437
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Unicode directional formatting characters  \nTo address [CVE-2021-42574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574), VS Code now renders Unicode directional formatting characters by default. Consider the following text snippet:  \n```js\n\n//              from, to, amount\ntransferBalance(5678,6776,4321,\"USD\");\n\n```  \nThe above text snippet contains two explicit directional formatting characters, `U+202E` (`RIGHT-TO-LEFT OVERRIDE`) and `U+202C` (`POP DIRECTIONAL FORMATTING`). These characters can influence Unicode's [Bidirectional Algorithm](https://www.unicode.org/reports/tr9) and could be used to craft source code that renders differently than what compilers would execute.  \n![Unicode directional formatting characters are rendered](images/1_62/bidi-control-characters.png)  \nThe special rendering of these directional formatting characters can be turned off by setting `editor.renderControlCharacters` to `false`. The setting `editor.renderControlCharacters` is now `true` by default.",
    "url": "https://code.visualstudio.com/updates/v1_62#_unicode-directional-formatting-characters",
    "id": 2438
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Extensions  \n### Verified extension publishers  \nVS Code now shows if the domains of an extension publisher are verified by the Visual Studio Marketplace.  \n![Verified extension publisher indicators in the Extensions view and details pane](images/1_62/verified-publishers.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \nIf you are an extension author, more details about how to become a verified publisher can be found in the [Publishing Extensions](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#verify-a-publisher) topic.",
    "url": "https://code.visualstudio.com/updates/v1_62#_verified-extension-publishers",
    "id": 2439
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Terminal  \n### New default keybindings for special characters  \nThe following keybindings were added that are typically supported in other terminals:  \n* `ctrl+shift+2`: Inputs the null character (`0x00`).\n* `ctrl+shift+6`: Inputs the record separator character (`0x1E`).\n* `ctrl+/`: Inputs the unit separator character (`0x1F`).",
    "url": "https://code.visualstudio.com/updates/v1_62#_new-default-keybindings-for-special-characters",
    "id": 2440
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Languages  \n### Configure how HTML completes attributes  \nThere is a new setting `html.completion.attributeDefaultValue` that lets you choose how values are filled in when an HTML attribute is completed:  \n* `doublequotes`: The value is placed in double quotes (default)\n* `singlequotes`: The value is placed in single quotes\n* `empty`: The value is left empty  \n<video src=\"images/1_62/html-attribute-value-completion.mp4\" autoplay loop controls muted title=\"HTML value completion showing double quotes, single quotes, and left empty\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_62#_configure-how-html-completes-attributes",
    "id": 2441
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Emmet improvements  \nThe new **Emmet: Update Tag** command (`editor.emmet.action.updateTag`) updates the placeholder with the HTML tag to be updated.  \n<video src=\"images/1_62/emmet-update-tag.mp4\" autoplay loop controls muted title=\"Emmet update tag command with placeholder\"></video>  \nThe extension also activates now when one tries to run any Emmet command. This change should fix an issue where some commands were not found when run from the Command Palette, while also keeping the activation event list more precise so that Emmet does not start up unnecessarily, such as in an empty workspace.  \nFor multi-root workspaces, Emmet now sources snippets from all workspace folders, rather than just the first one. As a result, custom snippets from all workspace folders will be suggested when editing an applicable file in the workspace.",
    "url": "https://code.visualstudio.com/updates/v1_62#_emmet-improvements",
    "id": 2442
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Notebooks  \n### Find and Replace supports capturing groups  \nThe Find and Replace widget in the notebook editor now supports regular expression capturing groups.  \nIn the short video below, replace uses the first (and only) captured text ('a').  \n<video src=\"images/1_62/notebook-find-capture-groups.mp4\" autoplay loop controls muted title=\"Find and Replace with capturing groups support\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_62#_find-and-replace-supports-capturing-groups",
    "id": 2443
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Better selection of output renderers and mimetypes  \nNotebook cells can output multiple types of data (mimetypes) that can be rendered in different ways both by VS Code itself and extensions. Previously, VS Code had basic memoization (caching) of the selected renderer for a mimetype, and you could manually configure your preferred mimetypes using the `notebook.displayOrder` setting. However, VS Code wasn't particularly smart about picking the best renderer for a mimetype, and preferred mimetypes had to be updated manually.  \nNow, preferred renderers are cached on a per-notebook type, level in the workspace. Additionally, if you switch to view a different mimetype, that preference will be updated in-memory for the VS Code session, and you can use the **Notebook: Save Mimetype Display Order** command to easily update the `notebook.displayOrder` setting to the working preference.",
    "url": "https://code.visualstudio.com/updates/v1_62#_better-selection-of-output-renderers-and-mimetypes",
    "id": 2444
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Contributions to extensions  \n### Jupyter  \n**Kernels**  \nIn order to make it easier to identify kernels, the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension now groups kernels in the kernel picker.  \n![Kernels grouped in kernel picker](images/1_62/kernel_picker.png)  \nYou can now filter the list of kernels displayed in the kernel picker, either globally or on a workspace basis. This is helpful if you have a large number of kernels installed but usually only work with a subset.  \nTo manage the list of kernels displayed, you can use the command **Jupyter: Filter Kernels** from the Command Palette.  \n<video src=\"images/1_62/filter_kernels.mp4\" autoplay loop controls muted title=\"Kernel filtering via the Filter Kernels command dropdown check boxes\"></video>  \n**Interactive Window**  \nAutomatic cell creation when running the last cells in an **Interactive Window** using `kbstyle(Shift+Enter)` can now be configured via the setting `jupyter.newCellOnRunLast`. If you don't want the default behavior to add a new cell, you can set `jupyter.netCellOnRunLast` to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_62#_jupyter",
    "id": 2445
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### ESLint  \nA new version of the [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extension has shipped. Major improvements are:  \n* Extended support for [ESLint version 8.x](https://www.npmjs.com/package/eslint/v/8.1.0).\n* The ability to define the rule set that is applied during code action on save and format via the setting `eslint.codeActionsOnSave.rules`.",
    "url": "https://code.visualstudio.com/updates/v1_62#_eslint",
    "id": 2446
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.32.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0320) release of the extension to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_62#_github-pull-requests-and-issues",
    "id": 2447
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.62 include:  \n* New setting `remote.SSH.foldersSortOrder` to sort SSH targets alphabetically or by recent use.\n* Windows Subsystem for Linux indicator lets you quickly know whether you are using WSL 1 or WSL 2.\n* Advanced container configuration videos covering how to [persist bash history](https://code.visualstudio.com/remote/advancedcontainers/persist-bash-history) and [work with monorepos](https://code.visualstudio.com/remote/advancedcontainers/change-default-source-mount).  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_62.md).",
    "url": "https://code.visualstudio.com/updates/v1_62#_remote-development",
    "id": 2448
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Preview features  \n### TypeScript 4.5 support  \nThis update adds support for the upcoming TypeScript 4.5 release. The [TypeScript 4.5 beta announcement post](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta) has more information about the new language and tooling features. Some tooling highlights:  \n* [Method signature completions](https://github.com/microsoft/TypeScript/pull/46370).\n* [JSX attribute completions](https://github.com/microsoft/TypeScript/issues/38891).\n* More accurate reference counts for the references CodeLens.  \nTo start using the TypeScript 4.5 nightly builds, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).  \nPlease share your feedback and let us know if you run into any bugs with TypeScript 4.5.",
    "url": "https://code.visualstudio.com/updates/v1_62#_typescript-4.5-support",
    "id": 2449
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Extension authoring  \n### Emoji support in file decorations  \nThe [file decorations](https://github.com/microsoft/vscode/blob/9430f7848503b25ff1a629f2cb81b705e11672f5/src/vs/vscode.d.ts#L6071) API now supports emojis as badge texts.  \n![Files decorated with emojis in the File Explorer](images/1_62/emoji_decorations.png)",
    "url": "https://code.visualstudio.com/updates/v1_62#_emoji-support-in-file-decorations",
    "id": 2450
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### MarkdownString.supportHtml  \nThe new `supportHtml` property on `MarkdownString` enables rendering of a safe subset of raw HTML that appears inside the Markdown text.  \nThe `supportHtml` property defaults to `false`. When disabled, VS Code will strip out any raw HTML tags that appear in the Markdown text.",
    "url": "https://code.visualstudio.com/updates/v1_62#_markdownstring.supporthtml",
    "id": 2451
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n## Engineering  \n### File watching changes  \nFile watching in VS Code changed to a new library, thanks to the work of the Parcel team with their [@parcel/watcher](https://github.com/parcel-bundler/watcher). We will gradually roll out this change to all users in the upcoming weeks. Linux users will be happy to learn that the `files.watcherExclude` now applies natively so that the number of file handles VS Code needs open for file watching can be greatly reduced.  \nThe existing `files.legacyWatcher` setting was changed to an enumeration with these values:  \n* `on` - The new file watcher will never be used.\n* `off` - The new file watcher will always be used.\n* `default` - The new file watcher will only be used when you open multi-root workspaces (via a `.code-workspace` file).  \nYou should not notice any difference in your day to day work, but if file watching is broken for you, please report an issue.",
    "url": "https://code.visualstudio.com/updates/v1_62#_file-watching-changes",
    "id": 2452
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Progress for Electron sandbox support  \nAs we continue to make the VS Code workbench ready for enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox), we made progress on moving Node.js file services out of the workbench window into a different process. The same is true for the file watcher that no longer forks from the workbench window, but from a background process. This change is enabled by default in VS Code Insiders and will be the default in Stable for our November release.",
    "url": "https://code.visualstudio.com/updates/v1_62#_progress-for-electron-sandbox-support",
    "id": 2453
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is as of November 2):  \n* [Search GitHub Users Extension](https://marketplace.visualstudio.com/items?itemName=adarshpandeyin.search-github-users-extension) ([Adarsh Pandey](https://marketplace.visualstudio.com/publishers/adarshpandeyin))\n* [Typescript Language Server - Multi Host mode](https://marketplace.visualstudio.com/items?itemName=asvetliakov.typescript-language-features-multi-host) ([Alexey Svetliakov](https://marketplace.visualstudio.com/publishers/asvetliakov))\n* [Git Buttons](https://marketplace.visualstudio.com/items?itemName=anweber.git-buttons) ([Andreas Weber](https://marketplace.visualstudio.com/publishers/anweber))\n* [statusbar-commands](https://marketplace.visualstudio.com/items?itemName=anweber.statusbar-commands) ([Andreas Weber](https://marketplace.visualstudio.com/publishers/anweber))\n* [Azure Devops Pull Requests](https://marketplace.visualstudio.com/items?itemName=ankitbko.vscode-pull-request-azdo) ([Ankit Sinha](https://marketplace.visualstudio.com/publishers/ankitbko))\n* [Keil Studio](https://marketplace.visualstudio.com/items?itemName=arm-debug.keil-studio-vscode) ([Arm Debug](https://marketplace.visualstudio.com/publishers/arm-debug))\n* [Svelte for VS Code Web](https://marketplace.visualstudio.com/items?itemName=asafamr.svelte-web) ([Asaf Amrami](https://marketplace.visualstudio.com/publishers/asafamr))\n* [Astro](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) ([Astro](https://marketplace.visualstudio.com/publishers/astro-build))\n* [atsushieno.vscode-language-mugene](https://marketplace.visualstudio.com/items?itemName=atsushieno.vscode-language-mugene) ([atsushieno](https://marketplace.visualstudio.com/publishers/atsushieno))\n* [Python C++ Debugger](https://marketplace.visualstudio.com/items?itemName=benjamin-simmonds.pythoncpp-debug) ([BeniBenj](https://marketplace.visualstudio.com/publishers/benjamin-simmonds))\n* [One Dark Pro](https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme) ([binaryify](https://marketplace.visualstudio.com/publishers/zhuangtongfa))\n* [COBOL](https://marketplace.visualstudio.com/items?itemName=bitlang.cobol) ([BitLang](https://marketplace.visualstudio.com/publishers/bitlang))\n* [blink-fs](https://marketplace.visualstudio.com/items?itemName=BlinkShellInc.blink-fs) ([Blink Shell Inc](https://marketplace.visualstudio.com/publishers/blinkshellinc))\n* [Oracle Guid Converter](https://marketplace.visualstudio.com/items?itemName=piklbojan.oracleguidconverter) ([Bojan](https://marketplace.visualstudio.com/publishers/piklbojan))\n* [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) ([Christian Kohler](https://marketplace.visualstudio.com/publishers/christian-kohler))\n* [GitHub Actions](https://marketplace.visualstudio.com/items?itemName=cschleiden.vscode-github-actions) ([Christopher Schleiden](https://marketplace.visualstudio.com/publishers/cschleiden))\n* [VSCode DOSBox](https://marketplace.visualstudio.com/items?itemName=xsro.vscode-dosbox) ([clcxsrolau](https://marketplace.visualstudio.com/publishers/xsro))\n* [Toggle Light/Dark Theme](https://marketplace.visualstudio.com/items?itemName=danielgjackson.auto-dark-mode-windows) ([Daniel Jackson](https://marketplace.visualstudio.com/publishers/danielgjackson))\n* [markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint) ([David Anson](https://marketplace.visualstudio.com/publishers/DavidAnson))\n* [Arrow Function Snippets](https://marketplace.visualstudio.com/items?itemName=deinsoftware.arrow-function-snippets) ([dein Software](https://marketplace.visualstudio.com/publishers/deinsoftware))\n* [SHADERed](https://marketplace.visualstudio.com/items?itemName=dfranx.shadered) ([dfranx](https://marketplace.visualstudio.com/publishers/dfranx))\n* [SideBar Moc](https://marketplace.visualstudio.com/items?itemName=DiamondYuan.sidebar-moc) ([DiamondYuan](https://marketplace.visualstudio.com/publishers/DiamondYuan))\n* [Tiny8BitVS](https://marketplace.visualstudio.com/items?itemName=flohofwoe.tiny8bitvs) ([flohofwoe](https://marketplace.visualstudio.com/publishers/flohofwoe))\n* [SQLite Viewer](https://marketplace.visualstudio.com/items?itemName=qwtel.sqlite-viewer) ([Florian Klampfer](https://marketplace.visualstudio.com/publishers/qwtel))\n* [spec command](https://marketplace.visualstudio.com/items?itemName=fujidana.spec-command) ([fujidana](https://marketplace.visualstudio.com/publishers/fujidana))\n* [spec data](https://marketplace.visualstudio.com/items?itemName=fujidana.spec-data) ([fujidana](https://marketplace.visualstudio.com/publishers/fujidana))\n* [spec log](https://marketplace.visualstudio.com/items?itemName=fujidana.spec-log) ([fujidana](https://marketplace.visualstudio.com/publishers/fujidana))\n* [GehDoc.vscode-textile-preview](https://marketplace.visualstudio.com/items?itemName=GehDoc.vscode-textile-preview) ([GehDoc](https://marketplace.visualstudio.com/publishers/GehDoc))\n* [Angular.io Documentation Utilities](https://marketplace.visualstudio.com/items?itemName=gkalpak.aio-docs-utils) ([George Kalpakas](https://marketplace.visualstudio.com/publishers/gkalpak))\n* [GitLive](https://marketplace.visualstudio.com/items?itemName=TeamHub.teamhub) ([GitLive](https://marketplace.visualstudio.com/publishers/TeamHub))\n* [Duplicate selection or line](https://marketplace.visualstudio.com/items?itemName=geeebe.duplicate) ([Greg Bacchus](https://marketplace.visualstudio.com/publishers/geeebe))\n* [Dance](https://marketplace.visualstudio.com/items?itemName=gregoire.dance) ([Gr\u00e9goire Geis](https://marketplace.visualstudio.com/publishers/gregoire))\n* [Diff Viewer](https://marketplace.visualstudio.com/items?itemName=caponetto.vscode-diff-viewer) ([Guilherme Caponetto](https://marketplace.visualstudio.com/publishers/caponetto))\n* [searKing.preview-vscode](https://marketplace.visualstudio.com/items?itemName=searKing.preview-vscode) ([Haixin Chen](https://marketplace.visualstudio.com/publishers/searKing))\n* [BlitzMax](https://marketplace.visualstudio.com/items?itemName=Hezkore.blitzmax) ([Hezkore](https://marketplace.visualstudio.com/publishers/Hezkore))\n* [Toggler](https://marketplace.visualstudio.com/items?itemName=hideoo.toggler) ([HiDeoo](https://marketplace.visualstudio.com/publishers/hideoo))\n* [\u6d77\u62cd\u5ba2codereview](https://marketplace.visualstudio.com/items?itemName=hipac.Hicr) ([hipac](https://marketplace.visualstudio.com/publishers/hipac))\n* [Hex Editor with Tags](https://marketplace.visualstudio.com/items?itemName=notblank00.hexeditor) ([Igor Gunin](https://marketplace.visualstudio.com/publishers/notblank00))\n* [CompStruct VSCode](https://marketplace.visualstudio.com/items?itemName=jamestiotio.compstruct-vscode) ([James Raphael Tiovalen](https://marketplace.visualstudio.com/publishers/jamestiotio))\n* [Peacock](https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock) ([John Papa](https://marketplace.visualstudio.com/publishers/johnpapa))\n* [WordPress Hooks IntelliSense](https://marketplace.visualstudio.com/items?itemName=johnbillion.vscode-wordpress-hooks) ([johnbillion](https://marketplace.visualstudio.com/publishers/johnbillion))\n* [CodeSwing](https://marketplace.visualstudio.com/items?itemName=codespaces-Contrib.codeswing) ([Jonathan Carter](https://marketplace.visualstudio.com/publishers/codespaces-contrib))\n* [CodeTour](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) ([Jonathan Carter](https://marketplace.visualstudio.com/publishers/vsls-contrib))\n* [GistPad](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs) ([Jonathan Carter](https://marketplace.visualstudio.com/publishers/vsls-contrib))\n* [WikiLens](https://marketplace.visualstudio.com/items?itemName=lostintangent.wikilens) ([Jonathan Carter](https://marketplace.visualstudio.com/publishers/lostintangent))\n* [C# XML Documentation Comments](https://marketplace.visualstudio.com/items?itemName=k--kato.docomment) ([Keisuke Kato](https://marketplace.visualstudio.com/publishers/k--kato))\n* [IntelliJ IDEA Keybindings](https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings) ([Keisuke Kato](https://marketplace.visualstudio.com/publishers/k--kato))\n* [HarmonyLang Lite](https://marketplace.visualstudio.com/items?itemName=kevinsun-dev-cornell.harmonylang-lite) ([Kevin Sun](https://marketplace.visualstudio.com/publishers/kevinsun-dev-cornell))\n* [Highlight Bad Chars](https://marketplace.visualstudio.com/items?itemName=wengerk.highlight-bad-chars) ([Kevin Wenger](https://marketplace.visualstudio.com/publishers/wengerk))\n* [Web assets compiler](https://marketplace.visualstudio.com/items?itemName=kiennp.web-assets-compiler) ([Kien NP](https://marketplace.visualstudio.com/publishers/kiennp))\n* [Csound](https://marketplace.visualstudio.com/items?itemName=kunstmusik.csound-vscode-plugin) ([kunstmusik](https://marketplace.visualstudio.com/publishers/kunstmusik))\n* [abaplint](https://marketplace.visualstudio.com/items?itemName=larshp.vscode-abaplint) ([Lars Hvam](https://marketplace.visualstudio.com/publishers/larshp))\n* [vscode-source-map](https://marketplace.visualstudio.com/items?itemName=larshp.vscode-source-map) ([Lars Hvam](https://marketplace.visualstudio.com/publishers/larshp))\n* [bmwebtest - for testing - will be deleted soon](https://marketplace.visualstudio.com/items?itemName=leodevbro.bmwebtest) ([leodevbro](https://marketplace.visualstudio.com/publishers/leodevbro))\n* [Glimmer Templates Syntax for VS Code](https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-glimmer-syntax) ([lifeart](https://marketplace.visualstudio.com/publishers/lifeart))\n* [Unstable Ember Language Server](https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable) ([lifeart](https://marketplace.visualstudio.com/publishers/lifeart))\n* [LuatIDE](https://marketplace.visualstudio.com/items?itemName=luater.luatide) ([luater](https://marketplace.visualstudio.com/publishers/luater))\n* [One Dark Theme](https://marketplace.visualstudio.com/items?itemName=mskelton.one-dark-theme) ([Mark Skelton](https://marketplace.visualstudio.com/publishers/mskelton))\n* [Marp for VS Code](https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode) ([Marp team](https://marketplace.visualstudio.com/publishers/marp-team))\n* [Iteria Json editor](https://marketplace.visualstudio.com/items?itemName=MartinBilansky.iteria-json-editor) ([MartinBilansky](https://marketplace.visualstudio.com/publishers/MartinBilansky))\n* [PHP DocBlocker](https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker) ([Neil Brayfield](https://marketplace.visualstudio.com/publishers/neilbrayfield))\n* [PHP DocBlocker](https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker-test) ([Neil Brayfield](https://marketplace.visualstudio.com/publishers/neilbrayfield))\n* [Scout](https://marketplace.visualstudio.com/items?itemName=ncbradley.scout) ([Nick Bradley](https://marketplace.visualstudio.com/publishers/ncbradley))\n* [Octopus Deploy](https://marketplace.visualstudio.com/items?itemName=octopusdeploy.vscode-octopusdeploy) ([Octopus Deploy](https://marketplace.visualstudio.com/publishers/OctopusDeploy))\n* [oderwat.indent-rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow) ([oderwat](https://marketplace.visualstudio.com/publishers/oderwat))\n* [Colemak-Vim](https://marketplace.visualstudio.com/items?itemName=ollyhayes.colmak-vim) ([Olly Hayes](https://marketplace.visualstudio.com/publishers/ollyhayes))\n* [LuatOS Debug](https://marketplace.visualstudio.com/items?itemName=openluat-wendal.luatos-debug) ([OpenLuat Wendal Chen](https://marketplace.visualstudio.com/publishers/openluat-wendal))\n* [JavaScript Assistant: Refactoring Hints & Automation](https://marketplace.visualstudio.com/items?itemName=p42ai.refactor) ([P42](https://marketplace.visualstudio.com/publishers/p42ai))\n* [quickstarts-preview](https://marketplace.visualstudio.com/items?itemName=PatternFly.quickstarts-preview) ([PatternFly](https://marketplace.visualstudio.com/publishers/PatternFly))\n* [ui-builder](https://marketplace.visualstudio.com/items?itemName=PatternFly.ui-builder) ([PatternFly](https://marketplace.visualstudio.com/publishers/PatternFly))\n* [Pop File Money Counter](https://marketplace.visualstudio.com/items?itemName=pfwobcke.pop-file-money-counter) ([pfwobcke](https://marketplace.visualstudio.com/publishers/pfwobcke))\n* [Markdown Checkbox](https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox) ([Philipp Kief](https://marketplace.visualstudio.com/publishers/PKief))\n* [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) ([Philipp Kief](https://marketplace.visualstudio.com/publishers/PKief))\n* [Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) ([Prettier](https://marketplace.visualstudio.com/publishers/esbenp))\n* [BPMN Editor](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-extension-bpmn-editor) ([Red Hat](https://marketplace.visualstudio.com/publishers/redhat))\n* [DMN Editor](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-extension-dmn-editor) ([Red Hat](https://marketplace.visualstudio.com/publishers/redhat))\n* [PMML Editor](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-extension-pmml-editor) ([Red Hat](https://marketplace.visualstudio.com/publishers/redhat))\n* [YAML](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml) ([Red Hat](https://marketplace.visualstudio.com/publishers/redhat))\n* [Bulma CSS Class Completion](https://marketplace.visualstudio.com/items?itemName=reliutg.bulma-css-class-completion) ([reliutg](https://marketplace.visualstudio.com/publishers/reliutg))\n* [Visual Regex](https://marketplace.visualstudio.com/items?itemName=reliutg.visual-regex) ([reliutg](https://marketplace.visualstudio.com/publishers/reliutg))\n* [Date & Time](https://marketplace.visualstudio.com/items?itemName=rid9.datetime) ([rid9](https://marketplace.visualstudio.com/publishers/rid9))\n* [Command Variable](https://marketplace.visualstudio.com/items?itemName=rioj7.command-variable) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Context Menu Extra](https://marketplace.visualstudio.com/items?itemName=rioj7.context-menu-extra) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Markdown Header Coloring](https://marketplace.visualstudio.com/items?itemName=satokaz.vscode-markdown-header-coloring) ([satokaz](https://marketplace.visualstudio.com/publishers/satokaz))\n* [WarpScript & FLoWS language support](https://marketplace.visualstudio.com/items?itemName=senx.warpscript-language) ([SenX](https://marketplace.visualstudio.com/publishers/senx))\n* [Align Text Tokens](https://marketplace.visualstudio.com/items?itemName=SergeLamikhov.aligntokens) ([Serge Lamikhov-Center](https://marketplace.visualstudio.com/publishers/SergeLamikhov))\n* [Copy-Gather-Paste](https://marketplace.visualstudio.com/items?itemName=SergeLamikhov.copy-gather-paste) ([Serge Lamikhov-Center](https://marketplace.visualstudio.com/publishers/SergeLamikhov))\n* [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight) ([Sergii Naumov](https://marketplace.visualstudio.com/publishers/naumovs))\n* [shuaihu.html-embedded-javascript](https://marketplace.visualstudio.com/items?itemName=shuaihu.html-embedded-javascript) ([shuaihu](https://marketplace.visualstudio.com/publishers/shuaihu))\n* [SCSS Formatter](https://marketplace.visualstudio.com/items?itemName=sibiraj-s.vscode-scss-formatter) ([Sibiraj](https://marketplace.visualstudio.com/publishers/sibiraj-s))\n* [CypressHelper](https://marketplace.visualstudio.com/items?itemName=simonaron.cypresshelper) ([Simon \u00c1ron](https://marketplace.visualstudio.com/publishers/simonaron))\n* [Simplicite VSCode tools](https://marketplace.visualstudio.com/items?itemName=SimpliciteSoftware.simplicite-vscode-tools) ([Simplicite Software](https://marketplace.visualstudio.com/publishers/simpliciteSoftware))\n* [SinoMCU IDE RISC8 (alpha)](https://marketplace.visualstudio.com/items?itemName=SinoMCU.IDE-RISC8) ([SinoMCU](https://marketplace.visualstudio.com/publishers/SinoMCU))\n* [Starfall](https://marketplace.visualstudio.com/items?itemName=sndst00m.starfall-visual-studio-code) ([sndst00m](https://marketplace.visualstudio.com/publishers/sndst00m))\n* [sndst00m.vscode-native-svg-preview](https://marketplace.visualstudio.com/items?itemName=sndst00m.vscode-native-svg-preview) ([sndst00m](https://marketplace.visualstudio.com/publishers/sndst00m))\n* [Print Timestamp](https://marketplace.visualstudio.com/items?itemName=snowcrash30.PrintTimestamp) ([snowcrash30](https://marketplace.visualstudio.com/publishers/snowcrash30))\n* [Type4Py](https://marketplace.visualstudio.com/items?itemName=saltud.type4py) ([Software Analytics Lab (TU Delft)](https://marketplace.visualstudio.com/publishers/saltud))\n* [Java Code Generators](https://marketplace.visualstudio.com/items?itemName=sohibe.java-generate-setters-getters) ([Sohibe](https://marketplace.visualstudio.com/publishers/sohibe))\n* [Bash Options](https://marketplace.visualstudio.com/items?itemName=stenalpj.shell-script-options) ([Stenal P Jolly](https://marketplace.visualstudio.com/publishers/stenalpj))\n* [vscode-go-by-example](https://marketplace.visualstudio.com/items?itemName=stuartleeks.vscode-go-by-example) ([Stuart Leeks](https://marketplace.visualstudio.com/publishers/stuartleeks))\n* [Boxdraw](https://marketplace.visualstudio.com/items?itemName=taizod1024.boxdraw-extension) ([taizod1024](https://marketplace.visualstudio.com/publishers/taizod1024))\n* [Package Logger](https://marketplace.visualstudio.com/items?itemName=taizod1024.package-logger) ([taizod1024](https://marketplace.visualstudio.com/publishers/taizod1024))\n* [88d88d8d8d8d8](https://marketplace.visualstudio.com/items?itemName=Thomka.88d88d8d8d8d8) ([Thomka](https://marketplace.visualstudio.com/publishers/Thomka))\n* [AutoHotKey2 Language Support](https://marketplace.visualstudio.com/items?itemName=thqby.vscode-autohotkey2-lsp) ([thqby](https://marketplace.visualstudio.com/publishers/thqby))\n* [Stationeers ic10](https://marketplace.visualstudio.com/items?itemName=Traineratwot.stationeers-ic10) ([Traineratwot](https://marketplace.visualstudio.com/publishers/Traineratwot))\n* [Vz Keymap](https://marketplace.visualstudio.com/items?itemName=tshino.vz-like-keymap) ([tshino](https://marketplace.visualstudio.com/publishers/tshino))\n* [Vouch](https://marketplace.visualstudio.com/items?itemName=vouch-dev.vouch) ([vouch-dev](https://marketplace.visualstudio.com/publishers/vouch-dev))\n* [Minion Debug](https://marketplace.visualstudio.com/items?itemName=VSCodeMinionPluginProject.minion) ([VSCode Minion Plugin Project](https://marketplace.visualstudio.com/publishers/VSCodeMinionPluginProject))\n* [Vscode Outliner](https://marketplace.visualstudio.com/items?itemName=VscodeOutliner.vscode-outliner) ([VscodeOutliner](https://marketplace.visualstudio.com/publishers/VscodeOutliner))\n* [VSpaceCode](https://marketplace.visualstudio.com/items?itemName=VSpaceCode.vspacecode) ([VSpaceCode](https://marketplace.visualstudio.com/publishers/VSpaceCode))\n* [Which Key](https://marketplace.visualstudio.com/items?itemName=VSpaceCode.whichkey) ([VSpaceCode](https://marketplace.visualstudio.com/publishers/VSpaceCode))\n* [Code Translate](https://marketplace.visualstudio.com/items?itemName=w88975.code-translate) ([w88975](https://marketplace.visualstudio.com/publishers/w88975))\n* [Wardlt Editor](https://marketplace.visualstudio.com/items?itemName=Wardlt.wardlt) ([Wardlt](https://marketplace.visualstudio.com/publishers/Wardlt))\n* [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight) ([Wayou Liu](https://marketplace.visualstudio.com/publishers/wayou))\n* [AutoMageDev](https://marketplace.visualstudio.com/items?itemName=Webkul.automagedev) ([Webkul](https://marketplace.visualstudio.com/publishers/Webkul))\n* [wjrnjknrekwj](https://marketplace.visualstudio.com/items?itemName=wjrnjknrekwj.wjrnjknrekwj-wjrnjknrekwj) ([wjrnjknrekwj](https://marketplace.visualstudio.com/publishers/wjrnjknrekwj))\n* [Blitz](https://marketplace.visualstudio.com/items?itemName=wraith13.blitz) ([wraith13](https://marketplace.visualstudio.com/publishers/wraith13))\n* [Bracket Lens](https://marketplace.visualstudio.com/items?itemName=wraith13.bracket-lens) ([wraith13](https://marketplace.visualstudio.com/publishers/wraith13))\n* [File Path Bar](https://marketplace.visualstudio.com/items?itemName=wraith13.file-path-bar) ([wraith13](https://marketplace.visualstudio.com/publishers/wraith13))\n* [Unsaved Files](https://marketplace.visualstudio.com/items?itemName=wraith13.unsaved-files-vscode) ([wraith13](https://marketplace.visualstudio.com/publishers/wraith13))\n* [Awesome Emacs Keymap](https://marketplace.visualstudio.com/items?itemName=tuttieee.emacs-mcx) ([Yuichiro Tsuchiya](https://marketplace.visualstudio.com/publishers/tuttieee))",
    "url": "https://code.visualstudio.com/updates/v1_62#_web-extensions",
    "id": 2454
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [Lemmingh (@Lemmingh)](https://github.com/Lemmingh)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_62#_issue-tracking",
    "id": 2455
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2021 Release (1.62)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Specific the map generics in history.ts explicitly [PR #134896](https://github.com/microsoft/vscode/pull/134896)\n* [@a5hk (Ashkan)](https://github.com/a5hk): Adds support for separate horizontal and vertical borders for side by side editor [PR #135181](https://github.com/microsoft/vscode/pull/135181)\n* [@adaex (Aex)](https://github.com/adaex): Update to latest seti-ui icon theme [PR #135484](https://github.com/microsoft/vscode/pull/135484)\n* [@AiverReaver (Ashish Vagish)](https://github.com/AiverReaver): fixed minimap slider width when page is scroll horizontally. [PR #135081](https://github.com/microsoft/vscode/pull/135081)\n* [@AlexStrNik (AlexStrNik)](https://github.com/AlexStrNik): Fix interactive playground's suggest widget styled everything as links [PR #90022](https://github.com/microsoft/vscode/pull/90022)\n* [@asciimike (Mike McDonald)](https://github.com/asciimike): Changing port \"privacy\" to \"visibility\" to address Codespaces user confusion [PR #135193](https://github.com/microsoft/vscode/pull/135193)\n* [@ashgti (John Harrison)](https://github.com/ashgti): Updating the TerminalInstance to only register link providers once. [PR #135419](https://github.com/microsoft/vscode/pull/135419)\n* [@brajkowski (Brandon Rajkowski)](https://github.com/brajkowski): Terminal now supports linking local file paths containing '$' [PR #132027](https://github.com/microsoft/vscode/pull/132027)\n* [@byteit101 (Patrick Plenefisch)](https://github.com/byteit101): Fix: Don't ignore the indent settings in advanced wrapping mode [PR #134171](https://github.com/microsoft/vscode/pull/134171)\n* [@codeclown (Martti Laine)](https://github.com/codeclown): Feature: New command - Delete Duplicate Lines [PR #119480](https://github.com/microsoft/vscode/pull/119480)\n* [@codingLogan (Logan Rasmussen)](https://github.com/codingLogan): Remove angle brackets when checking the scheme [PR #133419](https://github.com/microsoft/vscode/pull/133419)\n* [@concatime (Issam Maghni)](https://github.com/concatime): Fix mkdir arguments order in snap [PR #135182](https://github.com/microsoft/vscode/pull/135182)\n* [@cyntler (Damian Cyntler)](https://github.com/cyntler): Fix zoom-out on an image [#131080] [PR #134706](https://github.com/microsoft/vscode/pull/134706)\n* [@eltociear (Ikko Ashimine)](https://github.com/eltociear): Fix typo in timelinePane.ts [PR #131356](https://github.com/microsoft/vscode/pull/131356)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): [typescript-language-features] Add includeCompletionsWithClassMemberSnippets preference [PR #136045](https://github.com/microsoft/vscode/pull/136045)\n* [@Gerrit0 (Gerrit Birkeland)](https://github.com/Gerrit0): Fix codeblock detection to catch blocks not on first lines [PR #132821](https://github.com/microsoft/vscode/pull/132821)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Correct doc for `count` property of `SourceControl` (#117765) [PR #132242](https://github.com/microsoft/vscode/pull/132242)\n* fix #134345 - 'workpsace' typo [PR #134348](https://github.com/microsoft/vscode/pull/134348)\n* [@j824h (Junghyeon Park)](https://github.com/j824h): Capturing groups support in Notebook Find Widget [PR #135444](https://github.com/microsoft/vscode/pull/135444)\n* [@jakevossen5 (Jake Vossen)](https://github.com/jakevossen5): Standardize capitilization of \"Go to\" [PR #135869](https://github.com/microsoft/vscode/pull/135869)\n* [@JaredNeil (Jared Neil)](https://github.com/JaredNeil): Update seti-ui for Bazel icon fix [PR #135188](https://github.com/microsoft/vscode/pull/135188)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes feedback widget appears wrong when invoked from command palette [PR #103738](https://github.com/microsoft/vscode/pull/103738)\n* Fixes drop indicator not shown when dragging a view over panel title [PR #125438](https://github.com/microsoft/vscode/pull/125438)\n* Fix empty HoverWidget is visible at startup [PR #134752](https://github.com/microsoft/vscode/pull/134752)\n* [@justanotheranonymoususer](https://github.com/justanotheranonymoususer): Option to preserve focus while showing view [PR #133682](https://github.com/microsoft/vscode/pull/133682)\n* [@Lemmingh](https://github.com/Lemmingh): Add source map for every possible element in the Markdown preview [PR #134799](https://github.com/microsoft/vscode/pull/134799)\n* [@martinzimmermann (Martin Zimmermann)](https://github.com/martinzimmermann): Fixes #26393 by changing the default behavior of InsertCursorAbove/Below [PR #135805](https://github.com/microsoft/vscode/pull/135805)\n* [@rjc](https://github.com/rjc): Fix extended description [PR #134387](https://github.com/microsoft/vscode/pull/134387)\n* [@sean-mcmanus (Sean McManus)](https://github.com/sean-mcmanus): Update package.json [PR #135050](https://github.com/microsoft/vscode/pull/135050)\n* [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart)\n* Add doNotAddAttributeQuotes setting to disable automatic quotes [PR #129284](https://github.com/microsoft/vscode/pull/129284)\n* Fix search editor scrolled to bottom on first search when editor group changed. [PR #134693](https://github.com/microsoft/vscode/pull/134693)\n* Search editor go to location improvements [PR #135227](https://github.com/microsoft/vscode/pull/135227)\n* [@Suven-p (Suven-p)](https://github.com/Suven-p)\n* Set wordwrap to on for testingOutputPeek [PR #134347](https://github.com/microsoft/vscode/pull/134347)\n* Add tooltip for keybinding [PR #134438](https://github.com/microsoft/vscode/pull/134438)\n* [@suzmue (Suzy Mueller)](https://github.com/suzmue): disassemble request fix off by one error [PR #134241](https://github.com/microsoft/vscode/pull/134241)\n* [@TabithaLarkin (Tabitha Larkin)](https://github.com/TabithaLarkin): Add colorized bracket highlighting colours [PR #132494](https://github.com/microsoft/vscode/pull/132494)\n* [@thebinarysearchtree (Andrew Jones)](https://github.com/thebinarysearchtree)\n* Remove backticks from word character fix [PR #135197](https://github.com/microsoft/vscode/pull/135197)\n* Handle apostrophes in TitleCaseAction [PR #135698](https://github.com/microsoft/vscode/pull/135698)\n* [@Timmmm (Tim)](https://github.com/Timmmm): Add setting to control hover position [PR #127609](https://github.com/microsoft/vscode/pull/127609)\n* [@timretout (Tim Retout)](https://github.com/timretout): Update desktop file cache in Debian package postinst [PR #134840](https://github.com/microsoft/vscode/pull/134840)\n* [@wenfangdu (Wenfang Du)](https://github.com/wenfangdu): fix: the quick diff should respect `diffEditor.ignoreTrimWhitespace` [PR #135285](https://github.com/microsoft/vscode/pull/135285)\n* [@yuehuang010 (Yue (Felix) Huang)](https://github.com/yuehuang010): Integrate Source Code into Disassembly View [PR #132541](https://github.com/microsoft/vscode/pull/132541)\n* [@yume-chan (Simon Chan)](https://github.com/yume-chan): Fix a typo in npm extension package.json [PR #134856](https://github.com/microsoft/vscode/pull/134856)\n* [@yuzhishuo (muduo)](https://github.com/yuzhishuo): fix: Terminal editors are always marked dirty. [PR #134861](https://github.com/microsoft/vscode/pull/134861)  \nContributions to `vscode-codicons`:  \n* [@Profesor08](https://github.com/Profesor08): added svg-sprite generation [PR #84](https://github.com/microsoft/vscode-codicons/pull/84)  \nContributions to `vscode-debugadapter-node`:  \n* [@friederbluemle (Frieder Bluemle)](https://github.com/friederbluemle): Fix capitalization of GitHub org [PR #235](https://github.com/microsoft/vscode-debugadapter-node/pull/235)  \nContributions to `vscode-eslint`:  \n* [@dotansimha (Dotan Simha)](https://github.com/dotansimha): Added graphql language to ESLint-server comments [PR #1346](https://github.com/microsoft/vscode-eslint/pull/1346)\n* [@jogo-](https://github.com/jogo-): \ud83d\udc84 Fix typo in Changelog [PR #1350](https://github.com/microsoft/vscode-eslint/pull/1350)\n* [Yosuke Ota](https://github.com/ota-meshi): Supports ESLint v8. [PR #117](https://github.com/microsoft/vscode-eslint/pull/1317).  \nContributions to `vscode-generator-code`:  \n* [@albinpk (Albin PK)](https://github.com/albinpk): Update comment in webpack.config.js [PR #302](https://github.com/microsoft/vscode-generator-code/pull/302)  \nContributions to `vscode-js-debug`:  \n* [@yyyang1996 (yang)](https://github.com/yyyang1996): fix: use edge if it's the default on macOS [PR #1122](https://github.com/microsoft/vscode-js-debug/pull/1122)  \nContributions to `vscode-json-languageservice`:  \n* [@jgraettinger (Johnny Graettinger)](https://github.com/jgraettinger): interpret `pattern`/`patternProperties` regex as Unicode [PR #111](https://github.com/microsoft/vscode-json-languageservice/pull/111)  \nContributions to `vscode-languageserver-node`:  \n* [@AkatQuas (Akat)](https://github.com/AkatQuas)\n* fix(types): guard the `is` judgement [PR #814](https://github.com/microsoft/vscode-languageserver-node/pull/814)\n* feat: update type definition [PR #816](https://github.com/microsoft/vscode-languageserver-node/pull/816)\n* [@bmewburn (Ben Mewburn)](https://github.com/bmewburn): fix unhandled promise rejection in getConfiguration [PR #760](https://github.com/microsoft/vscode-languageserver-node/pull/760)\n* [@DanTup (Danny Tuppeny)](https://github.com/DanTup): Add support for textDocument/inlineValues [PR #806](https://github.com/microsoft/vscode-languageserver-node/pull/806)\n* [@dc-mak (Dhruv Makwana)](https://github.com/dc-mak): Mention dependency of codeDescription on code [PR #830](https://github.com/microsoft/vscode-languageserver-node/pull/830)  \nContributions to `vscode-pull-request-github`:  \n* [@burkeholland (Burke Holland)](https://github.com/burkeholland)\n* Fixes Commit hash should use a monospace font #2957 [PR #2968](https://github.com/microsoft/vscode-pull-request-github/pull/2968)\n* Burkeholland-issue1635 [PR #2993](https://github.com/microsoft/vscode-pull-request-github/pull/2993)\n* Title doesn't have enough horizontal space in small tabs [PR #3029](https://github.com/microsoft/vscode-pull-request-github/pull/3029)\n* Fix 2959 - Merge title box needs top margin [PR #3039](https://github.com/microsoft/vscode-pull-request-github/pull/3039)\n* [@nicholas-l (Nicholas Latham)](https://github.com/nicholas-l): Allow authentication for github enterprise [PR #3064](https://github.com/microsoft/vscode-pull-request-github/pull/3064)  \nContributions to `vscode-vsce`:  \n* [@Andrewnt219 (Andrew Nguyen)](https://github.com/Andrewnt219): feat: warn users about missing LICENSE [PR #628](https://github.com/microsoft/vscode-vsce/pull/628)\n* [@felipecrs (Felipe Santos)](https://github.com/felipecrs): Migrate to GitHub Actions [PR #579](https://github.com/microsoft/vscode-vsce/pull/579)\n* [@SimonSegerblomRex (Simon Segerblom Rex)](https://github.com/SimonSegerblomRex): Fix broken Dockerfile [PR #640](https://github.com/microsoft/vscode-vsce/pull/640)  \nContributions to `debug-adapter-protocol`:  \n* [@getreu (Jens Getreu)](https://github.com/getreu): Rust: Microsoft DAP server implementation [PR #204](https://github.com/microsoft/debug-adapter-protocol/pull/204)  \nContributions to `language-server-protocol`:  \n* [@nektro (Meghan)](https://github.com/nektro): fix the bounding box of `.anchor`s [PR #1355](https://github.com/microsoft/language-server-protocol/pull/1355)  \nContributions to `monaco-languages`:  \n* [@arlosi (Arlo Siemsen)](https://github.com/arlosi): Rust: highlighting raw strings and fix chars with escapes [PR #167](https://github.com/microsoft/monaco-languages/pull/167)  \nContributions to `node-jsonc-parser`:  \n* [@Marcono1234](https://github.com/Marcono1234): Improve README [PR #47](https://github.com/microsoft/node-jsonc-parser/pull/47)\n* [@urish (Uri Shaked)](https://github.com/urish): readme: improve ParseOptions documentation [PR #54](https://github.com/microsoft/node-jsonc-parser/pull/54)  \nContributions to `vscode-jupyter`:  \n* [Janosh Riebesell](https://github.com/janosh): Add setting jupyter.newCellOnRunLast [PR #7995](https://github.com/Microsoft/vscode-jupyter/pull/7995)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_62#_pull-requests",
    "id": 2456
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Configure Problems navigation order  \nYou can now define the order for **Go to Next Problem** (`kb(editor.action.marker.next)`) and **Go to Previous Problem** (`kb(editor.action.marker.prev)`) navigation. In previous versions, the order of navigation was based on severity, going to errors first, then warnings, then the rest. The new **Problems: Sort Order** (`problems.sortOrder`) setting lets you navigate problems by either their `severity` or `position`. When using `\"problems.sortOrder\": \"position\"`, a warning on line 5 will be shown before an error on line 13, etc.",
    "url": "https://code.visualstudio.com/updates/v1_63#_configure-problems-navigation-order",
    "id": 2457
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Multiple language specific editor settings  \nYou can now configure language specific editor settings for multiple languages at once. The following example shows how you can customize settings for `javascript` and `typescript` languages together in your `settings.json` file:  \n```json\n\"[javascript][typescript]\": {\n\"editor.maxTokenizationLineLength\": 2500\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_63#_multiple-language-specific-editor-settings",
    "id": 2458
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Automatic 2x2 editor grid  \nA true 2x2 grid editor layout was only possible using the **View: Grid Editor Layout (2x2)** command. Now you can get the same layout by manually splitting editors until you reach a 2x2 grid, and the grid will automatically lock into a true 2x2 layout.",
    "url": "https://code.visualstudio.com/updates/v1_63#_automatic-2x2-editor-grid",
    "id": 2459
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Better Escape handling in lists  \nPressing `kbstyle(Escape)` on lists and trees will now shrink the selection to a single element before clearing it.",
    "url": "https://code.visualstudio.com/updates/v1_63#_better-escape-handling-in-lists",
    "id": 2460
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Find enabled on web  \nThe Find control is now supported inside webviews when VS Code is running in a browser (github.dev in the example below):  \n![Find widget on github.dev](images/1_63/webview-web-find.png)  \nDue to limitations with current browser APIs, find behaves a bit differently than it does on desktop. For example, on web, VS Code can only highlight the current find result. On desktop, all results are highlighted in the current file.",
    "url": "https://code.visualstudio.com/updates/v1_63#_find-enabled-on-web",
    "id": 2461
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Screencast mode shows command names  \nYou can now choose to show command names as you trigger them via keyboard shortcuts in screencast mode. Use the **Screencast Mode: Keyboard Shortcuts Format** (`screencastMode.keyboardShortcutsFormat`) setting to configure this behavior.  \n![Screencast mode with command names along with keystrokes](images/1_63/commands-screencast.png)",
    "url": "https://code.visualstudio.com/updates/v1_63#_screencast-mode-shows-command-names",
    "id": 2462
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Pre release extensions  \nVS Code now supports pre-release versions of extensions so you can opt in to install them and try out the latest cutting edge features from extensions. VS Code shows an additional **Install Pre-Release Version** option in the extension **Install** drop-down menu for installing the pre-release version.  \n![Pre-Release install dropdown](images/1_63/extensions-pre-release-install.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \nOnce installed, an indicator makes it clear if you are using the pre-release version of an extension:  \n![Pre-Release version indication](images/1_63/extensions-pre-release-install-indicators.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*  \nIf there is a pre-release version of an extension that you have already installed, you can easily switch to it:  \n![Switch to Pre-Release version button](images/1_63/extensions-pre-release-indicators.png)  \n*Theme: [GitHub Light Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)*",
    "url": "https://code.visualstudio.com/updates/v1_63#_pre-release-extensions",
    "id": 2463
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Updated Find actions  \nThe Find actions in the Search view now use the same style as Find actions in the editor:  \n<video src=\"images/1_63/find-actions.mp4\" autoplay loop controls muted title=\"Find actions in both the Search view and the editor\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_63#_updated-find-actions",
    "id": 2464
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Source Control  \n### Ignore trim whitespace in quick diff  \nYou can now configure the SCM quick diff feature displayed in the left gutter to ignore trim whitespace, using the `scm.diffDecorationsIgnoreTrimWhitespace` setting.",
    "url": "https://code.visualstudio.com/updates/v1_63#_ignore-trim-whitespace-in-quick-diff",
    "id": 2465
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Notebooks  \n### Adjust the font size in notebooks  \nThe new `notebook.markup.fontSize` setting lets you control the font size of notebook Markdown content. The default for this setting is 120% of the current editor font size.",
    "url": "https://code.visualstudio.com/updates/v1_63#_adjust-the-font-size-in-notebooks",
    "id": 2466
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Syntax highlighting in Markdown cells  \nVS Code now supports syntax highlighting of [fenced codeblocks](https://docs.github.com/github/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks) inside Markdown cells:  \n![A fenced code block in a notebook with syntax highlighting](images/1_63/notebook-fenced-codeblock.png)",
    "url": "https://code.visualstudio.com/updates/v1_63#_syntax-highlighting-in-markdown-cells",
    "id": 2467
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### File links in notebooks  \nMarkdown inside notebooks can now link to other files in the current workspace:  \n<video src=\"images/1_63/notebook-file-links.mp4\" autoplay loop controls muted title=\"File links in a Jupyter notebook\"></video>  \nLinks the start with `/` are resolved relative to the workspace root. Links that start with `./` or just start with a filename are resolved relative to the current notebook.",
    "url": "https://code.visualstudio.com/updates/v1_63#_file-links-in-notebooks",
    "id": 2468
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Bare http(s) links notebooks  \nIn addition, Markdown text that includes `http` or `https` is now automatically turned into a link:  \n![A link automatically created from Markdown text](images/1_63/notebook-bare-link.png)  \nThis matches the behavior of other notebook renderers, such as JupyterLab.",
    "url": "https://code.visualstudio.com/updates/v1_63#_bare-https-links-notebooks",
    "id": 2469
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Dynamic visibility of notebook toolbar labels  \nThe notebook toolbar can decide if the label for an action should be visible based on the width of the editor group, by setting `notebook.globalToolbarShowLabel` to `dynamic`. It will hide labels from the right-most action groups first and then the left side ones. If the editor group is still too narrow when all labels are hidden, the actions will be moved into an overflow menu.  \n<video src=\"images/1_63/notebook-toolbar-dynamic-label.mp4\" autoplay loop controls muted title=\"Show and hide notebook toolbar labels dynamically\"></video>  \nThe other values for `notebook.globalToolbarShowLabel` are now `always` and `never`.",
    "url": "https://code.visualstudio.com/updates/v1_63#_dynamic-visibility-of-notebook-toolbar-labels",
    "id": 2470
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Editor  \n### Unicode highlighting  \nAll uncommon invisible characters in source code are now highlighted by default:  \n![Unicode Highlighting Example: Invisible character is highlighted with hover explanation](./images/1_63/unicode-highlighting-invisible.png)  \nIn addition, characters that can be confused with ASCII characters are also highlighted:  \n![Unicode Highlighting Example: Confusing character is highlighted with hover explanation](./images/1_63/unicode-highlighting-confusable.png)  \nYou can read [\"The Invisible JavaScript Backdoor\" blog post](https://certitude.consulting/blog/en/invisible-backdoor/) or [this University of Cambridge article](https://www.trojansource.codes/) for how invisible or confusable Unicode characters can be used in Unicode spoofing attacks.  \nNote that this feature does not detect all possible Unicode spoofing attacks, as this depends on your font and locale settings. Also, the detection of ambiguous characters is done heuristically. To be on the safe side, VS Code's Workspace Trust [Restricted Mode](https://code.visualstudio.com/docs/editor/workspace-trust#_restricted-mode) should be used to review source code, as **all** non-ASCII characters are highlighted in untrusted workspaces.  \nThe settings `editor.unicodeHighlight.invisibleCharacters`, `editor.unicodeHighlight.ambiguousCharacters`, or `editor.unicodeHighlight.nonBasicASCII` can be set to `false` to disable the corresponding feature.  \nIndividual characters can be excluded from being highlighted and characters in comments or text with the following settings:  \n* `editor.unicodeHighlight.allowedCharacters` - List of specific characters not to be highlighted.\n* `editor.unicodeHighlight.includeComments` - Enable highlighting characters in comments.  \nIn addition, Markdown documents are not highlighted by default.",
    "url": "https://code.visualstudio.com/updates/v1_63#_unicode-highlighting",
    "id": 2471
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Multiple hover providers  \nWhen having multiple hover providers for a document, the hover will now display as soon as one of the providers has returned a result and it will update with the rest of the providers results, as they come in:  \n| Before | After |\n|---|---|\n| <video src=\"images/1_63/hover-providers-before.mp4\" autoplay loop controls muted title=\"Hovers are rendered at the end\"></video> | <video src=\"images/1_63/hover-providers-after.mp4\" autoplay loop controls muted title=\"Hovers are rendered incrementally\"></video> |",
    "url": "https://code.visualstudio.com/updates/v1_63#_multiple-hover-providers",
    "id": 2472
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Tasks  \n### automationProfile setting  \nThe old settings `terminal.integrated.automationShell.*` have been deprecated and new `terminal.integrated.automationProfile.*` settings have been added. This allows for greater freedom in specifying properties of terminals used for tasks, including shell, icon, color, and shell argument.",
    "url": "https://code.visualstudio.com/updates/v1_63#_automationprofile-setting",
    "id": 2473
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### gulpfile.ts support  \nThe built-in gulp extension now supports detecting tasks from `gulpfile.ts` files.",
    "url": "https://code.visualstudio.com/updates/v1_63#_gulpfile.ts-support",
    "id": 2474
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### NPM Scripts view improvements  \nThe NPM scripts view shows more details about the scripts.  \n![NPM Scripts view with script details](images/1_63/npm-scripts-view.png)  \nThere is also a new setting `npm.scriptExplorerExclude`, which allows you to specify scripts to exclude from the NPM Scripts view.",
    "url": "https://code.visualstudio.com/updates/v1_63#_npm-scripts-view-improvements",
    "id": 2475
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Languages  \n### TypeScript 4.5  \nVS Code now ships with TypeScript 4.5. This update brings a number of new language features, along with tooling improvements and bug fixes.  \nYou can read more about TypeScript 4.5 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5).",
    "url": "https://code.visualstudio.com/updates/v1_63#_typescript-4.5",
    "id": 2476
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Method signature completions  \nMethod signature completions let you quickly override methods and implement interface methods. With this feature, when you are inside a class body, suggestions for methods\u2014such as those from a super class\u2014insert the entire signature of the method when accepted:  \n<video src=\"images/1_63/ts-method-completion.mp4\" autoplay loop controls muted title=\"Completing method signatures in TypeScript\"></video>  \nIf you're writing TypeScript, accepting the suggestion also adds all the necessary imports for types referenced in the signature.  \nThis feature requires TypeScript 4.5 in the workspace and can be enabled/disable using `typescript.suggest.classMemberSnippets.enabled` and `javascript.suggest.classMemberSnippets.enabled`.",
    "url": "https://code.visualstudio.com/updates/v1_63#_method-signature-completions",
    "id": 2477
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### JSX attribute completions  \nWhen completing JSX attributes in JavaScript and TypeScript, VS Code will now automatically insert the attribute value:  \n<video src=\"images/1_63/ts-attribute-completion.mp4\" autoplay loop controls muted title=\"Completing JSX attribute values\"></video>  \nThe behavior of these completions can be configured using `javascript.preferences.jsxAttributeCompletionStyle` and `typescript.preferences.jsxAttributeCompletionStyle`.  \nPossible settings values are:  \n* `auto` - Infer the attribute style based on its type. Strings use `attr=\"\"` while other types use `attr={}`.\n* `braces` - Always use braces.\n* `None`- Just complete the attribute name.",
    "url": "https://code.visualstudio.com/updates/v1_63#_jsx-attribute-completions",
    "id": 2478
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Removing of semantic highlighting for older TS versions  \nThis update removes support for semantic highlighting when using TypeScript 4.1 or older in your workspace.  \nTypeScript 4.2 added native support for semantic highlighting. On older versions, semantic highlighting was implemented as a TypeScript language plugin provided by VS Code. Removing the plugin reduces the amount of code to maintain and ship.",
    "url": "https://code.visualstudio.com/updates/v1_63#_removing-of-semantic-highlighting-for-older-ts-versions",
    "id": 2479
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Markdown Preview custom editor  \nYou can now use the **Reopen With** command to make a Markdown file be shown as a Markdown preview instead of text:  \n<video src=\"images/1_63/md-custom-editor.mp4\" autoplay loop controls muted title=\"Switching an editor tab to a Markdown preview\"></video>  \nUnlike the **Markdown: Open Preview** command, **Reopen With** does not open a new editor tab, instead it changes how an already opened editor tab is displayed. Use **Reopen With** again to switch the file back to the default text view.  \nAdditionally, you can now configure VS Code to automatically open any Markdown file as a preview using the `workbench.editorAssociations` setting:  \n```json\n\"workbench.editorAssociations\": {\n\"*.md\": \"vscode.markdown.preview.editor\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_63#_markdown-preview-custom-editor",
    "id": 2480
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Markdown Preview incremental updating  \nThe built-in Markdown preview now more intelligently updates itself as you type. Instead of replacing the entire Markdown preview document for every update, the preview now uses DOM diffing to only replace the elements in the preview document that have changed. This reduces the jittering that would sometime occur while typing.",
    "url": "https://code.visualstudio.com/updates/v1_63#_markdown-preview-incremental-updating",
    "id": 2481
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### JSON language indicator  \nWhen editing in a JSON file, there's now a language indicator `{}` that shows whether the content was validated against one or more JSON schemas. Hovering over the indicator shows the validation state and a link to open the schema.  \n![JSON language selector](images/1_63/json-language-indicator.png)",
    "url": "https://code.visualstudio.com/updates/v1_63#_json-language-indicator",
    "id": 2482
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### JSON schema caching  \nJSON schemas from the schema store (json.schemastore.org) are now cached locally. This saves network bandwidth and helps when working off-line.",
    "url": "https://code.visualstudio.com/updates/v1_63#_json-schema-caching",
    "id": 2483
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Emmet Remove Tag command improvement  \nThe **Emmet: Remove Tag** command now removes the line with the tag, along with excess empty lines as applicable, when the tag is on its own line before the removal. It also re-indents the remaining lines properly now, when there are empty lines in between the tags to be removed.  \n<video src=\"images/1_63/emmet-remove-tag.mp4\" autoplay loop controls muted title=\"Emmet Remove Tag demo removing a surrounding div element\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_63#_emmet-remove-tag-command-improvement",
    "id": 2484
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## VS Code for the Web  \n### Azure Repos  \nThis milestone we have partnered with the Azure DevOps engineering team to add a new keyboard shortcut to the **Files** hub in Azure Repos. When browsing a repository in the **Files** hub, you can press `.` to open the repository in [https://vscode.dev](https://vscode.dev).  \nWe have also added a new entry point to your Azure Repos repository. You can now use the new **Open Repository from Azure Repos...** menu item under the **Open Remote Repositories...** menu item in the remote picker to connect to your Azure Repos repository from within [https://vscode.dev](https://vscode.dev).  \nAdditionally, you can now open an Azure Repos repository using the legacy Azure DevOps URL format (for example, `https://<org>.visualstudio.com`) in vscode.dev by prefixing the URL with `https://vscode.dev`.",
    "url": "https://code.visualstudio.com/updates/v1_63#_azure-repos",
    "id": 2485
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Improved Remote menu  \nThree additional commands now appear in the Remote menu:  \n* **Close Remote Workspace** - Change the workspace to the empty one.\n* **Download Visual Studio Code** - Go to [https://code.visualstudio.com/download](https://code.visualstudio.com/download).\n* **Go to Repository** - Open the repository on the source control host website, for example [https://github.com](https://github.com) for GitHub repositories.",
    "url": "https://code.visualstudio.com/updates/v1_63#_improved-remote-menu",
    "id": 2486
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Contributions to extensions  \n### Java  \nThe [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) now has an in-product welcome experience to help you configure and learn about Java in VS Code. The walkthroughs cover installing the Java runtime and useful frameworks, opening and debugging your project, and running tests directly inside VS Code.  \n![Extension Pack for Java walkthrough](images/1_63/java-walkthrough.png)  \nYou can also check out the Java tutorials and user guides at [https://code.visualstudio.com/docs/java](https://code.visualstudio.com/docs/java) to help get you started.",
    "url": "https://code.visualstudio.com/updates/v1_63#_java",
    "id": 2487
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Jupyter  \n**Performance improvements**  \nThere were a number of performance improvements made to the startup of Jupyter kernels, specifically `Python`. Users who have previously opened a notebook will see a 2x speedup when starting a kernel. Restarting `Python` kernels should also be faster.  \nFor more details on the changes made to improve the performance, you can review the following issues:  \n* Support pre-warming kernels to improve startup experience of notebooks. ([#7903](https://github.com/microsoft/vscode-jupyter/issues/7903))\n* Faster activation of Python environments such as Conda. ([#8342](https://github.com/microsoft/vscode-jupyter/pull/8342))\n* Avoid starting default kernel when starting jupyter. ([#8185](https://github.com/microsoft/vscode-jupyter/issues/8185))\n* Avoid looking for IPyKernel when we've found it once before. ([#8196](https://github.com/microsoft/vscode-jupyter/issues/8196))\n* Avoid unnecessarily searching for `Jupyter` packages when `Jupyter` runtime isn't required to start kernels. ([#8350](https://github.com/microsoft/vscode-jupyter/issues/8350), [#8352](https://github.com/Microsoft/vscode-jupyter/issues/8352))  \n**Improvements in handling kernel failures**  \nA diagnostic message along with a Quick Fix has been added to warn about the usage of `!pip install` when installing Python packages. The Quick Fix will help users choose the right command `%pip install`.  \n<video src=\"images/1_63/pip_install.mp4\" autoplay loop controls muted title=\"Pip install in Jupyter\"></video>  \nSeveral improvements have been made to provide better and more meaningful error messages when kernels fail to start or stop during execution. Errors are now displayed in the cells outputs along with instructions on how to fix the issue. This ensures that users are aware of the issue and can fix it, in case they miss the error displayed on the bottom right of VS Code.  \n<video src=\"images/1_63/kernel_override_python_builtins.mp4\" autoplay loop controls muted title=\"Better kernel errors in Jupyter\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_63#_jupyter",
    "id": 2488
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Python  \n**Limited support for untrusted and virtual workspaces**  \nThe Python extension now has limited support for untrusted workspaces (see [Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust#_extensions)) or is on a virtual file system (for example, if a remote GitHub repository is opened). Only partial IntelliSense is provided in such cases and other features of the extension are not available:  \n* Hover, same file completion, and completion for built-ins like print are available, but the extension is limited to only working with your currently opened files.\n* For untrusted workspaces, only the Pylance language server is supported.\n* For virtual workspaces, only Jedi and Pylance are supported.  \nThe language item in Status bar is updated to indicate these situations:  \n![Limited support for Python in an untrusted workspace](images/1_63/python-limited-support.png)  \n**Module rename refactoring**  \nYou can now more easily rename modules with the Python and Pylance extensions. Once you rename a Python module, you'll be prompted to choose whether you'd like to change all imports and references throughout your code. If you're not sure, you can first preview what the changes will look like before you make the decision. Once you're confident, you can select **Apply Refactoring** or **Discard Refactoring** to not have the proposed changes applied.  \n<video src=\"images/1_63/python-module-rename.mp4\" autoplay loop controls muted title=\"Module rename with Pylance\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_63#_python",
    "id": 2489
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.63 include:  \n* You can now open a folder in a container when working on an SSH server with the **Reopen in Container** command.\n* Improved forwarded port security avoids unsafe ports.\n* Configurable WSL connection method lets you use `wsl.exe` or a socket connection to talk to the server.\n* Advanced container configuration videos covering how to [change the default location of your project](https://code.visualstudio.com/remote/advancedcontainers/change-default-source-mount) and [improve performance on Windows](https://code.visualstudio.com/remote/advancedcontainers/improve-performance).  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_63.md).",
    "url": "https://code.visualstudio.com/updates/v1_63#_remote-development",
    "id": 2490
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.34.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0340) release of the extension to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_63#_github-pull-requests-and-issues",
    "id": 2491
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n## Extension authoring  \n### Updated API proposal structure  \nWe have changed how API proposals are managed. Before, there was a single file that contained all proposals, `vscode.proposed.d.ts`. This file had grown and it was hard to tell what proposals an extension was using and if a certain proposal was already in the stable API. There is now a file per proposal.  \nFor example:  \n* [`vscode.proposed.languageStatus.d.ts`](https://github.com/microsoft/vscode/blob/d673cdb0ecf1c760f22e0ba5530971e1d91a9d44/src/vscode-dts/vscode.proposed.languageStatus.d.ts) - The language status item proposal.\n* [`vscode.proposed.tabs.d.ts`](https://github.com/microsoft/vscode/blob/a4d426a1c2ece4222f1343459d31fe948098b2f6/src/vscode-dts/vscode.proposed.tabs.d.ts) - The editor tabs and tab groups proposed API.  \nEach proposal has a unique name and extensions wanting to use a proposed API need to list those names in their `package.json`. The `enableProposedApi` property in `package.json` is replaced by the new `enabledApiProposals`, which is a string array of proposal names and has IntelliSense and validation support.  \n![IntelliSense when authoring the enabledApiProposals property](images/1_63/enabled-api-proposals.png)  \nThe updated flow for API proposals should be like this:  \n1. Find a proposal that you want to try and add its name to `package.json#enabledApiProposals`.\n1. Use the latest [vscode-dts](https://www.npmjs.com/package/vscode-dts) and run `vscode-dts dev`. It will download the corresponding `d.ts` files into your workspace.\n1. You can now program against the proposal.  \nA detailed migration guide and sample migrations can be found in [issue #136964](https://github.com/microsoft/vscode/issues/136964). Also note that the restrictions around proposed API usages haven't changed. Extensions using a proposed API cannot be published and cannot be used as-is.",
    "url": "https://code.visualstudio.com/updates/v1_63#_updated-api-proposal-structure",
    "id": 2492
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Quick Pick API improvements  \nThis iteration, we are finalizing a couple of APIs for the QuickPick in VS Code.  \n**QuickPickItem inline buttons**  \nBeing able to provide rich input experiences is a goal of our extension API and using the familiarity of VS Code's Quick Pick allows for powerful yet simple UI flows. One addition is that extensions can now add buttons to individual `QuickPickItem`s.  \n![QuickPickItem buttons](images/1_63/quickpickitem-buttons.png)  \nClicking on a button triggers the `onDidTriggerItemButton` event that exists on a `QuickPick` object. We look forward to seeing how you use these buttons in your extensions.  \n**Ability to keep scroll position when updating items**  \nAlong with the ability to add buttons to `QuickPickItem`s, you may also want to keep the scroll position when updating the items. This is a common use case for extensions who want to:  \n* Implement a \"remove this item from the list\" (for example, Ctrl/Cmd + P `x` QuickPickItemButton).\n* Implement a \"toggle this item in some way\" (such as an \"Insert Snippet\" command).\n* Asynchronously loading items in the Quick Pick.  \nThe `keepScrollPosition` property on the `QuickPick` object that comes back from `window.createQuickPick()` allows you to control whether or not the scroll position (`cursorTop`) in the Quick Pick moves back to the top of the list.",
    "url": "https://code.visualstudio.com/updates/v1_63#_quick-pick-api-improvements",
    "id": 2493
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Authentication API improvements  \nThis iteration, we are finalizing several APIs related to authentication in VS Code.  \n**Force the creation of a new session**  \nSometimes, when you get a session using `authentication.getSession()`, it may be valid for some resources but not valid for others, and by going through the sign-in flow again, this situation can be fixed.  \nAn example is GitHub Single Sign On's Security Assertion Markup Language (SAML) support. By default, a token generated for you with `repo` scope will have the ability to access your own personal repositories. However, if you are in an organization with GitHub's Single Sign On turned on, you will have to explicitly grant a session the ability to access repositories in that organization.  \nIn this example, the GitHub Authentication provider won't know the difference between a token that is properly SAML'd for what you're trying to access or not and so to rectify that behavior, you can now force the creation of a new session.  \n`AuthenticationGetSessionOptions` now has a `forceNewSession` property that lets you ask the user to sign in again. If you set this to `true`, the user will see:  \n![Forcing sign in](images/1_63/auth-force.png)  \nYou can also specify an object with a `detail` string, if you want to show a more descriptive message to the user.  \n**Silently retrieve a session if an extension has one**  \nA common pattern we've seen is that some extensions, when they activate, will check to see if they have an authentication session available. If so, they will use it to pre-load data and do other tasks ahead of time to speed up performance later on. The downside of this was that if a user hasn't given that extension access to an authentication session, a badge would be displayed on the account menu and an item in the menu will be added asking the user to sign in.  \nThis is fine for some cases, but in others it's not desirable and clutters the screen for the user. To help with this, there is a new property on `AuthenticationGetSessionOptions` called `silent`, which lets you ask for a session without showing any indication that the extension asked for it. That way, the extension can do what it wants if it has the ability to get a session, but if it doesn't, it doesn't pester the user.  \n> **Note**: This API will only return an authenticated session if the extension has already been granted access to the session in the past (in other words, it's a \"trusted extension\"). An extension will never be given a session that the user didn't consent to.",
    "url": "https://code.visualstudio.com/updates/v1_63#_authentication-api-improvements",
    "id": 2494
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Settings editor improvements  \n**Ordered settings**  \nIndividual settings can now be ordered with the `order` field. Ordered settings always come before unordered ones within the same category, and the ordering is relative.  \n**Ungrouped category support**  \nSettings can also be grouped under the main extension header instead of a specific category. To do that, set the category title of one of the categories to be the same as the extension display name.  \nNotice in the example below that the **Conf** > **Language: Show Size** setting is directly under the **Configuration Sample** header.  \n![Settings appearing directly under the extension header](images/1_63/ungrouped-config-settings-editor.png)  \n**Support for number and integer objects**  \nObjects with non-nullable number/integer values are now supported in the Settings editor.  \n![An object setting in the Settings editor with number/integer values](images/1_63/numeric-object-settings-editor.png)",
    "url": "https://code.visualstudio.com/updates/v1_63#_settings-editor-improvements",
    "id": 2495
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### New type signature for executeCommand  \nIn previous versions of VS Code, `vscode.commands.executeCommand` was typed to always return a promise of a potentially undefined value:  \n```js\nexport function executeCommand<T>(command: string, ...rest: any[]): Thenable<T | undefined>;\n```  \nHowever, not all commands can return `undefined`. For example, commands that return an array of items usually return an empty array instead of `undefined` if there are no results. In these cases, you had to use an ugly cast or add unnecessary checks to write type correct code.  \nTo fix this, we've updated the typings for `executeCommand` to be more explicit:  \n```js\nexport function executeCommand<T = unknown>(command: string, ...rest: any[]): Thenable<T>;\n```  \nThis means that if a command can return `undefined`, you must explicitly pass in `| undefined` as part of the type parameter:  \n```ts\nvscode.commands.executeCommand<vscode.CallHierarchyItem | undefined>('vscode.prepareCallHierarchy', ...);\n```  \nThis change only effects the typings of `executeCommand` and does not change the behavior of this function.",
    "url": "https://code.visualstudio.com/updates/v1_63#_new-type-signature-for-executecommand",
    "id": 2496
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Updating vscode.d.ts for exactOptionalPropertyTypes  \nWe've updated the typings in `vscode.d.ts` to better support TypeScript's [`exactOptionalPropertyTypes` strictness option](https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes). This work included:  \n* Clarifying which optional properties can be assigned `undefined`.\n* Being more consistent in how we use `?` versus `| undefined`.  \nIf you are using `exactOptionalPropertyTypes` with your extension, please let us know if you run into any issues with the `vscode.d.ts` typings.",
    "url": "https://code.visualstudio.com/updates/v1_63#_updating-vscode.d.ts-for-exactoptionalpropertytypes",
    "id": 2497
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### HTML custom data from URIs  \n[Custom data](https://code.visualstudio.com/api/extension-guides/custom-data-extension) allows users and extensions to extend the HTML language support with new HTML tags and attributes.  \nIn this release, the HTML custom data contribution also accepts document URIs. You can use this to provide the custom data at runtime through a document from a [TextDocumentContentProvider](https://code.visualstudio.com/api/extension-guides/virtual-documents#textdocumentcontentprovider).",
    "url": "https://code.visualstudio.com/updates/v1_63#_html-custom-data-from-uris",
    "id": 2498
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Configuration defaults overrides  \nYou can now override defaults of other registered configurations through `configurationDefaults` contribution point in `package.json`. For example, the following snippet overrides the default behavior of `files.autoSave` setting to AutoSave files on focus change.  \n```json\n\"configurationDefaults\": {\n\"files.autoSave\": \"onFocusChange\"\n}\n```  \n**Note:** Configurations with `application` or `machine` scopes cannot be overridden.",
    "url": "https://code.visualstudio.com/updates/v1_63#_configuration-defaults-overrides",
    "id": 2499
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Replace content in Output channel  \nIn this milestone, a new `replace` API on the `OutputChannel` object can replace the content in the output channel.  \n```ts\n/**\n* Replaces all output from the channel with the given value.\n*\n* @param value A string, falsy values will not be printed.\n*/\nreplace(value: string): void;\n```",
    "url": "https://code.visualstudio.com/updates/v1_63#_replace-content-in-output-channel",
    "id": 2500
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Timeout of workspaceContains  \nWhen using a `workspaceContains:` activation event with a glob pattern, VS Code starts a file name search in the workspace, looking for a file name that matches the provided glob pattern. As soon as a matching file name is found, the extension is activated. If no matching file names are found within 7 seconds, VS Code will now cancel the search and the extension will not be activated.",
    "url": "https://code.visualstudio.com/updates/v1_63#_timeout-of-workspacecontains",
    "id": 2501
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Publishing pre-release extensions  \nVS Code now supports extension authors publishing pre-releases of their extensions through `vsce` by passing `--pre-release` flag. This means you can make your latest features available to users who chose to install pre-releases and get early feedback before the official extension release.  \n```bash\nvsce publish --pre-release\n```  \nThe VS Code Marketplace only supports `major.minor.patch` for extension versions and does not yet support `semver` pre-release tags. We therefore recommend that extensions use `major.EVEN_NUMBER.patch` for release versions and `major.ODD_NUMBER.patch` for pre-release versions. For example: `0.2.*` for release and `0.3.*` for pre-release. VS Code will auto update extensions to the highest version available, so even if a user opted into a pre-release version, once there is an extension released with a higher version, that user will be updated to the released version.  \nMore information about pre-release extensions can be found in the [Pre-release Extensions](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#prerelease-extensions) topic.",
    "url": "https://code.visualstudio.com/updates/v1_63#_publishing-pre-release-extensions",
    "id": 2502
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Clarifications and improvements for the execution control requests  \nPreviously the Debug Adapter Protocol specified that all \"execution control\" requests (`continue`, `next`, `stepIn`, `stepOut`, `stepBack`, `reverseContinue`) operate on a single thread but that an implementation could decide to ignore the thread argument and operate on all threads. Since this fuzzy \"single thread\" semantics is not really useful, typically debug adapters implement something more useful:  \n* \"step\" requests that step the current thread while allowing others threads to run freely by resuming them.\n* \"continue\" requests that resume all threads.  \nSince the current spec is impractical for execution control requests, we have changed the spec for all execution control requests (`continue`, `next`, `stepIn`, `stepOut`, `stepBack`, `reverseContinue`) so that it matches what is typically implemented.  \nIn addition, some debug adapters have a need for an \"alternative semantic\" where `step` or `continue`  operate only on the current thread but keep all other threads in the suspended state. For this \"alternative behavior\", a new optional `singleThread` property has been added to all execution control requests. A corresponding new capability `supportsSingleThreadExecutionRequests` must be used by a debug adapter to indicate to the client that the execution control requests support the `singleThread` property.",
    "url": "https://code.visualstudio.com/updates/v1_63#_clarifications-and-improvements-for-the-execution-control-requests",
    "id": 2503
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between November 2 and December 6):  \n* [Material Icon Theme (lit fork)](https://marketplace.visualstudio.com/items?itemName=abschill.material-icon-theme-fork-lithtml) ([abschill](https://marketplace.visualstudio.com/publishers/abschill))\n* [Base64 Utils](https://marketplace.visualstudio.com/items?itemName=adrientoub.base64utils) ([Adrientoub](https://marketplace.visualstudio.com/publishers/adrientoub))\n* [LS-Club](https://marketplace.visualstudio.com/items?itemName=advantisss.ls-club) ([AdvantiSS](https://marketplace.visualstudio.com/publishers/advantisss))\n* [Apollo Workbench](https://marketplace.visualstudio.com/items?itemName=apollographql.apollo-workbench) ([Apollo GraphQL](https://marketplace.visualstudio.com/publishers/ApolloGraphQL))\n* [A-SOUL \u9f13\u52b1\u5e08](https://marketplace.visualstudio.com/items?itemName=AS042971.asoul) ([AS042971](https://marketplace.visualstudio.com/publishers/as042971))\n* [Django](https://marketplace.visualstudio.com/items?itemName=batisteo.vscode-django) ([Baptiste Darthenay](https://marketplace.visualstudio.com/publishers/batisteo))\n* [TOML Language Support](https://marketplace.visualstudio.com/items?itemName=be5invis.toml) ([be5invis](https://marketplace.visualstudio.com/publishers/be5invis))\n* [Simple React Snippets](https://marketplace.visualstudio.com/items?itemName=burkeholland.simple-react-snippets) ([Burke Holland](https://marketplace.visualstudio.com/publishers/burkeholland))\n* [MASM/TASM](https://marketplace.visualstudio.com/items?itemName=xsro.masm-tasm) ([clcxsrolau](https://marketplace.visualstudio.com/publishers/xsro))\n* [Tree](https://marketplace.visualstudio.com/items?itemName=CTC.vscode-tree-extension) ([CTC](https://marketplace.visualstudio.com/publishers/CTC))\n* [Tree (Insiders)](https://marketplace.visualstudio.com/items?itemName=CTC.vscode-tree-extension-insiders) ([CTC](https://marketplace.visualstudio.com/publishers/CTC))\n* [Structured Data Templates](https://marketplace.visualstudio.com/items?itemName=danielgtaylor.structured-data-templates) ([Daniel G. Taylor](https://marketplace.visualstudio.com/publishers/danielgtaylor))\n* [Notepad Notebook](https://marketplace.visualstudio.com/items?itemName=Devon7925.vscode-notepad) ([Devon7925](https://marketplace.visualstudio.com/publishers/devon7925))\n* [Of course I still log you](https://marketplace.visualstudio.com/items?itemName=eazel7.of-course-i-still-log-you) ([Diego Perez](https://marketplace.visualstudio.com/publishers/eazel7))\n* [Hello, DotNetJS!](https://marketplace.visualstudio.com/items?itemName=Elringus.dotnetjs) ([Elringus](https://marketplace.visualstudio.com/publishers/Elringus))\n* [Excel Viewer](https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer) ([GrapeCity](https://marketplace.visualstudio.com/publishers/GrapeCity))\n* [FTL XML](https://marketplace.visualstudio.com/items?itemName=hahn-kev.ftl-xml) ([hahn-kev](https://marketplace.visualstudio.com/publishers/hahn-kev))\n* [ECL Language](https://marketplace.visualstudio.com/items?itemName=hpcc-systems.ecl) ([HPCC Systems](https://marketplace.visualstudio.com/publishers/hpcc-systems))\n* [Graphviz Previewer Web](https://marketplace.visualstudio.com/items?itemName=ijmacd.graphviz-previewer-web) ([IJMacD](https://marketplace.visualstudio.com/publishers/ijmacd))\n* [ImJoy](https://marketplace.visualstudio.com/items?itemName=imjoy-team.imjoy) ([ImJoy Team](https://marketplace.visualstudio.com/publishers/imjoy-team))\n* [InterSystems ObjectScript](https://marketplace.visualstudio.com/items?itemName=intersystems-community.vscode-objectscript) ([InterSystems Developer Community](https://marketplace.visualstudio.com/publishers/intersystems-community))\n* [Shader Toy (Web)](https://marketplace.visualstudio.com/items?itemName=jakearl.shader-toy-web) ([Jackson Kearl](https://marketplace.visualstudio.com/publishers/jakearl))\n* [Dark Light](https://marketplace.visualstudio.com/items?itemName=IronGeek.vscode-darklight) ([Jakka Prihatna](https://marketplace.visualstudio.com/publishers/IronGeek))\n* [React Native Mockups Explorer](https://marketplace.visualstudio.com/items?itemName=jamsch.react-native-mockups-explorer-vscode) ([jamsch](https://marketplace.visualstudio.com/publishers/jamsch))\n* [Quote List](https://marketplace.visualstudio.com/items?itemName=jmviz.quote-list) ([jmviz](https://marketplace.visualstudio.com/publishers/jmviz))\n* [Vue Language Features (Volar)](https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar) ([Johnson Chu](https://marketplace.visualstudio.com/publishers/johnsoncodehk))\n* [Code Runner for Web](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner-for-web) ([Jun Han](https://marketplace.visualstudio.com/publishers/formulahendry))\n* [GZDoom ZScript](https://marketplace.visualstudio.com/items?itemName=kaptainmicila.gzdoom-zscript) ([kaptainmicila](https://marketplace.visualstudio.com/publishers/kaptainmicila))\n* [nginx.conf hint](https://marketplace.visualstudio.com/items?itemName=hangxingliu.vscode-nginx-conf-hint) ([Liu Yue](https://marketplace.visualstudio.com/publishers/hangxingliu))\n* [Loadmill](https://marketplace.visualstudio.com/items?itemName=Loadmill.vscode-loadmill) ([Loadmill](https://marketplace.visualstudio.com/publishers/Loadmill))\n* [UUID Generator](https://marketplace.visualstudio.com/items?itemName=ludwhe.vscode-uuid) ([ludwhe](https://marketplace.visualstudio.com/publishers/ludwhe))\n* [CSS Formatter](https://marketplace.visualstudio.com/items?itemName=aeschli.vscode-css-formatter) ([Martin Aeschlimann](https://marketplace.visualstudio.com/publishers/aeschli))\n* [SnowScript JS](https://marketplace.visualstudio.com/items?itemName=orellabacCR.snowscript-js) ([Mauricio Rojas](https://marketplace.visualstudio.com/publishers/orellabacCR))\n* [HLASM Browser dev](https://marketplace.visualstudio.com/items?itemName=mbali.hlasm-browser-dev) ([mbali](https://marketplace.visualstudio.com/publishers/mbali))\n* [Template String Converter](https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter) ([meganrogge](https://marketplace.visualstudio.com/publishers/meganrogge))\n* [Micro Focus COBOL](https://marketplace.visualstudio.com/items?itemName=Micro-Focus-AMC.mfcobol) ([Micro Focus](https://marketplace.visualstudio.com/publishers/Micro-Focus-AMC))\n* [Micro Focus Enterprise](https://marketplace.visualstudio.com/items?itemName=Micro-Focus-AMC.mfenterprise) ([Micro Focus](https://marketplace.visualstudio.com/publishers/Micro-Focus-AMC))\n* [Cursor Align](https://marketplace.visualstudio.com/items?itemName=yo1dog.cursor-align) ([Mike Moore](https://marketplace.visualstudio.com/publishers/yo1dog))\n* [Cursor Trim](https://marketplace.visualstudio.com/items?itemName=yo1dog.cursor-trim) ([Mike Moore](https://marketplace.visualstudio.com/publishers/yo1dog))\n* [Multi-Cursor Search](https://marketplace.visualstudio.com/items?itemName=yo1dog.multi-cursor-search) ([Mike Moore](https://marketplace.visualstudio.com/publishers/yo1dog))\n* [numeric](https://marketplace.visualstudio.com/items?itemName=nealbkn.numeric) ([neal.bkn](https://marketplace.visualstudio.com/publishers/nealbkn))\n* [Toast](https://marketplace.visualstudio.com/items?itemName=ncbradley.toast) ([Nick Bradley](https://marketplace.visualstudio.com/publishers/ncbradley))\n* [steris](https://marketplace.visualstudio.com/items?itemName=numso.steris-vscode) ([numso](https://marketplace.visualstudio.com/publishers/numso))\n* [N/A](https://marketplace.visualstudio.com/items?itemName=Orta.tspl) ([Orta](https://marketplace.visualstudio.com/publishers/Orta))\n* [Wurst language support](https://marketplace.visualstudio.com/items?itemName=peterzeller.wurst) ([peterzeller](https://marketplace.visualstudio.com/publishers/peterzeller))\n* [ShowFlags](https://marketplace.visualstudio.com/items?itemName=pewscorner.showflags) ([PEW's Corner](https://marketplace.visualstudio.com/publishers/pewscorner))\n* [Folder Archiver](https://marketplace.visualstudio.com/items?itemName=pdamianik.folder-archiver) ([Philip Damianik](https://marketplace.visualstudio.com/publishers/pdamianik))\n* [ZIP archive type](https://marketplace.visualstudio.com/items?itemName=pdamianik.zip-archive-type) ([Philip Damianik](https://marketplace.visualstudio.com/publishers/pdamianik))\n* [Open In Webview Web Extension](https://marketplace.visualstudio.com/items?itemName=project-mu.open-in-webview-web-extension) ([Project \u03bc](https://marketplace.visualstudio.com/publishers/project-mu))\n* [Replace On](https://marketplace.visualstudio.com/items?itemName=rioj7.replace-on) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Select By](https://marketplace.visualstudio.com/items?itemName=rioj7.select-by) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Powercursor](https://marketplace.visualstudio.com/items?itemName=RishovSarkar.vscode-powercursor) ([Rishov Sarkar](https://marketplace.visualstudio.com/publishers/RishovSarkar))\n* [BrightScript Language](https://marketplace.visualstudio.com/items?itemName=RokuCommunity.brightscript) ([RokuCommunity](https://marketplace.visualstudio.com/publishers/RokuCommunity))\n* [Script Assets](https://marketplace.visualstudio.com/items?itemName=saige.script-assets-web) ([Saige](https://marketplace.visualstudio.com/publishers/Saige))\n* [LinkMe](https://marketplace.visualstudio.com/items?itemName=saswatbh.linkme) ([saswatbh](https://marketplace.visualstudio.com/publishers/saswatbh))\n* [Drawing Editor](https://marketplace.visualstudio.com/items?itemName=seflless.vscode-editor) ([Seflless](https://marketplace.visualstudio.com/publishers/seflless))\n* [Azure ML Remote Web](https://marketplace.visualstudio.com/items?itemName=sevillal.vscode-ai-web) ([sevillal](https://marketplace.visualstudio.com/publishers/sevillal))\n* [vscode-cml](https://marketplace.visualstudio.com/items?itemName=sevillal.vscode-cml) ([sevillal](https://marketplace.visualstudio.com/publishers/sevillal))\n* [Reflow Paragraph](https://marketplace.visualstudio.com/items?itemName=ssigwart.reflow-paragraph) ([Stephen Sigwart](https://marketplace.visualstudio.com/publishers/ssigwart))\n* [Neon Dark Theme](https://marketplace.visualstudio.com/items?itemName=Sudhan.neondark-theme) ([Sudhan](https://marketplace.visualstudio.com/publishers/Sudhan))\n* [Japanese Word Handler](https://marketplace.visualstudio.com/items?itemName=sgryjp.japanese-word-handler) ([Suguru Yamamoto](https://marketplace.visualstudio.com/publishers/sgryjp))\n* [tldraw](https://marketplace.visualstudio.com/items?itemName=tldraw-org.tldraw-vscode) ([tldraw](https://marketplace.visualstudio.com/publishers/tldraw-org))\n* [vscodevim-sneak-fork](https://marketplace.visualstudio.com/items?itemName=vscodevim-sneak-fork.vscodevim-sneak-fork) ([vscodevim-sneak-fork](https://marketplace.visualstudio.com/publishers/vscodevim-sneak-fork))\n* [Expression2-LS](https://marketplace.visualstudio.com/items?itemName=Vurv78.e2-ls) ([Vurv78](https://marketplace.visualstudio.com/publishers/Vurv78))\n* [Weigl WEM | Script](https://marketplace.visualstudio.com/items?itemName=WeiglControlLLC.weigl-ascii) ([Weigl Control LLC](https://marketplace.visualstudio.com/publishers/WeiglControlLLC))\n* [GreyScript](https://marketplace.visualstudio.com/items?itemName=WyattL.greyscript) ([WyattL](https://marketplace.visualstudio.com/publishers/WyattL))\n* [mplstyle (Matplotlib)](https://marketplace.visualstudio.com/items?itemName=yy0931.mplstyle) ([yy0931](https://marketplace.visualstudio.com/publishers/yy0931))\n* [OverPy](https://marketplace.visualstudio.com/items?itemName=Zezombye.overpy) ([Zezombye](https://marketplace.visualstudio.com/publishers/Zezombye))\n* [COBOL Folding](https://marketplace.visualstudio.com/items?itemName=zokugun.cobol-folding) ([zokugun](https://marketplace.visualstudio.com/publishers/zokugun))\n* [Explicit Folding](https://marketplace.visualstudio.com/items?itemName=zokugun.explicit-folding) ([zokugun](https://marketplace.visualstudio.com/publishers/zokugun))\n* [Zokugun Themes](https://marketplace.visualstudio.com/items?itemName=zokugun.zokugun-theme) ([zokugun](https://marketplace.visualstudio.com/publishers/zokugun))",
    "url": "https://code.visualstudio.com/updates/v1_63#_web-extensions",
    "id": 2505
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [CodeCrazy-ywt (@CodeCrazy-ywt)](https://github.com/CodeCrazy-ywt)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)\n* [Lemmingh (@Lemmingh)](https://github.com/Lemmingh)",
    "url": "https://code.visualstudio.com/updates/v1_63#_issue-tracking",
    "id": 2506
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2021 Release (1.63)  \n### Pull requests  \nContributions to `vscode`:  \n* [@adaex (Aex)](https://github.com/adaex): Update to latest seti-ui icon theme [PR #136375](https://github.com/microsoft/vscode/pull/136375)\n* [@alex-brs](https://github.com/alex-brs): build/npm/preinstall: fix error message for node version [PR #136794](https://github.com/microsoft/vscode/pull/136794)\n* [@filiptronicek (Filip Tron\u00ed\u010dek)](https://github.com/filiptronicek): Rename arg `connectionToken` to `connection-token` [PR #136620](https://github.com/microsoft/vscode/pull/136620)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Add progress indicator to SCM in activity bar while QuickDiff is preparing [PR #136969](https://github.com/microsoft/vscode/pull/136969)\n* Word missing from setting description (fix #137027) [PR #137028](https://github.com/microsoft/vscode/pull/137028)\n* Avoid conflicting scopes and commandIds in quiet logins from Accounts (fix #137601) [PR #137613](https://github.com/microsoft/vscode/pull/137613)\n* [@grandeljay (Jay)](https://github.com/grandeljay): Remove brackets from PHP statements [PR #137447](https://github.com/microsoft/vscode/pull/137447)\n* [@Gvozd (Gvozd)](https://github.com/Gvozd): 133348 fix oom when search opened in editor [PR #136554](https://github.com/microsoft/vscode/pull/136554)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes remote terminal error: Command $setUnicodeVersion not found [PR #136171](https://github.com/microsoft/vscode/pull/136171)\n* Fixes remote terminal title doesn't get restored on reload [PR #136176](https://github.com/microsoft/vscode/pull/136176)\n* Fixes error: can't run recursive splices when renaming a terminal tab [PR #136177](https://github.com/microsoft/vscode/pull/136177)\n* Fixes missing files when manually building vscode server [PR #137570](https://github.com/microsoft/vscode/pull/137570)\n* [@jherchen (Johannes Herchen)](https://github.com/jherchen): fix preinstall script [PR #136638](https://github.com/microsoft/vscode/pull/136638)\n* [@JustinGrote (Justin Grote)](https://github.com/JustinGrote): Correction booleanRegex to properly match only 'true' and 'false' [PR #137822](https://github.com/microsoft/vscode/pull/137822)\n* [@jzyrobert (Robert Jin)](https://github.com/jzyrobert): Update html-language-features documentation and tasks to yarn [PR #136543](https://github.com/microsoft/vscode/pull/136543)\n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb): Make 'expandLineSelection' a proper action. [PR #135917](https://github.com/microsoft/vscode/pull/135917)\n* [@MalikIdreesHasanKhan (Malik Idrees Hasan Khan)](https://github.com/MalikIdreesHasanKhan): Fixed typos. [PR #135729](https://github.com/microsoft/vscode/pull/135729)\n* [@mamphis (Mattis Wacker)](https://github.com/mamphis): Fix missing active debug line + breakpoint glyph [PR #137471](https://github.com/microsoft/vscode/pull/137471)\n* [@mkantor (Matt Kantor)](https://github.com/mkantor): Fix a few typos in doc comments [PR #137810](https://github.com/microsoft/vscode/pull/137810)\n* [@orange4glace](https://github.com/orange4glace): #fix: 108459 [PR #108666](https://github.com/microsoft/vscode/pull/108666)\n* [@parched (James Duley)](https://github.com/parched): Fix grammar in task configuration error message. [PR #137898](https://github.com/microsoft/vscode/pull/137898)\n* [@pdrgds (Pedro Guedes)](https://github.com/pdrgds): fix #131458 [PR #136625](https://github.com/microsoft/vscode/pull/136625)\n* [@PEZ (Peter Str\u00f6mberg)](https://github.com/PEZ)\n* Add option: include command in screencast overlay [PR #126742](https://github.com/microsoft/vscode/pull/126742)\n* Honor setting show only shortcut keys [PR #136251](https://github.com/microsoft/vscode/pull/136251)\n* [@pohzipohzi (Zi How Poh)](https://github.com/pohzipohzi): add options for jumping to next/previous problem [PR #135736](https://github.com/microsoft/vscode/pull/135736)\n* [@Pranomvignesh (Pranom Vignesh)](https://github.com/Pranomvignesh): Fix keybindings title [PR #123071](https://github.com/microsoft/vscode/pull/123071)\n* [@rudavko (Andrii)](https://github.com/rudavko): Remove code duplication by using existing utils function [PR #137016](https://github.com/microsoft/vscode/pull/137016)\n* [@RyanAfrish7 (Afrish Khan S)](https://github.com/RyanAfrish7): Change img hrefs in markdown from file to vscode-file [PR #136687](https://github.com/microsoft/vscode/pull/136687)\n* [@SeriousBug (Kaan Gen\u00e7)](https://github.com/SeriousBug): Allow extensions to disable built-in markdown preview button [PR #136273](https://github.com/microsoft/vscode/pull/136273)\n* [@sijakret](https://github.com/sijakret): html-language-features: text document provider support for customData.html [PR #137557](https://github.com/microsoft/vscode/pull/137557)\n* [@smcenlly (Simon McEnlly)](https://github.com/smcenlly): output channel: new replaceAll API to improve output channel rendering  [PR #136402](https://github.com/microsoft/vscode/pull/136402)\n* [@suzmue (Suzy Mueller)](https://github.com/suzmue): clear focused thread if it does not exist [PR #133637](https://github.com/microsoft/vscode/pull/133637)  \nContributions to `vscode-codicons`:  \n* [@Profesor08](https://github.com/Profesor08): Added `newline` icon [PR #91](https://github.com/microsoft/vscode-codicons/pull/91)  \nContributions to `vscode-css-languageservice`:  \n* [@avigoldman (Avi Goldman)](https://github.com/avigoldman): Respect `kind` property [PR #254](https://github.com/microsoft/vscode-css-languageservice/pull/254)  \nContributions to `vscode-eslint`:  \n* [@asingh04 (Abhishek Singh)](https://github.com/asingh04): Handle preexisting disable rule comments [PR #1261](https://github.com/microsoft/vscode-eslint/pull/1261)  \nContributions to `vscode-extension-samples`:  \n* [@memeplex](https://github.com/memeplex): Don't delay decorations on editor activation [PR #535](https://github.com/microsoft/vscode-extension-samples/pull/535)  \nContributions to `vscode-html-languageservice`:  \n* [@gustavnikolaj (Gustav Nikolaj)](https://github.com/gustavnikolaj): Trigger completion in all src and href attributes [PR #117](https://github.com/microsoft/vscode-html-languageservice/pull/117)\n* [@jzyrobert (Robert Jin)](https://github.com/jzyrobert): Add auto completion for attribute tags [PR #116](https://github.com/microsoft/vscode-html-languageservice/pull/116)  \nContributions to `vscode-json-languageservice`:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): validate hostname, ipv4 and ipv6 formats (#100) [PR #118](https://github.com/microsoft/vscode-json-languageservice/pull/118)\n* [@mati-o (Mati O)](https://github.com/mati-o): Fix $ref to $id [PR #107](https://github.com/microsoft/vscode-json-languageservice/pull/107)\n* [@Relequestual (Ben Hutton)](https://github.com/Relequestual): Say JSON Schema draft 2020-12 is not yet supported [PR #117](https://github.com/microsoft/vscode-json-languageservice/pull/117)  \nContributions to `vscode-languageserver-node`:  \n* [@CodingDoll](https://github.com/CodingDoll): correct engines field node 14+ [PR #862](https://github.com/microsoft/vscode-languageserver-node/pull/862)\n* [@fvclaus](https://github.com/fvclaus): Location of SymbolInformation gets lost when range is not defined [PR #849](https://github.com/microsoft/vscode-languageserver-node/pull/849)\n* [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal)\n* improve documentation for Event<T> for readability [PR #865](https://github.com/microsoft/vscode-languageserver-node/pull/865)\n* don't track file automatically generated by macOS [PR #867](https://github.com/microsoft/vscode-languageserver-node/pull/867)\n* [@robertoaloi (Roberto Aloi)](https://github.com/robertoaloi): Fix typo in error message [PR #866](https://github.com/microsoft/vscode-languageserver-node/pull/866)  \nContributions to `vscode-pull-request-github`:  \n* [@38elements (38elements)](https://github.com/38elements)\n* Fix typo [PR #3049](https://github.com/microsoft/vscode-pull-request-github/pull/3049)\n* justSwitchedToRevieMode -> justSwitchedToReviewMode [PR #3060](https://github.com/microsoft/vscode-pull-request-github/pull/3060)\n* [@burkeholland (Burke Holland)](https://github.com/burkeholland): Opening a gist repository gives a fetch error [PR #2933](https://github.com/microsoft/vscode-pull-request-github/pull/2933)\n* [@emtei (Mateusz Stopka)](https://github.com/emtei): Do not activate review mode for closed or merged PR [PR #3021](https://github.com/microsoft/vscode-pull-request-github/pull/3021)\n* [@taisph (Tais P. Hansen)](https://github.com/taisph): Fix generated branch name requiring quotes in bash [PR #3084](https://github.com/microsoft/vscode-pull-request-github/pull/3084)  \nContributions to `vscode-vsce`:  \n* [@microhobby (Matheus Castello)](https://github.com/microhobby): Add `libsecret` to `Dockerfile` and mention the dependency on `README` [PR #646](https://github.com/microsoft/vscode-vsce/pull/646)  \nContributions to `language-server-protocol`:  \n* [@doriath (Tomasz Zurkowski)](https://github.com/doriath): Clarify responses to rename request. [PR #616](https://github.com/microsoft/language-server-protocol/pull/616)\n* [@yxrkt](https://github.com/yxrkt): ResponseMessage.result can be an array type [PR #1012](https://github.com/microsoft/language-server-protocol/pull/1012)  \nContributions to `monaco-editor`:  \n* [@activeguild (j1ngzoue)](https://github.com/activeguild): Add 'browser-ems-vite-react' sample [PR #2767](https://github.com/microsoft/monaco-editor/pull/2767)\n* [@emojiiii (C.Y.Kun)](https://github.com/emojiiii): Fix some errors on the website playground [PR #2779](https://github.com/microsoft/monaco-editor/pull/2779)\n* [@MasterOdin (Matthew Peveler)](https://github.com/MasterOdin)\n* Update builtin functions for mysql [PR #2749](https://github.com/microsoft/monaco-editor/pull/2749)\n* Update list of keywords for redshift [PR #2757](https://github.com/microsoft/monaco-editor/pull/2757)\n* Remove return from example addAction [PR #2772](https://github.com/microsoft/monaco-editor/pull/2772)\n* [@milahu](https://github.com/milahu): fix link to monaco.d.ts [PR #2769](https://github.com/microsoft/monaco-editor/pull/2769)\n* [@Pranomvignesh (Pranom Vignesh)](https://github.com/Pranomvignesh): Semantic Tokens Provider Sample is broken in docs [PR #2764](https://github.com/microsoft/monaco-editor/pull/2764)\n* [@rramo012 (Rafael Ramos)](https://github.com/rramo012): Fixing the documentation links [PR #2748](https://github.com/microsoft/monaco-editor/pull/2748)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_63#_pull-requests",
    "id": 2507
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Replacing Panel location  \nAs mentioned above, the new Side Panel provides similar functionality as moving the Panel to the left or right, yet improves on this by not moving the entire contents of the original panel. Along with view drag and drop between panels, the new Side Panel is replacing the option to move the bottom Panel.  \nIn light of that, we have deprecated the `workbench.panel.defaultLocation` setting as well as the **Move Panel** commands in favor of similar commands:  \n* **Move Views From Panel To Side Panel** (`workbench.action.movePanelToSidePanel`)\n* **Move Views From Side Panel To Panel** (`workbench.action.moveSidePanelToPanel`)  \nThe old **Move Panel** commands have been remapped to the new command that provides the similar behavior. Even with this mapping, we recommend updating your keybindings to the new commands.  \nBelow, the entire bottom Panel is moved to the Side Panel and then back to the original Panel location.  \n<video src=\"images/1_64/panel_location.mp4\" autoplay loop controls muted title=\"New Panel View Commands\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_replacing-panel-location",
    "id": 2508
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Panel alignment  \nAddressing another popular feature request, we have added a new layout option called Panel Alignment. This option allows you to configure how far the bottom Panel spans across your window. There are four options:  \n* **Center** - This is the classic behavior. The panel spans the width of the editor area only.\n* **Left** - The panel will span from the left edge of the window to the right edge of the editor area.\n* **Right** - The panel will span from the right edge of the window to the left edge of the editor area.\n* **Justify** - The panel will span the full width of the window.  \nNote that with all options, the Activity Bar is considered the edge of the window.  \nYou can configure these options in the menu under **View** > **Appearance** > **Align Panel** or using the new **Set Panel Alignment to...** commands.  \n<video src=\"images/1_64/panel_alignment.mp4\" autoplay loop controls muted title=\"Aligning the Panel with Panel alignment commands\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_panel-alignment",
    "id": 2509
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Customize Layout control  \nWith all these new layout options, we have been exploring ways to better expose layout configuration for discoverability and ease of use. That's why you might notice a new experimental **Configure Layout** button in your title bar. This only appears if your `window.titleBarStyle` setting is `custom` (default on Windows and macOS) and `workbench.experimental.layoutControl.enabled` is set to `true`. The button visibility is controlled by an experiment, but if you want to enable it manually, you can do so by applying these setting values in the Settings editor (`kb(workbench.action.openSettings)`).  \n![Configure Layout button on the title bar](images/1_64/configure-layout-button.png)  \nThe contents of the menu are still being worked on, but currently you should see the ability to toggle the Side Bar, Panel, and Side Panel. Additionally, you will see an entry for a new command **Customize Layout**. This new command triggers a new interactive Quick Pick experience allowing you to control all aspects of layout configuration in one place.  \n<video src=\"images/1_64/customize_layout.mp4\" autoplay loop controls muted title=\"Experimental Customize Layout control\"></video>  \nTry it out, and let us know if you have any feedback in [issue #137633](https://github.com/microsoft/vscode/issues/137633).",
    "url": "https://code.visualstudio.com/updates/v1_64#_customize-layout-control",
    "id": 2510
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Settings editor  \nThe Settings editor search now looks for string value matches in string and enum settings when searching.  \n![Settings editor pulling up results where the enum value matches the query](images/1_64/settings-editor-search-by-value.png)  \nThe new search algorithm also prioritizes whole word matches, which means that if one has both the Java and JavaScript extensions, the Java settings will show up first when searching \"java\".  \n![Settings editor search showing Java results before JavaScript ones when searching \"java\"](images/1_64/settings-editor-search-java-first.png)  \nLastly, dropdowns (such as for `files.autoSave`) and list widgets (such as for `files.associations`) in the Settings editor now work with touchscreen devices.",
    "url": "https://code.visualstudio.com/updates/v1_64#_settings-editor",
    "id": 2511
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Settings Sync  \nSettings Sync now supports synchronizing User Tasks.  \n![Settings Sync User Tasks](images/1_64/settings-sync-user-tasks.png)  \nThe default Settings Sync machine names now include the browser and product names in VS Code for the Web.  \n![Settings Sync default machine name including browser and product names](images/1_64/settings-sync-machines.png)",
    "url": "https://code.visualstudio.com/updates/v1_64#_settings-sync",
    "id": 2512
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Explorer: Confirm and disable Undo  \nThe File Explorer has long supported an Undo stack to revert file and folder edits (rename, cut/copy/paste, move, import, etc.). Some users find this functionality unexpected, so there is now a setting to disable Undo in the Explorer (`explorer.enableUndo`).  \nAdditionally, a new setting (`explorer.confirmUndo`) was added to configure how frequently the Explorer will prompt for confirmation when performing an Undo. By default, the Explorer will prompt more frequently than before to ensure destructive undoing doesn't accidentally happen, but this can be changed to the old behavior with the value `\"light\"`, or set to `\"verbose\"` to prompt before all Undo actions.  \n<video src=\"images/1_64/explorer-undo.mp4\" autoplay loop controls muted title=\"Recording of the File Explorer under different undo configurations\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_explorer:-confirm-and-disable-undo",
    "id": 2513
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Editor  \n### Audio cues  \nAudio cues indicate if the current line has certain markers, such as errors, breakpoints, or folded text regions.  \nThey are played when the primary cursor changes its line or the first time a marker is added to the current line. Audio cues are enabled automatically when a screen reader is attached, but can also be turned on manually by setting `audioCues.enabled` to `on`.  \nMore audio cues are to come and we will iterate on the sound design.",
    "url": "https://code.visualstudio.com/updates/v1_64#_audio-cues",
    "id": 2514
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Unicode highlighting improvements  \nTo improve the [Unicode highlighting feature](https://code.visualstudio.com/updates/v1_63#_unicode-highlighting) introduced in the November release, there are new settings to better deal with false positives.  \nThe new setting `editor.unicodeHighlight.allowedLocales` can be used to allow characters that are common in one or many configured locales. By default, this includes the current VS Code display language and the current OS language. At the moment, only locales translated in [vscode-loc](https://github.com/microsoft/vscode-loc) Language Packs are supported.  \nThe setting, `editor.unicodeHighlight.includeStrings`, controls whether characters in strings should be highlighted. The value is `true` by default but can be set to `false` to ignore strings.",
    "url": "https://code.visualstudio.com/updates/v1_64#_unicode-highlighting-improvements",
    "id": 2515
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Editor folding limit  \nA new setting `editor.foldingMaximumRegions` allow users to change the maximum number of folding ranges that are shown in an editor. By default, the limit is 5000. Note that larger numbers can result in a reduced performance.",
    "url": "https://code.visualstudio.com/updates/v1_64#_editor-folding-limit",
    "id": 2516
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Editor adapts to language feature timings  \nExtensions power almost all language features, including built-in features like folding regions, CodeLens, inlay hints, and semantic tokens. These features aren't triggered by user gestures but by typing, usually after a timeout. For instance, CodeLens updates as you type, and so does semantic tokens. The chosen timeout values had been fixed and more or less arbitrary. With this release, the editor adapts to the observed timings so that slower machines or network connections aren't overwhelmed with requests and faster machines are utilized better.",
    "url": "https://code.visualstudio.com/updates/v1_64#_editor-adapts-to-language-feature-timings",
    "id": 2517
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Terminal  \n### Automatic replies  \nThe terminal now features an opt-in feature to automatically reply when a specific sequence of characters is received. A good example of where this is useful is the Windows batch script message `Terminate batch job (Y/N)?` after hitting `Ctrl+C` when running a batch script. To get the terminal to automatically reply with `Y` and enter (`\\r`) on `Ctrl+C` in Windows add the following setting:  \n```json\n\"terminal.integrated.autoReplies\": {\n\"Terminate batch job (Y/N)?\": \"Y\\r\"\n}\n```  \n<video src=\"images/1_64/terminal-auto-reply.mp4\" autoplay loop controls muted title=\"Pressing Ctrl+C will immediately reply to the question and return to the prompt\"></video>  \n_Theme: [Sapphire](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire)_  \nYou can set up custom replies for other things, but be careful when doing this, as you are sending text to the process automatically. For example, you could use it to automatically update Oh My Zsh when prompted:  \n```json\n\"terminal.integrated.autoReplies\": {\n\"[Oh My Zsh] Would you like to check for updates? [Y/n]\": \"Y\\r\"\n}\n```  \nIf you use [Clink](https://github.com/chrisant996/clink) and enable their similar feature, you can disable it in Clink or in VS Code by setting the reply to `null` to avoid the two features conflicting with each other:  \n```json\n\"terminal.integrated.autoReplies\": {\n\"Terminate batch job (Y/N)\": null\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_64#_automatic-replies",
    "id": 2518
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Enhanced VT support  \nSupport for Operating System Command (OSC) 4/10/11/12 escape sequences were added that enables applications to control the terminal's theme colors.",
    "url": "https://code.visualstudio.com/updates/v1_64#_enhanced-vt-support",
    "id": 2519
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Keyboard navigable links  \nPreviously, link navigation in the terminal required the use of a mouse. Now, links can be opened using only the keyboard via the following commands:  \n* **Terminal: Open Last Web Link...** for example, `https://github.com/microsoft/vscode`\n* **Terminal: Open Last File Link...** for example, `/Users/user/repo/file.txt`\n* **Terminal: Open Detected Link...** to view all links (web, file, word)  \n![A Quick Pick is displayed with link results of type web, word, and file.](images/1_64/open-detected-link.png)",
    "url": "https://code.visualstudio.com/updates/v1_64#_keyboard-navigable-links",
    "id": 2520
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Source Control  \n### More control on repository discovery  \nBased on community feedback, there are two new settings to better control the process of discovering Git repositories and accommodate more diverse folder structures.  \n* `git.repositoryScanMaxDepth` - Control the depth used when scanning.\n* `git.repositoryScanIgnoredFolders` - Control the list of folders that should be ignored during scanning.",
    "url": "https://code.visualstudio.com/updates/v1_64#_more-control-on-repository-discovery",
    "id": 2521
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Changes list sort improvements  \nA new setting (`scm.defaultViewSortKey`) controls the default sort key used for the changes list in the Source Control view. The choice for the sort key is also remembered for each folder/workspace.  \nThe options are:  \n* `name` - Sort changes by filename.\n* `path` - Sort changes by file path (default).\n* `status` - Sort changes by source control status.  \nYou will need to reload the VS Code window to apply the setting change.",
    "url": "https://code.visualstudio.com/updates/v1_64#_changes-list-sort-improvements",
    "id": 2522
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### New Git stash command  \nA new command, **Git: Drop All Stashes...**, was added to the Command Palette that allows users to clear all stash entries. As with any Git operation with permanent consequences, use this command with care.",
    "url": "https://code.visualstudio.com/updates/v1_64#_new-git-stash-command",
    "id": 2523
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Git Output - git commands execution time, and duration  \nTo help track down performance issues, the Git Output channel now shows the time when a git command was executed as well as the duration of the command, excluding the time it took to spawn the child process.",
    "url": "https://code.visualstudio.com/updates/v1_64#_git-output---git-commands-execution-time,-and-duration",
    "id": 2524
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Notebooks  \n### Find text in rendered Markdown and code cell outputs  \nVS Code now supports find text in the rendered view of Markdown cells and output of code cells. The feature is disabled by default as it would require rendering of all Markdown cells and outputs, which might be costly when opening a notebook. You can turn on this feature by choosing options (**Markdown Preview**, **Code Cell Outputs**) from the filter dropdown on the Find control input box.  \nCurrently, there are some limitations when searching text in outputs. For example, you cannot search streaming/text output rendered by VS Code itself. We plan to improve this in the next iteration.  \n<video src=\"images/1_64/notebook-find-in-markup-output.mp4\" autoplay loop controls muted title=\"Notebook find in Markdown and outputs\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_find-text-in-rendered-markdown-and-code-cell-outputs",
    "id": 2525
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Cell collapsing UI  \nNotebook cells have a blue bar on the left side to indicate that they are focused. This bar is now interactive - you can click the top part to collapse the cell input, and the bottom part to collapse the output.  \n<video src=\"images/1_64/collapse-gutter.mp4\" autoplay loop controls muted title=\"Cell collapse UI\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_cell-collapsing-ui",
    "id": 2526
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Markdown cell fold hint  \nWhen a region of Markdown cells has been folded, a message will appear with the number of folded cells to make it more apparent that some cells are hidden.  \n![Folded Markdown cell hint](images/1_64/cell-fold-hint.png)",
    "url": "https://code.visualstudio.com/updates/v1_64#_markdown-cell-fold-hint",
    "id": 2527
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Cell execution hints  \nWe made some changes to make it more obvious when a cell is executing, and which cell is executing.  \nFirst, when a cell is executing but is not scrolled into view, a progress bar will be shown at the top of the editor pane.  \nSecond, a new button, **Go To Running Cell**, is added to the notebook toolbar when a cell is executing.  \nThird, if code cells are visible in the outline or breadcrumbs via the `notebook.outline.showCodeCells` and `notebook.breadcrumbs.showCodeCells` settings, they will display an animated running icon when they are executing.  \n<video src=\"images/1_64/cell-executing-spinner.mp4\" autoplay loop controls muted title=\"Notebook cell executing spinner\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_cell-execution-hints",
    "id": 2528
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Debugging  \n### Viewing and editing binary data  \nVS Code's generic debugger now supports viewing and editing binary data (aka \"memory\"). Variables for which memory viewing and editing is available show an inline binary icon in the **Variables** view, and selecting it opens the [Hex Editor](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor):  \n![Binary data shown for a variable during a debug session](images/1_64/debug-memory.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)_  \nMemory viewing and editing relies on the memory-related features of the Debug Adapter Protocol and debug extensions have to implement these features in order to enable the corresponding UI in VS Code. For details, see section [Debugger extension authoring](#debugger-extension-authoring) below. In this release, only the built-in JavaScript debugger supports viewing and editing of binary data, but we expect other debug extensions to follow soon.",
    "url": "https://code.visualstudio.com/updates/v1_64#_viewing-and-editing-binary-data",
    "id": 2529
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### JavaScript debugging  \n**Exclude callers from pausing at breakpoints**  \nSometimes you might set a breakpoint or add a debugger statement, but only want to pause when called from a certain code path. DOM event handlers like `mousemove` are a good example for this. In this release, the JavaScript debugger added the ability to \"exclude a caller\" from pausing at a breakpoint or debugger statement.  \nWhen paused at a location, you can right-click on a frame in the **CALL STACK** view and choose the **Exclude Caller** command. A new **EXCLUDED CALLERS** view will be shown to allow you to view and manage excluded callers, and afterwards your program won't pause at a breakpoint location if the excluded caller appears anywhere in its call stack.  \n<video src=\"images/1_64/js-debug-exclude-caller.mp4\" autoplay loop controls muted title=\"Selecting the Exclude Caller command and displaying the Excluded Callers view\"></video>  \n**Edge support on Linux**  \n[Microsoft Edge](https://www.microsoft.com/edge) debugging is now available on Linux, via the `edge` debug type.",
    "url": "https://code.visualstudio.com/updates/v1_64#_javascript-debugging",
    "id": 2530
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Languages  \n### Markdown path IntelliSense  \nThe built-in Markdown extension now includes path IntelliSense for links and images.  \n![Path suggestions in a Markdown link](images/1_64/md-path-suggestions.png)  \nThe paths suggestions work similarly to path IntelliSense in CSS and HTML files. Paths starting with `/` are resolved relative to the current workspace, while paths staring with `./` or without any prefix are resolved relative to the current file. Path suggestions are automatically shown when you type `/` or can be manually invoked by using `kb(editor.action.triggerSuggest)`.  \nPath IntelliSense can also help you link to headers within the current file or within another Markdown file. Start the path with `#` to see completions for all the headers in the file (depending on your settings, you may need to use `kb(editor.action.triggerSuggest)` to see these):  \n![Header section suggestions in a Markdown link](images/1_64/md-header-suggestions.png)  \nYou can disable path IntelliSense with `\"markdown.suggest.paths.enabled\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_64#_markdown-path-intellisense",
    "id": 2531
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Markdown strikethrough support  \nVS Code now supports rendering `~~strikethrough~~` text in both the Markdown editor and in the built-in Markdown preview:  \n![Strikethrough rendering the Markdown editor and preview](images/1_64/markdown-strike-through.png)  \nStrikethroughs are written by wrapping text in two tilde characters.  \nWhile all of VS Code's built-in themes support strikethroughs, some themes from the Marketplace may require an update to properly render strikethrough text in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_64#_markdown-strikethrough-support",
    "id": 2532
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### TS 4.5.5  \nVS Code now bundles TypeScript 4.5.5.  \nThis minor update fixes a few [important crashes and tooling bugs](https://github.com/microsoft/typescript/issues?q=is%3Aissue+milestone%3A%22TypeScript+4.5.5%22+is%3Aclosed).",
    "url": "https://code.visualstudio.com/updates/v1_64#_ts-4.5.5",
    "id": 2533
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Surround with snippets for JS/TS  \nMany of the JavaScript and TypeScript snippets have been updated to support surrounding selected text.  \n<video src=\"images/1_64/ts-surround-with.mp4\" autoplay loop controls muted title=\"Surrounding selected code with an if statement\"></video>  \nTo use surround with, first select some text and then run **Insert Snippet**. Instead of replacing the selected text, snippets such as `if` or `forof` will now use the selected text as the body of the new statement.",
    "url": "https://code.visualstudio.com/updates/v1_64#_surround-with-snippets-for-js/ts",
    "id": 2534
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### HTML auto insert quotes after equals  \nWhen typing `=` after a property in HTML, the language service now automatically inserts quotes and places the cursor between the quotes. The setting `html.completion.attributeDefaultValue` lets you specify what type of quotes (single or double) and by default uses double quotes.  \nThe feature can be disabled by setting `\"html.autoCreateQuotes\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_64#_html-auto-insert-quotes-after-equals",
    "id": 2535
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### JSON Clear schema cache command  \nA new command **Clear schema cache** clears the cache of previously downloaded schemas.",
    "url": "https://code.visualstudio.com/updates/v1_64#_json-clear-schema-cache-command",
    "id": 2536
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### LaTeX support  \nLaTeX basic language support has been added. This includes syntax highlighting and auto-closing pairs.  \n![LaTeX snippet](./images/1_64/latex-sample.png)",
    "url": "https://code.visualstudio.com/updates/v1_64#_latex-support",
    "id": 2537
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## VS Code for the Web  \n### Remote Repositories  \n**GitHub Repositories**  \nCommits created in VS Code for the Web are now signed and marked as **Verified** in the GitHub UI. Additionally, maintainers can now commit to pull requests submitted from forks when using VS Code for the Web. This is thanks to the new GitHub GraphQL [createCommitOnBranch](https://github.blog/changelog/2021-09-13-a-simpler-api-for-authoring-commits/) API.  \n<video src=\"images/1_64/github-commit-signing-prs.mp4\" autoplay loop controls muted title=\"Make verified commits and commit to pull requests from forks in VS Code for the Web\"></video>  \nAdditionally, the Source Control view now supports [multiple selection](https://code.visualstudio.com/api/extension-guides/scm-provider#menus).  \n<video src=\"images/1_64/remotehub-scm-multiple-selection.mp4\" autoplay loop controls muted title=\"Stage multiple selected changes with a single click\"></video>  \n_Theme: [One Monokai](https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai)_  \nPreviously, creating empty commits was only supported after cloning your GitHub repository to a local or remote machine. You can now also create empty commits in VS Code for the Web using the **GitHub Repositories: Commit Empty** command.  \nA new configuration was also added to enable automatically downloading the full contents of repositories below a given size to enable advanced features like whole-repository text search and **Go to Reference**. The setting `remoteHub.experimental.fs.maxAutoDownloadSize` controls the repository size limit before a prompt will be shown on attempting to download full contents. By default, `maxAutoDownloadSize` is not set, in order to never download without prompting.  \n**Azure Repos**  \nAzure Repos support has moved out of the GitHub Repositories extension into its own dedicated [extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos) that can also be installed on desktop.",
    "url": "https://code.visualstudio.com/updates/v1_64#_remote-repositories",
    "id": 2538
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Adopted pre-release extensions  \nVS Code for the Web now bundles pre-release versions of both the [GitHub Pull Request and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) and [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) extensions.",
    "url": "https://code.visualstudio.com/updates/v1_64#_adopted-pre-release-extensions",
    "id": 2539
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### PWA and offline support  \nVS Code for the Web has adopted the PWA model and can now be installed as a PWA on the host OS. Thanks to that adoption, it is also now possible to enable some offline functionality. Having once visited [vscode.dev](https://vscode.dev) or [insiders.vscode.dev](https://insiders.vscode.dev), users can now use it to edit local files even while offline.  \n![Install VS Code PWA prompt](images/1_64/pwa.png)",
    "url": "https://code.visualstudio.com/updates/v1_64#_pwa-and-offline-support",
    "id": 2540
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Contributions to extensions  \n### Python  \n**Improved interpreter Quick Pick**  \nIn order to make it easier to select the desired interpreter, the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension now groups interpreters by type in the **Select Interpreter** Quick Pick.  \n![Interpreters grouped in interpreter picker](images/1_64/interpreter_picker.png)  \nWe're also experimenting with moving the active/selected interpreter in the Status bar towards the right possibly inside the language status, so check the **Python** status in the right side in case it isn't visible.  \n**Add support for 'conda run'**  \nTo improve our support for [Anaconda](https://www.anaconda.com) users, we have implemented support for `conda run`, using the `--no-capture-output` parameter, which does not capture output that had caused errors in the past. This feature is implemented for executing the linter, testing, and formatting functions.  \nThere is a known bug [issue #10972](https://github.com/conda/conda/issues/10972) that causes an error on Windows when running linting and testing with a special character in the parameters. This is due to how `conda run` reads parameters with special characters, so it can affect any command line arguments you have specified in your `settings.json`.  \nThe Anaconda team is working on the issue and hopes to have a fix out soon. You can update your version of Anaconda on the [Conda website](https://docs.conda.io) once the new version is released.  \n**Smart selection and better folding support**  \nImprovements were also made for Python code selection and folding via the [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) language server.  \nSelecting Python code using the keyboard takes fewer keystrokes as the semantic information of your code is taken into account when defining the selection range:  \n<video src=\"images/1_64/python-smart-selection.mp4\" autoplay loop controls muted title=\"Expanding and shrinking Python code with Shift+Alt+RightArrow and Shift+Alt+LeftArrow\"></video>  \n_Theme: [Horizon Extended](https://marketplace.visualstudio.com/items?itemName=LanceWilhelm.horizon-extended)_  \nAs for folding, previously the regions were defined just by indentation, which was not ideal for some cases, such as multi-line strings. Now folding regions take into account semantic information appropriately, and also supports `#region` comments:  \n<video src=\"images/1_64/python-folding.mp4\" autoplay loop controls muted title=\"Collapsing and expanding folding regions in Python code\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_python",
    "id": 2541
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Jupyter  \n**Remote Jupyter servers**  \nThe [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension now no longer requires you to reload VS Code when switching between local and remote Jupyter servers. In addition, the extension now displays both local and remote kernels together in the kernel picker.  \n<video src=\"images/1_64/localAndRemoteJupyterTogether.mp4\" autoplay loop controls muted title=\"Remote Jupyter connections\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_64#_jupyter",
    "id": 2542
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Hex Editor  \nThe [Hex Editor](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor) has undergone some significant architectural refactoring. Notably, in most cases it's now able to open files of any size without performance issues. Additionally, its layout width is now configurable, and it has a more capable Find/Replace implementation. Continued improvements will be forthcoming in future iterations.",
    "url": "https://code.visualstudio.com/updates/v1_64#_hex-editor",
    "id": 2543
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_64.md).",
    "url": "https://code.visualstudio.com/updates/v1_64#_remote-development",
    "id": 2544
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.36.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0360) release of the extension to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_64#_github-pull-requests-and-issues",
    "id": 2545
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Preview features  \n### Terminal shell integration  \nThe terminal now features experimental shell integration that allows VS Code to gain insights on what is going on within the terminal, which was previously unknown. When enabled using the setting `\"terminal.integrated.enableShellIntegration\": true`, arguments to run a shell integration script will be injected into your terminal profile if possible. The script itself mostly injects invisible sequences into your prompt, providing VS Code with information such as the location of the prompt, command, and command output, what the current working directory (cwd) is for each command, and the exit code of each command.  \nUsing this information, we can enhance existing features in various ways:  \n* Detect the cwd quickly - Previously this was only possible on macOS and Linux and would launch processes or query the file system to get that information. This now also works on Windows. The cwd is used in features like link detection and inheriting the cwd when splitting a terminal tab.\n* Improve the command tracking feature - This feature existed beforehand but only had default keybindings on macOS (`Cmd+Up/Down`) and used a naive approach to guess where lines were based on when `Enter` was pressed.  \nShell integration enables the following new features:  \n* Run recent command - Since we know what commands are run, we can expose a command that allows you to view and run them again in a Quick Pick.\n![Recent commands are displayed in a Quick Pick, including information about current working directory and how long ago they were run](images/1_64/terminal-recent-command.png)\n* Go to recent directory - Similar to above, we also allow navigating to past directories.\n![Recent directories are displayed in a Quick Pick, ordered by frequency (descending)](images/1_64/terminal-recent-directory.png)\n* Link support relative to the cwd - We now know the cwd for each line in the terminal buffer, so we can support opening links in the terminal relative to the cwd at the location where it was activated. Before, when a link was clicked, a Quick Pick would open with results from any folders containing a match for that name. Now, the exact file match will be opened. ![in a terminal with a cwd of vscode, package.json is echoed. Clicking on the file name will result in vscode/package.json opening. The directory is changed to be the template-string-converter and then package.json is echoed. Clicking on the file name will open template-string-converter/package.json.](images/1_64/relative-cwd-link.png)  \nThe goal is to turn on shell integration by default when reliability of the feature is good enough. The approach we're taking with regard to argument injection is to be as unintrusive as possible. For example, we do not modify your shell initialization scripts automatically like some terminals but instead intercept the creation of the process, inspect the arguments, and inject shell integration arguments if we are confident the terminal can run with them. The hope is to make it work well without any configuration required by the user, and to not interfere with your existing shell settings.  \nThe current shells supported are pwsh for Windows and pwsh, bash, and zsh for Linux and macOS.  \nAs mentioned previously, this is an experimental feature that is a little rough around the edges and there are some known issues:  \n* `$PS2` line continuations aren't supported yet. However, line continuations in pwsh do work.\n* Right prompts aren't supported yet.\n* The zsh script is known to [not activate sometimes](https://github.com/microsoft/vscode/issues/141620).\n* Remote VS Code window support is limited.",
    "url": "https://code.visualstudio.com/updates/v1_64#_terminal-shell-integration",
    "id": 2546
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Explorer file nesting  \nThe Explorer now has experimental support for displaying files in the same directory in a logically nested layout. This can be helpful for visually grouping related files together and collapsing files into a \"root\" file to reduce clutter. Several new settings have been added to control this behavior:  \n* `explorer.experimental.fileNesting.enabled`: Controls whether file nesting is enabled.\n* `explorer.experimental.fileNesting.expand`: Controls whether file nests show as expanded by default.\n* `explorer.experimental.fileNesting.patterns`: Controls how files get nested.  \nFor example, in many repositories `.ts` files sit next to their derived `.js`, `.d.ts`, and/or `.js.map` files. While hiding derived files entirely has long been possible via `files.exclude`, it can be nice to have a quick way of accessing derived files, which is now possible with nests:  \nBelow, the Explorer is using the default `explorer.experimental.fileNesting.patterns` configuration to nest `.js` and `.js.map` files, which are displayed when the corresponding `.ts` file is expanded.  \n![Explorer with some collapsed and expanded nests](images/1_64/file-nesting.png)  \n_Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_64#_explorer-file-nesting",
    "id": 2547
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Extension authoring  \n### Language default icons  \nLanguage contributors can define an icon for the language.  \n```jsonc\n{\n\"contributes\": {\n\"languages\": [\n{\n\"id\": \"latex\",\n// ...\n\"icon\": {\n\"light\": \"./icons/latex-light.png\",\n\"dark\": \"./icons/latex-dark.png\"\n}\n}\n]\n```  \nThe icon is shown if the current file icon theme only has a generic file icon for the language.  \nAlso file icon themes like `Minimal` or `None` that do not show file icons, will not use the language icon. If a file icon theme has an icon for an extension or file name, these will be preferred.  \nFile icon themes can customize the new behavior by defining `showLanguageModeIcons: true|false` in the theme file.  \n* `showLanguageModeIcons: true` shows the default language icons even if the theme does not specify a file icon.\n* `showLanguageModeIcons: false` prevents that default language icons are used.",
    "url": "https://code.visualstudio.com/updates/v1_64#_language-default-icons",
    "id": 2548
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### QuickPickItem separators  \nExtension authors now have the ability to add separators to a Quick Pick. This is useful for grouping items or adding a bit of space between items:  \n![Quick Pick separators](images/1_64/quickpick-separators.png)  \nTo add a separator to your existing Quick Pick, add a new `QuickPickItem` to your existing list of items but specify the `kind` property on the `QuickPickItem` and set it to `QuickPickItemKind.Separator`.  \nIn the example above, you would add the following object to your list of items:  \n```ts\n{\nlabel: 'APIs',\nkind: QuickPickItemKind.Separator\n}\n```  \nIf you don't specify a `kind` property, or you set it to `QuickPickItemKind.Default`, the item will be treated as a normal `QuickPickItem`.",
    "url": "https://code.visualstudio.com/updates/v1_64#_quickpickitem-separators",
    "id": 2549
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### vscode.workspace.createFileSystemWatcher now supports any path  \nThe existing `vscode.workspace.createFileSystemWatcher` API was improved to allow you to pass in any file or folder path for file watching, even if it is outside of the workspace. Previously, the file watcher was limited to the opened folders in the workspace.  \nDepending on the glob pattern you pass into the method, the watcher will either be recursive (for example, `**/*.js`) or non-recursive (`*.js`). Recursive watchers require more resources, so we recommend using simple glob patterns if possible.  \nExample:  \n```ts\n// Watch a folder non-recursively\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '*.js'));\n\n// Watch the active text editor file\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.window.activeTextEditor.document.uri, '*'));\n```  \n**Note:** As part of this change, we made a behavioral change for existing file watchers. A file watcher that is instructed with just a glob pattern (for example, `vscode.workspace.createFileSystemWatcher('**')`) will no longer receive events for files that changed outside of the workspace. It will only receive file events from paths that are inside the workspace. If the user does not have an open workspace, no event will be delivered via this method anymore. This was done to ensure that extensions do not receive unexpected events from outside the workspace.",
    "url": "https://code.visualstudio.com/updates/v1_64#_vscode.workspace.createfilesystemwatcher-now-supports-any-path",
    "id": 2550
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### vscode.TerminalLocation  \nYou can specify where an extension terminal will be created with the new [TerminalLocation](https://github.com/microsoft/vscode/blob/1a57cb85407249f380f0ebfb34c748a960e5430a/src/vscode-dts/vscode.d.ts#L9807) API.  \nThis enables creating a split terminal by providing a [parentTerminal](https://github.com/microsoft/vscode/blob/1a57cb85407249f380f0ebfb34c748a960e5430a/src/vscode-dts/vscode.d.ts#L6012), choosing between the [editor area and the panel](https://github.com/microsoft/vscode/blob/1a57cb85407249f380f0ebfb34c748a960e5430a/src/vscode-dts/vscode.d.ts#L5978), and more.",
    "url": "https://code.visualstudio.com/updates/v1_64#_vscode.terminallocation",
    "id": 2551
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Cancellation token for onWill events  \nThe VS Code API exposes events to participate in file operations, like [onWillRenameFiles](https://github.com/microsoft/vscode/blob/f30dba54302d2c00356e90604ec27aceeeb38bb5/src/vscode-dts/vscode.d.ts#L11375). This participation can be long-running and therefore users can cancel it. With this release, user-side cancellation can be observed by extensions via a cancellation token on the corresponding event, for example [FileWillRenameEvent#token](https://github.com/microsoft/vscode/blob/f30dba54302d2c00356e90604ec27aceeeb38bb5/src/vscode-dts/vscode.d.ts#L10738). This allows extensions to cancel expensive downlevel operations as well.",
    "url": "https://code.visualstudio.com/updates/v1_64#_cancellation-token-for-onwill-events",
    "id": 2552
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Git extension APIs  \n* A new `Repository.add` method has been added, to enable the ability to stage files.\n* The `Repository.tag` and `Repository.deleteTag` methods were added to enable the ability to create and delete tags.",
    "url": "https://code.visualstudio.com/updates/v1_64#_git-extension-apis",
    "id": 2553
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### onTaskType activation event  \nExtension that provide tasks can limit their unneeded activations by using the new `onTaskType:foo` activation event. This is an improvement over activating on `onCommand:workbench.action.tasks.runTask` as `workbench.action.tasks.runTask` is usually too eager for task providing extensions.",
    "url": "https://code.visualstudio.com/updates/v1_64#_ontasktype-activation-event",
    "id": 2554
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Debugger extension authoring  \n### VS Code now implements the memory-related features of the Debug Adapter Protocol  \nIn this release, VS Code has started to support viewing and editing binary data by supporting the following memory-related features of the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol):  \n* VS Code honor's the `memoryReference` attribute on DAP variables and announces this by passing the client capability `supportsMemoryReferences` to the debug adapter.\n* If VS Code receives the capability `supportsReadMemoryRequest` from a debug adapter, it will enable the UI for viewing binary data and will issue `readMemory` requests to retrieve the data.\n* If VS Code receives the capability `supportsWriteMemoryRequest` from a debug adapter, it will enable the UI for editing binary data and will issue `writeMemory` requests to store the data.\n* VS Code handles the `memory` event and announces this by passing the client capability `supportsMemoryEvent` to the debug adapter.",
    "url": "https://code.visualstudio.com/updates/v1_64#_vs-code-now-implements-the-memory-related-features-of-the-debug-adapter-protocol",
    "id": 2555
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Disable terminal persistence  \nWhen creating a terminal, you can opt out of terminal persistence on restart and reload by setting `disablePersistence` in `TerminalOptions` or `ExtensionTerminalOptions`.  \n```ts\nexport interface TerminalOptions {\ndisablePersistence?: boolean;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_64#_disable-terminal-persistence",
    "id": 2556
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Inlay hint API  \nThis is a shout out to everyone who's interested in the inlay hints API. It is nearing completion and has added support for interactive label parts. Those allow you to bind a source code location to hints that in return enables features like code navigation. Also, commands are now supported. The latest state and development of this proposal is here: [vscode.proposed.inlayHints.d.ts](https://github.com/microsoft/vscode/blob/1.64.0/src/vscode-dts/vscode.proposed.inlayHints.d.ts)",
    "url": "https://code.visualstudio.com/updates/v1_64#_inlay-hint-api",
    "id": 2557
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Language status API  \nThe language status item API is planned for finalization. Please try it out and provide feedback for [vscode.proposed.languageStatus.d.ts](https://github.com/microsoft/vscode/blob/1.64.0/src/vscode-dts/vscode.proposed.languageStatus.d.ts)",
    "url": "https://code.visualstudio.com/updates/v1_64#_language-status-api",
    "id": 2558
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Testing Proposals  \nWe're proposing an official way to implement a \"refresh\" handler for tests, check out [vscode.proposed.testRefresh.d.ts](https://github.com/microsoft/vscode/blob/1.64.0/src/vscode-dts/vscode.proposed.testRefresh.d.ts). This will allow extensions to unify behind a standard \"refresh\" button in VS Code and avoid implementing their own.  \nAdditionally, we propose that `TestItem` have a `sortText` attribute in [vscode.proposed.testSortText.d.ts](https://github.com/microsoft/vscode/blob/1.64.0/src/vscode-dts/vscode.proposed.testSortText.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_64#_testing-proposals",
    "id": 2559
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Inline completions: Automatic bracket completion  \nWhen an extension provides an inline completion item, it can set its property `completeBracketPairs` to `true`. If set, VS Code tries to repair invalid brackets in the completion text by closing or removing them, before the inline completion is shown to the user.",
    "url": "https://code.visualstudio.com/updates/v1_64#_inline-completions:-automatic-bracket-completion",
    "id": 2560
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Tree drag and drop proposal supports dragging into the editor  \nThe tree drag and drop proposal is almost ready for finalization and now supports dragging from a tree view into an editor when the `\"resourceurls\"` mime type is supported by the `TreeDragAndDropController`. Details are available in [issue #141418](https://github.com/microsoft/vscode/issues/141418#issuecomment-1021184968). Try it out and provide feedback for [vscode.proposed.treeViewDragAndDrop.d.ts](https://github.com/Microsoft/vscode/blob/1.64.0/src/vscode-dts/vscode.proposed.treeViewDragAndDrop.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_64#_tree-drag-and-drop-proposal-supports-dragging-into-the-editor",
    "id": 2561
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Comment timestamp  \nThe commenting API has a new `timestamp` property on `Comment`. Along with the API is a new setting to control how comment timestamps are displayed: `comments.useRelativeTime`. Please try it out and provide feedback for [vscode.proposed.commentTimestamp.d.ts](https://github.com/Microsoft/vscode/blob/1.64.0/src/vscode-dts/vscode.proposed.commentTimestamp.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_64#_comment-timestamp",
    "id": 2562
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n## Engineering  \n### vscode-bisect tool  \nA new tool for bisecting released VS Code Insiders versions (web and desktop) is available to help diagnose issues:  \n```sh\nnpx vscode-bisect\n```  \n<video src=\"images/1_64/vscode-bisect.mp4\" autoplay loop controls muted title=\"VS Code bisect tool\"></video>  \nSimilar to `git bisect`, `vscode-bisect` will launch a range of released Insiders builds from the past, asking whether the build reproduces the issue or not. The end result is a range of commits that introduced the issue. The instance will use a dedicated fresh folder for user data to not impact your main development environment.",
    "url": "https://code.visualstudio.com/updates/v1_64#_vscode-bisect-tool",
    "id": 2563
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Run Code Web & Server from sources  \nThe scripts to run VS Code for the Web and VS Code Server from sources has moved to the `scripts` folder:  \n* `./scripts/code-web.sh|bat` starts Code for the Web (aka \"serverless)\" from sources and opens a browser on it. Use `--help` for more options.\n* `./scripts/code-server.sh|bat` starts VS Code Server from sources. Add `--launch` to additionally open the web UI in a browser. Use `--help` for more options.\n* `./scripts/test-web-integration.sh|bat` for the remote web tests.\n* `./scripts/test-remote-integration.sh|bat` for the remote tests.",
    "url": "https://code.visualstudio.com/updates/v1_64#_run-code-web-&-server-from-sources",
    "id": 2564
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Extensions  \nIn this milestone, we improved Marketplace interactions by minimizing the number of queries VS Code makes to the service.",
    "url": "https://code.visualstudio.com/updates/v1_64#_extensions",
    "id": 2565
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between December 7 2021 and January 31 2022):  \n* [Tabulate](https://marketplace.visualstudio.com/items?itemName=a5hk.tabulate) ([a5hk](https://marketplace.visualstudio.com/publishers/a5hk))\n* [Powder](https://marketplace.visualstudio.com/items?itemName=flcl42.powder) ([Alexey Osipov](https://marketplace.visualstudio.com/publishers/flcl42))\n* [VCDrom](https://marketplace.visualstudio.com/items?itemName=drom.vcdrom) ([Aliaksei Chapyzhenka](https://marketplace.visualstudio.com/publishers/drom))\n* [Reveal Button](https://marketplace.visualstudio.com/items?itemName=anweber.reveal-button) ([Andreas Weber](https://marketplace.visualstudio.com/publishers/anweber))\n* [Digital Solutions](https://marketplace.visualstudio.com/items?itemName=AndrewTacon.digitalsolutions) ([Andrew Tacon](https://marketplace.visualstudio.com/publishers/AndrewTacon))\n* [lorem ipsum](https://marketplace.visualstudio.com/items?itemName=aroary.loremipsum) ([aroary](https://marketplace.visualstudio.com/publishers/aroary))\n* [Convert Selection](https://marketplace.visualstudio.com/items?itemName=ArturoDent.convert-selection) ([ArturoDent](https://marketplace.visualstudio.com/publishers/ArturoDent))\n* [Custom Language Properties](https://marketplace.visualstudio.com/items?itemName=ArturoDent.custom-language-syntax) ([ArturoDent](https://marketplace.visualstudio.com/publishers/ArturoDent))\n* [Find and Transform](https://marketplace.visualstudio.com/items?itemName=ArturoDent.find-and-transform) ([ArturoDent](https://marketplace.visualstudio.com/publishers/ArturoDent))\n* [Launch Configs](https://marketplace.visualstudio.com/items?itemName=ArturoDent.launch-config) ([ArturoDent](https://marketplace.visualstudio.com/publishers/ArturoDent))\n* [Instant Documentation](https://marketplace.visualstudio.com/items?itemName=atanasster.instant-documentation-vscode) ([atanasster](https://marketplace.visualstudio.com/publishers/atanasster))\n* [Couper Configuration](https://marketplace.visualstudio.com/items?itemName=AvengaGermanyGmbH.couper) ([Avenga Germany GmbH](https://marketplace.visualstudio.com/publishers/AvengaGermanyGmbH))\n* [Argdown](https://marketplace.visualstudio.com/items?itemName=christianvoigt.argdown-vscode) ([Christian Voigt](https://marketplace.visualstudio.com/publishers/christianvoigt))\n* [ES7+ React/Redux/React-Native snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets) ([dsznajder](https://marketplace.visualstudio.com/publishers/dsznajder))\n* [fantasy.markdown-all-in-one-for-web](https://marketplace.visualstudio.com/items?itemName=fantasy.markdown-all-in-one-for-web) ([fantasy](https://marketplace.visualstudio.com/publishers/fantasy))\n* [fink](https://marketplace.visualstudio.com/items?itemName=fink.vscode-fink) ([fink](https://marketplace.visualstudio.com/publishers/fink))\n* [GitLens (Insiders)](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) ([GitKraken](https://marketplace.visualstudio.com/publishers/eamodio))\n* [Select by Indent](https://marketplace.visualstudio.com/items?itemName=haberdashPI.vscode-select-by-indent) ([haberdashPI](https://marketplace.visualstudio.com/publishers/haberdashPI))\n* [Selection Utilities](https://marketplace.visualstudio.com/items?itemName=haberdashPI.selection-utilities) ([haberdashPI](https://marketplace.visualstudio.com/publishers/haberdashPI))\n* [Python-Factory Web Search](https://marketplace.visualstudio.com/items?itemName=HyunseungLee.python-factory-web-search) ([HyunseungLee](https://marketplace.visualstudio.com/publishers/HyunseungLee))\n* [Custom Element Scanner (alpha)](https://marketplace.visualstudio.com/items?itemName=Jan-Kretschmer.custom-element-scanner) ([JanKretschmer](https://marketplace.visualstudio.com/publishers/Jan-Kretschmer))\n* [tomato extensions](https://marketplace.visualstudio.com/items?itemName=jingjingwu.tomato-extensions) ([jingjingwu](https://marketplace.visualstudio.com/publishers/jingjingwu))\n* [vscode-position](https://marketplace.visualstudio.com/items?itemName=jtr.vscode-position) ([jtr](https://marketplace.visualstudio.com/publishers/jtr))\n* [KCL for vscode.dev](https://marketplace.visualstudio.com/items?itemName=kcl.kcl-vscode-web-extension) ([kcl_extension_publisher](https://marketplace.visualstudio.com/publishers/kcl))\n* [KL Language support](https://marketplace.visualstudio.com/items?itemName=Kevlanche.kl-language-support) ([Kevlanche](https://marketplace.visualstudio.com/publishers/Kevlanche))\n* [Systemd Helper](https://marketplace.visualstudio.com/items?itemName=hangxingliu.vscode-systemd-support) ([Liu Yue](https://marketplace.visualstudio.com/publishers/hangxingliu))\n* [bett3r icons](https://marketplace.visualstudio.com/items?itemName=lcsalt.bett3r-icons) ([Lucas](https://marketplace.visualstudio.com/publishers/lcsalt))\n* [xpro-snippets](https://marketplace.visualstudio.com/items?itemName=maratib.xpro-snippets) ([Maratib Ali Khan](https://marketplace.visualstudio.com/publishers/maratib))\n* [Projen](https://marketplace.visualstudio.com/items?itemName=MarkMcCulloh.vscode-projen) ([MarkMcCulloh](https://marketplace.visualstudio.com/publishers/MarkMcCulloh))\n* [Rainbow CSV](https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv) ([mechatroner](https://marketplace.visualstudio.com/publishers/mechatroner))\n* [Blogview](https://marketplace.visualstudio.com/items?itemName=mkizka.blogview-vscode) ([mkizka](https://marketplace.visualstudio.com/publishers/mkizka))\n* [CodeSandpack](https://marketplace.visualstudio.com/items?itemName=mojojoji.codesandpack) ([Mojojoji](https://marketplace.visualstudio.com/publishers/mojojoji))\n* [Abracadabra, refactor this!](https://marketplace.visualstudio.com/items?itemName=nicoespeon.abracadabra) ([Nicolas Carlo](https://marketplace.visualstudio.com/publishers/nicoespeon))\n* [Office Script Extension](https://marketplace.visualstudio.com/items?itemName=office-script.office-script-extension) ([office-script](https://marketplace.visualstudio.com/publishers/office-script))\n* [Better Fountain](https://marketplace.visualstudio.com/items?itemName=piersdeseilligny.betterfountain) ([Piers Deseilligny](https://marketplace.visualstudio.com/publishers/piersdeseilligny))\n* [Dothttp Http Client](https://marketplace.visualstudio.com/items?itemName=ShivaPrasanth.dothttp-code) ([Prasanth](https://marketplace.visualstudio.com/publishers/shivaprasanth))\n* [\u5c0f\u8aac](https://marketplace.visualstudio.com/items?itemName=publictheta.vscode-japanese-novel) ([Public Theta](https://marketplace.visualstudio.com/publishers/publictheta))\n* [bojodog](https://marketplace.visualstudio.com/items?itemName=RanolP.bojodog) ([RanolP](https://marketplace.visualstudio.com/publishers/RanolP))\n* [JSON Validate](https://marketplace.visualstudio.com/items?itemName=rioj7.vscode-json-validate) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Remove Comments](https://marketplace.visualstudio.com/items?itemName=rioj7.vscode-remove-comments) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Everforest](https://marketplace.visualstudio.com/items?itemName=sainnhe.everforest) ([sainnhe](https://marketplace.visualstudio.com/publishers/sainnhe))\n* [Gruvbox Material](https://marketplace.visualstudio.com/items?itemName=sainnhe.gruvbox-material) ([sainnhe](https://marketplace.visualstudio.com/publishers/sainnhe))\n* [JetSet for VSCode](https://marketplace.visualstudio.com/items?itemName=Sudhay.jetset-for-vscode) ([Sudhay](https://marketplace.visualstudio.com/publishers/Sudhay))\n* [MathJax for Markdown](https://marketplace.visualstudio.com/items?itemName=taniguchi.mathjax-for-markdown) ([TANIGUCHI Masaya](https://marketplace.visualstudio.com/publishers/taniguchi))\n* [WebEnv-Client](https://marketplace.visualstudio.com/items?itemName=Theboys619.webenv-client) ([Theboys619](https://marketplace.visualstudio.com/publishers/Theboys619))\n* [Graphviz Interactive Preview](https://marketplace.visualstudio.com/items?itemName=tintinweb.graphviz-interactive-preview) ([tintinweb](https://marketplace.visualstudio.com/publishers/tintinweb))\n* [LLL](https://marketplace.visualstudio.com/items?itemName=tintinweb.vscode-LLL) ([tintinweb](https://marketplace.visualstudio.com/publishers/tintinweb))\n* [Vyper](https://marketplace.visualstudio.com/items?itemName=tintinweb.vscode-vyper) ([tintinweb](https://marketplace.visualstudio.com/publishers/tintinweb))\n* [Sourcegraph - preview](https://marketplace.visualstudio.com/items?itemName=kandalatj.sourcegraph-preview) ([TJ Kandala](https://marketplace.visualstudio.com/publishers/kandalatj))\n* [Keyboard Macro Beta](https://marketplace.visualstudio.com/items?itemName=tshino.kb-macro) ([tshino](https://marketplace.visualstudio.com/publishers/tshino))\n* [WakaTime](https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime) ([WakaTime](https://marketplace.visualstudio.com/publishers/WakaTime))\n* [MSCode](https://marketplace.visualstudio.com/items?itemName=ms-webxt-es.mscode) ([WebXT ES](https://marketplace.visualstudio.com/publishers/ms-webxt-es))\n* [DigitalJS](https://marketplace.visualstudio.com/items?itemName=yuyichao.digitaljs) ([Yichao Yu](https://marketplace.visualstudio.com/publishers/yuyichao))\n* [Better Snippets](https://marketplace.visualstudio.com/items?itemName=zardoy.better-snippets) ([zardoy](https://marketplace.visualstudio.com/publishers/zardoy))\n* [Fix All JSON](https://marketplace.visualstudio.com/items?itemName=zardoy.fix-all-json) ([zardoy](https://marketplace.visualstudio.com/publishers/zardoy))\n* [Zardoy Experiments](https://marketplace.visualstudio.com/items?itemName=zardoy.zardoy-experiments) ([zardoy](https://marketplace.visualstudio.com/publishers/zardoy))",
    "url": "https://code.visualstudio.com/updates/v1_64#_web-extensions",
    "id": 2566
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [heartacker (@heartacker)](https://github.com/heartacker)\n* [Lemmingh (@Lemmingh)](https://github.com/Lemmingh)",
    "url": "https://code.visualstudio.com/updates/v1_64#_issue-tracking",
    "id": 2567
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2022 Release (1.64)  \n### Pull requests  \nContributions to `vscode`:  \n* [@btidor (Benjamin Tidor)](https://github.com/btidor): Fix `undefined`s in text search results [PR #141522](https://github.com/microsoft/vscode/pull/141522)\n* [@ckline-tryptic (Christopher M Kline)](https://github.com/ckline-tryptic): Expose 'tag' and 'deleteTag' in git extension API [PR #123815](https://github.com/microsoft/vscode/pull/123815)\n* [@DanielRosenwasser (Daniel Rosenwasser)](https://github.com/DanielRosenwasser): \"Surround with\" in TS/JS snippets [PR #138565](https://github.com/microsoft/vscode/pull/138565)\n* [@dnicolson (Dave Nicolson)](https://github.com/dnicolson): Add singular form of bisect message [PR #137626](https://github.com/microsoft/vscode/pull/137626)\n* [@eltociear (Ikko Ashimine)](https://github.com/eltociear): editors - fix typo [PR #140320](https://github.com/microsoft/vscode/pull/140320)\n* [@Enzime (Michael Hoang)](https://github.com/Enzime): ripgrep: don't use deprecated flag for PCRE2 [PR #139721](https://github.com/microsoft/vscode/pull/139721)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* fix #118617 use term 'remote' when referring to lack of upstream branch [PR #120467](https://github.com/microsoft/vscode/pull/120467)\n* Correct the description of `screencastMode.keyboardShortcutsFormat` setting (#138644) [PR #138645](https://github.com/microsoft/vscode/pull/138645)\n* Surface the maximum and minimum values for `editor.hover.delay` (#140215) [PR #140216](https://github.com/microsoft/vscode/pull/140216)\n* Support `--#region` and `--#endregion` in SQL (#141257) [PR #141264](https://github.com/microsoft/vscode/pull/141264)\n* [@iamkun](https://github.com/iamkun): refactor: remove duplicate if statement [PR #140085](https://github.com/microsoft/vscode/pull/140085)\n* [@imphil (Philipp Wagner)](https://github.com/imphil): Update ripgrep binaries to include ppc64le and s390x [PR #140028](https://github.com/microsoft/vscode/pull/140028)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Install extension with version using workbench.extensions.installExtension [PR #136314](https://github.com/microsoft/vscode/pull/136314)\n* Fixes Ctrl + Shift + {Left, Right, Home, End} is broken after a terminal is opened & closed on Firefox [PR #139615](https://github.com/microsoft/vscode/pull/139615)\n* Fixes changing keyboard layout in vscode web is broken [PR #140295](https://github.com/microsoft/vscode/pull/140295)\n* Fix connection token parsing [PR #140532](https://github.com/microsoft/vscode/pull/140532)\n* [@jlelong (Jerome Lelong)](https://github.com/jlelong)\n* Basic LaTeX built-in extension [PR #138395](https://github.com/microsoft/vscode/pull/138395)\n* Update latex language grammar and configuration [PR #140801](https://github.com/microsoft/vscode/pull/140801)\n* [@jzyrobert (Robert Jin)](https://github.com/jzyrobert): Update html-language-features to use doQuoteComplete [PR #137080](https://github.com/microsoft/vscode/pull/137080)\n* [@KapitanOczywisty](https://github.com/KapitanOczywisty): Fix PHP update-grammar.js [PR #140619](https://github.com/microsoft/vscode/pull/140619)\n* [@KendallDoesCoding (Kendall Pinto)](https://github.com/KendallDoesCoding): creating pr's section [PR #141130](https://github.com/microsoft/vscode/pull/141130)\n* [@KhaledSamir (Khaled)](https://github.com/KhaledSamir): Corrected the regex to detect espaced percent symbol. [PR #139437](https://github.com/microsoft/vscode/pull/139437)\n* [@lostintangent (Jonathan Carter)](https://github.com/lostintangent): [Markdown] Adding support for GitHub themed images [PR #137820](https://github.com/microsoft/vscode/pull/137820)\n* [@Mai-Lapyst](https://github.com/Mai-Lapyst): Adding default fileicon support to language contributions [PR #118846](https://github.com/microsoft/vscode/pull/118846)\n* [@MaxGrekhov (Max Grekhov)](https://github.com/MaxGrekhov): open editors: sort by fullPath [PR #133790](https://github.com/microsoft/vscode/pull/133790)\n* [@nrayburn-tech (Nicholas Rayburn)](https://github.com/nrayburn-tech): Add Source Control View Sort to Storage [PR #123232](https://github.com/microsoft/vscode/pull/123232)\n* [@OPY-bbt (zhangyan)](https://github.com/OPY-bbt): fix(suggest): only show readmore icon in focused label [PR #139792](https://github.com/microsoft/vscode/pull/139792)\n* [@orta (Orta Therox)](https://github.com/orta): Allow extensions to be able to make requests to the typescript extension's tsserver via commands [PR #138279](https://github.com/microsoft/vscode/pull/138279)\n* [@PieterBranderhorst](https://github.com/PieterBranderhorst): Notify user when max folds exceeded, make max folds configurable. [PR #140480](https://github.com/microsoft/vscode/pull/140480)\n* [@samestep (Sam Estep)](https://github.com/samestep): Add option to not pass --no-ignore-parent to rg [PR #140022](https://github.com/microsoft/vscode/pull/140022)\n* [@SeriousBug (Kaan Gen\u00e7)](https://github.com/SeriousBug): hasCustomMarkdownPreview disables markdown preview buttons in context menus [PR #139241](https://github.com/microsoft/vscode/pull/139241)\n* [@ShafinKhadem (Nafiur Rahman Khadem)](https://github.com/ShafinKhadem): Add an undo/redo stop at end of snippet [PR #140096](https://github.com/microsoft/vscode/pull/140096)\n* [@slidoooor (Hans)](https://github.com/slidoooor)\n* fix generates different html content for the same markdown when get the cached token [PR #138935](https://github.com/microsoft/vscode/pull/138935)\n* Fix the overlap the line by a few pixels (#139311) [PR #139575](https://github.com/microsoft/vscode/pull/139575)\n* testing: add autosave before each test run [PR #141254](https://github.com/microsoft/vscode/pull/141254)\n* [@smcenlly (Simon McEnlly)](https://github.com/smcenlly): testing: add new API `sortText` property to TestItem [PR #132099](https://github.com/microsoft/vscode/pull/132099)\n* [@SMSadegh19 (Mohammad Sadegh Salimi)](https://github.com/SMSadegh19): Adding support for RTL languages for readme markdown preview. [PR #139644](https://github.com/microsoft/vscode/pull/139644)\n* [@SNDST00M (M.U.N.I.N)](https://github.com/SNDST00M): Add `FontStyle.Strikethrough` support [PR #139413](https://github.com/microsoft/vscode/pull/139413)\n* [@somebee (Sindre Aarsaether)](https://github.com/somebee): Fix decorations and mouse hit-testing when editor is scaled via transform [PR #139282](https://github.com/microsoft/vscode/pull/139282)\n* [@stevenjoezhang (Mimi)](https://github.com/stevenjoezhang): Fix terminal.integrated.cwd with predefined variables [PR #137023](https://github.com/microsoft/vscode/pull/137023)\n* [@Timmmm (Tim)](https://github.com/Timmmm): Fix parseAddress regex [PR #140977](https://github.com/microsoft/vscode/pull/140977)\n* [@TwitchBronBron (Bronley Plumb)](https://github.com/TwitchBronBron): Fix perf issue for InstallAnotherVersionAction [PR #136992](https://github.com/microsoft/vscode/pull/136992)\n* [@WaqasAliAbbasi (Waqas Ali)](https://github.com/WaqasAliAbbasi): Prevent link highlight in markdown code blocks and spans [PR #140816](https://github.com/microsoft/vscode/pull/140816)\n* [@wengj9 (James Weng)](https://github.com/wengj9): Add extension information to snippet picker [PR #138880](https://github.com/microsoft/vscode/pull/138880)\n* [@Yash621 (Yash Goel)](https://github.com/Yash621): code-insiders --status results in error [PR #140152](https://github.com/microsoft/vscode/pull/140152)\n* [@zardoy (Vitaly)](https://github.com/zardoy): Make typings on `showInformationMessage`, `showWarningMessage`, `showErrorMessage` strict with items as strings [PR #137672](https://github.com/microsoft/vscode/pull/137672)  \nContributions to `vscode-css-languageservice`:  \n* [@fyangstudio (yangfan)](https://github.com/fyangstudio): Feat: support new resolving import at-rules [PR #255](https://github.com/microsoft/vscode-css-languageservice/pull/255)\n* [@romainmenke (Romain Menke)](https://github.com/romainmenke): css color : add support for hue rad|grad|turn [PR #257](https://github.com/microsoft/vscode-css-languageservice/pull/257)\n* [@Semigradsky (Dmitry Semigradsky)](https://github.com/Semigradsky): Support case-sensitivity attribute selector [PR #259](https://github.com/microsoft/vscode-css-languageservice/pull/259)  \nContributions to `vscode-eslint`:  \n* [@edupsousa (Eduardo Pereira de Sousa)](https://github.com/edupsousa): Allow user to ignore server errors. [PR #1375](https://github.com/microsoft/vscode-eslint/pull/1375)  \nContributions to `vscode-extension-samples`:  \n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb): Fix the 'Cancel' button in comment-sample [PR #492](https://github.com/microsoft/vscode-extension-samples/pull/492)  \nContributions to `vscode-html-languageservice`:  \n* [@zuochenxue (ZuoChenxue)](https://github.com/zuochenxue): docs: correct typos [PR #118](https://github.com/microsoft/vscode-html-languageservice/pull/118)  \nContributions to `vscode-js-debug`:  \n* [@zkx5xkt](https://github.com/zkx5xkt): fix: DebugSessionTunnels. Misplaced remote/local port usage [PR #1163](https://github.com/microsoft/vscode-js-debug/pull/1163)  \nContributions to `vscode-pull-request-github`:  \n* [@blindpirate (Bo Zhang)](https://github.com/blindpirate)\n* Fix react warnings in timeline [PR #3212](https://github.com/microsoft/vscode-pull-request-github/pull/3212)\n* Fix more React warnings of incorrect `props.key` [PR #3214](https://github.com/microsoft/vscode-pull-request-github/pull/3214)\n* [@joshuaobrien (Joshua O'Brien)](https://github.com/joshuaobrien): Add command to open all diffs [PR #3238](https://github.com/microsoft/vscode-pull-request-github/pull/3238)  \nContributions to `vscode-textmate`:  \n* [@SNDST00M (M.U.N.I.N)](https://github.com/SNDST00M): Implement `FontStyle.Strikethrough` [PR #159](https://github.com/microsoft/vscode-textmate/pull/159)  \nContributions to `vscode-vsce`:  \n* [@hangxingliu (Liu Yue)](https://github.com/hangxingliu): fix: docker base image needs be at latest `node:14-alpine` [PR #651](https://github.com/microsoft/vscode-vsce/pull/651)\n* [@joerohde (Joe Rohde)](https://github.com/joerohde): feat: sanity check to validate entrypoints [PR #669](https://github.com/microsoft/vscode-vsce/pull/669)\n* [@ritwickdey (Ritwick Dey)](https://github.com/ritwickdey): fix: entrypoint validation without js tag [PR #676](https://github.com/microsoft/vscode-vsce/pull/676)  \nContributions to `debug-adapter-protocol`:  \n* [@Calindro](https://github.com/Calindro): Added Emulicious Debugger [PR #230](https://github.com/microsoft/debug-adapter-protocol/pull/230)\n* [@cdaringe (Christopher Dieringer)](https://github.com/cdaringe): docs(implementors): add OCaml [PR #228](https://github.com/microsoft/debug-adapter-protocol/pull/228)\n* [@ko1 (Koichi Sasada)](https://github.com/ko1): Add `VSCode rdbg Ruby Debugger` [PR #232](https://github.com/microsoft/debug-adapter-protocol/pull/232)  \nContributions to `monaco-editor`:  \n* [@blutorange (Andre Wachsmuth)](https://github.com/blutorange): Implements #2383 Add syntax modes for FreeMarker template language [PR #2847](https://github.com/microsoft/monaco-editor/pull/2847)\n* [@forensicmike (forensicmike1)](https://github.com/forensicmike): Add \"cd monaco-editor\" to the step by step commandline instructions for cloning and running the samples [PR #2894](https://github.com/microsoft/monaco-editor/pull/2894)\n* [@juan-carlos-diaz](https://github.com/juan-carlos-diaz): Fix #2851 Highlight correctly the attributes and identifiers (with dashes) for Shell language [PR #2871](https://github.com/microsoft/monaco-editor/pull/2871)\n* [@philipturner (Philip Turner)](https://github.com/philipturner)\n* Update Swift language specification to version 5.5 [PR #2855](https://github.com/microsoft/monaco-editor/pull/2855)\n* Add @preconcurrency to Swift declaration attributes [PR #2924](https://github.com/microsoft/monaco-editor/pull/2924)\n* [@rcjsuen (Remy Suen)](https://github.com/rcjsuen): Support hyphenated HTML tags in Markdown syntax [PR #2864](https://github.com/microsoft/monaco-editor/pull/2864)\n* [@resistdesign (Ryan Graff)](https://github.com/resistdesign): doc: (samples) Simplify Browser ESM Parcel build [PR #2832](https://github.com/microsoft/monaco-editor/pull/2832)\n* [@ValeraS (Valeriy)](https://github.com/ValeraS)\n* fix(monaco-editor-webpack-plugin): load monaco-editor with webpack 4 [PR #2818](https://github.com/microsoft/monaco-editor/pull/2818)\n* tune(monaco-editor-webpack-plugin): expose plugin options type [PR #2853](https://github.com/microsoft/monaco-editor/pull/2853)  \nContributions to `node-jsonc-parser`:  \n* [@Marcono1234](https://github.com/Marcono1234)\n* Update API section in README [PR #61](https://github.com/microsoft/node-jsonc-parser/pull/61)\n* Add JSON path supplier parameter to visitor functions [PR #62](https://github.com/microsoft/node-jsonc-parser/pull/62)\n* [@P0lip (Jakub Ro\u017cek)](https://github.com/P0lip): findNodeAtLocation does not handle incomplete property pair [PR #44](https://github.com/microsoft/node-jsonc-parser/pull/44)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_64#_pull-requests",
    "id": 2568
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### New layout control options  \nLast milestone, we introduced the experimental [layout control](https://code.visualstudio.com/updates/v1_64#_customize-layout-control) in the title bar (enabled by setting `workbench.experimental.layoutControl.enabled` to `true`). We have heard feedback that, while the actions in the control are useful, they require too many clicks. For that reason, we are adding several UI options for everyone to try out with the setting `workbench.experimental.layoutControl.type`. This setting has the following options:  \n* `menu`: The previous behavior with a single button that opens a menu (default).\n* `toggles`: A new option that shows three buttons to toggle the Panel, Side Bar, and Side Panel.\n* `both`: A new option that shows the toggles followed by the menu button, which still allows you to fairly quickly access the customize layout Quick Pick.  \nThe image below shows `layoutControl.type` set to `both` to display the three toggle buttons along with the menu dropdown.  \n![Layout control with type set to both to show toggle buttons and menu dropdown](images/1_65/layout-control-options.png)",
    "url": "https://code.visualstudio.com/updates/v1_65#_new-layout-control-options",
    "id": 2569
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Light High Contrast theme  \nA new Light High Contrast theme has been added to improve legibility and readability of the editor.  \n![VS Code using Light High Contrast theme](images/1_65/light-hc-theme.png)",
    "url": "https://code.visualstudio.com/updates/v1_65#_light-high-contrast-theme",
    "id": 2570
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Audio cues  \nNew audio cues have been added with this release, including audio cues for warnings, inline suggestions, and debugger breakpoint hits. The sounds have been tuned and the general setting `audioCues.enabled` has been deprecated in favor of the individual `audioCues.*` settings:  \n![A screenshot of all available audio cue enablement settings](images/1_65/audio-cues-settings.png)  \nAll audio cues except `lineHasWarning` are enabled by default for screen reader users (setting value `auto`).  \nA new audio cue command **Help: List Audio Cues** lists all available audio cues, lets you hear each audio cue as you move through the list, and review which cues are currently enabled.  \n![Audio cue help command dropdown with the warning and breakpoint audio cues enabled](images/1_65/audio-cues-dropdown.png)",
    "url": "https://code.visualstudio.com/updates/v1_65#_audio-cues",
    "id": 2571
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Drag and drop Problems and Search results  \nYou can now drag and drop a Problem, Search, or Reference result into the editor, opening the file and revealing the result position. This can be useful if you want to start a new editor group or drop a result into an existing editor group.  \n<video src=\"images/1_65/dnd-problems.mp4\" autoplay loop controls muted title=\"Drag and Drop problem result into the editor\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_65#_drag-and-drop-problems-and-search-results",
    "id": 2572
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Settings editor split view  \nThe Settings editor now uses an adjustable split view to separate the table of contents from the settings list.  \n<video src=\"images/1_65/settings-editor-split-view.mp4\" autoplay loop controls muted title=\"Settings editor adjustable split view\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_65#_settings-editor-split-view",
    "id": 2573
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Improved automatic language detection  \nWhen the new setting `workbench.editor.historyBasedLanguageDetection` is enabled, untitled editors will use an improved automatic language detection algorithm that factors in your editor history and the contents of the current workspace. The new algorithm requires much less text input than before to provide detection results.  \nBelow is an example of using this across JavaScript, TypeScript, Markdown, Python, PHP, and C++ (many more languages are supported):  \n<video src=\"images/1_65/lang-detect.mp4\" autoplay loop controls muted title=\"Using automatic language detection for several programming languages\"></video>  \n_Theme: [GitHub Light + HC Customizations](https://github.com/JacksonKearl/gh-high-contrast-light)_",
    "url": "https://code.visualstudio.com/updates/v1_65#_improved-automatic-language-detection",
    "id": 2574
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Improved language extension recommendations  \nLanguage feature extension recommendations now take into consideration other prominent language extensions in the Marketplace while recommending. For example, VS Code does not recommend the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) if you have the [Apache NetBeans Java](https://marketplace.visualstudio.com/items?itemName=ASF.apache-netbeans-java) extension installed.",
    "url": "https://code.visualstudio.com/updates/v1_65#_improved-language-extension-recommendations",
    "id": 2575
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Keyboard shortcut for extension tree hovers  \nYou can trigger the hover to show in custom tree views that are contributed by extensions by using the keyboard shortcut `Ctrl/Cmd+K, Ctrl/Cmd+I`.",
    "url": "https://code.visualstudio.com/updates/v1_65#_keyboard-shortcut-for-extension-tree-hovers",
    "id": 2576
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Editor  \n### Surround With Snippet  \nThere is a new command to surround the current selection with a snippet. Select some text, invoke the **Surround With Snippet** command from the Command Palette (`kb(workbench.action.showCommands)`), and select a snippet from the dropdown.  \nIn the short video below, a selected method is surrounded by a try/catch snippet.  \n<video src=\"./images/1_65/surround-with-snippet.mp4\" autoplay loop controls muted title=\"Running the Surround With Snippet command, accepting the try/catch snippet\"></video>  \nAny applicable snippet that uses the `TM_SELECTED_TEXT` or `SELECTION` variables will be available in the **Surround With Snippet** Quick Pick dropdown. Custom user or project snippets are also included.",
    "url": "https://code.visualstudio.com/updates/v1_65#_surround-with-snippet",
    "id": 2577
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Accessible inlay hints  \nInlay hints show additional information within source code, like the inferred type of a variable. For screen reader users, there is a new command to help with this feature. Select **Read Line With Inlay Hints** from the Command Palette and the editor will read the current line interleaved with its hints.",
    "url": "https://code.visualstudio.com/updates/v1_65#_accessible-inlay-hints",
    "id": 2578
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Contextual Unicode highlighting  \nTo report fewer false positives, ambiguous and invisible Unicode characters are no longer highlighted if the surrounding characters visually indicate a non-ASCII script. Thus, in trusted workspaces, only characters that are invisible or can be confused with ASCII characters are highlighted. The exception to this is those characters that are contained in a word of non-ASCII characters, where at least one character cannot be confused with an ASCII character.  \nBefore you can see multiple false positives in the const string:  \n![Screenshot of text with many false positives and one true positive](images/1_65/unicode-context.dio-before.png)  \nAfter only the confusing character is highlighted:  \n![Screenshot of text with only one true positive](images/1_65/unicode-context.dio-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_65#_contextual-unicode-highlighting",
    "id": 2579
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Terminal  \n### Multi-line paste warning  \nA dialog now shows by default when pasting multiple lines in terminals when the shell does not support multi-line. This warning is displayed for bracketed paste mode and for PowerShell when we hand off `Ctrl+V` directly to the shell. There is a **Do not ask me again** checkbox on the dialog to easily disable the feature.",
    "url": "https://code.visualstudio.com/updates/v1_65#_multi-line-paste-warning",
    "id": 2580
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Terminal link improvements  \nThe implementation for terminal links had a large refactor this release. This simplified and improved maintainability of the feature but also brought:  \n* Link highlights work again.\n* Caching of resolved links, reducing latency for certain links to show up.\n* **Workspace Search** links are now handled by the same code as validated links, for more consistency and improving line/column recognition.\n* Several bug fixes.",
    "url": "https://code.visualstudio.com/updates/v1_65#_terminal-link-improvements",
    "id": 2581
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Open file link command improvements  \nThe **Open Last File Link** and **Open Detected Link...** commands introduced last version now exclude folders, which should make them more useful.",
    "url": "https://code.visualstudio.com/updates/v1_65#_open-file-link-command-improvements",
    "id": 2582
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Source Control  \n### Diff editor management  \nThis milestone we have made changes that should help with managing diff editors. There is a new command **Git: Close All Diff Editors** in the Command Palette that can be used to close all open diff editors. There is also a new setting, `git.closeDiffOnOperation` to automatically close diff editors when changes are stashed, committed, discarded, staged, or unstaged.",
    "url": "https://code.visualstudio.com/updates/v1_65#_diff-editor-management",
    "id": 2583
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Git command output logging  \nWhen executing a git command, the contents of `stderr` are logged in the [Git output window](https://code.visualstudio.com/docs/sourcecontrol/overview#_git-output-window). There is a new setting, `git.commandsToLog`, to specify a list of Git commands that will have the contents of `stdout` logged in the [Git output window](https://code.visualstudio.com/docs/sourcecontrol/overview#_git-output-window).",
    "url": "https://code.visualstudio.com/updates/v1_65#_git-command-output-logging",
    "id": 2584
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Debugging  \n### Lazy variables  \nAccessing the value of a variable may have side-effects or be expensive. VS Code's generic debugger can now show a button for the user to fetch the variable value on demand. This is available for debug extensions that support the new [\"lazy\" variable feature](#debugger-extension-authoring). Currently this has only been implemented by the built-in JavaScript debugger for property getters, but we expect that other debugger extensions will follow soon.  \n<video src=\"images/1_65/lazy-vars.mp4\" autoplay loop controls muted title=\"Expanding lazy variables in the debugger\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_65#_lazy-variables",
    "id": 2585
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Sticky scrolling notebook cell buttons  \nThe **Run** button and cell toolbar will now stick to the top of the screen when scrolling down a code cell. This makes them more accessible when working in a long code cell.  \n<video src=\"images/1_65/sticky-scroll.mp4\" autoplay loop controls muted title=\"Notebook cell button and toolbar remain visible during scrolling\"></video>  \n_Theme: [Dracula](https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula)_",
    "url": "https://code.visualstudio.com/updates/v1_65#_sticky-scrolling-notebook-cell-buttons",
    "id": 2586
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Languages  \n### TypeScript 4.6  \nVS Code now ships with TypeScript 4.6. This update brings a number of new language features, along with tooling improvements and bug fixes. You can read more about TypeScript 4.6 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-6-rc).",
    "url": "https://code.visualstudio.com/updates/v1_65#_typescript-4.6",
    "id": 2587
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Syntax error reporting in JavaScript files  \nThanks to TypeScript 4.6, VS Code now reports some common syntax errors in JavaScript files. This includes parsing errors, as well as invalid redeclarations of block scoped variables:  \n![Detecting a redeclaration of a const variable in a JavaScript file](images/1_65/js-syntax-errors.png)  \nPreviously these errors were only reported when you [enable semantic checking in your JavaScript](https://code.visualstudio.com/docs/languages/javascript#_type-checking).  \nYou can disable this error reporting by setting:  \n```json\n\"javascript.validate.enable\": false\n```",
    "url": "https://code.visualstudio.com/updates/v1_65#_syntax-error-reporting-in-javascript-files",
    "id": 2588
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### More JS/TS settings can be configured per language  \nMore of the JavaScript and TypeScript settings can now be configured as [language-specific settings](https://code.visualstudio.com/docs/getstarted/settings#_languagespecific-editor-settings). Language-specific settings are useful if you want different settings for `javascript` vs `javascriptreact`, for example.  \nNew language-specific enabled settings include:  \n* `javascript.preferences.quoteStyle`, `typescript.preferences.quoteStyle`\n* `javascript.preferences.importModuleSpecifier`, `typescript.preferences.importModuleSpecifier`\n* `javascript.preferences.importModuleSpecifierEnding`, `typescript.preferences.importModuleSpecifierEnding`\n* `javascript.preferences.jsxAttributeCompletionStyle`, `typescript.preferences.jsxAttributeCompletionStyle`\n* `javascript.preferences.renameShorthandProperties`, `typescript.preferences.renameShorthandProperties`\n* `javascript.preferences.useAliasesForRenames`, `typescript.preferences.useAliasesForRenames`\n* `javascript.suggest.enabled`, `typescript.suggest.enabled`\n* `javascript.suggest.completeJSDocs`, `typescript.suggest.completeJSDocs`\n* `javascript.suggest.jsdoc.generateReturns`, `typescript.suggest.jsdoc.generateReturns`\n* `javascript.autoClosingTags`, `typescript.autoClosingTags`",
    "url": "https://code.visualstudio.com/updates/v1_65#_more-js/ts-settings-can-be-configured-per-language",
    "id": 2589
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### New Lua syntax highlighting grammar  \nVS Code has a new, better-maintained, Lua grammar for syntax highlighting of Lua files. The new grammar is actively maintained, fixes issues that existed in the old grammar, and supports newer Lua tokens.",
    "url": "https://code.visualstudio.com/updates/v1_65#_new-lua-syntax-highlighting-grammar",
    "id": 2590
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## VS Code for the Web  \n### Reopen local files and folders  \nThe list of recently opened local files and folders is now available when you access [vscode.dev](https://vscode.dev) or [insiders.vscode.dev](https://insiders.vscode.dev) with a browser that supports the [web file system access API](https://developer.mozilla.org/docs/Web/API/File_System_Access_API). Selecting a local file will open it in an editor and selecting a local folder will update the File Explorer to show its contents. You may be asked by the browser to confirm local file access before the contents are revealed.  \n<video src=\"images/1_65/web-local-recent.mp4\" autoplay loop controls muted title=\"Open recent folders in VS Code for the Web\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_65#_reopen-local-files-and-folders",
    "id": 2591
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Remote Repositories  \n**GitHub Repositories**  \nThis milestone, merge conflict resolution was improved when editing GitHub repositories on [vscode.dev](https://vscode.dev) and [github.dev](https://github.dev). There are now merge conflict decorations in your editor, with options to **Accept Current Change**, **Accept Incoming Change** or **Accept Both Changes**.  \n<video src=\"images/1_65/remotehub-merge-conflicts.mp4\" autoplay loop controls muted title=\"Merge conflict decorations and selecting Accept Current Change\"></video>  \nThere is also a **Stage Changes** action in the Source Control view for files containing merge conflicts.  \n<video src=\"images/1_65/remotehub-stage-conflicts.mp4\" autoplay loop controls muted title=\"Staging merge conflicts\"></video>  \nAdditionally, you can now easily stage and unstage all changes under a specific folder in a GitHub repository on [vscode.dev](https://vscode.dev) and [github.dev](https://github.dev). To do so, right-click on the Source Control view and select **View as Tree**.  \n<video src=\"images/1_65/remotehub-stage-folder.mp4\" autoplay loop controls muted title=\"Stage all changes under a folder after setting View as Tree\"></video>  \n_Theme: [One Monokai](https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai)_  \nWorkspace search and **Find All References** will now download and index a full copy of the repository by default, rather than defaulting to providing partial results as before.  \nThere are several settings to configure this indexing feature:  \n* `remoteHub.indexing.verboseDownloadNotification` - Controls whether the download notification is shown as a popup (default) or in the Status bar.\n* `remoteHub.indexing.maxIndexSize` - Controls the size limit of indexes to download. If this limit is exceeded, the download will be cancelled and partial results will be provided. You can leave this setting empty to never download repositories and always use partial results.  \n**Azure Repos**  \nIn this milestone, we switched Azure Repos support from using a specific Azure DevOps authentication provider to using the generic Microsoft authentication provider (used by Settings Sync). You will be prompted to log in again when you visit an Azure Repo but all of your saved changes will be persisted.",
    "url": "https://code.visualstudio.com/updates/v1_65#_remote-repositories",
    "id": 2592
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Contributions to extensions  \n### Hex Editor data inspector improvements  \nPreviously, the [Hex Editor extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor) always displayed its Data Inspector in the Side bar, and revealed it whenever a hex editor was revealed. However, some users found this annoying, and it led to a particularly disruptive experience with its integration of a [memory inspector for debuggers](https://code.visualstudio.com/updates/v1_64#_viewing-and-editing-binary-data). Now, the Data Inspector will appear to the right side of the inspected bytes. If the editor is too narrow, the Data Inspector will be displayed inside a hover widget instead.  \n![Image showing the Data Inspector to the right side of the hex bytes](images/1_65/hex-editor-data-inspector.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)_  \nThis can be configured via the `hexeditor.inspectorType` setting, which can take one of three values:  \n* `aside` - Show the Data Inspector to the side.\n* `hover` - Show the Data Inspector only on hover, regardless of editor width.\n* `sidebar` - Display the Data Inspector in the Side bar as before.",
    "url": "https://code.visualstudio.com/updates/v1_65#_hex-editor-data-inspector-improvements",
    "id": 2593
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.38.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0380) release of the extension to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_65#_github-pull-requests-and-issues",
    "id": 2594
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Preview features  \n### Terminal shell integration  \nShell integration in the terminal was initially introduced [in the last release](https://code.visualstudio.com/updates/v1_64#_terminal-shell-integration) and has seen many improvements this month. As a refresher, this feature allows VS Code to gain additional insights into what's happening within the terminal, which was previously largely unknown. The feature is still considered experimental and you can opt-in via the `terminal.integrated.shellIntegration.enabled` setting.  \nThe biggest change this release is that commands detected by shell integration now feature decorations in the \"gutter\" to the left. A command decoration visually breaks up the buffer and provides access to information and actions that use shell integration capabilities. There are three types of command decorations: error, success, and default, as determined by the command's exit code.  \n![A command succeeds and a success decoration is placed to the left of the prompt. A command fails and an error decoration is placed to the left of the prompt. A placeholder decoration is to the left of no-op commands and the current command before it's been executed.](images/1_65/command-decorations.png)  \nClicking on a decoration displays actions specific to that command in a menu, that currently include **Re-run Command** and **Copy Output**.  \n![Command decoration context menu showing Re-run Command and Copy Output actions](images/1_65/command-context-menu.png)  \nHovering over the decoration displays information about the command, such as the time since it was run and the associated exit code.  \n![Command decoration hover displaying Show Command Actions option and information that the command executed 3 minutes ago and returned failed exit code 127](images/1_65/command-hover.png)  \nDecorations can be disabled by setting `terminal.integrated.shellIntegration.decorationsEnabled` to `false`. Individual icons can be configured via the `terminal.integrated.shellIntegration.decorationIcon*` settings and these new theme keys set the colors:  \n* `terminalCommandDecoration.successBackground`\n* `terminalCommandDecoration.errorBackground`\n* `terminalCommandDecoration.defaultBackground`  \nHere are the other main changes:  \n* The enablement setting has been renamed to `terminal.integrated.shellIntegration.enabled`.\n* The mechanism for enabling shell integration in all supported shells is now more reliable.\n* Shell integration should now work when using remote connected windows (SSH, WSL, containers).\n* Line continuations (for example, `$PS2`) should now work on all supported shells.\n* Commands that are \"skipped\" are now marked specially. For example, after using `Ctrl+C` or running an empty command.\n* The **Run Recent Command** and **Go to Recent Directory** commands now store history between sessions. Storing history can be configured via the `terminal.integrated.shellIntegration.history` setting.",
    "url": "https://code.visualstudio.com/updates/v1_65#_terminal-shell-integration",
    "id": 2595
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### ESLint  \nThe [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extension has preliminary support for notebook documents containing cells that can be validated with ESLint. This support is only available in the Pre-Release version of the extension.",
    "url": "https://code.visualstudio.com/updates/v1_65#_eslint",
    "id": 2596
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Extension authoring  \n### Language status items  \nWe have finalized the API for language status items. This API shows language specific information for the active editor. This can be general information about the project or toolset version but can also display errors and warnings.  \n![JSON language status item linking to schema used for validation](images/1_65/language-status.png)  \nThe API resembles the Status bar API and can be accessed via `vscode.languages.createLanguageStatusItem(...)`. A language status item should be created with a document selector so that VS Code can show and hide it whenever the active editor changes.",
    "url": "https://code.visualstudio.com/updates/v1_65#_language-status-items",
    "id": 2597
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Inlay Hints  \nThe Inlay Hint provider API is now finalized. It allows to inlay additional information with source code. The image below shows how TypeScript added an inlay hint for an inferred type.  \n![TypeScript inferred variable type `boolean` shown as inlay hint](images/1_65/inlay-hints.png)  \nThe API is built around the `InlayHintsProvider`. It provides `InlayHint` objects, which have a couple of interesting features:  \n* An inlay hint can have a tooltip and a command.\n* The label of a hint can be composed of multiple parts, which again can have a tooltip and command.\n* The label parts can also have an associated source location that enables language features such as **Go To Definition** for this part.",
    "url": "https://code.visualstudio.com/updates/v1_65#_inlay-hints",
    "id": 2598
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Status bar focus borders  \nWe made it easier and more accessible to navigate the Status bar by adding focus borders to the Status bar and Status bar items.  \n<video src=\"images/1_65/status-bar-focus-borders.mp4\" autoplay loop controls muted title=\"Animation showing Status bar focus borders as the user tabs thought Status bar items\"></video>  \nTheme authors can customize the border colors by configuring the two new theme colors:  \n* `statusBar.focusBorder`: The border color of the entire status bar when focused.\n* `statusBarItem.focusBorder`: The border color the status bar items when focused.",
    "url": "https://code.visualstudio.com/updates/v1_65#_status-bar-focus-borders",
    "id": 2599
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Testing refresh action and sortText  \nWe've finalized [our proposal](https://github.com/microsoft/vscode/issues/139737) to add a standard refresh handler to the `TestController` interface. If extensions assign a method to this property, VS Code will show a \"refresh\" icon in the Test Explorer view.  \nAdditionally, the `TestItem` [can now](https://github.com/microsoft/vscode/issues/130882) have a `sortText` attribute that controls the sort order for items which do not have a specific location in a file.",
    "url": "https://code.visualstudio.com/updates/v1_65#_testing-refresh-action-and-sorttext",
    "id": 2600
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Comment timestamp  \nThe Comments API now let's you add a `timestamp` to each `Comment`. This timestamp is shown in the Comments widget and in the Comments view. By default, the timestamp is shown as a relative time (for example, \"2 weeks ago\"), but the user setting `comments.useRelativeTime` can be used to show an exact time instead. The hover of the timestamp will always be the exact time.",
    "url": "https://code.visualstudio.com/updates/v1_65#_comment-timestamp",
    "id": 2601
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### vscode-test package renamed to @vscode/test-electron  \nThe `vscode-test` package has been renamed to `@vscode/test-electron`. Extension authors should update the entry in their extension's `package.json` file `devDependencies`, if they are including that package. The [@vscode/test-electron](https://www.npmjs.com/package/@vscode/test-electron) package helps run integration tests for VS Code extensions. You can learn more at the [vscode-test repository](https://github.com/microsoft/vscode-test).",
    "url": "https://code.visualstudio.com/updates/v1_65#_vscode-test-package-renamed-to-@vscode/test-electron",
    "id": 2602
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Updated codicons  \nThe following new icons were added to our [codicon](https://code.visualstudio.com/api/references/icons-in-labels) library:  \n* `arrow-circle-down`\n* `arrow-circle-left`\n* `arrow-circle-right`\n* `arrow-circle-up`\n* `error-small`\n* `indent`\n* `layout-activitybar-left`\n* `layout-activitybar-right`\n* `layout-centered`\n* `layout-menubar`\n* `layout-panel-center`\n* `layout-panel-justify`\n* `layout-panel-left`\n* `layout-panel-right`\n* `layout-panel`\n* `layout-sidebar-left`\n* `layout-sidebar-right`\n* `layout-statusbar`\n* `layout`\n* `newline`\n* `record-small`\n* `target`  \n![Preview of updated icons](images/1_65/codicons.png)",
    "url": "https://code.visualstudio.com/updates/v1_65#_updated-codicons",
    "id": 2603
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Icon contribution point is now final  \nThe icon contribution point allow extensions to define a new icon by ID, along with a default icon. The icon ID can then be used by the extension (or any other extensions that depend on the extension) anywhere a `ThemeIcon` can be used `new ThemeIcon(\"iconId\")`, in Markdown strings (`$(iconId)`), and as icons in certain contribution points.  \nProduct icon themes can redefine the icon (if they know about the icon ID).  \n```json\n\"contributes\": {\n\"icons\": {\n\"distro-ubuntu\": {\n\"description\": \"Ubuntu icon\",\n\"default\": {\n\"fontPath\": \"./distroicons.woff\",\n\"fontCharacter\": \"\\\\E001\"\n}\n},\n\"distro-fedora\": {\n\"description\": \"Ubuntu icon\",\n\"default\": {\n\"fontPath\": \"./distroicons.woff\",\n\"fontCharacter\": \"\\\\E002\"\n}\n}\n}\n}\n```  \nIn the example above, an extension defines two new icon IDs `distro-ubuntu` and `distro-fedora`, along with default icon definitions. The icons are defined in an icon font at the given font character.",
    "url": "https://code.visualstudio.com/updates/v1_65#_icon-contribution-point-is-now-final",
    "id": 2604
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### File icon themes: Support for folder names in file associations  \nIn [file icon themes](https://code.visualstudio.com/api/extension-guides/file-icon-theme), the associations in `folderNames`, `folderNamesExpanded`, `fileNames`, and `fileExtensions` can now also contain a folder name:  \n```json\n\"fileNames\": {\n\"system/win.ini\": \"_win_ini_file\"\n},\n```  \n`system/win.ini` means that the association matches files called `win.ini` directly in a folder `system`.  \n```json\n\"fileExtensions\": {\n\"system/ini\": \"_ini_file\"\n},\n```  \n`system/ini` means that the association matches files called `*.ini` directly in a folder `system`.  \n```json\n\"folderNames\": {\n\".vscode/extensions\": \"_vscode_folder\"\n},\n```",
    "url": "https://code.visualstudio.com/updates/v1_65#_file-icon-themes:-support-for-folder-names-in-file-associations",
    "id": 2605
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Running remotely installed web extensions in VS Code for the Web with Codespaces  \nVS Code for the Web with Codespaces now supports running a remotely installed [web extension](https://code.visualstudio.com/api/extension-guides/web-extensions) in the web extension host. For example, if you have the [Vim](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim) extension installed in a GitHub Codespace (via configuration in a `devcontainer.json` file) then Vim will be loaded in the web extension host when you open the codespace in the browser. Please read our [Extension Host](https://code.visualstudio.com/api/advanced-topics/extension-host#preferred-extension-location) documentation for more information.  \n**Note:** There are currently known limitations regarding loading a web worker by such an extension. See [issue](https://github.com/microsoft/vscode/issues/144235) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_65#_running-remotely-installed-web-extensions-in-vs-code-for-the-web-with-codespaces",
    "id": 2606
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## Debugger extension authoring  \n### Support for \"important\" Output events  \nRecently, the Debug Adapter Protocol [added](https://code.visualstudio.com/updates/v1_63#_new-important-category-for-the-output-event) an `important` category for the `Output` event. This category marks events that should stand out and not go overlooked by the user. VS Code will now show a notification popup for messages with the `important` category. They will also still be logged to the Debug Console.",
    "url": "https://code.visualstudio.com/updates/v1_65#_support-for-important-output-events",
    "id": 2607
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Support for 'lazy' variables  \nSome variables are dynamic and require executing code to get the value. A debug adapter may not want to retrieve their full values automatically, since doing so could have side-effects or be expensive.  \nSome debug adapters have addressed this problem by representing the \"expensive variable\" as a placeholder object that the user needs to \"expand\" explicitly in order to fetch the value. VS Code's built-in js-debug uses this approach for JS/TS getters:  \n```ts\nclass Person {\nname = \"Danny\";\nget email(): string {\nreturn \"foo@example.bar\";\n}\nget address(): Address {\nreturn new Address();\n}\n}\nclass Address {\nstreet = \"Main Street\";\ncity = \"Zurich\";\n}\n```  \nThe following screencast shows that the intermediate object makes it difficult to understand the effective data structure:  \n<video src=\"images/1_65/lazy-before.mp4\" autoplay loop controls muted title=\"Reviewing property getter values without lazy evaluation\"></video>  \nIn this release, we have improved VS Code to render the intermediate object in a compact form with a **(...)** button for requesting the full value.  \n<video src=\"images/1_65/lazy-after.mp4\" autoplay loop controls muted title=\"Reviewing property getter values with lazy evaluation triggered by '(...)' button\"></video>  \nA debug adapter can request this new presentation style for a variable by adding a `VariablePresentationHint` with a `lazy` property ([see DAP additions](#debug-adapter-protocol)). If the client does not support the `lazy` flag, the variable will be shown as before.",
    "url": "https://code.visualstudio.com/updates/v1_65#_support-for-'lazy'-variables",
    "id": 2608
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Notebook aware document selectors  \nThe `vscode.DocumentSelector` type allows you to associate language features like **Go to Definition** to specific documents. This drives the UI and also decides if the corresponding provider is asked for results. We have added a new API proposal that allows extensions to also select notebook types. For example, `{ language: 'python', notebookType: 'jupyter-notebook'}` targets all python documents that are embedded in Jupyter notebooks. This is the [current proposal](https://github.com/microsoft/vscode/blob/8a3b1f4c4c24064273efb3417a5c2e229ba78481/src/vscode-dts/vscode.proposed.notebookDocumentSelector.d.ts) - give it a try and let us know what you think.",
    "url": "https://code.visualstudio.com/updates/v1_65#_notebook-aware-document-selectors",
    "id": 2610
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Output channel with custom language ID  \nThere are some extensions that are able to define token or syntax coloring and CodeLens features in their output channels, given that they are text documents (read-only) by themselves. Since all output channels share the same language ID, these customizations can be wrongly applied to other output channels. There was a feature request to create output channels with custom language IDs so that extension authors can define customizations by language. Hence in this milestone, we have introduced the [proposal](https://github.com/microsoft/vscode/blob/35ba35b799a85974079e4a90f59ae7e978ad3def/src/vscode-dts/vscode.proposed.outputChannelLanguage.d.ts#L21) to create an output channel with a custom language ID. Please try it out and give us feedback.",
    "url": "https://code.visualstudio.com/updates/v1_65#_output-channel-with-custom-language-id",
    "id": 2611
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### MarkdownString.baseUri  \nThe proposed `baseUri` property on `MarkdownString` lets you specify a base URI that relative links and images in Markdown are resolved relative to. This property behaves much like the [`<base>` element in HTML](https://developer.mozilla.org/docs/Web/HTML/Element/base).  \nIf the `baseUri` ends with `/`, it is considered a directory and relative paths in Markdown are resolved relative to that directory:  \n```ts\nconst md = new vscode.MarkdownString(`[link](./file.js)`);\nmd.baseUri = vscode.Uri.file('/path/to/dir/');\n// Here 'link' in the rendered Markdown resolves to '/path/to/dir/file.js'\n```  \nIf the `baseUri` is a file, relative paths in Markdown are resolved relative to the parent directory of that file:  \n```ts\nconst md = new vscode.MarkdownString(`[link](./file.js)`);\nmd.baseUri = vscode.Uri.file('/path/to/otherFile.js');\n// Here 'link' in the rendered Markdown resolves to '/path/to/file.js'\n```",
    "url": "https://code.visualstudio.com/updates/v1_65#_markdownstring.baseuri",
    "id": 2612
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n## New documentation  \n### Java GUI applications  \nThe new [Java GUI Applications](https://code.visualstudio.com/docs/java/java-gui) topic explains how to use the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) to develop JavaFX, AWT, and Swing application in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_65#_java-gui-applications",
    "id": 2613
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between February 1 2022 and February 28 2022):  \n* [Var Style](https://marketplace.visualstudio.com/items?itemName=allen.VarStyle) ([allen](https://marketplace.visualstudio.com/publishers/allen))\n* [helloworld-web-sample](https://marketplace.visualstudio.com/items?itemName=AndreyBelym-DXTestCafe.helloworld-web-sample) ([Andrey Belym](https://marketplace.visualstudio.com/publishers/AndreyBelym-DXTestCafe))\n* [asciidoctor.asciidoctor-vscode](https://marketplace.visualstudio.com/items?itemName=asciidoctor.asciidoctor-vscode) ([asciidoctor](https://marketplace.visualstudio.com/publishers/asciidoctor))\n* [Gitignore Adder](https://marketplace.visualstudio.com/items?itemName=beatrix.gitignore-adder) ([beatrix](https://marketplace.visualstudio.com/publishers/beatrix))\n* [gkauthentication-test](https://marketplace.visualstudio.com/items?itemName=branchcreation.gkauthentication-test) ([BranchCreation SLU](https://marketplace.visualstudio.com/publishers/branchcreation))\n* [Racket Helpers](https://marketplace.visualstudio.com/items?itemName=Calvin-LL.racket-helpers) ([Calvin-LL](https://marketplace.visualstudio.com/publishers/Calvin-LL))\n* [PHP Tools](https://marketplace.visualstudio.com/items?itemName=DEVSENSE.phptools-vscode) ([DEVSENSE](https://marketplace.visualstudio.com/publishers/DEVSENSE))\n* [Naninovel](https://marketplace.visualstudio.com/items?itemName=Elringus.naninovel) ([Elringus](https://marketplace.visualstudio.com/publishers/Elringus))\n* [Pitoco Extension](https://marketplace.visualstudio.com/items?itemName=feodrippe.pitoco-extension) ([Feodrippe](https://marketplace.visualstudio.com/publishers/feodrippe))\n* [feodrippe.feodrippe-helloworld-minimal-sample-test-web](https://marketplace.visualstudio.com/items?itemName=feodrippe.feodrippe-helloworld-minimal-sample-test-web) ([Feodrippe](https://marketplace.visualstudio.com/publishers/feodrippe))\n* [Simple React Snippets for Typescript](https://marketplace.visualstudio.com/items?itemName=fulin.react-snippets-typescript) ([Giovanni Fu Lin](https://marketplace.visualstudio.com/publishers/fulin))\n* [GitKraken Authentication](https://marketplace.visualstudio.com/items?itemName=gitkraken.gitkraken-authentication) ([GitKraken](https://marketplace.visualstudio.com/publishers/gitkraken))\n* [groog](https://marketplace.visualstudio.com/items?itemName=groogle.groog) ([groogle](https://marketplace.visualstudio.com/publishers/groogle))\n* [ModalKeys](https://marketplace.visualstudio.com/items?itemName=haberdashPI.vscode-modal-keys) ([haberdashPI](https://marketplace.visualstudio.com/publishers/haberdashpi))\n* [VDM VSCode](https://marketplace.visualstudio.com/items?itemName=jonaskrask.vdm-vscode) ([Jonas Rask](https://marketplace.visualstudio.com/publishers/jonaskrask))\n* [cis-algorithm](https://marketplace.visualstudio.com/items?itemName=kimjihu.cis-algorithm) ([kimjihu](https://marketplace.visualstudio.com/publishers/kimjihu))\n* [Markdown (Pandoc Flavored)](https://marketplace.visualstudio.com/items?itemName=ickc.vscode-markdown-it-pandoc) ([Kolen Cheung](https://marketplace.visualstudio.com/publishers/ickc))\n* [zyname - this is for testing and will be deleted soon](https://marketplace.visualstudio.com/items?itemName=leodevbro.zyidentifier) ([leodevbro](https://marketplace.visualstudio.com/publishers/leodevbro))\n* [Snippet Copy](https://marketplace.visualstudio.com/items?itemName=lumaxis.snippet-copy) ([Lukas Spie\u00df](https://marketplace.visualstudio.com/publishers/lumaxis))\n* [PHP import checker](https://marketplace.visualstudio.com/items?itemName=marabesi.php-import-checker) ([Marabesi](https://marketplace.visualstudio.com/publishers/marabesi))\n* [VSCode Language JSONata](https://marketplace.visualstudio.com/items?itemName=bigbug.vscode-language-jsonata) ([Markus Gutbrod](https://marketplace.visualstudio.com/publishers/bigbug))\n* [Babel JavaScript](https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel) ([Michael McDermott](https://marketplace.visualstudio.com/publishers/mgmcdermott))\n* [Create Project](https://marketplace.visualstudio.com/items?itemName=publictheta.vscode-create-project) ([Public Theta](https://marketplace.visualstudio.com/publishers/publictheta))\n* [Dynamic Theme](https://marketplace.visualstudio.com/items?itemName=rodydavis.vscode-dynamic-theme) ([Rody Davis](https://marketplace.visualstudio.com/publishers/rodydavis))\n* [Router Generator](https://marketplace.visualstudio.com/items?itemName=rodydavis.router-generator) ([Rody Davis](https://marketplace.visualstudio.com/publishers/rodydavis))\n* [Chimera Theme](https://marketplace.visualstudio.com/items?itemName=roydukkey.theme-chimera) ([roydukkey](https://marketplace.visualstudio.com/publishers/roydukkey))\n* [Qiita Markdown Preview](https://marketplace.visualstudio.com/items?itemName=ryokat3.vscode-qiita-markdown-preview) ([Ryoji Kato](https://marketplace.visualstudio.com/publishers/ryokat3))\n* [Kestrel](https://marketplace.visualstudio.com/items?itemName=SenseTime.kestrel) ([SenseTime](https://marketplace.visualstudio.com/publishers/SenseTime))\n* [Test token](https://marketplace.visualstudio.com/items?itemName=sevillal.test-token) ([sevillal](https://marketplace.visualstudio.com/publishers/sevillal))\n* [Sourcegraph](https://marketplace.visualstudio.com/items?itemName=sourcegraph.sourcegraph) ([Sourcegraph](https://marketplace.visualstudio.com/publishers/sourcegraph))\n* [Rewrap](https://marketplace.visualstudio.com/items?itemName=stkb.rewrap) ([stkb](https://marketplace.visualstudio.com/publishers/stkb))\n* [wav-preview](https://marketplace.visualstudio.com/items?itemName=sukumo28.wav-preview) ([sukumo28](https://marketplace.visualstudio.com/publishers/sukumo28))\n* [Pandoc](https://marketplace.visualstudio.com/items?itemName=taniguchi.pandoc) ([TANIGUCHI Masaya](https://marketplace.visualstudio.com/publishers/taniguchi))\n* [Hex Viewer](https://marketplace.visualstudio.com/items?itemName=tao-cumplido.hex-viewer) ([Tao Cumplido](https://marketplace.visualstudio.com/publishers/tao-cumplido))\n* [Time Link Bundle (Web version)](https://marketplace.visualstudio.com/items?itemName=time-link.timelink-vscode-web) ([Time Link](https://marketplace.visualstudio.com/publishers/time-link))\n* [DCC Websocket](https://marketplace.visualstudio.com/items?itemName=virgilsisoe.dcc-websocket) ([virgilsisoe](https://marketplace.visualstudio.com/publishers/virgilsisoe))\n* [VSC+](https://marketplace.visualstudio.com/items?itemName=Vrej.vscplus) ([Vrej](https://marketplace.visualstudio.com/publishers/Vrej))",
    "url": "https://code.visualstudio.com/updates/v1_65#_web-extensions",
    "id": 2614
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)",
    "url": "https://code.visualstudio.com/updates/v1_65#_issue-tracking",
    "id": 2615
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2022 Release (1.65)  \n### Pull requests  \nContributions to `vscode`:  \n* [@aminya (Amin Yahyaabadi)](https://github.com/aminya): fix: simplify regex expressions in tasks/common [PR #142899](https://github.com/microsoft/vscode/pull/142899)\n* [@Balastrong (Leonardo)](https://github.com/Balastrong)\n* Increased opacity in overload counter tooltip [PR #141828](https://github.com/microsoft/vscode/pull/141828)\n* Fixed element detection by checking fragment before and after decoding if necessary [PR #141848](https://github.com/microsoft/vscode/pull/141848)\n* [@BMBurstein (Baruch)](https://github.com/BMBurstein): Correct description of bracket guide setting [PR #143722](https://github.com/microsoft/vscode/pull/143722)\n* [@Bruce-Hopkins (Bruce Hopkins)](https://github.com/Bruce-Hopkins): Add user home variable [PR #141902](https://github.com/microsoft/vscode/pull/141902)\n* [@caioagiani (Caio Agiani)](https://github.com/caioagiani): Fix typos [PR #141959](https://github.com/microsoft/vscode/pull/141959)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr)\n* Replace languageId by languageSelector in all language feature registration functions [PR #143610](https://github.com/microsoft/vscode/pull/143610)\n* Allow getWorker function to return a promise [PR #143611](https://github.com/microsoft/vscode/pull/143611)\n* [@ChaseKnowlden](https://github.com/ChaseKnowlden): Update Lua Grammar [PR #142107](https://github.com/microsoft/vscode/pull/142107)\n* [@divinity76](https://github.com/divinity76): seems root requires --no-sandbox [PR #137125](https://github.com/microsoft/vscode/pull/137125)\n* [@efcoyote (coyote)](https://github.com/efcoyote): update to latest seti-ui version [PR #141931](https://github.com/microsoft/vscode/pull/141931)\n* [@enticies (enticies)](https://github.com/enticies): Fix error message typo [PR #142054](https://github.com/microsoft/vscode/pull/142054)\n* [@g-plane (Pig Fang)](https://github.com/g-plane): Add \"pnpm-lock.yaml\" to default file nesting patterns [PR #142375](https://github.com/microsoft/vscode/pull/142375)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Add optional languageId to window.createOutputChannel API (#19561) [PR #140876](https://github.com/microsoft/vscode/pull/140876)\n* Fix `testing.openTesting` setting text (#142306) [PR #142314](https://github.com/microsoft/vscode/pull/142314)\n* [@haykam821](https://github.com/haykam821): Prevent the image preview transparency background from being affected by scaling [PR #141667](https://github.com/microsoft/vscode/pull/141667)\n* [@heartacker](https://github.com/heartacker): add math snippet [PR #142697](https://github.com/microsoft/vscode/pull/142697)\n* [@icepaq (Anton)](https://github.com/icepaq): Autocomplete activation event onWebviewPanel [PR #141752](https://github.com/microsoft/vscode/pull/141752)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fix WebviewElement::streamToBuffer [PR #142288](https://github.com/microsoft/vscode/pull/142288)\n* Fix querying an extension by ID in extension view always renders stable version in extension editor [PR #143481](https://github.com/microsoft/vscode/pull/143481)\n* [@JJRcop (Jonathan Rubenstein)](https://github.com/JJRcop): Add VS 2022 to supported versions [PR #142667](https://github.com/microsoft/vscode/pull/142667)\n* [@LuanVSO (Luan Vitor Simi\u00e3o Oliveira)](https://github.com/LuanVSO)\n* fix psreadline not working with shell integration [PR #142211](https://github.com/microsoft/vscode/pull/142211)\n* Fix shellintegration.ps1 [PR #142217](https://github.com/microsoft/vscode/pull/142217)\n* [@michaelkuhn (Michael Kuhn)](https://github.com/michaelkuhn): Fix some Solarized colors [PR #142670](https://github.com/microsoft/vscode/pull/142670)\n* [@neeleshb (Neelesh Bodas)](https://github.com/neeleshb): Fix incorrect label for the \"goto previous problem\" [PR #143823](https://github.com/microsoft/vscode/pull/143823)\n* [@satokaz (Kazuyuki Sato)](https://github.com/satokaz): Decode header suggestions in Markdown path IntelliSense [PR #142392](https://github.com/microsoft/vscode/pull/142392)\n* [@SNDST00M (M.U.N.I.N)](https://github.com/SNDST00M): Add optional directory syntax in file icon themes [PR #140079](https://github.com/microsoft/vscode/pull/140079)\n* [@stefanhaller (Stefan Haller)](https://github.com/stefanhaller): Fix #142028 [PR #142930](https://github.com/microsoft/vscode/pull/142930)\n* [@surajteggi](https://github.com/surajteggi): Fix typo [PR #142185](https://github.com/microsoft/vscode/pull/142185)\n* [@thebinarysearchtree (Andrew Jones)](https://github.com/thebinarysearchtree): fix indentation [PR #141997](https://github.com/microsoft/vscode/pull/141997)\n* [@weartist (Han)](https://github.com/weartist): Implement multiLinePasteWarning in VSCode terminal\uff0cfix the #122683 [PR #141822](https://github.com/microsoft/vscode/pull/141822)\n* [@y-tsutsu (y-tsutsu)](https://github.com/y-tsutsu)\n* Commands display both translated names and original names in command palette. [PR #142524](https://github.com/microsoft/vscode/pull/142524)\n* fix action category [PR #142911](https://github.com/microsoft/vscode/pull/142911)\n* [@Yash621 (Yash Goel)](https://github.com/Yash621): fixed settings sync has duplicate logins [PR #142340](https://github.com/microsoft/vscode/pull/142340)\n* [@zardoy (Vitaly)](https://github.com/zardoy): Resolve correct link path for tsconfig.extends [PR #141062](https://github.com/microsoft/vscode/pull/141062)  \nContributions to `vscode-css-languageservice`:  \n* [@romainmenke (Romain Menke)](https://github.com/romainmenke)\n* add support for hwb() color function [PR #262](https://github.com/microsoft/vscode-css-languageservice/pull/262)\n* fix specificity for :has, :not, :is and :where [PR #263](https://github.com/microsoft/vscode-css-languageservice/pull/263)  \nContributions to `vscode-languageserver-node`:  \n* [@dsherret (David Sherret)](https://github.com/dsherret): feat: more descriptive error when childProcess.spawn fails [PR #888](https://github.com/microsoft/vscode-languageserver-node/pull/888)  \nContributions to `debug-adapter-protocol`:  \n* [@apupier (Aur\u00e9lien Pupier)](https://github.com/apupier): Add Debug Adapter for Apache Camel [PR #245](https://github.com/microsoft/debug-adapter-protocol/pull/245)\n* [@eshelyaron (Eshel Yaron)](https://github.com/eshelyaron): Add SWI-Prolog DAP implementation to adapters.md [PR #248](https://github.com/microsoft/debug-adapter-protocol/pull/248)\n* [@hyangah (Hyang-Ah Hana Kim)](https://github.com/hyangah): Update sdks.md * include go-dap [PR #241](https://github.com/microsoft/debug-adapter-protocol/pull/241)\n* [@lukaszsamson (\u0141ukasz Samson)](https://github.com/lukaszsamson): Add link to Elixir DAP implementation [PR #243](https://github.com/microsoft/debug-adapter-protocol/pull/243)\n* [@Ricbet (John)](https://github.com/Ricbet): Add OpenSumi to the Implementations tools [PR #247](https://github.com/microsoft/debug-adapter-protocol/pull/247)  \nContributions to `language-server-protocol`:  \n* [@zwpaper (Wei Zhang)](https://github.com/zwpaper): use language ID for consistence [PR #1409](https://github.com/microsoft/language-server-protocol/pull/1409)  \nContributions to `monaco-editor`:  \n* [@Dan1ve (Daniel Veihelmann)](https://github.com/Dan1ve): Make Vite sample code Firefox compatible [PR #2991](https://github.com/microsoft/monaco-editor/pull/2991)\n* [@philipturner (Philip Turner)](https://github.com/philipturner): Add `@noDerivative` modifier to Swift [PR #2957](https://github.com/microsoft/monaco-editor/pull/2957)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_65#_pull-requests",
    "id": 2616
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Workbench  \n### Local history  \nLocal history of files is now available in the **Timeline** view. Depending on the configured settings, every time you save an editor, a new entry is added to the list:  \n<video src=\"images/1_66/local-history.mp4\" autoplay loop controls muted title=\"Local history showing file saves, a rename, and undo entries\"></video>  \nEach local history entry contains the full contents of the file at the time the entry was created and in certain cases, can provide more semantic information (for example, indicate a refactoring).  \nFrom an entry you can:  \n* Compare the changes to the local file or previous entry.\n* Restore the contents.\n* Delete or rename the entry.  \nThere are new global commands to work with local history:  \n* `workbench.action.localHistory.create` - Create a new history entry for the active file with a custom name.\n* `workbench.action.localHistory.deleteAll` - Delete all history entries across all files.\n* `workbench.action.localHistory.restoreViaPicker` - Find a history entry to restore across all files.  \nThese commands don't have default keybindings but you can add your own [keyboard shortcuts](https://code.visualstudio.com/docs/getstarted/keybindings).  \nThere are also new settings to work with local history:  \n* `workbench.localHistory.enabled` - Enable or disable local history (default: `true`).\n* `workbench.localHistory.maxFileSize` - File size limit when creating a local history entry (default: `256 KB`).\n* `workbench.localHistory.maxFileEntries` - Local history entries limit per file (default: `50`).\n* `workbench.localHistory.exclude` - Glob patterns for excluding certain files from local history.\n* `workbench.localHistory.mergeWindow` - Interval in seconds during which further changes are added to the last entry in local file history (default `10s`).  \nA new filter action in the Timeline view toolbar allows you to enable or disable individual providers:  \n![Timeline filter drop down with Git History unchecked and Local History checked](images/1_66/timeline-filter.png)  \n**Note:** Local history entries are stored in different locations depending on your use of VS Code. When opening local files, the entries are persisted in the local user data folder and when opening remote files, they will be stored on the remote user data folder. When no file system is available (for example, in certain cases when using VS Code for Web), entries are stored into IndexedDB.",
    "url": "https://code.visualstudio.com/updates/v1_66#_local-history",
    "id": 2617
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Settings editor  \n**Language filter**  \nUsers can now type `@lang:languageId` in the Settings editor search box to view and edit all settings that can be configured for the language with ID `languageId`. This way, users can view language-specific settings, also known as language overrides.  \nNote that these overrides remain configured until explicitly reset by clicking in the gear icon and resetting the setting.  \nThe short video below has the language filter set to `@lang:css` to display all possible CSS language override settings.  \n<video src=\"images/1_66/settings-editor-lang-css-settings.mp4\" autoplay loop controls muted title=\"Modification of a boolean CSS language-specific setting to turn off CodeLens in the Diff editor\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_  \n**Workspace and Folder settings preservation**  \nWorkspace and folder settings in the Settings editor are now preserved until manually reset by the user. This change helps the case where the user wants to explicitly specify a workspace setting value that is equal to the default value of a setting, but is different from the user setting value. Previously, users had to open the workspace settings JSON file to set this value.  \nBelow the editor tab size is set in Settings editor **Workspace** tab and it is automatically added to the workspace's `settings.json` file.  \n<video src=\"images/1_66/settings-editor-workspace-override.mp4\" autoplay loop controls muted title=\"The editor tab size being set and reset via the Settings editor Workspace tab item\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_66#_settings-editor",
    "id": 2618
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Primary notification buttons  \nThe first button of a notification now appears with a primary color to distinguish from other buttons. This follows the same patterns as dialogs.  \n![Notification where first button is displayed as green primary color](images/1_66/notification.png)  \n_Theme: [GitHub Dark](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_66#_primary-notification-buttons",
    "id": 2619
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### New context keys for editors  \nThere are new context keys indicating whether an editor is the first or last in an editor group:  \n* `activeEditorIsFirstInGroup`- Whether the active editor is the first one in its group.\n* `activeEditorIsLastInGroup`- Whether the active editor is the last one in its group.  \nThese context keys can be used to conditionally enable keyboard shortcuts using [when clauses](https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts).",
    "url": "https://code.visualstudio.com/updates/v1_66#_new-context-keys-for-editors",
    "id": 2620
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Default binary editor  \nA new setting, `workbench.editor.defaultBinaryEditor`, lets you circumvent the binary file warning and automatically open the editor type of your choosing when a binary file is detected. You can select the default binary editor ID from a dropdown in the Settings editor or via IntelliSense in `settings.json`.",
    "url": "https://code.visualstudio.com/updates/v1_66#_default-binary-editor",
    "id": 2621
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Smoother authentication experiences  \nYou may notice smoother authentication flows of both GitHub and Microsoft.  \n* For GitHub authentication, we've removed the initial **Continue** page so your log in experience requires one less step.\n* For Microsoft authentication, we try to minimize the number of times you are sent out of VS Code to log in, if you've already logged in with Microsoft for Settings Sync or another extension.",
    "url": "https://code.visualstudio.com/updates/v1_66#_smoother-authentication-experiences",
    "id": 2622
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Install pre-release and normal extensions together from CLI  \nVS Code now supports installing pre-release and normal extensions together from the command line. For example, the following command line instruction will install the pre-release version of `GitHub.vscode-pull-request-github` extension and release version of `GitHub.remotehub` extension:  \n```bash\ncode --install-extension GitHub.vscode-pull-request-github@prerelease --install-extension GitHub.remotehub\n```",
    "url": "https://code.visualstudio.com/updates/v1_66#_install-pre-release-and-normal-extensions-together-from-cli",
    "id": 2623
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Improved platform specific extension updates  \nVS Code now supports updating a platform specific extension to a more specific target platform version. For example, if you are on Windows 64-bit and have installed the **C/C++** extension for Windows 32-bit and the Marketplace has the extension with same version for Windows 64-bit, VS Code will automatically update the extension to the 64-bit version.",
    "url": "https://code.visualstudio.com/updates/v1_66#_improved-platform-specific-extension-updates",
    "id": 2624
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Audio cue improvements  \nThe new setting `audioCues.volume` (0-100, default is 50) can be used to control the volume of audio cues. There is also an updated audio cue for folded regions.",
    "url": "https://code.visualstudio.com/updates/v1_66#_audio-cue-improvements",
    "id": 2625
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### New names for Side Panel and Side Bar  \nTwo releases ago, we introduced the [Side Panel](https://code.visualstudio.com/updates/v1_64#_new-side-panel). At that time, we removed the capability to move the bottom panel that contains the terminal to the side in favor of new coherent commands. After listening to user feedback, we determined that there were important workflows that this decision broke and we decided to revert that change.  \nThis left us with two panels, the panel and side panel, both of which could live on the side of the workbench. To account for this and better reflect the direction of the new side panel, we have decided to update the naming of both the Side Bar and Side Panel. The Side Bar will now be referred to as the Primary Side Bar in the UI, while the Side Panel will now be referred to as the Secondary Side Bar.  \n* **Side Bar** -> **Primary Side Bar**\n* **Side Panel** -> **Secondary Side Bar**  \nThese names will be reflected in menus and commands throughout the editor; however, no command IDs have been changed to prevent breaking existing keybindings.  \n![Command Palette drop down displaying both primary and secondary focus side bar commands](images/1_66/focus-side-bar-commands.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_new-names-for-side-panel-and-side-bar",
    "id": 2626
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Reduce motion mode  \nThe workbench now supports rendering with reduced animations when the OS reduced motion setting is enabled. This can be overridden or disabled with the `workbench.reduceMotion` setting (values are `on`, `off`, or the default `auto`).",
    "url": "https://code.visualstudio.com/updates/v1_66#_reduce-motion-mode",
    "id": 2627
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Add a comment discoverability  \nNow, when you hover over any part of a line where a comment can be added on, the **\"+\"** symbol is shown in the left gutter.  \n<video src=\"images/1_66/comment-plus.mp4\" autoplay loop controls muted title=\"Line hover showing comment plus button\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_66#_add-a-comment-discoverability",
    "id": 2628
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Comment accessibility improvements  \nThere are several comments accessibility improvements:  \n* A command **Add Comment on Current Line** for creating a comment if you're in a commentable range.\n* An aria label for comment threads, which includes the number of comments and the label of the thread.\n* The **Go to Next Comment Thread** command focuses into the comment thread control.\n* A new **Go to Previous Comment Thread** command.\n* Keyboard shortcuts for the next and previous commands: `Alt+F9` and `Shift+Alt+F9`.",
    "url": "https://code.visualstudio.com/updates/v1_66#_comment-accessibility-improvements",
    "id": 2629
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Terminal  \n### Display all find matches  \nWhen searching in the terminal, all instances of the search term will now be highlighted. The currently selected match also has a specific highlight, which can be customized separately.  \nYou can fine tune the appearance of highlight colors via the color customizations prefixed by `terminal.findMatch`.  \n![A yellow border is shown around all matches except for the currently selected one, which has a red border.](images/1_66/find-matches.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_display-all-find-matches",
    "id": 2630
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Scroll bar annotations  \nAnnotations now appear in the scroll bar of the terminal to indicate points of interest in the buffer.  \nFor example, find results have corresponding annotations in the scroll bar.  \n![The terminal scroll bar displaying brown annotations for find matches within a file](images/1_66/find-scrollbar.png)  \nWhen the preview feature of [shell integration](#terminal-shell-integration) is enabled, an annotation is displayed in the scroll bar for each command that gets run.  \n![Commands are run and corresponding annotations appear in the scroll bar](images/1_66/command-annotations.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_scroll-bar-annotations",
    "id": 2631
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Command navigation improvements  \nA little known feature that's been around for a while is the ability to quickly navigate between commands in the terminal. Originally this was based on when `Enter` was pressed but now when shell integration is enabled, it will be upgraded to use the shell integration knowledge to more reliably identify the correct lines. Additionally, UI feedback is now shown when jumping between commands.  \n<video src=\"images/1_66/command-navigation.mp4\" autoplay loop controls muted title=\"A rectangle is briefly displayed around the command being navigated to\"></video>  \nThis feature can be accessed via the following keybindings:  \n* macOS: `Cmd+Up/Down`\n* Linux/Windows: `Ctrl+Up/Down` (new)  \nThe `Shift` key can be held down to make selections between commands in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_66#_command-navigation-improvements",
    "id": 2632
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Copied text retains HTML styling  \nTo copy rich text from the terminal, run the **Terminal: Copy Selection as HTML** command or use the terminal context menu entry **Copy as HTML**.",
    "url": "https://code.visualstudio.com/updates/v1_66#_copied-text-retains-html-styling",
    "id": 2633
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Minimum contrast ratio default changed  \nThe `terminal.integrated.minimumContrastRatio` setting has been around for a while and dynamically changes the foreground color in the terminal based on the background color. This release, we changed the default to `4.5` (WCAG AA) to make sure the terminal is accessible regardless of the theme. If this ends up causing problems with your colors, you can disable the feature by setting `\"terminal.integrated.minimumContrastRatio\": 1`.",
    "url": "https://code.visualstudio.com/updates/v1_66#_minimum-contrast-ratio-default-changed",
    "id": 2634
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Source Control  \n### Source Control Repositories view  \nPreviously, the repositories in the **Source Control Repositories** view have been sorted as they were being discovered when opening a folder/workspace with multiple repositories. This was problematic as the discovery order can vary and repositories appeared to be in random order. This milestone, repositories are always sorted by name in the **Source Control Repositories** view.",
    "url": "https://code.visualstudio.com/updates/v1_66#_source-control-repositories-view",
    "id": 2635
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Editor  \n### Quick suggestions as inline completions  \nThe `editor.quickSuggestions` setting now accepts `inline` as configuration value. When set to `inline`, quick suggestions (IntelliSense) don't display the suggestions widget when you type but show completions as ghosted text.  \n<video src=\"images/1_66/inline-quick-suggest.mp4\" autoplay loop controls muted title=\"Inline completions show and update as you type\"></video>  \n_Theme: [GitHub Light](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_66#_quick-suggestions-as-inline-completions",
    "id": 2636
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Snippet variables for cursor index  \nThere are new snippet variables: `$CURSOR_INDEX` and `$CURSOR_NUMBER`. They evaluate to the index of the respective cursor. The latter starts at 1, the former at 0. The power of these variables is in its combination with multiple cursors.  \nFor example, the snippet below will add an ordered list item for each cursor:  \n```json\n\"ordered_list\": {\n\"scope\": \"markdown\",\n\"prefix\": \"ol\",\n\"body\": [\n\"$CURSOR_NUMBER. $0\"\n],\n\"description\": \"Add ordered list\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_66#_snippet-variables-for-cursor-index",
    "id": 2637
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Updated source control decorators  \nIn order to make the source control decorators more visible for accessibility, we've added a new pattern for modified lines and increased the contrast for all decorators.  \n<video src=\"images/1_66/scm.mp4\" autoplay loop controls muted title=\"Example of the modified decorator for source control\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_66#_updated-source-control-decorators",
    "id": 2638
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Bracket pair colorization  \nThere is a new setting `editor.bracketPairColorization.independentColorPoolPerBracketType`. When set to `true`, each bracket type (`{` ... `}` or `(` ... `)`) will use its own color pool for colorization. Thus, nested brackets of different types will have the same color.  \n![A screenshot that demonstrates independent color pools turned on](images/1_66/independentColorPoolPerBracketTypeEnabled.png)  \n![A screenshot that demonstrates independent color pools turned off](images/1_66/independentColorPoolPerBracketTypeDisabled.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_bracket-pair-colorization",
    "id": 2639
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Improved language detection  \nLast iteration we added the setting `workbench.editor.historyBasedLanguageDetection` to configure whether to make use of a new language detection strategy that takes into consideration the file types you have opened. This setting is now enabled by default, and a new setting `workbench.editor.preferHistoryBasedLanguageDetection` was added to give more priority to the results from this strategy.",
    "url": "https://code.visualstudio.com/updates/v1_66#_improved-language-detection",
    "id": 2640
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## VS Code for the Web  \n### Drag and drop folders  \nYou can now drag and drop local files and folders into a browser window opened on [vscode.dev](https://vscode.dev) or [insiders.vscode.dev](https://insiders.vscode.dev) with a browser that supports the [web file system access API](https://developer.mozilla.org/docs/Web/API/File_System_Access_API) to access the contents. This works both when dropping over the editor area as well as the File Explorer.  \n<video src=\"images/1_66/web-dnd.mp4\" autoplay loop controls muted title=\"Drop folder into vscode.dev\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_66#_drag-and-drop-folders",
    "id": 2641
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Remote Repositories  \n**Extension refactoring**  \nPreviously, the Azure Repos extension depended directly on the GitHub Repositories extension. Azure Repos and GitHub Repositories now depend on a common extension, [Remote Repositories](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories), which supports common workflows across GitHub and Azure Repos. All APIs previously exposed by the GitHub Repositories extension are now exposed by Remote Repositories.  \n**Reminder to sync repository**  \nWhen you reopen a repository with uncommitted changes, by default Remote Repositories does not display the latest version of your repository. We now display a dialog to manually sync your repository so that your repository stays up to date with what's on GitHub or Azure Repos. You can control this dialog using the `remoteHub.uncommittedChangesOnEntry` setting.  \n![Reminder to sync your repository](images/1_66/sync-dialog.png)  \n_Theme: [One Monokai](https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai)_  \n**Azure Repos**  \nThis milestone we are enabling the capability to edit and commit changes to repositories that are hosted in [Azure Repos](https://learn.microsoft.com/azure/devops/repos). We have also added basic functionality to create, update, and open pull requests for Azure Repos.",
    "url": "https://code.visualstudio.com/updates/v1_66#_remote-repositories",
    "id": 2642
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Notebooks  \n### Find decorations on scroll bar  \nThe Find results in notebooks will now be rendered in the scroll bar:  \n<video src=\"images/1_66/notebook-find-scrollbar.mp4\" autoplay loop controls muted title=\"Find decorations rendered in the scroll bar\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_66#_find-decorations-on-scroll-bar",
    "id": 2643
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Move focus to the interactive window  \nThere are two new commands for placing focus in the interactive window.  \n* `interactive.input.focus` - Move focus to the input editor in the interactive window.\n* `interactive.history.focus` - Move focus to history in interactive window.  \nThese commands don't have default keybindings but you can add your own [keyboard shortcuts](https://code.visualstudio.com/docs/getstarted/keybindings).",
    "url": "https://code.visualstudio.com/updates/v1_66#_move-focus-to-the-interactive-window",
    "id": 2644
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Debugging  \n### JavaScript debugging  \nThe JavaScript debugger now supports collecting and visualizing heap profiles. Heap profiles allow you to see where and how much memory is allocated over time. These have been added as an option in the **Debug: Take Performance Profile** command, which is also accessible via a record \u23fa button in the CALL STACK view.  \n![Example of the Flame Chart visualizer showing a memory profile for vscode. One cell is hovered over, showing that 33KB of memory was allocated in \"ipc.ts\".](images/1_66/js-debug-memory-profile.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_javascript-debugging",
    "id": 2645
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Languages  \n### CSS formatter  \nThe built-in CSS extension now ships with a formatter. The formatter works with CSS, LESS and SCSS. It is implemented by the [JS Beautify library](https://github.com/beautify-web/js-beautify) and comes with the following settings:  \n* `css.format.enable` - Enable/disable default CSS formatter.\n* `css.format.newlineBetweenRules` - Separate rulesets by a blank line.\n* `css.format.newlineBetweenSelectors` - Separate selectors with a new line.\n* `css.format.spaceAroundSelectorSeparator` - Ensure a space character around selector separators '>', '+', '~' (for example, `a > b`).  \nThe same settings also exist for `less` and `scss`.",
    "url": "https://code.visualstudio.com/updates/v1_66#_css-formatter",
    "id": 2646
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### JavaScript semantic highlighting in HTML  \nWe've aligned the semantic highlighting of JavaScript source in HTML files with what you see in normal `.js` files.  \nNot only does this make code colors more consistent, it also adds some important semantic information that was missing before, such as highlighting readonly types.",
    "url": "https://code.visualstudio.com/updates/v1_66#_javascript-semantic-highlighting-in-html",
    "id": 2647
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### TypeScript 4.6.3  \nVS Code now bundles TypeScript 4.6.3. This minor update fixes a [few important bugs](https://github.com/microsoft/TypeScript/issues?q=is%3Aissue+milestone%3A%22TypeScript+4.6.3%22+is%3Aclosed).",
    "url": "https://code.visualstudio.com/updates/v1_66#_typescript-4.6.3",
    "id": 2648
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Markdown shorthand reference links are now clickable  \nMarkdown lets you can create links using a shorthand syntax in cases where the link text matches the link definition ID. For example, `[my fancy link]`, uses the `my fancy link` link definition (for example, `[my fancy link]: https://example.com`). These shorthand links are now clickable in VS Code's editor:  \n<video src=\"images/1_66/markdown-ref-link.mp4\" autoplay loop controls muted title=\"Clicking a shorthand link in a Markdown file\"></video>  \nIn the editor, clicking these links navigates to the link definition. In the Markdown preview, the links instead navigate to the link destination.",
    "url": "https://code.visualstudio.com/updates/v1_66#_markdown-shorthand-reference-links-are-now-clickable",
    "id": 2649
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### reStructuredText grammar  \nThere is now a built-in extension for [reStructuredText](https://docutils.sourceforge.io/rst.html) (rst) file syntax highlighting.  \n![reStructuredText example showing syntax highlighting](images/1_66/rst-sample.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_restructuredtext-grammar",
    "id": 2650
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Contributions to extensions  \n### Python  \n**Changes to the interpreter display in the Status bar**  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension, in order to be consistent with other languages, moved the selected Python interpreter information towards the right side in the Status bar beside the **Python** language status item. With the intention of cleaning up the Status bar, it's now only displayed when a Python or a `settings.json` file is currently open.  \n![Python interpreter information displayed towards the right of the Status bar](images/1_66/active-interpreter-display.png)  \n**New Python File command**  \nThere's now two faster ways to create empty Python files: through a new command called **Python: New Python File**, or through the **New File...** item on the [Get Started page](https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_getting-started).  \n**Pylint extension**  \nThere is now a new Microsoft [Pylint](https://marketplace.visualstudio.com/items?itemName=ms-python.pylint) extension for linting using [pylint](https://pypi.org/project/pylint). This extension utilizes the [Language Server Protocol](https://microsoft.github.io/language-server-protocol) to provide linting support.  \nThe Pylint extension provides additional configuration to adjust the severity levels of the issues reported via `pylint`.  \n```js\n{\n\"convention\": \"Information\",\n\"error\": \"Error\",\n\"fatal\": \"Error\",\n\"refactor\": \"Hint\",\n\"warning\": \"Warning\",\n\"info\": \"Information\",\n\"W0611\": \"Error\",\n\"unused-import\": \"Error\"\n}\n```  \nNote: You may see two entries for the same problem in the **Problems** panel if you also have Pylint enabled in the Python extension. You can disable the built-in linting functionality by setting `\"python.linting.pylintEnabled\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_66#_python",
    "id": 2651
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Jupyter  \nThere were several improvements to the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension this milestone.  \n**Kernel Support**  \nKernel startup was improved with:  \n* Support for more [conda](https://docs.conda.io) environments.\n* Support for `.env` files on all platforms.  \n**Data Viewer**  \nNamed indexes for DataFrames and Series are now supported in the Data Viewer.  \n![Named indexes support in Jupyter extension Data Viewer](images/1_66/named-index.png)  \n**New Jupyter notebook**  \nCreation of new Jupyter notebooks is now consolidated in the **New File...** menu.  \n![New File... drop down with option to create a new Jupyter notebook](images/1_66/new-notebook.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_jupyter",
    "id": 2652
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nFeature highlights in 1.66 include:  \n* \"Open in Dev Container\" badge - Direct users of your repo to reopen in a custom development container.\n* The Remote - SSH extension can now connect to remote Apple Silicon/M1/ARM64 machines.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_66.md).",
    "url": "https://code.visualstudio.com/updates/v1_66#_remote-development",
    "id": 2653
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.40.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0400) release of the extension to see the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_66#_github-pull-requests-and-issues",
    "id": 2654
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Preview features  \n### Terminal shell integration  \nShell integration continued to see more improvements this release mainly in the form of reliability and improvements to the decorations described in the [Terminal](#terminal) section above.  \nHere are the highlights:  \n* Command decorations are now shown in the scroll bar, similar to the editor.\n* Command decorations should be restored across window reloads (or detach/attach).\n* Better tracking of commands when resizing the terminal on Windows.\n* Improved handling of the **Terminal: Clear** VS Code command and `clear` shell command.\n* `zsh` right prompt support.\n* Handle more formats of bash's `$PROMPT_COMMAND` variable.\n* Support `pwsh` when PSReadLine is not enabled.\n* Shell initialization scripts can now opt out of shell integration by unsetting the `$VSCODE_SHELL_INTEGRATION` variable if there are known issues or they need special handling, even when the setting is enabled.",
    "url": "https://code.visualstudio.com/updates/v1_66#_terminal-shell-integration",
    "id": 2655
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### TypeScript 4.7 support  \nThis update includes initial support for the upcoming TypeScript 4.7 release. See the [TypeScript 4.7 iteration plan](https://github.com/microsoft/TypeScript/issues/48027) for more details on what the TypeScript team is currently working on.  \nTo start using the TypeScript 4.7 nightly builds, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).",
    "url": "https://code.visualstudio.com/updates/v1_66#_typescript-4.7-support",
    "id": 2656
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Explorer file nesting  \nThis iteration we continued to work on support for file nesting in the Explorer. As part of this work, we polished support for moving, renaming, and deleting nested files, and added the setting `explorer.experimental.fileNesting.operateAsGroup` to configure whether edits to a nesting parent should be applied to its children as well.  \nAdditionally, we extended the configuration language for file nesting to include more expansion patterns. Previously `$(capture)` in a child pattern would be expanded to the text consumed by a `*` in the parent pattern. Now, there is additional support for `$(basename)`, `$(extname)`, and `$(dirname)` in patterns. This enables patterns such as `* -> $(basename).*.$(dirname)` to nest all files with \"added segments\" under a single base file.",
    "url": "https://code.visualstudio.com/updates/v1_66#_explorer-file-nesting",
    "id": 2657
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Extension authoring  \n### Notebook-aware document selectors  \nWe have finalized an addition to the `vscode.DocumentSelector` type. This type allows you to associate language features like **Go to Definition** to specific documents, it drives the UI, and also decides if the corresponding provider is asked for results. We have added a new property that allows extensions to narrow down on notebook types. For example, `{ language: 'python', notebookType: 'jupyter-notebook'}` targets all python documents that are embedded in Jupyter notebooks.",
    "url": "https://code.visualstudio.com/updates/v1_66#_notebook-aware-document-selectors",
    "id": 2658
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Inlay hints can have edits  \nThe `InlayHint` type can now have an optional, lazy [textEdits](https://github.com/microsoft/vscode/blob/a4aa4127986fb44c52732ef85e6224093e2d8b0a/src/vscode-dts/vscode.d.ts#L4700-L4710) property. Inlay hints that have edits set to them will apply them on double-click. The `textEdits` should be used to make the edits that are needed to make the inlay hint obsolete. For example, double clicking a hint representing an inferred type should insert that type annotation.",
    "url": "https://code.visualstudio.com/updates/v1_66#_inlay-hints-can-have-edits",
    "id": 2659
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Output channel with custom language ID  \nIn this milestone, we have finalized the [createOutputChannel API](https://github.com/microsoft/vscode/blob/dc2f5d8dd1790ac4fc6054e11b44e36884caa4be/src/vscode-dts/vscode.d.ts#L9415) to create an output channel with custom language ID. This will allow you to contribute token or syntax coloring and CodeLens features to your Output channel by passing a language ID.",
    "url": "https://code.visualstudio.com/updates/v1_66#_output-channel-with-custom-language-id",
    "id": 2660
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Color theme kind: High Contrast Light  \n[Color themes](https://code.visualstudio.com/api/references/contribution-points#contributes.themes) can now specify `hc-light` as base theme (`uiTheme`). The base theme is used for all colors not defined by the color theme.  \nIn the VS Code API, [ColorTheme.kind](https://code.visualstudio.com/api/references/vscode-api#ColorTheme) can now also have value `HighContrastLight`.",
    "url": "https://code.visualstudio.com/updates/v1_66#_color-theme-kind:-high-contrast-light",
    "id": 2661
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### High Contrast Light theme for color contributions  \n[Color contributions](https://code.visualstudio.com/api/references/contribution-points#contributes.colors) can now also define a High Contrast Light theme (`highContrastLight`). If not specified, the `light` color will be used as default.",
    "url": "https://code.visualstudio.com/updates/v1_66#_high-contrast-light-theme-for-color-contributions",
    "id": 2662
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### NODE_MODULE_VERSION and Node.js API update  \nFor extension authors using native node modules, this release bumps the Node.js version from `14.16.0` to `16.13.0`, which might have an impact on your module compilation depending on which API abstraction layer is used.  \n|                                                | Desktop | Remote |\n| ---------------------------------------------- | ------- | ------ |\n| NODE_MODULE_VERSION / process.versions.modules | 101     | 93     |\n| Node-API / process.versions.napi               | 8       | 8      |",
    "url": "https://code.visualstudio.com/updates/v1_66#_node_module_version-and-node.js-api-update",
    "id": 2663
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Tree drag and drop API  \nWith the newly finalized [TreeDragAndDropController](https://github.com/microsoft/vscode/blob/dc2f5d8dd1790ac4fc6054e11b44e36884caa4be/src/vscode-dts/vscode.d.ts#L9813-L9871) API, extension-contributed tree views can support drag and drop. The [tree view sample](https://github.com/microsoft/vscode-extension-samples/blob/main/tree-view-sample/src/testViewDragAndDrop.ts) has an example of how to use this API.",
    "url": "https://code.visualstudio.com/updates/v1_66#_tree-drag-and-drop-api",
    "id": 2664
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Debugger extension authoring  \n### Support for CompletionItem.detail  \nLast month, the Debug Adapter Protocol added a `detail` property to the `CompletionItem` object. This property is now supported in VS Code. You will see the detail in the suggest widget in the Debug Console.  \n![Debug Console example displaying detail field](images/1_66/debug-detail.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_support-for-completionitem.detail",
    "id": 2665
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Notebook document change events  \nThere is a new proposal for notebook document change events: it is available as [notebookDocumentEvents](https://github.com/microsoft/vscode/blob/9d2324412916035d7a955150ac1774d5b25e265a/src/vscode-dts/vscode.proposed.notebookDocumentEvents.d.ts) and contains two events:  \n* `vscode.workspace.onDidSaveNotebookDocument` fires whenever a notebook has been saved.\n* `vscode.workspace.onDidChangeNotebookDocument` fires whenever a notebook has changed. For example, when cells were added or removed, cells themselves changed, or metadata changed.",
    "url": "https://code.visualstudio.com/updates/v1_66#_notebook-document-change-events",
    "id": 2667
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Tabs API shape finalization  \nThe [tabs API](https://github.com/microsoft/vscode/blob/e0df95f34b340211e6d6375c603d16e61b34129b/src/vscode-dts/vscode.proposed.tabs.d.ts) is approaching finalization next milestone and is currently in a state where the shape will remain stable with little to no changes. The April 2022 iteration will be the last chance to provide feedback regarding the shape and features of this API. Feedback can be provided via GitHub [issues](https://github.com/microsoft/vscode/issues). The tabs API allows for the reading of open tabs, their locations, and closing them.",
    "url": "https://code.visualstudio.com/updates/v1_66#_tabs-api-shape-finalization",
    "id": 2668
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Inline Completions  \nWe continued working on inline completions to prepare for finalization in the next couple of releases.\nInline completions can now be used to suggest snippets or text-replacements (previously, only text-insertions were supported).",
    "url": "https://code.visualstudio.com/updates/v1_66#_inline-completions",
    "id": 2669
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Drop into editor  \nThe proposed [text editor drop API](https://github.com/microsoft/vscode/blob/bfc026b97a1c28d8288aa2510c066d03e5bcde54/src/vscode-dts/vscode.proposed.textEditorDrop.d.ts) lets extensions handle drops into text editors. These drop events can come from within VS Code\u2014such as dragging a file from VS Code's Explorer into a text editor\u2014or can be generated by dropping a file from your operating system into VS Code.  \n<video src=\"images/1_66/proposal-drop-into-editor.mp4\" autoplay loop controls muted title=\"Creating a link in a Markdown file using the proposed drop into editor API\"></video>  \nTo try the new API, you must set `\"workbench.experimental.editor.dragAndDropIntoEditor.enabled\": true`. After enabling this, you can then drop into the editor by holding down `Shift` while dragging and dropping.  \nWe've included experimental support for generating links when you drop into a Markdown file. You can also [see the Markdown extension's source](https://github.com/microsoft/vscode/blob/e6e907e721131329dad0d4327605ed356a381d44/extensions/markdown-language-features/src/features/dropIntoEditor.ts#L11) for an example of the API in use.",
    "url": "https://code.visualstudio.com/updates/v1_66#_drop-into-editor",
    "id": 2670
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Resolved/unresolved comments  \nThere is a new proposal for setting a [resolved or unresolved state](https://github.com/microsoft/vscode/blob/cc00f75d029dad12694b355578a31720619ec7d1/src/vscode-dts/vscode.proposed.commentsResolvedState.d.ts#L10-L17) on comment threads. Comment threads that specify a state will be given additional UX treatment.",
    "url": "https://code.visualstudio.com/updates/v1_66#_resolved/unresolved-comments",
    "id": 2671
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Engineering  \n### Electron 17 update  \nIn this milestone, we are excited to ship with Electron v17 in VS Code. This is a major update from our previous adoption of Electron v13 and takes advantage of the [process reuse architecture](https://github.com/electron/electron/issues/18397) from Electron. Over the past year, we have been reimplementing and gradually rolling out changes to some of our core services with respect to their interaction and lifetime associated with the workbench in preparation for this new architecture:  \n* [File Watcher](https://github.com/microsoft/vscode/issues/132282)\n* [Integrated Terminal](https://github.com/microsoft/vscode/issues/117257)\n* [Extension host](https://github.com/microsoft/vscode/issues/123592)\n* [Search](https://github.com/microsoft/vscode/issues/118200)  \nSpecial thanks to everyone involved with this effort, also thanks to the community for self-hosting on Insiders and providing feedback so we can confidently ship this update.  \n**What does this change mean for VS Code users?**  \nOperations like switching workspaces and reloading workspaces should now be faster. With this update, we also bump our Chromium version to 98.0.4758.109 and Nodejs version to 16.13.0.  \n**What's next?**  \nWe will continue Electron version adoption under their new [release cadence](https://www.electronjs.org/blog/8-week-cadence). We are also actively working towards [sandboxing the workbench](https://github.com/microsoft/vscode/issues/92164) and the next step is to improve the communication channel between the [Node.js hosted service and a sandboxed workbench](https://github.com/microsoft/vscode/issues/131798), which will allow us to further simplify the new architecture.",
    "url": "https://code.visualstudio.com/updates/v1_66#_electron-17-update",
    "id": 2672
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### RPM package requirements list improvement  \nWe now calculate the dependencies needed for the rpm packages as part of our [build process](https://github.com/microsoft/vscode/issues/17142) inspired by the work done in [Chromium](https://chromium.googlesource.com/chromium/src/+/master/chrome/installer/linux/rpm). This allows us to provide an up-to-date dependency list when adopting newer runtimes or native modules. We will also introduce a similar change to our debian packages in the upcoming milestone.",
    "url": "https://code.visualstudio.com/updates/v1_66#_rpm-package-requirements-list-improvement",
    "id": 2673
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Support out-of-band releases for built-in extensions  \nThose built-in extensions that are available in the Marketplace can now be released out-of-band and VS Code will detect the new version and update the extension. This will enable these extensions to support pre-releases as well.",
    "url": "https://code.visualstudio.com/updates/v1_66#_support-out-of-band-releases-for-built-in-extensions",
    "id": 2674
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n## Documentation  \n### R in VS Code  \nThere is a new [R in Visual Studio Code](https://code.visualstudio.com/docs/languages/r) topic describing [R programming language](https://www.r-project.org) support in VS Code with the [R extension](https://marketplace.visualstudio.com/items?itemName=REditorSupport.r). The R extension includes rich language features such as code completions and linting as well as integrated R terminals and dedicated workspace, data, and plot viewers.  \n![R Extension for Visual Studio Code details pane](images/1_66/r-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_66#_r-in-vs-code",
    "id": 2675
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Development containers blog post  \nIn case you missed Burke Holland's recent blog post on using dev containers to create easy to use programming environments, check out [\"The problem with tutorials\"](https://code.visualstudio.com/blogs/2022/03/08/the-tutorial-problem). The blog post describes how [Laravel](https://laravel.com) uses pre-configured Docker containers to provide the runtime and dependencies for their PHP framework tutorials.",
    "url": "https://code.visualstudio.com/updates/v1_66#_development-containers-blog-post",
    "id": 2676
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between March 1 2022 and March 27 2022):  \n* [RTF](https://marketplace.visualstudio.com/items?itemName=alefragnani.rtf) ([Alessandro Fragnani](https://marketplace.visualstudio.com/publishers/alefragnani))\n* [Highlight - C/C++ Parameters](https://marketplace.visualstudio.com/items?itemName=mblet.highlight-cpp-parameters) ([BLET Micka\u00ebl](https://marketplace.visualstudio.com/publishers/mblet))\n* [Highlight - Regex](https://marketplace.visualstudio.com/items?itemName=mblet.highlight-regex) ([BLET Micka\u00ebl](https://marketplace.visualstudio.com/publishers/mblet))\n* [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=Dancheg97.material-icon-theme-gopher-fork) ([Dancheg97](https://marketplace.visualstudio.com/publishers/Dancheg97))\n* [Go to Character Position](https://marketplace.visualstudio.com/items?itemName=davidfreer.go-to-character-position) ([davidfreer](https://marketplace.visualstudio.com/publishers/davidfreer))\n* [Extension panel](https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-extension-panel) ([Elio Struyf](https://marketplace.visualstudio.com/publishers/eliostruyf))\n* [Writing Style Guide](https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-microsoft-writingstyleguide) ([Elio Struyf](https://marketplace.visualstudio.com/publishers/eliostruyf))\n* [Bravato Icons](https://marketplace.visualstudio.com/items?itemName=florin-bratan.bravato-icons) ([Florin Bratan](https://marketplace.visualstudio.com/publishers/florin-bratan))\n* [Markmap](https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode) ([Gerald Liu](https://marketplace.visualstudio.com/publishers/gera2ld))\n* [GitLens \u2014 Git supercharged](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens) ([GitKraken](https://marketplace.visualstudio.com/publishers/eamodio))\n* [YARA](https://marketplace.visualstudio.com/items?itemName=infosec-intern.yara) ([infosec-intern](https://marketplace.visualstudio.com/publishers/infosec-intern))\n* [ZMK Tools](https://marketplace.visualstudio.com/items?itemName=spadin.zmk-tools) ([Joel Spadin](https://marketplace.visualstudio.com/publishers/spadin))\n* [JSPM Generator](https://marketplace.visualstudio.com/items?itemName=JSPM.jspm-vscode) ([JSPM](https://marketplace.visualstudio.com/publishers/JSPM))\n* [gcs-sync-vs-ext](https://marketplace.visualstudio.com/items?itemName=killerbees-devops.gcs-sync-vs-ext) ([killerbees-devops](https://marketplace.visualstudio.com/publishers/killerbees-devops))\n* [Faster paragraph/word movement](https://marketplace.visualstudio.com/items?itemName=mateusz-d-421.faster-para-word-movement) ([Mateusz Dudzinski](https://marketplace.visualstudio.com/publishers/mateusz-d-421))\n* [narumincho.definy](https://marketplace.visualstudio.com/items?itemName=narumincho.definy) ([narumincho](https://marketplace.visualstudio.com/publishers/narumincho))\n* [Better Markdown & Latex Shortcuts](https://marketplace.visualstudio.com/items?itemName=OrangeX4.better-markdown-latex-shortcuts) ([OrangeX4](https://marketplace.visualstudio.com/publishers/OrangeX4))\n* [Python Brackets](https://marketplace.visualstudio.com/items?itemName=OrangeX4.python-brackets) ([OrangeX4](https://marketplace.visualstudio.com/publishers/OrangeX4))\n* [Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) ([Quarto](https://marketplace.visualstudio.com/publishers/quarto))\n* [Inline SQL](https://marketplace.visualstudio.com/items?itemName=qufiwefefwoyn.inline-sql-syntax) ([qufiwefefwoyn](https://marketplace.visualstudio.com/publishers/qufiwefefwoyn))\n* [React Hierarchy Explorer](https://marketplace.visualstudio.com/items?itemName=react-sidekick.react-hierarchy-explorer) ([React Sidekick](https://marketplace.visualstudio.com/publishers/react-sidekick))\n* [Serverless Workflow Editor](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-extension-serverless-workflow-editor) ([Red Hat](https://marketplace.visualstudio.com/publishers/redhat))\n* [gitlab](https://marketplace.visualstudio.com/items?itemName=RedstoneWizard08.gitlab) ([RedstoneWizard08](https://marketplace.visualstudio.com/publishers/RedstoneWizard08))\n* [LLVM IR Language Support](https://marketplace.visualstudio.com/items?itemName=revng.llvm-ir) ([rev.ng Labs](https://marketplace.visualstudio.com/publishers/revng))\n* [Behave](https://marketplace.visualstudio.com/items?itemName=rioj7.vscode-behave) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Line Completion](https://marketplace.visualstudio.com/items?itemName=rioj7.line-completion) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [vscode_web_extension_emulator](https://marketplace.visualstudio.com/items?itemName=runthoser.vscode-web-extension-emulator) ([runthoser](https://marketplace.visualstudio.com/publishers/runthoser))\n* [Marquee](https://marketplace.visualstudio.com/items?itemName=stateful.marquee) ([stateful](https://marketplace.visualstudio.com/publishers/stateful))\n* [painandsufferingforjaredsstuff](https://marketplace.visualstudio.com/items?itemName=Thomka.painandsufferingforjaredsstuff) ([Thomka](https://marketplace.visualstudio.com/publishers/Thomka))\n* [Tofu (Alpha)](https://marketplace.visualstudio.com/items?itemName=watware.tofu-vscode) ([Watware](https://marketplace.visualstudio.com/publishers/watware))",
    "url": "https://code.visualstudio.com/updates/v1_66#_web-extensions",
    "id": 2677
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [Lemmingh (@Lemmingh)](https://github.com/Lemmingh)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)",
    "url": "https://code.visualstudio.com/updates/v1_66#_issue-tracking",
    "id": 2678
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2022 Release (1.66)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Add match media change listener in browser ts [PR #143287](https://github.com/microsoft/vscode/pull/143287)\n* [@AkatQuas (Akat)](https://github.com/AkatQuas): feat(jsonc): more interactive completion for \"path\" property [PR #144136](https://github.com/microsoft/vscode/pull/144136)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks): Add jsonc to markdown embedded languages [PR #144003](https://github.com/microsoft/vscode/pull/144003)\n* [@Backfighter](https://github.com/Backfighter): Do not overwrite users environment variables [PR #115455](https://github.com/microsoft/vscode/pull/115455)\n* [@BamBamboozled](https://github.com/BamBamboozled): Add support for references when no [] exists [PR #144781](https://github.com/microsoft/vscode/pull/144781)\n* [@cbliard (Christophe Bliard)](https://github.com/cbliard): Add expected type for selectionLines property of editor.fold command [PR #144732](https://github.com/microsoft/vscode/pull/144732)\n* [@Charles-Gagnon (Charles Gagnon)](https://github.com/Charles-Gagnon): Update coverage folder location [PR #145597](https://github.com/microsoft/vscode/pull/145597)\n* [@eltociear (Ikko Ashimine)](https://github.com/eltociear): Update README.md [PR #145132](https://github.com/microsoft/vscode/pull/145132)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): [typescript-language-features] Add includeCompletionsWithObjectLiteralMethodSnippets preference [PR #145941](https://github.com/microsoft/vscode/pull/145941)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Fix configure keybinding action buttons on New File quickpick (#145422) [PR #145429](https://github.com/microsoft/vscode/pull/145429)\n* [@hermannloose (Hermann Loose)](https://github.com/hermannloose): Introduce themable colors for resolved and unresolved comments [PR #145230](https://github.com/microsoft/vscode/pull/145230)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes glob patterns `**/p*` incorrectly match on `/foo/ap` [PR #144473](https://github.com/microsoft/vscode/pull/144473)\n* Fixes cannot install web extension using remote cli [PR #144522](https://github.com/microsoft/vscode/pull/144522)\n* Fixes wrong extension running location shown in running extension editor [PR #144528](https://github.com/microsoft/vscode/pull/144528)\n* [@kkakroo (Karan Kakroo)](https://github.com/kkakroo)\n* only exit zen mode by workbench.action.exitZenMode if its already in zen mode [PR #144217](https://github.com/microsoft/vscode/pull/144217)\n* Scroll to top button not getting themed [PR #144224](https://github.com/microsoft/vscode/pull/144224)\n* [@kkocdko (kkocdko)](https://github.com/kkocdko): Fix infinite recursion in `getDirectoryHandle` [PR #145972](https://github.com/microsoft/vscode/pull/145972)\n* [@matthewjamesadam (Matt Adam)](https://github.com/matthewjamesadam): Add badges extension API [PR #139225](https://github.com/microsoft/vscode/pull/139225)\n* [@mifopen (Slava Mostovoy)](https://github.com/mifopen): fix: Hovering fixed positioned hover widget will hide them [PR #142160](https://github.com/microsoft/vscode/pull/142160)\n* [@pjknkda (Jungkook Park)](https://github.com/pjknkda): Skip reading file content for undo when deleting a large file [PR #144890](https://github.com/microsoft/vscode/pull/144890)\n* [@quanzhuo (Quan Zhuo)](https://github.com/quanzhuo)\n* Fix issue #144453, extension's lastUpdated time exceed 24:00:00 [PR #144454](https://github.com/microsoft/vscode/pull/144454)\n* #144671, fix some non localized strings in git extension [PR #144712](https://github.com/microsoft/vscode/pull/144712)\n* [@rounaksingh557 (Rounak singh)](https://github.com/rounaksingh557): This will look for Visual Studio in the Correct directory. [PR #143479](https://github.com/microsoft/vscode/pull/143479)\n* [@sbresin (Sebastian Bresin)](https://github.com/sbresin): feat: gitExtension API also expose repository.revert() [PR #145029](https://github.com/microsoft/vscode/pull/145029)\n* [@Semphriss](https://github.com/Semphriss): Update Seti theme [PR #145004](https://github.com/microsoft/vscode/pull/145004)\n* [@ShafinKhadem (Nafiur Rahman Khadem)](https://github.com/ShafinKhadem): Respect searchScope column in multicursor selectAll [PR #142312](https://github.com/microsoft/vscode/pull/142312)\n* [@sumneko (\u6700\u840c\u5c0f\u6c50)](https://github.com/sumneko)\n* Update Lua grammar [PR #144544](https://github.com/microsoft/vscode/pull/144544)\n* update Lua-grammar [PR #144975](https://github.com/microsoft/vscode/pull/144975)\n* [@UltiRequiem (Eliaz Bobadilla)](https://github.com/UltiRequiem): chore: bump actions/checkout [PR #145891](https://github.com/microsoft/vscode/pull/145891)\n* [@weartist (Han)](https://github.com/weartist): Fix the #143392 [PR #143498](https://github.com/microsoft/vscode/pull/143498)\n* [@xisui-MSFT](https://github.com/xisui-MSFT)\n* Allow stack frame without source as top stack frame when using disassembly view [PR #143649](https://github.com/microsoft/vscode/pull/143649)\n* Fix disabled breakpoint icon in disassembly view [PR #143925](https://github.com/microsoft/vscode/pull/143925)\n* [@xmedeko (Ondrej Medek)](https://github.com/xmedeko): fix markdownDescription for javascript.suggest.jsdoc.generateReturns [PR #144486](https://github.com/microsoft/vscode/pull/144486)\n* [@yume-chan (Simon Chan)](https://github.com/yume-chan): Wait for extension contributions in `welcome.showAllWalkthroughs` [PR #135632](https://github.com/microsoft/vscode/pull/135632)  \nContributions to `vscode-css-languageservice`:  \n* [@marknn3 (Mark Langezaal)](https://github.com/marknn3): Fix vscode #142516 [css] support unicode-range wildcard [PR #264](https://github.com/microsoft/vscode-css-languageservice/pull/264)  \nContributions to `vscode-js-debug`:  \n* [@zjffun (JuFeng Zhang)](https://github.com/zjffun): feat: heap profiling [PR #1187](https://github.com/microsoft/vscode-js-debug/pull/1187)  \nContributions to `vscode-languageserver-node`:  \n* [@razzeee (Kolja Lampe)](https://github.com/razzeee): Fix typo [PR #903](https://github.com/microsoft/vscode-languageserver-node/pull/903)  \nContributions to `vscode-vsce`:  \n* [@felipecrs (Felipe Santos)](https://github.com/felipecrs): docs: add configuration tips to readme\n[PR #704](https://github.com/microsoft/vscode-vsce/pull/704)  \nContributions to `debug-adapter-protocol`:  \n* [@eshelyaron (Eshel Yaron)](https://github.com/eshelyaron): Fix a small mistake in `ExceptionFilterOptions` [PR #250](https://github.com/microsoft/debug-adapter-protocol/pull/250)\n* [@haneefdm (Haneef Mohammed)](https://github.com/haneefdm): Added Cortex-Debug which used to be in this list [PR #257](https://github.com/microsoft/debug-adapter-protocol/pull/257)\n* [@renkun-ken (Kun Ren)](https://github.com/renkun-ken): Add R Debugger [PR #255](https://github.com/microsoft/debug-adapter-protocol/pull/255)  \nContributions to `language-server-protocol`:  \n* [@KamasamaK](https://github.com/KamasamaK)\n* Recommend WorkspaceSymbol [PR #1428](https://github.com/microsoft/language-server-protocol/pull/1428)\n* Add `workspace.inlayHint` to capabilities [PR #1429](https://github.com/microsoft/language-server-protocol/pull/1429)\n* [@sno2 (Carter Snook)](https://github.com/sno2): fix(inlayHint): type reference typo [PR #1425](https://github.com/microsoft/language-server-protocol/pull/1425)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_66#_pull-requests",
    "id": 2679
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Settings editor search filter button  \nThe Settings editor search control now contains a funnel button on the right side. Clicking on the button shows a list of filters that you can apply to the search query in order to filter down the results.  \n<video src=\"images/1_67/se-filter-button.mp4\" autoplay loop controls muted title=\"Selecting the Settings editor filter button and then applying a language filter from the dropdown\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_67#_settings-editor-search-filter-button",
    "id": 2680
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Settings editor language filter indicator  \nSettings editor language filters now change the scope text to more clearly show which language is being acted on when a language filter is applied. The short video above shows the Markdown language filter (`@lang:markdown`) being applied to the filtered settings.  \nFor reference, when a language filter is applied, modifying a setting's value will modify the value of that setting for that language only. [Language-specific settings](https://code.visualstudio.com/docs/getstarted/settings#_languagespecific-editor-settings) are scoped in `settings.json` by the [language identifier](https://code.visualstudio.com/docs/languages/overview#_language-identifier):  \n```json\n\"[markdown]\": {\n\"editor.wordBasedSuggestions\": \"off\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_67#_settings-editor-language-filter-indicator",
    "id": 2681
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Save files after refactoring  \nRefactorings, like Rename, often modify multiple files and leave them with unsaved changes (dirty). External development tools usually require these files to be saved. To make this workflow easier, there is a new setting `files.refactoring.autoSave` that defaults to `true` and controls if files that were part of a refactoring should be saved automatically.",
    "url": "https://code.visualstudio.com/updates/v1_67#_save-files-after-refactoring",
    "id": 2682
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Exclude dirty editors in editor limit  \nA new setting `workbench.editor.limit.excludeDirty` controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit. The setting is disabled by default (`false`).",
    "url": "https://code.visualstudio.com/updates/v1_67#_exclude-dirty-editors-in-editor-limit",
    "id": 2683
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Bring back \"Uncommitted Changes\" to Timeline  \nWhen we introduced [Local History](https://code.visualstudio.com/updates/v1_66#_local-history) feature last month, we removed the **Uncommitted Changes** entry from the Git timeline provider because it felt a bit redundant. However, some users see real value in this timeline entry and now you can bring it back by configuring the new `git.timeline.showUncommitted` setting accordingly.",
    "url": "https://code.visualstudio.com/updates/v1_67#_bring-back-uncommitted-changes-to-timeline",
    "id": 2684
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### New editor placeholder when opening fails  \nWhen an editor fails to open, VS Code no longer shows a notification and reveals the previous opened editor. Instead, there is a generic placeholder with the error message and, in some cases, actions to resolve the error.  \n<video src=\"images/1_67/editor-placeholder.mp4\" autoplay loop controls muted title=\"Editor placeholder with the option to create a missing file\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_67#_new-editor-placeholder-when-opening-fails",
    "id": 2685
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Language status improvements  \nThe language status item now shows formatter conflicts - those happen when multiple formatters for a language are installed but none of them is configured as the default formatter. Also, the language status item is more prominent when containing severe status.  \n<video src=\"images/1_67/languageStatus.mp4\" autoplay loop controls muted title=\"Animated language status with an error item for formatter conflicts\"></video>  \nAdditionally, the language status item will now show hints to switch languages when your document is suspected to be a different language than what is currently set. This applies only to untitled editors and notebook cells, and can be configured with the `workbench.editor.languageDetectionHints` setting. Below this is demonstrated in the [Handy Dandy Notebook](https://marketplace.visualstudio.com/items?itemName=jakearl.handydandy-notebook), which supports executing cells in various different languages.  \n<video src=\"images/1_67/language-detection.mp4\" autoplay loop controls muted title=\"demonstrating detecting various languages in a notebook\"></video>  \n_Theme: [GitHub Light High Contrast](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_67#_language-status-improvements",
    "id": 2686
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Show invalid or incompatible extensions  \nThe Extensions view now shows invalid or incompatible extensions in the **Installed** extension list with error status. For example, if your VS Code version is `1.67.0-insider` and you have installed an extension that requires VS Code version `1.68.0`, then it will show up in the list with incompatible error status.  \n![Incompatible extension details shown in the Extensions view item hover](images/1_67/incompatible-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_show-invalid-or-incompatible-extensions",
    "id": 2687
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Confirm before quit  \nA new setting `window.confirmBeforeClose` can be configured to show a confirmation dialog before quitting the application.  \n<video src=\"images/1_67/confirm-quit.mp4\" autoplay loop controls muted title=\"Confirmation dialog shown after using a keyboard shortcut to start closing VS Code\"></video>  \nYou can either chose `keyboardOnly` to bring up the confirmation dialog when a keybinding is used or `always`, even when using the mouse to quit.  \n**Note**: The setting is not entirely new and has been available in [VS Code for Web](https://code.visualstudio.com/docs/editor/vscode-web) for some time.",
    "url": "https://code.visualstudio.com/updates/v1_67#_confirm-before-quit",
    "id": 2688
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### comments.openView default value  \nThe old default value of `comments.openView` was `file`, which caused the Comments view to open every time a file with comments was opened. To make the Comments view less noisy, the new default is `firstFile`, which causes the Comments view to open only the first time a file with comments is opened during a session.",
    "url": "https://code.visualstudio.com/updates/v1_67#_comments.openview-default-value",
    "id": 2689
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Multiline comments  \nBehind the scenes, VS Code has supported multiline comments since the comments UX was finalized, but multiline comments were never surfaced in the UI. You can now see and leave multiline comments.  \n<video src=\"images/1_67/multiline-comments.mp4\" autoplay loop controls muted title=\"Selecting multiple lines and leaving a comment\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_67#_multiline-comments",
    "id": 2690
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Handle URI in new window  \nWhenever a VS Code URI contains a query parameter `windowId=_blank`, VS Code will handle it in a new window. Example: `vscode://vscode.git/clone?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-vsce.git&windowId=_blank`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_handle-uri-in-new-window",
    "id": 2691
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Editor  \n### Bracket pair colorization enabled by default  \nGiven the positive feedback of the new bracket pair colorization feature introduced in the [1.60 release](https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization), we enabled bracket pair colorization by default.  \n![Side by side comparison with bracket pair colorization on and off](images/1_60/bracket-pair-colorization-on-off.drawio.png)  \nBracket pair colorization can be disabled by setting `\"editor.bracketPairColorization.enabled\"` to `false`.  \nBracket pair colorization can also be disabled just for specific languages:  \n```json\n\"[typescript]\": {\n\"editor.bracketPairColorization.enabled\": false,\n},\n```",
    "url": "https://code.visualstudio.com/updates/v1_67#_bracket-pair-colorization-enabled-by-default",
    "id": 2692
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### TextMate grammars can mark tokens as unbalanced  \nPreviously, TextMate grammars could not mark certain brackets as **unbalanced**, like the closing parenthesis in the case-statement of shell scripts:  \n![Old behavior where unbalanced brackets not detected](images/1_67/unbalanced-brackets-shell-old.png)  \nTo make bracket pair matching and colorization more robust, TextMate grammar contributions can now express that brackets in certain tokens should not be matched. In the `contributes` section of an extensions `package.json`, provided grammars can use the properties `balancedBracketScopes` (defaults to `[\"*\"]`) and `unbalancedBracketScopes` (defaults to `[]`) to include or exclude scopes for bracket matching.  \n```json\n\"grammars\": [{\n\"language\": \"shellscript\",\n\"scopeName\": \"source.shell\",\n\"path\": \"./syntaxes/shell-unix-bash.tmLanguage.json\",\n\"balancedBracketScopes\": [ \"*\" ],\n\"unbalancedBracketScopes\": [ \"meta.scope.case-pattern.shell\" ]\n}],\n```  \nWith this feature, the grammar of the shell script can now indicate that `)` in case-statements should not be matched:  \n![New behavior correctly skipping a bracket that isn't matched](images/1_67/unbalanced-brackets-shell-new.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_textmate-grammars-can-mark-tokens-as-unbalanced",
    "id": 2693
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### New bracket matching algorithm  \nBracket matching now uses the same [data structure](https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization) as bracket colorization. This both increases accuracy and performance.  \nOld bracket matching behavior (notice that the colors and the highlight decoration do not match):  \n![Old behavior with incorrect bracket matching](images/1_67/bracket-matching-old.png)  \nNew bracket matching behavior:  \n![New behavior with correct bracket matching](images/1_67/bracket-matching-new.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_new-bracket-matching-algorithm",
    "id": 2694
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Bracket guide improvements  \nHorizontal bracket guides now properly support wrapped lines. Also, bracket pairs that only span a single line get their own horizontal bracket guide.  \n![Horizontal bracket guides displayed for wrapped lines](images/1_67/horizontal-bracket-guides.png)  \nHorizontal bracket guides are disabled by default and can be enabled with `\"editor.guides.bracketPairsHorizontal\": true`.  \nWith this release, `\"editor.guides.highlightActiveIndentation\"` now accepts the value `\"always\"`. If set to `always`, indentation guides are highlighted even if there is already an active bracket pair.",
    "url": "https://code.visualstudio.com/updates/v1_67#_bracket-guide-improvements",
    "id": 2695
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Toggle inlay hints  \nInlay hints are a great way to show additional information right within your source code. However, sometimes you just want to see the actual source code. To support quickly hiding inlay hints, the `editor.inlayHints.enabled` setting has been changed: in addition to `on` and `off`, there are also values `onUnlessPressed` and `offUnlessPressed`. The `on/offUnlessPressed` values hide or show inlay hints while `Ctrl+Alt` is being pressed and held.  \n**Editor \u203a Inlay Hints: Enabled** value:  \n* `on` - Inlay hints are enabled.\n* `off` - Inlay hints are disabled.\n* `onUnlessPressed` - Inlay hints shown and hidden with `Ctrl+Alt`.\n* `offUnlessPressed` - Inlay hints hidden and shown with `Ctrl+Alt`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_toggle-inlay-hints",
    "id": 2696
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Improved inline suggestions  \nLast month we added the ability to use \ud83d\udc7b ghost text (faint coloring) for quick suggestions. Reminder: you need to use `inline` for the `editor.quickSuggestions` setting. We have done some polish work in this area, notably trigger characters and TypeScript \"complete functions with arguments\" are now supported.  \n<video src=\"images/1_67/inlineSuggest.mp4\" autoplay loop controls muted title=\"Trigger characters and ghost text\"></video>  \nTo disable IntelliSense when typing trigger characters, like `.`, set `\"editor.suggestOnTriggerCharacters\": false`. To enable TypeScript function call completions, use `\"typescript.suggest.completeFunctionCalls\": true`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_improved-inline-suggestions",
    "id": 2697
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Drag and drop text into editor  \nYou can now drag and drop text from other applications into a text editor. On macOS for example, this lets you drop an emoji from the emoji panel into a text editor:  \n<video src=\"images/1_67/editor-drop.mp4\" autoplay loop controls muted title=\"Dragging and dropping an emoji into VS Code\"></video>  \nWhile dragging, a dotted cursor shows you where the text will be inserted.",
    "url": "https://code.visualstudio.com/updates/v1_67#_drag-and-drop-text-into-editor",
    "id": 2698
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Terminal  \n### Find result count  \nWhen searching in the terminal, the result count and currently selected match index are now displayed in the Find control.  \n![Text is searched for in the terminal and the Find control is labeled match 12 of 14 to indicate that match 12 is currently selected](images/1_67/terminal-find-count.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_find-result-count",
    "id": 2699
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Source Control  \n### Source Control Repositories view  \nThis milestone we have introduced a new setting, `scm.repositories.sortOrder`, to control the default sort order of the repositories displayed in the **Source Control Repositories** view. Repositories can be sorted by the order in which they are discovered, by name, and by full path. Changing the sort order can be done using the **...** **Views and More Actions** menu of the **Source Control Repositories** view and the **...** > **View & Sort** > **Repositories** menu of the **Source Control** view.  \nThe short video below shows that the **SCM > Repositories: Sort Order** setting is by default `discovery time`, the time when the repositories were selected, and that you can also change the sort order in the Source Control views.  \n<video src=\"images/1_67/scm-repositories-view-sort.mp4\" autoplay loop controls muted title=\"Sort repositories in the Source Control Repositories view\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_67#_source-control-repositories-view",
    "id": 2700
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Editor decoration improvements  \nLast milestone we improved the accessibility of the editor decorators for added/modified lines by adopting a pattern for the modified line decorators. This milestone, we added a new setting, `scm.diffDecorationsGutterPattern`, that lets users toggle the pattern for the editor decorators.  \n<video src=\"images/1_67/editor-diff-decorators.mp4\" autoplay loop controls muted title=\"Toggle editor decorator settings for added/modified lines\"></video>  \nThe setting defaults to using the pattern for the modified line decoration but not for added:  \n```json\n\"scm.diffDecorationsGutterPattern\": {\n\"added\": false,\n\"modified\": true\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_67#_editor-decoration-improvements",
    "id": 2701
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Performance improvements  \nUsers that have the `git.untrackedChanges` setting set to `hidden` will experience better performance when working with large repositories. This is achieved by passing the `-uno` parameter when calling `git status`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_performance-improvements",
    "id": 2702
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Expanded remote source providers API  \nThe Git extension API now allows extensions that register or display [remote source providers](https://code.visualstudio.com/updates/v1_45#_git) to provide richer information about remote sources.  \nRemote source providers can now set the description and icon for individual remote sources. Additionally, providers can optionally specify **recent** remote sources. These are displayed at the top level in the picker for easy access and sorted by timestamp if one is provided.  \nThe expanded API has been adopted by the built-in GitHub extension, as well as the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) and [Azure Repos](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos) extensions in [github.dev](https://github.dev) and [vscode.dev](https://vscode.dev).",
    "url": "https://code.visualstudio.com/updates/v1_67#_expanded-remote-source-providers-api",
    "id": 2703
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Clone from GitHub using SSH  \nA new setting `github.gitProtocol` lets you change the default protocol when cloning a repository from GitHub. The value is `https` by default but can be changed to `ssh`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_clone-from-github-using-ssh",
    "id": 2704
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Debugging  \n### Auto-expand lazy variables  \nA couple months ago, we added support for clicking a button to expand \"lazy\" variables in the debugger Variables view. There is a new setting, `debug.autoExpandLazyVariables`, to automatically expand lazy variables without a click.",
    "url": "https://code.visualstudio.com/updates/v1_67#_auto-expand-lazy-variables",
    "id": 2705
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### New button for lazy variables  \nWe've updated the text link button to a real button with the \"eye\" codicon. The \"eye\" codicon was also updated to look more eye-like.  \n![A button to expand a lazy variable](images/1_67/lazy-var-button.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_new-button-for-lazy-variables",
    "id": 2706
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Shift-click to disable breakpoints  \nYou can now `Shift+Click` on a breakpoint (or conditional breakpoint, or logpoint) to disable it, and to re-enable it.  \n<video src=\"images/1_67/disable-breakpoints.mp4\" autoplay loop controls muted title=\"Shift clicking on breakpoints to disable and re-enable them\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_67#_shift-click-to-disable-breakpoints",
    "id": 2707
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Languages  \n### Markdown: Drop into editor to create link  \nYou can now quickly create Markdown links by dragging and dropping files from VS Code's Explorer into a Markdown editor. Hold `Shift` while dragging the file over a Markdown editor to drop it into the editor and create a link to it:  \n<video src=\"images/1_67/md-drop-link.mp4\" autoplay loop controls muted title=\"Inserting links into Markdown by dragging and dropping from the Explorer\"></video>  \nIf the file looks like an image, VS Code will automatically insert a Markdown image. Otherwise a normal Markdown link is added.  \nThis also works when dragging some types of files from other applications, such as dragging and dropping images from a web browser:  \n<video src=\"images/1_67/md-drop-external.mp4\" autoplay loop controls muted title=\"Dropping a image from a web browser into VS Code to add a Markdown image\"></video>  \nYou can disable this drop behavior by setting `\"markdown.editor.drop.enabled\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-drop-into-editor-to-create-link",
    "id": 2708
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Find All References to headers  \nVS Code now supports running **Find All References** in Markdown files for headers. This lets you see all the places where a given header is used within the current workspace, including links to it from other Markdown files.  \nTo get started, place your cursor either on the header itself or on the fragment part of a link to the header (for example, `#some-header` in `[link text](#some-header)` or `[link text](/path/to/file#some-header)`) and run **Find All References**.  \n![Finding all references to a Markdown header](images/1_67/md-header-references.png)  \nThis will show all references in the References view. If you prefer a different view, you can also use the **Peek References** or **Go to References** commands.",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-find-all-references-to-headers",
    "id": 2709
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Find all references to reference links  \nVS Code also supports finding all references to [reference links](https://spec.commonmark.org/0.30/#reference-link) within the current file. This is supported for:  \n* On `ref` in `[some text][ref]`.\n* On `ref` in the shorthand link `[ref]`.\n* On `ref` in the link definition `[ref]: http://example.com`.  \n![Finding all places a Markdown link reference is used](images/1_67/md-ref-references.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-find-all-references-to-reference-links",
    "id": 2710
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Find all references to files  \nYou can also now find all the references to a given Markdown file in the current workspace. Again this includes links across files.  \nThis can be triggered in a few ways:  \n* To find references to the currentMarkdown file, use the **Markdown: Find File References** command.\n* To find references to a Markdown file in the Explorer, right-click on it and run **Find File References** command.\n* Run **Find All References** on the file part of a link to a Markdown file, such as `[text](/link/to/file.md)`.  \n<video src=\"images/1_67/md-file-references.mp4\" autoplay loop controls muted title=\"Finding all references to a Markdown file\"></video>  \nThis will list all places where a given file is referenced, including references to headers within that file.",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-find-all-references-to-files",
    "id": 2711
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Find all references to URLs  \nFinally, we also support finding all places where a given URL is used in the current workspace.  \n![Finding all places where a URL is used in Markdown files](images/1_67/md-url-references.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-find-all-references-to-urls",
    "id": 2712
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Rename headers  \nEver change a header in a Markdown file only to realize that you also accidentally broke all links to it? That's where our new rename support for Markdown can help.  \nTo get started, place your cursor on a header and then press `F2` to start a rename. Enter the new text for the header and then press `Enter` to accept. This will both update the current header as well as updating all known links to it in the current workspace.  \n<video src=\"images/1_67/md-rename-header.mp4\" autoplay loop controls muted title=\"Renaming a Markdown header using F2\"></video>  \nYou can trigger renames on the header itself or on the header component of a link to the header. For example, `some-header` in `[link text](#some-header)` or `[link text](/path/to/file#some-header)`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-rename-headers",
    "id": 2713
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Rename reference links  \nYou can also rename reference links in Markdown. This will update all the reference links in the current Markdown file:  \n![Renaming a Markdown link reference using F2](images/1_67/md-rename-references.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-rename-reference-links",
    "id": 2714
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Markdown: Rename files  \nRounding out our new Markdown rename support, you can now use `F2` on file paths in Markdown links to both rename the file on disk as well as updating all Markdown references to it:  \n![Renaming a file by pressing F2 on the file path in a link](images/1_67/md-file-rename.png)  \nCurrently renaming files is only supported using `F2` on a link to the file in the text editor. In upcoming iterations, we also plan to support update links when a rename is triggered in the Explorer.",
    "url": "https://code.visualstudio.com/updates/v1_67#_markdown:-rename-files",
    "id": 2715
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### JSON  \nThe new setting `json.validate.enable` lets you turn off the JSON validation.",
    "url": "https://code.visualstudio.com/updates/v1_67#_json",
    "id": 2716
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## VS Code for the Web  \n### Open Remote Repository picker  \nVS Code for the Web now respects the `window.openFoldersInNewWindow` setting when you use the **Open Remote Repository** picker. This aligns the picker behavior with the other versions of VS Code and replaces the **Open in New Window** Quick Pick item button.",
    "url": "https://code.visualstudio.com/updates/v1_67#_open-remote-repository-picker",
    "id": 2717
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Contributions to extensions  \n### Java  \n**Inlay hints**  \nThe Java language service included in the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) now supports [inlay hints](https://code.visualstudio.com/docs/editor/editingevolved#_inlay-hints) to show parameter names for method signatures.  \n<video src=\"images/1_67/java-inlay-hints.mp4\" autoplay loop controls muted title=\"Java file with parameter name inlay hints displayed for literal arguments, displayed for all arguments, and disabled\"></video>  \nThere are three modes for Java parameter name inlay hints:  \n* `literals` - Enable parameter name hints only for literal arguments (default).\n* `all` - Enable parameter name hints for literal and non-literal arguments.\n* `none` - Disable parameter name hints.  \n**Lazy variable resolution**  \nThe [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension now supports ['lazy' variables](https://code.visualstudio.com/updates/v1_65#_support-for-lazy-variables). This feature lets you defer the operations for an expensive variable until you explicitly expand the debugger UI to see it's value.  \n<video src=\"images/1_67/java-lazy-variable.mp4\" autoplay loop controls muted title=\"Debugger for Java supporting lazy variable resolution during a debugging session\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_67#_java",
    "id": 2718
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Jupyter  \n**Jupyter PowerToys extension**  \nWe are excited to announce the [Jupyter PowerToys](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.vscode-jupyter-powertoys) extension that provides experimental functionality for working with Jupyter notebooks. In its first release, we have prototyped the following features:  \n* Kernel management panel\n* Contextual help\n* Execution grouping  \nWe'd love for you to take these for a spin and let us know what you think so that we can hone them into a supported feature someday!  \nFor more information, refer to the README in the [vscode-jupyter-powertoys](https://github.com/microsoft/vscode-jupyter-powertoys) repository.  \n**Web extension**  \nThe [Jupyter](https://marketplace.visualstudio.com/itemdetails?itemName=ms-toolsai.jupyter) extension can now be installed as a web extension for use with [vscode.dev](https://vscode.dev). Functionality is currently limited with support only for notebooks (`.ipynb` files) being run on Jupyter servers that do not require https.  \nIf you'd like to experiment with the functionality, launch Jupyter from your local machine with:  \n```bash\njupyter --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```  \nAnd connect to it using the command **Jupyter: Specify Jupyter server for connections**.  \nIn upcoming releases, we will be enabling more features when running in a browser, including:  \n* 'https' based servers\n* IntelliSense\n* Data viewing\n* Variable viewing\n* Interactive window\n* IPyWidgets\n* Plot viewing\n* Exporting  \n**Jupyter kernel handling**  \nA number of updates were made to Jupyter kernel handling:  \n* To make it more obvious when a kernel has crashed, the extension now displays this information in cell output.\n* There is now troubleshooting guidance in cell output when certain known errors are detected during execution.\n* Solving kernel execution problems can be a tricky and time consuming process. We've put together a [troubleshooting section](https://github.com/microsoft/vscode-jupyter/wiki) on our wiki that we hope can help guide you to a solution quicker. Our [GitHub Discussions forum](https://github.com/microsoft/vscode-jupyter/discussions) can be a great resource for obtaining help as well.",
    "url": "https://code.visualstudio.com/updates/v1_67#_jupyter",
    "id": 2719
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Python  \n**No reload when changing language servers**  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension now supports updating the value of the `python.languageServer` setting and automatically restarting the language server without needing to reload VS Code.  \n**Black formatter extension**  \nThere is now a [Black Formatter](https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter) extension that provides formatting support for Python using the [black](https://pypi.org/project/black/) formatter. A pre-release version of the extension is available to install.  \n**Import organization with isort**  \nNew [isort](https://marketplace.visualstudio.com/items?itemName=ms-python.isort) extension, which provides import organization using the [isort](https://pypi.org/project/isort/) library. A pre-release version of the extension is available.",
    "url": "https://code.visualstudio.com/updates/v1_67#_python",
    "id": 2720
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_67.md).",
    "url": "https://code.visualstudio.com/updates/v1_67#_remote-development",
    "id": 2721
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights of this release include:  \n* Multiline comments\n* Showing commit changes in a tree  \nCheck out the [changelog for the 0.42.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0420) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_67#_github-pull-requests-and-issues",
    "id": 2722
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Preview Features  \n### Settings Profile  \nIn this milestone, we introduced **Settings Profile** that is a collection of your settings, extensions, and UI customizations. If you customized VS Code, you can now export your customizations to a Settings Profile file (`mysetup.code-profile`) and save it to your computer and share it with others.  \nThe following short video shows exporting a Settings Profile from VS Code:  \n<video src=\"images/1_67/export-settings-profile.mp4\" autoplay loop controls muted title=\"Export Settings Profile\"></video>  \nYou can also import a Settings Profile file to restore your customizations.  \nBelow shows importing a Settings Profile into VS Code:  \n<video src=\"images/1_67/import-settings-profile.mp4\" autoplay loop controls muted title=\"Import Settings Profile\"></video>  \nYou can host your Settings Profile file in the cloud, for example save it as a public GitHub gist, and share the URL with others. One can import the Settings Profile file by providing the URL.  \n**Note:** At present, only the following UI customizations are included in the Settings Profile. More will be added in the future.  \n* Status bar items visibility\n* Activity Bar, Bottom Panel & Side Panel items visibility and order\n* Views visibility, location and order",
    "url": "https://code.visualstudio.com/updates/v1_67#_settings-profile",
    "id": 2723
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### TypeScript 4.7 Support  \nThis update includes support for the upcoming TypeScript 4.7 release. See the [TypeScript 4.7 iteration plan](https://github.com/microsoft/TypeScript/issues/48027) for more details on what the TypeScript team is currently working on. Some highlights:  \n* Jump directly to a JavaScript implementation of a library function using the new **Go to Source Definition** command. You can learn more about this feature and share feedback in [TypeScript issue #49003](https://github.com/microsoft/TypeScript/issues/49003).\n* Snippets for completing methods as object members.\n* [Group-aware Organize Imports](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7-beta/#groups-aware-organize-imports).  \nTo start using the TypeScript 4.7 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_67#_typescript-4.7-support",
    "id": 2724
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Extension authoring  \n### Tab API  \nWe have finalized the read-only side of the tabs API (closing a tab is also supported) marking the completion of one of our most upvoted issues [microsoft/vscode#15178](https://github.com/microsoft/vscode/issues/15178). This exposes information such as how many groups there are, what tabs are open, what tabs are active, what type of editors a tab represents, and more! More information can be found in the `vscode.d.ts` file with the entrypoint into the API being `window.tabGroups`.",
    "url": "https://code.visualstudio.com/updates/v1_67#_tab-api",
    "id": 2725
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Notebook change and save events  \nWe have finalized two notebook-related events:  \n* `vscode.workspace.onDidSaveNotebookDocument` - An event that fires whenever a notebook has been saved.\n* `vscode.workspace.onDidChangeNotebookDocument` - An event that fires whenever a notebook has been changed. That includes structural changes, like adding or remove cells, as well as cell changes, like changing output or metadata.",
    "url": "https://code.visualstudio.com/updates/v1_67#_notebook-change-and-save-events",
    "id": 2726
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Support for non-recursive workspace file watchers  \nIn previous milestones, we [announced](https://code.visualstudio.com/updates/v1_64#_vscodeworkspacecreatefilesystemwatcher-now-supports-any-path) that the `createFileSystemWatcher` API can be used to watch any folder on disk as long as the folder is not inside the opened workspace. We have now relaxed this restriction and allow non-recursive file watchers anywhere, even inside the opened workspace. Non-recursive watchers have the advantage that configured settings for excludes (`files.watcherExclude`) do not apply so you can be sure that the file watcher will only emit for the paths you subscribe to.  \nWe are working on full support for recursive watchers with custom exclude rules for extensions, so stay tuned for more!",
    "url": "https://code.visualstudio.com/updates/v1_67#_support-for-non-recursive-workspace-file-watchers",
    "id": 2727
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### UX Guidelines  \nThe [UX Guidelines](https://code.visualstudio.com/api/ux-guidelines) for extension authors has been redone to have its own table of contents, where you can find best practices for using the various VS Code user interface elements. Specific topics discuss the recommended Do's and Don't's when creating UI for your extensions so that they seamlessly integrate within VS Code.  \n![Command Palette UX Guidelines on code.visualstudio.com](images/1_67/command-palette-ux-guidelines.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_ux-guidelines",
    "id": 2728
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Running extension tests  \nBefore, VS Code would exit the extension host process as soon as test running was finished. Now, when running extension tests, VS Code will first go through the regular `deactivate` flow and only afterwards exit. This allows extensions that spawn processes to better clean up after themselves.",
    "url": "https://code.visualstudio.com/updates/v1_67#_running-extension-tests",
    "id": 2729
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Dropping files into custom trees  \nBuilding on the recently finalized tree drag and drop API, we now have basic support for dropping files from the OS into extension tree views using the `text/uri-list` MIME type.",
    "url": "https://code.visualstudio.com/updates/v1_67#_dropping-files-into-custom-trees",
    "id": 2730
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Debugger extension authoring  \n### UI for supportSuspendDebuggee and supportTerminateDebuggee  \nThe `disconnect` request has two extra options that enable a client to control what happens to a debuggee when disconnecting:  \n* `suspendDebuggee` indicates whether the debuggee should stay suspended after disconnection.\n* `terminateDebuggee` indicates whether the debuggee should be terminated when the debugger is disconnected.  \nA debug adapter can use the capabilities `supportSuspendDebuggee` and `supportTerminateDebuggee` to signal that it supports these options. When supported, a dropdown will appear next to the stop button in the debug toolbar with extra disconnect commands.  \nFor example, in a \"launch\"-type debug session, for a debug adapter that supports both capabilities, the default toolbar button will be the normal **Stop** button, but the dropdown will include **Disconnect** (`terminateDebuggee: false`) and **Disconnect and Suspend** (`terminateDebuggee: false, suspendDebuggee: true`).  \n![A dropdown with extra disconnection commands](images/1_67/suspend-debuggee.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_ui-for-supportsuspenddebuggee-and-supportterminatedebuggee",
    "id": 2731
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Drop into editor  \nThe proposed [text editor drop API](https://github.com/microsoft/vscode/blob/800eec5645cf45d3cae5f49d4fc18e76e0e028ab/src/vscode-dts/vscode.proposed.textEditorDrop.d.ts#L10) lets extensions handle drops into text editors. These drop events can come from within VS Code\u2014such as dragging a file from VS Code's Explorer into a text editor\u2014or can be generated by dropping a file from your operating system into VS Code.  \n<video src=\"images/1_67/api-drop.mp4\" autoplay loop controls muted title=\"Using the drop extension sample to create a list of dropped files names\"></video>  \nThis iteration we've switched this API to a provider based model. We've also created a [new extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/drop-on-document) that demonstrates how to use this api.",
    "url": "https://code.visualstudio.com/updates/v1_67#_drop-into-editor",
    "id": 2732
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Badges on views  \nThe new proposal for [adding badges to views](https://github.com/microsoft/vscode/blob/9be0d5ed05ea064568515e455d8488e3d523d0a8/src/vscode-dts/vscode.proposed.badges.d.ts#L10-L40) is available to try out. Similar to how badges work on views provided by VS Code core, extensions can use this API proposal to add number badges to views.",
    "url": "https://code.visualstudio.com/updates/v1_67#_badges-on-views",
    "id": 2733
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Engineering  \n### Playwright for Electron smoke tests  \nWe have been using [Playwright](https://playwright.dev/) for our web-based smoke tests for a long time. However, our Electron-based smoke tests were still relying on our own custom solution. With the [Electron support](https://playwright.dev/docs/api/class-electron) in Playwright, we were able to reuse most of our web-based smoke test code and use it for our Electron smoke tests too. We are excited to now use the [Trace Viewer](https://playwright.dev/docs/trace-viewer) to diagnose failing smoke tests post-mortem.",
    "url": "https://code.visualstudio.com/updates/v1_67#_playwright-for-electron-smoke-tests",
    "id": 2734
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### New localization pipeline for extensions  \nVS Code supports a number of [display languages](https://code.visualstudio.com/docs/getstarted/locales) that you can enable by installing a language pack. These are great for localizing VS Code itself and built-in extensions to VS Code. This iteration, we have started the standardization effort for localizing extensions that aren't built-in that the team owns. You'll see the results of this effort in the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) and [Azure Repos](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos) extensions as their common dependency extension, [Remote Repositories](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories), is the first extension to onboard to this.  \nNext iteration, we will continue this standardization effort and onboard more extensions. The [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension is currently in progress and GitHub Repositories and Azure Repos will be quick to follow. We want to get to a point where every extension owned by the team is localized and any new extension created in the future will be able to onboard with ease so that users who aren't native English speakers can have a great experience in VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_67#_new-localization-pipeline-for-extensions",
    "id": 2735
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n## Documentation  \n### Rust in VS Code  \nThere is a new [Rust in Visual Studio Code](https://code.visualstudio.com/docs/languages/rust) topic describing [Rust programming language](https://www.rust-lang.org/) support in VS Code with the [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer) extension. The rust-analyzer extension includes rich language features such as code completions, linting, refactorings, debugging, and more.  \n![rust-analyzer extension for Visual Studio Code details pane](images/1_67/rust-analyzer-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_67#_rust-in-vs-code",
    "id": 2736
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between March 28 2022 and May 1 2022):  \n* [Logos for VS Code](https://marketplace.visualstudio.com/items?itemName=tale.logos-vscode) ([Aarnav Tale](https://marketplace.visualstudio.com/publishers/tale))\n* [Copy Word in Cursor](https://marketplace.visualstudio.com/items?itemName=alefragnani.copy-word) ([Alessandro Fragnani](https://marketplace.visualstudio.com/publishers/alefragnani))\n* [Delphi Keymap](https://marketplace.visualstudio.com/items?itemName=alefragnani.delphi-keybindings) ([Alessandro Fragnani](https://marketplace.visualstudio.com/publishers/alefragnani))\n* [Pascal](https://marketplace.visualstudio.com/items?itemName=alefragnani.pascal) ([Alessandro Fragnani](https://marketplace.visualstudio.com/publishers/alefragnani))\n* [Separators](https://marketplace.visualstudio.com/items?itemName=alefragnani.separators) ([Alessandro Fragnani](https://marketplace.visualstudio.com/publishers/alefragnani))\n* [Tagged Comment](https://marketplace.visualstudio.com/items?itemName=alefragnani.tagged-comment) ([Alessandro Fragnani](https://marketplace.visualstudio.com/publishers/alefragnani))\n* [NeuroViewer](https://marketplace.visualstudio.com/items?itemName=anibalsolon.neuro-viewer) ([Anibal Solon](https://marketplace.visualstudio.com/publishers/anibalsolon))\n* [sb4-extension](https://marketplace.visualstudio.com/items?itemName=arrow2nd.sb4-extension) ([arrow2nd](https://marketplace.visualstudio.com/publishers/arrow2nd))\n* [DeloresDevDev](https://marketplace.visualstudio.com/items?itemName=bolinfest.delores-dev-dev) ([bolinfest](https://marketplace.visualstudio.com/publishers/bolinfest))\n* [VSCode Remote Server](https://marketplace.visualstudio.com/items?itemName=btwiuse.vscode-remote-server) ([btwiuse](https://marketplace.visualstudio.com/publishers/btwiuse))\n* [Text Toolbox](https://marketplace.visualstudio.com/items?itemName=CarloCardella.vscode-texttoolbox) ([Carlo Cardella](https://marketplace.visualstudio.com/publishers/carlocardella))\n* [CloudStudio.common](https://marketplace.visualstudio.com/items?itemName=CloudStudio.common) ([CloudStudio](https://marketplace.visualstudio.com/publishers/CloudStudio))\n* [Vsnips](https://marketplace.visualstudio.com/items?itemName=corvofeng.Vsnips) ([corvofeng](https://marketplace.visualstudio.com/publishers/corvofeng))\n* [Const & Props Snippets](https://marketplace.visualstudio.com/items?itemName=deinsoftware.const-props-snippets) ([dein Software](https://marketplace.visualstudio.com/publishers/deinsoftware))\n* [dein Snippets Pack](https://marketplace.visualstudio.com/items?itemName=deinsoftware.dein-snippets-pack) ([dein Software](https://marketplace.visualstudio.com/publishers/deinsoftware))\n* [EVSCode Web IDE Connector (web, experimental)](https://marketplace.visualstudio.com/items?itemName=Elrond.evscode-web-ide-connector-experimental) ([Elrond](https://marketplace.visualstudio.com/publishers/Elrond))\n* [String To Any Case](https://marketplace.visualstudio.com/items?itemName=gauseen.vscode-string-transform) ([gauseen](https://marketplace.visualstudio.com/publishers/gauseen))\n* [Image Gallery](https://marketplace.visualstudio.com/items?itemName=GeriYoco.vscode-image-gallery) ([GeriYoco](https://marketplace.visualstudio.com/publishers/GeriYoco))\n* [\u6a21\u888b\u4e91-modelo](https://marketplace.visualstudio.com/items?itemName=heekei.modelo) ([heekei zhuang](https://marketplace.visualstudio.com/publishers/heekei))\n* [sigma](https://marketplace.visualstudio.com/items?itemName=humpalum.sigma) ([humpalum](https://marketplace.visualstudio.com/publishers/humpalum))\n* [My Snippets](https://marketplace.visualstudio.com/items?itemName=JaedeokKim.real-my-snippets) ([Jaedeok Kim](https://marketplace.visualstudio.com/publishers/JaedeokKim))\n* [GCS Uploader](https://marketplace.visualstudio.com/items?itemName=kb-devs.zz-gcs-sync) ([kb-devs](https://marketplace.visualstudio.com/publishers/kb-devs))\n* [TEI Japanese Editor Web](https://marketplace.visualstudio.com/items?itemName=ldas.vscode-japanese-tei-web) ([ldas](https://marketplace.visualstudio.com/publishers/ldas))\n* [tal7aouy.indent-colorizer](https://marketplace.visualstudio.com/items?itemName=tal7aouy.indent-colorizer) ([Mhammed Talhaouy](https://marketplace.visualstudio.com/publishers/tal7aouy))\n* [minim-tools.m-web](https://marketplace.visualstudio.com/items?itemName=minim-tools.m-web) ([minim-tools](https://marketplace.visualstudio.com/publishers/minim-tools))\n* [UUID Generator](https://marketplace.visualstudio.com/items?itemName=motivesoft.vscode-uuid-generator) ([Motivesoft](https://marketplace.visualstudio.com/publishers/motivesoft))\n* [TyranoScript syntax](https://marketplace.visualstudio.com/items?itemName=orukred-tyranosyntax.tyranosyntax) ([orukred](https://marketplace.visualstudio.com/publishers/orukred-tyranosyntax))\n* [VDM VSCode](https://marketplace.visualstudio.com/items?itemName=overturetool.vdm-vscode) ([Overture](https://marketplace.visualstudio.com/publishers/jonaskrask))\n* [Excalidraw](https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor) ([pomdtr](https://marketplace.visualstudio.com/publishers/pomdtr))\n* [WebGL GLSL Editor](https://marketplace.visualstudio.com/items?itemName=raczzalan.webgl-glsl-editor) ([R\u00e1cz Zal\u00e1n](https://marketplace.visualstudio.com/publishers/raczzalan))\n* [Vue](https://marketplace.visualstudio.com/items?itemName=znck.vue) ([Rahul Kadyan](https://marketplace.visualstudio.com/publishers/znck))\n* [VueDX](https://marketplace.visualstudio.com/items?itemName=znck.vue-language-features) ([Rahul Kadyan](https://marketplace.visualstudio.com/publishers/znck))\n* [BDD Goto Step](https://marketplace.visualstudio.com/items?itemName=rioj7.vscode-bdd-gotostep) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [Extra Context](https://marketplace.visualstudio.com/items?itemName=rioj7.extra-context) ([rioj7](https://marketplace.visualstudio.com/publishers/rioj7))\n* [web_prolin_emulator](https://marketplace.visualstudio.com/items?itemName=runthoser.web-prolin-emulator) ([runthoser](https://marketplace.visualstudio.com/publishers/runthoser))\n* [Go Nav Bar](https://marketplace.visualstudio.com/items?itemName=Scotthew.go-nav-bar) ([Scotthew](https://marketplace.visualstudio.com/publishers/Scotthew))\n* [yaist-vscode](https://marketplace.visualstudio.com/items?itemName=toyjack.yaist-vscode) ([toyjack](https://marketplace.visualstudio.com/publishers/toyjack))\n* [Pyodide Runner](https://marketplace.visualstudio.com/items?itemName=tym-inc.pyodide) ([tym-inc](https://marketplace.visualstudio.com/publishers/tym-inc))\n* [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost) ([Wix](https://marketplace.visualstudio.com/publishers/wix))\n* [Lawtext](https://marketplace.visualstudio.com/items?itemName=yamachi.lawtext) ([yamachi](https://marketplace.visualstudio.com/publishers/yamachi))\n* [ZG Assembler](https://marketplace.visualstudio.com/items?itemName=ZENG-GE.zg-assembler) ([ZENG GE](https://marketplace.visualstudio.com/publishers/ZENG-GE))",
    "url": "https://code.visualstudio.com/updates/v1_67#_web-extensions",
    "id": 2737
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [Lemmingh (@Lemmingh)](https://github.com/Lemmingh)",
    "url": "https://code.visualstudio.com/updates/v1_67#_issue-tracking",
    "id": 2738
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2022 Release (1.67)  \n### Pull requests  \nContributions to `vscode`:  \n* [@100paperkite](https://github.com/100paperkite)\n* Fixes #146305 [PR #146449](https://github.com/microsoft/vscode/pull/146449)\n* Fixes #147420 [PR #147930](https://github.com/microsoft/vscode/pull/147930)\n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart)\n* Create an empty div.message-actions-container when no actions provided [PR #140578](https://github.com/microsoft/vscode/pull/140578)\n* Update the colouring of links in banner markdown [PR #140581](https://github.com/microsoft/vscode/pull/140581)\n* Rename user facing instances of SCM to Source Control [PR #146742](https://github.com/microsoft/vscode/pull/146742)\n* [@AkatQuas (Akat)](https://github.com/AkatQuas): fix(markdown): avoid considering link references/sources in code sections [PR #146826](https://github.com/microsoft/vscode/pull/146826)\n* [@amanasifkhalid (Aman Khalid)](https://github.com/amanasifkhalid)\n* Close #143241: Testing UI filter survives window reload [PR #147344](https://github.com/microsoft/vscode/pull/147344)\n* Fix #146166: Snippet transform preserves existing camel/Pascal case [PR #147422](https://github.com/microsoft/vscode/pull/147422)\n* [@ambar (ambar)](https://github.com/ambar): fix parenthesis encoding in unicode highlighting [PR #146248](https://github.com/microsoft/vscode/pull/146248)\n* [@andschwa (Andy Schwartzmeyer)](https://github.com/andschwa): Delete built-in PowerShell snippets [PR #146459](https://github.com/microsoft/vscode/pull/146459)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks): Ask user to select PR templates when forking a repository [PR #143733](https://github.com/microsoft/vscode/pull/143733)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong)\n* 145367 Added cwd to terminal name if present [PR #145620](https://github.com/microsoft/vscode/pull/145620)\n* Replaced true and false with on and off in debug.inlineValues [PR #146543](https://github.com/microsoft/vscode/pull/146543)\n* [@bytemain (Artin)](https://github.com/bytemain): Fix `TerminalProfile` not throw [PR #143251](https://github.com/microsoft/vscode/pull/143251)\n* [@cdce8p (Marc Mueller)](https://github.com/cdce8p): Fix `git` getBranch [v1.65.0] [PR #144449](https://github.com/microsoft/vscode/pull/144449)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Fix freezed folding blocks while computing new ones [PR #146545](https://github.com/microsoft/vscode/pull/146545)\n* [@dlech (David Lechner)](https://github.com/dlech): Fix editor eating ContextMenu key when contexmenu is disabled [PR #146968](https://github.com/microsoft/vscode/pull/146968)\n* [@eamodio (Eric Amodio)](https://github.com/eamodio): Fixes #140787 watches proper worktree dir [PR #140789](https://github.com/microsoft/vscode/pull/140789)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): Add support for label details in TS completion item [PR #146270](https://github.com/microsoft/vscode/pull/146270)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Add 'Evaluate in Debug Console' and 'Add to Watch' to palette [PR #146775](https://github.com/microsoft/vscode/pull/146775)\n* [@heartacker](https://github.com/heartacker): add the git.fetch action to the first header menu [PR #137940](https://github.com/microsoft/vscode/pull/137940)\n* [@hello-smile6](https://github.com/hello-smile6): Update package.json [PR #146278](https://github.com/microsoft/vscode/pull/146278)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH): Fix version in error message [PR #147750](https://github.com/microsoft/vscode/pull/147750)\n* [@ImCa0 (ImCaO)](https://github.com/ImCa0): Fix spell check errors in translatable strings [PR #147234](https://github.com/microsoft/vscode/pull/147234)\n* [@jhgg (Jake)](https://github.com/jhgg): feat: inlay hints displayStyle [PR #145470](https://github.com/microsoft/vscode/pull/145470)\n* [@jlelong (Jerome Lelong)](https://github.com/jlelong): Update to vscode-latex-basics 1.3.0 [PR #146308](https://github.com/microsoft/vscode/pull/146308)\n* [@jsjoeio (Joe Previte)](https://github.com/jsjoeio)\n* refactor(workbench.ts): update outdated comment [PR #146364](https://github.com/microsoft/vscode/pull/146364)\n* fix(service-worker): allow webview resources to be served from same domain [PR #147467](https://github.com/microsoft/vscode/pull/147467)\n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb)\n* Comments panel: use the date of the last reply [PR #147922](https://github.com/microsoft/vscode/pull/147922)\n* Comments panel: do not truncate the author name [PR #147924](https://github.com/microsoft/vscode/pull/147924)\n* [@luoriyuhui21 (Keming Liang)](https://github.com/luoriyuhui21):  Add a setting to ignore dirty tabs in workbench.editor.limit.value. [PR #144545](https://github.com/microsoft/vscode/pull/144545)\n* [@manunamz (manunam)](https://github.com/manunamz): Update markdownRenderer.ts path in docstring. [PR #146332](https://github.com/microsoft/vscode/pull/146332)\n* [@matthewjamesadam (Matt Adam)](https://github.com/matthewjamesadam): Implement badge API for webviews and treeviews [PR #144775](https://github.com/microsoft/vscode/pull/144775)\n* [@mbelsky (Max Belsky)](https://github.com/mbelsky): Disable a breakpoint on shift+click [PR #147598](https://github.com/microsoft/vscode/pull/147598)\n* [@michaelkuhn (Michael Kuhn)](https://github.com/michaelkuhn): Unify and fix Solarized token colors [PR #142883](https://github.com/microsoft/vscode/pull/142883)\n* [@neeleshb (Neelesh Bodas)](https://github.com/neeleshb): Misc. A11y fixes for VSCode [PR #145775](https://github.com/microsoft/vscode/pull/145775)\n* [@nesk (Johann Pardanaud)](https://github.com/nesk): Improve UX for markdown snippets [PR #146431](https://github.com/microsoft/vscode/pull/146431)\n* [@quanzhuo (Quan Zhuo)](https://github.com/quanzhuo)\n* Fix issue #145134, fetch all repos for authenticated user [PR #145203](https://github.com/microsoft/vscode/pull/145203)\n* fix #140612: toggle the Toggle Button when the context line number la\u2026 [PR #147141](https://github.com/microsoft/vscode/pull/147141)\n* [@Suven-p (Suven-p)](https://github.com/Suven-p): Add action to hide all tests [PR #148003](https://github.com/microsoft/vscode/pull/148003)\n* [@tharbakim](https://github.com/tharbakim): Fix detection of CSS Preprocessor Comments at Start of File in Emmet Extension [PR #146121](https://github.com/microsoft/vscode/pull/146121)\n* [@thekorn (Markus Korn)](https://github.com/thekorn): git extension: if 'git.untrackedChanges' is set to 'hidden' ignore untracked files when running 'git status' (fixes microsoft/vscode#131020) [PR #131030](https://github.com/microsoft/vscode/pull/131030)\n* [@yepitschunked](https://github.com/yepitschunked): [Git watcher] ignore watchman cookies [PR #127702](https://github.com/microsoft/vscode/pull/127702)  \nContributions to `vscode-css-languageservice`:  \n* [@romainmenke (Romain Menke)](https://github.com/romainmenke): fix selector specificity display for `:lang` and similar pseudo selectors [PR #268](https://github.com/microsoft/vscode-css-languageservice/pull/268)  \nContributions to `vscode-generator-code`:  \n* [@rupeshs (Rupesh Sreeraman)](https://github.com/rupeshs): Fix for ext-snippets quick start documentation [PR #340](https://github.com/microsoft/vscode-generator-code/pull/340)  \nContributions to `vscode-js-debug`:  \n* [@timvahlbrock](https://github.com/timvahlbrock)\n* feat: apply pathMapping when loading sourcemaps [PR #1241](https://github.com/microsoft/vscode-js-debug/pull/1241)\n* feat: make hover evaluation timeout configurable [PR #1243](https://github.com/microsoft/vscode-js-debug/pull/1243)  \nContributions to `vscode-pull-request-github`:  \n* [@hoontae24](https://github.com/hoontae24): Support the copied permalink for Github Enterprise URL [PR #3460](https://github.com/microsoft/vscode-pull-request-github/pull/3460)  \nContributions to `debug-adapter-protocol`:  \n* [@KamasamaK](https://github.com/KamasamaK): Fix some typos [PR #264](https://github.com/microsoft/debug-adapter-protocol/pull/264)\n* [@peterderivaz (Peter de Rivaz)](https://github.com/peterderivaz): Fix description for SetBreakpointsArguments [PR #261](https://github.com/microsoft/debug-adapter-protocol/pull/261)\n* [@polinasok](https://github.com/polinasok): Update adapters.md for Go debug adapter [PR #262](https://github.com/microsoft/debug-adapter-protocol/pull/262)\n* [@WardenGnaw (Andrew Wang)](https://github.com/WardenGnaw): Remove extra newline in adapters.md [PR #263](https://github.com/microsoft/debug-adapter-protocol/pull/263)  \nContributions to `language-server-protocol`:  \n* [@KamasamaK](https://github.com/KamasamaK)\n* Add `workspace.inlineValue` to capabilities [PR #1440](https://github.com/microsoft/language-server-protocol/pull/1440)\n* Add some missing linkable types [PR #1441](https://github.com/microsoft/language-server-protocol/pull/1441)\n* Use FoldingRangeKind for kind [PR #1450](https://github.com/microsoft/language-server-protocol/pull/1450)  \nContributions to `monaco-editor`:  \n* [@DetachHead](https://github.com/DetachHead): add `out` keyword to typescript [PR #3066](https://github.com/microsoft/monaco-editor/pull/3066)\n* [@Yash-Singh1 (Yash Singh)](https://github.com/Yash-Singh1): feat: add fr units for css grid [PR #3078](https://github.com/microsoft/monaco-editor/pull/3078)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_67#_pull-requests",
    "id": 2739
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Problems panel table view  \nThis milestone we added a new capability for users to toggle the view mode of the Problems panel between a tree and a table. Compared to the tree view, the table surfaces the source (language service or extension) of each problem, which allows users to filter the problems by their source.  \n![Problems panel table view](images/1_68/problems-view-table.png)  \n_Theme: [GitHub Dark Dimmed Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \nYou can toggle the view UI with the **View as Table/View as Tree** button in the upper right of the Problems panel or change the default view mode with the **Problems: Default View Mode** setting (`problems.defaultViewMode`)  \n![Problems panel View at Table button](images/1_68/view-as-table-button.png)",
    "url": "https://code.visualstudio.com/updates/v1_68#_problems-panel-table-view",
    "id": 2740
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Deprecated extensions  \nIn this milestone, we have added support for deprecated extensions in VS Code. An extension can be simply deprecated or deprecated in favor of another extension or when its functionality is built into VS Code. VS Code will render extensions as deprecated in the Extensions view, as shown below.  \nA deprecated extension that is no longer being maintained.  \n![Deprecated extension with no maintenance](images/1_68/deprecated-extension.png)  \nAn extension deprecated in favor of another extension. In this case, VS Code does not allow users to install this extension.  \n![Deprecated extension with alternative](images/1_68/deprecated-extension-alternate.png)  \nA deprecated extension with its functionality built-in to VS Code that can be enabled by configuring settings.  \n![Deprecated extension with builtin to VS Code](images/1_68/deprecated-extension-builtin.png)  \nVS Code will not automatically migrate or uninstall a deprecated extension. There will be a **Migrate** button to guide you to switch over to the recommended extension.  \n![Migrate deprecated extension](images/1_68/deprecated-extension-migrate.png)  \n_Theme: [GitHub Dark Dimmed Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \n**Note:** The list of deprecated extensions is maintained by the VS Code. If you have an extension that you believe should be deprecated, reach out to us by commenting in this [discussion](https://github.com/microsoft/vscode-discussions/discussions/1).",
    "url": "https://code.visualstudio.com/updates/v1_68#_deprecated-extensions",
    "id": 2741
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Sponsoring extensions  \nVS Code now allow users to sponsor their favorite extensions. When an extension can be sponsored, VS Code will render a **Sponsor** button in the Extensions view Details page like below:  \n![Sponsor extension button on Extensions view Details page](images/1_68/sponsor-extension.png)  \n_Theme: [GitHub Dark Dimmed Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \nThe **Sponsor** button will direct you to the extension's sponsorship URL, where you can provide your support. Refer to [Extension sponsorship](#extension-sponsorship) to learn how to opt into this feature for your extension.",
    "url": "https://code.visualstudio.com/updates/v1_68#_sponsoring-extensions",
    "id": 2742
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Hide files in Explorer based on .gitignore  \nThe File Explorer now supports parsing and hiding files that are excluded by your `.gitignore` file. This can be enabled via the **Explorer: Exclude Git Ignore** (`explorer.excludeGitIgnore`) setting. This setting works alongside `files.exclude` to hide unwanted files from the Explorer.  \n**Note**: At this time, negated globs such as `!package.json` are not parseable.",
    "url": "https://code.visualstudio.com/updates/v1_68#_hide-files-in-explorer-based-on-.gitignore",
    "id": 2743
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Lock hover position  \nSome custom hovers are difficult or impossible to mouse over due to the presence of other UI elements (for example, a scroll bar). Holding `Alt` while a hover is active will now \"lock\" it, giving it a wider border and preventing mouse movement outside of the hover from hiding it. This is primarily an accessibility feature to make hovers play nicely with screen magnifiers but it is also useful for copying text from hovers. Note that this feature only applies outside of the editor because editor hovers can always be moused over unless specified otherwise via the `editor.hover.sticky` setting.  \n<video src=\"images/1_68/hover-lock.mp4\" autoplay loop controls muted title=\"Holding the Alt key while hovering an item in the Extensions view will add a 2 pixel border around it and allow mousing over it and selecting text\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_68#_lock-hover-position",
    "id": 2744
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Settings editor improvements  \nThe Settings editor now shows a default value override indicator for language-specific settings. You can view [language-specific settings](https://code.visualstudio.com/docs/getstarted/settings#_languagespecific-editor-settings) by adding a language filter in the Settings editor search bar, either by typing it out explicitly (`@lang:javascript`), or by clicking the filter button on the right of the search bar, and selecting the **Language** option.  \nWhen the default value override indicator shows up, it indicates that the default value of the language-specific setting has been overridden by an extension. The indicator also indicates which extension overrode the default value.  \n<video src=\"images/1_68/settings-editor-language-specific-default.mp4\" autoplay loop controls muted title=\"Settings editor default override indicator showing up for the editor wordwrap setting when there is a Markdown language filter in place. The default override indicator indicates that the default value of the language-specific setting was overridden by the Markdown Language Features extension\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_  \nThis iteration also fixes a behavior where some links in the Settings editor were not redirecting properly when there was already a search query in the Settings editor search bar. The links also now have proper styling so that it is clearer when one is hovering over them.  \n<video src=\"images/1_68/settings-editor-working-links.mp4\" autoplay loop controls muted title=\"After searching for the word \"font\" in the Settings editor, and selecting the terminal category in the table of contents, the setting terminal.integrated.fontFamily shows up, and its description contains a link to the editor.fontFamily setting. Clicking on the link now brings you correctly to the setting.\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_68#_settings-editor-improvements",
    "id": 2745
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Comments widget primary button  \nThe comments widget uses the primary button color for the first (rightmost) action:  \n![Add Comment has the primary button color](images/1_68/comment-primary-button.png)",
    "url": "https://code.visualstudio.com/updates/v1_68#_comments-widget-primary-button",
    "id": 2746
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Terminal  \n### Find match background color  \nLast release find in the terminal was implemented to show a border around all matches, but this was a temporary solution until support for changing the background of cells dynamically was possible. A colored background is now the default for themes when highlighting matches and the overall experience should look similar to the editor.  \n![Find now uses the blue from the editor's find for the active match and the orange for highlights](images/1_68/terminal-find-bg.png)  \nIf you're a theme author that adopted `terminal.findMatchBorder` or `terminal.findMatchHighlightBorder`, we recommend migrating to `terminal.findMatchBackground` and `terminal.findMatchHighlightBackground` if that would fit the theme better or help contrast.",
    "url": "https://code.visualstudio.com/updates/v1_68#_find-match-background-color",
    "id": 2747
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Improvements to contrast and the minimum contrast ratio  \nThe find match background work added a lot more flexibility in how the terminal works with background and foreground colors. Because of this, improvements were made around contrast in the terminal, aligning the terminal visuals closer to the editor. In addition, there is now the minimum contrast ratio feature that changes the foreground of text dynamically to help with visibility.  \n* Luminance will now go in the other direction if contrast isn't met. For example, if contrast isn't met for dark grey text on a lighter grey background with pure black (#000000), the color will also try to move towards white and the value that best meets the desired contrast ratio will be used.  \n![Darker grey on lighter dark can now use a light foreground color if needed](images/1_68/terminal-contrast-reverse.png)  \n* Selection is now drawn below the text when GPU acceleration is disabled and supports opaque colors. Previously, this had to be partially transparent and it would wash out the foreground color. Thanks to this change, the selection color now uses the same color as in the editor.  \n![Foreground color are retained in selections](images/1_68/terminal-contrast-dom.png)  \n* [Nerd font](https://www.nerdfonts.com) symbols should now apply minimum contrast ratio to blend in with nearby text while [Powerline](https://powerline.readthedocs.io) symbols and box drawing characters will **not** apply minimum contrast ratio as they are often adjacent to inverted cells without any foreground characters.  \n![Powerlines no longer have odd colors between the colored sections](images/1_68/terminal-contrast-powerlines.png)  \n* Themes can now specify a fixed selection foreground color to be used by default in the high contrast themes.  \n![The dark high contrast theme now uses black as its selection foreground](images/1_68/terminal-contrast-foreground.png)  \n* Several bugs were fixed to make the resulting foreground color more correct.  \nAs a reminder, minimum contrast ratio can be disabled if you would prefer original colors by setting `\"terminal.integrated.minimumContrastRatio\": 1`.",
    "url": "https://code.visualstudio.com/updates/v1_68#_improvements-to-contrast-and-the-minimum-contrast-ratio",
    "id": 2748
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Tasks  \n### Glob pattern for default tasks  \nDefault build and test tasks can now be scoped to only be \"default\" when the active file matches a filename glob pattern:  \n```jsonc\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"label\": \"echo txt\",\n\"type\": \"shell\",\n\"command\": \"echo TextFile\",\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": \"**.txt\" // This is a glob pattern which will only match when the active file has a .txt extension.\n}\n},\n{\n\"label\": \"echo js\",\n\"type\": \"shell\",\n\"command\": \"echo JavascriptFile\",\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": \"**.js\" // This is a glob pattern which will only match when the active file has a .js extension.\n},\n}\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_68#_glob-pattern-for-default-tasks",
    "id": 2749
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Git: Branch name generation  \n<video src=\"images/1_68/branch-generation.mp4\" autoplay loop controls muted title=\"generate branch with random name\"></video>  \nA new setting `git.branchRandomName.enable` will make VS Code suggest random branch names whenever creating a new branch. The random names are generated from dictionaries, which you can control via the `git.branchRandomName.dictionary` setting. The supported dictionaries are: `adjectives` (default), `animals` (default), `colors`, and `numbers`.",
    "url": "https://code.visualstudio.com/updates/v1_68#_git:-branch-name-generation",
    "id": 2750
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Git: Branch protection  \nWith the new `git.branchProtection` setting, you can configure specific branches to be protected. VS Code will avoid committing directly on protected branches and will offer you the chance to create a new branch to commit to instead. You can fine tune this behavior with the `git.branchProtectionPrompt` setting.",
    "url": "https://code.visualstudio.com/updates/v1_68#_git:-branch-protection",
    "id": 2751
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### GitHub: Pull request template support  \nThe GitHub extension now understands [pull request templates](https://docs.github.com/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository) and will use them as a base whenever creating a PR from a newly forked repository.",
    "url": "https://code.visualstudio.com/updates/v1_68#_github:-pull-request-template-support",
    "id": 2752
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Notebooks  \n### Cell revealing changes  \nWe have tuned how cells outside of the viewport are revealed in a couple scenarios.  \nWhen you click a cell in the Outline view, if that cell is outside of the viewport, the notebook will now scroll to reveal that cell at about the top 1/5th of the viewport. This matches the Outline's behavior in the text editor.  \nWhen the cursor is in a cell editor, you can move the cursor past the first or last line of the editor to move it into the next cell editor. Now, when moving the cursor into an editor whose cell is out of the viewport, the notebook will scroll just enough to reveal that line in the editor, instead of jumping up to reveal the cell in the middle of the viewport.",
    "url": "https://code.visualstudio.com/updates/v1_68#_cell-revealing-changes",
    "id": 2753
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Find and Replace supports seeding query from cursor/selection  \nThe Find control in notebook editor now supports seeding the search string from the editor selection. The behavior is controlled by the editor setting `editor.find.seedSearchStringFromSelection`.  \n<video src=\"images/1_68/notebook-seed-search-from-selection.mp4\" autoplay loop controls muted title=\"Seed search string from editor selection in notebook\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_68#_find-and-replace-supports-seeding-query-from-cursor/selection",
    "id": 2754
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Debugging  \n### Run and Debug without a launch.json  \nWhen you haven't set up a `launch.json` configuration file and press `F5`, or select the **Run and Debug** button in the Debug view, VS Code picks a debugger based on the programming language in the currently active file. If you don't have a file open, you will be asked which debugger you want to use. This experience can be a little confusing, so we've made a couple improvements.  \n![Select debugger prompt before (alphabetical) and after (activated debugger at the top)](images/1_68/select-debugger.png)  \nIf an extension was already activated before you tried to start debugging, then that extension's debugger will be sorted to the top. This can be useful, for example, when the extension was activated by previously running a command from that extension, or opening a file of a language that activates that extension, or by a `workspaceContains` pattern that your workspace matches. If you have used the debugger in this session, it will also be sorted to the top.  \nThe Chrome/Edge debuggers have been renamed to **Web App (Chrome)** and **Web App (Edge)** to try to avoid confusion with other debuggers such as the [Flutter](https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter) extension that also run apps in a browser.",
    "url": "https://code.visualstudio.com/updates/v1_68#_run-and-debug-without-a-launch.json",
    "id": 2755
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Languages  \n### TypeScript 4.7  \nVS Code now bundles [TypeScript 4.7.3](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/). This major TypeScript brings new language features including [improved Control-Flow Analysis](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/#control-flow-analysis-for-bracketed-element-access) and support for [ECMAScript Module Support in Node.js](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/#ecmascript-module-support-in-node-js). It also includes new tooling features and fixes a number of important bugs!",
    "url": "https://code.visualstudio.com/updates/v1_68#_typescript-4.7",
    "id": 2756
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Go to Source Definition  \nOne of VS Code's longest standing and most upvoted feature requests is to make VS Code navigate to the JavaScript implementation of functions and symbols from external libraries. Currently, **Go to Definition** jumps to the type definition file (the `.d.ts` file) that defines the types for the target function or symbol. This is useful if you need to inspect the types or the documentation for these symbols but hides the actual implementation of the code. The current behavior also confuses many JavaScript users who may not understand the TypeScript type from the `.d.ts`.  \nWhile changing **Go to Definition** to navigate to the JavaScript implementation of a symbol may sound simple, there's a reason why this feature request has been open for so long. JavaScript (and especially the compiled JavaScript shipped by many libraries) is much more difficult to analyze than a `.d.ts`. Trying to analyze all the JavaScript code under `node_modules` would be both slow and would also dramatically increase memory usage. There are also many JavaScript patterns that the VS Code IntelliSense engine is not able to understand.  \nThat's where the new **Go to Source Definition** command comes in. When you run this command from either the editor context menu or from  the Command Palette, TypeScript will attempt to track down the JavaScript implementation of the symbol and navigate to it. This may take a few seconds and we may not always get the correct result, but it should be useful in many cases.  \n<video src=\"images/1_68/ts-go-to-source.mp4\" autoplay loop controls muted title=\"Jumping to the implementation of the 'render' method from the react-dom library.\"></video>  \nWe're actively working on improving this feature so give it a try in your codebase and [share your feedback](https://github.com/microsoft/TypeScript/issues/49003).",
    "url": "https://code.visualstudio.com/updates/v1_68#_go-to-source-definition",
    "id": 2757
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Object method snippets  \nObject method snippets help you quickly add methods to object literals that implement a given interface:  \n<video src=\"images/1_68/ts-snippet-method.mp4\" autoplay loop controls muted title=\"Completing a method signature inside an object literal\"></video>  \nWhen inside an object literal, you should see two suggestions for each possible method: one that inserts just the method name and one that inserts the full signature of the method. You can also fully disable object method snippets by setting `\"typescript.suggest.classMemberSnippets.enabled\": false` or `\"javascript.suggest.classMemberSnippets.enabled\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_68#_object-method-snippets",
    "id": 2758
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Group aware Organize Imports  \nThe **Organize Imports** command for JavaScript and TypeScript lets you quickly clean up your list of imports. When run, it both removes unused imports and also sorts the imports alphabetically.  \nHowever some codebases like having some degree of manual control over how their imports are organized. Grouping external versus internal imports is one of the most common examples of this:  \n```ts\n// local code\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\nimport * as aaa from \"./aaa\";\n\n// built-ins\nimport * as path from \"path\";\nimport * as child_process from \"child_process\"\nimport * as fs from \"fs\";\n\n// some code...\n```  \nIn older versions of VS Code, running **Organize Imports** here would result in the following:  \n```ts\n// local code\nimport * as child_process from \"child_process\";\nimport * as fs from \"fs\";\n// built-ins\nimport * as path from \"path\";\nimport * as aaa from \"./aaa\";\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\n\n// some code...\n```  \nYuck! This happens because all of the imports are being sorted alphabetically, and VS Code even tries to  preserve comments and newlines while doing so.  \nWith TypeScript 4.7 however, **Organize Imports** is now a group-aware. Running it on the above code looks a little bit more like what you\u2019d expect:  \n```ts\n// local code\nimport * as aaa from \"./aaa\";\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\n\n// built-ins\nimport * as child_process from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// some code...\n```  \nNotice how the imports have now been sorted while still remaining within their groups. Much better!",
    "url": "https://code.visualstudio.com/updates/v1_68#_group-aware-organize-imports",
    "id": 2759
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Strict null checks enabled in implicit projects  \n[Strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) are enabled in implicit projects by default for both JavaScript and TypeScript. This should result in more accurate IntelliSense and improved type checking that can catch common programming mistakes.  \n![A strict null error. getElementById may return null if no element with the ID exists](images/1_68/ts-strict-null.png)  \nThis new behavior only applies to any file that is not part of a `jsconfig` or `tsconfig` project. You can disable it by setting: `\"js/ts.implicitProjectConfig.strictNullChecks\": false`. For files that are part of a `jsconfig` or `tsconfig`, you still need to enable strict null checks in the configuration file.",
    "url": "https://code.visualstudio.com/updates/v1_68#_strict-null-checks-enabled-in-implicit-projects",
    "id": 2760
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Go to Definition for Markdown reference links  \nYou can now use **Go to Definition** on [reference links](https://www.markdownguide.org/basic-syntax/#reference-style-links) in Markdown files. This will jump from the reference to the link definition in the current file.",
    "url": "https://code.visualstudio.com/updates/v1_68#_go-to-definition-for-markdown-reference-links",
    "id": 2761
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Expanded JSON Schema support  \nThe built-in JSON language service has improved the support for [JSON Schema Draft 2019-09](https://json-schema.org/draft/2019-09/release-notes.html) and [JSON Schema Draft 2020-12](https://json-schema.org/draft/2020-12/release-notes.html). There's no longer a warning shown when such a schema is used.  \nThere are still some features that are not fully supported. A warning is shown when they are used by a schema. The unsupported properties are:  \n* Subschemas with $id\n* $recursiveRef/Anchor (Draft 2019-09)\n* $dynamicRef/Anchor (Draft 2020-12)",
    "url": "https://code.visualstudio.com/updates/v1_68#_expanded-json-schema-support",
    "id": 2762
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## VS Code for the Web  \n### Core localization support  \nWe've introduced the initial localization support of VS Code for the Web. VS Code is used all over the world and for many users, English is not their first language (or a language they're familiar with at all!). For years, VS Code users have been installing [Language Packs from the Marketplace](https://marketplace.visualstudio.com/search?term=language%20pack&target=VSCode&category=All%20categories&sortBy=Relevance) in order to use VS Code in a language other than English. For VS Code for the Web, we decided to take a different approach, one that is more aligned with how the web works today.  \nFor users who set their browser to one of our core supported languages, [vscode.dev](https://vscode.dev) will automatically apply translations in that language. The languages we support are documented in the [vscode-loc](https://github.com/microsoft/vscode-loc) repository.  \nFor example, to configure the display language in Microsoft Edge, you would use **Settings** > **Languages**:  \n![Microsoft Edge Settings Languages page](images/1_68/edge-translations.png)  \nOnce that is set, when you go to [vscode.dev](https://vscode.dev) (or [insiders.vscode.dev](https://insiders.vscode.dev)), it will be displayed in German:  \n![vscode.dev in a browser displayed in German](images/1_68/translations-core.png)  \n_Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda)_  \nIn the next few months, we will enable localization for extensions (both ones that ship with VS Code and ones that don't) so that extension authors can also support non-English speaking users. Stay tuned!",
    "url": "https://code.visualstudio.com/updates/v1_68#_core-localization-support",
    "id": 2763
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Remote Repositories  \nWhen using the **Remote Repositories > Continue Working On...** command to clone a GitHub or Azure Repos repository locally and open it in desktop VS Code, you can now configure `remoteHub.gitProtocol` to always clone using `http` or `ssh` URLs.",
    "url": "https://code.visualstudio.com/updates/v1_68#_remote-repositories",
    "id": 2764
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Dev Container in CI  \nA GitHub Action and an Azure DevOps Task are available for running a repository's dev container in continuous integration (CI) builds. This allows you to reuse the same setup that you are using for local development to also build and test your code in CI. See the [devcontainers/ci README](https://github.com/devcontainers/ci/blob/main/README.md) for more details.  \nExample usage of the GitHub Action:  \n```yaml\n- name: Build and run dev container task\nuses: devcontainers/ci@v0.2\nwith:\nimageName: ghcr.io/example/example-devcontainer\nrunCmd: make ci-build\n```  \nExample usage of the Azure DevOps Task:  \n```yaml\n- task: DevcontainersCI@0\ninputs:\nimageName: 'yourregistry.azurecr.io/example-dev-container'\nrunCmd: 'make ci-build'\nsourceBranchFilterForPush: refs/heads/main\n```",
    "url": "https://code.visualstudio.com/updates/v1_68#_dev-container-in-ci",
    "id": 2765
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Specification  \nActive development continues on the specification, and we've published an [initial version](https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-reference.md) in the [devcontainers/spec](https://github.com/devcontainers/spec) repository.  \nAs with the CLI, stay tuned for further updates and progress, and we'd love to hear your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_68#_specification",
    "id": 2766
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Further reading  \nYou can read all about development containers and the specification at [https://containers.dev](https://containers.dev).",
    "url": "https://code.visualstudio.com/updates/v1_68#_further-reading",
    "id": 2767
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Contributions to extensions  \n### Python  \n#### No interpreter discovery at startup  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension now auto-triggers discovery only when:  \n* Using **Python: Select Interpreter** command to choose a different interpreter.\n* A particular scope (workspace or global) is opened for the first time.\n* No Python is installed.  \nSince discovery isn't triggered automatically at startup, this leads to instantaneous load, and faster startup of other features like the language server. However, if the [Jupyter](https://marketplace.visualstudio.com/itemdetails?itemName=ms-toolsai.jupyter) extension is installed/enabled, discovery is still triggered by Jupyter at startup.  \n#### Enable localization  \nThe Python extension now supports translations in all the languages that VS Code supports. We have updated the way we get the translations of our commands, notifications, titles, etc. using [vscode-nls](https://www.npmjs.com/package/vscode-nls). These translations are maintained by a localization team to ensure that they are up to date and correct.",
    "url": "https://code.visualstudio.com/updates/v1_68#_python",
    "id": 2768
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Jupyter  \n#### Web extension  \nWe've made progress on supporting more of the core functionality in the web version of the [Jupyter](https://marketplace.visualstudio.com/itemdetails?itemName=ms-toolsai.jupyter) extension.  \nThis month the following features were ported to the web extension:  \n* https support\n* kernel completions\n* ipywidgets\n* notebook debugging\n* variable viewing\n* exporting\n* interactive window  \nIf you'd like to experiment with the functionality, launch Jupyter from your local machine with:  \n```bash\njupyter notebook --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```  \nAnd then connect to it using the command **Jupyter: Specify Jupyter server for connections** from within [vscode.dev](https://vscode.dev).  \nFor more information (and to comment), see this discussion [item](https://github.com/microsoft/vscode-jupyter/discussions/10315).",
    "url": "https://code.visualstudio.com/updates/v1_68#_jupyter",
    "id": 2769
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_68.md).",
    "url": "https://code.visualstudio.com/updates/v1_68#_remote-development",
    "id": 2770
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights of this release include:  \n* Auto-merge checkbox in **Create Pull Request** view  \nCheck out the [changelog for the 0.44.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0440) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_68#_github-pull-requests-and-issues",
    "id": 2771
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Remote Repositories extensions  \nBoth the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=github.remotehub) and [Azure Repos](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos) extensions support translations in all languages that VS Code supports.",
    "url": "https://code.visualstudio.com/updates/v1_68#_remote-repositories-extensions",
    "id": 2772
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Preview features  \n### Markdown link validation  \nWhile working with Markdown, it's easy to mistakenly add an invalid file link or image reference. Perhaps you forgot that the filename used a `-` (dash) instead of an `_` (underline), or perhaps the file you are linking to was moved to a different directory. Often you only catch these mistakes after viewing the Markdown preview or even after publishing. VS Code's new experimental Markdown link validation can help catch these mistakes.  \nWith link validation, VS Code will analyze Markdown links to headers, images, and other local files. Invalid links will be reported as either warnings or errors.  \n![A warning shown in the editor when linking to a file that does not exist](images/1_68/md-link-validation.png)  \nVS Code can even catch invalid links to specific headers in other Markdown files!  \nLink validation is off by default. You can try link validation by setting `\"markdown.experimental.validate.enabled\": true`.  \nThere are a few settings you can use to customize link validation:  \n* `markdown.experimental.validate.fileLinks.enabled` -Enable/disable validation of links to local files: `[link](/path/to/file.md)`  \n* `markdown.experimental.validate.headerLinks.enabled` -Enable/disable validation of links to headers in the current file: `[link](#some-header)`  \n* `markdown.experimental.validate.referenceLinks.enabled` -Enable/disable validation of reference links: `[link][ref]`.  \n* `markdown.experimental.validate.ignoreLinks`-A list of links that skip validation. This is useful if you link to files that don't exist on disk but do exist once the Markdown has been published.  \nLet us know what you think of the new feature!",
    "url": "https://code.visualstudio.com/updates/v1_68#_markdown-link-validation",
    "id": 2773
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Paste files to insert Markdown links  \nWe've added experimental support for pasting to insert images or file links in Markdown.  \n<video src=\"images/1_68/md-paste.mp4\" autoplay loop controls muted title=\"Pasting to insert an image into a Markdown file\"></video>  \nThis requires enabling both `markdown.experimental.editor.pasteLinks.enabled` and `\"editor.experimental.pasteActions.enabled\"`. You can currently copy files from the VS Code File Explorer. Pasting image files inserts image references while pasting normal text files inserts links to those files.",
    "url": "https://code.visualstudio.com/updates/v1_68#_paste-files-to-insert-markdown-links",
    "id": 2774
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Terminal shell integration  \n[Shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) (enabled with the `terminal.integrated.shellIntegration.enabled` setting) and command decorations have been polished and improved upon this iteration.  \nA few of the updates include:  \n* [146377](https://github.com/microsoft/vscode/issues/146377) Persist shell status such that `bash-git-prompt` and other programs work\n* [148635](https://github.com/microsoft/vscode/issues/148635) Allow the use of a custom `ZDOTDIR` for `zsh`\n* [145801](https://github.com/microsoft/vscode/issues/145801) Fix decorations getting out of sync on slower machines\n* [146873](https://github.com/microsoft/vscode/issues/146873) Improve handling of existing debug traps in `bash`\n* [148839](https://github.com/microsoft/vscode/issues/148839) Polish messaging with **How does this work?** command and activation status in the tab hover\n* [151223](https://github.com/microsoft/vscode/pull/151223) After buffer clear, ensure commands are tracked correctly",
    "url": "https://code.visualstudio.com/updates/v1_68#_terminal-shell-integration",
    "id": 2775
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Window Controls Overlay on Windows  \nWe've adopted the API provided by Electron to support [Window Controls Overlay](https://wicg.github.io/window-controls-overlay/) on Windows. The major user-facing benefit of this change is access to the [Snap Layouts](https://learn.microsoft.com/windows/apps/desktop/modernize/apply-snap-layout-menu) feature in Windows 11. Due to some [persistent issues](https://github.com/microsoft/vscode/issues/150475), the Window Controls Overlay is off by default, but you can turn them on with the experimental setting `window.experimental.windowControlsOverlay.enabled`.  \n![Hover over the maximize/restore window control to see Windows 11 Snap layouts](images/1_68/snap-layouts.png)",
    "url": "https://code.visualstudio.com/updates/v1_68#_window-controls-overlay-on-windows",
    "id": 2776
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Command Center  \nWe are adding Command Center - a simpler way to trigger Quick Pick for files, commands, and more.  \n![Command Center in the VS Code title bar](images/1_68/command_center.png)  \nThis can be enabled via the `window.experimental.commandCenter` setting and let us know what you think.",
    "url": "https://code.visualstudio.com/updates/v1_68#_command-center",
    "id": 2777
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Merge editor  \nWe have started to work on a better merge experience. It is still early days and we aren't yet ready for feedback but you can give it a try via `git.experimental.mergeEditor`. With this enabled, files with merge conflicts open in a new merge editor to make resolving conflicts simpler.  \nWe will continue to work on this. Use [Insiders](https://code.visualstudio.com/insiders/) to follow our progress. We would like to sincerely thank [Mingpan](https://github.com/Mingpan) and our friends at Google who are helping us with this effort. \u2764\ufe0f",
    "url": "https://code.visualstudio.com/updates/v1_68#_merge-editor",
    "id": 2778
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Extension authoring  \n### Inline Completions Finalization  \nWe have finalized the Inline Completions API. This allows extensions to provide inline completions that are decoupled from the suggestion widget. An inline completion is rendered as if it was already accepted, but with a gray color. Users can cycle through suggestions and accept them with the `Tab` key. An example extension that uses Inline Completions is [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot). More information can be found in the `vscode.d.ts` file with the entrypoint into the API being [`languages.registerInlineCompletionItemProvider`](https://github.com/microsoft/vscode/blob/e3a8e502ad7263836d0bc34cbcefbfc7bd65104f/src/vscode-dts/vscode.d.ts#L12357).",
    "url": "https://code.visualstudio.com/updates/v1_68#_inline-completions-finalization",
    "id": 2779
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### InputBox validation message severity finalization  \nOur InputBox APIs (via `window.showInputBox` and `window.createInputBox`) to [provide severity in validation of user's input](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.d.ts#L1990-L2002) has been finalized.  \nFor example, if you wanted to show the user an information message based on their input, your validation message can return:  \n```ts\n{ message: 'this is an info message'; severity: InputBoxValidationSeverity.Info }\n```  \nwhich would look like this:  \n![Input box with 'this is an info message' severity message](images/1_68/inputboxseverity.png)",
    "url": "https://code.visualstudio.com/updates/v1_68#_inputbox-validation-message-severity-finalization",
    "id": 2780
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Notebook Editor API  \nThe new notebook editor API introduces a new `NotebookEditor` type that is similar to `TextEditor` but for [notebooks](https://code.visualstudio.com/api/extension-guides/notebook) instead of normal text editors.  \n```ts\nconst editor = vscode.window.activeNotebookEditor;\nif (editor) {\n// Access the underlying notebook document associated with the editor\nconsole.log(editor.notebook.uri);\n\n// Change the selection in the current notebook\neditor.selection = new vscode.NotebookRange(1, 3);\n}\n```  \nYou can use `window.activeNotebookEditor` to get the current notebook editor and events such as `window.onDidChangeActiveNotebookEditor` to observe when the user switches to the new notebook editor.",
    "url": "https://code.visualstudio.com/updates/v1_68#_notebook-editor-api",
    "id": 2781
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Extension activation based on Timeline view  \nA new activation event has been added for when the Timeline view is visible. This event `onView:timeline` can be used by any extension but is most useful to extensions implementing the proposed `Timeline` API.",
    "url": "https://code.visualstudio.com/updates/v1_68#_extension-activation-based-on-timeline-view",
    "id": 2782
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### UX Guidelines  \nThe [UX Guidelines](https://code.visualstudio.com/api/ux-guidelines) for extension authors has been updated and expanded to cover more VS Code user interface elements.  \n![UX Guideline example image pointing to View Actions elements](images/1_68/view-toolbar.png)  \nA revised [Overview](https://code.visualstudio.com/api/ux-guidelines/overview) page steps through the VS Code UI to give a visual tour of the interface and common UI elements.  \nLinks to relevant guides, API references, and extension samples have been added to each area's dedicated page. Additionally, all example images have been updated across the guidelines to showcase an up-to-date version of the UI.  \nYou can now read about the recommended Do's and Don't's for extensions that add to or contribute these UI elements:  \n* [Activity Bar](https://code.visualstudio.com/api/ux-guidelines/activity-bar)\n* [Sidebars](https://code.visualstudio.com/api/ux-guidelines/sidebars)\n* [Panel](https://code.visualstudio.com/api/ux-guidelines/panel)\n* [Walkthroughs](https://code.visualstudio.com/api/ux-guidelines/walkthroughs)",
    "url": "https://code.visualstudio.com/updates/v1_68#_ux-guidelines",
    "id": 2783
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Extension sponsorship  \nIn this milestone, we have introduced a `sponsor` field in the extension's `package.json` to allow extensions to opt into sponsorship. The `sponsor` object has a `url` field for the extension author's sponsorship link. For example:  \n```ts\n\"sponsor\": {\n\"url\": \"https://github.com/sponsors/nvaccess\"\n}\n```  \nIf an extension opts-in to this, VS Code will render a **Sponsor** button in the Extensions view Details page as shown in the [Sponsoring extensions](#sponsoring-extensions) section above.  \n**Note:** Make sure to use the latest [vsce](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#vsce) command line tool (`>=2.9.1`) to publish your extension with sponsorship enabled.",
    "url": "https://code.visualstudio.com/updates/v1_68#_extension-sponsorship",
    "id": 2784
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Copy paste API  \nThe new `documentPaste` API proposal lets extensions hook into copy and paste inside text editors. This can be used to modify the text that is inserted on paste. Your extension can also store metadata when copying text and use this metadata when pasting (for example, to bring along imports when pasting between two code files).  \nThe [document paste extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/document-paste) shows this API in action:  \n```ts\n/**\n* Provider that maintains a count of the number of times it has copied text.\n*/\nclass CopyCountPasteEditProvider implements vscode.DocumentPasteEditProvider {\n\nprivate readonly countMimeTypes = 'application/vnd.code.copydemo-copy-count';\n\nprivate count = 0;\n\nprepareDocumentPaste(\n_document: vscode.TextDocument,\n_range: vscode.Range,\ndataTransfer: vscode.DataTransfer,\n_token: vscode.CancellationToken\n): void | Thenable<void> {\ndataTransfer.set(this.countMimeTypes, new vscode.DataTransferItem(this.count++));\n}\n\nasync provideDocumentPasteEdits(\n_document: vscode.TextDocument,\nrange: vscode.Range,\ndataTransfer: vscode.DataTransfer,\ntoken: vscode.CancellationToken\n) {\nconst countDataTransferItem = dataTransfer.get(this.countMimeTypes)\nif (!countDataTransferItem) {\nreturn undefined;\n}\n\nconst textDataTransferItem = dataTransfer.get('text/plain') ?? dataTransfer.get('text');\nif (!textDataTransferItem) {\nreturn undefined;\n}\n\nconst count = await countDataTransferItem.asString();\nconst text = await textDataTransferItem.asString();\n\n// Build a snippet to insert\nconst snippet = new vscode.SnippetString();\nsnippet.appendText(`(copy #${count}) ${text}`);\n\nreturn new vscode.SnippetTextEdit(range, snippet);\n}\n}\n\nvscode.languages.registerDocumentPasteEditProvider({ language: 'markdown' }, new CopyCountPasteEditProvider());\n```",
    "url": "https://code.visualstudio.com/updates/v1_68#_copy-paste-api",
    "id": 2785
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### New Notebook Workspace edit proposal  \nThe new `notebookWorkspaceEdit` API proposal allows extensions to edit the contents of a notebook. It replaces the previous `notebookEditorEdit` proposal.  \nWith the proposal, you can create workspace edits that insert, replace, or modify cells in a notebook:  \n```ts\nconst currentNotebook = vscode.window.activeNotebookEditor?.notebook;\nif (currentNotebook) {\nconst edit = new vscode.WorkspaceEdit();\n\nedit.set(currentNotebook.uri, vscode.NotebookEdit.insertCells(/* index*/ 1, [\n// ... new notebook cell data\n]));\n\nawait vscode.workspace.applyEdit(edit);\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_68#_new-notebook-workspace-edit-proposal",
    "id": 2786
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Engineering  \n### Using pull requests  \nWe have moved away from pushing changes directly to the vscode repository `main` branch and are now pushing all changes to VS Code exclusively using pull requests (PR). We require that each PR gets at least one approval from another team member. Taking advantage of this, we now also require that some basic checks pass before a PR can be merged. These are tasks like TypeScript compilation, formatting rules, unit tests and integration tests, which typically don't take longer than 10 minutes. Switching to this flow has reduced the number of times our Insiders build was broken due to a programming mistake.",
    "url": "https://code.visualstudio.com/updates/v1_68#_using-pull-requests",
    "id": 2787
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### VS Code OSS build  \nWe have a new public [Code OSS build](https://dev.azure.com/vscode/VSCode/_build?definitionId=46&_a=summary) that is reusing the same build definitions as our production builds. This build now runs in under 30 minutes on each PR and we plan to continue investing in speeding it up.",
    "url": "https://code.visualstudio.com/updates/v1_68#_vs-code-oss-build",
    "id": 2788
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n## Documentation  \n### Updated version control video  \nThe [Using Git with Visual Studio](https://code.visualstudio.com/docs/introvideos/versioncontrol) introductory video has been redone to help you get started using the Git integration built into VS Code.  \nYou can also find other great videos on the [VS Code YouTube](https://www.youtube.com/c/Code) channel.",
    "url": "https://code.visualstudio.com/updates/v1_68#_updated-version-control-video",
    "id": 2789
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### vscode.dev on code.visualstudio.com  \nWant to use VS Code for the Web but forgot the URL? [vscode.dev](https://vscode.dev) is now displayed prominently on the VS Code [Download](https://code.visualstudio.com/download) page so you can quickly start VS Code running in your browser.  \n![vscode.dev on the code.visualstudio.com download page](images/1_68/vscode-dev-download.png)",
    "url": "https://code.visualstudio.com/updates/v1_68#_vscode.dev-on-code.visualstudio.com",
    "id": 2790
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between May 2 and June 6, 2022):  \n* [Pipeline Editor](https://marketplace.visualstudio.com/items?itemName=Cloud-pipelines.pipeline-editor-vscode) ([Alexey Volkov](https://marketplace.visualstudio.com/publishers/Cloud-pipelines))\n* [Markdown Base64 Image ID](https://marketplace.visualstudio.com/items?itemName=amoxuk.markdown-base64-replace-by-id) ([amoxuk](https://marketplace.visualstudio.com/publishers/amoxuk))\n* [Apache Daffodil VS Code Extension](https://marketplace.visualstudio.com/items?itemName=ASF.apache-daffodil-vscode) ([Apache Software Foundation](https://marketplace.visualstudio.com/publishers/asf))\n* [Web Search](https://marketplace.visualstudio.com/items?itemName=BenRogersWPG.websearchengine) ([Ben Rogers](https://marketplace.visualstudio.com/publishers/BenRogersWPG))\n* [CloudStudio.coding](https://marketplace.visualstudio.com/items?itemName=CloudStudio.coding) ([CloudStudio](https://marketplace.visualstudio.com/publishers/CloudStudio))\n* [Screenshot Clipboard](https://marketplace.visualstudio.com/items?itemName=DarrenDanielDay.screenshot-clipboard) ([Darren Daniel Day](https://marketplace.visualstudio.com/publishers/DarrenDanielDay))\n* [Galaxy Workflows](https://marketplace.visualstudio.com/items?itemName=davelopez.galaxy-workflows) ([davelopez](https://marketplace.visualstudio.com/publishers/davelopez))\n* [React Snippets](https://marketplace.visualstudio.com/items?itemName=dotkiro.ink-vscode-snippets) ([dotkiro](https://marketplace.visualstudio.com/publishers/dotkiro))\n* [Draw](https://marketplace.visualstudio.com/items?itemName=hall.draw) ([hall](https://marketplace.visualstudio.com/publishers/hall))\n* [Blogging tool](https://marketplace.visualstudio.com/items?itemName=Huka.blogging-tool) ([Huka](https://marketplace.visualstudio.com/publishers/Huka))\n* [Katalon Runner](https://marketplace.visualstudio.com/items?itemName=KatalonStudioz.katalon-runner) ([Katalon Studioz](https://marketplace.visualstudio.com/publishers/KatalonStudioz))\n* [zzzGCS-Uploader](https://marketplace.visualstudio.com/items?itemName=KillerBees.zzz-gcs-sync) ([KillerBees](https://marketplace.visualstudio.com/publishers/KillerBees))\n* [WhatTheCommit](https://marketplace.visualstudio.com/items?itemName=Gaardsholt.vscode-whatthecommit) ([Lasse Gaardsholt](https://marketplace.visualstudio.com/publishers/Gaardsholt))\n* [TEI Japanese Editor](https://marketplace.visualstudio.com/items?itemName=ldas.vscode-japanese-tei) ([ldas](https://marketplace.visualstudio.com/publishers/ldas))\n* [TypeScript Error Translator](https://marketplace.visualstudio.com/items?itemName=mattpocock.ts-error-translator) ([Matt Pocock](https://marketplace.visualstudio.com/publishers/mattpocock))\n* [Mintlify](https://marketplace.visualstudio.com/items?itemName=mintlify.connector) ([Mintlify](https://marketplace.visualstudio.com/publishers/mintlify))\n* [Play DJMAX](https://marketplace.visualstudio.com/items?itemName=minwook-shin.play-djmax) ([minwook-shin](https://marketplace.visualstudio.com/publishers/minwook-shin))\n* [Sciter JS](https://marketplace.visualstudio.com/items?itemName=MustafaHi.sciterjs) ([MustafaHi](https://marketplace.visualstudio.com/publishers/MustafaHi))\n* [NewWeb](https://marketplace.visualstudio.com/items?itemName=newsearchwebtesting.newsearchwebtesting) ([newsearchwebtesting](https://marketplace.visualstudio.com/publishers/newsearchwebtesting))\n* [Loop Development Kit](https://marketplace.visualstudio.com/items?itemName=Olive-AI.vscode-loop-development-kit) ([Olive AI](https://marketplace.visualstudio.com/publishers/Olive-AI))\n* [Chewbacca](https://marketplace.visualstudio.com/items?itemName=otter.chewbacca) ([Otter](https://marketplace.visualstudio.com/publishers/otter))\n* [Grammarly](https://marketplace.visualstudio.com/items?itemName=znck.grammarly) ([Rahul Kadyan](https://marketplace.visualstudio.com/publishers/znck))\n* [Reflame](https://marketplace.visualstudio.com/items?itemName=reflame.agent) ([Reflame](https://marketplace.visualstudio.com/publishers/reflame))\n* [SAS](https://marketplace.visualstudio.com/items?itemName=SAS.sas-lsp) ([SAS Institute Inc.](https://marketplace.visualstudio.com/publishers/SAS))\n* [vscode-solidity](https://marketplace.visualstudio.com/items?itemName=sevillal.vscode-solidity) ([sevillal](https://marketplace.visualstudio.com/publishers/sevillal))\n* [Slint (Nightly)](https://marketplace.visualstudio.com/items?itemName=Slint.slint-nightly) ([Slint](https://marketplace.visualstudio.com/publishers/Slint))\n* [Markdown Images](https://marketplace.visualstudio.com/items?itemName=sgourley.markdown-images) ([Steven Gourley](https://marketplace.visualstudio.com/publishers/sgourley))\n* [Smart Sort](https://marketplace.visualstudio.com/items?itemName=sgryjp.vscode-stable-sort) ([Suguru Yamamoto](https://marketplace.visualstudio.com/publishers/sgryjp))\n* [fiber-ifttt-starlark](https://marketplace.visualstudio.com/items?itemName=t-codespaces.fiber-ifttt-starlark) ([t-codespaces](https://marketplace.visualstudio.com/publishers/t-codespaces))\n* [Markdown Preview Style (Beta)](https://marketplace.visualstudio.com/items?itemName=TakumiI.markdown-previewstyle) ([TakumiI](https://marketplace.visualstudio.com/publishers/TakumiI))\n* [TATEditor for VS Code](https://marketplace.visualstudio.com/items?itemName=tateditor.app) ([TATEditor](https://marketplace.visualstudio.com/publishers/tateditor))\n* [kodeine](https://marketplace.visualstudio.com/items?itemName=tored.kodeine) ([tored](https://marketplace.visualstudio.com/publishers/tored))\n* [Vue Language Features (Volar)](https://marketplace.visualstudio.com/items?itemName=Vue.volar) ([Vue](https://marketplace.visualstudio.com/publishers/Vue))\n* [Watermelon](https://marketplace.visualstudio.com/items?itemName=WatermelonTools.watermelon-tools) ([WatermelonTools](https://marketplace.visualstudio.com/publishers/WatermelonTools))\n* [todoist](https://marketplace.visualstudio.com/items?itemName=waymondo.todoist) ([Waymondo](https://marketplace.visualstudio.com/publishers/waymondo))\n* [Arrange Selection](https://marketplace.visualstudio.com/items?itemName=Wupb.arrange-selection) ([Wupb](https://marketplace.visualstudio.com/publishers/Wupb))\n* [Transient Emacs](https://marketplace.visualstudio.com/items?itemName=yasuyuky.transient-emacs) ([yasuyuky](https://marketplace.visualstudio.com/publishers/yasuyuky))\n* [Go to Next Error](https://marketplace.visualstudio.com/items?itemName=yy0931.go-to-next-error) ([yy0931](https://marketplace.visualstudio.com/publishers/yy0931))\n* [Extra Commands](https://marketplace.visualstudio.com/items?itemName=zardoy.extra-commands) ([zardoy](https://marketplace.visualstudio.com/publishers/zardoy))",
    "url": "https://code.visualstudio.com/updates/v1_68#_web-extensions",
    "id": 2791
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)",
    "url": "https://code.visualstudio.com/updates/v1_68#_issue-tracking",
    "id": 2792
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2022 Release (1.68)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Workaround for the webview positioning bug [PR #137506](https://github.com/microsoft/vscode/pull/137506)\n* [@aifreedom (Song Xie)](https://github.com/aifreedom)\n* Format date strings with the right locale [PR #150133](https://github.com/microsoft/vscode/pull/150133)\n* Fix a typo for \"synchronizing\" in log string [PR #150236](https://github.com/microsoft/vscode/pull/150236)\n* [@AlbertHilb](https://github.com/AlbertHilb): Pass one shared `macros` object into every call to katex renderer [PR #148006](https://github.com/microsoft/vscode/pull/148006)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch)\n* \\[typescript-language-features] Add `flags` to completions telemetry [PR #148313](https://github.com/microsoft/vscode/pull/148313)\n* \\[typescript-language-features] No commit characters for string completions [PR #148597](https://github.com/microsoft/vscode/pull/148597)\n* [@bl-nero (Bartosz Leper)](https://github.com/bl-nero): Fix infinite loop in the disassembly view [PR #148556](https://github.com/microsoft/vscode/pull/148556)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr)\n* Add high contrast light theme on monaco editor [PR #148249](https://github.com/microsoft/vscode/pull/148249)\n* Add editor monitoring methods in monaco api [PR #148777](https://github.com/microsoft/vscode/pull/148777)\n* [@dlech (David Lechner)](https://github.com/dlech): allow null in ICodeEditor.restoreViewState() [PR #146866](https://github.com/microsoft/vscode/pull/146866)\n* [@eugenesimakin (Eugene)](https://github.com/eugenesimakin): Inherit editor.letterSpacing for suggest widget (fixes #125622) [PR #148283](https://github.com/microsoft/vscode/pull/148283)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Add \"Open Containing Folder\" etc to file context menu in Git SCM view [PR #149150](https://github.com/microsoft/vscode/pull/149150)\n* [@holazz (zz)](https://github.com/holazz): Add \"pnpm-lock.yaml\" to the child patterns of \"package.json\" [PR #146869](https://github.com/microsoft/vscode/pull/146869)\n* [@ilumer (ilumer)](https://github.com/ilumer): fix build/npm/preinstall.js node version check [PR #150547](https://github.com/microsoft/vscode/pull/150547)\n* [@jasonwilliams (Jason Williams)](https://github.com/jasonwilliams): Enable globs on tasks otherwise fallback to default  - fixes #88106 [PR #141230](https://github.com/microsoft/vscode/pull/141230)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Enable go to definition for markdown links [PR #148017](https://github.com/microsoft/vscode/pull/148017)\n* Fixes terminal split width is not persisted if not focused within exit [PR #149594](https://github.com/microsoft/vscode/pull/149594)\n* [@justanotheranonymoususer](https://github.com/justanotheranonymoususer): Add extension output label to url [PR #150065](https://github.com/microsoft/vscode/pull/150065)\n* [@Lazyuki](https://github.com/Lazyuki): Check maxTokenizationLineLength in monarchLexer [PR #145979](https://github.com/microsoft/vscode/pull/145979)\n* [@Long0x0](https://github.com/Long0x0): Fix incorrect ligatures when rendering whitespaces [PR #150349](https://github.com/microsoft/vscode/pull/150349)\n* [@MachineMitch21 (Mitch Schutt)](https://github.com/MachineMitch21): Editor Drop Target debug threshold square cleanup [PR #149570](https://github.com/microsoft/vscode/pull/149570)\n* [@Mingpan](https://github.com/Mingpan): [Unpolished prototype] 3 way merge for Git [PR #150388](https://github.com/microsoft/vscode/pull/150388)\n* [@PF4Public](https://github.com/PF4Public): Changing dependency syntax in extensions/markdown-math [PR #149501](https://github.com/microsoft/vscode/pull/149501)\n* [@pksunkara (Pavan Kumar Sunkara)](https://github.com/pksunkara): feat: inlay hints displayStyle [PR #150118](https://github.com/microsoft/vscode/pull/150118)\n* [@prashantvc (Prashant Cholachagudda)](https://github.com/prashantvc): Added extension search text length to telemetry [PR #148785](https://github.com/microsoft/vscode/pull/148785)\n* [@quanzhuo (Quan Zhuo)](https://github.com/quanzhuo): Add newpromise snippets in javascript [PR #148755](https://github.com/microsoft/vscode/pull/148755)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Fix access token coming from wrong provider [PR #150473](https://github.com/microsoft/vscode/pull/150473)\n* [@Raymo111 (Raymond Li)](https://github.com/Raymo111): Fix typo [PR #149509](https://github.com/microsoft/vscode/pull/149509)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Specify tsconfig.tsbuildinfo is json [PR #149065](https://github.com/microsoft/vscode/pull/149065)\n* [@robinkar (Robin Karlsson)](https://github.com/robinkar): Accept capitalization in HTTP upgrade header in web [PR #150961](https://github.com/microsoft/vscode/pull/150961)\n* [@roj1512 (Roj)](https://github.com/roj1512): Handle multiline commit messages when creating PR [PR #149426](https://github.com/microsoft/vscode/pull/149426)\n* [@ShenHongFei (\u6c88\u9e3f\u98de)](https://github.com/ShenHongFei): In addition to WebviewPanel, let WebviewView also support transferring of TypedArrays [PR #148429](https://github.com/microsoft/vscode/pull/148429)\n* [@susiwen8 (susiwen8)](https://github.com/susiwen8): fix: close `create fork` message will create fork [PR #148438](https://github.com/microsoft/vscode/pull/148438)\n* [@weartist (Han)](https://github.com/weartist): fix #130527 [PR #146710](https://github.com/microsoft/vscode/pull/146710)\n* [@wkillerud (William Killerud)](https://github.com/wkillerud): Add onEnterRule for SassDoc documentation [PR #150599](https://github.com/microsoft/vscode/pull/150599)\n* [@yhatt (Yuki Hattori)](https://github.com/yhatt): Fixes #147936 [PR #148503](https://github.com/microsoft/vscode/pull/148503)  \nContributions to `vscode-extension-samples`:  \n* [@KamasamaK](https://github.com/KamasamaK): Remove unused enableProposedApi [PR #609](https://github.com/microsoft/vscode-extension-samples/pull/609)  \nContributions to `vscode-generator-code`:  \n* [@segevfiner (Segev Finer)](https://github.com/segevfiner): Remove $tslint-webpack-watch from vscode-webpack template [PR #346](https://github.com/microsoft/vscode-generator-code/pull/346)  \nContributions to `vscode-html-languageservice`:  \n* [@hahn-kev (Kevin Hahn)](https://github.com/hahn-kev): Allow void elements to be specified in data provider [PR #125](https://github.com/microsoft/vscode-html-languageservice/pull/125)  \nContributions to `vscode-js-debug`:  \n* [@ashgti (John Harrison)](https://github.com/ashgti): Adding support for indexed source maps. [PR #1261](https://github.com/microsoft/vscode-js-debug/pull/1261)  \nContributions to `vscode-languageserver-node`:  \n* [@d-biehl (Daniel Biehl)](https://github.com/d-biehl): cleanup diagnostics in DiagnosticRequestor [PR #976](https://github.com/microsoft/vscode-languageserver-node/pull/976)\n* [@DanTup (Danny Tuppeny)](https://github.com/DanTup)\n* Fix typos + minor doc tweaks [PR #945](https://github.com/microsoft/vscode-languageserver-node/pull/945)\n* Mark WorkspaceFoldersInitializeParams.workspaceFolders as optional [PR #948](https://github.com/microsoft/vscode-languageserver-node/pull/948)\n* Fix meta model documentation for enum values [PR #949](https://github.com/microsoft/vscode-languageserver-node/pull/949)\n* [@heejaechang (Heejae Chang)](https://github.com/heejaechang): make sure to unsubscribe from file events [PR #929](https://github.com/microsoft/vscode-languageserver-node/pull/929)\n* [@Vtec234 (Wojciech Nawrocki)](https://github.com/Vtec234): fix: return `false` when `showDocument` fails [PR #951](https://github.com/microsoft/vscode-languageserver-node/pull/951)  \nContributions to `vscode-pull-request-github`:  \n* [@jpspringall](https://github.com/jpspringall): Issue #3371 | Updated getAuthSessionOptions in case of GitHub Enterprise AuthProvider [PR #3565](https://github.com/microsoft/vscode-pull-request-github/pull/3565)  \nContributions to `debug-adapter-protocol`:  \n* [@apupier (Aur\u00e9lien Pupier)](https://github.com/apupier)\n* Add Eclipse usage for Apache Camel debugger [PR #270](https://github.com/microsoft/debug-adapter-protocol/pull/270)\n* Add Eclipse usage for Rust [PR #271](https://github.com/microsoft/debug-adapter-protocol/pull/271)\n* [@lemmy (Markus Alexander Kuppe)](https://github.com/lemmy): Add TLA+ to the list of debug-adapter-protocols [PR #267](https://github.com/microsoft/debug-adapter-protocol/pull/267)  \nContributions to `language-server-protocol`:  \n* [@asashour (Ahmed Ashour)](https://github.com/asashour)\n* Fix broken link in `protocol.md` [PR #1475](https://github.com/microsoft/language-server-protocol/pull/1475)\n* Fix grammar in `textDocument.rename` [PR #1476](https://github.com/microsoft/language-server-protocol/pull/1476)\n* Fix grammar (extra `the`) [PR #1479](https://github.com/microsoft/language-server-protocol/pull/1479)\n* [@KamasamaK](https://github.com/KamasamaK)\n* Update DocumentDiagnosticReportKind case [PR #1453](https://github.com/microsoft/language-server-protocol/pull/1453)\n* JSON-RPC should be hyphenated [PR #1469](https://github.com/microsoft/language-server-protocol/pull/1469)\n* [@michaelmesser (Michael Messer)](https://github.com/michaelmesser): Update latest version in index.html [PR #1478](https://github.com/microsoft/language-server-protocol/pull/1478)\n* [@pedro-w (Peter Hull)](https://github.com/pedro-w): Add newline to end of file [PR #1486](https://github.com/microsoft/language-server-protocol/pull/1486)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_68#_pull-requests",
    "id": 2793
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Command Center  \nThe Command Center has been polished and is now ready to be tried. Enable it via `window.commandCenter` setting.  \nThe Command Center replaces the normal title bar and lets you quickly search for files in your project. Click the main section to display the Quick Open dropdown with your recent files and a search box.  \n![The Command Center and its hover message atop the window](images/1_69/cc-polish.png)  \n_Theme: [GitHub Theme](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \nThe Command Center also has a button on the right to display the Quick Access options via '?'. On the left are **Go Back** and **Go Forward** buttons to navigate through your editor history.",
    "url": "https://code.visualstudio.com/updates/v1_69#_command-center",
    "id": 2794
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Settings editor modified indicator  \nThe Settings editor now shows when a setting has a language override. For context, language overrides always take precedence over non-language-specific overrides, so if the value of a setting doesn't seem to affect the behavior of the setting for a certain type of file, it could be that the setting has a language override.  \nThe indicator text was changed to be more clear and concise. The short video below shows the new **_Modified elsewhere_** indicator. Hovering over the indicator reveals a hover that shows language overrides, when applicable. The video later shows the new default override indicator with the text **_Default value changed_**.  \n<video src=\"images/1_69/settings-editor-new-indicators.mp4\" autoplay loop controls muted title=\"Showing the new Modified elsewhere and default override indicators, along with the custom hover\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_69#_settings-editor-modified-indicator",
    "id": 2795
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Do Not Disturb mode  \nThe new Do Not Disturb mode hides all non-error notification popups when enabled. Progress notifications will be automatically shown in the Status bar. Hidden notifications are still available to view in the Notification center.  \n![Do Not Disturb mode shown in the Status bar and Notification center](images/1_69/do-not-disturb.jpg)  \nYou toggle Do Not Disturb mode by opening the Notification center (select the bell icon in the right of the Status bar) and clicking the slash bell icon. Do Not Disturb mode is indicated in the Status bar by the slash bell icon.",
    "url": "https://code.visualstudio.com/updates/v1_69#_do-not-disturb-mode",
    "id": 2796
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Toggle between Light and Dark themes  \nA new command allows you to toggle between your preferred light and dark themes, **Preferences: Toggle between Light/Dark Themes**. When in a light theme, the command switches to a dark theme and vice versa.  \nWhen in a high contrast theme, the command remains in high contrast and switches to the preferred high contrast theme of the opposite color theme.  \nThe preferred themes are defined by the settings:  \n* `workbench.preferredDarkColorTheme`\n* `workbench.preferredLightColorTheme`\n* `workbench.preferredHighContrastColorTheme`\n* `workbench.preferredHighContrastLightColorTheme`",
    "url": "https://code.visualstudio.com/updates/v1_69#_toggle-between-light-and-dark-themes",
    "id": 2797
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Minimap context menu  \nThe VS Code minimap displays a high level outline of your source code file on the side of the editor. You have been able to toggle the visibility of the minimap via the **View: Toggle Minimap** command or disable the minimap completely with the **Editor > Minimap: Enabled** (`editor.minimap.enabled`) setting. With this release, there is now a context menu to easily show or hide the minimap.  \n![Minimap context menu](images/1_69/minimap-context-menu.png)  \nYou can also tune the appearance with the **Size** (`editor.minimap.size`), **Scale** (`editor.minimap.scale`), and **Slider** (`editor.minimap.showSlider`) settings. If the minimap is hidden, you can still display the context menu by right-clicking the side gutter.",
    "url": "https://code.visualstudio.com/updates/v1_69#_minimap-context-menu",
    "id": 2798
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Share menu  \nThe **Copy vscode.dev Link** command can be used from the **File** > **Share** submenu to quickly get a [vscode.dev](https://vscode.dev) link for your open GitHub repository. The **Share** submenu is also available from the editor context menu.  \n<video src=\"images/1_69/share-vscode-dev-link.mp4\" autoplay loop controls muted title=\"Share menu with Copy vscode.dev Link command\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_share-menu",
    "id": 2799
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Terminal  \n### Shell integration  \nShell integration for PowerShell, bash, and zsh that has been in preview since the January release is now out of preview! We're planning on enabling it by default in the 1.70 release.  \nTo enable the shell integration feature, check **Terminal** > **Integrated** > **Shell Integration : Enabled** in the Settings editor or set the value in your `settings.json`:  \n```json\n\"terminal.integrated.shellIntegration.enabled\": true\n```  \nShell integration allows VS Code's terminal to understand more of what's going on inside the shell in order to enable more features. One of the goals with shell integration was for it to work with **zero configuration required**. This was achieved by automatically \"injecting\" the shell integration script into the shell session via shell arguments and/or environment variables when the setting is enabled. There are some cases where this does not work such as in sub-shells or some complex shell setups, but we also have a manual install route for those more advanced cases.  \nBelow is a summary of the features shell integration currently provides:  \n#### Command decorations and the overview ruler  \nShell integration has the ability to get the exit codes of the commands run within the terminal. Using this information, decorations are added to the left of the line to indicate whether the command succeeded or failed. These decorations also show up in the overview ruler in the scroll bar, just like in the editor.  \n![Blue circles appear next to successful commands, red circles with crosses appear next to failed commands. The color of the circles appears in the scroll bar](images/1_69/terminal-si-decorations.png)  \nThe decorations can support contextual actions like rerunning the command:  \n![Clicking a successful command decoration shows a context menu containing items: Copy Output, Copy Output as HTML, Rerun Command and How does this work?](images/1_69/terminal-si-decoration-menu.png)  \nThe command decorations can be configured with the following settings:  \n* `terminal.integrated.shellIntegration.decorationIcon`\n* `terminal.integrated.shellIntegration.decorationIconSuccess`\n* `terminal.integrated.shellIntegration.decorationIconError`  \n#### Command navigation  \nThe commands detected by shell integration feed into the command navigation feature (`Ctrl/Cmd+Up`, `Ctrl/Cmd+Down`) to give it more reliable command positions. This feature allows quick navigation between commands and selection of their output.  \n<video src=\"images/1_69/terminal-si-command-nav.mp4\" autoplay loop controls muted title=\"Ctrl+Up and Ctrl+Down will navigate up and down between commands, Ctrl+Shift+Up and Ctrl+Shift+Down will do the same but also select between the 2 locations. To use this feature in screen readers it currently requires custom keybindings\"></video>  \n#### Run recent command  \nThe **Terminal: Run Recent Command** command surfaces history from various sources in a Quick Pick, providing similar functionality to a shell's reverse search (`Ctrl+R`). Recent commands come from the current session's history, previous session history for this shell type, and the common shell history file.  \n![The \"run recent command\" command shows a Quick Pick with commands ran previously that can be filtered similar to the Go to File command](images/1_69/terminal-si-recent-command.png)  \nSome other functionality of the command:  \n* In the current session section, there is a clipboard icon in the right of the Quick Pick that will open the command output in an editor.\n* `Alt` can be held to write the text to the terminal without running it.\n* The amount of history stored in the previous session section is determined by the `terminal.integrated.shellIntegration.history` setting.  \nThere is currently no keybinding assigned by default to **Run Recent Command** but, as an example, it could be hooked up to `Ctrl+Space` with the following keybinding:  \n```json\n{\n\"key\": \"ctrl+space\",\n\"command\": \"workbench.action.terminal.runRecentCommand\",\n\"when\": \"terminalFocus\"\n},\n```  \n#### Go to recent directory  \nSimilar to the run recent command feature, the **Terminal: Go to Recent Directory** command keeps track of directories that have been visited and allows quick filtering and navigating (`cd`) to them:  \n<video src=\"images/1_69/terminal-si-go-to-dir.mp4\" autoplay loop controls muted title=\"The Go to Recent Directory command shows a Quick Pick with directories previously navigated to, selecting one will run \"cd path\"\"></video>  \n`Alt` can be held to write the text to the terminal without running it.  \n#### Current working directory detection  \nShell integration tells us what the current working directory is. This information was previously impossible to determine on Windows without a bunch of hacks, and required polling on macOS and Linux, which wasn't good for performance.  \nThe current working directory is used to resolve relative links, show the directory a recent command ran within, as well as support the split current working directory `\"terminal.integrated.splitCwd\": \"inherited\"` feature.  \n#### Growing support for shell setups  \nThis release we improved integration with [bash-preexec](https://github.com/rcaloras/bash-preexec), added basic support for [powerlevel10k](https://github.com/romkatv/powerlevel10k), and detected more cases where shell integration will not work and gracefully disable the feature. We expect a long tail of improvements in this area over time.",
    "url": "https://code.visualstudio.com/updates/v1_69#_shell-integration",
    "id": 2800
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### SetMark sequence support  \nThe terminal now supports the sequence `'OSC 1337 ; SetMark ST'` originally created by [iTerm2](https://iterm2.com/), making it possible to add a mark on the left of the line as well as in the scroll bar:  \n![When the sequence is written to the terminal, a small grey circle will appear to the left of the command, with a matching annotation in the scroll bar](images/1_69/terminal-setmark.png)  \n_Theme: [Sapphire Theme](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire)_  \nHere are some examples of how to trigger this in scripts:  \n* bash: `echo -e 'Mark this line\\x1b]1337;SetMark\\x07'`\n* pwsh: ``Write-Host \"Mark this line`e]1337;SetMark`a\"``",
    "url": "https://code.visualstudio.com/updates/v1_69#_setmark-sequence-support",
    "id": 2801
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Custom rendering of simple Powerline glyphs  \nThe four common angled bracket [Powerline](https://powerline.readthedocs.io) symbols are now custom rendered similar to [box drawing and block characters](https://code.visualstudio.com/updates/v1_60#_custom-rendering-of-box-drawing-and-block-element-characters) when GPU acceleration is enabled in the terminal. This comes with several benefits:  \n* Sub-pixel anti-aliasing will never be used that could cause unsightly red or blue outlines on either side, breaking up the \"powerline\".\n* These characters will work without installing a patched font.\n* Line height affects these characters.  \nBefore:  \n![Line height would not be respected, leading to a Powerline symbol with a different height to adjacent cells. Additionally, a blue outline could appear when sub-pixel anti-aliasing was used](images/1_69/terminal-powerline-before.png)  \nAfter:  \n![Line height is now respected and greyscale anti-aliasing is used for improved rendering](images/1_69/terminal-powerline-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_69#_custom-rendering-of-simple-powerline-glyphs",
    "id": 2802
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Consistent format for messages from VS Code  \nPreviously messages in the terminal that were directly written by VS Code, not the process, used several different formats. This is now consistent across the board with loud format and a more subtle format:  \n![Loud formatting starts the line with an asterisk with the inverted style, followed by a message using a blue background](images/1_69/terminal-message-loud.png)  \n![Subtle formatting starts the line with an asterisk with the inverted style, followed by a message using the default background](images/1_69/terminal-message-subtle.png)",
    "url": "https://code.visualstudio.com/updates/v1_69#_consistent-format-for-messages-from-vs-code",
    "id": 2803
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Accessibility improvements  \nThe terminal saw several improvements to accessibility this iteration:  \n* More links are now available by default in the **Terminal: Open Detected Link...** command, with the ability to search the rest of the terminal buffer.\n* The **Terminal: Run Recent Command** command now allows inputting the resulting command without running it by holding `Alt`.\n* Find in the terminal has improved screen reader announcements.\n* Up and down can be used within navigation mode (`Ctrl+Up`) without using a modifier.\n* Page up and page down can now be used in navigation mode (`Ctrl+Up`) to scroll by page.",
    "url": "https://code.visualstudio.com/updates/v1_69#_accessibility-improvements",
    "id": 2804
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Process reconnection and revive improvements  \nTerminal persistence received some UX and reliability improvements:  \n* Previously reloading a window `n` times would show `n` session restored messages. Now the session restored message should only show up when that particular session has had input.\n* The session restored message that previously contained the date has been reduced to simply \"History restored\" to reduce noise.\n* The \"environment variable collection\" feature that notifies the user about extensions wanting to change the environment (for example, to support automatic Git authentication) now works across reloads.",
    "url": "https://code.visualstudio.com/updates/v1_69#_process-reconnection-and-revive-improvements",
    "id": 2805
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Tasks  \n### Decorations  \nA few iterations ago, we added decorations to the terminal buffer and overview ruler, thanks to the shell integration feature, to improve navigation of the terminal. Decorations now also mark points of interest for tasks, which can be jumped to with the command navigation feature (`Ctrl/Cmd+Up`, `Ctrl/Cmd+Down`).  \nFor start/stop tasks, a decoration appears next to the start of the task and is styled according to the run's exit code, if any.  \n![A task fails and an error decoration is added. A task succeeds and a success decoration is added](images/1_69/task-success-fail.png)  \nFor watch tasks, a decoration appears by the first reported problem for each compilation.  \n![A watch task's first error is marked with a decoration](images/1_69/task-error.png)",
    "url": "https://code.visualstudio.com/updates/v1_69#_decorations",
    "id": 2806
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Icon and color support  \nAn `icon` can now be set for a task with a [Codicon](https://code.visualstudio.com/api/references/icons-in-labels) `id` and a terminal ANSI `color` property. For example:  \n```json\n{\n\"label\": \"test\",\n\"type\": \"shell\",\n\"command\": \"echo test\",\n\"icon\": { \"id\": \"light-bulb\", \"color\": \"terminal.ansiBlue\"}\n}\n```  \n![The task custom icon appears in the terminal tabs list](images/1_69/task-icon.png)  \nTasks that have the `kind` property set to `test`, use the `beaker` icon by default.",
    "url": "https://code.visualstudio.com/updates/v1_69#_icon-and-color-support",
    "id": 2807
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Source Control  \n### Commit \"action button\" for Git repositories  \nIn the [1.61 release](https://code.visualstudio.com/updates/v1_61#_publish-or-sync-action-button-for-git-repositories), **Publish** and **Sync Changes** \"action buttons\" were added for Git repositories. This milestone, we have added a **Commit** button that has a primary action as well as a set of secondary actions. The secondary action can be controlled using the `git.postCommitCommand` setting, and lets you also do a push or sync after the commit.  \nWith the addition of the **Commit** \"action button\", there is a new setting, `git.showActionButton`, that you can use to control the Git action buttons shown in the Source Control view. You can still use the general `scm.showActionButton` setting to globally disable the visibility of any action button contributed by an extension that implements a source control provider.  \n<video src=\"images/1_69/scm-commit-action-button.mp4\" autoplay loop controls muted title=\"Making commits using the new commit action button\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_commit-action-button-for-git-repositories",
    "id": 2808
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Author commit message using an editor  \nThis milestone you can now use a full text editor to author commit messages, whenever no message is provided in the commit input box. To use this new flow, click the **Commit** button without providing a commit message.  \nYou now can author your commit message in the editor. To accept the commit message and complete the commit operation, either close the editor tab or select the **Accept Commit Message** button in the editor toolbar. To cancel the commit operation, you can either clear the contents of the text editor and close the editor tab, or select the **Discard Commit Message** button in the editor toolbar.  \nYou can disable this new flow, and fallback to the previous experience that uses the quick input control, by toggling the `git.useEditorAsCommitInput` setting. After the setting is changed, you will have to restart VS Code for the change to take effect.  \nTo use the same flow for `git commit` commands executed in the Integrated Terminal, enable the `git.terminalGitEditor` setting. After enabling the setting, you will have to restart your terminal session.  \n<video src=\"images/1_69/scm-git-editor.mp4\" autoplay loop controls muted title=\"Author commit message in a full text editor\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_author-commit-message-using-an-editor",
    "id": 2809
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Branch protection indicators  \n[Last milestone](https://code.visualstudio.com/updates/v1_68#_git-branch-protection), we added the `git.branchProtection` setting that you can use to configure specific branches to be protected. This milestone visual indicators (lock icon) were added to the Status bar and the branch picker for the branches that are protected.  \nStatus bar:  \n![The branch protection icon is shown in the Status bar](images/1_69/scm-branch-protection-statusbar.png)  \nBranch picker:  \n![The branch protection icon is shown in the branch picker](images/1_69/scm-branch-protection-picker.png)",
    "url": "https://code.visualstudio.com/updates/v1_69#_branch-protection-indicators",
    "id": 2810
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Debugging  \n### Improved Step Into Target UI  \nSome debuggers allow stepping directly into specific function calls when paused on a line. This iteration, we improved the UI for this:  \n* Right-clicking on a target region on a source line and picking **Step Into Target** will automatically step into the target region, if there is one.\n* There is a new command **Debug: Step Into Target** available in the Command Palette and with the `kb(workbench.action.debug.stepIntoTarget)` keyboard shortcut.",
    "url": "https://code.visualstudio.com/updates/v1_69#_improved-step-into-target-ui",
    "id": 2811
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Navigate in the Debug Console  \n#### Console access through the Quick Access menu  \nThere is now a Quick Access menu to view a list of your Debug Consoles. In the menu, you can select a console name to show it in the bottom panel. Here, you can search and filter through your console names.  \n<video src=\"images/1_69/debug-filter-and-select.mp4\" autoplay loop controls muted title=\"filtering and selecting a Debug Console from the Quick Access list\"></video>  \n_Theme: [GitHub Dark Dimmed](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \nThere are three different ways to access this Quick Access menu:  \n* Typing `?` in the Quick Open menu (`kb(workbench.action.quickOpen)`), then selecting the option to view Debug Consoles.  \n<video src=\"images/1_69/goto-debug-quickaccess.mp4\" autoplay loop controls muted title=\"Go to Quick Access\"></video>  \n* Using the **Debug: Select Debug Console** command.\n* Manually typing out `debug consoles ` (with a trailing space character) in the Quick Open menu.  \n#### Console access through the View menu  \nYou can also access a list of Debug Consoles from within the existing View menu. Type `view ` (with a trailing space) in the Quick Open menu and scroll down to the **Debug Console** panel header. You will see a list of available Debug Consoles.  \n<video src=\"images/1_69/debug-view-menu.mp4\" autoplay loop controls muted title=\"Accessing the Debug Console via View menu\"></video>  \n#### Toggling between consoles  \nYou can now use `kb(workbench.action.debug.prevConsole)` to navigate to the previous Debug Console and `kb(workbench.action.debug.nextConsole)` to go to the next console.",
    "url": "https://code.visualstudio.com/updates/v1_69#_navigate-in-the-debug-console",
    "id": 2812
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Loaded Scripts search and filtering  \nPreviously, you could only view your loaded scripts within a tree view from the **Run and Debug** menu. Now, you can search and navigate to a script using the new **Debug: Open Loaded Script...** command. It works just like the **Go to File...** command, but you can navigate to a loaded script.  \n<video src=\"images/1_69/loaded-scripts.mp4\" autoplay loop controls muted title=\"Going to loaded script from Quick Open\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_loaded-scripts-search-and-filtering",
    "id": 2813
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### JavaScript debugging  \n#### Sourcemap toggling  \nYou can now easily toggle sourcemaps on and off by clicking the \ud83e\udded compass icon in the title of the Call Stack view. When sourcemaps are toggled off, breakpoints set in the source code will still work, but be moved to their equivalent locations in compiled code, and the debugger will step through compiled code instead of source code.  \n<video src=\"images/1_69/js-debug-toggle-sourcemaps.mp4\" autoplay loop controls muted title=\"Toggling sourcemaps off and on during a JavaScript debugging session\"></video>  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong)_  \nWhen sourcemaps are turned off, a similar button is shown in the debug toolbar that can turn them back on. Toggle state is persisted in the workspace.  \n#### toString() variable previews  \nIf a variable or property has a custom `toString()` method, it will be called to render the preview in the **VARIABLES** view and hovers. This is an improvement over generic object previews for complex types that have good string representations.  \nFor example, VS Code's `Range` has a `toString` method that makes it easier to digest at a glance:  \n![Displaying the toString() method output in the Variables view](images/1_69/js-debug-custom-tostring.png)  \n#### Step Into Target support  \nThe JavaScript debugger now supports **Step Into Target**, allowing you to easily step into function calls on a line of code.  \n![Step Into Targets dropdown](images/1_69/js-debug-step-in-target.png)  \nThis can be accessed via the **Debug: Step Into Target** command (`kb(workbench.action.debug.stepIntoTarget)`) or by right-clicking on the line.  \n#### Unbound breakpoint warning icon in JavaScript debugging  \nIf you are debugging a TypeScript/JavaScript project and having trouble configuring sourcemaps or getting your breakpoints to bind, VS Code will now show a hint message in the Breakpoints view with a link to the JavaScript debugger's breakpoint troubleshooting tool. You will also see the hint when hovering the gray breakpoint icon in the editor.  \n![hovering the breakpoint warning icon](images/1_69/bp-hover.png)  \nWhen the API to show this hint is finalized, other debuggers will be able to show the hint with their own appropriate message.",
    "url": "https://code.visualstudio.com/updates/v1_69#_javascript-debugging",
    "id": 2814
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Editor  \n### Refactoring with Preview  \nPreviously, there was no way to review changes that would have been applied by a refactoring. To improve the refactoring experience, there is now a **Refactor with Preview** command that can be accessed from the Command Palette. **Refactor with Preview...** works just like the **Refactor...** command, but will open up a refactor preview panel. Users can select a refactor preview to open up a larger view of the refactoring preview in the editor. This iteration primarily focused on previewing code changes from refactorings, with future features and a custom Code Action menu control to follow.  \n![Refactor preview panel showing a refactoring that results in two changes](images/1_69/refactor-preview.png)  \n**Refactor with Preview...** opening a pane in the workbench and opening the refactor preview editor view.  \n<video src=\"images/1_69/refactoring-editor.mp4\" autoplay loop controls muted title=\"Selecting a refactor preview that opens an editor diff view\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_refactoring-with-preview",
    "id": 2815
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Languages  \n### Support for angle bracket links in Markdown  \nMarkdown lets you use angle brackets to write link destinations that contain spaces or other special characters:  \n```markdown\n[Some link](<path to file with spaces.md>)\n```  \nThis iteration, we've improved support for angle bracket links so that they are correctly highlighted and clickable in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_69#_support-for-angle-bracket-links-in-markdown",
    "id": 2816
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Emmet inline completions setting  \nEmmet has a new setting `emmet.useInlineCompletions` that allows inline completions to occur in files. For now, it is best to enable the setting only for editing HTML and CSS files.  \nThe short video below was recorded with the `editor.quickSuggestions` setting set to `off` for all entries.  \n<video src=\"images/1_69/emmet-inline-html.mp4\" autoplay loop controls muted title=\"An Emmet abbreviation being expanded in an HTML file with the inline completion setting on\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_emmet-inline-completions-setting",
    "id": 2817
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### JSON notifications in the language indicator  \nWhen there are too many folding ranges, document symbols, or color decorators to be shown, VS Code no longer uses notifications, but uses the JSON language indicator to inform the user.  \n![JSON notifications from the Status bar JSON language indicator](images/1_69/json-notifications.png)",
    "url": "https://code.visualstudio.com/updates/v1_69#_json-notifications-in-the-language-indicator",
    "id": 2818
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### HTML final new line formatter setting change  \nThe setting `html.format.endWithNewline` has been removed in favor of `files.insertFinalNewline`.  \n`files.insertFinalNewline` applies to all programming languages. If you want different settings per language, you can use a language scope:  \n```json\n{\n\"[html]\": {\n\"files.insertFinalNewline\": true\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_69#_html-final-new-line-formatter-setting-change",
    "id": 2819
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Notebooks  \n### Support for in-notebook extension recommendations  \nTo help improve the getting started experience for notebooks when a required extension is not installed, we have updated the extension recommendation flow and let you install extensions directly from a notebook window. This greatly reduces the number of steps needed to go from no extensions installed to runnable cells within VS Code. This iteration enabled this experience for Python Jupyter notebooks with more notebook types and languages to follow.  \n![A Quick Pick depicting two entries. The top entry is selected that has a light bulb to its left and says 'Install suggested extensions Python + Jupyter'](images/1_69/jupyter-extension-install.png)",
    "url": "https://code.visualstudio.com/updates/v1_69#_support-for-in-notebook-extension-recommendations",
    "id": 2820
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Comments  \n### Toggle editor commenting  \nThe new command **Comments: Toggle Editor Commenting** toggles all editor commenting features, including the commenting range gutter decoration, the \"+\" on line hover, and all editor comment widgets. Commenting will be automatically disabled in Zen Mode.",
    "url": "https://code.visualstudio.com/updates/v1_69#_toggle-editor-commenting",
    "id": 2821
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Drag for multiline comments  \nThe Add a Comment \"+\" button can be dragged to add a multiline comment.  \n<video src=\"images/1_69/drag-for-comment.mp4\" autoplay loop controls muted title=\"Drag the + button for a multiline comment\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_69#_drag-for-multiline-comments",
    "id": 2822
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Enterprise  \n### UpdateMode Group Policy on Windows  \nVS Code now has support for [Windows Registry-based Group Policy](https://learn.microsoft.com/previous-versions/windows/desktop/policy/implementing-registry-based-policy), which allows system administrators to create and deploy policies on machines they manage.  \nThe first VS Code policy supported is `UpdateMode`, which overrides the `update.mode` setting and controls whether VS Code automatically updates when a new version is released.  \nRefer to Group Policy on Windows in the [Enterprise](https://code.visualstudio.com/docs/setup/enterprise#_group-policy-on-windows) documentation to learn more.",
    "url": "https://code.visualstudio.com/updates/v1_69#_updatemode-group-policy-on-windows",
    "id": 2823
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## VS Code for the Web  \n### Theme tester supports built in themes  \nThe theme tester is a route in [vscode.dev](https://vscode.dev) that can be used to showcase and try a color theme without installing it. This has been available for Theme extensions on the Marketplace by specifying the extension ID and theme name. For example, to see the GitHub Theme extension (extension ID `github.github-vscode-theme`) \"GitHub Dark Default\" theme, you would launch vscode.dev with the URL:  \nhttps://vscode.dev/editor/theme/github.github-vscode-theme/GitHub%20Dark%20Default  \n![Color theme tester with vscode.dev showing GitHub Theme extension GitHub Dark Default](images/1_69/theme-tester-marketplace.png)  \nThe theme tester can now also be used with the built-in themes in VS Code. Use `vscode.theme-defaults` for the extension ID placeholder and then the theme name you want to check out.  \nFor example, to test the \"High Contrast Light\" theme, you would use the following URL:  \nhttps://vscode.dev/editor/theme/vscode.theme-defaults/Default%20High%20Contrast%20Light",
    "url": "https://code.visualstudio.com/updates/v1_69#_theme-tester-supports-built-in-themes",
    "id": 2824
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Partial localization support for extensions  \nLast iteration in [vscode.dev](https://vscode.dev), we introduced localization for strings provided by the core product. This iteration we are including more strings - specifically static strings provided by extensions in their extension manifest. There are still other segments of strings provided by extensions that need to be localized (strings declared in their source code) so we will continue with that work next iteration.",
    "url": "https://code.visualstudio.com/updates/v1_69#_partial-localization-support-for-extensions",
    "id": 2825
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Configure Display Language command  \nFor some users, configuring the language used by their browser is not possible. To work around this, VS Code for the Web now has the **Configure Display Language** command that allows you to override the default language that your browser is set to.  \nAdditionally, you can use the **Clear Display Language Preference** command remove this override.",
    "url": "https://code.visualstudio.com/updates/v1_69#_configure-display-language-command",
    "id": 2826
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Jupyter  \n#### IPyWidgets  \n`IPyWidgets` are now supported for kernels other than `Python`, such as [Common Lisp](https://github.com/yitzchak/common-lisp-jupyter) and [IHaskell](https://github.com/IHaskell/IHaskell).  \n<video src=\"images/1_69/jupyter_ihaskell_widgets.mp4\" autoplay loop controls muted title=\"IPyWidget support in IHaskell\"></video>  \nA number of `IPyWidget` issues related to loading of resources (images, scripts, etc.) have been resolved, thereby improving support for widgets such as [VegaFusion](https://github.com/vegafusion/vegafusion), [ipyleaflet](https://ipyleaflet.readthedocs.io/en/latest/index.html), [Chemiscope](https://github.com/lab-cosmo/chemiscope), [mobilechelonian](https://github.com/takluyver/mobilechelonian), and [ipyturtle](https://github.com/gkvoelkl/ipython-turtle-widget).  \n<video src=\"images/1_69/jupyter_chemiscope_widget.mp4\" autoplay loop controls muted title=\"IPyWidget support for Chemiscope\"></video>  \nOther notable `IPyWidget` fixes include displaying complex and nested (including interactive) outputs within the [Jupyter Output widget](https://ipywidgets.readthedocs.io/en/latest/examples/Output%20Widget.html).  \n#### Web extension  \nWe've made progress on supporting more of the core functionality in the web version of the [Jupyter](https://marketplace.visualstudio.com/itemdetails?itemName=ms-toolsai.jupyter) extension.  \nThis month the following features were ported to the web extension:  \n* Exporting an Interactive Window\n* Debugging an Interactive Window\n* Collapsible cells in an Interactive Window  \nIf you'd like to experiment with the functionality, launch Jupyter from your local machine with:  \n```bash\njupyter notebook --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```  \nAnd then connect to it using the command **Jupyter: Specify Jupyter server for connections** from within [vscode.dev](https://vscode.dev).  \nFor more information (and to comment), see this [discussion item](https://github.com/microsoft/vscode-jupyter/discussions/10315).",
    "url": "https://code.visualstudio.com/updates/v1_69#_jupyter",
    "id": 2827
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights of this release include:  \n* A new setting `\"githubPullRequests.ignoredPullRequestBranches\"` to ignore branches for pull requests.\n* The **Publish branch?** dialog can be skipped when creating a PR using the setting `\"githubPullRequests.pushBranch\"`.\n* An auto-merge checkbox is now available in the **Overview** editor.  \nCheck out the [changelog for the 0.46.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0460) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_69#_github-pull-requests-and-issues",
    "id": 2828
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Preview features  \n### TypeScript 4.8 support  \nThis update includes support for the upcoming TypeScript 4.8 release. See the [TypeScript 4.8 iteration plan](https://github.com/microsoft/TypeScript/issues/49074) for more details on what the TypeScript team is currently working on.  \nTo start using the TypeScript 4.8 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_69#_typescript-4.8-support",
    "id": 2829
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Markdown link validation  \nWe've continued to polish [link validation in Markdown files](https://code.visualstudio.com/updates/v1_68#_markdown-link-validation). This experimental feature can help catch broken links to images or headers in Markdown files.  \nIn addition to fixing a number of bugs and improving performance, we've also renamed some of the settings to make their functionality more clear. Here are the new setting names:  \n* `markdown.experimental.validate` - Enable/disable validation all link validation functionality.\n* `markdown.experimental.validate.fileLinks.enabled`- Enable/disable validation of links to local files: `[link](/path/to/file.md)`\n* `markdown.experimental.validate.fileLinks.markdownFragmentLinks`- Enable/disable validation of the fragment part of links to local files: `[link](/path/to/file.md#some-header)`\n* `markdown.experimental.validate.fragmentLinks.enabled`- Enable/disable validation of links to headers in the current file: `[link](#some-header)`\n* `markdown.experimental.validate.referenceLinks.enabled`- Enable/disable validation of reference links: `[link][ref]`.\n* `markdown.experimental.validate.ignoreLinks`-A list of links that skip validation. This is useful if you link to files that don't exist on disk but do exist once the Markdown has been published.  \nGive it a try and let us know what you think of the new feature!",
    "url": "https://code.visualstudio.com/updates/v1_69#_markdown-link-validation",
    "id": 2830
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Settings Profiles  \nWe have been working the last couple of months to support **Settings Profiles** in VS Code, which is one of the most popular asks from the community. In this milestone, we are happy to announce that this feature is ready for preview in the [Insiders](https://code.visualstudio.com/insiders/) release via `workbench.experimental.settingsProfiles.enabled` setting. Please try out this feature and let us know your feedback by creating issues in our [VS Code Repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #116740](https://github.com/microsoft/vscode/issues/116740).  \nA Settings Profile is comprised of settings, keyboard shortcuts, extensions, state, tasks, and snippets. You can customize VS Code for different development environments like Web, Machine Learning, or for multiple programming language classrooms like Python, Java or for personal modes like Work or Demo and save them as Settings Profiles. You can open multiple workspaces (folders) with different profiles simultaneously based on the projects you are working on or the classroom you are attending or when you are presenting.  \nBelow demonstrates customizing VS Code for web development environment and creating a settings profile out of it.  \n<video src=\"images/1_69/settings-profile-create.mp4\" autoplay loop controls muted title=\"Create Settings Profile\"></video>  \nHere shows how you can easily change from a development profile to a demo profile.  \n<video src=\"images/1_69/settings-profile-switch.mp4\" autoplay loop controls muted title=\"Switching Settings Profile\"></video>  \nYou can open your React project in web development profile and Python class project in Python class profile simultaneously as shown in the following picture.  \n![Multiple opened Profiles](images/1_69/settings-profile-multiple.png)  \nYou can customize the foreground and background colors of the settings profile Status bar entry by using following color customization keys in settings.  \n```json\n\"workbench.colorCustomizations\": {\n\"statusBarItem.settingsProfilesBackground\": \"#ce4918\",\n\"statusBarItem.settingsProfilesForeground\": \"#e0dfdb\",\n}\n```  \nYou can manage and remove settings profiles using the **Remove Settings Profile...** action available in the **Settings Profiles** sub menu in Settings gear menu.  \n![Removing Settings Profiles](images/1_69/settings-profile-remove.png)  \nEven though you can customize VS Code per profile, there are some settings that can only be customized at the application level. For example, all application-scoped settings like `update.mode`, language pack extensions, settings sync enablement, and Workspace Trust state are customized across all profiles at the application level.",
    "url": "https://code.visualstudio.com/updates/v1_69#_settings-profiles",
    "id": 2831
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Access edit sessions across VS Code for the Web and desktop  \nThis milestone we are announcing a preview of **edit sessions** in VS Code. Edit sessions enable you to bring your uncommitted changes along when you continue working on a repository wherever VS Code is available, whether that is VS Code for the Web, desktop VS Code, or across different machines.  \nFor example, you can use edit sessions to transfer and access working changes:  \n* From a repository in [github.dev](https://github.dev) to a local desktop clone of that repository.\n* From a clone of a repository on a Windows device to a clone of that repository on a macOS device.  \nEdit sessions are currently in preview behind the `workbench.experimental.editSessions.enabled` setting. In this initial release, you can use the following commands to store and resume your working changes:  \n* **Edit Sessions: Store Current Edit Session**\n* **Edit Sessions: Resume Latest Edit Session**  \nTo get started with edit sessions, use the **Edit Sessions: Store Current Edit Session** command and sign in with GitHub or Microsoft authentication when prompted. Then use the **Edit Sessions: Resume Latest Edit Session** command in a repository on another machine or VS Code instance to restore the working contents of all modified files to your workspace. You can sign out of edit sessions at any time using the **Edit Sessions: Sign Out** command.  \nAs we continue to iterate on the edit sessions experience, try it out and share your feedback with us via a comment in [issue #141293](https://github.com/microsoft/vscode/issues/141293).",
    "url": "https://code.visualstudio.com/updates/v1_69#_access-edit-sessions-across-vs-code-for-the-web-and-desktop",
    "id": 2832
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Extension authoring  \n### Iterable vscode.d.ts collection types  \nTo make it easier to work with the collection types in `vscode.d.ts`, this iteration we've made them all iterable. This allows you to use `for...of` loops and spreads with these types:  \n```ts\nconst data: vscode.DataTransfer = ...;\nfor (const [mime, item] of data) {\nconst str = await item.asString();\n...\n}\n```  \nThe full set of newly iterable types is:  \n* `DiagnosticCollection`\n* `DataTransfer`\n* `EnvironmentVariableCollection`\n* `TestItemCollection`",
    "url": "https://code.visualstudio.com/updates/v1_69#_iterable-vscode.d.ts-collection-types",
    "id": 2833
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Extensible notebook renderers  \n[Notebook renderers](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer) allow extensions to customize how cells and outputs are rendered in notebooks. This iteration, we've extended the notebook renderer API to allow a renderer to augment another renderer, including some of built-in renderers from VS Code. This allows extensions to add new functionality to notebook rendering without having to reimplement a full renderer. It also provides a better user experience since users don't have to switch between a new renderer to see the correctly rendered content.  \nThe [Notebook Extend Markdown Renderer Sample](https://github.com/microsoft/vscode-extension-samples/tree/main/notebook-extend-markdown-renderer-sample) shows how an extension can extend VS Code's built-in Markdown renderer with emoji support. Let's take a quick look at the key parts!  \nThe API for extensible notebook renderers is intentionally loosely defined. To get started, our extension needs to contribute a new notebook renderer. Because we are extending an existing renderer, we use the `entrypoint` field here to specify both the ID of the renderer to extend (in this case, VS Code's built-in `vscode.markdown-it-renderer`) along with a path to the renderer script to load:  \n```json\n\"notebookRenderer\": [\n{\n\"id\": \"sample.markdown-it.emoji-extension\",\n\"displayName\": \"Markdown it Emoji renderer\",\n\"entrypoint\": {\n\"extends\": \"vscode.markdown-it-renderer\",\n\"path\": \"./out/emoji.js\"\n}\n}\n]\n```  \nThis renderer will now be activated whenever the `vscode.markdown-it-renderer` is activated.  \nNow to extend the `vscode.markdown-it-renderer`, our renderer can call a method on the base renderer. This method is specific to the base renderer. In this case, we first get the base renderer using `getRenderer` and then call `extendMarkdownIt` on it to augmented the instance of Markdown-It it uses for rendering:  \n```ts\nimport type * as MarkdownIt from 'markdown-it';\nimport type { RendererContext } from 'vscode-notebook-renderer';\n\ninterface MarkdownItRenderer {\nextendMarkdownIt(fn: (md: MarkdownIt) => void): void;\n}\n\nexport async function activate(ctx: RendererContext<void>) {\n// Acquire the base renderer\nconst markdownItRenderer = await ctx.getRenderer('vscode.markdown-it-renderer') as MarkdownItRenderer | undefined;\nif (!markdownItRenderer) {\nthrow new Error(`Could not load 'vscode.markdown-it-renderer'`);\n}\n\n// Load our Markdown-It extension\nconst emoji = require('markdown-it-emoji');\n\n// Call the base renderer's extension method (extendMarkdownIt) to augment\n// the Markdown-It with emoji support.\nmarkdownItRenderer.extendMarkdownIt((md: MarkdownIt) => {\nreturn md.use(emoji, {});\n});\n}\n```  \nThe key part to note here is that `extendMarkdownIt` is simply a method returned by the base renderer. Other extensible renderers can easily return their own extension points.  \nCheck out the [Notebook Extend Markdown Renderer Sample](https://github.com/microsoft/vscode-extension-samples/tree/main/notebook-extend-markdown-renderer-sample) for a complete example of extending VS Code's built-in Markdown-It renderer.",
    "url": "https://code.visualstudio.com/updates/v1_69#_extensible-notebook-renderers",
    "id": 2834
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Read external files from DataTransfers  \nExtensions can now read external files using a `DataTransfer`. This can be used in the tree drag and drop API, as well as in the drop into editor API proposal:  \n```ts\nexport class TestViewDragAndDrop implements vscode.TreeDataProvider<Node>, vscode.TreeDragAndDropController<Node> {\n\npublic async handleDrop(target: Node | undefined, sources: vscode.DataTransfer, token: vscode.CancellationToken): Promise<void> {\n// Get a list of all files\nconst files: vscode.DataTransferFile[] = [];\nsources.forEach((item) => {\nconst file = item.asFile();\nif (file) {\nfiles.push(file);\n}\n});\n\nconst decoder = new TextDecoder();\n\n// Print out the names and first 100 characters of the file\nfor (const file of files) {\nconst data = await file.data();\nconst text = decoder.decode(data);\nconst fileContentsPreview = text.slice(0, 100);\nconsole.log(file.name + ' \u2014 ' + fileContentsPreview + '\\n');\n}\n\n...\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_69#_read-external-files-from-datatransfers",
    "id": 2835
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### High contrast light in webviews  \nWebviews now can target [high contrast light color themes](https://code.visualstudio.com/updates/v1_66#_high-contrast-light-theme-for-color-contributions) using the `vscode-high-contrast-light` CSS class:  \n```css\n.vscode-high-contrast-light .error {\ncolor: red;\n}\n```  \nThe `vscode-high-contrast-light` class is automatically added to the `body` element of the webview.",
    "url": "https://code.visualstudio.com/updates/v1_69#_high-contrast-light-in-webviews",
    "id": 2836
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Icons in Test Item Labels  \n[Codicons](https://code.visualstudio.com/api/references/icons-in-labels) in the standard `$(icon)` format can now be used in the `TestItem.label` to show icons in the Test Explorer view as well as test results.",
    "url": "https://code.visualstudio.com/updates/v1_69#_icons-in-test-item-labels",
    "id": 2837
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Source Control input box enablement  \nExtension authors can now toggle the enablement of the input box in the Source Control view using the `enabled` property.",
    "url": "https://code.visualstudio.com/updates/v1_69#_source-control-input-box-enablement",
    "id": 2838
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### JSON word pattern change  \nEvery language comes with a word pattern that defines which characters belong to a word when in that language. JSON was different to all other languages in that it included the quotes of string literals and the full string literal content. It now follows other languages and contains just letters, numbers, and hyphens.  \nThe change will fix issues when expanding the selection (Command: **Expand Selection**), allow word completions inside strings, and fix some code suggestion abnormalities.  \nExtensions that relied on the word pattern, for example for the default replace range in code completions, need to update their implementation to explicitly state the replace range for all completions.",
    "url": "https://code.visualstudio.com/updates/v1_69#_json-word-pattern-change",
    "id": 2839
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Paste Edit Provider  \nWe've updated the `documentPaste` API proposal to make it easier to correctly implement, specifically when working with multiple cursors.  \nAs a reminder, this API lets extensions hook into copy and paste inside text editors. Extensions can use it to modify the text that is inserted on paste. The [document paste extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/document-paste) shows the updated API in action:  \n```ts\n/**\n* Provider that maintains a count of the number of times it has copied text.\n*/\nclass CopyCountPasteEditProvider implements vscode.DocumentPasteEditProvider {\n\nprivate readonly countMimeTypes = 'application/vnd.code.copydemo-copy-count';\n\nprivate count = 0;\n\nprepareDocumentPaste?(\n_document: vscode.TextDocument,\n_ranges: readonly vscode.Range[],\ndataTransfer: vscode.DataTransfer,\n_token: vscode.CancellationToken\n): void | Thenable<void> {\ndataTransfer.set(this.countMimeTypes, new vscode.DataTransferItem(this.count++));\ndataTransfer.set('text/plain', new vscode.DataTransferItem(this.count++));\n}\n\nasync provideDocumentPasteEdits(\n_document: vscode.TextDocument,\n_ranges: readonly vscode.Range[],\ndataTransfer: vscode.DataTransfer,\n_token: vscode.CancellationToken\n): Promise<vscode.DocumentPasteEdit | undefined> {\nconst countDataTransferItem = dataTransfer.get(this.countMimeTypes);\nif (!countDataTransferItem) {\nreturn undefined;\n}\n\nconst textDataTransferItem = dataTransfer.get('text') ?? dataTransfer.get('text/plain');\nif (!textDataTransferItem) {\nreturn undefined;\n}\n\nconst count = await countDataTransferItem.asString();\nconst text = await textDataTransferItem.asString();\n\n// Build a snippet to insert\nconst snippet = new vscode.SnippetString();\nsnippet.appendText(`(copy #${count}) ${text}`);\n\nreturn { insertText: snippet };\n}\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n// Enable our provider in plaintext files\nconst selector: vscode.DocumentSelector = { language: 'plaintext' };\n\n// Register our provider\ncontext.subscriptions.push(vscode.languages.registerDocumentPasteEditProvider(selector, new CopyCountPasteEditProvider(), {\npasteMimeTypes: ['text/plain'],\n}));\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_69#_paste-edit-provider",
    "id": 2840
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### WebUSB, WebSerial, and WebHID access on web  \nThere is now experimental support for using [WebUSB](https://developer.mozilla.org/docs/Web/API/WebUSB_API), [Web Serial](https://developer.mozilla.org/docs/Web/API/Web_Serial_API), and [WebHID](https://developer.mozilla.org/docs/Web/API/WebHID_API) from [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions).  \nTo access these APIs, your extension first needs to request access to the desired devices by running one of these commands:  \n* `workbench.experimental.requestUsbDevice`\n* `workbench.experimental.requestSerialPort`\n* `workbench.experimental.requestHidDevice`  \nThese commands will prompt the user to select a device. Each command takes a [list of device filters](https://developer.mozilla.org/docs/Web/API/USB/requestDevice) as its argument. For example:  \n```ts\nimport * as vscode from 'vscode';\n\nawait vscode.commands.executeCommand('workbench.experimental.requestUsbDevice', {\nfilters: [\n{ vendorId: 0x404 } // Your custom filter or empty if you want users to select any device\n]\n});\n```  \nAfter the command finishes, your extension can use the normal web APIs to access any devices that the user has granted access to:  \n```ts\nconst devices = await navigator.usb.getDevices();\n// Do something with devices\n```  \nAll of the normal web device APIs should work, with the expectation of those such as [requestDevice](https://developer.mozilla.org/docs/Web/API/USB/requestDevice) that need to show UI elements to the user.  \nAt the moment, this functionality only works on web and support is limited to the Chrome and Edge browsers. Also keep in mind that this feature is still experimental, so we may iterate on its design. Give it a try and share your feedback!",
    "url": "https://code.visualstudio.com/updates/v1_69#_webusb,-webserial,-and-webhid-access-on-web",
    "id": 2841
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Engineering  \n### Electron 18 update  \nIn this milestone, we finished the exploration to bundle Electron 18 into VS Code desktop and we want to thank everyone involved with self-hosting on Insiders. This update comes with Chromium `100.0.4896.160` and Node.js `16.13.2`.",
    "url": "https://code.visualstudio.com/updates/v1_69#_electron-18-update",
    "id": 2842
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n## Documentation  \n### TypeScript editing and refactoring  \nThere are two new topics focusing on TypeScript [Editing](https://code.visualstudio.com/docs/typescript/typescript-editing) and [Refactoring](https://code.visualstudio.com/docs/typescript/typescript-refactoring) in VS Code. There you'll learn about specific features such as [Inlay hints](https://code.visualstudio.com/docs/typescript/typescript-editing#_inlay-hints), [CodeLens](https://code.visualstudio.com/docs/typescript/typescript-editing#_references-codelens), and [formatting](https://code.visualstudio.com/docs/typescript/typescript-editing#_formatting) options specific to TypeScript as well as the available code [refactorings](https://code.visualstudio.com/docs/typescript/typescript-refactoring#_refactoring).",
    "url": "https://code.visualstudio.com/updates/v1_69#_typescript-editing-and-refactoring",
    "id": 2843
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Web extensions  \nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is between June 7 and July 4, 2022):  \n* [Pipeline Editor](https://marketplace.visualstudio.com/items?itemName=Cloud-pipelines.pipeline-editor-vscode) ([Alexey Volkov](https://marketplace.visualstudio.com/publishers/Cloud-pipelines))\n* [Django Support](https://marketplace.visualstudio.com/items?itemName=almahdi.code-django) ([Al Mahdi](https://marketplace.visualstudio.com/publishers/almahdi))\n* [ROOT File Viewer](https://marketplace.visualstudio.com/items?itemName=albertopdrf.root-file-viewer) ([Alberto P\u00e9rez de Rada Fiol](https://marketplace.visualstudio.com/publishers/albertopdrf))\n* [Thirft Formatter](https://marketplace.visualstudio.com/items?itemName=alingse.thirft-formatter) ([alingse](https://marketplace.visualstudio.com/publishers/alingse))\n* [Smarty Template Support](https://marketplace.visualstudio.com/items?itemName=aswinkumar863.smarty-template-support) ([Aswin Kumar](https://marketplace.visualstudio.com/publishers/aswinkumar863))\n* [Sort Editors](https://marketplace.visualstudio.com/items?itemName=aswinkumar863.sort-editors) ([Aswin Kumar](https://marketplace.visualstudio.com/publishers/aswinkumar863))\n* [Compare View](https://marketplace.visualstudio.com/items?itemName=chekweitan.compare-view) ([chekweitan](https://marketplace.visualstudio.com/publishers/chekweitan))\n* [CloudStudio.github-authentication](https://marketplace.visualstudio.com/items?itemName=CloudStudio.github-authentication) ([CloudStudio](https://marketplace.visualstudio.com/publishers/CloudStudio))\n* [Text Power Tools](https://marketplace.visualstudio.com/items?itemName=qcz.text-power-tools) ([D\u00e1niel Tar](https://marketplace.visualstudio.com/publishers/qcz))\n* [filtered-interview-tool](https://marketplace.visualstudio.com/items?itemName=filtered-vscode.filtered-interview-tool) ([filtered-vscode](https://marketplace.visualstudio.com/publishers/filtered-vscode))\n* [HashiCorp HCL](https://marketplace.visualstudio.com/items?itemName=HashiCorp.HCL) ([HashiCorp](https://marketplace.visualstudio.com/publishers/hashicorp))\n* [fcs-vscode-web](https://marketplace.visualstudio.com/items?itemName=kuboja.fcs-vscode-web) ([HiStruct Team](https://marketplace.visualstudio.com/publishers/kuboja))\n* [Marked](https://marketplace.visualstudio.com/items?itemName=hyrious.vscode-marked) ([hyrious](https://marketplace.visualstudio.com/publishers/hyrious))\n* [Our Code](https://marketplace.visualstudio.com/items?itemName=IvanDwane.ourcode) ([Ivan Dwane](https://marketplace.visualstudio.com/publishers/IvanDwane))\n* [\u524d\u7aef\u5f00\u53d1\u96c6\u5408](https://marketplace.visualstudio.com/items?itemName=jihe.code-sets) ([jihe](https://marketplace.visualstudio.com/publishers/jihe))\n* [surfaces.txt](https://marketplace.visualstudio.com/items?itemName=kanadelab.surfaces) ([kanadelab](https://marketplace.visualstudio.com/publishers/kanadelab))\n* [lcode webdav editor](https://marketplace.visualstudio.com/items?itemName=lcode.lwebdav) ([lcode](https://marketplace.visualstudio.com/publishers/lcode))\n* [Lightrun](https://marketplace.visualstudio.com/items?itemName=Lightrun.lightrunplugin-saas) ([Lightrun](https://marketplace.visualstudio.com/publishers/lightrun))\n* [f-string Converter (Python 3.6+)](https://marketplace.visualstudio.com/items?itemName=mdebi.fstring-converter) ([mdebi](https://marketplace.visualstudio.com/publishers/mdebi))\n* [MutableAI (beta)](https://marketplace.visualstudio.com/items?itemName=mutable-ai.mutable-ai) ([mutable-ai](https://marketplace.visualstudio.com/publishers/mutable-ai))\n* [NaiveSystems Analyze (Extension)](https://marketplace.visualstudio.com/items?itemName=naivesystems.analyze) ([Naive Systems](https://marketplace.visualstudio.com/publishers/naivesystems))\n* [File Utils](https://marketplace.visualstudio.com/items?itemName=pomdtr.fileutils) ([pomdtr](https://marketplace.visualstudio.com/publishers/pomdtr))\n* [Secrets](https://marketplace.visualstudio.com/items?itemName=pomdtr.secrets) ([pomdtr](https://marketplace.visualstudio.com/publishers/pomdtr))\n* [dotbook](https://marketplace.visualstudio.com/items?itemName=ShivaPrasanth.dotbook) ([Prasanth](https://marketplace.visualstudio.com/publishers/shivaprasanth))\n* [Common Lisp](https://marketplace.visualstudio.com/items?itemName=qingpeng.common-lisp) ([Qingpeng Li](https://marketplace.visualstudio.com/publishers/qingpeng))\n* [react replace/refactor component](https://marketplace.visualstudio.com/items?itemName=rumemeta-maila.react-replace-refactor-component) ([rumemeta-maila](https://marketplace.visualstudio.com/publishers/rumemeta-maila))\n* [fiber-ifttt-tool](https://marketplace.visualstudio.com/items?itemName=t-codespaces.fiber-ifttt-tool) ([t-codespaces](https://marketplace.visualstudio.com/publishers/t-codespaces))\n* [ide-data-sync](https://marketplace.visualstudio.com/items?itemName=t-codespaces.ide-data-sync) ([t-codespaces](https://marketplace.visualstudio.com/publishers/t-codespaces))\n* [Even Better TOML](https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml) ([tamasfe](https://marketplace.visualstudio.com/publishers/tamasfe))\n* [web-ext](https://marketplace.visualstudio.com/items?itemName=yogesh.web-ext) ([yogesh](https://marketplace.visualstudio.com/publishers/yogesh))\n* [Vetur Extended](https://marketplace.visualstudio.com/items?itemName=zardoy.vetur-extended) ([zardoy](https://marketplace.visualstudio.com/publishers/zardoy))",
    "url": "https://code.visualstudio.com/updates/v1_69#_web-extensions",
    "id": 2844
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)",
    "url": "https://code.visualstudio.com/updates/v1_69#_issue-tracking",
    "id": 2845
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2022 Release (1.69)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart)\n* Add more sanitization around the attributes in MD generated HTML [PR #149100](https://github.com/microsoft/vscode/pull/149100)\n* Prefer the markdown description in the preferences page [PR #152860](https://github.com/microsoft/vscode/pull/152860)\n* Remove duplicate declarations in terminal [PR #153280](https://github.com/microsoft/vscode/pull/153280)\n* [@alanrenmsft (Alan Ren)](https://github.com/alanrenmsft): add aria-description support for selectbox [PR #152251](https://github.com/microsoft/vscode/pull/152251)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch)\n* [typescript-language-features] Pass through all `typescript.unstable.*` settings [PR #151472](https://github.com/microsoft/vscode/pull/151472)\n* [typescript-language-features] Add setting for autoImportFileExcludePatterns [PR #153160](https://github.com/microsoft/vscode/pull/153160)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks)\n* Polish PR template picker [PR #151415](https://github.com/microsoft/vscode/pull/151415)\n* [markdown] Ignore brackets inside link text [PR #151610](https://github.com/microsoft/vscode/pull/151610)\n* Add option to always reveal tests after state change [PR #152331](https://github.com/microsoft/vscode/pull/152331)\n* \ud83c\udf81 Add \"Remove expression\" as an action bar command to debug watch expressions [PR #152861](https://github.com/microsoft/vscode/pull/152861)\n* \ud83d\udd28 Indicate \"No snippet available\" on the surround with snippet picker [PR #152892](https://github.com/microsoft/vscode/pull/152892)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Add command to toggle between light/dark color themes [PR #151554](https://github.com/microsoft/vscode/pull/151554)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Add removeAllMarkers method in monaco api [PR #151237](https://github.com/microsoft/vscode/pull/151237)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): `Keep Editors Open` -> `Disable Preview Mode` (fixes #152240) [PR #152322](https://github.com/microsoft/vscode/pull/152322)\n* [@guiherzog (Guilherme Herzog)](https://github.com/guiherzog): Improve performance of CompressibleAsyncDataTree [PR #152961](https://github.com/microsoft/vscode/pull/152961)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes terminal not restoring properly [PR #149621](https://github.com/microsoft/vscode/pull/149621)\n* Fix terminal quick pick index [PR #152699](https://github.com/microsoft/vscode/pull/152699)\n* Fixes detaching a terminal editor doesn't fire vscode.window.onDidCloseTerminal event [PR #152791](https://github.com/microsoft/vscode/pull/152791)\n* [@JohnnyCrazy (Jonas Dellinger)](https://github.com/JohnnyCrazy): A full editor can be used as git commit message editor [PR #95266](https://github.com/microsoft/vscode/pull/95266)\n* [@jramsay (jram)](https://github.com/jramsay): [npm extension] exclude top level npm_modules when detecting npm scripts in workspaces [PR #150205](https://github.com/microsoft/vscode/pull/150205)\n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb): Comments: Wrap non-Markdown content [PR #152987](https://github.com/microsoft/vscode/pull/152987)\n* [@leopoldsedev (Christian Leopoldseder)](https://github.com/leopoldsedev)\n* Fix #151515 [PR #151590](https://github.com/microsoft/vscode/pull/151590)\n* Fix #148150 [PR #151594](https://github.com/microsoft/vscode/pull/151594)\n* Implement action to clear keyboard shortcuts search history [PR #151607](https://github.com/microsoft/vscode/pull/151607)\n* [@MachineMitch21 (Mitch Schutt)](https://github.com/MachineMitch21): Focus editor for tab after dragged over for 1500 millis [PR #149604](https://github.com/microsoft/vscode/pull/149604)\n* [@mbelsky (Max Belsky)](https://github.com/mbelsky): Support `Transform to Kebab Case` [PR #147956](https://github.com/microsoft/vscode/pull/147956)\n* [@Mingpan](https://github.com/Mingpan)\n* Arrows to revert changes in side by side diff editor [PR #151826](https://github.com/microsoft/vscode/pull/151826)\n* Add config for disable arrows in diff [PR #153199](https://github.com/microsoft/vscode/pull/153199)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains): Fix missing horizontal bracket guides when editor.wrappingIndent == \"same\" [PR #152529](https://github.com/microsoft/vscode/pull/152529)\n* [@prashantvc (Prashant Cholachagudda)](https://github.com/prashantvc): Added the `VSCode-SessionId` for extension queries Issue2961 [PR #153271](https://github.com/microsoft/vscode/pull/153271)\n* [@Priyankcoder (Priyank Rastogi)](https://github.com/Priyankcoder): Add latex to markdown embedded languages [PR #151732](https://github.com/microsoft/vscode/pull/151732)\n* [@qingpeng9802 (Qingpeng Li)](https://github.com/qingpeng9802): Fix symbolkind icon [PR #152216](https://github.com/microsoft/vscode/pull/152216)\n* [@thegecko (Rob Moran)](https://github.com/thegecko): Add web command to request device access [PR #152310](https://github.com/microsoft/vscode/pull/152310)\n* [@TheV360 (V360)](https://github.com/TheV360): Fix inlay hints being offset by 1px in some cases [PR #153424](https://github.com/microsoft/vscode/pull/153424)\n* [@tjx666 (\u4f59\u817e\u9756)](https://github.com/tjx666): fix jsx text foreground in tomorrow-night theme [PR #151478](https://github.com/microsoft/vscode/pull/151478)\n* [@ulugbekna (Ulugbek Abdullaev)](https://github.com/ulugbekna)\n* add progress reporting for fetching repos [PR #153082](https://github.com/microsoft/vscode/pull/153082)\n* add auto-hide option for minimap (default = false) which [PR #153093](https://github.com/microsoft/vscode/pull/153093)\n* [@yiliang114 (jinjing.zzj)](https://github.com/yiliang114): fix: typos [PR #153229](https://github.com/microsoft/vscode/pull/153229)\n* [@yutotnh (yutotnh)](https://github.com/yutotnh): fix: typo [PR #153187](https://github.com/microsoft/vscode/pull/153187)  \nContributions to `vscode-generator-code`:  \n* [@hawkticehurst (Hawk Ticehurst)](https://github.com/hawkticehurst): Fix incorrect keyboard shortcut listed in template READMEs [PR #354](https://github.com/microsoft/vscode-generator-code/pull/354)  \nContributions to `vscode-js-debug`:  \n* [@jakebailey (Jake Bailey)](https://github.com/jakebailey): Stop REPL stack traces at the REPL eval frame [PR #1263](https://github.com/microsoft/vscode-js-debug/pull/1263)  \nContributions to `vscode-pull-request-github`:  \n* [@blindpirate (Bo Zhang)](https://github.com/blindpirate): Show pull request's close button for author [PR #3507](https://github.com/microsoft/vscode-pull-request-github/pull/3507)\n* [@leopoldsedev (Christian Leopoldseder)](https://github.com/leopoldsedev): Implement quick self assign link as available on .com (#3382) [PR #3601](https://github.com/microsoft/vscode-pull-request-github/pull/3601)  \nContributions to `debug-adapter-protocol`:  \n* [@rillig (Roland Illig)](https://github.com/rillig)\n* Remove extra line breaks [PR #277](https://github.com/microsoft/debug-adapter-protocol/pull/277)\n* Fix spelling [PR #292](https://github.com/microsoft/debug-adapter-protocol/pull/292)\n* Reword ambiguous 'not A or B' [PR #293](https://github.com/microsoft/debug-adapter-protocol/pull/293)  \nContributions to `devcontainers/cli`:  \n* [@juzuluag (Juan Zuluaga)](https://github.com/juzuluag): Add multi build support [PR #24](https://github.com/devcontainers/cli/pull/24)  \n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_69#_pull-requests",
    "id": 2846
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n## Workbench  \n### Horizontal layout  \nYou can now change the layout of editor groups to be either vertical or horizontal. Both layouts behave the same as before allowing you to move and resize editors and editor groups.  \n![Horizontal](images/1_7/horizontal.png)  \nTo enable horizontal layout for the current workspace, use:  \n* The **View** menu **Toggle Editor Group Layout**.\n* The Command Palette **Toggle Vertical/Horizontal Editor Group Layout**.\n* An action in the header of the **OPEN EDITORS** view.  \n![toggle horizontal layout](images/1_7/toggle-horizontal-layout.png)  \nThere is also a keyboard shortcut (`kb(workbench.action.toggleEditorGroupLayout)`) to quickly switch between the two layouts.  \nOnce you made your choice for the layout, we persist it for the current workspace and restore it after restart.",
    "url": "https://code.visualstudio.com/updates/v1_7#_horizontal-layout",
    "id": 2848
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Toggle Maximized Panel  \nWe have introduced a global workbench command that maximizes the size of the panel (80% of the total height). If the panel is already maximized, this command will shrink the panel to its previous size. This is really handy when you have lots of output to review quickly. This command is not currently bound to any keyboard shortcut but you can add easily your own [keybinding](https://code.visualstudio.com/docs/getstarted/keybindings).",
    "url": "https://code.visualstudio.com/updates/v1_7#_toggle-maximized-panel",
    "id": 2849
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Toggle Sidebar and Hide Status Bar now persisted in user settings  \nWe changed some of the toggles in the View menu to update your user settings file instead of persisting their state in the browser. This will make it easier to restore the same state on a different machine by copying the settings file.  \nThe following settings will now be changed in your user settings file when you change them from the View menu:  \n* `workbench.sideBar.location` to control the position of the Sidebar (left or right)\n* `workbench.statusBar.visible` to control the visibility of the Status Bar  \nIn addition, changing the Zoom level from the View menu now writes to `window.zoomLevel`.",
    "url": "https://code.visualstudio.com/updates/v1_7#_toggle-sidebar-and-hide-status-bar-now-persisted-in-user-settings",
    "id": 2850
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Open multiple files from Quick Open  \nThanks to [Will Prater (@wprater)](https://github.com/wprater), you can now open multiple files from Quick Open by just pressing the Right arrow key. This will open the currently selected file in the background and you can continue selecting files from Quick Open.",
    "url": "https://code.visualstudio.com/updates/v1_7#_open-multiple-files-from-quick-open",
    "id": 2851
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n## Editor  \n### Keyboard Shortcuts Reference  \n**Help** > **Keyboard Shortcuts Reference** brings up a printable PDF reference sheet of VS Code command keyboard shortcuts. Keep this reference handy and you'll be a VS Code power user in no time.  \nHere's it is for macOS:  \n![keyboard shortcuts pdf](images/1_7/keyboard-shortcuts-pdf.png)  \nBelow are links to the three platform-specific versions:  \n* [Windows](https://go.microsoft.com/fwlink/?linkid=832145)\n* [macOS](https://go.microsoft.com/fwlink/?linkid=832143)\n* [Linux](https://go.microsoft.com/fwlink/?linkid=832144)  \n>**Note:** We also added a menu command to go to the [Introductory Videos](https://code.visualstudio.com/docs/getstarted/introvideos) (**Help** > **Introductory Videos**).",
    "url": "https://code.visualstudio.com/updates/v1_7#_keyboard-shortcuts-reference",
    "id": 2852
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Format Document / Format Selection  \nThe editor now has two explicit format actions: **Format Document** (`kb(editor.action.formatDocument)`) and **Format Selection** (`kb(editor.action.formatSelection)`).  \n![format on context menu](images/1_7/format-context-menu.png)  \nWe also added new configuration options to enable/disable the default formatters for JavaScript, TypeScript, JSON, and HTML. Use these options when you have another extension installed that provides formatting for the same language.  \nWe've added a new `Formatters` [category](#formatters-category) to the Marketplace so you can easily search and find source code [formatting extensions](https://marketplace.visualstudio.com/search?target=VSCode&category=Formatters&sortBy=Downloads).  \n![marketplace formatter extensions](images/1_7/marketplace-formatters.png)",
    "url": "https://code.visualstudio.com/updates/v1_7#_format-document-/-format-selection",
    "id": 2853
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n## Languages  \n### Better JavaScript IntelliSense  \n>**Note:** This feature was disabled in the 1.7.1 build. Read on to learn what's coming in a future release.  \nVS Code uses the TypeScript language server to provide IntelliSense in JavaScript files. In the past, you had to create a `jsconfig.json` file. You also had to manually install typings (Type Declaration) files for all the modules and libraries you were using. That's not an easy chore, particularly when you are a pure JavaScript developer.  \nWe talked with our friends on the TypeScript team and they came up with \"Automatic Type Acquisition\". ATA makes typings files almost invisible. A TypeScript language server that has ATA enabled watches your `package.json` files and automatically installs the typings files of all dependencies in a cache on your file system. It does the same when it finds references to well known client-side libraries. When you then invoke IntelliSense, the TypeScript server uses the typings files in the cache. The cache is shared between all your workspaces. Without a `jsconfig.json` file the TypeScript server assumes that everything in your workspace belongs to the same project.  \nWe think this is so cool that we wanted you to get your hands on it as soon as possible. Our integration of ATA is still rough around the edges, but we decided to enable it by default. Should you experience issues, you can switch it off by setting `typescript.disableAutomaticTypeAcquisition` to `true` in your user settings.  \nHere are a few points you should be aware of when using ATA:  \n- ATA is backward compatible. If you have a `typings` folder or you installed typings using `npm`, then those take precedence over the automatically acquired typings files.\n- ATA acquires the latest available version of the typings files. If you depend on an older version of a library or module then there can be discrepancies between the actual API exposed by the library or module and the API described in the typings file. If you require a specific version of a typings files, you can install it manually: `npm install @types/<module name>@x.y.z`.\n- An increasing number of npm modules bundle their typings files, meaning the only way to acquire the typings is by installing the module. ATA does not install npm modules for you, so you have to do it yourself.\n- There is a short delay between when a change is made to the dependencies in a `package.json` file and when the corresponding typings file is acquired and available for IntelliSense.\n- In the implementation, the ATA feature first queries npmjs for a module that includes a list of known declaration files. If your project includes any of these modules, their declaration files will be pulled down and added to the global cache.",
    "url": "https://code.visualstudio.com/updates/v1_7#_better-javascript-intellisense",
    "id": 2854
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### CSS completions in HTML  \nYou can now see CSS language features like code completion, validation and color annotation for CSS styles embedded within your HTML.  \n![css intellisense in html](images/1_7/css-intellisense-in-html.png)",
    "url": "https://code.visualstudio.com/updates/v1_7#_css-completions-in-html",
    "id": 2855
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Improved TypeScript and JavaScript Grammar  \nTypeScript and JavaScript syntax highlighting is based on the [TypeScript textmate grammar](https://github.com/microsoft/TypeScript-TmLanguage) authored by the TypeScript team.\nIn the recent months the grammar has been completely rewritten.  \nThe main goal was to tackle as many of reported issues as possible. Additionally, we wanted to provide a better experience with existing color themes by generating scopes closer to what other popular JavaScript grammars such as the [Atom grammar](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar) do, while still supporting features like the JavaScript React syntax.  \nAs a result of the effort, over 100 issues has been fixed, including the request to report variable and function references. We decided to take advantage of the new scopes and now also colorize variable and function references in our Default Dark and Light Plus themes. We hope you like it!  \nNote: If you have already been helping us testing the latest grammar using the [Latest TypeScript and JavaScript grammar extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.typescript-javascript-grammar): You can uninstall that extension now.",
    "url": "https://code.visualstudio.com/updates/v1_7#_improved-typescript-and-javascript-grammar",
    "id": 2856
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Linter Extensions  \nThe `vscode-eslint` and `vscode-tslint` extensions now provide settings to automatically correct fixable warnings on save.  \n```json\n{\n\"eslint.autoFixOnSave\": true,\n\"tslint.autoFixOnSave\": true\n}\n```  \nNote: This setting is ignored when `files.autoSave` is set to `afterDelay`.",
    "url": "https://code.visualstudio.com/updates/v1_7#_linter-extensions",
    "id": 2857
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n## Extensions  \n### Keymaps category  \nKeyboard shortcuts are vital to productivity and changing keyboarding habits can be tough. To help with this, we added two new extensions and introduced a new category `Keymaps` to the Marketplace. The purpose is to make it easier to switch between editors by removing the need to learn new keyboard shortcuts.  \nWe built an extension for [Atom](https://marketplace.visualstudio.com/items?itemName=ms-vscode.atom-keybindings) and [Sublime Text](https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings). We found some of the most popular keyboard shortcuts and would like your feedback on what we're missing. If we missed a keyboard shortcut, please open an issue or make a PR in the repo.  \n![Keymaps](images/1_7/keymaps.png)  \nAdditionally, you can create your own keymap extension using the `keybindings` contribution point and adding it to the `Keymaps` category.",
    "url": "https://code.visualstudio.com/updates/v1_7#_keymaps-category",
    "id": 2858
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Formatters category  \nMany extensions exist that contribute source code formatting functionality. Some of the most popular formatters have more than 100K installs! We wanted to make it easier for you to find formatters so we added a new category to the Marketplace called, naturally, `Formatters`. [Search](https://marketplace.visualstudio.com/search?target=VSCode&category=Formatters&sortBy=Downloads) on the Marketplace and install a `Formatter` today.  \nHere are a couple of our favorites:  \n* [beautify](https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify)\n* [XML Tools](https://marketplace.visualstudio.com/items?itemName=DotJoshJohnson.xml)\n* [Clang-Format](https://marketplace.visualstudio.com/items?itemName=xaver.clang-format)\n* [PHP Formatter](https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter)\n* [Stylesheet Formatter](https://marketplace.visualstudio.com/items?itemName=dbalage.vscode-stylesheet-formatter)",
    "url": "https://code.visualstudio.com/updates/v1_7#_formatters-category",
    "id": 2859
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Disable extensions  \nOften you have more than one workspace and various extensions installed to support these workspaces. Most of the times, these extensions are exclusive to a single workspace and not needed for others. For example, if you have JavaScript and Go language workspaces, you do not need the JavaScript linting extension in a Go workspace and vice-versa. With this release, you can now run only those extensions which you think are necessary for a workspace and disable rest of them. You can also disable extensions for the complete VS Code application, if you do not want to uninstall them and do not want them to run.  \n![Disable Extension](images/1_7/disableExtension.png)  \nYou can also disable or enable all extensions with few clicks from VS Code.  \n![Disable All Extensions](images/1_7/disableAll.png)",
    "url": "https://code.visualstudio.com/updates/v1_7#_disable-extensions",
    "id": 2860
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Extension packs  \nLast release we introduced 'Extension Packs' which are extensions that depends on other extensions. In this release, we added a new tab to the extension editor to show these dependencies which gets installed when installing the pack.  \n![Extension Pack](images/1_7/extensionPack.png)  \nWhen you uninstall an extension pack, all its referenced dependency extensions are also uninstalled.",
    "url": "https://code.visualstudio.com/updates/v1_7#_extension-packs",
    "id": 2861
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n## Node Debugging  \n### Simplified launch configuration  \nIn order to make setting up Node.js debugging as easy as possible, we've tried to simplify the initial 'launch.json' experience:  \n* Required but rarely changed attributes are now rendered in gray to make it more obvious that there is no need to change them for the most common scenarios.\n* Less frequently used attributes (with good default values) were removed from the initial configurations to reduce the 'noise'. These attributes are still easily discoverable using IntelliSense.\n* Comments and a link to online documentation were added.\n* Online debugging [documentation](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) has been rewritten and improved.  \n![launchjson](images/1_7/launchjson.png)  \n>**Note:** Since we are only able to change the built-in Node.js debugger of VS Code, we are relying on the authors of the other debug extensions to do something similar (if needed).",
    "url": "https://code.visualstudio.com/updates/v1_7#_simplified-launch-configuration",
    "id": 2862
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Hit count conditional breakpoints  \nVS Code now supports setting a 'hit count condition' for a breakpoint (in addition to the 'expression condition' introduced some time ago). The 'hit count condition' controls how many times a breakpoint needs to be hit before it will 'break' execution.  \n![HitCount](images/1_7/hitCount.gif)  \nWhether a 'hit count condition' is respected and how the exact syntax of the expression looks like depends on the debugger extension used. In this milestone, only the built-in Node.js debugger supports hit counts (but we hope other debugger extensions will follow soon).  \nThe hit count syntax supported by the Node.js debugger is either an integer or one of the operators `<`, `<=`, `=`, `>`, `>=`, `%` followed by an integer.  \nSome examples:  \n- `>10` break always after 10 hits\n- `<3` break on the first two hits only\n- `10` same as `>=10`\n- `%2` break on every other hit",
    "url": "https://code.visualstudio.com/updates/v1_7#_hit-count-conditional-breakpoints",
    "id": 2863
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Multiple target debugging  \nThe October release contains an early implementation of 'multi target debugging', that is multiple debug sessions can be active at the same time within a single instance of VS Code (and a single project folder).  \nThis feature helps with the following scenarios:  \n* Debug an extension and its debug adapter and/or language server at the same time.\n* Debug a client and a server from a single project folder.\n* Debug a clustered program.  \n>**Note:** In this milestone the focus was on getting the internal abstractions for multi target debugging right and not on how to surface this in a UI.\nSo the UI of multi target debugging and how it is set up is highly **experimental** and will definitely change over the next milestones.  \nTo enable 'multi target debugging' create a new launch configuration with a type `composite` and add an array typed attribute `configurationNames`.\nUnder that attribute list the names of other launch configurations that should be launched in parallel.  \nAfter launching the `composite` configuration, the individual sessions show up as top level elements in the CALL STACK view.\nActions (e.g. all actions in the floating debug widget) are always performed on the currently selected session in the CALL STACK view.  \n![multiDebug](images/1_7/multiDebug.gif)",
    "url": "https://code.visualstudio.com/updates/v1_7#_multiple-target-debugging",
    "id": 2864
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Debug settings  \nWe have introduced the following new settings:  \n* `debug.allowBreakpointsEverywhere` - Allows breakpoints to be set in any file (and not only in those which are explicitly registered). This is useful if you want to debug a new (transpiled) language with an existing debugger (for example, the Node.js debugger).\n* `debug.openExplorerOnEnd` - Controls if the Explorer should be automatically opened at the end of a debug session.",
    "url": "https://code.visualstudio.com/updates/v1_7#_debug-settings",
    "id": 2865
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n## Extension Authoring  \n### Breaking Change: `MarkedString[]` semantics  \nAPI related implementations which return `MarkedString | MarkedString[]` have changed semantics. Each `MarkedString` will be visually separated from the others with a horizontal line. Both the `HoverProvider` and `Decoration` APIs are affected by this.",
    "url": "https://code.visualstudio.com/updates/v1_7#_breaking-change:-markedstring[]-semantics",
    "id": 2866
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Changelogs  \nYou can now display your extension's CHANGELOG.md directly in the extension details view.  \nWe recommend extension authors move any existing changelogs from their extension's README.md to a separate CHANGELOG.md file. Similar to README.md, if the CHANGELOG.md is placed in the extension's workspace root, it will be automatically included by the `vsce` publishing tool.",
    "url": "https://code.visualstudio.com/updates/v1_7#_changelogs",
    "id": 2867
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Provide menu entries for the editor tab context menu  \nWe added an additional place where extensions can contribute menu entries, the context menu of an editor tab (this also works when tabs are disabled). The related menu path for contributing here is `editor/title/context`.  \nFor example:  \n```json\n\"commands\": [{\n\"command\": \"doSomething\",\n\"title\": \"Do Something\"\n}],\n\"menus\": {\n\"editor/title/context\": [\n{\n\"command\": \"doSomething\"\n}\n]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_7#_provide-menu-entries-for-the-editor-tab-context-menu",
    "id": 2868
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### onDidChangeVisibleTextEditors event  \nWe added an [`onDidChangeVisibleTextEditors`](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L3383) event which fires whenever the list of visible editors changes.",
    "url": "https://code.visualstudio.com/updates/v1_7#_ondidchangevisibletexteditors-event",
    "id": 2869
  },
  {
    "content": "See what is new in the Visual Studio Code October 2016 Release (1.7)\n### Update Now: Using latest vscode.d.ts  \nAs ever, the latest and greatest version of our extension API is defined in the [vscode.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts) file.\n>**Note:** when you update your extension to use an API version 1.7.0 or newer, make sure you use the latest version of the [vscode](https://www.npmjs.com/package/vscode)-node-module (^1.0.3) and make sure to use TypeScript 2.0.  \nPlease read [here](https://code.visualstudio.com/updates/v1_6#_extension-authoring) to learn how to migrate your existing extensions to the latest vscode module.",
    "url": "https://code.visualstudio.com/updates/v1_7#_update-now:-using-latest-vscode.d.ts",
    "id": 2870
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Improved menu bar folding  \nWith the addition of the Command Center, we tried shrinking the menu bar to a hamburger menu to make space. After hearing user feedback, we switched back to the old menu bar folding behavior until most of the menu is collapsed, and only then switch to the hamburger menu.  \n<video src=\"images/1_70/menu-bar-folding.mp4\" autoplay loop controls muted title=\"responsive menu bar folding\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_improved-menu-bar-folding",
    "id": 2872
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Accessible macOS title bar zoom  \nAlso as part of improving the Command Center experience, when interactive components are present in the title bar on macOS, the title bar will now zoom with the rest of the UI for increased accessibility.  \n<video src=\"images/1_70/macos-title-bar-zooming.mp4\" autoplay loop controls muted title=\"macOS title bar zooming\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_accessible-macos-title-bar-zoom",
    "id": 2873
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Fold selection  \nThe command **Create Manual Folding Ranges from Selection** (`kb(editor.createFoldingRangeFromSelection)`) creates a [folding](https://code.visualstudio.com/docs/editor/codebasics#_folding) range from the currently selected lines and collapses it. The range is called a **manual** folding range and goes on top of the ranges computed by folding providers.  \nManual folding ranges can be removed again with the command **Remove Manual Folding Ranges** (`kb(editor.removeManualFoldingRanges)`).  \n<video src=\"images/1_70/manual-folding-range.mp4\" autoplay loop controls muted title=\"manual folding ranges\"></video>  \nManual folding ranges are especially useful for cases when there isn't programming language support for folding.",
    "url": "https://code.visualstudio.com/updates/v1_70#_fold-selection",
    "id": 2874
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Preserve folded ranges  \nVS Code now keeps folded ranges, even if the folding range is no longer part of the ranges computed by a folding provider. A typical example is when the user comments out the file, starts a string literal, or creates a syntax error that makes it impossible to create all the ranges. Such folded ranges become 'recovered' ranges. They are removed once the folding provider comes back with ranges at the same location or by using the command **Remove Manual Folding Ranges**.  \n<video src=\"images/1_70/restored-folding-ranges.mp4\" autoplay loop controls muted title=\"restored folding ranges\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_preserve-folded-ranges",
    "id": 2875
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Hide folding controls  \nThe folding controls in the gutter can now be hidden with the setting `\"editor.showFoldingControls\": \"never\"`. Folding ranges can still be expanded and collapsed using the folding commands and shortcuts.",
    "url": "https://code.visualstudio.com/updates/v1_70#_hide-folding-controls",
    "id": 2876
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### 3-way merge editor improvements  \nWe continued polishing the new 3-way merge editor and enabled it by default in this release. The merge editor can be opened by clicking on a conflicting file in the Source Control view.  \nHighlights include new commands to accept all changes from one side, improved context menus, enhanced diff colors, and a greater emphasis on conflicting versus non-conflicting changes.  \nWe also started exploring alternative diffing algorithms to improve precision of merge conflicts. If you encounter suboptimal change highlighting or alignment in either the diff or the merge editor, we would like to record these cases in our GitHub issue tracker!",
    "url": "https://code.visualstudio.com/updates/v1_70#_3-way-merge-editor-improvements",
    "id": 2877
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Command line option merge  \nYou can now use command line options to bring up the merge editor in VS Code:  \n```bash\n-m --merge <path1> <path2> <base> <result> Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions, and the output file to save merge results.\n```  \nThis enables you to use VS Code as a merge tool for Git, for example, if you configure this in `.gitconfig`:  \n```ini\n[merge]\ntool = code\n[mergetool \"code\"]\ncmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED\n```",
    "url": "https://code.visualstudio.com/updates/v1_70#_command-line-option-merge",
    "id": 2878
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Search file decorations  \nSearch results in the Search view now feature file decorations and colors on the right to express the file's problems and source control information. This is similar to [the file decorations already shown in the File Explorer](https://code.visualstudio.com/updates/v1_26#_custom-view-file-resource-decorations).  \n![Search file decorations](images/1_70/search-decorations.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_search-file-decorations",
    "id": 2879
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Search multiple selection  \nThe Search view now also supports multi-select. Any actions (for example, dismiss or replace) that you perform on one result in the selection will also be performed on the other selected items.  \n<video src=\"images/1_70/search-multiselect.mp4\" autoplay loop controls muted title=\"Search view multiple selection with exclude and accept actions\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_search-multiple-selection",
    "id": 2880
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Tree find control  \nTree views, such as the File Explorer, now support the Find control. You can press `kb(list.find)` inside trees to pop up the Find control. You can use the Find control to highlight matched elements or toggle the **Filter** button to hide all elements that do not match the search term.  \n<video src=\"images/1_70/tree-filter.mp4\" autoplay loop controls muted title=\"Tree Find control showing search and filter\"></video>  \n**Note:** If you are used to opening the Find control in the editor when invoking `kb(list.find)` while the File Explorer has focus, you can configure your keybindings accordingly:  \n```json\n{\n\"key\": \"cmd+f\", // \"ctrl+f\" on Windows/Linux\n\"command\": \"-list.find\",\n\"when\": \"listFocus && listSupportsFind\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_70#_tree-find-control",
    "id": 2881
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Arbitrary file creations via New File  \nThe **File** > **New File...** (or **New File...** link on the **Welcome** page) experience has been improved to allow for arbitrary file creation. You can now type a file name in the quick input box to create the file on disk.  \n![A input box with test.js inputted into it and the entry New File(test.js) selected](images/1_70/new-file.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_arbitrary-file-creations-via-new-file",
    "id": 2882
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Terminal  \n### Shell integration enabled by default  \nShell integration's automatic injection that [was moved out of preview last release](https://code.visualstudio.com/updates/v1_69#_shell-integration) is now enabled by default. For supported shell setups (most bash/zsh/pwsh configurations), it should all just work without any changes and you should see command decorations:  \n![When shell integration is enabled, blue, red and grey circles appear next to commands run in the terminal](images/1_70/terminal-si-intro.png)  \n_Theme: [Sapphire Theme](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire)_  \n>**Note**: On Windows, you'll need PowerShell 7 (pwsh) for shell integration support. You can install via [https://aka.ms/PSWindows](https://aka.ms/PSWindows).  \nIf the shell integration features don't light up automatically, you will need to set up [manual installation](https://code.visualstudio.com/docs/terminal/shell-integration#_manual-installation), which has been [simplified in this release](#more-shell-integration-configuration-options).  \nAutomatic injection is enabled when the `terminal.integrated.shellIntegration.enabled` setting is set to `true`, add this to your `settings.json` file to disable the feature:  \n```json\n\"terminal.integrated.shellIntegration.enabled\": \"false\"\n```  \nThis will disable only VS Code's shell integration injection. Even when disabled, if your setup has shell integration enabled for some other terminal that VS Code understands, [it will still pick those up](https://code.visualstudio.com/docs/terminal/shell-integration#_final-term-shell-integration). If you don't like the command and/or scroll bar decorations, [you can disable just their display](#more-shell-integration-configuration-options), while still taking advantage of the [extra functionality](https://code.visualstudio.com/docs/terminal/shell-integration#_features) that shell integration brings.",
    "url": "https://code.visualstudio.com/updates/v1_70#_shell-integration-enabled-by-default",
    "id": 2883
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Simplified shell integration manual install  \nPreviously manual install took several steps and was platform and shell specific. The new manual install uses the `code` CLI to fetch the shell integration script and works cross-platform and when connected to a remote window, meaning you can sync it in your dotfiles and it should just work.  \n```sh\n# Manual install on bash\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n```  \nYou can read more about how to install shell integration for other shells at [Terminal shell integration](https://code.visualstudio.com/docs/terminal/shell-integration#_manual-installation).",
    "url": "https://code.visualstudio.com/updates/v1_70#_simplified-shell-integration-manual-install",
    "id": 2884
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### More shell integration configuration options  \nThe new setting `terminal.integrated.shellIntegration.decorationsEnabled` lets you display command decorations in either the `gutter`, the `overviewRuler`, or neither. For easy access, you can modify this setting via **Configure Command Decorations** in a context menu when you click on a decoration (select **Toggle visibility** to display the options dropdown).  \n![The command decoration context menu contains the new option Configure Command Decorations](images/1_70/terminal-si-config.png)  \nYou can also configure the default, success, or error icons from the dropdown.",
    "url": "https://code.visualstudio.com/updates/v1_70#_more-shell-integration-configuration-options",
    "id": 2885
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Default color and icon tab settings  \nThe default icon and terminal tab color can be set per folder using `terminal.integrated.tabs.defaultIcon` and `terminal.integrated.tabs.defaultColor`.",
    "url": "https://code.visualstudio.com/updates/v1_70#_default-color-and-icon-tab-settings",
    "id": 2886
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Extended PowerShell keybindings  \nThere are additional PowerShell keybindings, such as `kbstyle(Ctrl+Space)`, thanks to shell integration. These weren't possible before due to the lack of VT encoding. Provided that shell integration is working in pwsh, the following keybindings should now work:  \n* `kbstyle(Ctrl+Space)` - Defaults to `MenuComplete` on Windows only.\n* `kbstyle(Alt+Space)` - Defaults to `SetMark`.\n* `kbstyle(Shift+Enter)` - Defaults to `AddLine`.\n* `kbstyle(Shift+End)` - Defaults to `SelectLine`.\n* `kbstyle(Shift+Home)` - Defaults to `SelectBackwardsLine`.  \nThis applies to **all platforms**, even Linux/macOS where those keybindings aren't normally possible. The defaults can always be reset in your pwsh profile with `Set-PSReadLineKeyHandler`. If there are additional keybindings that you expect, [please let us know](https://github.com/microsoft/vscode/issues/new).",
    "url": "https://code.visualstudio.com/updates/v1_70#_extended-powershell-keybindings",
    "id": 2887
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Run recent command as a replacement for reverse search  \nWhen shell integration is enabled, we're aiming run recent command to be a cross-shell drop in replacement for the shell's reverse search (`kbstyle(Ctrl+R)`). There is a new contiguous search mode that is the default when triggering the command. This behaves like `kbstyle(Ctrl+R)` in most shells, with the option of switching back to fuzzy search:  \n<video src=\"images/1_70/terminal-si-run-recent-command.mp4\" autoplay loop controls muted title=\"Run recent command's contiguous search will match the search term exactly, toggle Fuzzy Search to switch to fuzzy searching\"></video>  \nThe new `inTerminalRunCommandPicker` context key is available that allows setting up a keybinding like `kbStyle(Ctrl+R)` to go to the next match. For example, the following keybindings are now a fairly complete replacement for your shell's reverse search, with `kbstyle(Ctrl+Alt+R)` as a fallback to the old behavior:  \n```json\n{ \"key\": \"ctrl+r\",     \"command\": \"workbench.action.terminal.runRecentCommand\", \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+alt+r\", \"command\": \"workbench.action.terminal.sendSequence\", \"args\": { \"text\": \"\\u0012\"/*^R*/ }, \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+r\",     \"command\": \"workbench.action.quickOpenNavigateNextInViewPicker\", \"when\": \"inQuickOpen && inTerminalRunCommandPicker\" },\n{ \"key\": \"ctrl+c\",     \"command\": \"workbench.action.closeQuickOpen\", \"when\": \"inQuickOpen && inTerminalRunCommandPicker\" },\n```  \nMulti-line commands now display a new line symbol where appropriate and will also use bracketed paste mode, meaning they are treated as if they were pasted for supporting shells. This typically means they will all be added to the same prompt instead of executing them separately.  \n![Run recent command now shows the \"Return Symbol\" Unicode character (\u23ce, U+23CE) to visualize new lines](images/1_70/terminal-si-multi-line.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_run-recent-command-as-a-replacement-for-reverse-search",
    "id": 2888
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Other shell integration improvements  \nHere are the smaller improvements to shell integration:  \n* Command navigation has improved visual feedback, showing the \"focus border\" briefly and then keeping a persistent rectangle in the gutter to help highlight the position in the buffer.  \n![A solid rectangle the color of your theme's focus color now appears to the left of the command being navigated to](images/1_70/terminal-nav-feedback.png)  \n* The new `workbench.action.terminal.copyLastCommand` command is available to allow a keybinding to copy the last command's output (shortcut for `kbStyle(Ctrl/Cmd+Shift+Up)`, `kbStyle(Ctrl/Cmd+C)`, `kbStyle(Escape)`, `kbStyle(Ctrl/Cmd+End)`).  \n* Bash shell integration:\n* More `$PROMPT_COMMAND` formats are supported.\n* Shell integration should work even better when the [`bash-preexec`](https://github.com/rcaloras/bash-preexec) helper is being used already.",
    "url": "https://code.visualstudio.com/updates/v1_70#_other-shell-integration-improvements",
    "id": 2889
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Rendering improvements  \nSeveral improvements were made to terminal rendering when GPU acceleration is enabled:  \n* Semi-circle Powerline symbols are now custom rendered. Like the arrow symbols in the previous release, these should blend seamlessly with adjacent cells and extend to the height of the cell even when line height is used.  \n![Semi-circle Powerline symbols now render without needing to configure a font](images/1_70/terminal-semi-circle.png)  \n* Round cornered box drawing characters (`\u256d`, `\u256e`, `\u2570`, `\u256f`) now use a smoother curve.  \n![These round corner symbols now render as perfect 1/4 circles](images/1_70/terminal-curve-render.png)  \n* Improved clipping of glyphs when the background color changes, this was commonly seen when `npm` outputs a warning.  \n![Wide characters like W would sometimes escape the background of a cell. For example, when the background of the text was yellow, the W in \"WARN\" could show unexpected yellow pixels in the top left. The After image shows that it is now fixed](images/1_70/terminal-render-clip.png)  \n* Similar to the clipping problem above, there was an issue where the anti-aliasing in some glyphs would overlap other characters and degrade the visuals. This problem is most easily illustrated using a background example like above. A pixel in the `k` of `Work` could also escape the bounds of the cell in the other direction. This pixel will no longer appear in the glyph at all since it's removed for being nearly the same color as the background.  \n![A pixel in `k` could overlap with the cell to the right, in this case that pixel may not be rendered at all if the difference in color and the background is small](images/1_70/terminal-render-px.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_rendering-improvements",
    "id": 2890
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Source Control  \n### Action button improvements  \nWe continued to polish the Source Control action button based on user feedback:  \n* The **Sync Changes** action button is only shown when there is a high degree of certainty that the local branch is either ahead or behind the remote tracking branch.\n* The **Commit** action button is only enabled based on the list of changed resources while factoring in the smart commit settings:\n* `git.enableSmartCommit`\n* `git.suggestSmartCommit`\n* `git.smartCommitChanges`\n* The **Commit** action button icon is updated based on the branch protection settings:\n* `git.branchProtection`\n* `git.branchProtectionPrompt`",
    "url": "https://code.visualstudio.com/updates/v1_70#_action-button-improvements",
    "id": 2891
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Improved rebase conflict resolution  \nThis milestone we addressed some smaller issues in the rebase flow when resolving merge conflicts. Users should now be able to continue the rebase operation using the **Commit** button in the Source Control view after resolving all merge conflicts.",
    "url": "https://code.visualstudio.com/updates/v1_70#_improved-rebase-conflict-resolution",
    "id": 2892
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Commit input field spell checking  \nThis milestone we confirmed that all the necessary extension APIs are available to support spell checking in the commit input field. We reached out to the authors of two popular spell checking extensions and submitted pull requests illustrating how to update their extensions to provide spell checking for commit description text.",
    "url": "https://code.visualstudio.com/updates/v1_70#_commit-input-field-spell-checking",
    "id": 2893
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Debugging  \n### JavaScript debugging  \nWhen you create a launch config to debug a JavaScript/TypeScript program, you can set `\"console\": \"integratedTerminal\"` to run that program in a terminal (rather than the process being spawned directly). A few months ago, we noticed that `\"args\"` in the `launch.json` configuration were partly escaped for the shell, but not entirely. This meant that attempting to pass an argument to your program could accidentally trigger special behavior in your shell. We cleaned this up, then realized that setting arguments that include characters with special meanings for the shell is a useful thing to do, and that some users were relying on this behavior.  \nWe debated the correct fix and decided that this behavior should be opt-in, and that changes to the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/) (DAP) were required. We made [this change to DAP](#argscanbeinterpretedbyshell-for-runinterminalrequest), implemented it in VS Code and in js-debug, and other debug adapters should be soon to follow.  \nHere's how to use the new behavior in a node launch configuration:  \n```jsonc\n{\n\"type\": \"node\",\n\"console\": \"integratedTerminal\",\n...\n\n// If you pass args as a single string, the characters will not be escaped for the terminal,\n// so the command in backticks will be evaluated, and output will be redirected to \"outfile\".\n// The user is responsible for knowing the type of shell that this will be run in,\n// and doing any escaping necessary.\n\"args\": \"`echo hello` > outfile\",\n\n// If you pass args as an array, the characters will be escaped for the terminal,\n// so that the program receives them verbatim.\n\"args\": [\"`echo hello` > outfile\"]\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_70#_javascript-debugging",
    "id": 2894
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Picker for debug sessions  \nWhen debugging, you can now run **Debug: Select Debug Session** in the Command Palette. This shows a picker with your active debug sessions, which you can use to search and filter your individual debug sessions. The description for each picker item will show the session that spawned it, if applicable.  \nSelecting an item in the picker will focus the debug session in the Call Stack view. Debug actions (for example, Pause, Step, Restart, Stop) will be performed on the focused debug session. Selecting a session also shows the session's Debug Console.  \n<video src=\"images/1_70/debug-sessions.mp4\" autoplay loop controls muted title=\"Debug Session Picker Demo\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_picker-for-debug-sessions",
    "id": 2895
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Tasks  \n### Filter support for Run Task command  \nThe **Tasks: Run Task** (`workbench.action.tasks.runTask`) action supports filtering by task name and type for a more concise and configurable way to select and execute tasks.  \nFor example:  \n```json\n{\n\"key\": \"ctrl+h\",\n\"command\": \"workbench.action.tasks.runTask\",\n\"args\": {\n\"task\": \"VS Code - Build\",\n\"type\": \"npm\"\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_70#_filter-support-for-run-task-command",
    "id": 2896
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Improved automatic tasks flow  \nThe Trusted Workspace feature allows VS Code to simplify the flow for running automatic tasks. By default, automatic tasks will run if a folder is trusted and you'll be prompt once per folder otherwise. This behavior can be configured with the `task.allowAutomaticTasks` setting (default `auto`) to always (`on`) or never (`off`) prompt before running an automatic task.",
    "url": "https://code.visualstudio.com/updates/v1_70#_improved-automatic-tasks-flow",
    "id": 2897
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Languages  \n### Keep newlines when formatting JSON  \nYou can now keep the initial line position when formatting a line in a JSON documents. For example, an array containing values on one line will still keep these values on the same line after formatting. Extra line breaks (newlines) in JSON files are also preserved. To enable this feature, set the option **JSON > Format: Keep Lines** in the Setting editor.",
    "url": "https://code.visualstudio.com/updates/v1_70#_keep-newlines-when-formatting-json",
    "id": 2898
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Notebooks  \n### Go to Most Recently Failed Cell  \nIf your most recently run cell failed, there is now a button that will jump to that cell. You can also run **Notebook: Go to Most Recently Failed Cell** to perform the same action.  \nThis is useful when you run a group of cells and want to know which cell failed and halted the group execution.  \n<video src=\"images/1_70/go-to-most-recently-failed-cell.mp4\" autoplay loop controls muted title=\"Go To Most Recently Failed Cell Demo\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_go-to-most-recently-failed-cell",
    "id": 2899
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Notebook Markdown Preview attachment rendering  \nIt is now possible to render embedded base64 images within a Jupyter notebook.  \nImages pasted into a Jupyter notebook and referenced via `![image alt-text](attachment:image.png)` will now be rendered as intended within VS Code notebooks.  \nThe following Markdown source code:  \n![Notebook Markdown cell source code with image link](images/1_70/markdown-attachment-source.png)  \nWill be rendered as:  \n![Notebool Markdown cell preview with attachment rendered](images/1_70/markdown-attachment-rendered.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_notebook-markdown-preview-attachment-rendering",
    "id": 2900
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Share Notebook links  \nThe **Copy vscode.dev Link** command in the **Share** submenu now supports notebook links.",
    "url": "https://code.visualstudio.com/updates/v1_70#_share-notebook-links",
    "id": 2901
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## VS Code for the Web  \n### Set Display Language  \nYou can now set the display language of the browser using the **Set Display Language** button available on the language pack extension in the Extensions view.  \n![Set Display Language button on a language pack in the Extensions view](images/1_70/set-display-language.png)  \nOnce set, you can clear the display language by using the **Clear Display Language** button on the currently set language pack extension.  \n![Clear Display Language button on the current language pack in the Extensions view](images/1_70/clear-display-language.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_set-display-language",
    "id": 2902
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Contributions to extensions  \n### Python  \n#### Get started experience  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension walkthrough now smoothly transitions users to installing Python if they need to, and selecting it. Microsoft Store or an appropriate walkthrough tile is opened when Python is not installed and users can auto-run the displayed instructions. Any prompts related to interpreters are only shown when a user action requires an interpreter, and not on start-up. Also, UI prompts have been improved to be more precise about errors and suggested changes.  \n![Python in-product Get started walkthrough](images/1_70/python-get-started.png)  \n#### Interpreter information in the Status bar  \nA new setting `python.interpreter.infoVisibility` was added, which controls when information about the selected interpreter is displayed in the Status bar. By default, interpreter information will only be shown when Python-related files are opened (`onPythonRelated`). It can be set to `always` to revert to the old behavior where the selected interpreter is displayed regardless of what file is opened. A warning status is added to indicate situations when the selected interpreter is invalid:  \n![Interpreter information in the Status bar](images/1_70/interpreter-info.png)  \n#### Automatic debug configurations  \nThe Python extension now supports automatic debug configuration that analyzes the current project and provides you with a debug configuration that does not require additional modification.  \nThe extension recognizes Django, Flask, and FastApi projects, as well as simple Python files.  \nYou can learn more about [automatic debug configuration](https://code.visualstudio.com/updates/v1_45#_automatic-debug-configurations) and [some of the recent improvements](https://code.visualstudio.com/updates/v1_46#_automatic-debug-configurations-improvements).  \n<video src=\"images/1_70/automatic-debug-configuration.mp4\" autoplay loop controls muted title=\"Flask automatic debug configuration\"></video>  \n#### Experimental extension: WWBD  \nThere is a new experimental Python extension named [WWBD](https://marketplace.visualstudio.com/items?itemName=brettcannon.wwbd) that acts as a sandbox for Python environment workflow ideas. As of now, there is a **Create Environment** command for virtual environments to see if a single command can help users set up a new virtual environment (see the WWBD extension page for the full details and other extension features). You can read the [Ideas category](https://github.com/brettcannon/WWBD/discussions/categories/ideas) in the project repository for other ideas that are being considered, including conda support.",
    "url": "https://code.visualstudio.com/updates/v1_70#_python",
    "id": 2903
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Jupyter  \n#### Copy plot images to clipboard  \nIt is now possible in the [Jupyter](https://marketplace.visualstudio.com/itemdetails?itemName=ms-toolsai.jupyter) extension to copy plots in cell outputs to the clipboard. Make sure you have the correct presentation selected as only PNG output is currently supported:  \n![Select image/png when copying plot to the clipboard](images/1_70/select-image-png.png)  \nOnce you have set the correct presentation type, select the copy to clipboard button in the upper right:  \n![Copy plot button](images/1_70/copy-plot-to-clipboard.png)  \n#### Web extension  \nThe following features were ported to the web version of the Jupyter extension:  \n* Plot viewer\n* Dataframe viewer  \nIf you'd like to experiment with the functionality, launch Jupyter from your local machine with:  \n```bash\njupyter notebook --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```  \nAnd then connect to it using the command **Jupyter: Specify Jupyter server for connections** from within [vscode.dev](https://vscode.dev).  \nFor more information (and to comment), see this [discussion item](https://github.com/microsoft/vscode-jupyter/discussions/10315).  \n#### Interactive Window restore  \nInteractive Window sessions can now be restored across VS Code window reloads by turning on the setting `interactiveWindow.restore`.  \n<video src=\"images/1_70/interactive-window-restore.mp4\" autoplay loop controls muted title=\"Interactive Window restore\"></video>  \n**Limitations**: Raw kernel states are not persistent across window reloads (see more information in this [discussion item](https://github.com/microsoft/vscode-jupyter/issues/6420)). If you are using a remote Jupyter server, the Interactive Window will be connected to previous kernel sessions on reloads.  \n#### Loading environment variables from .env files  \nA number of fixes have been made to loading environment variables from `.env` files, including detecting changes to the `.env` files. Python kernels will now load environment variables from the file defined in the setting `python.envFile`.",
    "url": "https://code.visualstudio.com/updates/v1_70#_jupyter",
    "id": 2904
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights of this release include:  \n* There is a new button to only show the changes to a pull request since the viewer's last review.\n* The new **Commit & Create Pull Request** action in the Source Control view lets you do a Git commit and go to the **Create PR** view in one step.\n* The `githubPullRequests.pullRequestDescription` setting can be used to configure the source text for PR descriptions.  \nCheck out the [changelog for the 0.48.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0480) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_70#_github-pull-requests-and-issues",
    "id": 2905
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_70.md).",
    "url": "https://code.visualstudio.com/updates/v1_70#_remote-development",
    "id": 2906
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Preview features  \n### Editor sticky scroll  \nIt is now possible to display UI showing which scope the user is in during scrolling. The \"sticky scroll\" UI will show which class/interface/namespace/function/method/constructor the top of the editor is in, helping you know the location within a document. Enable sticky scroll with the `editor.experimental.stickyScroll.enabled` setting.  \n<video src=\"images/1_70/sticky-scroll.mp4\" autoplay loop controls muted title=\"\"Sticky scroll\" showing the source code scope for a TypeScript file\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_editor-sticky-scroll",
    "id": 2907
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### TypeScript 4.8 support  \nThis update includes support for the upcoming TypeScript 4.8 release. See the [TypeScript 4.8 iteration plan](https://github.com/microsoft/TypeScript/issues/49074) for more details on what the TypeScript team is currently working on.  \nTo start using the TypeScript 4.8 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_70#_typescript-4.8-support",
    "id": 2908
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Settings Profiles  \nWe have been working the last couple of months to support **Settings Profiles** in VS Code, which is one of the most popular asks from the community. This feature is available for preview in the [Insiders](https://code.visualstudio.com/insiders/) release via `workbench.experimental.settingsProfiles.enabled` setting. Try it out and let us know your feedback by creating issues in the [VS Code repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #116740](https://github.com/microsoft/vscode/issues/116740).  \nIn this milestone, we also added support for **Settings Profiles** in VS Code for the Web. You can try it out using [insiders.vscode.dev](https://insiders.vscode.dev) and the same `workbench.experimental.settingsProfiles.enabled` setting.  \n<video src=\"images/1_70/settings-profiles.mp4\" autoplay loop controls muted title=\"Settings Profiles demo, showing the theme, zoom level, and Activity bar position changing as the profile is switched\"></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_70#_settings-profiles",
    "id": 2909
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Task reconnection  \nOn window reload, watch tasks can be reconnected to by enabling `task.experimental.reconnection`, which results in a faster return to work following an extension change or VS Code version update.",
    "url": "https://code.visualstudio.com/updates/v1_70#_task-reconnection",
    "id": 2910
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Code Actions  \nWe have been working to provide a better experience with **Code Actions** in VS Code. [Code Actions](https://code.visualstudio.com/docs/editor/refactoring#_code-actions-quick-fixes-and-refactorings) include [Refactorings](https://code.visualstudio.com/docs/languages/typescript#_refactoring), Source Actions, and Quick Fixes.  \nThe new experimental Code Actions control can be opened from the [context menu](https://code.visualstudio.com/api/ux-guidelines/context-menus) by selecting **Refactor** or **Source Action**, from a lightbulb, or via a Quick Fix. Try it out via the `editor.experimental.useCustomCodeActionMenu` setting. Let us know about any feedback by creating issues in the [VS Code repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #152913](https://github.com/microsoft/vscode/issues/152913).  \nRefactoring previews for Code Actions are also accessible from the new Code Action control. Hover over enabled items to view how to preview. Custom keybindings are supported for selection of Code Actions, as well as to preview the selection.  \n<video src=\"images/1_70/code-action-all.mp4\" autoplay loop controls muted title=\"Code Action control demo, showing control access from the context menu, a lightbulb, and Quick Fix.\"></video>  \nIn this milestone, we also added support for custom keybindings for Code Actions, which includes Quick Fix (`kb(editor.action.quickFix)`). You can try it out by adding the following snippet with your desired keyboard shortcuts to `keybindings.json`.  \n```json\n[\n{\n\"key\": \"ctrl+k\",\n\"when\": \"codeActionMenuVisible\",\n\"command\": \"focusPreviousCodeAction\"\n},\n{\n\"key\": \"ctrl+j\",\n\"when\": \"codeActionMenuVisible\",\n\"command\": \"focusNextCodeAction\"\n}\n]\n```",
    "url": "https://code.visualstudio.com/updates/v1_70#_code-actions",
    "id": 2911
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Edit Sessions across VS Code for the Web and desktop  \nWork continues on **Edit Sessions**, which let you bring your uncommitted changes along when you continue working on a repository across VS Code for the Web or desktop. Some highlights include:  \n* You can now delete all stored Edit Sessions from the cloud when turning off Edit Sessions functionality.\n* Signing in with Microsoft authentication is now supported.\n* If you are having trouble locating your Edit Sessions, you can view all your Edit Sessions with the **Edit Sessions: Show Edit Sessions** command.  \nTo try out Edit Sessions, set `workbench.experimental.editSessions.enabled` in your settings and use the **Edit Sessions: Store Current Edit Session** command, signing in with GitHub or Microsoft authentication when prompted. Then use the **Edit Sessions: Resume Latest Edit Session** command in a repository on another machine or VS Code instance to restore the working contents of all modified files to your workspace. You can sign out of Edit Sessions at any time using the **Edit Sessions: Sign Out** command.  \nAs we continue to iterate on the Edit Sessions experience, try it out and share your feedback with us via a comment in [issue #141293](https://github.com/microsoft/vscode/issues/141293).",
    "url": "https://code.visualstudio.com/updates/v1_70#_edit-sessions-across-vs-code-for-the-web-and-desktop",
    "id": 2912
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Extension Authoring  \n### 'not in' operator for 'when' clauses  \nThere is an operator that already exists for when clauses, `in`, which allows for dynamic lookup of a context key's value within another context key with an array or object-type value. We've added a new operator `not in`, which negates this. See the [when clause contexts](https://code.visualstudio.com/api/references/when-clause-contexts#in-and-not-in-conditional-operators) documentation for details.",
    "url": "https://code.visualstudio.com/updates/v1_70#_'not-in'-operator-for-'when'-clauses",
    "id": 2913
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### htmlLanguageParticipants contribution point  \nA new contribution point `htmlLanguageParticipants` allows HTML-like languages to declare that they want to inherit all HTML language server features such as code completions, hovers, and outline. This is useful for programming language extensions that don't want to implement a full language server.  \nAn example is the built-in `handlebars` extension that now adds itself to the `htmlLanguageParticipants` in its `package.json`:  \n```json\n\"contributes\": {\n\"htmlLanguageParticipants\": [\n{\n\"languageId\": \"handlebars\"\n}\n]\n}\n```  \nThe [Quarkus](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-quarkus) extension has already adopted the contribution point. It enriches the HTML features with additional proposals for the embedded [Qute](https://quarkus.io/guides/qute-reference) HTML template language:  \n<video src=\"images/1_70/qute-html-participant.mp4\" autoplay loop controls muted title=\"Qute HTML participant\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_70#_htmllanguageparticipants-contribution-point",
    "id": 2914
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Drop into editor API  \nThe text editor drop API lets extensions handle dropping of files or other content into text editors. These drop events can come from within VS Code, such as dragging a file from VS Code's Explorer into a text editor, or can be generated by dropping a file from your operating system into VS Code.  \n<video src=\"images/1_70/api-drop.mp4\" autoplay loop controls muted title=\"Using the drop into editor API to insert an image in Markdown by dragging it from VS Code's Explorer\"></video>  \nTo drop a file into an editor, users can hold down `kbsytyle(Shift)` while dragging and then drop the file to a specific location in the file. At this point, your extension can choose what to do with the dropped data.  \nCheck out the [drop into editor extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/drop-on-document) for a simple example of this API in action.",
    "url": "https://code.visualstudio.com/updates/v1_70#_drop-into-editor-api",
    "id": 2915
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### View size  \nThe view size proposal lets extensions provide weights to the views they contribute:  \n```json\n\"contributes\": {\n\"views\": {\n\"github-pull-request\": [\n{\n\"id\": \"github:createPullRequest\",\n\"type\": \"webview\",\n\"name\": \"Create Pull Request\",\n\"size\": 2\n},\n{\n\"id\": \"github:compareChanges\",\n\"name\": \"Compare Changes\",\n\"size\": 1\n}\n]\n}\n}\n```  \nThe size works similarly to the CSS property `flex-grow`. In the above example, the view with `\"size\": 2` will be twice the size of the view with `\"size\": 1`. The size property is only respected if the view container is contributed by the same extension.",
    "url": "https://code.visualstudio.com/updates/v1_70#_view-size",
    "id": 2916
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Extensible HTML notebook renderer  \nOur built-in [notebook renderers](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer) now expose an experimental API that lets extensions customize rendering of HTML content. This API currently exposes a single hook, `postRender`, which is invoked after the initial rendering of the HTML content.  \nTo try using this experimental API, your extension [needs to extend the `vscode.builtin-renderer` API](https://github.com/microsoft/vscode-extension-samples/tree/main/notebook-extend-markdown-renderer-sample).  \n```json\n\"contributes\": {\n\"notebookRenderer\": [\n{\n\"id\": \"vscode-samples.my-custom-html-extension\",\n\"displayName\": \"My custom html renderer extension\",\n\"entrypoint\": {\n\"extends\": \"vscode.builtin-renderer\",\n\"path\": \"./out/main.js\"\n}\n}\n]\n}\n```  \nYour renderer can then register a rendering hook on the `vscode-builtin-renderer`:  \n```ts\nimport type { RendererContext } from 'vscode-notebook-renderer';\n\nexport async function activate(ctx: RendererContext<void>) {\nconst htmlRenderer = await ctx.getRenderer('vscode.builtin-renderer');\nif (!htmlRenderer) {\nthrow new Error(`Could not load 'vscode.builtin-renderer'`);\n}\n\nhtmlRenderer.experimental_registerHtmlRenderingHook({\n// Invoked after the HTML content for `outputItem` has been rendered to `element`\npostRender(outputItem: OutputItem, element: HTMLElement): HTMLElement | undefined {\n// You can either modify `element` or return a replacement element\n}\n});\n}\n```  \nTest out this new API and let us know what you think!",
    "url": "https://code.visualstudio.com/updates/v1_70#_extensible-html-notebook-renderer",
    "id": 2917
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Debug Adapter Protocol  \n### argsCanBeInterpretedByShell for RunInTerminalRequest  \nThe `RunInTerminalRequest` supports a new property, `argsCanBeInterpretedByShell`, which tells the client whether special shell characters in the command `args` should be left unescaped. This is to enable users to write launch configs that will start in a terminal, and include characters that should be interpreted by the shell.",
    "url": "https://code.visualstudio.com/updates/v1_70#_argscanbeinterpretedbyshell-for-runinterminalrequest",
    "id": 2918
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Engineering  \n### Progress for Electron sandbox support  \nThis milestone we made substantial progress toward enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) by default. We plan on enabling sandbox in August for Insiders and eventually make it the default in Stable VS Code.  \nFor the curious out there, configuring `\"window.experimental.useSandbox\": true` in settings will enable sandbox mode. Hopefully you should not notice anything changing, but if you find issues, please report them back to us.",
    "url": "https://code.visualstudio.com/updates/v1_70#_progress-for-electron-sandbox-support",
    "id": 2919
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Markdown language server  \nThis iteration, we extracted much of VS Code's tooling for writing Markdown into a [library](https://github.com/microsoft/vscode-markdown-languageservice) and [language server](https://github.com/microsoft/vscode/tree/main/extensions/markdown-language-features/server). This includes our tooling for path completions, document outlines, and diagnostics.  \nVS Code's built-in Markdown extension has already switched to using this new language server, although hopefully you will not notice any difference in behavior. This switch should help improve performance though, as it moves the Markdown tooling to its own process. Moving to a language server also helped us improve the performance of our experimental Markdown link diagnostics.  \nOur hope is that other tools and editors will also be able to benefit from these new packages and even contribute back to them. Together we can build better Markdown tooling for everyone! If you are interested, check out the relevant projects:  \n* [Markdown Language Service](https://github.com/microsoft/vscode-markdown-languageservice) \u2014A TypeScript library that provides tools for working with Markdown.\n* [Markdown Language Server](https://github.com/microsoft/vscode/tree/main/extensions/markdown-language-features/server) \u2014A [language server](https://microsoft.github.io/language-server-protocol/) for Markdown built using the language service.",
    "url": "https://code.visualstudio.com/updates/v1_70#_markdown-language-server",
    "id": 2920
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Debian package dependencies  \nDebian package dependencies are now generated by a script rather than hard-coded. This closes an [issue filed back in 2016](https://github.com/microsoft/vscode/issues/13089) where missing dependencies would cause the program to crash at runtime on some machines.",
    "url": "https://code.visualstudio.com/updates/v1_70#_debian-package-dependencies",
    "id": 2921
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n## Documentation and extensions  \n### Development container CLI  \nThe [dev container command-line interface](https://code.visualstudio.com/docs/devcontainers/devcontainer-cli) (CLI) topic was updated for the [newest version](https://code.visualstudio.com/blogs/2022/05/18/dev-container-cli) of the CLI. The dev container CLI lets you build and run dev containers and is an open-source reference implementation of the [Development Containers Specification](https://containers.dev)  \n![Banner from the Development Containers Specification website](images/1_70/dev-containers-spec.png)",
    "url": "https://code.visualstudio.com/updates/v1_70#_development-container-cli",
    "id": 2922
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Azure Developer CLI (azd)  \nThe [Azure Developer CLI](https://learn.microsoft.com/azure/developer/azure-developer-cli) and its complementary [VS Code extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.azure-dev) are now in public preview. The Azure Developer CLI (azd) accelerates the time it takes you to get from your local development environment to Azure by providing developer-friendly commands that map to key stages in your workflow: code, build, deploy, monitor, repeat.  \n![Azure Developer CLI extension](images/1_70/azure-dev-cli-extension.png)  \nThe Azure Developer CLI uses [extensible templates](https://github.com/topics/azd-templates) that include everything you need to get an application up and running in Azure. The templates include best practices, application code and reusable infrastructure as code assets.  More than that, they cover end-to-end scenarios that go far past \"Hello World!\".  \nWith the Azure Developer CLI, you can initialize, provision, and deploy an application, or better yet, use `'azd up'` to do so in one step! For a list of supported `azd` commands, see the [Developer CLI reference](https://learn.microsoft.com/azure/developer/azure-developer-cli/reference).",
    "url": "https://code.visualstudio.com/updates/v1_70#_azure-developer-cli-azd",
    "id": 2923
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2022 Release (1.70)  \n### Pull requests  \nContributions to `vscode`:  \n* [@0evan (Evan Spensley)](https://github.com/0evan): Distinguish testing decoration labels [PR #155433](https://github.com/microsoft/vscode/pull/155433)\n* [@amanasifkhalid (Aman Khalid)](https://github.com/amanasifkhalid): Close #134566: Added settings for terminal tab default color/icon [PR #147463](https://github.com/microsoft/vscode/pull/147463)\n* [@angelozerr (Angelo)](https://github.com/angelozerr): Contribute to html language server with a custom language. [PR #146731](https://github.com/microsoft/vscode/pull/146731)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks)\n* \ud83c\udf81 Add \"Surround with snippet\" to quick fix menu [PR #152718](https://github.com/microsoft/vscode/pull/152718)\n* \ud83d\udd28 Fix markdown diagnostics issue with files having dot in their names [PR #153206](https://github.com/microsoft/vscode/pull/153206)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Properly display the warning message [PR #154266](https://github.com/microsoft/vscode/pull/154266)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Provide trigger and documentation to monaco code action provider [PR #149937](https://github.com/microsoft/vscode/pull/149937)\n* [@eamodio (Eric Amodio)](https://github.com/eamodio): Closes #54285 adds webview/context contribution [PR #154524](https://github.com/microsoft/vscode/pull/154524)\n* [@eltociear (Ikko Ashimine)](https://github.com/eltociear): Fix typo in languageDetectionWorkerServiceImpl.ts [PR #155923](https://github.com/microsoft/vscode/pull/155923)\n* [@fadeevab (Alexander Fadeev)](https://github.com/fadeevab): Add Makefile tests for upgraded grammar: comma, comment, shebang [PR #154625](https://github.com/microsoft/vscode/pull/154625)\n* [@FantasqueX (FantasqueX)](https://github.com/FantasqueX): Replace the deprecated canceled with Cancellation Error. [PR #156094](https://github.com/microsoft/vscode/pull/156094)\n* [@ferdnyc (Frank Dana)](https://github.com/ferdnyc)\n* RPM: Make /usr/bin/code owned by package [PR #142907](https://github.com/microsoft/vscode/pull/142907)\n* Remove fakeroot wrapper, when building .rpm packages [PR #153249](https://github.com/microsoft/vscode/pull/153249)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Try to prevent update of user-type Windows installation when running as admin (#148428) [PR #155631](https://github.com/microsoft/vscode/pull/155631)\n* [@jbicker (Jan Bicker)](https://github.com/jbicker): Fixed wrong SignatureInformation.activeParameter comment [PR #155279](https://github.com/microsoft/vscode/pull/155279)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Proposal TerminalExitStatus.reason [PR #152833](https://github.com/microsoft/vscode/pull/152833)\n* [@jlelong (Jerome Lelong)](https://github.com/jlelong): Add word boundary to bracket pair delimiters starting or ending with letters [PR #151204](https://github.com/microsoft/vscode/pull/151204)\n* [@joscol (Joshua Cole)](https://github.com/joscol): Allow CommentNode to change body text and enter edit mode at the same time [PR #155767](https://github.com/microsoft/vscode/pull/155767)\n* [@jzyrobert (Robert Jin)](https://github.com/jzyrobert)\n* Add Expand all button in explorer view [PR #153614](https://github.com/microsoft/vscode/pull/153614)\n* Edit showFoldingControls to have a never setting [PR #153764](https://github.com/microsoft/vscode/pull/153764)\n* [@liby (Bryan Lee)](https://github.com/liby): Add support for angle bracket matching and colorization in TypeScript [PR #151705](https://github.com/microsoft/vscode/pull/151705)\n* [@mingwiki](https://github.com/mingwiki): Fix Socks5 Proxy Regex Checking Warning [PR #144954](https://github.com/microsoft/vscode/pull/144954)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains): Add command to copy output of the last command (#152097) [PR #153235](https://github.com/microsoft/vscode/pull/153235)\n* [@nirabhromakhal (nirabhromakhal)](https://github.com/nirabhromakhal): Fixed issue where status bar can overflow without affecting notification beak [PR #155649](https://github.com/microsoft/vscode/pull/155649)\n* [@PieterBranderhorst](https://github.com/PieterBranderhorst): Make hidden fold ranges independent of range provider, add manual fol\u2026 [PR #139779](https://github.com/microsoft/vscode/pull/139779)\n* [@pingren (Ping)](https://github.com/pingren)\n* Fix #114461 [PR #151824](https://github.com/microsoft/vscode/pull/151824)\n* Fix tab position when wrapping tabs [PR #156116](https://github.com/microsoft/vscode/pull/156116)\n* [@pwxn (Paul Landers)](https://github.com/pwxn): Add commands to scroll editor to top/bottom [PR #155861](https://github.com/microsoft/vscode/pull/155861)\n* [@qingpeng9802 (Qingpeng Li)](https://github.com/qingpeng9802): Remove es5 class compat [PR #153853](https://github.com/microsoft/vscode/pull/153853)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t)\n* Fix test error not showing when expanded [PR #153994](https://github.com/microsoft/vscode/pull/153994)\n* Update breadcrumbs when workspace folders update [PR #154616](https://github.com/microsoft/vscode/pull/154616)\n* [@SamirPS (SamirAk)](https://github.com/SamirPS): Code scanning: deprecation of CodeQL Action v1 [PR #156271](https://github.com/microsoft/vscode/pull/156271)\n* [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart)\n* Fix terminals in editor area not reloading [PR #151852](https://github.com/microsoft/vscode/pull/151852)\n* Fix Suggestion Widget Hanging [PR #152011](https://github.com/microsoft/vscode/pull/152011)\n* Add keybindings for search editor file filters [PR #153954](https://github.com/microsoft/vscode/pull/153954)\n* Detect terminal links with space, then line:col [PR #153957](https://github.com/microsoft/vscode/pull/153957)\n* Fix menu shortcuts not working after a webview is shown [PR #154648](https://github.com/microsoft/vscode/pull/154648)\n* [@SvanT (Svante Boberg)](https://github.com/SvanT): Add missing disposals [PR #155976](https://github.com/microsoft/vscode/pull/155976)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): fix: typos [PR #155310](https://github.com/microsoft/vscode/pull/155310)  \nContributions to `vscode-generator-code`:  \n* [@hawkticehurst (Hawk Ticehurst)](https://github.com/hawkticehurst)\n* Add link to UX guidelines in quickstart markdown files [PR #358](https://github.com/microsoft/vscode-generator-code/pull/358)\n* Template consistency pass [PR #360](https://github.com/microsoft/vscode-generator-code/pull/360)\n* [@MatejKastak](https://github.com/MatejKastak): chore: Unify indentation in generated package.json [PR #357](https://github.com/microsoft/vscode-generator-code/pull/357)\n* [@nhedger (Nicolas Hedger)](https://github.com/nhedger): Add pnpm as a package manager [PR #339](https://github.com/microsoft/vscode-generator-code/pull/339)  \nContributions to `vscode-js-debug`:  \n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Double check if native tostring is [object *] [PR #1339](https://github.com/microsoft/vscode-js-debug/pull/1339)  \nContributions to `vscode-json-languageservice`:  \n* [@bytemain (Artin)](https://github.com/bytemain): feat: support number const [PR #141](https://github.com/microsoft/vscode-json-languageservice/pull/141)\n* [@octogonz (Pete Gonzalez)](https://github.com/octogonz): Don't report \"Duplicate object key\" when \"//\" is used for comments [PR #144](https://github.com/microsoft/vscode-json-languageservice/pull/144)  \nContributions to `monaco-editor`:  \n* [@alexander-zw (Alexander Wu)](https://github.com/alexander-zw): [webpack readme] Add how to get languages/features [PR #3171](https://github.com/microsoft/monaco-editor/pull/3171)\n* [@MasterOdin (Matthew Peveler)](https://github.com/MasterOdin): Remove duplicate testcases for mysql [PR #3138](https://github.com/microsoft/monaco-editor/pull/3138)\n* [@tonilastre (Toni)](https://github.com/tonilastre): Add config and tokenizer for query language Cypher [PR #3102](https://github.com/microsoft/monaco-editor/pull/3102)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_70#_pull-requests",
    "id": 2924
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### FFmpeg codecs support  \nThe [FFmpeg](https://ffmpeg.org) shared library that ships as part of the VS Code previously had only support for the `FLAC` codec. With this release, the library has been updated to support the following list of codecs and containers. This will allow more audio and video files to be played from notebooks or by extensions embedding audio and video into webviews.  \n* Vorbis\n* Flac\n* H.264\n* VP8\n* WAV\n* MP3\n* Ogg  \n<video src=\"images/1_71/codec.mp4\" autoplay loop controls muted title=\"A notebook playing an mp4 video file\"></video>  \n_Theme: [fairyfloss](https://marketplace.visualstudio.com/items?itemName=nopjmp.fairyfloss) (preview on [vscode.dev](https://vscode.dev/editor/theme/nopjmp.fairyfloss))_",
    "url": "https://code.visualstudio.com/updates/v1_71#_ffmpeg-codecs-support",
    "id": 2925
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Explorer rename selection improvements  \nAfter initiating a rename action on a file, pressing the `F2` key will cycle through the file name, entire selection, and file extension to allow for more flexible keyboard-only interaction.  \n<video src=\"images/1_71/renameToggle.mp4\" autoplay loop controls muted title=\"A file in the Explorer being renamed demonstrating that subsequent presses of the F2 key toggle selecting various pieces of the file name\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_71#_explorer-rename-selection-improvements",
    "id": 2926
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Rounded buttons  \nWe've update all of our buttons to have a slight rounded corner to better match our design aesthetic.  \n![An example of a button with rounded corners](images/1_71/rounded-buttons.png)  \n_Theme: [Material Theme Palenight High Contrast](https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme)_",
    "url": "https://code.visualstudio.com/updates/v1_71#_rounded-buttons",
    "id": 2927
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Window Controls Overlay on Windows  \nIn release 1.68, VS Code adopted the [Window Controls Overlay](https://wicg.github.io/window-controls-overlay) feature support from Electron behind an experimental flag and was off by default. We have resolved the remaining issues around this feature affecting VS Code, allowing us to enable it by default for all users on Windows.  \nThe Windows Controls Overlay feature lets VS Code users on Windows 11 select [Snap Layouts](https://learn.microsoft.com/windows/apps/desktop/modernize/apply-snap-layout-menu) to place VS Code on their desktop.  \n![Windows Snap Layouts control in the right of the VS Code title bar](images/1_71/windows-snap-layout.png)",
    "url": "https://code.visualstudio.com/updates/v1_71#_window-controls-overlay-on-windows",
    "id": 2928
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Tree view Expand Mode  \nThe setting **Workbench > Tree: Expand Mode** (`workbench.tree.expandMode`), which controls whether tree nodes expand on single-click or double-click, will now be respected by tree views that are contributed by extensions.",
    "url": "https://code.visualstudio.com/updates/v1_71#_tree-view-expand-mode",
    "id": 2929
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Editor  \n### Sticky Scroll  \nSticky scroll shows the current scope at the top of the view port. The feature is no longer experimental and can be enabled through the settings with `editor.stickyScroll.enabled`. Further improvements are:  \n* It is possible to set the maximum number of lines to display with the **Editor > Sticky Scroll: Max Line Count** (`editor.stickyScroll.maxLineCount`) setting. The default maximum is 5 lines.\n* You can use `Ctrl/Cmd + Click` in the sticky scroll, to navigate to a definition.  \n<video src=\"images/1_71/sticky-scroll-ctrlclick.mp4\" autoplay loop controls muted title=\"Sticky scroll Ctrl/Cmd click to go to a symbol definition\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_71#_sticky-scroll",
    "id": 2930
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### New Code Action control  \nWe've completely overhauled the Code Action control. Instead of a simple menu of [Code Actions](https://code.visualstudio.com/docs/editor/refactoring#_code-actions-quick-fixes-and-refactorings), there is now a custom control that makes it easier to find the Code Action you want:  \n![The new Code Action control showing Quick Fixes and refactorings](images/1_71/code-action-widget.png)  \nThe new control also lets VS Code surface additional information. For example, you can now hover over disabled Code Actions to learn why they are disabled:  \n![Hovering over a disabled Code Action to understand why it is disabled](images/1_71/code-action-disabled-hover.png)  \nYou can also customize the keyboard shortcuts used to navigate through the Code Action list by modifying the [keybindings](https://code.visualstudio.com/docs/getstarted/keybindings) for the following commands:  \n* `selectNextCodeAction`\n* `selectPrevCodeAction`\n* `acceptSelectedCodeAction`  \nGoing forward, the new code action UI provides a great foundation for further UX improvements. Be sure to let us know if you have any suggestions!",
    "url": "https://code.visualstudio.com/updates/v1_71#_new-code-action-control",
    "id": 2931
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Configure suggest matching  \nThere is a new setting to configure IntelliSense filtering. By default, the first character must match a word start, for example `c` must match `console` or `WebContext` but won't match `description`. The `editor.suggest.matchOnWordStartOnly` setting changes this behavior. When disabled, filtering takes any match into account - this leads to more results but filtering still happens by match quality.  \nIn the short video below, you can see that when `matchOnWordStartOnly` is disabled, suggestions for 'dir' include more items, such as 'mkdir' and 'makedirs'.  \n<video src=\"images/1_71/suggestMatchWordStart.mp4\" autoplay loop controls muted title=\"IntelliSense demo with and without match on word start\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_71#_configure-suggest-matching",
    "id": 2932
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Source Control  \n### Commit action button improvements  \nUsers can globally control the secondary action (for example, `pull`, `sync`) that is being executed following a successful commit operation using the `git.postCommitCommand` setting. This milestone we have added a new setting `git.rememberPostCommitCommand` that can be enabled to remember the last executed secondary action per repository.",
    "url": "https://code.visualstudio.com/updates/v1_71#_commit-action-button-improvements",
    "id": 2933
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Terminal  \n### Shell integration improvements  \nThe following improvements to shell integration were made this release:  \n* Fish shell integration is available as an experimental manual install only. See the [Shell Integration documentation](https://code.visualstudio.com/docs/terminal/shell-integration#_manual-installation) for how to install it.\n* Git bash for Windows shell integration is available as an experimental manual install only. See the [section on manual installation](https://code.visualstudio.com/docs/terminal/shell-integration#_manual-installation) for details.\n* Support for common alternative current working directory sequences: `OSC 6 ; scheme://<cwd> ST`, `OSC 1337 ; CurrentDir=<cwd> ST`, `OSC 9 ; 9 ; <cwd> ST`\n* Better handling of [various shell integration edge cases](https://github.com/microsoft/vscode/issues?q=is%3Aissue+assignee%3ATyriar+milestone%3A%22August+2022%22+is%3Aclosed+label%3Aterminal-shell-integration+label%3Abug).",
    "url": "https://code.visualstudio.com/updates/v1_71#_shell-integration-improvements",
    "id": 2934
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Smooth scrolling  \nThe terminal now supports smooth scrolling, which will animate scrolling for a short period of time to help you see your location after scrolling, similar to the editor and lists. To enable smooth scrolling set:  \n```json\n\"terminal.integrated.smoothScrolling\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_71#_smooth-scrolling",
    "id": 2935
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Underline styles and colors  \nUnderline styles and colors are now supported using the escape sequences [originally pioneered by the kitty terminal](https://sw.kovidgoyal.net/kitty/underlines/). For supporting programs, these new underlines should light up automatically, provided they send these sequences to the VS Code terminal.  \n![The terminal can now display straight, double, curly, dotted, and dashed underlines in any color](images/1_71/terminal-underlines.png)  \nIncluded in this change is improved underline rendering when GPU acceleration is enabled, which avoids glyphs with long descenders and the underline overlapping:  \n![An example showing that characters with descenders such as 'g' and 'p' no longer overlap with underlines](images/1_71/terminal-descenders.png)  \nUnderline styles and colors are currently not supported on Windows due to [an outstanding issue in ConPTY](https://github.com/microsoft/terminal/issues/7228).",
    "url": "https://code.visualstudio.com/updates/v1_71#_underline-styles-and-colors",
    "id": 2936
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Rendering improvements  \nSeveral improvements were made to terminal rendering:  \n* A [longstanding bug](https://github.com/microsoft/vscode/issues/85154) that sometimes caused blurriness when the workbench was zoomed in or out has been fixed!  \n![Text is now more crisp as canvas is no longer stretched, which caused anti-aliasing to look poorly](images/1_71/terminal-blurry.png)  \n* When [minimum contrast ratio](https://code.visualstudio.com/docs/terminal/appearance#_minimum-contrast-ratio) is enabled and the text luminance needs to be flipped to ensure the ratio is met, the text's hue will now be retained.  \n![Bold yellow text on red in some themes will now display as dark yellow instead dark grey](images/1_71/terminal-mcr-flip.png)  \n* The new theme key `terminal.inactiveSelectionBackground` is available to show a different selection background color whether the terminal is focused or not to better align with the editor.  \n![Most themes now dim the selection background color when not focused](images/1_71/terminal-inactive.png)  \n* Custom Powerline glyph rendering has improved edge clipping. This is most noticeable on the semi-circle characters, which should now be a smooth curve.  \n![Powerline glyphs are no longer cut off on the edges](images/1_71/terminal-powerline-clip.png)",
    "url": "https://code.visualstudio.com/updates/v1_71#_rendering-improvements",
    "id": 2937
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Tasks  \n### Reconnection on window reload  \nWatch tasks now get reconnected to on window reload, enabling uninterrupted work when VS Code is updated or an extension's state changes. Task reconnection is enabled by default, but can be disabled with the `task.reconnection` setting.",
    "url": "https://code.visualstudio.com/updates/v1_71#_reconnection-on-window-reload",
    "id": 2938
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Debugging  \n### suppressMultipleSessionWarning option in launch.json  \nWhen you try to start debugging with a launch configuration, but there is already an active debug session for that configuration, VS Code will show a warning dialog before starting the second instance. This is easy to do by accident and is usually not what you meant to do. However, if running multiple instances of the same configuration is part of your workflow, you can now disable this warning by adding `\"suppressMultipleSessionWarning\": true` to your `launch.json` configuration file.",
    "url": "https://code.visualstudio.com/updates/v1_71#_suppressmultiplesessionwarning-option-in-launch.json",
    "id": 2939
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Comments  \n### Filtering  \nThe Comments view has a new filter where you can filter by comment text and by resolved/unresolved state.  \n<video src=\"images/1_71/comments-filtering.mp4\" autoplay loop controls muted title=\"Comments filtering\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_71#_filtering",
    "id": 2940
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Editor decoration  \nThe Comments editor gutter decoration now uses codicons and has new styling.  \n<video src=\"images/1_71/comments-editor-decoration.mp4\" autoplay loop controls muted title=\"Comments editor gutter decoration\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_71#_editor-decoration",
    "id": 2941
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Languages  \n### TypeScript 4.8  \nVS Code now ships with TypeScript 4.8.2. This major update brings language improvements for type checking and inference. On the tooling side, you also should see some nice performance improvements and bug fixes!  \nCheck out the [TypeScript 4.8 announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-4-8/) for more about this update.",
    "url": "https://code.visualstudio.com/updates/v1_71#_typescript-4.8",
    "id": 2942
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### TypeScript livestreams  \nAnd if you missed the VS Code [livestreams](https://code.visualstudio.com/livestream) on TypeScript, have a look at two recent sessions with [Matt Pocock](https://twitter.com/mattpocockuk).  \n* [TypeScript Crash Course](https://www.youtube.com/watch?v=p6dO9u0M7MQ)\n* [TypeScript Tips and Tricks](https://www.youtube.com/watch?v=hBk4nV7q6-w)  \n![VS Code livestreams page](images/1_71/livestream.png)",
    "url": "https://code.visualstudio.com/updates/v1_71#_typescript-livestreams",
    "id": 2943
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Contributions to extensions  \n### Jupyter  \n#### Notebook image pasting  \nThe [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension now lets users paste screenshots or image files into Markdown cells inside their notebooks. Currently only supported for the `image/png` mime type. To use the feature, add/enable the following settings:  \n```json\n\"ipynb.experimental.pasteImages.enabled\": true\n\"editor.experimental.pasteActions.enabled\": true\n```  \n<video src=\"images/1_71/screenshot_paste.mp4\" autoplay loop controls muted title=\"Pasting an image file into a Markdown cell in a Jupyter notebook.\"></video>  \n#### Improved IntelliSense for Jupyter Notebooks with Pylance  \nIntelliSense support for Jupyter Notebooks with Python kernels is now much better when using [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance), thanks to the [updates in the Language Server Protocol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#whatIsNew) to include notebook support.  \nNot only you will get improved auto completion options when writing Python code in notebook files, but you will also be able to use refactoring features such as Extract Variable, Extract Method, and Rename Symbol, as well as auto imports and semantic highlighting.  \n<video src=\"images/1_71/pylance-notebooks-lsp.mp4\" autoplay loop controls muted title=\"Writing Python code showing auto import, auto complete suggestions, extract method, and a rename symbol functionality.\"></video>  \n_Theme: [Horizon Extended](https://marketplace.visualstudio.com/items?itemName=LanceWilhelm.horizon-extended) (preview on [vscode.dev](https://vscode.dev/editor/theme/LanceWilhelm.horizon-extended))_",
    "url": "https://code.visualstudio.com/updates/v1_71#_jupyter",
    "id": 2944
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Live Preview  \nThe [Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) extension now officially  supports [multi-root workspaces](https://code.visualstudio.com/docs/editor/multi-root-workspaces)! Although users could have technically used Live Preview in multi-root workspaces before, there is now a cleaner implementation supporting it.  \nThe Live Preview extension now starts a new server for each root in your multi-root workspace; therefore, links that are relative to the root of your project (ones that start with a `/`) will work properly when previewing multi-root workspaces.  \n<video src=\"images/1_71/live-preview-multi-root-demo.mp4\" autoplay loop controls muted title=\"Live Preview multi-root demo\"></video>  \n_Theme: [GitHub Dark Dimmed](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Dark%20Dimmed))_  \nYou can view the servers that were opened by the extension by hovering over Live Preview's Status bar indicator (located on the bottom-right corner). In the image below, a server was started for each workspace (on ports 3000 and 3002), and there was another server spawned for a file that was not from any open workspace (on port 3004).  \n![Live Preview multi-root ports displayed from the Status bar indicator](images/1_71/live-preview-server-status.png)  \nInstall the [Live Preview](http://aka.ms/live-preview) extension and try it out today! \ud83d\udce1\u2728\ud83d\udd0e",
    "url": "https://code.visualstudio.com/updates/v1_71#_live-preview",
    "id": 2945
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights of this release include:  \n* Notifications for pull requests.\n* Review comments can be resolved/unresolved directly from the pull request overview.  \nCheck out the [changelog for the 0.50.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0500) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_71#_github-pull-requests-and-issues",
    "id": 2946
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Remote Development  \nWork continues on the [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), which allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_71.md).",
    "url": "https://code.visualstudio.com/updates/v1_71#_remote-development",
    "id": 2947
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Preview features  \n### Markdown link update on file move and rename  \nTired of accidentally breaking links or images in your Markdown when you move or rename files? Try the new `markdown.experimental.updateLinksOnFileMove.enabled` setting!  \nWith this new experimental setting enabled, VS Code will automatically update links and images in Markdown when files are moved or renamed in the VS Code Explorer:  \n<video src=\"images/1_71/md-link-update.mp4\" autoplay loop controls muted title=\"Markdown file links are updated on move and rename\"></video>  \nThis new behavior can be enabled using the `markdown.experimental.updateLinksOnFileMove.enabled` setting. You can control the types of files affected using `markdown.experimental.updateLinksOnFileMove.externalFileGlobs`.  \nGive this new feature a try and be sure to share feedback.",
    "url": "https://code.visualstudio.com/updates/v1_71#_markdown-link-update-on-file-move-and-rename",
    "id": 2948
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Settings Profiles  \nWe have been working the last couple of months to support **Settings Profiles** in VS Code, which is one of the most popular asks from the community. This feature is available for preview via the `workbench.experimental.settingsProfiles.enabled` setting. Try it out and give us your feedback by creating issues in the [vscode repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #116740](https://github.com/microsoft/vscode/issues/116740).  \n#### Command-line interface  \nIn this milestone, we added command-line interface (CLI) support for Settings Profiles. You can now pass the name of the profile using the `--profile` argument and open a folder or a workspace using that profile. The command line below opens the `web-sample` folder with the \"Web Development\" profile:  \n`code ~/projects/web-sample --profile \"Web Development\"`  \nIf the profile specified does not exist, a new empty profile with the given name is created.  \n#### Temporary Settings Profile  \nThere is also now support for a **Temporary Settings Profile** that can be created and associated to a folder or workspace temporarily. A temporary profile is automatically deleted once it is not associated with any folder or workspace.  \nIn the short video below, when the user opens a folder and selects the **Settings Profiles: Create Temporary Settings Profile** command, a new 'Temp 1' profile is created and is visible in the profiles list. When the folder is closed, the 'Temp 1' profile is deleted.  \n<video src=\"images/1_71/settings-profiles-temp.mp4\" autoplay loop controls muted title=\"Temporary Settings Profile demo\"></video>  \nYou can also create a temporary Settings Profile and associate it to a folder or a workspace from the CLI using the `--profile-temp` switch. The command line below opens the **try-out-sample** folder with a temporary profile that gets deleted after closing the folder:  \n`code ~/projects/try-out-sample --profile-temp`",
    "url": "https://code.visualstudio.com/updates/v1_71#_settings-profiles",
    "id": 2949
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Bring your changes with you when moving across development environments  \nWhen you are browsing a GitHub or Azure Repos repository such as [https://vscode.dev/github/microsoft/vscode](https://vscode.dev/github/microsoft/vscode), you can use the [**Continue Working On**](https://code.visualstudio.com/docs/sourcecontrol/github#_continue-working-on) command to select a different development environment to use with your repository.  \nPreviously, if you had pending edits in your virtual workspace, you would need to push them to GitHub or Azure Repos to view them elsewhere. This milestone, we have added **Edit Sessions** integration to the **Continue Working On** feature, so that your uncommitted changes automatically travel with you to your target development environment, such as a GitHub codespace.  \nIn the video below, the user's changes to a TypeScript file that were made when using VS Code for the Web are applied when they create and switch to working in a new GitHub codespace.  \n<video src=\"images/1_71/continue-on-codespaces.mp4\" autoplay loop controls muted title=\"Continue On in GitHub Codespaces\"></video>  \nTo try this out, set `\"workbench.experimental.editSessions.enabled\": true` in your settings, enable [Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync), and run the **Edit Sessions: Sign In** command in VS Code for the Web or desktop.  \nWhen you are using VS Code for the Web, your uncommitted changes will then travel with you when you use **Continue Working On** in:  \n* A new cloud hosted environment in GitHub Codespaces\n* A new local clone of your GitHub repository\n* A local VS Code instance with the same virtual GitHub repository  \nWhen you are using desktop VS Code with the [Remote Repositories](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories) extension, your uncommitted changes will travel with you when you use **Continue Working On** in:  \n* A cloud hosted environment in GitHub Codespaces (available via the [GitHub Codespaces](https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces) extension)\n* A new local clone of your GitHub repository\n* A new clone of your GitHub repository in a container volume (available via the [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension)\n* [https://vscode.dev](https://vscode.dev)\n* An existing local folder containing a clone of your repository",
    "url": "https://code.visualstudio.com/updates/v1_71#_bring-your-changes-with-you-when-moving-across-development-environments",
    "id": 2950
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Extension Authoring  \n### TerminalExitStatus.reason  \nExtension authors now have better insight into why a terminal exited via the new `TerminalExitReason` API.  \n```ts\nexport enum TerminalExitReason {\nUnknown = 0,\nShutdown = 1,\nProcess = 2,\nUser = 3,\nExtension = 4,\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_71#_terminalexitstatus.reason",
    "id": 2951
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Enum settings enumItemLabels documentation  \nEnum settings in the Settings editor support the `enumItemLabels` key, which allows the extension author to specify the values to be shown in the dropdowns corresponding to the `enum` values.  \n![Example of enumItemLabels with a mock setting. The select box displays the label value, and the dropdown options display both the label value and the enum value, though the enum values are rendered less prominently.](images/1_71/enum-item-labels.png)  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_71#_enum-settings-enumitemlabels-documentation",
    "id": 2952
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### New activeWebviewPanelId context key  \nThe new `activeWebviewPanelId` [context key](https://code.visualstudio.com/api/references/when-clause-contexts) tracks the `viewType` of the currently focused webview panel. You can use it in when clauses to enable commands or menu items when your webview is focused.  \n```json\n\"when\": \"activeWebviewPanelId == 'markdown.preview'\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_71#_new-activewebviewpanelid-context-key",
    "id": 2953
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### TypeScript server plugins on web  \n[TypeScript language service plugins](https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin) are now supported on web. This applies to plugins that are contributed by extensions using the `typescriptServerPlugins` contribution point.  \nTo get started, you must first tell TypeScript that your plugin is web enabled by adding a `browser` entrypoint in your `package.json` in addition to `main`:  \n```json\n\"main\": \"out/main.js\",\n\"browser\": \"out/main.browser.js\"\n```  \nThe `browser` entrypoint must be a JavaScript module that exports a default function that activates the plugin:  \n```ts\nexport default function init(modules: { typescript: typeof import(\"typescript/lib/tsserverlibrary\") }) {\n...\n};\n```  \nKeep in mind that on web, your plugin will be running in a normal web worker environment, so you can **not** use Node.js APIs such as `fs`.",
    "url": "https://code.visualstudio.com/updates/v1_71#_typescript-server-plugins-on-web",
    "id": 2954
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Disabled tree items  \nTree items with commands that have their enablement clause resolving to false will be displayed as disabled.",
    "url": "https://code.visualstudio.com/updates/v1_71#_disabled-tree-items",
    "id": 2955
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Markdown Language Server  \nThe Markdown support in VS Code has been reimplemented to be a full-featured [Language Server](https://microsoft.github.io/language-server-protocol). You can read about [Matt Bierner's](https://hachyderm.io/@mattbierner) journey in his [Markdown Language Server blog post](https://code.visualstudio.com/blogs/2022/08/16/markdown-language-server), where he describes adding programming language features such as **Find All References**, **Rename Symbol**, and broken link detection for Markdown files.",
    "url": "https://code.visualstudio.com/updates/v1_71#_markdown-language-server",
    "id": 2956
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Upcoming change to context of 'view/title' menu  \nIn August, we tried passing the focus and selection of a view's tree for commands contributed to the `view/title` menu of a tree view. In this release, we reverted the change as it caused problems for some extensions. We want to bring the change back and release it in September. If this update will break your extension or if you think this behavior is undesirable, please leave a comment in [issue #42903](https://github.com/microsoft/vscode/issues/42903).",
    "url": "https://code.visualstudio.com/updates/v1_71#_upcoming-change-to-context-of-'view/title'-menu",
    "id": 2957
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Debug Adapter Protocol  \n### Proposal for a 'startDebugging' request  \nToday VS Code supports multiple concurrent debug sessions but the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol) (DAP) covers only a single session. That means that creating new debug sessions programmatically is not part of DAP and can only be done outside of DAP or the debug adapter, typically in the debug extension that contains the debug adapter. A consequence of this is that multi-session functionality, such as debugging child-processes, is not easily available for non-VS Code DAP clients that only reuse the debug adapter and not the VS Code specific debug extension.  \nTo improve this situation, we are planning to add a new reverse request to DAP to create a new debug session from inside the debug adapter. After some rounds of discussions, we've prepared a [proposal](https://github.com/microsoft/debug-adapter-protocol/issues/79#issuecomment-1230242253) for a `startDebugging` reverse request. If you are a debug extension or DAP client author and are interested in this DAP protocol addition, we'd appreciate your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_71#_proposal-for-a-'startdebugging'-request",
    "id": 2958
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n## Engineering  \n### Electron 19 update  \nIn this milestone, we finished the exploration to bundle Electron 19 into VS Code desktop and we want to thank everyone involved with self-hosting on Insiders. This update comes with Chromium `102.0.5005.167` and Node.js `16.14.2`.",
    "url": "https://code.visualstudio.com/updates/v1_71#_electron-19-update",
    "id": 2959
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Windows 7 support has ended  \nMicrosoft [ended support for Windows 7](https://learn.microsoft.com/lifecycle/products/windows-7) in January 2020. However, Electron continued to support Windows 7 by patching the `libuv` library. With the Electron 19 update, the `libuv` patch [no longer works](https://github.com/electron/electron/issues/35219) and we recommend users update to a newer Windows version in order to use the VS Code desktop version. VS Code will no longer provide product updates and security fixes on Windows 7. You can learn more about upgrading Windows at [support.microsoft.com](https://support.microsoft.com/windows/windows-7-support-ended-on-january-14-2020-b75d4580-2cc7-895a-2c9c-1466d9a53962).",
    "url": "https://code.visualstudio.com/updates/v1_71#_windows-7-support-has-ended",
    "id": 2960
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [RedCMD (@RedCMD)](https://github.com/RedCMD)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_71#_issue-tracking",
    "id": 2961
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2022 Release (1.71)  \n### Pull requests  \nContributions to `vscode`:  \n* [@babakks (Babak K. Shandiz)](https://github.com/babakks)\n* \ud83c\udf81 Add support for `fish` shell history [PR #156058](https://github.com/microsoft/vscode/pull/156058)\n* \ud83c\udf81 Support other terminals CWD escape sequence [PR #157783](https://github.com/microsoft/vscode/pull/157783)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Added cursor pointer in monaco select box for consistency [PR #152976](https://github.com/microsoft/vscode/pull/152976)\n* [@ChaseKnowlden](https://github.com/ChaseKnowlden)\n* Add offline_access to list of default scopes [PR #157453](https://github.com/microsoft/vscode/pull/157453)\n* Fix a typo in secret state [PR #157559](https://github.com/microsoft/vscode/pull/157559)\n* [@CsCherrYY (Shi Chen)](https://github.com/CsCherrYY): Support switching to/from custom views in reference-view API [PR #152008](https://github.com/microsoft/vscode/pull/152008)\n* [@DingWeizhe (DingWeizhe)](https://github.com/DingWeizhe): fix sticky scroll start line number [PR #157466](https://github.com/microsoft/vscode/pull/157466)\n* [@dirondin (Mikhail Po)](https://github.com/dirondin): Fix #147912 (multipleSessionWarning debug option) [PR #147914](https://github.com/microsoft/vscode/pull/147914)\n* [@emeric-martineau (Emeric MARTINEAU)](https://github.com/emeric-martineau): Fix Simplify bash PROMPT_COMMAND handling commit [PR #157631](https://github.com/microsoft/vscode/pull/157631)\n* [@etriebe (Eric Triebe)](https://github.com/etriebe): Add an option to expose the allowMidWordMatch as a setting [PR #152292](https://github.com/microsoft/vscode/pull/152292)\n* [@Evpok (Evpok)](https://github.com/Evpok): Enable Wayland build for snaps [PR #156551](https://github.com/microsoft/vscode/pull/156551)\n* [@FantasqueX (FantasqueX)](https://github.com/FantasqueX)\n* Replace the deprecated canceled with Cancellation Error in ipc.ts [PR #156965](https://github.com/microsoft/vscode/pull/156965)\n* Fix typos in files.ts [PR #157280](https://github.com/microsoft/vscode/pull/157280)\n* [@ferdnyc (Frank Dana)](https://github.com/ferdnyc): RPM packaging: Use standard macros [PR #153247](https://github.com/microsoft/vscode/pull/153247)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Correct initial window size on Windows secondary display with different scaling factor (#146499) [PR #155589](https://github.com/microsoft/vscode/pull/155589)\n* Show Issue Reporter window in taskbar (#130497) [PR #156141](https://github.com/microsoft/vscode/pull/156141)\n* Don't link to deprecated `terminal.integrated.automationShell.*` settings (#156481) [PR #156486](https://github.com/microsoft/vscode/pull/156486)\n* Provide valid markdown-specific default for `editor.quickSuggestions` setting (#156686) [PR #156689](https://github.com/microsoft/vscode/pull/156689)\n* Add close button to SCM editor validation message (#143036) [PR #158131](https://github.com/microsoft/vscode/pull/158131)\n* [@juihanamshet1 (Jui Hanamshet)](https://github.com/juihanamshet1): If the brackets are removed, reduce the range. If the brackets are added, increase the range. [PR #156313](https://github.com/microsoft/vscode/pull/156313)\n* [@kidonng (Kid)](https://github.com/kidonng): Fix fish integration script when commandline is empty [PR #157778](https://github.com/microsoft/vscode/pull/157778)\n* [@MaddyDev (Maddy)](https://github.com/MaddyDev): check lowercase value on validExtensions [PR #158319](https://github.com/microsoft/vscode/pull/158319)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains): Fix selection when reach boundaries of the terminal [PR #156071](https://github.com/microsoft/vscode/pull/156071)\n* [@pingren (Ping)](https://github.com/pingren)\n* Fix isStandalone when PWA entering fullscreen [PR #156424](https://github.com/microsoft/vscode/pull/156424)\n* Add env for terminalProcess getCwd Unicode path on macOS [PR #157377](https://github.com/microsoft/vscode/pull/157377)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Inherit more settings during extension development [PR #151872](https://github.com/microsoft/vscode/pull/151872)\n* [@Semesse (Semesse)](https://github.com/Semesse)\n* Skip collapsed state check for nested children when dropping files in explorer [PR #156759](https://github.com/microsoft/vscode/pull/156759)\n* Fix exthost language features test [PR #158782](https://github.com/microsoft/vscode/pull/158782)\n* [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart): Fix search editor title not updating [PR #156011](https://github.com/microsoft/vscode/pull/156011)\n* [@SvanT (Svante Boberg)](https://github.com/SvanT): Cleanup disposed terminals [PR #156326](https://github.com/microsoft/vscode/pull/156326)\n* [@zgracem (Amy Grace)](https://github.com/zgracem)\n* add shell integration script for fish [PR #157291](https://github.com/microsoft/vscode/pull/157291)\n* improve fish shell integration in vi mode [PR #158127](https://github.com/microsoft/vscode/pull/158127)\n* [@zhuowei](https://github.com/zhuowei): simpleFileDialog: ask user if we should create directory if it doesn't exist when saving [PR #152536](https://github.com/microsoft/vscode/pull/152536)  \nContributions to `vscode-extension-samples`:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): lsp-embedded-request-forwarding: don't encode uri used in map (fix #682) [PR #683](https://github.com/microsoft/vscode-extension-samples/pull/683)  \nContributions to `devcontainers/cli`:  \n* [@leopoldsedev (Christian Leopoldseder)](https://github.com/leopoldsedev): Implement optional default values in localEnv/containerEnv expansions [PR #51](https://github.com/devcontainers/cli/pull/51)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_71#_pull-requests",
    "id": 2962
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Merge editor  \n#### Opt in to use the 3-way merge editor  \nAfter reviewing all the merge editor feedback we received and thinking about the experience as a whole, we decided to not show the 3-way merge editor by default (the `git.mergeEditor` setting is now `false`) when conflicts are detected. The reasoning for this decision can be found in [issue #160806](https://github.com/microsoft/vscode/issues/160806).  \nFor files with conflicts, users can now select **Resolve in Merge Editor** to open the 3-way merge editor:  \n![A screenshot of a file with conflicts, showing the \"Resolve in Merge Editor\" button](images/1_72/merge-editor-open-in-merge-editor.png)  \n#### CodeLens UI  \nUser feedback indicated that checkboxes had some UX problems. The checkboxes weren't very discoverable and they caused confusion by not properly representing all possible states. This iteration, we switched to CodeLens UI that uses textual labels (**Accept Incoming**, **Accept Current**, **Accept Both**):  \n![Merge editor before with checkboxes and after with CodeLens](images/1_72/merge-editor-checkboxes-vs-codelens.drawio.png)  \nWe will keep iterating on this design and closely monitor all the feedback we get.  \n#### Result file recomputed from scratch  \nIn the last iteration, we tried to design the merge editor as an alternative view of a file with conflicts. Instead of showing conflict markers, separate editor panes showed details of the conflict. This design had the advantage that opening the merge editor would not modify the file on disk and user changes made before opening the merge editor could be kept. Unfortunately, this was not only confusing, but also didn't work in all cases, as our merge algorithm and the Git merge algorithm didn't align perfectly.  \nWith this release, if a file with conflict markers is opened in the merge editor, as a first step, we use our merge algorithm to recompute the result file, without inserting any conflict markers. One-sided conflicts are resolved automatically and proper conflicts are reset to the common ancestor of both versions and marked as **unhandled**.  \n#### Base view  \nThe merge editor now has a separate base view that can be used to compare any side with the common ancestor.",
    "url": "https://code.visualstudio.com/updates/v1_72#_merge-editor",
    "id": 2963
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Tree view Find control improvements  \nYou can now move the tree view Find control vertically, in order to access the UI elements behind it. Press `kb(list.find)` inside tree views to display the Find control.  \n![Tree view Find control supports vertical movement](images/1_72/tree-move.gif)  \nAdditionally, the tree view Find control will remember the last search term when reopened.  \n![Tree view Find control remembers last search text](images/1_72/tree-remember.gif)",
    "url": "https://code.visualstudio.com/updates/v1_72#_tree-view-find-control-improvements",
    "id": 2964
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Built-in preview for some audio and video files  \nVS Code now supports previewing some audio and video file formats:  \n![Previewing an MP4 video in VS Code](images/1_72/video-preview.png)  \nThe following audio formats are currently supported:  \n* WAV\n* MP3\n* Ogg\n* FLAC  \nAnd the following video formats can be previewed:  \n* H.264\n* VP8  \nFor video files, keep in mind that both the video and audio track's media formats must be supported. Many `.mp4` files for example, use H.264 for video and AAC audio. VS Code will be able to play the video part of the `.mp4`, but since AAC audio is not supported, there won't be any sound. You will need to use MP3 for the audio track.",
    "url": "https://code.visualstudio.com/updates/v1_72#_built-in-preview-for-some-audio-and-video-files",
    "id": 2965
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Disable incremental naming  \nYou can now disable incremental file naming in the File Explorer with the new `disabled` value for the `explorer.incrementalNaming` setting. This value disables logic for changing the file name on paste within the File Explorer. If the file name is already present, you will be prompted to overwrite the existing file, similar to most native explorers.",
    "url": "https://code.visualstudio.com/updates/v1_72#_disable-incremental-naming",
    "id": 2966
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Warning when editing inside VS Code application folder  \nWhen editing files inside the VS Code application folder, a warning is now shown in the editor. Accidentally modifying files in the application folder is a common mistake and not usually what someone intended.  \n![VS Code warns when editing its application folder files](images/1_72/warning.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_warning-when-editing-inside-vs-code-application-folder",
    "id": 2967
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Editor  \n### Improved autoscroll behavior  \nWhen selecting and dragging, the editor used to scroll in a way that was dependent on the display's frames per second (FPS), sometime making the editor scroll quickly as soon as the mouse reached the editor edges. Now, the editor autoscrolls at a more manageable speed of about one viewport per second when the mouse is close to the edges, and faster when the mouse is further from the editor, independent of the FPS.  \nIn the video below, the scroll rate increases as the mouse cursor moves down away from the editor.  \n<video src=\"images/1_72/selection-auto-scroll.mp4\" placeholder=\"images/1_72/selection-auto-scroll.png\" autoplay loop controls muted title=\"Selection autoscroll\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_72#_improved-autoscroll-behavior",
    "id": 2968
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Improved hover  \nThe editor hover used to be very aggressive in hiding itself, especially when the mouse was going over an empty area of the editor. This made it difficult to reach some of the actions shown in the hover. Now, the hover will stay visible as long as the mouse is moving towards it. The setting `\"editor.hover.sticky\": false` reverts to the previous behavior.  \nIn the \"After\" video on the right, it is much easier to select a Quick Fix from the hover:  \n<table><tr><td>\n<video src=\"images/1_72/editor-hover-before.mp4\" placeholder=\"images/1_72/editor-hover.png\" autoplay loop controls muted title=\"Editor hover before\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n</td><td>  \n<video src=\"images/1_72/editor-hover-after.mp4\" placeholder=\"images/1_72/editor-hover.png\" autoplay loop controls muted title=\"Editor hover after\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n</td></tr></table>",
    "url": "https://code.visualstudio.com/updates/v1_72#_improved-hover",
    "id": 2969
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### New Code Action groups  \nThere are two new groups available in the [Code Action control](https://code.visualstudio.com/updates/v1_71#_new-code-action-control), `Inline` and `Move`.  \nThese groups correspond to that `refactor.inline` and `refactor.move` Code Action kinds.",
    "url": "https://code.visualstudio.com/updates/v1_72#_new-code-action-groups",
    "id": 2970
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### New Code Action colors  \nYou may notice that the [Code Action control](https://code.visualstudio.com/updates/v1_71#_new-code-action-control) also looks a little different this iteration. The styling was updated to use more appropriate [theme colors](https://code.visualstudio.com/api/references/theme-color). The biggest change is that the control body now uses `editorWidget.*` colors instead of `menu.*`.  \nWe are still refining these colors, so let us know if they don't work well with a given theme or if any color customization options are missing.",
    "url": "https://code.visualstudio.com/updates/v1_72#_new-code-action-colors",
    "id": 2971
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Extensions  \n### Recently updated extensions  \nVS Code now shows extensions updated during the last 7 days in a **Recently Updated** section of **Updates** in the Extensions view.  \n![Recently Updated section in the Extensions view](images/1_72/extensions-recently-updated.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_recently-updated-extensions",
    "id": 2972
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Extensions requiring attention  \nVS Code now shows extensions requiring attention sorted to the top of the default **Installed** section of the **Extensions** view. This includes extensions that have a pending update or have been updated or disabled and require VS Code to reload.  \n![Extensions requiring attention are displayed at the top of the Extensions view](images/1_72/extensions-require-attention.png)  \nThe badge on the Extensions icon in the Activity Bar now shows the number of extensions requiring attention.  \n![Extensions badge showing that four extensions require attention](images/1_72/extensions-badge.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_extensions-requiring-attention",
    "id": 2973
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Ignore updates for an extension  \nYou can now ignore updates for an extension by clicking the **Ignore Updates** button in the **Update** dropdown menu. This will remove the extension from the extensions requiring attention list.  \n![Ignore Updates option in Extensions view context menu](images/1_72/extensions-ignore-updates.png)  \nYou can undo this action by unchecking the same **Ignore Updates** button.  \n![Checked Ignore Updates option in Extensions view context menu](images/1_72/extensions-undo-ignore-updates.png)  \nNote that installing a specific version of an extension (via **Install Another Version**) will also ignore updates for that extension.",
    "url": "https://code.visualstudio.com/updates/v1_72#_ignore-updates-for-an-extension",
    "id": 2974
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Sorting of installed extensions  \nYou can now sort the list of installed extensions by **Install Count**, **Rating**, **Name**, **Published Date**, and **Updated Date**.  \n![Extensions view Sort By menu options](images/1_72/extensions-filter-sort.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_sorting-of-installed-extensions",
    "id": 2975
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Search  \n### Results displayed as a tree view  \nYou can now view search results in a tree! Just toggle between the list and tree view by clicking on the list/tree icon in the top corner of the Search view.  \n![Search results shown as a tree view](images/1_72/search-tree-view.gif)  \n_Theme: [Night Owl Light](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl) (preview on [vscode.dev](https://vscode.dev/editor/theme/sdras.night-owl))_",
    "url": "https://code.visualstudio.com/updates/v1_72#_results-displayed-as-a-tree-view",
    "id": 2976
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### File decoration settings  \nIn search results, the filename badges and colors that reflect file statuses can now be toggled on and off. The settings are **Search > Decorations: Badges** (`search.decorations.badges`) and **Search > Decorations: Colors** (`search.decorations.colors`).  \n![Search results file decoration settings](images/1_72/search-file-decoration-settings.png)  \n_Theme: [Night Owl Light](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl)  (preview on [vscode.dev](https://vscode.dev/editor/theme/sdras.night-owl))_",
    "url": "https://code.visualstudio.com/updates/v1_72#_file-decoration-settings",
    "id": 2977
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Source Control  \n### Discover nested Git repositories  \nTo address a long standing feature request, this milestone we made changes to repository discovery to add support for nested Git repositories. Depending on the location of the nested repositories, you may need to modify the `git.repositoryScanMaxDepth` setting (the default is 1 level).",
    "url": "https://code.visualstudio.com/updates/v1_72#_discover-nested-git-repositories",
    "id": 2978
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Add support for SSH keys with a passphrase  \nWhen an SSH key with a passphrase is used for Git operations, VS Code will now display the quick input control so that you can enter the passphrase for the SSH key. The passphrase is not cached and has to be entered every time a Git operation is performed.",
    "url": "https://code.visualstudio.com/updates/v1_72#_add-support-for-ssh-keys-with-a-passphrase",
    "id": 2979
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Pull before checkout  \nThis milestone we added a new setting, `git.pullBeforeCheckout`, to streamline the process of switching branches. When this setting is enabled, if there are no outgoing commits, we will pull from the remote and fast-forward the branch before checking it out.",
    "url": "https://code.visualstudio.com/updates/v1_72#_pull-before-checkout",
    "id": 2980
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Repository fetch improvements  \nFor Git repositories with multiple remotes, invoking the fetch command will now display a Quick Pick with the list of all remotes. Users can pick a particular remote to be fetched or to fetch from all remotes.",
    "url": "https://code.visualstudio.com/updates/v1_72#_repository-fetch-improvements",
    "id": 2981
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Abort merge command  \nThere is a new command, **Git: Abort Merge**, to abort a merge operation that is currently in progress.",
    "url": "https://code.visualstudio.com/updates/v1_72#_abort-merge-command",
    "id": 2982
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Terminal  \n### Terminal Quick Fixes  \nWe're starting to roll out a new feature powered by shell integration called Quick Fixes. This feature comes with [audio cue](https://code.visualstudio.com/docs/editor/accessibility#_audio-cues) support. Enable it with `audioCues.terminalQuickFix` for an audible indication that a fix is available.  \nA Quick Fix is available when a command maps to a set of actions the user will likely take and can be activated via the same keybinding used in the editor `kbstyle(Ctrl+.)` or `kbstyle(Cmd+.)`.  \nHere are the initial supported Quick Fixes:  \n#### Git similar command  \nWhen a Git command is mistyped, the Quick Fix suggests the similar command.  \n![Run: git status is suggested after git sttatus is mistyped](images/1_72/quick-fix-similar.png)  \n#### Git set upstream  \nWhen `git push` is executed and there's no upstream remote, the Quick Fix suggests pushing with the upstream remote arguments.  \n![Run: git push set upstream is suggested](images/1_72/quick-fix-push.png)  \n#### Git create PR  \nWhen a branch is pushed for the first time to the remote, the Quick Fix suggests opening the link to create a PR.  \n![An open GitHub PR link action is offered](images/1_72/quick-fix-create-pr.png)  \n#### Free port  \nWhen a server is launched using a port that is already in use, the Quick Fix offers an action to kill the process and free the port.  \n![A server launch fails with a port 3000 in use error. An action to free port 3000 is offered.](images/1_72/quick-fix-free-port.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_terminal-quick-fixes",
    "id": 2983
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Shell integration improvements  \nThe following improvements to shell integration were made:  \n* **Run Recent Command** and **Go to Recent Directory** will now clear the line if it has content (or if it cannot be reliably determined).\n* Removed the bash script's usage of the `$PREFIX` environment variable, which could conflict with some build tools.\n* Polished the zsh script to fix some edge cases around `$ZDOTDIR`.\n* Better handling of zsh shell integration on machines that are shared between multiple users.",
    "url": "https://code.visualstudio.com/updates/v1_72#_shell-integration-improvements",
    "id": 2984
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Hyperlink support  \n[Hyperlinks sent from the application](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda) running in the terminal are now supported. These allow presenting a label that points to a URL and appear with a dashed underline:  \n![Hyperlinks appear in the terminal with dashed underlines, hovering the hyperlink reveals the URL](images/1_72/terminal-hyperlink.png)  \nHere's an example of how you could write a link with a label \"VS Code\" that points to [https://code.visualstudio.com](https://code.visualstudio.com):  \n```cpp\nprintf '\\e]8;;https://code.visualstudio.com\\e\\\\VS Code\\e]8;;\\e\\\\'\n```  \nOr more generally:  \n```bat\n\\x1b]8;; <URL> \\x1b\\ <Label> \\x1b]8;;\\x1b\\'\n```",
    "url": "https://code.visualstudio.com/updates/v1_72#_hyperlink-support",
    "id": 2985
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### VT feature support  \nThis version brings support for these VT escape sequences:  \n* `DECRQM`: ANSI and DEC private mode reporting (`CSI Ps $ p`) - This sequence allows programs to query various modes the terminal is in, such as wraparound or bracketed paste modes.\n* `DECSCA`: Protection attribute (`CSI Ps \" q`) - This attribute determines whether `DECSED` and `DECSEL` can erase content.",
    "url": "https://code.visualstudio.com/updates/v1_72#_vt-feature-support",
    "id": 2986
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Audio bell  \nThe audio bell now works in the terminal and can be enabled via `terminal.integrated.enableBell`.",
    "url": "https://code.visualstudio.com/updates/v1_72#_audio-bell",
    "id": 2987
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Terminal documentation  \nThe Terminal documentation has been refactored and moved into its own table of contents on the [VS Code website](https://code.visualstudio.com/docs/terminal/basics).  \nThere are now topics specific to:  \n* [Terminal Basics](https://code.visualstudio.com/docs/terminal/basics) - Get up to speed quickly on the VS Code Integrated Terminal.\n* [Terminal Profiles](https://code.visualstudio.com/docs/terminal/profiles) - Learn how to customize terminals through profiles.\n* [Shell Integration](https://code.visualstudio.com/docs/terminal/shell-integration) - VS Code can provide features such as command status, history, and quick navigation.\n* [Appearance](https://code.visualstudio.com/docs/terminal/appearance) - Modify the terminal text and cursor styling and colors.\n* [Advanced](https://code.visualstudio.com/docs/terminal/advanced) - Advanced support for custom keybindings and Unicode and emoji characters.  \nHopefully you'll be able to easily find the right documentation when you need it.",
    "url": "https://code.visualstudio.com/updates/v1_72#_terminal-documentation",
    "id": 2988
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Tasks  \n### Pin run task entries  \nTasks can be pinned in the **Tasks: Run Task** list for faster and easier access.  \n![Pinned items are the top category in the Run Task list](images/1_72/pinned-tasks.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_pin-run-task-entries",
    "id": 2989
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Task completion sound  \nTasks play a sound when they finish to enable multi-tasking and improve accessibility. Configure the audio cue via the `audioCues.taskCompleted` setting.",
    "url": "https://code.visualstudio.com/updates/v1_72#_task-completion-sound",
    "id": 2990
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Languages  \n### Markdown link validation  \nWhile working with Markdown, it's easy to mistakenly add an invalid file link or image reference. Perhaps you forgot that the filename used a `-` (dash) instead of an `_` (underline), or perhaps the file you are linking to was moved to a different directory. Often you only catch these mistakes after viewing the Markdown preview or after publishing. VS Code's new Markdown link validation can help catch these mistakes.  \nTo get started, set `\"markdown.validate.enabled\": true`. VS Code will now analyze Markdown links to headers, images, and other local files. Invalid links will be reported as either warnings or errors.  \n![A warning shown in the editor when linking to a file that does not exist](images/1_72/md-link-validation.png)  \nVS Code can even catch invalid links to specific headers in other Markdown files!  \nThere are a few settings you can use to customize link validation:  \n* `markdown.validate.fileLinks.enabled` -Enable/disable validation of links to local files: `[link](/path/to/file.md)`\n* `markdown.validate.fragmentLinks.enabled` -Enable/disable validation of links to headers in the current file: `[link](#some-header)`\n* `markdown.validate.fileLinks.markdownFragmentLinks` -Enable/disable validation of links to headers in other Markdown files: `[link](other-file.md#some-header)`\n* `markdown.validate.referenceLinks.enabled` -Enable/disable validation of reference links: `[link][ref]`.\n* `markdown.validate.ignoredLinks`-A list of link globs that skip validation. This is useful if you link to files that don't exist on disk but do exist once the Markdown has been published.  \nGive it a try and let us know what you think of the new feature!",
    "url": "https://code.visualstudio.com/updates/v1_72#_markdown-link-validation",
    "id": 2991
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Extract to link definition for Markdown  \n[Reference links](https://www.markdownguide.org/basic-syntax#reference-style-links) make it easy to use the same link multiple times in your Markdown source:  \n```md\nThis [link][example-link] and [this link][example-link] both point to the same place!\n\n[example-link]: http://example.com\n```  \nThis is convenient as you can update both links just by changing one place in your file.  \nThe new **Extract to link definition** refactoring helps you convert an existing Markdown link into a link definition and reference link. This refactoring will convert all occurrences of a link in the current document. For example, for the Markdown document:  \n```md\n[Markdown](https://daringfireball.net/projects/markdown/) and you: Adventures in [Markdown linking](https://daringfireball.net/projects/markdown/)!\n```  \nRunning **Extract to link definition** on either of the `https://daringfireball.net/projects/markdown/` links will result in:  \n```md\n[Markdown][md] and you: Adventures in [Markdown linking][md]!\n\n[md]: https://daringfireball.net/projects/markdown/\n```  \nAfter running the refactoring, VS Code will prompt you for the link definition's name. In the above example, we entered `md`.",
    "url": "https://code.visualstudio.com/updates/v1_72#_extract-to-link-definition-for-markdown",
    "id": 2992
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Organize link definitions in Markdown  \nThe new **Organize link definitions** [Code Action](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) (`source.organizeLinkDefinitions`) for Markdown files will group all link definitions to the bottom of the file, sorts them alphabetically, and removes any unused ones. This can be run using the **Source Action** command.  \nFor example, in the Markdown source:  \n```md\nSome [link][example] and an image:\n\n![An image of a cat][cat-gif]\n\n[example]: http://example.com\n[cat-gif]: /keyboard-cat.gif\n[some unused link]: http://example.com/file2\n```  \nRunning **Organize link definitions** will  \n```md\nSome [link][example] and an image:\n\n![An image of a cat][cat-gif]\n\n[cat-gif]: /keyboard-cat.gif\n[example]: http://example.com\n```  \nNotice how the unused `some unused link` definition has been removed and the remaining definitions have been sorted alphabetically.",
    "url": "https://code.visualstudio.com/updates/v1_72#_organize-link-definitions-in-markdown",
    "id": 2993
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### CSS / LESS / SCSS  \nThe CSS language support now understands the [@property](https://developer.mozilla.org/docs/Web/CSS/@property) and [@layer](https://developer.mozilla.org/docs/Web/CSS/@layer) at-rules.",
    "url": "https://code.visualstudio.com/updates/v1_72#_css-/-less-/-scss",
    "id": 2994
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Notebooks  \n### Notebook JavaScript output is now evaluated as a module  \nJavaScript output in notebooks is now treated as a module. This means that variables declared inside the output will no longer leak into other outputs (and in the case of `const` variables, potentially even prevent other outputs with conflicting variable names from being run).  \nThis also means you can now use `import` inside of JavaScript outputs:  \n```js\n%%javascript\nimport { myFunction } from './myModules.js';\n\nconsole.log(myFunction());\n```",
    "url": "https://code.visualstudio.com/updates/v1_72#_notebook-javascript-output-is-now-evaluated-as-a-module",
    "id": 2995
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### HTML headers supported in the notebook outline  \nHTML headers in Markdown cells can now be detected and rendered in the notebook **Outline** view.  \n![HTML headers in notebook Markdown cells](images/1_72/notebook-outline-html-headers.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_html-headers-supported-in-the-notebook-outline",
    "id": 2996
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## VS Code for the Web  \n### 'code' in your browser omnibox  \nThere is now a [Chrome/Edge browser extension](https://chrome.google.com/webstore/detail/vs-code/kobakmhnkfaghloikphojodjebdelppk) that makes it easier to open your GitHub repositories in [vscode.dev](https://vscode.dev).  \nTo get started:  \n1. Install the extension from the Chrome web store.\n2. Type `code ` into your browser search bar to activate the omnibox.\n3. Search for a GitHub repository by name and hit `kbstyle(Enter)`. Suggestions are populated by your browser search history, so if the repo you want doesn't come up, you can also type in the fully qualified `<owner>/<repo>` name to open it, for example `microsoft/vscode`.  \nIn the video below, the user opens the `microsoft/vscode` repository in `vscode.dev` by typing `code vscode`.  \n<video src=\"images/1_72/code-vscode.mp4\" placeholder=\"images/1_72/code-vscode.png\" autoplay loop controls muted title=\"`code` in your browser omnibox\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nThis extension is inspired with many thanks by the [Goto GitHub Repo](https://chrome.google.com/webstore/detail/goto-github-repo/jdjgledckgjldgndcmjjakfjmikopghp) Chrome extension, which was created by [Pine Wu](https://github.com/octref), a former VS Code team member.",
    "url": "https://code.visualstudio.com/updates/v1_72#_'code'-in-your-browser-omnibox",
    "id": 2997
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Take your changes with you when switching development environments  \nWhen you are browsing a GitHub or Azure Repos repository such as [https://vscode.dev/github/microsoft/vscode](https://vscode.dev/github/microsoft/vscode), you can use the [**Continue Working On**](https://code.visualstudio.com/docs/sourcecontrol/github#_continue-working-on) command to select a different development environment to use with your repository.  \nPreviously, if you had uncommitted changes in your virtual workspace, you would need to push them to GitHub or Azure Repos to view them elsewhere. This milestone, we have added **Edit Sessions** integration to the **Continue Working On** feature, so that your uncommitted changes automatically travel with you to your target development environment, such as a GitHub codespace:  \nIn the video below, the user's changes to a JavaScript file that were made when using VS Code for the Web are applied when they create and switch to working in a new GitHub codespace.  \n<video src=\"images/1_72/continue-on-codespaces.mp4\" placeholder=\"images/1_72/continue-on-codespaces.png\" autoplay loop controls muted title=\"Continue On in GitHub Codespaces\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nWith this release, the first time that you use **Continue Working On** with uncommitted changes, you will have the option to bring your edits to your selected development environment using **Edit Sessions**, which uses a VS Code service to store your pending changes. These changes are deleted from our service once they are applied to your target development environment. If you choose to continue without your uncommitted changes, you can always change this preference later by configuring the `\"workbench.editSessions.continueOn\": \"prompt\"` setting.  \n![Prompt to bring working changes with you when using Continue Working On](images/1_72/continue-on-turn-on.png)  \nWhen you are using VS Code for the Web, your uncommitted changes will then travel with you when you use **Continue Working On** in:  \n* A new cloud hosted environment in GitHub Codespaces\n* A new local clone of your GitHub repository\n* A local VS Code instance with the same virtual GitHub repository  \nWhen you are using desktop VS Code with the [Remote Repositories](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories) extension, your uncommitted changes will travel with you when you use **Continue Working On** in:  \n* A cloud hosted environment in GitHub Codespaces (available via the [GitHub Codespaces](https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces) extension)\n* A new local clone of your GitHub repository\n* A new clone of your GitHub repository in a container volume (available via the [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension)\n* [https://vscode.dev](https://vscode.dev)\n* An existing local folder containing a clone of your repository",
    "url": "https://code.visualstudio.com/updates/v1_72#_take-your-changes-with-you-when-switching-development-environments",
    "id": 2998
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Issue Reporting  \n### Increased threshold for issues to 7500 characters  \nWhen using the built-in issue reporter to report a problem with VS Code or an extension, there is a limit on the number of characters in the URL used to open the issue on github.com. If you hit this limit, you will see a message in the issue body that says `We have written the needed data into your clipboard because it was too large to send. Please paste.`. Unfortunately, some users don't notice the message and forget to paste the data into the issue body.  \nThis milestone, we have increased the threshold to 7500 characters. This is because:  \n1. Certain browsers that have a hard limit on the number of characters in a URL are no longer supported (EOL).\n2. GitHub has its own limit to the number of characters in a URL.  \nThis nearly triples the number of characters included in the URL, which should be sufficient for most users and the clipboard message will be displayed less often.",
    "url": "https://code.visualstudio.com/updates/v1_72#_increased-threshold-for-issues-to-7500-characters",
    "id": 2999
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Issue Reporter used with Running Extensions editor  \nIf you open the **Running Extensions** editor using the command **Developer: Show Running Extensions** and select the **Report Issue** button, it will display the built-in issue reporter. Before, this would take you to a GitHub issue and ask you to paste, and it created a lot of unnecessary and poor quality issues in extension repositories. The extensions **Report Issue** button now goes through the built-in issue reporter and will let users submit quality extension issues.",
    "url": "https://code.visualstudio.com/updates/v1_72#_issue-reporter-used-with-running-extensions-editor",
    "id": 3000
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Contributions to extensions  \n### Remote Development  \nThe Remote Development extensions allow you to use a development container, remote machine, or the Windows Subsystem for Linux (WSL) as a full-featured development environment.  \nWe've heard your feedback about the naming of the **Remote - WSL** and **Remote - Containers** extensions. We intended for `Remote` in their names to indicate you develop in a \"remote\" or \"separate\" WSL distro or development container, rather than traditional local development. However, this is a different use of \"remote\" than many people use, and it could lead to confusion (for example, is the dev container on my machine?).  \nThus, we've updated naming and in-product commands in these extensions to be clearer, renaming them to the [WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) and [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers). Links such as the extension identifier in the Marketplace and documentation remain the same, so you shouldn't see breakage in your current use of these two extensions.  \n![WSL extension in the Marketplace](images/1_72/wsl-extension.png)  \n![Dev Containers extension in the Marketplace](images/1_72/dev-containers-extension.png)  \nAlong with the rename, work continued on features and fixes of these extensions as well. You can learn more in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_72.md).",
    "url": "https://code.visualstudio.com/updates/v1_72#_remote-development",
    "id": 3001
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Dev Container Features  \n[Dev Container Features](https://code.visualstudio.com/blogs/2022/09/15/dev-container-features) let you easily add pre-packaged capabilities to your dev containers. Whether it is tools like Git or Docker or support for programming languages such as Go or Java, you can review the list of [Available Features](https://containers.dev/features) and add them to your `devcontainer.json`. You can also create your own Features to publish and share with others using the [Feature template](https://github.com/devcontainers/feature-template).",
    "url": "https://code.visualstudio.com/updates/v1_72#_dev-container-features",
    "id": 3002
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights of this release include:  \n* Improved support for GitHub Enterprise Server. This includes:\n* PAT-less authentication courtesy of the VS Code built-in GitHub Enterprise Server authentication provider.\n* Automatic detection when you open a folder with an Enterprise repo and an on-ramp to get set up.\n* Fixes for GitHub Enterprise Server bugs.\n* Checkboxes for marking files as viewed.  \nCheck out the [changelog for the 0.52.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0520) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_72#_github-pull-requests-and-issues",
    "id": 3003
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### GitHub Issue Notebooks  \n#### Workspace edits  \nThe [GitHub Issue Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks&ssr=false#overview) extension showcases the notebook API and also turned out to be pretty handy. In this spirit, we adopted the latest improvements of the workspace edit API. There are new Code Actions that:  \n* Move/copy cells into new notebooks.\n* Allow you to split cells using OR-statements.\n* Extract qualified values like `label:bug` into variables using snippet edits.\n* Snippet-based Quick Fixes for value set errors.  \n![Move cell into new notebook and Quick Fix for value set violation](images/1_72/ghin-code-actions.gif)  \n#### Localization  \nThe extension is now fully localized in the 13 languages that VS Code supports. It's also the first extension to be localized using the new [Localization API](#localization-as-part-of-the-api), which means that localization works on desktop and the web.",
    "url": "https://code.visualstudio.com/updates/v1_72#_github-issue-notebooks",
    "id": 3004
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Jupyter  \n#### Cell tags and slideshow editing support  \nWe can now edit cell tags and slideshow types directly in notebook editor without opening the JSON format of the document.  \nThis allows us to parameterize the notebooks for [papermill](https://github.com/nteract/papermill) or customize notebooks for [nbconvert](https://github.com/jupyter/nbconvert).  \n![Edit Jupyter notebook cell tags](images/1_72/notebook-cell-tags.gif)  \nWe can now also update notebook cells' slide show type directly through commands to turn the notebooks into slides for presentation.  \n![Edit Jupyter notebook slideshow](images/1_72/notebook-slideshow.gif)  \nBoth examples above are using the [notebook workspace edit API](#editing-notebooks-with-workspaceedit) to edit cell metadata. If you are interested in how to support editing other custom cell metadata, you can learn more from the GitHub repositories ([cell-tags](https://github.com/microsoft/vscode-jupyter-cell-tags), [slideshow](https://github.com/microsoft/vscode-jupyter-slideshow)).  \n#### Improved command interaction for the Interactive Window  \nThe `interactive.input.focus` command will now give focus to the most recently used Interactive Window's input box. In the short video below, the commands are being used with custom keyboard shortcuts.  \n![Interactive Window navigation using keyboard shortcuts](images/1_72/iw-keyboard.gif)  \nNotebook **Delete** cell commands are enabled for Interactive Window cells, and can now be undone.  \n#### Python file cell folding  \n\"Cells\" within a Python file denoted with `# %%` markers can now be folded in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_72#_jupyter",
    "id": 3005
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### GitHub Enterprise Server authentication support  \nBefore now, GitHub Enterprise Server users had to manually create a personal access token (PAT) in order to log in to GitHub Enterprise Server in VS Code (for example, to use with the GitHub Pull Requests and Issues extension). This was a cumbersome process that required users to leave VS Code to create a PAT, make sure they've created it with the right permissions, copy it, and paste it back into VS Code.  \nNo more. Now, the GitHub Enterprise Server login flow is identical to the github.com login flow, and users can log in to GitHub Enterprise Server without needing to create a PAT. To see this experience in action, you can get the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension from the Marketplace, set the `github-enterprise.uri` setting to your GitHub Enterprise Server URI, and give the extension a try. Here's a video demonstrating the new experience:  \n<video src=\"images/1_72/ghe-auth.mp4\" placeholder=\"images/1_72/ghe-auth.png\" autoplay loop controls muted title=\"GitHub Enterprise Server authentication flow in VS Code\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n_Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda) (preview on [vscode.dev](https://vscode.dev/editor/theme/tinkertrain.theme-panda))_",
    "url": "https://code.visualstudio.com/updates/v1_72#_github-enterprise-server-authentication-support",
    "id": 3006
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Python  \n#### Create Environment command  \nA new **Create Environment** command has been added that will automatically create a virtual environment or conda environment for Python users in VS Code. Users will be able to trigger the command through the Command Palette, select whether they want to create a new virtual environment with venv or a Conda environment, and finally select their desired interpreter for their project. The command will also install necessary packages outlined in a `requirements.txt` file that is in their project folder. We hope this new feature streamlines the environment creation process and encourages users to utilize environments for coding best practices.  \n![Create new virtual environment with Create Environment command](images/1_72/create_venv.gif)  \n#### New environments API for extension authors  \nThe Python API now provides a way for extensions to work with Python environments available in the user's machine as found by the Python extension. Extensions can also use it to access the selected environment path that's used by the Python extension to run scripts, or update it to their preferred one.  \nFeel free to provide your feedback in [issue #18888](https://github.com/microsoft/vscode-python/discussions/18888). Note the API is still not finalized yet, so may still change without providing backwards compatibility based on the feedback.  \n#### Python extension template  \nThe [Python extension template](https://code.visualstudio.com/api/advanced-topics/python-extension-template) helps you build a Visual Studio Code extension for your favorite Python tool, such as linters, formatters, or code analysis utilities. The [template](https://github.com/microsoft/vscode-python-tools-extension-template) gives you the basic building blocks you need to build an extension that integrates your tool into VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_72#_python",
    "id": 3007
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Preview features  \n### Settings Profiles  \nWe have been working the last couple of months to support **Settings Profiles** in VS Code, which is one of the most popular asks from the community. This feature is available for preview via the `workbench.experimental.settingsProfiles.enabled` setting. Try it out and give us your feedback by creating issues in the [vscode repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #116740](https://github.com/microsoft/vscode/issues/116740).  \n#### Settings Profiles indicator  \nVS Code shows a Settings Profiles indicator at the bottom of the Activity bar. By default, the first two characters of the profile name are shown in the indicator. You can also customize the short name to any two characters or an emoji or a codicon. A codicon can be referenced by using the `$(codicon-id)` syntax.  \n![Settings Profiles indicator](images/1_72/settings-profiles-indicator.png)  \nA menu is shown when you click on this indicator with a **Change Short Name** option.  \n![Settings Profiles menu](images/1_72/settings-profiles-menu.png)  \n#### Syncing Settings Profiles  \nVS Code now supports syncing Settings Profiles across your VS Code instances.  \n**Note:** This feature is currently available only in the [Insiders](https://code.visualstudio.com/insiders) release of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_72#_settings-profiles",
    "id": 3008
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### WebAssembly and Python execution in the Web  \nIn the last couple of month, we worked on bringing [WebAssembly](https://webassembly.org) (WASM) to VS Code. To enable support, we worked on two things:  \n* Libraries that enable extensions to execute WebAssembly code. The WebAssembly has transparent access to the files in the workspace and to a VS Code terminal. These libraries are developed in the [vscode-wasm repository](https://github.com/microsoft/vscode-wasm) and published to npm as [`@vscode/sync-api-common`](https://www.npmjs.com/package/@vscode/sync-api-common), [`@vscode/sync-api-client`](https://www.npmjs.com/package/@vscode/sync-api-client), [`@vscode-sync-api-service`](https://www.npmjs.com/package/@vscode/sync-api-service) and [`@vscode/wasm-wasi`](https://www.npmjs.com/package/@vscode/wasm-wasi). The README files of these repositories contain examples on how to use the libraries.\n* A VS Code extension that supports running Python files in VS Code for the Web (for example [vscode.dev](https://vscode.dev) and [insiders.vscode.dev](https://insiders.vscode.dev)). The extension is available in the Marketplace as [Experimental - Python for the Web](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-python-web-wasm). One constraint is that the Python code that you want to execute needs to be hosted in a GitHub repository.  \nThe screenshot below shows running a `Hello World` program:  \n![Execute Python file in VS Code for the Web](images/1_72/python-execution.png)  \nYou can also start a Python REPL using the command **Python WASM: Start REPL**.  \n![Python REPL running in VS Code for the Web](images/1_72/python-repl.png)  \nPlease note that both the libraries and the extension are under development and provided as previews. There are limitations in the WebAssembly Python interpreter as well as in VS Code itself. Major limitations in the interpreter are:  \n* No pip support.\n* No socket support.\n* No thread support. As a consequence, there is no async support.  \nHowever there is support to create your own Python environment, including source wheel Python packages. Check out the extension's [README](https://github.com/microsoft/vscode-python-web-wasm#readme) for details.  \nLimitations in VS Code are:  \n* No debug support. You can only run a Python file.\n* No support for native Python modules.  \nBut stay tuned. We have things in the pipeline to lift some of these limitations.",
    "url": "https://code.visualstudio.com/updates/v1_72#_webassembly-and-python-execution-in-the-web",
    "id": 3009
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Extension authoring  \n### Extension debugging in a clean environment  \nWhen debugging an extension, there was always the problem that the extension was running in the development environment (user settings and installed extensions) of the author of the extension and not in an environment that was more appropriate for the target user of the extension.  \nWith the recently introduced \"profiles\" feature, it is now possible to run the extension under development in a different environment by specifying a profile in the extension's debug configuration. Enable the `workbench.experimental.settingsProfiles.enabled` setting to enable the profiles feature.  \nTwo scenarios are supported:  \n* **debugging in a clean environment** by using an unnamed \"empty\" profile that gets automatically deleted when extension debugging has stopped.\n* **debugging in a controlled environment** by using a named profile that has been created specifically for the extension under development, and that contains specific user settings and extensions.  \nThis debug configuration shows how to debug in a clean environment with the `--profile-temp` switch:  \n```json\n{\n\"name\": \"Extension\",\n\"type\": \"extensionHost\",\n\"request\": \"launch\",\n\"args\": [\n\"--profile-temp\",\n\"--extensionDevelopmentPath=${workspaceFolder}\"\n],\n\"outFiles\": [\n\"${workspaceFolder}/dist/**/*.js\"\n],\n\"preLaunchTask\": \"npm: watch\"\n}\n```  \nAnd here is a debug configuration for debugging in a controlled environment that uses a previously created profile named \"extensionContext\":  \n```json\n{\n\"name\": \"Extension\",\n\"type\": \"extensionHost\",\n\"request\": \"launch\",\n\"args\": [\n\"--profile=extensionContext\",\n\"--extensionDevelopmentPath=${workspaceFolder}\"\n],\n\"outFiles\": [\n\"${workspaceFolder}/dist/**/*.js\"\n],\n\"preLaunchTask\": \"npm: watch\"\n}\n```  \nNote that when debugging an extension in a remote location (via the [Remote Development](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack) extensions Dev Containers, SSH, or WSL), using the `--profile-temp` flag will result in this status message:  \n![Disconnected Status bar message](images/1_72/remote-status-message.png)  \nThis is expected because the temporary profile does not include any extensions, which means that the Remote Development extensions are missing too. For remote scenarios, it is recommended that you create an empty named profile, add the Remote Development extensions to it, and then use the `--profile=....` command line option.",
    "url": "https://code.visualstudio.com/updates/v1_72#_extension-debugging-in-a-clean-environment",
    "id": 3010
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Improved workspace editing APIs  \n#### Editing notebooks with WorkspaceEdit  \nWorkspace edits can now modify notebooks with `vscode.NotebookEdit`. The `vscode.NotebookEdit` class includes static factory functions for creating edits that insert, replace, and delete cells in a notebook:  \n```ts\nconst currentNotebook = vscode.window.activeNotebookEditor?.notebook;\nif (currentNotebook) {\nconst edit = new vscode.WorkspaceEdit();\n\n// Use .set to add one or more edits to the notebook\nedit.set(currentNotebook.uri, [\n// Create an edit that inserts one or more cells after the first cell in the notebook\nvscode.NotebookEdit.insertCells(/* index */ 1, [\n// ... new notebook cell data\n]),\n\n// Additional notebook edits...\n]);\n\nawait vscode.workspace.applyEdit(edit);\n}\n```  \n#### Performing snippet edits with WorkspaceEdit  \nThe new `SnippetTextEdit` type allows extensions to perform snippet edits with `WorkspaceEdit`. Snippet edits are similar to regular text edits, but they allow the user to tab through placeholders, insert variables, select from choice element, etc. Learn more about snippets in [this guide](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax)  \nNote that snippet edits require a code or notebook editor and can only support snippet edits for a single editor, otherwise they behave like regular text edits.  \nWe believe that combining snippet edits and workspace edits allow for new and more seamless Code Actions and refactorings, like the sample from the [GitHub Issue Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-github-issue-notebooks) extension below.  \n<video src=\"images/1_72/workspace-edit-snippet.mp4\" placeholder=\"images/1_72/ghe-auth.png\" autoplay loop controls muted title=\"Refactoring using snippet edit\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n#### Creating files with contents with WorkspaceEdit  \nYou can now specify contents when creating files using `WorkspaceEdit`. To do so, pass the contents with its options-bag:  \n```ts\nconst edit = new vscode.WorkspaceEdit();\nedit.createFile(newFileUri, { contents: new Unit8Array([1, 2, 3]) });\n\nawait vscode.workspace.applyEdit(edit);\n```",
    "url": "https://code.visualstudio.com/updates/v1_72#_improved-workspace-editing-apis",
    "id": 3011
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Contributed webview context menus  \nThe new webview context menu API makes it easy for advanced [webviews](https://code.visualstudio.com/api/extension-guides/webview) to customize the context menu that shows when a user right-clicks inside a webview. This new contribution point uses VS Code's normal context menus, so custom menus fit right in with the rest of the editor. Webviews can also show custom context menus for different sections of the webview.  \nTo add a new context menu item to your webview, first add a new entry in `menus` under the new `webview/context` section. Each contribution takes a `command` (which is also where the item's title comes from) and a `when` clause. The [when clause](https://code.visualstudio.com/api/references/when-clause-contexts) should include `webviewId == 'YOUR_WEBVIEW_VIEW_TYPE'` to make sure the context menus only apply to your extension's webviews:  \n```json\n\"contributes\": {\n\"menus\": {\n\"webview/context\": [\n{\n\"command\": \"catCoding.yarn\",\n\"when\": \"webviewId == 'catCoding'\"\n},\n{\n\"command\": \"catCoding.insertLion\",\n\"when\": \"webviewId == 'catCoding' && webviewSection == 'editor'\"\n}\n]\n},\n\"commands\": [\n{\n\"command\": \"catCoding.yarn\",\n\"title\": \"Yarn \ud83e\uddf6\",\n\"category\": \"Cat Coding\"\n},\n{\n\"command\": \"catCoding.insertLion\",\n\"title\": \"Insert \ud83e\udd81\",\n\"category\": \"Cat Coding\"\n},\n...\n]\n}\n```  \nInside of the webview, you can also set the contexts for specific areas of the HTML using the `data-vscode-context` [data attribute](https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes) (or in JavaScript with `dataset.vscodeContext`). The `data-vscode-context` value is a JSON object that specifies the contexts to set when the user right-clicks on the element. The final context is determined by going from the document root to the element that was clicked.  \nConsider this HTML for example:  \n```html\n<div class=\"main\" data-vscode-context='{\"webviewSection\": \"main\", \"mouseCount\": 4}'>\n<h1>Cat Coding</h1>\n\n<textarea data-vscode-context='{\"webviewSection\": \"editor\", \"preventDefaultContextMenuItems\": true}'></textarea>\n</div>\n```  \nIf the user right-clicks on the `textarea`, the following contexts will be set:  \n* `webviewSection == 'editor'` - This overrides `webviewSection` from the parent element.\n* `mouseCount == 4` - This is inherited from the parent element.\n* `preventDefaultContextMenuItems == true` - This is a special context that hides the copy and paste entries that VS Code normally adds to webview context menus.  \nIf the user right-clicks inside of the `<textarea>`, they will see:  \n![Custom context menus showing in a webview](images/1_72/webview-context-menus.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_contributed-webview-context-menus",
    "id": 3012
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### New theme variable for active theme in webviews  \nThe new `data-vscode-theme-id` data attribute in webviews stores the ID of the currently active theme. This replaces the now deprecated `data-vscode-theme-name` attribute, which tracked the theme's full name (and which also may have been localized):  \n```css\nbody[data-vscode-theme-id=\"One Dark Pro\"] {\nbackground: hotpink;\n}\n```  \nIf you were using `data-vscode-theme-name` in your webview, migrate to the new `data-vscode-theme-id` attributed.",
    "url": "https://code.visualstudio.com/updates/v1_72#_new-theme-variable-for-active-theme-in-webviews",
    "id": 3013
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Async notebook renderers  \nThe [notebook renderer API](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer) now better supports asynchronous notebook renderers. While this was implicitly supported previously, now `renderOutputItem` can return a `Promise` to indicate that the output item is being rendered. The `renderOutputItem` function is now also passed an [AbortSignal](https://developer.mozilla.org/docs/Web/API/AbortSignal) that is aborted if rendering is canceled.  \n```ts\nrenderOutputItem(outputItem: OutputItem, element: HTMLElement, signal: AbortSignal): void | Promise<void>;\n```  \nIf your renderer performs any asynchronous work, please adopt these API updates so VS Code can better support your renderer.",
    "url": "https://code.visualstudio.com/updates/v1_72#_async-notebook-renderers",
    "id": 3014
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Refactor.move Code Action kind  \nThe new `refactor.move` Code Action kind can be used for refactorings that move code around (such as moving a symbol to a new file or reordering code within a file).  \nWhile extensions could previously create Code Actions of the kind `refactor.move`, this kind is now officially documented and is [supported by the new Code Action control](#new-code-action-groups).",
    "url": "https://code.visualstudio.com/updates/v1_72#_refactor.move-code-action-kind",
    "id": 3015
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Selected tree items passed to view/title actions  \nCommands contributed to `view/title` menus will receive two arguments: the first is the focused tree node and the second is all the selected items in the tree.",
    "url": "https://code.visualstudio.com/updates/v1_72#_selected-tree-items-passed-to-view/title-actions",
    "id": 3016
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Tree view initialSize contribution finalized  \nExtensions that contribute views in `package.json` can use the `initialSize` property to set the initial size of their views.  `initialSize` works similarly to the CSS `flex-grow`.  \nThere are some restrictions on when `initialSize` is applied:  \n* It's only an **initial** size. Once a view has been rendered, the `initialSize` will not be applied again.\n* It's only applied when the extension owns both the view and the view container.",
    "url": "https://code.visualstudio.com/updates/v1_72#_tree-view-initialsize-contribution-finalized",
    "id": 3017
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Tree viewBadge finalized  \n`TreeView` has an optional `viewBadge` property that can be used to set a number badge on the view's view container.  \n![View badge on a view in the Activity bar](images/1_72/view-badge.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_tree-viewbadge-finalized",
    "id": 3018
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Unbound breakpoint warning icon  \nDebug extensions can now define a hint message when there is an active debug session with unbound breakpoints. It will appear in the header of the Breakpoints view and also when hovering the gray breakpoint icon in the editor. Here's an example of how it's used in the `js-debug` extension:  \n![Hovering the breakpoint warning icon](images/1_72/bp-hover.png)  \nThis message can be declared in the new `strings` property in the debugger contribution, like this:  \n```json\n\"strings\": {\n\"unverifiedBreakpoints\": \"Message text goes here\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_72#_unbound-breakpoint-warning-icon",
    "id": 3019
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### VS Code Community Discussions  \nThere is now a [VS Code Community Discussions](https://github.com/microsoft/vscode-discussions/discussions) site for extension authors as a gathering place to ask questions, connect with other developers, and show off great work. There you can find [announcements](https://github.com/microsoft/vscode-discussions/discussions/categories/announcements) related to the VS Code APIs, post questions or search for existing answers, and check out the [Extension Show and Tell](https://github.com/microsoft/vscode-discussions/discussions/categories/extension-show-and-tell).",
    "url": "https://code.visualstudio.com/updates/v1_72#_vs-code-community-discussions",
    "id": 3020
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Event for env.shell changes  \nThe new event `env.onDidChangeShell` has been added to compliment `env.shell`, the detected default shell for the extension host:  \n```ts\nenv.onDidChangeShell(newShell => {\nconsole.log(newShell); // Same value as env.shell\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_72#_event-for-env.shell-changes",
    "id": 3021
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Tree item checkboxes  \nThe proposed `checkboxState` lets you add checkboxes to tree items.  \n![Tree items with checkboxes](images/1_72/tree-item-checkbox-state.png)  \n```ts\nthis.checkboxState = { state: vscode.TreeItemCheckboxState.Unchecked, tooltip: 'mark file as viewed' };\n```",
    "url": "https://code.visualstudio.com/updates/v1_72#_tree-item-checkboxes",
    "id": 3022
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Localization as part of the API  \nThis iteration we are introducing a new API to help extensions localize strings. This replaces the previous `vscode-nls` and `vscode-nls-dev` modules that were used for localization in the past. Those will continue to work but will not receive any more features. The new API and tooling is designed to be familiar but also easier to use and more flexible. Additionally, including it as part of the VS Code API enables us to provide support for localizing your extensions for both VS Code for the desktop and VS Code for the Web.  \nLocalization for VS Code extensions has four important parts:  \n#### The new vscode.l10n API  \n```ts\ndeclare module 'vscode' {\nexport namespace l10n {\n/**\n* A string that can be pulled out of a localization bundle if it exists.\n*/\nexport function t(message: string, ...args: any[]): string;\n/**\n* A string that can be pulled out of a localization bundle if it exists.\n*/\nexport function t(options: { message: string; args?: any[]; comment: string[] }): string;\n/**\n* The bundle of localized strings that have been loaded for the extension.\n*/\nexport const bundle: { [key: string]: string };\n/**\n* The URI of the localization bundle that has been loaded for the extension.\n*/\nexport const uri: Uri | undefined;\n}\n}\n```  \nThe [vscode.l10n](https://github.com/microsoft/vscode/issues/158213#issuecomment-1241329160) proposed API is a new namespace and provides a single function `t` that can be used to declare that a string should be localized. The function can be called with a string or an object with a `message` property. The function will return the localized string if it exists, otherwise it will return the original string. The function also supports arguments that can be used to format the string and comments that can be used to provide context for translators.  \nA simple example of using the new API:  \n```ts\nimport { l10n } from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\nconst message = l10n.t('Hello in {0}!', vscode.env.language);\nvscode.window.showInformationMessage(message);\n}\n```  \nIn this example, the string `Hello in {0}!` will be localized if a localization bundle exists for the current language. The `{0}` will be replaced with the current language (`en` by default, or `fr` for French, `pt-br` for Brazilian Portuguese, etc.). If no localization bundle exists, the string will be returned as-is and formatted with the arguments. You may be wondering where these localization bundles come from. I'll cover that in the next section.  \nThe `vscode.l10n` API also provides access to the bundle of localized strings or the URI to the bundle of strings. This is intended to be used in subprocess scenarios, which I will cover later.  \n> **IMPORTANT**: When you use this API, you also need to explicitly declare where the localization bundles are located. This is done by adding a `l10n` property in your `package.json`:  \n```json\n{\n\"main\": \"./out/extension.js\",\n\"l10n\": \"./l10n\"\n}\n```  \nThe `l10n` property should be a relative path to the folder that contains the localization bundles.  \n#### The @vscode/l10n-dev module  \nThe [@vscode/l10n-dev](https://npmjs.com/package/@vscode/l10n-dev) module is a new module that is used to generate the localization bundles. You can either use it as a command line tool or as a library. Both are used to generate the localization bundles by scanning for `vscode.l10n.t(..)` calls from the source code provided.  \nHere's a simple example of using the command line tool:  \n```sh\nnpx @vscode/l10n-dev ./src --out ./l10n\n```  \nThis will place a `bundle.l10n.json` file in the `./l10n` folder. From there you can make a `bundle.l10n.LOCALE.json` file for each locale you want to support. For example, let's say that the command above generates the following `bundle.l10n.json` file:  \n```json\n{\n\"Hello\": \"Hello\",\n\"Hello {0}\": \"Hello {0}\",\n\"Hello {0}/This is a comment\": {\n\"message\": \"Hello {0}\",\n\"comment\": [\"This is a comment\"]\n}\n}\n```  \nIf you wanted to support French, you would create this in a `bundle.l10n.fr.json` file:  \n```json\n{\n\"Hello\": \"Bonjour\",\n\"Hello {0}\": \"Bonjour {0}\",\n\"Hello {0}/This is a comment\": \"Bonjour {0}\"\n}\n```  \n>**Note**: You don't need the comments in the localized bundles since the comments are only useful for translators translating the original bundle.  \nThe `@vscode/l10n-dev` module can also be used to generate XLF files. The VS Code team generates XLF files that we then give to translators at Microsoft. The translators then give us back the translated XLF files. We then use the `@vscode/l10n-dev` module to generate the localized bundles from the translated XLF files. We plan on writing a blog post that goes into more detail about our localization process as a whole.  \n#### The @vscode/l10n module  \nSince the `vscode.l10n` API is only available in the extension host, it cannot be used in subprocesses. For this reason, we have created a new module that can be used in subprocesses to load the localization bundles. The module is called [@vscode/l10n](https://www.npmjs.com/package/@vscode/l10n) and it can be used like so:  \n```ts\nimport { l10n } from '@vscode/l10n';\n\n// Load the translations for the current locale\nl10n.config({\nuri: process.env.BUNDLE_URI_FROM_EXTENSION\n});\n\n// returns the translated string or the original string if no translation is available\nl10n.t('Hello World');\n```  \nThe idea is that your extension-side code, which is responsible for spinning up the subprocesses, will use the `vscode.l10n.contents` or `vscode.l10n.uri` APIs to pass the bundle or the URI of the bundle to the subprocesses. The subprocesses can then use the `@vscode/l10n` module to load the bundle and use the `t` function to translate strings. The `t` function used by the `@vscode/l10n` module will also be picked up in the `@vscode/l10n-dev` module so that the strings can be extracted and localized using one process.  \n#### The package.nls.json file  \nNothing has changed with respect to the `package.nls.json` file. It is still used to declare the default strings that should be localized and should be next to the `package.json`. You still can have `package.nls.LOCALE.json` (where LOCALE is something like `de` or `zh-cn`) and the strings declared in that file will be picked up first if the user has set VS Code to that locale. A small example:  \nYour `package.json`:  \n```jsonc\n{\n\"name\": \"my-extension\",\n\"version\": \"0.0.1\",\n\"main\": \"./out/extension.js\",\n\"l10n\": \"./l10n\",\n//...\n\"contributes\": {\n\"commands\": [\n{\n\"command\": \"my-extension.helloWorld\",\n// The key is surrounded by % characters\n\"title\": \"%my-extension.helloWorld.title%\"\n}\n]\n}\n}\n```  \nYour `package.nls.json`:  \n```json\n{\n// That same key from the package.json\n\"my-extension.helloWorld.title\": \"Hello World\"\n}\n```  \nYour `package.nls.de.json`:  \n```json\n{\n// That same key from the package.json\n\"my-extension.helloWorld.title\": \"Hallo Welt\"\n}\n```  \n#### Summary  \nThere's certainly a lot here to digest, but hopefully this gives you an idea of the direction we're taking with localization in VS Code extensions.  \nIf you're interested in a full example, you can check out the [l10n-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/l10n-sample).  \nIf you have questions or feedback, you can let us know in the following places:  \n* The [API proposal of vscode.l10n](https://github.com/microsoft/vscode/issues/158213#issuecomment-1241329160)\n* The [vscode-l10n](https://github.com/microsoft/vscode-l10n) repo (home of the `@vscode/l10n-dev` and `@vscode/l10n` modules)",
    "url": "https://code.visualstudio.com/updates/v1_72#_localization-as-part-of-the-api",
    "id": 3023
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Log output channel  \nThe `vscode.window.createOutputChannel` API now has a new `log` boolean option that can be used to create an output channel that is only used for logging.  \n```ts\n/**\n* Creates a new {@link LogOutputChannel log output channel} with the given name.\n*\n* @param name Human-readable string which will be used to represent the channel in the UI.\n* @param options Options for the log output channel.\n*/\nexport function createOutputChannel(name: string, options: { readonly log: true }): LogOutputChannel;\n```  \nThe `LogOutputChannel` supports following methods to log messages  \n```ts\ntrace(message: string, ...args: any[]): void;\ndebug(message: string, ...args: any[]): void;\ninfo(message: string, ...args: any[]): void;\nwarn(message: string, ...args: any[]): void;\nerror(error: string | Error, ...args: any[]): void;\n```  \nThe log output channels created by extensions are shown as separate entries in the Output dropdown view. Messages written to this log output channel are represented in the same format as the VS Code log messages.  \n![Log Output channel](images/1_72/log-output-channel.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_log-output-channel",
    "id": 3024
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n## Engineering  \n### Towards \"cross origin isolation\"  \nWe have made changes to enable cross origin isolation for VS Code desktop and [vscode.dev](https://vscode.dev). This will enable new powerful features like shared array buffers. Both VS Code itself and also extensions and webviews will benefit from this.  \nCross origin isolation is currently behind a feature flag and enabling it might have unwanted effects on extensions and webviews that load resources from the internet. You can read more about this in [Why you need \"cross-origin isolated\" for powerful features](https://web.dev/why-coop-coep). We would like to hear your feedback early.  \nTo try this:  \n* Run VS Code desktop with the `--enable-coi`-flag, for example code --enable-coi`.\n* Run [vscode.dev](https://vscode.dev) and append the `vscode-coi` query.  \nTo check that cross origin isolation is enabled use the Application-tab of Dev Tools or check the value of the [crossOriginIsolated](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated) global variable.  \n![Cross Origin Isolation enabled for web](images/1_72/vscode-coi.png)",
    "url": "https://code.visualstudio.com/updates/v1_72#_towards-cross-origin-isolation",
    "id": 3025
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Improved startup performance  \nWe reserved engineering time this milestone to improve the startup time it takes from launching VS Code to seeing a blinking cursor in the text editor. We always keep track of our performance numbers and noticed a slight degradation at the end of last milestone that we wanted to address.  \nThis was a team effort where everyone was contributing various changes throughout the source code. A couple of highlights are mentioned here.  \n#### No more sync fs calls  \nWe typically avoid the synchronous variants of the Node.js `fs` API knowing that these methods will stop script execution until the file system request has been resolved. However in a few cases, we were still relying on sync `fs` execution, especially around opening or restoring windows on startup. We were able to change all these calls to their async variants allowing other script to continue running while waiting for the file system request to return.  \n#### More bundling of main entry points  \nOur main bundles that make up the VS Code application are several megabytes in size, bundled as single file using [vscode-loader](https://github.com/microsoft/vscode-loader) and minified using [esbuild](https://esbuild.github.io/). However in some cases, we did not invest in bundling, specifically for:  \n* Our Node.js entry point in the Electron main process that is always getting called first.\n* Our bootstrap JavaScript files in the Electron renderer process for opening windows.  \nBundling in these two areas allows us to reduce the cost of looking up JavaScript files on startup to just one call for the Electron main process and one call for the window itself.  \n#### Pushing code to a later phase  \nThe best performance fix is to remove code and never run it, but that is obviously not a solution that is scalable. An alternative is to delay the execution of code to a later phase, for example after the text editor has opened. In this milestone, we again reviewed our various components and pushed some of them to a later phase to not block the critical startup path.  \n#### Document internal tools  \nTo analyze performance, we make heavy use of browser's Dev Tools and OS inspection tools. However, we also have some tools that are baked into VS Code. We documented the custom tools in [Perf Tools for VS Code Development](https://github.com/microsoft/vscode/wiki/Perf-Tools-for-VS-Code-Development) so that more people can benefit from them.",
    "url": "https://code.visualstudio.com/updates/v1_72#_improved-startup-performance",
    "id": 3026
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Faster PR checks  \nFor pull requests, we run automatic unit, integration, and smoke testing. All this happens in parallel but each step requires that our TypeScript sources are transpiled into JavaScript code. Originally, we used the TypeScript compiler for this. It emits JavaScript but also does type checking. The latter is time consuming and for testing not really needed. The overall time cost, by which testing was delayed, was around 5 minutes. We then switched to a custom transpile-only solution that uses the TypeScript compiler API. This was much faster but still took around 2 minutes.  \nIn this milestone, we switched to [SWC (Speedy Web Compiler)](https://swc.rs), which is even faster. It now takes around 12 seconds to transpile all our TypeScript sources. This is a huge improvement and allows us to get feedback on pull requests much faster.",
    "url": "https://code.visualstudio.com/updates/v1_72#_faster-pr-checks",
    "id": 3027
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [RedCMD (@RedCMD)](https://github.com/RedCMD)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_72#_issue-tracking",
    "id": 3028
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2022 Release (1.72)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart)\n* vscode.workspace.applyEdit should honour the files.refactoring.autosave config [PR #154079](https://github.com/microsoft/vscode/pull/154079)\n* Recognize windows-controls-overlay display mode in isStandalone() check [PR #160696](https://github.com/microsoft/vscode/pull/160696)\n* [@azatsarynnyy (Artem Zatsarynnyi)](https://github.com/azatsarynnyy): `server-main.js` should respect the `--port` argument [PR #161254](https://github.com/microsoft/vscode/pull/161254)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks): Add `onDidChangeShell` event to the API [PR #160900](https://github.com/microsoft/vscode/pull/160900)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Handled case with inline disabled breakpoint gets reactivated [PR #155403](https://github.com/microsoft/vscode/pull/155403)\n* [@bvschaik (Bianca van Schaik)](https://github.com/bvschaik): Fix wrong matches in multiline file search [PR #160665](https://github.com/microsoft/vscode/pull/160665)\n* [@CKeilbar (Chris Keilbart)](https://github.com/CKeilbar): Removed erroneous references to PREFIX environment variable [PR #160909](https://github.com/microsoft/vscode/pull/160909)\n* [@Colengms (Colen Garoutte-Carson)](https://github.com/Colengms): Enable auto-close of multi-line comments in cpp [PR #160357](https://github.com/microsoft/vscode/pull/160357)\n* [@Gerrit0 (Gerrit Birkeland)](https://github.com/Gerrit0)\n* Add jsonc registration for TypeDoc config [PR #157362](https://github.com/microsoft/vscode/pull/157362)\n* Add schema for typedoc.json to default jsonValidation [PR #157592](https://github.com/microsoft/vscode/pull/157592)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Allow filter widget some vertical movement (#158549) [PR #158583](https://github.com/microsoft/vscode/pull/158583)\n* Render ThemeIcons (codicons) in markdownEnumDescriptions (#160496) [PR #160498](https://github.com/microsoft/vscode/pull/160498)\n* Display warning banner when workspace lies within appRoot (#138815) [PR #161534](https://github.com/microsoft/vscode/pull/161534)\n* [@JamieMagee (Jamie Magee)](https://github.com/JamieMagee): Add `$schema` to `cgmanifest.json` [PR #159779](https://github.com/microsoft/vscode/pull/159779)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes find widget shall be shown per split terminal [PR #155361](https://github.com/microsoft/vscode/pull/155361)\n* Fixes broken image resources in getting started walkthrough [PR #159144](https://github.com/microsoft/vscode/pull/159144)\n* Fix error while executing contributed menu command in ports/item/context [PR #161295](https://github.com/microsoft/vscode/pull/161295)\n* [@juihanamshet1 (Jui Hanamshet)](https://github.com/juihanamshet1): adding brace completion for snippet inline completion item [PR #160567](https://github.com/microsoft/vscode/pull/160567)\n* [@Litrop](https://github.com/Litrop): Not add '[' to ipv6 host when '[' exists. [PR #157009](https://github.com/microsoft/vscode/pull/157009)\n* [@MachineMitch21 (Mitch Schutt)](https://github.com/MachineMitch21): Use hideFind() and showFind() when retainContextWhenHidden enabled [PR #161174](https://github.com/microsoft/vscode/pull/161174)\n* [@matthewjamesadam (Matt Adam)](https://github.com/matthewjamesadam): Left-align tooltips for :before decorators [PR #159226](https://github.com/microsoft/vscode/pull/159226)\n* [@MichaelChirico (Michael Chirico)](https://github.com/MichaelChirico): Better paired operators for R [PR #155882](https://github.com/microsoft/vscode/pull/155882)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains)\n* Polish command navigation for \"empty commands\" for non-partial terminal capabilities [PR #155551](https://github.com/microsoft/vscode/pull/155551)\n* Fix explorer.excludeGitIgnore exclusion bug [PR #160611](https://github.com/microsoft/vscode/pull/160611)\n* [@mxschmitt (Max Schmitt)](https://github.com/mxschmitt): chore: use custom debug build of Node.js on macOS e2e tests [PR #161308](https://github.com/microsoft/vscode/pull/161308)\n* [@najmiehsa (Najmieh)](https://github.com/najmiehsa): Edit for the slight ambiguity in wording when adding untrusted files to trusted workspace [PR #161168](https://github.com/microsoft/vscode/pull/161168)\n* [@Ninglo (Ninglo)](https://github.com/Ninglo): fix terminal contribution schema [PR #160863](https://github.com/microsoft/vscode/pull/160863)\n* [@OtherHorizon (Blip blop)](https://github.com/OtherHorizon): Bracket support for #if and #endif in cpp [PR #159997](https://github.com/microsoft/vscode/pull/159997)\n* [@pdamianik (Philip Damianik)](https://github.com/pdamianik): Use global ZDOTDIR environment variable [PR #159783](https://github.com/microsoft/vscode/pull/159783)\n* [@pingren (Ping)](https://github.com/pingren)\n* Expose data-vscode-theme-id attribute in webviews, fix #149661 [PR #154635](https://github.com/microsoft/vscode/pull/154635)\n* Write selection text to hidden textarea on macOS [PR #156717](https://github.com/microsoft/vscode/pull/156717)\n* [@pkmnct (George W. Walker)](https://github.com/pkmnct): Add abort command for git merge [PR #152526](https://github.com/microsoft/vscode/pull/152526)\n* [@susiwen8 (susiwen8)](https://github.com/susiwen8): feat: git fetch support fetch specified remote [PR #152197](https://github.com/microsoft/vscode/pull/152197)\n* [@tobil4sk](https://github.com/tobil4sk): Prioritize PATH executables over local directories in terminals [PR #158666](https://github.com/microsoft/vscode/pull/158666)\n* [@trond-snekvik (Trond Einar Snekvik)](https://github.com/trond-snekvik): Default to config icon for the property language [PR #158454](https://github.com/microsoft/vscode/pull/158454)\n* [@weartist (Han)](https://github.com/weartist): fix #158498 [PR #158657](https://github.com/microsoft/vscode/pull/158657)\n* [@Yoyokrazy (Michael Lively)](https://github.com/Yoyokrazy)\n* notebook image cleaning automation [PR #159212](https://github.com/microsoft/vscode/pull/159212)\n* fix in paste filename logic [PR #159715](https://github.com/microsoft/vscode/pull/159715)  \nContributions to `vscode-css-languageservice`:  \n* [@taroken6 (AudieTaro)](https://github.com/taroken6): selectors may start with combinators [PR #279](https://github.com/microsoft/vscode-css-languageservice/pull/279)\n* [@wkillerud (William Killerud)](https://github.com/wkillerud): fix: handle scoped packages with _index on package root  [PR #285](https://github.com/microsoft/vscode-css-languageservice/pull/285)  \nContributions to `vscode-pull-request-github`:  \n* [@Thomas1664](https://github.com/Thomas1664): Add button to always pull on incoming changes [PR #3896](https://github.com/microsoft/vscode-pull-request-github/pull/3896)  \nContributions to `debug-adapter-protocol`:  \n* [@KamasamaK](https://github.com/KamasamaK): Use consistent spelling [PR #332](https://github.com/microsoft/debug-adapter-protocol/pull/332)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_72#_pull-requests",
    "id": 3029
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Word wrapping in screen reader mode  \nWord wrapping had been disabled when running VS Code in [screen reader mode](https://code.visualstudio.com/docs/editor/accessibility#_screen-reader-mode) to prevent a degraded screen reader experience. This has been fixed and can be enabled via `editor.wordWrap`.",
    "url": "https://code.visualstudio.com/updates/v1_73#_word-wrapping-in-screen-reader-mode",
    "id": 3030
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Accessibility setting tag  \nAn `accessibility` tag is now available to improve discoverability of accessibility related settings.  \nThe **Preferences: Open Accessibility Settings** command opens the Settings editor with the `@tag:accessibility` filter.",
    "url": "https://code.visualstudio.com/updates/v1_73#_accessibility-setting-tag",
    "id": 3031
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Workbench  \n### Include and exclude folders from Search  \nWhen right-clicking a folder in the Search view's tree view of results, there are now two new options in the context menu.  \n* Selecting **Restrict Search to Folder** adds the selected folder path(s) to the **files to include** textbox. Adding a path to this textbox will limit search results to ones that fit the listed paths or patterns.  \n![Using Restrict Search to Folder](images/1_73/restrict-search-to-folder.gif)  \n_Theme: [GitHub Dark Dimmed](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Dark%20Dimmed))_  \n* Selecting **Exclude Folder from Search** adds the selected folder path(s) to the **files to exclude** textbox. Adding a path here will exclude any search results that fit the listed paths or patterns.  \n![Using Exclude Folder from Search](images/1_73/exclude-folder-from-search.gif)  \n_Theme: [GitHub Dark Dimmed](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Dark%20Dimmed))_",
    "url": "https://code.visualstudio.com/updates/v1_73#_include-and-exclude-folders-from-search",
    "id": 3032
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Command Center mode shortcuts  \nA new top section was added to the Command Center to make it easy to discover how to navigate to files, run commands, and more.  \nThis short list of modes also provides keybinding hints so that you can jump directly to your most-used modes (for example **Go to File**) without going through the Command Center.  \n<video src=\"images/1_73/command-center-home.mp4\" placeholder=\"images/1_73/command-center-home.mp4\" autoplay loop controls muted title=\"Command Center Home view\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nThe Command Center UI is not shown in the title bar by default but you can enable it via the **Window: Command Center** (`window.commandCenter`) setting or by right-clicking on the title bar and checking **Command Center**.",
    "url": "https://code.visualstudio.com/updates/v1_73#_command-center-mode-shortcuts",
    "id": 3033
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Settings editor Workspace Trust and policy indicators  \nSettings that are not applied due to a Restricted Mode workspace or due to being managed under an organization policy now use indicators to display their status. The user can read and write workspace settings even in a Restricted Mode workspace (which was always possible using the `settings.json` file), but the workspace setting value won't be considered when calculating the final value of the setting to use in a restricted workspace.  \nThere have also been a few adjustments to the default light theme, with clearer [codicon](https://github.com/microsoft/vscode-codicons) rendering in the indicators area and tighter focus borders.  \n![Restricted workspace settings demo showing keyboard navigation and toggling a checkbox even when the setting is restricted](images/1_73/settings-editor-indicators-keyboard.gif)",
    "url": "https://code.visualstudio.com/updates/v1_73#_settings-editor-workspace-trust-and-policy-indicators",
    "id": 3034
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Outline default collapse state  \nThere is a new setting `outline.collapseItems` that controls the default collapse state of items in the [Outline](https://code.visualstudio.com/docs/getstarted/userinterface#_outline-view) view. The default value is `false`, which means that Outline items are expanded by default. Set it to `true` to have Outline items collapsed by default. This setting can be set per language and also works for notebooks.",
    "url": "https://code.visualstudio.com/updates/v1_73#_outline-default-collapse-state",
    "id": 3035
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Rearrange the View menu  \nIn the View menu of the VS Code menubar, the final group was a growing list of editor actions. As a means to balance growth of the menu and functionality, we have moved the primarily appearance-related items under the **Appearance** submenu. The **Word Wrap** and **Sticky Scroll** options have been left in their original positions at the bottom of the menu.  \n![Updated View menu with Appearance submenu expanded](images/1_73/new-view-menu.png)  \n_Theme: [GitHub Light Default](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Light%20Default))_",
    "url": "https://code.visualstudio.com/updates/v1_73#_rearrange-the-view-menu",
    "id": 3036
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Rounded corners on input UI  \nText inputs, text areas, and dropdowns all now display rounded corners to match the same styling applied to buttons in a previous release.  \n![Text input with rounded corners in the Search input box](images/1_73/rounded-corners-inputs.png)",
    "url": "https://code.visualstudio.com/updates/v1_73#_rounded-corners-on-input-ui",
    "id": 3037
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Quick Pick list style updates  \nThe list styling used in the Quick Pick UI has been lightly refreshed with rounded corners and increased left/right margin.  \n<video src=\"images/1_73/quick-pick-list-styles.mp4\" placeholder=\"images/1_73/quick-pick-list-styles.mp4\" autoplay loop controls muted title=\"Quick Pick list styles\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_73#_quick-pick-list-style-updates",
    "id": 3038
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Updated codicons for list views  \nFlat list and tree list views now use more legible [codicons](https://github.com/microsoft/vscode-codicons) to represent the list type.  \n<video src=\"images/1_73/list-icon-styles.mp4\" placeholder=\"images/1_73/list-icon-styles.mp4\" autoplay loop controls muted title=\"Updated list view icons\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_73#_updated-codicons-for-list-views",
    "id": 3039
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Secondary Side Bar foreground color  \nThe Secondary Side Bar mimics the theming of the Primary Side Bar in general, but not all theme keys were being picked up properly. The Secondary Side Bar now properly uses the `\"sideBar.foreground\"` theme key.  \nBelow both the Primary Side Bar on the right with the Explorer and Secondary Side Bar on the left with the Outline view are using the same pink foreground color.  \n![Secondary Side Bar with a pink foreground color matching the Primary Side Bar](images/1_73/secondary-sidebar-foreground.png)  \n_Theme: [GitHub Light Default](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Light%20Default))_",
    "url": "https://code.visualstudio.com/updates/v1_73#_secondary-side-bar-foreground-color",
    "id": 3040
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### No more 'Too many folding ranges' notifications  \nFor performance reasons, we limit the number of folding ranges shown in the editor to 5000. The limit can be configured by the setting `editor.foldingMaximumRegions`. When the limit is exceeded, VS Code used to show a notification. Now the language status hover in the Status bar shows that information.  \n![Folding limit warning in the language status](images/1_73/folding-limit-warning.png)",
    "url": "https://code.visualstudio.com/updates/v1_73#_no-more-'too-many-folding-ranges'-notifications",
    "id": 3041
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Default folding provider  \nNormally, when there are multiple folding providers active for a language, VS Core tries to merge the results. If there are conflicting ranges, some ranges are discarded. In addition, not all folding providers can be combined with others providers.  \nThe new `editor.defaultFoldingProvider` setting allows you to select the folding provider to use. The name of the provider is the extension ID (`{publisher}.{extension}`) of the extension that contributes it.  \nThe following example sets the folding provider from the (hypothetical) extension `aeschli.better-folding` to be the default for JavaScript.  \n```json\n\"[javascript]\": {\n\"editor.defaultFoldingRangeProvider\": \"aeschli.better-folding\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_73#_default-folding-provider",
    "id": 3042
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Setting log level per output channel  \nYou can now set log level per log output channel using the command **Developer: Set Log Level...**. This is useful when you want to see more logs only from a specific log output channel. The command will first show the list of output channels and after selecting one, you'll be prompted to set the log level.  \n![Developer: Set Log Level command dropdown list of output channels](images/1_73/log-level-output-channel.png)  \nYou can also set log level per extension from the command line. This is useful when you want to see more logs from a specific extension. For example, the following script allows you to start VS Code with default log level set to `debug` for the log output channels from the Git extension.  \n```bash\ncode --log vscode.git:debug\n```",
    "url": "https://code.visualstudio.com/updates/v1_73#_setting-log-level-per-output-channel",
    "id": 3043
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### New list.collapseAllToFocus tree view command  \nA new command `list.collapseAllToFocus` lets you recursively collapse the currently focused tree item. This is useful when you want to collapse all children of a tree item that isn't the root. There isn't a default keybinding for the command but you can add your own keyboard shortcut via the Keyboard Shortcut editor (`kb(workbench.action.openGlobalKeybindings)`).",
    "url": "https://code.visualstudio.com/updates/v1_73#_new-list.collapsealltofocus-tree-view-command",
    "id": 3044
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Merge Editor  \nThis milestone we continued polishing the merge editor and this update contains several bug fixes and some new features.  \n#### Accepting both sides appends conflicts  \nWith this release, both **Accept Incoming** and **Accept Current** can always be selected. When both options are taken, the merge editor appends the corresponding changed lines.  \nIn the short video below, `RelativePattern` is imported twice as both lines are accepted:  \n![A screen recording of how both sides are accepted](images/1_73/merge-accept-both.gif)  \nWhen the conflict can be resolved without conflicts on a character level, the option **Accept Combination** is shown, and can be used to automatically resolve the conflict.  \nIn the video below, both symbols are imported into the same import statement:  \n![A screen recording of how a combination is accepted](images/1_73/merge-accept-combination.gif)  \n#### Diff decorations against base  \nWhen the base view is opened, a diff is shown between the currently focused side and base. This diff view can be used to better understand the changes in **Incoming** and **Current**.  \n![A screen recording of how a diff between incoming, current, and base is shown](images/1_73/compare-with-base.gif)  \n#### Diff algorithm improvements  \nThe default diff algorithm for the merge editor has been changed. The new diff algorithm is optimized for merge scenarios. In common cases, the number of hunks are minimized and insertion positions are optimized. In case the new algorithm causes problems, the setting `\"mergeEditor.diffAlgorithm\": \"smart\"` can be used to switch back to the previous algorithm (default is now `experimental`).  \nThe following screenshots demonstrate the improvements for insertions. Note that both diffs are correct but the new behavior more clearly highlights the inserted text:  \nOld behavior:  \n![The old behavior highlights across both the new and existing text](images/1_73/diff-algorithm-before.png)  \nNew behavior:  \n![The new behavior highlights just the new text](images/1_73/diff-algorithm-after.png)  \nThe new diff algorithm is currently only enabled by default in the merge editor. You can set `\"diffEditor.diffAlgorithm\": \"experimental\"` if you'd like the regular diff editor to also use the new diff algorithm.  \n#### Navigate through conflicts  \nYou can now click the conflict counter to jump to the next unhandled conflict:  \n![Clicking the conflict counter jumps to the next conflict](images/1_73/merge-conflict-counter.gif)",
    "url": "https://code.visualstudio.com/updates/v1_73#_merge-editor",
    "id": 3045
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Languages  \n### Markdown automatic link updates on file rename / move  \nTired of accidentally breaking links or images in your Markdown when you move or rename files? Try the new `markdown.updateLinksOnFileMove.enabled` setting!  \nWith this new setting enabled, VS Code will automatically update links and images in Markdown when files are moved or renamed in the VS Code Explorer:  \n![Markdown file links are updated on file move and rename](images/1_73/md-link-update.gif)  \nYou can control the types of files affected using `markdown.updateLinksOnFileMove.include`. By default, it is enabled for all Markdown files and common image file formats.",
    "url": "https://code.visualstudio.com/updates/v1_73#_markdown-automatic-link-updates-on-file-rename-/-move",
    "id": 3046
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Markdown insert link commands  \nThe new  **Markdown: Insert Link to File in Workspace** and **Markdown: Insert Image from Workspace** commands let you quickly insert links and images to your Markdown using a file picker:  \n<video src=\"images/1_73/md-insert-image.mp4\" autoplay loop controls muted title=\"Markdown insert link commands\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nRemember that these commands are just one option for adding links and images to your Markdown files. You can also use [Markdown path completions](https://code.visualstudio.com/docs/languages/markdown#_path-completions) for this or even [drag and drop files from VS Code's Explorer](https://code.visualstudio.com/docs/languages/markdown#_drag-and-drop-to-insert-links-and-images) to insert links or images.",
    "url": "https://code.visualstudio.com/updates/v1_73#_markdown-insert-link-commands",
    "id": 3047
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Markdown unused and duplicate link definition diagnostics  \nOur built-in Markdown validation can now alert you to unused or duplicated [link definitions](https://daringfireball.net/projects/markdown/syntax#link). You can enable this feature with `markdown.validate.enabled`:  \n![An warning about a duplicate link definition](images/1_73/md-duplicate-link-def.png)  \nIf you want finer grained control of these errors, you can use these `markdown.validate` settings to either disable these errors (`ignore`) or change their severity (`warning`, `error`):  \n* `markdown.validate.duplicateLinkDefinitions.enabled`\n* `markdown.validate.unusedLinkDefinitions.enabled`  \nThere is also a Quick Fix to remove duplicated or unused link definitions.",
    "url": "https://code.visualstudio.com/updates/v1_73#_markdown-unused-and-duplicate-link-definition-diagnostics",
    "id": 3048
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Markdown link occurrence highlighting  \nLink occurrence highlighting in Markdown shows you all the places in the current document where the link under the cursor is being used:  \n![Highlighting all occurrences of a link](images/1_73/md-link-highlight.png)  \nNotice how with the cursor on the the first link in the document, all links to `First Header` as well as the header itself are highlighted in the document and in the gutter to the right of the document.  \nThis feature is off by default. To enable it, turn on the `markdown.occurrencesHighlight.enabled` setting.",
    "url": "https://code.visualstudio.com/updates/v1_73#_markdown-link-occurrence-highlighting",
    "id": 3049
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### New Razor syntax highlighting grammar  \nVS Code has a new, better-maintained, Razor grammar for syntax highlighting of [Razor](https://learn.microsoft.com/aspnet/core/razor-pages) files. The new grammar is actively maintained and fixes issues that existed in the old grammar.",
    "url": "https://code.visualstudio.com/updates/v1_73#_new-razor-syntax-highlighting-grammar",
    "id": 3050
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## VS Code for the Web  \n### Improved branch creation and protection workflows  \nWhen you are in a GitHub or Azure Repos repository on VS Code for the Web, committing to a protected branch now notifies you that the current branch is protected, and prompts you to create a new branch.  \nThis flow will also honor the following settings:  \n* `git.branchPrefix` allows you to prepopulate the branch name quick input with a configured prefix.\n* `\"git.branchProtectionPrompt\": \"alwaysCommitToNewBranch\"` allows you to skip the prompt when you attempt to commit to a protected branch and go straight to the quick input for creating a new branch.  \nIn addition, when you create a new branch, you can bypass the prompt about whether to switch to the newly created branch by configuring `\"remoteHub.switchToCreatedBranch\": \"always\"`.  \nAll of the above also applies when using the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) or [Azure Repos](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories) extensions on VS Code for the desktop.",
    "url": "https://code.visualstudio.com/updates/v1_73#_improved-branch-creation-and-protection-workflows",
    "id": 3051
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Localization improvements in the web  \nA few months ago we started working on localization for VS Code for the Web. Up until now, VS Code core and extensions with statically declared strings in their extension manifests were able to be localized. This iteration, we've completed the final piece of the puzzle: strings in extension code. This was checked off due to the finalization of the localization API that we [proposed last month](https://code.visualstudio.com/updates/v1_72#_localization-as-part-of-the-api).  \nBe on the lookout for more of VS Code becoming localized as we continue to adopt this new API in all of our extensions. If you're an extension author, you can learn more about the new API in the [vscode-l10n repository](https://github.com/microsoft/vscode-l10n).",
    "url": "https://code.visualstudio.com/updates/v1_73#_localization-improvements-in-the-web",
    "id": 3052
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Contributions to extensions  \n### Python  \n#### Migration to isort extension  \nIn our May 2022 [release](https://devblogs.microsoft.com/python/python-in-visual-studio-code-may-2022-release/), we announced a new [isort](https://marketplace.visualstudio.com/items?itemName=ms-python.isort) extension that works alongside the Python extension to sort imports. For example, when you open a file and the imports do not follow isort standards, it will display an error diagnostic and provide a Code Action to fix the import order. In this release, we are migrating to use the standalone isort extension instead of the isort support built into the Python extension by automatically installing it alongside the Python extension.  \n#### Auto imports turned off by default with Pylance  \nSince auto imports were first implemented in Pylance, we've been getting a lot of feedback about how confusing and, sometimes, annoying it can be to have an import automatically added to a file when, for example, suggestions are accepted by accident. Starting this release, packages will no longer be imported automatically by default when using Pylance. If you'd like to re-enable auto imports for your Python projects, you can do so by setting `\"python.analysis.autoImportCompletions\": true`.  \n#### Pylint and Flake8 extensions recommendation  \nIn our [previous](https://devblogs.microsoft.com/python/python-in-visual-studio-code-april-2022-release/#pylint-extension) [releases](https://devblogs.microsoft.com/python/pvsc-sept-2022/#flake8-extension), we announced new [Pylint](https://marketplace.visualstudio.com/items?itemName=ms-python.pylint) and [Flake8](https://marketplace.visualstudio.com/items?itemName=ms-python.flake8) extensions that work in tandem with the Python extension through the [Language Server Protocol](https://microsoft.github.io/language-server-protocol) (LSP) to provide linting. In this release, we display a notification if you are still using the Pylint and Flake8 features built into the Python extension, prompting you to install these new extensions.  \n![A notification recommending the Pylint extension with a button to install it](images/1_73/Nov2022-PylintPrompt.png)",
    "url": "https://code.visualstudio.com/updates/v1_73#_python",
    "id": 3053
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Remote Development  \nThe [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment. Highlights of this release include:  \n* Dev Container [Templates](https://containers.dev/templates) - Quickly create a Dev Container based on an existing template.\n* Dev Container [Features](https://containers.dev/features) - Add capabilities to a Dev Container by including prepackaged features (or [create your own](https://github.com/devcontainers/feature-template)!)\n* Create new Dev Container without a starting folder.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_73.md).",
    "url": "https://code.visualstudio.com/updates/v1_73#_remote-development",
    "id": 3054
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### GitHub Pull Requests and Issues  \nWork continues on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Check out the [changelog for the 0.54.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0540) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_73#_github-pull-requests-and-issues",
    "id": 3055
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Preview features  \n### TypeScript 4.9  \nThis update includes support for the upcoming TypeScript 4.9 release. See the [TypeScript 4.9 iteration plan](https://github.com/microsoft/TypeScript/issues/50457) for more details on what the TypeScript team is currently working on. Some editor tooling highlights:  \n* A new **Sort Imports** command that sorts imports without removing unused ones.\n* Running **Go to Definition** on a return statement [now jumps to the function declaration](https://github.com/microsoft/TypeScript/issues/51222).\n* Switch to a [new default file watcher](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9-beta/#file-watching-now-uses-file-system-events), which should perform better.  \nTo start using the TypeScript 4.9 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_73#_typescript-4.9",
    "id": 3056
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Settings Profiles  \nWe have been working the last couple of months to support **Settings Profiles** in VS Code, which is one of the most popular asks from the community. This feature is available for preview via the `workbench.experimental.settingsProfiles.enabled` setting. Try it out and give us your feedback by creating issues in the [vscode repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #116740](https://github.com/microsoft/vscode/issues/116740).  \n#### Showing Synced Profiles Data  \nYou can now see the data that is synced for each profile in the **Sync Activity (Remote)** view. This is useful to understand what data is synced for each profile.  \n![Sync Activity (Remote) view showing history of Profiles](images/1_73/synced-profiles.png)  \n**Note:** This feature is currently available only in the [Insiders](https://code.visualstudio.com/insiders) release of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_73#_settings-profiles",
    "id": 3057
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Extension authoring  \n### Provide metadata for workspace edits  \nThe API to apply a workspace edit now lets extensions provide metadata, for example for marking the edit as being a refactoring. This extra metadata will be honored by the editor and Auto Save after refactoring (setting: `files.refactoring.autoSave`).",
    "url": "https://code.visualstudio.com/updates/v1_73#_provide-metadata-for-workspace-edits",
    "id": 3058
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Restrict which commands can be run by MarkdownString and in webviews  \n[Command links](https://code.visualstudio.com/api/extension-guides/command#command-uris) in `MarkdownString` are a useful way to create custom interactions in VS Code's hovers message or IntelliSense details. Webviews can also use command links to trigger VS Code commands directly from the webview. However, command links can also be dangerous as they can be used to execute any command, including many commands that were not designed with security in mind. For this reason, command links are disabled by default and must explicitly be enabled by extensions.  \nWhile this all-or-nothing approach works, we've also found it places too much of the security burden on extension authors. Extensions that need to use command links must validate that only safe commands are included in the content they render. This is both easy to forget and easy to get wrong.  \nTo improve this, we're introducing new APIs for command link enablement that allow extensions to enable just a trusted subset of commands.  \nFor `MarkdownString`, the `isTrusted` property now takes an allowlist of commands that can be executed (all other commands will be blocked):  \n```ts\nconst md = new vscode.MarkdownString(`A command link: [Open setting](command:workbench.action.openSettings)`);\n\n// Set trusted commands instead of enabling all commands\nmd.isTrusted = { enabledCommands: ['workbench.action.openSettings'] };\n```  \nFor webviews, the `WebviewOptions.enableCommandUris` property can now be a list of enabled commands instead of a simple true/false:  \n```ts\nconst options: vscode.WebviewOptions = { enableCommandUris: ['workbench.action.openSettings'] };\n```  \nWe highly encourage that all extension that use command links adopt this new, more restrictive API to improve security.",
    "url": "https://code.visualstudio.com/updates/v1_73#_restrict-which-commands-can-be-run-by-markdownstring-and-in-webviews",
    "id": 3059
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Consistent origin for webviews and webview views  \nTo improve the loading time of [webviews](https://code.visualstudio.com/api/extension-guides/webview), we now try to maintain a consistent origin for all instances of a given type of webview. This has two main benefits:  \n* Webviews can better take advantage of caching. This means local resources should load faster.  \n* Webviews can use local storage and other web APIs that are partitioned per origin.  \nKeep in mind that all instances of a webview will now run on the same origin so if they are using an API such as local storage, be sure to partition any data/state that is document specific per resource. For example, `localStorage.setItem('scrollPosition', 100)` will set `scrollPosition` to 100 across all webview instances. If you want to set the scroll position for individual resources, you also need to include the resource ID in the key: `localStorage.setItem(myDocUri, JSON.stringify({scrollPosition: 100 }))`.  \nYou should also never use localStorage or similar APIs to store critical data, such a document contents. While VS Code makes a best effort to maintain a consistent origin for webviews, we cannot guarantee the origin will not change.  \nIn many cases, you should use the [webview state APIs](https://code.visualstudio.com/api/extension-guides/webview#getstate-and-setstate) as these APIs handle both of the above problems for you.  \nThe origin is randomly generated for each extension and type of webview. The same origin is used across all instances of the webview.  \nCurrently both normal [webviews](https://code.visualstudio.com/api/extension-guides/webview) and [webview views](https://github.com/microsoft/vscode-extension-samples/tree/main/webview-view-sample) try to maintain a consistent origin. We plan on adopting this for custom editors and notebook webviews next iteration.",
    "url": "https://code.visualstudio.com/updates/v1_73#_consistent-origin-for-webviews-and-webview-views",
    "id": 3060
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Debug Adapter Protocol  \n### New 'startDebugging' reverse request  \nToday VS Code supports multiple concurrent debug sessions but the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol) (DAP) covers only a single session. That means that creating new debug sessions programmatically is not part of DAP and can only be done outside of DAP or the debug adapter, typically in the debug extension that contains the debug adapter. As a consequence, multi-session functionality such as automatically debugging child-processes is not easily available for non-VS Code DAP clients, because they typically only use the debug adapter and not the VS Code specific debug extension.  \nTo improve this situation, we have added a new reverse request `startDebugging` to DAP that allows extensions to create a new debug session (of the same type as the caller) from **within** the debug adapter. A client capability `supportsStartDebuggingRequest` indicates to a debug adapter that the client supports `startDebugging`.  \nIn the October release, VS Code has implemented `startDebugging`.",
    "url": "https://code.visualstudio.com/updates/v1_73#_new-'startdebugging'-reverse-request",
    "id": 3061
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Notebook renderers can access all output items  \n[Custom notebook renderers](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer) can now access all MIME data of the output item it is rendering. If the renderer determines that it cannot render the main output item properly, this API proposal lets it fall back to render one of the other MIME types instead.  \nThe entrypoint of this proposal is a new `OutputItem._allOutputItems` property. The property is an ordered list of all MIME types that the current output item contains. Each item in the list has the shape `{ mime, getItem() }`. `mime` is the MIME type such as `text/html` or `image/png`, while the `getItem()` function returns a promise to an `OutputItem` for that MIME type.  \nHere's how a renderer can use this new API:  \n```ts\nasync function renderOutputItem(outputInfo, element, signal){\nconst didRender = tryRenderMainItem(outputInfo, element);\n\nif (!didRender) {\n// Fallback to render `text/html`\nconst htmlItem = await outputInfo._allOutputItems.find(item => item.mime === 'text/html')?.getItem();\nif (htmlItem) {\n// Here we can either render the 'text/html' item ourselves\n// or delegate to another renderer.\nconst renderer = await ctx.getRenderer('vscode.builtin-renderer');\nif (renderer) {\nreturn renderer.renderOutputItem(htmlItem, element, signal);\n}\n}\n}\n}\n```  \nGive this proposal a try and let us know what you think!",
    "url": "https://code.visualstudio.com/updates/v1_73#_notebook-renderers-can-access-all-output-items",
    "id": 3062
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Extension telemetry API  \nTo further drive telemetry best practices and enhance the telemetry features extensions have offered to them, this iteration introduces the proposed `telemetryLogger` API. This API allows extension to supply a `TelemetryAppender`, which acts as the core sending logic (implemented utilizing [Application Insights](https://learn.microsoft.com/azure/azure-monitor/app/create-new-resource) or another data recording service). This `TelemetryAppender` is then used to instantiate a `TelemetryLogger`, which is the class that you should log telemetry through.  \nThe `TelemetryLogger` provides a shared output channel to see sent telemetry events, proper telemetry setting checks, and personally identifiable information cleaning. Additionally, any errors thrown by utilizing the VS Code API will be logged to your appender for better error diagnostics.  \nThere is a simple example in the [telemetry sample](https://github.com/microsoft/vscode-extension-samples/blob/d7dd9da34a9849396719408716d468512b5e5abb/telemetry-sample/src/extension.ts) and you can provide feedback in [issue #160090](https://github.com/microsoft/vscode/issues/160090).",
    "url": "https://code.visualstudio.com/updates/v1_73#_extension-telemetry-api",
    "id": 3063
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Log output channel  \nIn the last milestone, we introduced the `LogOutputChannel` API proposal for creating an output channel that is only used for logging. This iteration, we added `logLevel` property and `onDidChangeLogLevel` event to it. The `logLevel` property represents the current log level of the output channel and the `onDidChangeLogLevel` event is fired when the log level changes for the output channel.  \n```ts\n/**\n* A channel for containing log output.\n*/\nexport interface LogOutputChannel extends OutputChannel {\n\n/**\n* The current log level of the channel.\n* Defaults to application {@link env.logLevel application log level}.\n*/\nreadonly logLevel: LogLevel;\n\n/**\n* An {@link Event} which fires when the log level of the channel changes.\n*/\nreadonly onDidChangeLogLevel: Event<LogLevel>;\n...\n...\n}\n```  \nWe also added `logLevel` property and `onDidChangeLogLevel` event to `env` namespace to represent the current log level of the application and the event is fired when the log level changes for the application.  \n```ts\nexport namespace env {\n\n/**\n* The current log level of the application.\n*/\nexport const logLevel: LogLevel;\n\n/**\n* An {@link Event} which fires when the log level of the application changes.\n*/\nexport const onDidChangeLogLevel: Event<LogLevel>;\n\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_73#_log-output-channel",
    "id": 3064
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n## Engineering  \n### Optimizing for input latency  \nAs VS Code has grown in size, so has the amount of activity when a keystroke is pressed. This iteration we stepped back and did a thorough investigation into what exactly happens when you type in the editor and what can we defer until after the keystroke is rendered on screen. The main outcomes of this exploration were:  \n* Several changes were made to defer as much work as possible until after a keystroke in the editor has been rendered on screen. A rough estimate of the impact of this is a ~15% reduction in input latency when IntelliSense is not showing, and an even higher reduction when IntelliSense is being refiltered.\n* We now have more refined techniques for manually measuring input latency and optimizing at this sub-millisecond\\* level.\n* There is a work-in-progress change that will help us track and report samples of input latency. This will give us some concrete numbers to maintain and improve against.  \nThis is just the beginning of this effort and we have more changes that should land next release.  \n\\* _These numbers are very dependent upon the hardware that is used to test. A 0.5-ms improvement on powerful hardware may end up being 2ms on more average hardware._",
    "url": "https://code.visualstudio.com/updates/v1_73#_optimizing-for-input-latency",
    "id": 3065
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Automatic renderer profiling  \nThe renderer-process of VS Code is responsible for its UI; it ensures a blinking cursor, the ability to type, and to save. Any performance issue in the renderer-process will be visible to the user and result in a bad experience. To help us identify and fix performance issues in the renderer-process, we have added a new setting `application.experimental.rendererProfiling` that can be used to automatically profile the renderer-process. The setting can be set to `on` to enable profiling, and `off` to disable profiling. When enabled, the renderer-process will be profiled for a few seconds whenever it \"appears as pressured\", and the profile is then analyzed, anonymized, and sent off for inspection. You can use the window log to follow along with the profiling process.  \nNote that this feature is currently off by default as we still learn and tune things. Please try it out and let us know what you think.",
    "url": "https://code.visualstudio.com/updates/v1_73#_automatic-renderer-profiling",
    "id": 3066
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Windows 11 Context menu  \nIn this release, VS Code setup is adding an **Open with Code - Insiders** context menu entry to [Windows 11 context menu](https://blogs.windows.com/windowsdeveloper/2021/07/19/extending-the-context-menu-and-share-dialog-in-windows-11/) for Insiders by default. For users, who had previously opted into the context menu when installing the Insiders, the entry that would show up in the old style menu `Shift + F10` will now be replaced with the newer entry when updating to the latest Insiders. For others, you would need to reinstall Insiders and opt-in to enable this menu entry in the setup wizard. Due to issues we encountered during development of the menu entry, we plan to limit this feature to Insiders for a couple of milestones to gain confidence before we push it out to the Stable release for all Windows 11 users.  \n![VS Code Install dialog with option to add Open with Code - Insiders action](images/1_73/windows11_insiders_context_menu_setup.png)  \nThe **Open with Code Insiders** action will then be available in Windows File Explorer folder and file context menus.  \n![Windows 11 folder context menu](images/1_73/windows11_insiders_context_menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_73#_windows-11-context-menu",
    "id": 3067
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2022 Release (1.73)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)\n* [RedCMD (@RedCMD)](https://github.com/RedCMD)  \nContributions to `vscode`:  \n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch): [typescript-language-features] Add `removeUnusedImports` command [PR #161654](https://github.com/microsoft/vscode/pull/161654)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks): \ud83d\udc1b Fix un-awaited call to show CWD picker [PR #163220](https://github.com/microsoft/vscode/pull/163220)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Auto detect indentation when pasting on an empty file [PR #156282](https://github.com/microsoft/vscode/pull/156282)\n* [@Brikaa (Omar Brikaa)](https://github.com/Brikaa): Add keyboard shortcuts for scrolling horizontally [PR #162992](https://github.com/microsoft/vscode/pull/162992)\n* [@CyrilOtheninGirard (Cyril OG)](https://github.com/CyrilOtheninGirard): Bash shell integration -- exit code is not restored when PROMPT_COMMAND is an array [PR #158091](https://github.com/microsoft/vscode/pull/158091)\n* [@daiyam (Baptiste Augrain)](https://github.com/daiyam): feat: select the folding provider to use [PR #157434](https://github.com/microsoft/vscode/pull/157434)\n* [@dsanders11 (David Sanders)](https://github.com/dsanders11)\n* Fix references to non-existent `runTests` API [PR #162543](https://github.com/microsoft/vscode/pull/162543)\n* Scroll webview to top if unmatched fragment is #top [PR #164070](https://github.com/microsoft/vscode/pull/164070)\n* [@dtivel (Damon Tivel)](https://github.com/dtivel): Add extension signature verification service [PR #162285](https://github.com/microsoft/vscode/pull/162285)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Add `outline.collapseItems` and fix outlines collapsing unexpectedly (#53262) [PR #158650](https://github.com/microsoft/vscode/pull/158650)\n* Reference correct setting in property description (#162663) [PR #162665](https://github.com/microsoft/vscode/pull/162665)\n* [@hughlilly (Hugh Lilly)](https://github.com/hughlilly): Fix comma splices in descriptions in `src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts` [PR #164401](https://github.com/microsoft/vscode/pull/164401)\n* [@jacekkopecky (Jacek Kopeck\u00fd)](https://github.com/jacekkopecky)\n* Check for unsaved editors before asking to save [PR #159318](https://github.com/microsoft/vscode/pull/159318)\n* Address misplaced cursor [PR #159325](https://github.com/microsoft/vscode/pull/159325)\n* [@jakebailey (Jake Bailey)](https://github.com/jakebailey)\n* Don't depend on typescript protocol.d.ts [PR #163365](https://github.com/microsoft/vscode/pull/163365)\n* Remove forgotten reference to typescript/lib/protocol [PR #163585](https://github.com/microsoft/vscode/pull/163585)\n* Ensure 'undefined' does not make it into tsserver.web.js [PR #164064](https://github.com/microsoft/vscode/pull/164064)\n* [@jannisspeer](https://github.com/jannisspeer): Remove Snakefile from being classified as Python [PR #162749](https://github.com/microsoft/vscode/pull/162749)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes detaching a terminal editor doesn't fire vscode.window.onDidCloseTerminal event [PR #154546](https://github.com/microsoft/vscode/pull/154546)\n* Fixes simple browser webview is not reused if restored [PR #163389](https://github.com/microsoft/vscode/pull/163389)\n* Fix disable privileged ports for OSX [PR #163890](https://github.com/microsoft/vscode/pull/163890)\n* Fixes newline in tree item label makes label unreadable  [PR #163995](https://github.com/microsoft/vscode/pull/163995)\n* Fixes extension Disable button does not have border radius on the right side [PR #164109](https://github.com/microsoft/vscode/pull/164109)\n* [@joshaber (Josh Abernathy)](https://github.com/joshaber): Add open preview enabled context, part 2 [PR #163682](https://github.com/microsoft/vscode/pull/163682)\n* [@jsjoeio (Joe Previte)](https://github.com/jsjoeio): fix: preserve process.execArgv [PR #161853](https://github.com/microsoft/vscode/pull/161853)\n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb): Update column names in 'Feature Contributions' [PR #162844](https://github.com/microsoft/vscode/pull/162844)\n* [@marrej (Marcus Revaj)](https://github.com/marrej): # Provide correct response to applyEdit() [PR #162430](https://github.com/microsoft/vscode/pull/162430)\n* [@mrienstra (Michael Rienstra)](https://github.com/mrienstra): Enforce yarn version [PR #162610](https://github.com/microsoft/vscode/pull/162610)\n* [@mustard-mh (Huiwen)](https://github.com/mustard-mh): Fix #161565 [PR #161567](https://github.com/microsoft/vscode/pull/161567)\n* [@nikita-r (Nikita R.)](https://github.com/nikita-r): Modify \"*WordPart*\" family of commands to respect kebab-case (resolves #158667) [PR #158672](https://github.com/microsoft/vscode/pull/158672)\n* [@pingren (Ping)](https://github.com/pingren): Enable user-select for monaco editor on macOS [PR #156755](https://github.com/microsoft/vscode/pull/156755)\n* [@qingpeng9802 (Qingpeng Li)](https://github.com/qingpeng9802): Resolve `es5ClassCompat` performance issue [PR #155390](https://github.com/microsoft/vscode/pull/155390)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t)\n* Allow extension authors to set valueSelection in a QuickPick/InputBox [PR #157022](https://github.com/microsoft/vscode/pull/157022)\n* Filter testing tree when test items are updated by extensions [PR #162169](https://github.com/microsoft/vscode/pull/162169)\n* [@sean-mcmanus (Sean McManus)](https://github.com/sean-mcmanus): Update language-configuration.json [PR #163182](https://github.com/microsoft/vscode/pull/163182)\n* [@stephen-ullom (Stephen Ullom)](https://github.com/stephen-ullom): Fix traffic lights position for command center [PR #164246](https://github.com/microsoft/vscode/pull/164246)\n* [@StephenChips (Dongcai Huang)](https://github.com/StephenChips): Fix FreePortOutputRegex [PR #162323](https://github.com/microsoft/vscode/pull/162323)\n* [@unm4ever (BK0717)](https://github.com/unm4ever): Add __vsc_prior_prompt2 [PR #156140](https://github.com/microsoft/vscode/pull/156140)\n* [@w1redch4d (Swapnadeep Som)](https://github.com/w1redch4d): fix problems with html style comments in embedded code [PR #160981](https://github.com/microsoft/vscode/pull/160981)\n* [@yamachig (yamachi)](https://github.com/yamachig): Fix auto-surround closes with an open character [PR #147187](https://github.com/microsoft/vscode/pull/147187)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): fix: Close #164414, correct transparent transmission folder-uri [PR #164415](https://github.com/microsoft/vscode/pull/164415)  \nContributions to `vscode-pull-request-github`:  \n* [@hoontae24](https://github.com/hoontae24): feat: Add origin of upstream for github enterprise on copy head link [PR #4028](https://github.com/microsoft/vscode-pull-request-github/pull/4028)\n* [@Thomas1664](https://github.com/Thomas1664): UI fixes for checks section [PR #4059](https://github.com/microsoft/vscode-pull-request-github/pull/4059)\n* [@yin1999 (A1lo)](https://github.com/yin1999): fix: use ssh url for ssh protocol upstream [PR #3853](https://github.com/microsoft/vscode-pull-request-github/pull/3853)  \nContributions to `vscode-dev-chrome-launcher`:  \n* [@mirdaki](https://github.com/mirdaki): Add option to set stable or insiders build [PR #20](https://github.com/microsoft/vscode-dev-chrome-launcher/pull/20)\n* [@infinitepower18](https://github.com/infinitepower18) Add description and fix blank icon in extension settings [PR #18](https://github.com/microsoft/vscode-dev-chrome-launcher/pull/18)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_73#_issue-tracking",
    "id": 3068
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Audio cues for diff review mode  \nIn a diff editor, when **Go to Next Difference** is triggered, a specific audio cue will play to indicate whether the cursor is on an inserted or deleted line.  \nIf you are curious about the available audio cues, you can hear them via the **Help: List Audio Cues** dropdown.  \n![List Audio Cues dropdown](images/1_74/audio-cues-dropdown.png)",
    "url": "https://code.visualstudio.com/updates/v1_74#_audio-cues-for-diff-review-mode",
    "id": 3069
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Keyboard-navigable Settings editor indicators, hovers, and links  \nThe indicators, hovers, and links in the Settings editor are now navigable by keyboard. The styling of some of the links have also been adjusted for better consistency across the Settings editor.  \nSettings editor indicator hovers now behave much better when it comes to tabstops and maintaining keyboard focus. This improved behavior is still experimental, and is currently only enabled for the Settings editor indicator hovers, rather than for all hovers across VS Code.  \n![Navigating settings and a Modified elsewhere indicator in the Settings editor using the keyboard](images/1_74/settings-indicator-tabbing.gif)  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_74#_keyboard-navigable-settings-editor-indicators,-hovers,-and-links",
    "id": 3070
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Workbench  \n### Custom Explorer autoreveal logic  \nThe highly upvoted [issue #87956](https://github.com/microsoft/vscode/issues/87956) (\"Allow to set explorer.autoReveal per specific folder\") has been fixed by the introduction of a new setting `explorer.autoRevealExclude`. This setting lets you configure which files get autorevealed in the Explorer if the autorevealing is enabled (`explorer.autoReveal`, default `true`). The `autoRevealExclude` setting uses [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and similar to `files.exclude`, also supports sibling matching via when clauses.  \nThe default value excludes node and bower modules:  \n```json\n{\n\"explorer.autoRevealExclude\": {\n\"**/node_modules\": true,\n\"**/bower_components\": true\n},\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_74#_custom-explorer-autoreveal-logic",
    "id": 3071
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Hide badges per view container  \nSimilar to how you were able to hide view containers by right-clicking the view container, you can now hide the badge on the container (displayed in the Activity bar, Panel, and Secondary Side bar). Badges often display a number, icon, or progress indicator for a specific view container, for example, the number of pending changes for the Source Control view.  \n![A context menu is triggered on the Source Control view showing a Hide Badge entry. This is then selected and the blue number one badge disappears. Triggering the context menu again shows a Show Badge entry which brings the blue badge number one badge back.](images/1_74/hide-view-badge.gif)",
    "url": "https://code.visualstudio.com/updates/v1_74#_hide-badges-per-view-container",
    "id": 3072
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Merge Editor  \nThis release ships some improvements and bug-fixes for the merge editor. Highlights include:  \n* Undo/Redo now tracks the handled state of conflicts.\n* **Ignore** actions in the input views can be used to accept the base version instead of the **Mark as handled** action in the result view.\n* Changes that are equal on both sides are now automatically resolved.\n* Extensions that provide `git blame` functionality now work in the incoming, current, and base editors.",
    "url": "https://code.visualstudio.com/updates/v1_74#_merge-editor",
    "id": 3073
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Install an extension located on disk  \nYou can now install an extension that is located on a local disk drive by using **Developer: Install Extension from Location...** command. The command will open the platform folder dialog to select the location of the extension's `.vsix` file.",
    "url": "https://code.visualstudio.com/updates/v1_74#_install-an-extension-located-on-disk",
    "id": 3074
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Editor  \n### New word break option for CJK characters  \nA setting called `editor.wordBreak` can now be used to avoid inserting wrapping points after [CJK characters](https://en.wikipedia.org/wiki/CJK_characters). When configured with `keepAll`, the wrapping algorithms will try to keep text after CJK characters on the same line. This setting doesn't have any effect on characters from other scripts.",
    "url": "https://code.visualstudio.com/updates/v1_74#_new-word-break-option-for-cjk-characters",
    "id": 3075
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### New font setting for OpenType fonts  \nSome newer fonts, which support [OpenType](https://learn.microsoft.com/typography/opentype) font variations, support tuning certain axes, like the font weight axis, to achieve font weights that are not configurable via the `font-weight` CSS property. In CSS, this is achieved with the `font-variation-settings` property. If you use such a font, you can now configure `editor.fontVariations` to `true`, which will result in VS Code using the `\"wght\"` display axis for setting the font weight. If your font supports other axes, it is also possible to configure them directly, for example by setting `\"editor.fontVariations\": \"'ital' 0.5\"`.",
    "url": "https://code.visualstudio.com/updates/v1_74#_new-font-setting-for-opentype-fonts",
    "id": 3076
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### New indent size setting  \nThere is a new setting called `editor.indentSize` that allows to dissociate the indent size (the number of spaces that make up an indent) from the tab size (the number of spaces that are used to render a Tab character). This is useful when dealing with files that use mixed tabs and spaces indentations and can be exercised only when using manual indentation configuration.  \nBelow is an example configuration:  \n```json\n\"editor.detectIndentation\": false,\n\"editor.insertSpaces\": true,\n\"editor.tabSize\": 8,\n\"editor.indentSize\": 2\n```",
    "url": "https://code.visualstudio.com/updates/v1_74#_new-indent-size-setting",
    "id": 3077
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Command to partially accept inline completions  \nThe command **Accept Next Word Of Inline Suggestion** (`editor.action.inlineSuggest.acceptNextWord`) can be used to accept the next word/non-word segment of the current inline suggestion. Currently, it can only accept parts of the first line of an inline suggestion. The command is still under development and we are exploring keyboard shortcuts along with alternative splitting rules for future releases.",
    "url": "https://code.visualstudio.com/updates/v1_74#_command-to-partially-accept-inline-completions",
    "id": 3078
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Source Control  \n### Manage unsafe Git repositories  \nVS Code uses `git.exe` for executing all Git operations. Starting with Git [2.35.2](https://github.blog/2022-04-18-highlights-from-git-2-36/#stricter-repository-ownership-checks), users are prevented from running Git operations in a repository that is in a folder owned by a user other than the current user, as the repository is deemed to be potentially unsafe.  \nStarting with this release, if you try to open such a potentially unsafe repository, VS Code will show a welcome view in the Source Control view as well as an error notification. Both the welcome view, and the notification expose the **Manage Unsafe Repositories** command that lets you review the list of potentially unsafe repositories, mark them as safe, and open them. The **Manage Unsafe Repositories** command is also available in the Command Palette. Marking a repository as safe will add the repository location to the `safe.directory` [git configuration](https://git-scm.com/docs/git-config#Documentation/git-config.txt-safedirectory).",
    "url": "https://code.visualstudio.com/updates/v1_74#_manage-unsafe-git-repositories",
    "id": 3079
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Optimistic user-interface updates  \nAfter executing a Git operation, a set of `git` commands (for example, `git status`) are executed to update the data model before the Source Control view is updated. There are scenarios in which running these commands can take several seconds to complete (for example, when working with large monorepos), resulting in a delay before the Source Control view is refreshed.  \nThis milestone we have made changes so that the Source Control view is optimistically updated for some of the Git operations (stage, unstage, discard changes, and commit) before `git status` completes, resulting in a snappier Source Control view.  \nThe new capability is enabled by default but it can be disabled using `git.optimisticUpdate: false`.",
    "url": "https://code.visualstudio.com/updates/v1_74#_optimistic-user-interface-updates",
    "id": 3080
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Commit action button polish  \nWhen the **Commit** action button is executing a secondary commit command (for example, **Commit & Sync**), the button label now correctly reflects the command being executed. The **Commit** button also shows an animation indicating progress.",
    "url": "https://code.visualstudio.com/updates/v1_74#_commit-action-button-polish",
    "id": 3081
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Terminal  \n### Terminal Quick Fix improvements  \nTerminal Quick Fixes are now presented in a Code Action control to align with the experience in the editor.  \n![A Quick Fix is triggered in the terminal and a menu is presented with a play button to the left of the action's label](images/1_74/terminal-action-widget.png)",
    "url": "https://code.visualstudio.com/updates/v1_74#_terminal-quick-fix-improvements",
    "id": 3082
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Task actions in the terminal dropdown  \nThe **Run Task** and **Configure Tasks** commands appear in the terminal dropdown for increased discoverability and ease of access.  \n![The last section of the terminal dropdown menu contains Run Task and Configure Tasks commands](images/1_74/task-action-dropdown.png)",
    "url": "https://code.visualstudio.com/updates/v1_74#_task-actions-in-the-terminal-dropdown",
    "id": 3083
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### killOnServerStop property added to serverReadyAction  \nThe [serverReadyAction](https://code.visualstudio.com/docs/editor/debugging#_automatically-open-a-uri-when-debugging-a-server-program) `launch.json` feature enables users to start a debug session that starts a web server, then once the server starts, automatically start debugging a browser navigated to that server's URL. There is a new property, `killOnServerStop` that when set to `true`, will cause the new browser debug session to be automatically stopped when the server debug session stops.  \nFor example:  \n```json\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Launch Program\",\n\"program\": \"${workspaceFolder}/app.js\",\n\n\"serverReadyAction\": {\n\"pattern\": \"listening on port ([0-9]+)\",\n\"uriFormat\": \"http://localhost:%s\",\n\"action\": \"debugWithEdge\",\n\"killOnServerStop\": true\n}\n}\n```  \nIn the example above, when the original `Launch Program` debug session is stopped, the automatically started Edge debug session will also be stopped.",
    "url": "https://code.visualstudio.com/updates/v1_74#_killonserverstop-property-added-to-serverreadyaction",
    "id": 3084
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Exception breakpoints shown for the focused debug session  \nManaging exception breakpoints when running two different types of debug sessions did not work well previously. Now, when a debug session is focused in the **Call Stack** view, the correct set of breakpoints for that session's debug type will be shown.  \n![Exception breakpoints correctly shown per call stack frame](images/1_74/exception-breakpoints.gif)",
    "url": "https://code.visualstudio.com/updates/v1_74#_exception-breakpoints-shown-for-the-focused-debug-session",
    "id": 3085
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Comments  \n### comments.visible  \nThe new setting `comments.visible` can be used to turn off editor commenting (the Comments bar and the in-editor Comments Peek view). The command **Comments: Toggle Editor Commenting** can still be used to toggle editor commenting on and off during a session. Selecting a comment in the **Comments** view will always toggle commenting on.",
    "url": "https://code.visualstudio.com/updates/v1_74#_comments.visible",
    "id": 3086
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Comments view badge  \nThe **Comments** view shows a badge for the count of unresolved comments.  \n![Comments view badge](images/1_74/comments-view-badge.png)",
    "url": "https://code.visualstudio.com/updates/v1_74#_comments-view-badge",
    "id": 3087
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Tasks  \n### Problem matcher 'search' file location method  \nPreviously, problem matchers needed to know exactly where to look for the problematic files, via the `fileLocation` property. The supported methods were `absolute`, `relative`, or `autoDetect` (check for relative paths first, then look for absolute paths in case of failure).  \nHowever, in workspaces that use scripts residing in nested subdirectories, it was difficult to set up tasks as different scripts seldom report file paths in a unified manner (for example, relative to the workspace's base directory).  \nTo help with this problem, there is a new file location method, named `search`. With this method, a recursive file system search is run to locate any captured path.  \nThe example below shows how to set up the `search` file location method (although, all parameters are optional):  \n```jsonc\n\"problemMatcher\": {\n// ...\n\"fileLocation\": [\n\"search\",\n{\n\"include\": [ // Optional; defaults to [\"${workspaceFolder}\"]\n\"${workspaceFolder}/src\",\n\"${workspaceFolder}/extensions\"\n],\n\"exclude\": [ // Optional\n\"${workspaceFolder}/extensions/node_modules\"\n]\n}\n],\n// ...\n}\n```  \n**Note** that users should be wary of causing **time consuming file system searches** (for example, looking inside `node_modules` directories) and set the `exclude` property appropriately.",
    "url": "https://code.visualstudio.com/updates/v1_74#_problem-matcher-'search'-file-location-method",
    "id": 3088
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Languages  \n### TypeScript 4.9  \nVS Code now ships with TypeScript 4.9. This major update brings new TypeScript language features such as the [`satisfies` operator](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9/#satisfies) and [auto accessors](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9/#auto-accessors-in-classes). On the tooling side, we've made improvements to [file watching](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9/#file-watching-changes) and made a number of other fixes and improvements.  \nCheck out the [TypeScript 4.9 announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-4-9/) for more about this update.",
    "url": "https://code.visualstudio.com/updates/v1_74#_typescript-4.9",
    "id": 3089
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Go to Definition on return  \nJavaScript and TypeScript now support running **Go to Definition** on the `return` keyword to quickly jump to the top of the function being returned from. This is helpful when dealing with long, complicated, or highly nested functions. You can use the **Go to Definition** command/keybinding for this (`kb(editor.action.revealDefinition)`) or simply `Cmd/Alt + Click` on the `return` keyword.",
    "url": "https://code.visualstudio.com/updates/v1_74#_go-to-definition-on-return",
    "id": 3090
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Notebooks  \n### Kernel picker experiment: most recently used kernels  \nThere is a new notebook kernel picker that shows the most recently used kernels at the top of the picker. This is an opt-in experiment that can be enabled by setting the `notebook.kernelPicker.type` setting to `mru`.  \nKernels that are not used will be moved into a secondary picker **Select Another Kernel...**. This picker will group all kernels by their source (for example: Jupyter Kernel, Python Environment, etc.) when you have latest [Jupyter extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) installed.  \n![Kernel picker with most recently used kernels](images/1_74/kernel-picker.gif)  \nWe would love to hear your feedback and you can create issues in the [VS Code repository](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_74#_kernel-picker-experiment:-most-recently-used-kernels",
    "id": 3091
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## VS Code for the Web  \n### Source control  \nVS Code for the Web now supports the following settings when editing GitHub and Azure Repos repositories:  \n* `\"git.branchRandomName.enabled\"` - Generate random branch name when creating branches in VS Code for the Web.\n* `\"git.branchRandomName.dictionary\"` - Specify word dictionaries for generating random branch names when creating branches in VS Code for the Web.\n* `\"git.closeDiffOnOperation\"` - Close diff editors after performing source control operations like committing, staging, unstaging changes.  \nAdditionally, VS Code for the Web displays a lock icon in the Status bar and the branch picker for protected branches, aligning with the experience on VS Code Desktop.  \n![Lock icon for protected branches in the Status bar and branch picker](images/1_74/lock-branch.png)  \nFinally, you can now use the source control action button in VS Code for the Web to commit and push your changes directly to the repository remote:  \n![Commit & Push using source control action button](images/1_74/scm-action-button.png)  \nIf you wish to validate your changes before committing, you can also use the secondary **Continue Working On...** action in the action button dropdown to take your working changes to another development environment.",
    "url": "https://code.visualstudio.com/updates/v1_74#_source-control",
    "id": 3092
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Improvements to Continue Working On  \nWhen you are in a GitHub or Azure Repos repository, there are now convenient one step commands available in the Command Palette to take your working changes with you to a specific development environment:  \n* Continue Working in a New Codespace\n* Continue Working in Local Clone\n* Continue Working in Remote Repository on VS Code Desktop  \n![One step commands to continue working in another development environment](images/1_74/continue-on-command-palette.png)  \nWe have also renamed **Edit Sessions** to **Cloud Changes** to clarify that it relates to storing working changes in the cloud.",
    "url": "https://code.visualstudio.com/updates/v1_74#_improvements-to-continue-working-on",
    "id": 3093
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Contributions to extensions  \n### Jupyter  \n#### \"Just My Code\" for notebook cell debugging  \nThe \"Just My Code\" debug feature allows you to determine whether the debugger will step through code from Python libraries, or will only step through your source code. This has been enabled by default when debugging a notebook cell, but you can set `\"jupyter.debugJustMyCode\": false` to disable it and let you step through library code. For the best experience, upgrade debugpy in your environment to `>=1.6.3`. Previously, the `debugJustMyCode` setting was only respected when debugging in the Interactive Window and now it is available for notebook editors as well.  \n#### Support restarting notebook cell debug sessions  \nThe **Restart** command in the debug toolbar restarts the current debug session. Previously, this threw an error in notebook debug sessions, but now it is supported. Unfortunately, it can't be properly supported in the Interactive Window.  \nThis feature is especially useful in a workflow where you debug, edit the cell, then restart the debug session to debug the cell again with your edits applied.",
    "url": "https://code.visualstudio.com/updates/v1_74#_jupyter",
    "id": 3094
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Remote Development extensions  \nThe [Remote Development extensions](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack), allow you to use a container, remote machine, or the [Windows Subsystem for Linux](https://learn.microsoft.com/windows/wsl) (WSL) as a full-featured development environment. Highlights of this release include:  \n* Dev Container GPU support\n* Dev Container Cygwin / Git Bash sockets forwarding\n* [Remote - Tunnels](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-server) extension - Connect to a remote machine without requiring SSH.  \nYou can learn about new extension features and bug fixes in the [Remote Development release notes](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_74.md).",
    "url": "https://code.visualstudio.com/updates/v1_74#_remote-development-extensions",
    "id": 3095
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights include:  \n* Notebooks support for permalink commands.\n* Pull request checks status (such as continuous integration (CI) in progress, needs review, CI failed, etc.) is shown in the Pull Requests tree view.\n* vscode.dev links for PRs can be copied from the pull request overview.\n* The command **Go To Next Diff in Pull Request** navigates to the next diff in a checked out PR across files.  \nCheck out the [changelog for the 0.56.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0560) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_74#_github-pull-requests-and-issues",
    "id": 3096
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Preview features  \n### Profiles  \nWe have been working the last couple of months to support **Profiles** in VS Code, which is one of the most popular asks from the community. This feature is available for preview via the `workbench.experimental.settingsProfiles.enabled` setting. Try it out and give us your feedback by creating issues in the [vscode repository](https://github.com/microsoft/vscode/issues) or commenting in [issue #116740](https://github.com/microsoft/vscode/issues/116740).  \n#### Sharing Profiles  \nYou can now share a profile by exporting it to GitHub as a gist. VS Code will create a secret gist using your GitHub account and provides you a link to share it with others. When you open that link, VS Code will ask you to install the shared profile. During exporting or importing a profile, VS Code will show a preview so that you can review and choose data to export or import respectively.  \nHere is a video of exporting a profile to GitHub and then copying the link to share it with others:  \n![Exporting a Profile](images/1_74/profile-export.gif)  \nThis video shows importing a profile by opening the shared link:  \n![Importing a Profile](images/1_74/profile-import.gif)",
    "url": "https://code.visualstudio.com/updates/v1_74#_profiles",
    "id": 3097
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Extension signing and verification  \nStarting mid-November, all VS Code extensions uploaded to the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode) are signed by the VS Marketplace - this process is called repository signing. On every extension install and update, VS Code verifies the extension package signature. With signing and signature verification, we can guarantee extension package integrity and authenticity.  \nSignature verification is currently only done in VS Code Insiders. If you notice any issues, you can let us know by creating an issue in the [vscode repository](https://github.com/microsoft/vscode/issues) and you can opt out of signature verification by setting `extensions.verifySignature` to `false`. We are working on enabling signature verification in VS Code Stable in the coming months.  \nApart from repository signing, we are also starting work on [extension publisher signing](https://github.com/microsoft/vscode-discussions/discussions/137).",
    "url": "https://code.visualstudio.com/updates/v1_74#_extension-signing-and-verification",
    "id": 3098
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Python execution in the Web  \nWe added debugging support to the [Experimental - Python for the Web](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-python-web-wasm) extension. The debugger supports the following features:  \n* Setting breakpoints\n* Stepping into and out of functions\n* Debug across modules\n* Evaluate variables in the debug console\n* Debug the program in the Integrated Terminal  \nThe screenshot below shows debugging a `Hello World` program  \n![Python debugging in VS Code for the Web](images/1_74/python-debug.png)  \n**Note** that using the extension still requires you to add the following query parameter to the browser URL `?vscode-coi=`.",
    "url": "https://code.visualstudio.com/updates/v1_74#_python-execution-in-the-web",
    "id": 3099
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n## Extension authoring  \n### Implicit activation events for declared extension contributions  \nThis milestone we removed the requirement to explicitly list activation events if your extension declares certain extension contributions in its `package.json`.  \nPreviously, if an extension declared that it contributed a command `mycommand` in its `package.json` file, it also needed to list the corresponding `onCommand:mycommand` activation event in the `activationEvents` field of `package.json` for the command to successfully execute. This was tedious and error-prone and could lead to large `package.json` files.  \nVS Code will now automatically populate activation events for the following extension contribution points:  \n| Contribution point | Inferred activation event |\n| --- | --- |\n| `commands` | `onCommand` |\n| `authentication` | `onAuthenticationRequest` |\n| `languages` | `onLanguage` |\n| `customEditors` | `onCustomEditor` |\n| `views` | `onView` |  \nExtension authors can now safely remove these inferred activation events from your extensions. If you do so, update your VS Code engine requirement to ensure that your extension is not treated as compatible with earlier versions of VS Code:  \n```json\n\"engines\": {\n\"vscode\": \"^1.74.0\"\n},\n```",
    "url": "https://code.visualstudio.com/updates/v1_74#_implicit-activation-events-for-declared-extension-contributions",
    "id": 3100
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Log output channel  \nThis milestone we finalized the [LogOutputChannel](https://github.com/microsoft/vscode/blob/930fd0e469a43fd923cd732c178e3cc9e878b58d/src/vscode-dts/vscode.d.ts#L6474) API. You can now use this API to create a log output channel that will be used to log messages from your extension.  \nWe also finalized the [logLevel](https://github.com/microsoft/vscode/blob/930fd0e469a43fd923cd732c178e3cc9e878b58d/src/vscode-dts/vscode.d.ts#L9464) property and the [onDidChangeLogLevel](https://github.com/microsoft/vscode/blob/930fd0e469a43fd923cd732c178e3cc9e878b58d/src/vscode-dts/vscode.d.ts#L9469) event in the `env` namespace to indicate the current log level of the application and fire an event when the log level changes for the application.",
    "url": "https://code.visualstudio.com/updates/v1_74#_log-output-channel",
    "id": 3101
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Consistent origin for all webviews  \nFollowing up on [our work last iteration](https://code.visualstudio.com/updates/v1_73#_consistent-origin-for-webviews-and-webview-views), all webviews in VS Code now try to maintain custom origins. With 1.74, this also extends to the webviews used by custom editors.  \nThis improves performance by allowing webview content to be cached in more cases. See the [previous release notes](https://code.visualstudio.com/updates/v1_73#_consistent-origin-for-webviews-and-webview-views) for more details and things to be aware of as an extension author.",
    "url": "https://code.visualstudio.com/updates/v1_74#_consistent-origin-for-all-webviews",
    "id": 3102
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Video tag support in extension README  \nExtensions can now use `<video>` tags in their READMEs. Videos are supported on both the VS Code Marketplace and on Extensions view pages in VS Code. Compared to `.gif`s, video files are higher quality and often smaller too. You can even include audio!  \nKeep in mind that [only specific video and audio formats](https://code.visualstudio.com/api/extension-guides/webview#_supported-media-formats) are supported in VS Code itself. At present, you must also use a full path to the `<video>` `src` and `poster` instead of a relative path.",
    "url": "https://code.visualstudio.com/updates/v1_74#_video-tag-support-in-extension-readme",
    "id": 3103
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Comment thread additional actions  \nThe new menu location `comments/commentThread/additionalActions` allows extensions to contribute always-visible buttons to comment threads.  \n![Visible button in a comment](images/1_74/visible-resolve-button.png)",
    "url": "https://code.visualstudio.com/updates/v1_74#_comment-thread-additional-actions",
    "id": 3104
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Renaming of vsce to @vscode/vsce  \nThe [vsce](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#vsce) tool, VS Code's extension manager, has been renamed to [@vscode/vsce](https://www.npmjs.com/package/@vscode/vsce). This is a breaking change for anyone using the tool as a library. The CLI tool is still called `vsce` and can be installed via `npm install -g @vscode/vsce`.",
    "url": "https://code.visualstudio.com/updates/v1_74#_renaming-of-vsce-to-@vscode/vsce",
    "id": 3105
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### GitHub & Microsoft Authentication extensions bundle size improvements  \nThe bundle sizes for these two extensions were larger than we wanted them to be, given what they provided and how critical they are for startup in many cases (such as vscode.dev). This milestone, we focused on decreasing the size of these extensions and here are the results:  \n* GitHub Authentication: 93 KB -> 64.9 KB\n* Microsoft Authentication: 97 KB -> 57.7 KB  \nThis was achieved by:  \n* No longer depending (and bundling) node modules that provided functionality that is readily available in Node.js and the web (for example, removing `uuid` in favor of [Crypto.randomUUID()](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)).\n* Only using `node-fetch` in Node.js, instead of using it for both Node.js and the web.\n* Adopting the newest version of `@vscode/extension-telemetry`, whose size decreased considerably.  \nNo functionality was lost in this process and these extensions are now fetched and loaded faster due to their decreased size.",
    "url": "https://code.visualstudio.com/updates/v1_74#_github-&-microsoft-authentication-extensions-bundle-size-improvements",
    "id": 3106
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Electron sandbox journey  \nYou can learn about our progress toward enabling Electron's [sandbox](https://www.electronjs.org/docs/tutorial/sandbox) in the recent [\"Migrating VS Code to Process Sandboxing\"](https://code.visualstudio.com/blogs/2022/11/28/vscode-sandbox) blog post. This detailed article presents the technology timeline and describes the incremental changes made to support VS Code sandboxing.  \nIf you want to try out VS Code sandbox mode, you can set `\"window.experimental.useSandbox\": true` in settings. Hopefully you should not notice any functional differences, but if you find issues, please report them back to us.",
    "url": "https://code.visualstudio.com/updates/v1_74#_electron-sandbox-journey",
    "id": 3107
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Window Controls Overlay re-enabled by default on Windows  \nThe [Window Controls Overlay](https://wicg.github.io/window-controls-overlay) (WCO) has been re-enabled by default. It was previously enabled in August, but then disabled again, because it was [rendering on the wrong side](https://github.com/microsoft/vscode/issues/159813) for users using right-to-left system languages, covering up the **File** and **Edit** menu items.  \nThe main issue was that VS Code wasn't passing the application locale to Electron, so Electron used the system locale to determine where to place the WCO. However, VS Code relied on Electron's `app.getLocale()` API to obtain the system language and determine what language pack to recommend, and passing in the application locale to Electron resulted in `app.getLocale()` returning that same locale instead of the system language.  \nTo fix the issue, we added a new `app.getPreferredSystemLanguages()` API to Electron so that even after passing the locale to Electron, we can still get the system language to use for VS Code's language pack recommender, while keeping the WCO on the right side.  \n![VS Code with the custom title bar along with Paint's title bar. The screenshot is taken on Windows 11 with the system language in Arabic, showing that the WCO is on the right for VS Code, which is in English, while it is on the left for Paint, which is in Arabic.](images/1_74/wco-rtl-example.png)",
    "url": "https://code.visualstudio.com/updates/v1_74#_window-controls-overlay-re-enabled-by-default-on-windows",
    "id": 3108
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Built-in extensions now use the new l10n API instead of vscode-nls  \nLast month we stabilized the new [Localization (l10n)](https://code.visualstudio.com/api/references/vscode-api#l10n) API. This month, we have adopted that API in every extension found in the [Microsoft/vscode](https://github.com/microsoft/vscode/tree/main/extensions) repository. We still need to move language servers over to using `@vscode/l10n` instead of `vscode-nls` as well as some other extensions owned by the team (JS Debug, Python, Jupyter Notebooks, etc.) but we are moving in the right direction to a single localization story for all of our extensions.",
    "url": "https://code.visualstudio.com/updates/v1_74#_built-in-extensions-now-use-the-new-l10n-api-instead-of-vscode-nls",
    "id": 3109
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)",
    "url": "https://code.visualstudio.com/updates/v1_74#_issue-tracking",
    "id": 3110
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2022 Release (1.74)  \n### Pull requests  \nContributions to `vscode`:  \n* [@Albert-cord](https://github.com/Albert-cord): feat: Add wordBreak editorOption and use it to lineBreakComputer function [PR #156242](https://github.com/microsoft/vscode/pull/156242)\n* [@andschwa (Andy Jordan)](https://github.com/andschwa): Support shell integration in Windows PowerShell [PR #167023](https://github.com/microsoft/vscode/pull/167023)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks)\n* \ud83d\udc1b Fix repeated CWD entries when creating new terminal in multi-root workspace [PR #153204](https://github.com/microsoft/vscode/pull/153204)\n* \ud83c\udf81 Add `killOnServerStop` to debug configuration [PR #163779](https://github.com/microsoft/vscode/pull/163779)\n* \ud83c\udf81 Add `search` to file location methods in tasks [PR #165156](https://github.com/microsoft/vscode/pull/165156)\n* \ud83d\udc84 Include file system path in debug mode's URI/link hovers [PR #165709](https://github.com/microsoft/vscode/pull/165709)\n* \ud83d\udd28 Add \"Focus Breadcrumb\" to command palette [PR #166461](https://github.com/microsoft/vscode/pull/166461)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Standalone configuration: use resource and language [PR #146522](https://github.com/microsoft/vscode/pull/146522)\n* [@chengluyu (Luyu Cheng)](https://github.com/chengluyu): Support variable fonts (#153291) [PR #153968](https://github.com/microsoft/vscode/pull/153968)\n* [@cmarincia (Catalin Marincia)](https://github.com/cmarincia): Add list of strings option to editor.fontFamily [PR #164289](https://github.com/microsoft/vscode/pull/164289)\n* [@d0ggie (Pekka Sepp\u00e4nen)](https://github.com/d0ggie): Restore bracket match CSS syntax (#166109) [PR #166141](https://github.com/microsoft/vscode/pull/166141)\n* [@dmartzol (Daniel Martinez Olivas)](https://github.com/dmartzol)\n* Moves css rules from links.ts to links.css [PR #166258](https://github.com/microsoft/vscode/pull/166258)\n* moves css rules [PR #166532](https://github.com/microsoft/vscode/pull/166532)\n* [@ecstrema (R\u00e9mi Marche)](https://github.com/ecstrema): Editor state change, break after match [PR #166283](https://github.com/microsoft/vscode/pull/166283)\n* [@felixlheureux (Felix L'Heureux)](https://github.com/felixlheureux): Reset value to an empty string when undefined or null [PR #165721](https://github.com/microsoft/vscode/pull/165721)\n* [@g1eny0ung (Yue Yang)](https://github.com/g1eny0ung): fix: text overlay in replace input [PR #162036](https://github.com/microsoft/vscode/pull/162036)\n* [@GauravB159 (Gaurav Bhagchandani)](https://github.com/GauravB159)\n* Use css variables for editor scrollbar [PR #165464](https://github.com/microsoft/vscode/pull/165464)\n* Register theme participant refactoring [PR #165576](https://github.com/microsoft/vscode/pull/165576)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Fix text of IW command palette entries (#164860) [PR #164863](https://github.com/microsoft/vscode/pull/164863)\n* [@guttyon](https://github.com/guttyon): Temporarily disable input method interception. [PR #159699](https://github.com/microsoft/vscode/pull/159699)\n* [@HiDeoo](https://github.com/HiDeoo): Fix QuickPickItem JSDoc links in vscode.d.ts [PR #164474](https://github.com/microsoft/vscode/pull/164474)\n* [@hughlilly (Hugh Lilly)](https://github.com/hughlilly)\n* Markdown lang preview settings description [PR #165109](https://github.com/microsoft/vscode/pull/165109)\n* adds to `files.exclude` desc re: `explorer.excludeGitIgnore` [PR #165111](https://github.com/microsoft/vscode/pull/165111)\n* [@jasonwilliams (Jason Williams)](https://github.com/jasonwilliams): fix #154064 which was running the wrong taskgroups [PR #164983](https://github.com/microsoft/vscode/pull/164983)\n* [@JayBazuzi (Jay Bazuzi)](https://github.com/JayBazuzi): Change error message when launching a second admin instance [PR #166146](https://github.com/microsoft/vscode/pull/166146)\n* [@Jaykul (Joel Bennett)](https://github.com/Jaykul): Fix the PowerShell integration script #165022 [PR #165023](https://github.com/microsoft/vscode/pull/165023)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes `Terminal: Focus Terminal Tabs view` command not working [PR #164408](https://github.com/microsoft/vscode/pull/164408)\n* Fixes task reconnection status does not work for default build task [PR #165110](https://github.com/microsoft/vscode/pull/165110)\n* Fixes terminal find widget not showing result count [PR #166902](https://github.com/microsoft/vscode/pull/166902)\n* [@jkei0](https://github.com/jkei0): Move css rules from selections.ts to selections.css [PR #166407](https://github.com/microsoft/vscode/pull/166407)\n* [@jzyrobert (Robert Jin)](https://github.com/jzyrobert): Add explorer.autorevealExclude setting [PR #136905](https://github.com/microsoft/vscode/pull/136905)\n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb)\n* Comments view: add badge with the number of unresolved comments [PR #164743](https://github.com/microsoft/vscode/pull/164743)\n* Telemetry: log command execution time [PR #165599](https://github.com/microsoft/vscode/pull/165599)\n* [@LoopThrough-i-j (Debayan Ganguly)](https://github.com/LoopThrough-i-j): Fix: New md file scrolls to Top. [PR #164999](https://github.com/microsoft/vscode/pull/164999)\n* [@MarkZuber (Mark Zuber)](https://github.com/MarkZuber): Update bootstrap-node.js to check for Array.isArray [PR #165289](https://github.com/microsoft/vscode/pull/165289)\n* [@marrej (Marcus Revaj)](https://github.com/marrej): Add additional actions to CommentThread [PR #162750](https://github.com/microsoft/vscode/pull/162750)\n* [@Mingpan](https://github.com/Mingpan): Fix arrows in side-by-side diff view [PR #165423](https://github.com/microsoft/vscode/pull/165423)\n* [@miyaokamarina (Marina Miyaoka)](https://github.com/miyaokamarina): Do not preprocess Unicode newlines in Markdown preview [PR #166026](https://github.com/microsoft/vscode/pull/166026)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains)\n* Implement Audio cues on cell execution completed [PR #165442](https://github.com/microsoft/vscode/pull/165442)\n* Fix custom zsh_history ignored [PR #166813](https://github.com/microsoft/vscode/pull/166813)\n* [@mustard-mh (Huiwen)](https://github.com/mustard-mh): Fix tasks status incorrect #163393 [PR #163952](https://github.com/microsoft/vscode/pull/163952)\n* [@n-gist (n-gist)](https://github.com/n-gist): Fix snippet overtyping feature [PR #165871](https://github.com/microsoft/vscode/pull/165871)\n* [@najmiehsa](https://github.com/najmiehsa)\n* Use CSS variables over registerThemingParticipant - minimap viewparts [PR #165465](https://github.com/microsoft/vscode/pull/165465)\n* Use CSS variables over registerThemingParticipant - rulers viewparts [PR #165466](https://github.com/microsoft/vscode/pull/165466)\n* [@nisargjhaveri (Nisarg Jhaveri)](https://github.com/nisargjhaveri): Allow different exception breakpoints from multiple debuggers to be shown at once [PR #158355](https://github.com/microsoft/vscode/pull/158355)\n* [@Okeanos (Nikolas Grottendieck)](https://github.com/Okeanos): improve Git Bash integration on Windows (#151105) [PR #165428](https://github.com/microsoft/vscode/pull/165428)\n* [@pafernandez-oesia](https://github.com/pafernandez-oesia): Fix #165480 [PR #165486](https://github.com/microsoft/vscode/pull/165486)\n* [@pingren (Ping)](https://github.com/pingren): Fix KaTeX equation numbering in notebook preview [PR #156276](https://github.com/microsoft/vscode/pull/156276)\n* [@prashantvc (Prashant Cholachagudda)](https://github.com/prashantvc): Change sessionId with machineId for extension search telemetry [PR #166355](https://github.com/microsoft/vscode/pull/166355)\n* [@QaidVoid](https://github.com/QaidVoid): Reduce registerThemingParticipant [PR #165575](https://github.com/microsoft/vscode/pull/165575)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t)\n* Corrected checkboxes on autoLockGroups settings UI (Fixes #164367) [PR #164369](https://github.com/microsoft/vscode/pull/164369)\n* Correct updates to TestItem.error and TestItem.sortText (Fixes #166190) [PR #166191](https://github.com/microsoft/vscode/pull/166191)\n* [@ramoncorominas (Ram\u00f3n Corominas)](https://github.com/ramoncorominas): Update messages.es.isl to add context menu hotkey [PR #166010](https://github.com/microsoft/vscode/pull/166010)\n* [@rwe (Robert Estelle)](https://github.com/rwe)\n* shellIntegrationAddon.ts: only decode messages for VSCodeOScPt, not iTerm2 [PR #165579](https://github.com/microsoft/vscode/pull/165579)\n* shellIntegration.fish: escape values in \"E\" (executed command) and \"P\" (property KV) codes [PR #165631](https://github.com/microsoft/vscode/pull/165631)\n* shellIntegration-bash.sh: escape values in \"E\" (executed command) and \"P\" (property KV) codes [PR #165632](https://github.com/microsoft/vscode/pull/165632)\n* shellIntegration-rc.zsh: escape values in \"E\" (executed command) and \"P\" (property KV) codes [PR #165633](https://github.com/microsoft/vscode/pull/165633)\n* shellIntegration.ps1: escape values in \"E\" (executed command) and \"P\" (property KV) codes [PR #165634](https://github.com/microsoft/vscode/pull/165634)\n* shellIntegrationAddon: fix broken `deserializeMessage()` implementation + add tests [PR #165635](https://github.com/microsoft/vscode/pull/165635)\n* [@sandersn (Nathan Shively-Sanders)](https://github.com/sandersn): Copy webServer from Typescript to VS Code [PR #165771](https://github.com/microsoft/vscode/pull/165771)\n* [@SethFalco (Seth Falco)](https://github.com/SethFalco): feat: add setting for multi cursor limit [PR #149703](https://github.com/microsoft/vscode/pull/149703)\n* [@SphinxKnight (SphinxKnight)](https://github.com/SphinxKnight): Nit: fix Tip blocks case [PR #165223](https://github.com/microsoft/vscode/pull/165223)\n* [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart): Fix unwanted extra spaces when pasting code with JSDoc [PR #136579](https://github.com/microsoft/vscode/pull/136579)\n* [@Timmmm (Tim)](https://github.com/Timmmm): Fix sticky tabs option [PR #157543](https://github.com/microsoft/vscode/pull/157543)\n* [@weartist (Han)](https://github.com/weartist)\n* Move css rules for #165169 [PR #165595](https://github.com/microsoft/vscode/pull/165595)\n* #165169 Move css rules from hover.ts into hover.css [PR #166095](https://github.com/microsoft/vscode/pull/166095)\n* Move css rules from inPlaceReplace.ts into inPlaceReplace.css [PR #166098](https://github.com/microsoft/vscode/pull/166098)\n* Adapter css variables [PR #166279](https://github.com/microsoft/vscode/pull/166279)\n* move css variables for diffEditor [PR #166467](https://github.com/microsoft/vscode/pull/166467)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): Only use string of the `remote/web/package.json` `browser` field [PR #165163](https://github.com/microsoft/vscode/pull/165163)\n* [@zeroimpl (Daniel Fiori)](https://github.com/zeroimpl): Separate tab size and indent size [PR #155450](https://github.com/microsoft/vscode/pull/155450)\n* [@zhuowei](https://github.com/zhuowei): webview: ignore Ctrl+W and Ctrl+N in webview for PWA [PR #164981](https://github.com/microsoft/vscode/pull/164981)  \nContributions to `vscode-css-languageservice`:  \n* [@babakks (Babak K. Shandiz)](https://github.com/babakks): \u270b Ignore missing standard properties in contexts with vendor-specific pseudo-elements [PR #303](https://github.com/microsoft/vscode-css-languageservice/pull/303)\n* [@johnsoncodehk (Johnson Chu)](https://github.com/johnsoncodehk)\n* feat: implement `itemDefaults.editRange` [PR #301](https://github.com/microsoft/vscode-css-languageservice/pull/301)\n* feat: support `prepareRename`API [PR #302](https://github.com/microsoft/vscode-css-languageservice/pull/302)  \nContributions to `vscode-eslint`:  \n* [@aleclarson (Alec Larson)](https://github.com/aleclarson): Introduce option to prevent underlining multiple lines [PR #1528](https://github.com/microsoft/vscode-eslint/pull/1528)\n* [@MariaSolOs (Maria Jos\u00e9 Solano)](https://github.com/MariaSolOs): Check for -- when disabling rules [PR #1506](https://github.com/microsoft/vscode-eslint/pull/1506)\n* [@uhyo (uhyo)](https://github.com/uhyo): Add Experimental support of Flat Config [PR #1522](https://github.com/microsoft/vscode-eslint/pull/1522)  \nContributions to `vscode-js-debug`:  \n* [@xai (Olaf Lessenich)](https://github.com/xai): fix: use platform preferred case in launcher [PR #1449](https://github.com/microsoft/vscode-js-debug/pull/1449)  \nContributions to `vscode-json-languageservice`:  \n* [@tamayika](https://github.com/tamayika): fix JS inherited property completion [PR #155](https://github.com/microsoft/vscode-json-languageservice/pull/155)  \nContributions to `vscode-pull-request-github`:  \n* [@joshuaobrien (Joshua O'Brien)](https://github.com/joshuaobrien): Narrow types in TimelineEvent so that it may be treated as a tagged union [PR #4160](https://github.com/microsoft/vscode-pull-request-github/pull/4160)  \nContributions to `debug-adapter-protocol`:  \n* [@sztomi (Tam\u00e1s Szelei)](https://github.com/sztomi): Update sdks.md - include dap-rs [PR #349](https://github.com/microsoft/debug-adapter-protocol/pull/349)\n* [@WardenGnaw (Andrew Wang)](https://github.com/WardenGnaw): Move EvaluateArguments context variables to end of enums [PR #346](https://github.com/microsoft/debug-adapter-protocol/pull/346)  \nContributions to `devcontainers/cli`:  \n* [@amurzeau (Alexis Murzeau)](https://github.com/amurzeau): Handle Cygwin / Git Bash sockets forwarding on Windows [PR #82](https://github.com/devcontainers/cli/pull/82)\n* [@natescherer (Nate Scherer)](https://github.com/natescherer): Add --output option to devcontainer build [PR #166](https://github.com/devcontainers/cli/pull/166)\n* [@stuartleeks (Stuart Leeks)](https://github.com/stuartleeks): Add --additional-features option [PR #171](https://github.com/devcontainers/cli/pull/171)\n* [@chris-major-improbable (Chris Major)](https://github.com/chris-major-improbable): GPU requirement and auto-detect NVIDIA extensions [PR #173](https://github.com/devcontainers/cli/pull/173)\n* [@davidwallacejackson (David Jackson)](https://github.com/davidwallacejackson): Normalize feature permissions [PR #233](https://github.com/devcontainers/cli/pull/233)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_74#_pull-requests",
    "id": 3111
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Accessibility  \n### Diff navigation improvements  \n**Go to Next/Previous Change** now has audio cues to indicate if a line was inserted, deleted, or modified. Additionally, the line of the change is selected so that it can read by a screen reader.",
    "url": "https://code.visualstudio.com/updates/v1_75#_diff-navigation-improvements",
    "id": 3112
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Terminal Accessibility Mode  \nThe **Terminal: Focus Accessible Buffer** (`kb(workbench.action.terminal.focusAccessibleBuffer)`) command allows screen readers to navigate through the terminal buffer via keyboard.",
    "url": "https://code.visualstudio.com/updates/v1_75#_terminal-accessibility-mode",
    "id": 3113
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Terminal accessibility help  \nSimilar to the **Show Accessibility Help** command in the editor, the **Terminal: Show Terminal Accessibility Help** (`kb(workbench.action.terminal.showAccessibilityHelp)`) command provides important information for screen reader users.  \n![Terminal accessibility help is presented on top of the terminal](images/1_75/terminal-accessibility-help.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_terminal-accessibility-help",
    "id": 3114
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Workspace Trust editor shortcuts  \nTo improve the keyboard accessibility of the [Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust) editor, which can be opened via **Workspaces: Manage Workspace Trust**, you can now toggle trust for the current workspace with the keyboard using `Ctrl/Cmd+Enter` or for the parent folder with `Ctrl/Cmd+Shift+Enter`.  \n![Workspace Trust Editor showing the trust buttons with their keyboard shortcuts](images/1_75/trust-editor-shortcuts.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_workspace-trust-editor-shortcuts",
    "id": 3115
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Improved keyboard navigation on Settings editor indicators  \nFor settings with multiple indicators, such as a \"Modified Elsewhere\" indicator and a \"Default value changed\" indicator, the left and right arrow keys are now used to navigate between the indicators. This change allows users to tab out of the indicators with a single press of the `Tab` key.  \n<video src=\"images/1_75/settings-indicators-keynav.mp4\" placeholder=\"images/1_75/settings-indicators-keynav.mp4\" autoplay loop controls muted title=\"Video showing user navigating a setting with multiple indicators with arrow keys\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_75#_improved-keyboard-navigation-on-settings-editor-indicators",
    "id": 3116
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Improved grid layout  \nIf an editor is minimized, the grid will now preserve that state when resizing the entire workbench or sidebars. In the short video below, the width of the minimized editor on the right remains constant as the overall editor region is expanded.  \n<video src=\"images/1_75/grid.mp4\" placeholder=\"images/1_75/grid.mp4\" autoplay loop controls muted title=\"Video showing the user resizing views in the editor grid and demonstrating how a minimized view maintains its state\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_75#_improved-grid-layout",
    "id": 3117
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Restore defaults from the Customize Layout command  \nWhen working the custom **Customize Layout** command either via triggering the command or using the layout controls in the custom title bar, you can **Restore Defaults** using the revert arrow button in the top right of the layout control.  \n![Customize layout control showing the new Restore Defaults button](images/1_75/customize-layout.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_restore-defaults-from-the-customize-layout-command",
    "id": 3118
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Manage panel alignment from panel  \nYou can now adjust panel alignment directly from the panel context menu just like panel position.  \n![Panel context menu showing the panel alignment submenu](images/1_75/panel-context-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_manage-panel-alignment-from-panel",
    "id": 3119
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Simplified Preferences menu  \nWe have simplified the **Preferences** menu for your global settings and organized the options into a more logical order and grouping.  \n![Global settings menu showing expanded Themes flyout](images/1_75/global-settings-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_simplified-preferences-menu",
    "id": 3120
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Tree Find history  \nThe Find control inside tree views now supports history navigation. You can use the Up/Down arrow keys to navigate through the history of your previous searches.",
    "url": "https://code.visualstudio.com/updates/v1_75#_tree-find-history",
    "id": 3121
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Tree Find contiguous matching  \nThe tree view Find control now supports contiguous matching along with the existing \"fuzzy\" matching. In the video below, initially searching for `\"src\"` has matches such as `\"resource\"`. When \"fuzzy\" matching is disabled via the **Fuzzy Match** toggle button, only text with the contiguous text `\"src\"` is highlighted.  \n<video src=\"images/1_75/contiguous.mp4\" placeholder=\"images/1_75/contiguous.mp4\" autoplay loop controls muted title=\"Video showing the user toggling between contiguous and fuzzy find in the explorer tree\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_75#_tree-find-contiguous-matching",
    "id": 3122
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### List scroll by page  \nA new setting, `workbench.list.scrollByPage`, lets you configure whether the list should scroll by page when clicking directly on the scroll bar.",
    "url": "https://code.visualstudio.com/updates/v1_75#_list-scroll-by-page",
    "id": 3123
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### List type navigation mode  \nThe new `workbench.list.typeNavigationMode` setting allows you to configure the type navigation mode for lists. By default (setting value `automatic`), navigation occurs in list and trees as you type. If you prefer to only enable navigation at certain times, you can set `typeNavigationMode` to `trigger` and the list will only go into type navigation mode once the `list.triggerTypeNavigation` command is run.  \nThe command `list.triggerTypeNavigation` does not have a keybinding by default but you can add your own. For example, if you'd like to enter type navigation mode after you press the `/` key, you can add a keybinding such as:  \n```json\n{\n\"key\": \"/\",\n\"command\": \"list.toggleKeyboardNavigation\",\n\"when\": \"listFocus\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_75#_list-type-navigation-mode",
    "id": 3124
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### New confirmation to open large files  \nTo prevent accidental opening of very large files, especially in remote environments where there might be an actual cost due to network transfer, a confirmation is shown before opening the file. The limit can be modified via the new `workbench.editorLargeFileConfirmation` setting and has different defaults based on opening local files versus remote files.  \n![Large file confirmation shown for a 2GB package.json file](images/1_75/large-file-confirm.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_new-confirmation-to-open-large-files",
    "id": 3125
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### File watcher supports files.watcherExclude glob patterns  \nThe `files.watcherExclude` setting supports glob patterns for powerful exclusion rules of the file watcher. However, glob patterns had not been supported natively by the library used for file watching. In this milestone, we [contributed](https://github.com/parcel-bundler/watcher/pull/106) support for glob patterns for exclusions for more efficient resource usage, especially on Linux.  \nFor Linux, refer to this [FAQ entry](https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc) for more information if you see file watching issues.",
    "url": "https://code.visualstudio.com/updates/v1_75#_file-watcher-supports-files.watcherexclude-glob-patterns",
    "id": 3126
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Keyboard Shortcuts editor improvements  \n#### Show extensions contributing keybindings  \nThe Keyboard Shortcuts editor now shows the extension that contributes a keybinding in the **Source** column. You can select the extension name to open the extension's details page.  \n![Source column shows extensions contributing keybindings](images/1_75/keyboard-shortcuts-extensions.png)  \nYou can also search for any keybindings contributed by an extension using the **Extension Keyboard Shortcuts** action available in the extension context menu.  \n![Extension keyboard shortcuts action](images/1_75/extension-show-keyboard-shortcuts.png)  \n#### Show context key suggestions for when clause property  \nThe keyboard shortcuts editor now shows context key suggestions for the `when` property. You can use the `Ctrl+Space` shortcut to trigger suggestions.  \n![Context key suggestions for when clause property](images/1_75/when-context-key-suggestions.png)  \n#### Search for keybindings with chords  \nKeyboard shortcuts editor now supports searching for keybindings with chords. For example, `\"Ctrl+K\"` will also show all keybindings with `Ctrl+K` as the first chord.",
    "url": "https://code.visualstudio.com/updates/v1_75#_keyboard-shortcuts-editor-improvements",
    "id": 3127
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Setting to configure shell environment resolution timeout  \nA new setting `application.shellEnvironmentResolutionTimeout` (macOS and Linux only) allows you to increase the timeout for resolving the shell environment when that is required. By default, VS Code will wait up to 10 seconds for the environment to resolve, but in certain cases with more complex shell setups that may not be enough time.  \nRefer to this [FAQ entry](https://code.visualstudio.com/docs/supporting/faq#_resolving-shell-environment-fails) for more information on how VS Code resolves shell environments.",
    "url": "https://code.visualstudio.com/updates/v1_75#_setting-to-configure-shell-environment-resolution-timeout",
    "id": 3128
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### New VSCODE_RESOLVING_ENVIRONMENT environment variable  \nWhen VS Code is resolving the user shell environment, it will now set a new environment variable `VSCODE_RESOLVING_ENVIRONMENT` to `1`. This is useful for user scripts (for example, in `.bashrc`) that need to know whether they are being run in the context of resolving the shell environment.",
    "url": "https://code.visualstudio.com/updates/v1_75#_new-vscode_resolving_environment-environment-variable",
    "id": 3129
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Easier opt-out of release notes after update  \nYou can now opt out of reading the release notes after every update, directly from the release notes editor. This will reflect and update the `update.showReleaseNotes` setting.  \n![There's a checkbox inside the release notes editor that allows the user to opt out reading release notes after every update](images/1_75/release-notes.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_easier-opt-out-of-release-notes-after-update",
    "id": 3130
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Editor  \n### Suggest selection mode  \nThere is a new setting (`editor.suggest.selectionMode`) that allows you to configure if suggestions are selected automatically as you type or via trigger characters.  \nThe default is to always select the best suggestion so that hitting `Enter` or `Tab` inserts it. If you prefer to not have a suggestion selected, set the value to `never`, `whenQuickSuggestion`, or `whenTriggerCharacter`. When using those setting values, suggestions will still show but are not selected automatically and you can use the arrow keys to select one.  \n<video src=\"images/1_75/suggest-select-mode.mp4\" placeholder=\"images/1_75/suggest-select-mode.mp4\" autoplay loop controls muted title=\"Suggest Select Mode\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nNote that this setting only applies to automatic suggestions, not to suggestions that are shown when you explicitly trigger them via `Ctrl+Space`.",
    "url": "https://code.visualstudio.com/updates/v1_75#_suggest-selection-mode",
    "id": 3131
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Code Action list is now scrollable  \nSome extensions generate long lists of Code Actions. If there is not space to render all Code Actions, you can now scroll through the list:  \n<video src=\"images/1_75/code-action-scroll.mp4\" placeholder=\"images/1_75/code-action-scroll.mp4\" autoplay loop controls muted title=\"Video showing scrolling a long list of Code Actions\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_75#_code-action-list-is-now-scrollable",
    "id": 3132
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Color decorators limit  \nThe number of color decorators that are shown in the editor is limited to 500. This is to prevent performance issues when opening a file containing a large number of colors. This limit can now be configured via the `editor.colorDecoratorsLimit` setting.  \n![CSS decorators shown in the editor](images/1_75/css-color-decorators.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_color-decorators-limit",
    "id": 3133
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Editor Find Go To Match  \nThe new **Go To Match...** command allows you to jump to a specific match in a file based on the count when the Find control is open. This is useful when you have a large number of matches and want to jump to a specific one.  \n![Go To Match... command](images/1_75/find-go-to-match.gif)",
    "url": "https://code.visualstudio.com/updates/v1_75#_editor-find-go-to-match",
    "id": 3134
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Redesigned inline suggestions toolbar  \nIn this milestone, we redesigned the inline suggestions toolbar to make it more compact and easier to use. It features buttons to quickly cycle through alternative suggestions and to accept a suggestion fully or word by word.  \nIn the video below, the user reviews both suggestions provided by [GitHub Copilot](#github-copilot), triggered on the comment prompt, and then incrementally accepts first `console` and the next word for `console.log`.  \n![The toolbar features buttons to quickly cycle through alternative suggestions and to accept a suggestion fully or word by word.](images/1_75/inline-completions-hover.gif)  \nThe setting `\"editor.inlineSuggest.showToolbar\": \"always\"` can be used to always show the toolbar when inline suggestions are available.  \nWe also added default keybindings for accepting/undoing a suggestion word by word (`Ctrl+Arrow Left/Arrow Right`).",
    "url": "https://code.visualstudio.com/updates/v1_75#_redesigned-inline-suggestions-toolbar",
    "id": 3135
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Terminal  \n### New default keybindings  \nThe following default keybindings have been added to improve discoverability of advanced terminal features:  \n#### Open Detected Link - Ctrl/Cmd+Shift+O  \nThe **Open Detected Link** command (`kb(workbench.action.terminal.openDetectedLink)`) is the keyboard-accessible way of opening terminal links. The command opens a Quick Pick with all available links in the terminal's viewport.  \n![Ctrl+Shift+O will open a Quick Pick with a categorized list of links found](images/1_75/terminal-open-link.png)  \nThe `kb(workbench.action.terminal.openDetectedLink)` keybinding was chosen as it's a similar action to **Go to Symbol in Editor** but for the terminal.  \n#### Go to Recent Directory - Ctrl/Cmd+G  \n[Go to Recent Directory](https://code.visualstudio.com/docs/terminal/shell-integration#_go-to-recent-directory) (`kb(workbench.action.terminal.goToRecentDirectory)`) opens a Quick Pick with recent directories, picked up by [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration#_current-working-directory-detection). It supports pinning and fuzzy matching.  \n![Directories are presented in a Quick Pick, split up by the current and previous sessions.](images/1_75/terminal-go-to-dir.png)  \nThis keybinding was chosen because `kbstyle(Ctrl+G)` is a relatively low-usage shell keybinding.  \n#### Send Ctrl+G to the shell - Ctrl+Alt+G  \nSince `kbstyle(Ctrl+G)` is now used to **Go to Recent Directory**, using `kbstyle(Ctrl+Alt+G)` is the new way to send `kbstyle(Ctrl+G)` directly to the shell.  \n#### Run Recent Command - Ctrl+Alt+R  \n[Run Recent Command](https://code.visualstudio.com/docs/terminal/shell-integration#_run-recent-command) (`kb(workbench.action.terminal.runRecentCommand)`) opens a Quick Pick with recent commands that have been run, modeled after most shell's reverse index search (`kbstyle(Ctrl+R)`) but in a more accessible and more functional package. It supports pinning and fuzzy matching.  \n![Commands previously run are split up by current and previous sessions and also pulled in from the shell's history file](images/1_75/terminal-run-command.png)  \nThe keybinding `kb(workbench.action.terminal.runRecentCommand)` was chosen because it's an alternative behavior to `kbstyle(Ctrl+R)`, but that keybinding is too important to overwrite its default behavior.  \n#### Accessibility mode overrides  \nBecause reverse index search isn't very accessible to screen readers, when accessibility mode is on `kbstyle(Ctrl+R)` will trigger [Run Recent Command](https://code.visualstudio.com/docs/terminal/shell-integration#_run-recent-command) and `kbstyle(Ctrl+Alt+R)` will send `kbstyle(Ctrl+R)` to the shell.",
    "url": "https://code.visualstudio.com/updates/v1_75#_new-default-keybindings",
    "id": 3136
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Link improvements  \nThere have been many improvements to link detection in the terminal this release:  \n* Links containing spaces are detected under certain circumstances:\n* When the entire line is a link.\n* Python-style stack trace links: `File \"<path>\", line <line>`\n* Some compiler errors: `<path>(<line>,<col>) : ...`\n* Independently styled sections of text are all detected independently, so if a path is underlined, it should be detected even if it has spaces.\n* Links containing `[` and `]` characters now work, they even support detection in difficult edge cases like this:  \n![Links that end in the \\] character will be detected, even when the whole link is wrapped in \\[ and \\]](images/1_75/terminal-square-bracket.png)  \n* `vscode://` protocol links are now detected.\n* `/mnt/`, `\\\\wsl$\\` and `\\\\wsl.localhost\\` links are now detected on Windows.\n* [OSC hyperlink support was added in v1.72](https://code.visualstudio.com/updates/v1_72#_hyperlink-support), the common `file://` protocol often used in these links are now supported (for example `ls --hyperlink`).\n* The `terminal.integrated.enableFileLinks` setting now features a `\"notRemote\"` option, allowing it to be conditionally disabled only on remotes where the file existence checks can cause performance problems.  \nMost link formats also consistently support the following line and column formats:  \n* `<file>:<line>`\n* `<file>:<line>:<column>`\n* `<file> <line>`\n* `<file> <line>:<column>`\n* `<file>(<line>)`\n* `<file>(<line>,<column>)`\n* `<file>(<line>, <column>)`\n* `<file> (<line>)`\n* `<file> (<line>,<column>)`\n* `<file> (<line>, <column>)`\n* Single quotes or no quotes also work for these:\n* `\"<file>\",<line>`\n* `\"<file>\",<line>:<column>`\n* `\"<file>\", line <line>`\n* `\"<file>\", line <line>, col <column>`\n* `\"<file>\", line <line>, column <column>`\n* `\"<file>\":line <line>`\n* `\"<file>\":line <line>, col <column>`\n* `\"<file>\":line <line>, column <column>`\n* `\"<file>\": line <line>`\n* `\"<file>\": line <line>, col <column>`\n* `\"<file>\": line <line>, column <column>`\n* `\"<file>\" on line <line>`\n* `\"<file>\" on line <line>, col <column>`\n* `\"<file>\" on line <line>, column <column>`",
    "url": "https://code.visualstudio.com/updates/v1_75#_link-improvements",
    "id": 3137
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Terminal editor file drag and drop support  \nTerminal editors now support drag and drop while holding `kbstyle(Shift)` to write files to the terminal instead of opening an editor.  \n![Dragging a file into a terminal editor will show 'Hold Shift to drop into editor'](images/1_75/terminal-dnd.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_terminal-editor-file-drag-and-drop-support",
    "id": 3138
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### \"Unsafe\" profile detection  \nDetection of the Cygwin shell on Windows was recently removed due to a [security vulnerability](https://github.com/microsoft/vscode/issues/160827). This release we bring this back in a safer form and also detect more shell profiles, including Cygwin, Cmder and MSYS2. To mitigate the security problem, before one of these profiles is used, it must be configured via the **Select Default Profile** command:  \n![Select Default Profile is available via the terminal view dropdown or the Command Palette](images/1_75/terminal-profile-1.png)  \n![The newly detected profiles appear in a \"detected\" section at the bottom of the Quick Pick](images/1_75/terminal-profile-2.png)  \nWhen selected, a warning will appear before being added to your `settings.json` file and acting like a regular profile:  \n![The notification explains the path is potentially unsafe as it could be modified by another user](images/1_75/terminal-profile-3.png)  \nThis warning can safely be ignored if the computer isn't used by multiple users, for example in a corporate environment.",
    "url": "https://code.visualstudio.com/updates/v1_75#_unsafe-profile-detection",
    "id": 3139
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Toggle commands in the terminal view  \nA long-time request has been to add the **Clear Terminal** command to the terminal view actions but we have always been concerned about bloat in the UI. Thanks to a new internal feature, we have new hidden-by-default actions that appear in an overflow menu but can be toggled to show via right-click:  \n![Clear terminal, Run Active File, and Run Selected Text commands are now available in the terminal view's overflow menu](images/1_75/terminal-view-overflow.png)  \n![Right-click one of the view actions to toggle which ones are visible and which go into the overflow menu](images/1_75/terminal-view-toggle.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_toggle-commands-in-the-terminal-view",
    "id": 3140
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Ctrl+C drops selection on Windows  \nWindows shares `kbstyle(Ctrl+C)` between copying a selection and sending `SIGINT` to the shell, depending on whether there is a selection. A common annoyance was that if you had accidentally made a selection, `kbstyle(Ctrl+C)` may not send `SIGINT`. To help mitigate this, `kbstyle(Ctrl+C)` to copy the selection will now also clear the selection, so pressing `kbstyle(Ctrl+C)` twice will reliably send `SIGINT` either 1 or 2 times.",
    "url": "https://code.visualstudio.com/updates/v1_75#_ctrl+c-drops-selection-on-windows",
    "id": 3141
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Add a terminal tab stop size setting  \nThere is a new setting `terminal.integrated.tabStopWidth` that configures the tab stop width of the terminal. This is useful when programs output the `\\t` character instead of configuring the tab size in their configuration.",
    "url": "https://code.visualstudio.com/updates/v1_75#_add-a-terminal-tab-stop-size-setting",
    "id": 3142
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Powerline triangle and diagonal line custom glyphs  \nGPU-accelerated terminals now get pixel-perfect custom glyphs for the triangle and diagonal line [Powerline](https://powerline.readthedocs.io) extra symbols glyphs (`U+E0B8-U+E0BF`). These characters are ambiguous as to whether they are single or double width characters and differ depending on the font used, so we chose to render them as single width.  \nBefore:  \n![Triangles and diagonal line previously could display with bad anti-aliasing and odd borders](images/1_75/terminal-after-triangle.png)  \nAfter:  \n![Triangles and diagonal line glyphs are drawn pixel perfect](images/1_75/terminal-before-triangle.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_powerline-triangle-and-diagonal-line-custom-glyphs",
    "id": 3143
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Bracketed paste mode used in \"Run Selected Text In Active Terminal\"  \nThe **Run Selected Text In Active Terminal** command will now run the text using \"bracketed paste mode\" in supporting shells, so a multi-line selection will be treated as a single input, rather than multiple commands. This makes running actual scripts much more intuitive with fewer errors occurring.  \nBefore:  \n![Previously, running two echo statements would be run one after the one with 2 separate prompts](images/1_75/terminal-selected-text-before.png)  \nAfter:  \n![Running two echo statements will now run in a single prompt](images/1_75/terminal-selected-text-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_bracketed-paste-mode-used-in-run-selected-text-in-active-terminal",
    "id": 3144
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Quick fixes for Pwsh Preview feedback providers  \nPowerShell Preview recently implemented [a new pluggable feedback provider system](https://github.com/PowerShell/PowerShell/pull/18252) that allows printing suggestions when commands fail:  \n![Running 'gcc' in pwsh preview will present 3 suggestions, which VS Code will present as Quick Fixes](images/1_75/terminal-feedback-provider.png)  \nThe terminal now pulls Quick Fixes from the `[General]` and `[cmd-not-found]` feedback providers. The Quick Fix dialog can be opened by clicking on the light bulb or via `Ctrl/Cmd+.`.",
    "url": "https://code.visualstudio.com/updates/v1_75#_quick-fixes-for-pwsh-preview-feedback-providers",
    "id": 3145
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Source Control  \n### New commands  \n[Git 2.35](https://github.blog/2022-01-24-highlights-from-git-2-35/) introduced a new `--staged` mode for the `git stash` command. This new mode allows you to easily stash only the changes that are staged. If you have a version of Git that supports this new mode, you can take advantage of it using the new **Git: Stash Staged** command.  \nVS Code already had support for deleting a local tag using the **Git: Delete Tag** command. This milestone we enabled the deletion of remote tags using the new **Git: Delete Remote Tag** command.",
    "url": "https://code.visualstudio.com/updates/v1_75#_new-commands",
    "id": 3146
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Git repositories in parent folders  \nVS Code uses `git rev-parse --show-toplevel` to determine the root of a Git repository. In most cases, the root of the Git repository is inside the workspace, but there are scenarios in which the root of the Git repository is in the parent folders of the workspace or the open file(s). While opening Git repositories in parent folders of workspaces or open files is a great feature for advanced users, it can be confusing for new users. We have seen cases in which this confusion resulted in discarding changes from these Git repositories causing data loss.  \nTo avoid confusion, and to reduce the risk of data loss, starting this milestone, VS Code will display a notification and a new welcome view in the Source Control view, and will not automatically open Git repositories from the parent folders of workspaces and open files.  \n![Notification that there is a Git repository in parent folders](images/1_75/git-repository-in-parent-folders.png)  \n_Theme: [Dark+ V2](#dark-v2-and-light-v2-experimental-themes) with [MacOS Modern](https://marketplace.visualstudio.com/items?itemName=davidbwaters.macos-modern-theme) product icons_  \nThe **Open Repository** button will open a Quick Pick with a list of all Git repositories that were discovered in the parent folders of the workspace or the open file(s). The choice to open a Git repository from the parent folders is remembered.  \nUsers can control how Git repositories from parent folders are being handled using the `git.openRepositoryInParentFolders` setting. Users who would like to restore the old behavior can set the `git.openRepositoryInParentFolders` setting to `always`.",
    "url": "https://code.visualstudio.com/updates/v1_75#_git-repositories-in-parent-folders",
    "id": 3147
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Command disablement  \nBased on the size of a Git repository or the presence of various Git hooks, some Git operations can take a long time to complete. We have seen in the past that initiating commands while a previous command is still in progress can lead to unexpected results (for example, discarding changes on a file while the commit operation is in progress).  \nTo prevent this, we are disabling most Git commands while the following operations are in progress: `Checkout`, `Commit`, `Push`, and `Pull`. This means that while these operations are running, most Git commands will not appear in the Command Palette, and will be disabled in the Source Control view and the Status bar.",
    "url": "https://code.visualstudio.com/updates/v1_75#_command-disablement",
    "id": 3148
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### User interface improvements  \nThis milestone we have polished some of the Source Control user interface elements:  \n* The tooltip of the **Commit** and **Publish Branch** action buttons in the Source Control view now includes the branch name.\n* The **Checkout** Status bar item now uses a different icon depending of the type of ref that is checked out (branch, tag, or commit).\n* The **Checkout** Status bar item now shows a spinning progress icon while the checkout operation is in progress.",
    "url": "https://code.visualstudio.com/updates/v1_75#_user-interface-improvements",
    "id": 3149
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Notebooks  \n### Kernel picker improvements  \nWe continued to improve the MRU (Most Recently Used) kernel picker. It can be enabled by setting `notebook.kernelPicker.type` to `mru`. Kernels that are not used are moved into a secondary picker **Select Another Kernel...**. This picker will group all kernels by their source (for example: Jupyter Kernel, Python Environment, etc.) when you have latest [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) and [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extensions installed.  \n![Notebook Kernel Picker](images/1_75/noterbook-kernel-picker.gif)",
    "url": "https://code.visualstudio.com/updates/v1_75#_kernel-picker-improvements",
    "id": 3150
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Join Selected Cells  \nThere is a new command **Join Selected Cells** (`kb(notebook.cell.joinSelected`)`) to merge multiple selected cells into one cell.  \n![Join Selected Cells command](images/1_75/notebook-join-cells.gif)",
    "url": "https://code.visualstudio.com/updates/v1_75#_join-selected-cells",
    "id": 3151
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Fallback rendering of output to a supported mimetype  \nRich outputs in Jupyter Notebooks such as IPyWidgets are visible only during the lifetime of the kernel. This means that when the notebook is closed and reopened again, the outputs are no longer visible. However, in a number of these cases, the output can be rendered using a fallback mechanism. For example, an IPyWidget can in some cases (depending on the widget used) be rendered as a static image or HTML content.  \nAs a result, users opening existing notebooks with matplotlib widgets (or similar widgets) can now see the output without having to re-execute the code.  \n![Notebook Renderer fallback](images/1_75/notebook-renderer-fallback.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_fallback-rendering-of-output-to-a-supported-mimetype",
    "id": 3152
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### New documentation  \nThere are two new topics to help you work with Jupyter Notebooks in VS Code.  \n* [Jupyter Notebooks on the web](https://code.visualstudio.com/docs/datascience/notebooks-web) - Run notebooks on [vscode.dev](https://vscode.dev) or in [GitHub Codespaces](https://github.com/features/codespaces).\n* [Manage Jupyter Kernels](https://code.visualstudio.com/docs/datascience/jupyter-kernel-management) - Learn how to connect your notebook to various Jupyter kernels.",
    "url": "https://code.visualstudio.com/updates/v1_75#_new-documentation",
    "id": 3153
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Debugging  \n### JavaScript debugging  \n#### Improved Node.js Startup Performance  \nThe 'breakpoint predictor' used for Node.js debugging has been rewritten and improved to dramatically increase speed for large projects. For example, startup time overhead when debugging unit tests in the TypeScript repo was reduced by 62%, and the overhead to debug and start a build in the VS Code repo was reduced by 80%.  \nIf you run into problems such as breakpoints not being hit, please [file an issue](https://github.com/microsoft/vscode-js-debug/issues/new). You can disable the new behavior by setting `\"enableTurboSourcemaps\": false` in your `launch.json`, however this option will eventually be removed as we gain confidence.",
    "url": "https://code.visualstudio.com/updates/v1_75#_javascript-debugging",
    "id": 3154
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Languages  \n### JavaScript React language label is now JavaScript JSX  \nThe `JavaScript React` language mode has been renamed to `JavaScript JSX` to reflect that JSX syntax is used by more than just React. `TypeScript React` has also been renamed to `TypeScript JSX`.  \nNote that only the language names shown in the UI have been changed. The internal language IDs (`javascriptreact` and `typescriptreact`) remain unchanged for compatibility reasons.",
    "url": "https://code.visualstudio.com/updates/v1_75#_javascript-react-language-label-is-now-javascript-jsx",
    "id": 3155
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### New shellscript grammar  \nVS Code now uses a new grammar from [better-shell-syntax](https://github.com/jeff-hykin/better-shell-syntax) for shellscript syntax highlighting.",
    "url": "https://code.visualstudio.com/updates/v1_75#_new-shellscript-grammar",
    "id": 3156
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Extensions  \n### VS Marketplace extension signing  \nEvery extension uploaded to the [Visual Studio Marketplace](https://marketplace.visualstudio.com) starting from November 2022 is code signed by the VS Marketplace. When a user installs a signed extension through VS Code's Extensions view, VS Code will verify the signature, and thus prove that the extension is indeed coming from the VS Marketplace and that the extension package has not been modified. If the signature verification fails, VS Code will not install the extension.  \nVS Marketplace is in the process of signing all existing extensions (including extensions that have not been updated since November). Once this process is done, in a couple of months, VS Code will require that all extensions coming from the VS Marketplace are signed by the VS Marketplace. This requirement will guarantee the integrity of every package coming from the VS Marketplace, thus improving the overall security of our extension ecosystem.  \n>**Note**: Extension authors do not have to do anything to opt-in to Marketplace signing. In addition to Marketplace signing, we are currently working on publisher signing. More about publisher signing can be found in [discussion #137](https://github.com/microsoft/vscode-discussions/discussions/137).",
    "url": "https://code.visualstudio.com/updates/v1_75#_vs-marketplace-extension-signing",
    "id": 3157
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Pin an extension version from CLI  \nWhen you install a specific version of an extension from the CLI (`code --install-extension {publisher}.{name}@{version}`), it will now be pinned to that version. This means that the extension will not be updated automatically when you have automatic updates enabled.",
    "url": "https://code.visualstudio.com/updates/v1_75#_pin-an-extension-version-from-cli",
    "id": 3158
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Sync pinned extension versions  \n[Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync) will now sync pinned extension versions. This means that when you install a specific version of an extension on one machine, it will be pinned to that version on all other machines that you sync to.",
    "url": "https://code.visualstudio.com/updates/v1_75#_sync-pinned-extension-versions",
    "id": 3159
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Contributions to extensions  \n### Python  \n#### Auto-select environment when VS Code is launched from an activated terminal  \nIf a user launches VS Code via a terminal with a conda or virtual environment already activated, the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension now detects that and then either auto-selects the environment itself, or asks the user if they would like to make that environment their selected one; depending on the environment.  \n#### Select requirements files when creating environment  \nWhen creating a virtual environment using the **Python: Create Environment** command, the Python extension now finds requirement files in the workspace folder, and allows users to multi-select any number of requirements to install.  \n#### Select optional dependencies from pyproject.toml  \nThe Python extension detects and loads the optional dependencies provided in the `[project.optional-dependencies]` part of the `pyproject.toml` file. We use the pip editable install command if we detect that the workspace contains a `pyproject.toml` along with any selected optional dependencies.  \n#### Auto indentation with Pylance  \nWhen the `editor.formatOnType` setting is enabled for Python files, Pylance will automatically indent the code as it's typed in, allowing you to focus more on the logic of your code and less on formatting.  \n<video src=\"images/1_75/pylance-auto-indent.mp4\" placeholder=\"images/1_75/pylance-auto-indent.mp4\" autoplay loop controls muted title=\"Python code being automatically indented with Pylance\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nTo try it out, enable `formatOnType` for Python files by adding the following to your user `settings.json` file:  \n```json\n\"[python]\": {\n\"editor.formatOnType\": true,\n},\n```",
    "url": "https://code.visualstudio.com/updates/v1_75#_python",
    "id": 3160
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Live Preview  \n#### Setting for external browser preview  \nThe [Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) extension now lets you open the external browser preview in browsers other than your default browser. Using the `livePreview.customExternalBrowser` setting, you can set the external preview to open in:  \n* Microsoft Edge\n* Google Chrome\n* Mozilla Firefox\n* Your default browser  \n![Live Preview Custom External Browser setting ](images/1_75/livepreview-custom-browser.png)  \n#### Setting for the server root  \nYou can now set the server's root path to a sub-folder in your workspace. For example, you can ask Live Preview to serve files from your `src` folder in your workspace by setting `livePreview.serverRoot` to `\"src\"`.  \n<video src=\"images/1_75/livepreview-server-root-demo.mp4\" placeholder=\"images/1_75/livepreview-server-root-demo.mp4\" autoplay loop controls muted title=\"Live Preview Server Root setting demo\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_75#_live-preview",
    "id": 3161
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### ESLint  \nThe [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extension has been updated to version 2.4.0. Major new features are:  \n* Support for the new experimental [flat config files](https://eslint.org/docs/latest/use/configure/configuration-files-new). You need to enable the support separately in VS Code using the setting `eslint.experimental.useFlatConfig`. ESLint version 8.21 or greater is required.\n* The ESLint status indicator moved into VS Code's Language status area. As a result, the setting `eslint.alwaysShowStatus` was removed. Use VS Code's pin feature instead.  \n![ESLint language status](images/1_75/eslint-language-status.png)  \nThe language status item will now inform you of slow validation times and long ESLint runs when computing code fixes during save. The time budget available (in milliseconds) can be control via the two settings `eslint.timeBudget.onValidation` and `eslint.timeBudget.onFixes`.\n* Long problem squiggles can be shortened to a single line using the new settings `eslint.problems.shortenToSingleLine`.",
    "url": "https://code.visualstudio.com/updates/v1_75#_eslint",
    "id": 3162
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights include:  \n* Support for suggesting and accepting changes.\n* GitHub handles in comments are now linkified.\n* Labels can be added to PRs at creation time.\n* An experimental setting `githubPullRequests.experimental.quickDiff` will show a quick diff view in the editor gutter for changed lines in a checked out PR.  \nCheck out the [changelog for the 0.58.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0580) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_75#_github-pull-requests-and-issues",
    "id": 3163
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### GitHub Copilot  \nThe [GitHub Copilot extension](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot) is an AI-powered code completion tool that helps you write code faster and smarter. You can use the Copilot extension in VS Code to generate code, or to learn from the code it generates.  \nGitHub Copilot integrates into the VS Code editor through the [inline suggestions UI](#redesigned-inline-suggestions-toolbar), which lets you review various suggestions and easily accept all or part of the generated code.  \nGitHub Copilot is now generally available for businesses, with features like license management, organization-wide policy controls, and privacy protections. You can learn more in the [GitHub Copilot for Business announcement](https://github.blog/2022-12-07-github-copilot-is-generally-available-for-businesses/).  \nTo get started, you can sign up for a free trial on the [GitHub Copilot website](https://copilot.github.com).  \nWe've also added a new [GitHub Copilot in VS Code](https://code.visualstudio.com/docs/editor/github-copilot) topic to the VS Code documentation that will help you get started with Copilot.",
    "url": "https://code.visualstudio.com/updates/v1_75#_github-copilot",
    "id": 3164
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Continue Working On  \nThe Continue Working On feature supports starting in a Git repository in a local window and continuing in a remote window like a [GitHub Codespace](https://github.com/features/codespaces). If you are on a branch that has not yet been published to the remote, you will now automatically be prompted to publish your current branch when you choose to continue working in a different development environment, so that you can access your full branch context elsewhere.  \n<video src=\"images/1_75/continue-on-publish-branch.mp4\" placeholder=\"images/1_75/continue-on-publish-branch.mp4\" autoplay loop controls muted title=\"Video showing an automatic prompt to publish your branch when using Continue Working On in a Git repository\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nAdditionally, when you're on a Git repository in a remote window, you can now continue working in a new local Git clone on VS Code Desktop using the **Continue Working in New Local Clone** command.  \n<video src=\"images/1_75/continue-on-local-clone.mp4\" placeholder=\"images/1_75/continue-on-local-clone.mp4\" autoplay loop controls muted title=\"Video showing Continue Working On a Git repository in a new local clone when in a remote window\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nFinally, all options for continuing your work in a local, remote, or web window are now conveniently surfaced in the remote indicator. These options are also available in the Command Palette.  \n![Continue Working On actions now available in the remote indicator](images/1_75/continue-on-remote-indicator.png)",
    "url": "https://code.visualstudio.com/updates/v1_75#_continue-working-on",
    "id": 3165
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Preview features  \n### Dark+ V2 and Light+ V2 experimental themes  \nTwo new color themes, Dark+ V2 and Light+ V2, are now available for use. These themes are an evolution of the existing Dark+ and Light+ themes, and are designed to be more accessible and make VS Code look better than ever! These themes are still marked as experimental, and we are looking for early feedback.  \n![Dark+ V2 and Light+ V2 experimental themes](images/1_75/v2-themes.png)  \nYou can find the new themes listed as **Light+ V2 (Experimental)** and **Dark+ V2 (Experimental)** in the Color Theme picker (**Preferences: Color Theme** `kb(workbench.action.selectTheme)`).",
    "url": "https://code.visualstudio.com/updates/v1_75#_dark+-v2-and-light+-v2-experimental-themes",
    "id": 3166
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### TypeScript 5.0 support  \nThis update includes support for the upcoming TypeScript 5.0 release. See the [TypeScript 5.0 iteration plan](https://github.com/microsoft/TypeScript/issues/51362) for more details on what the TypeScript team is currently working on. Some editor tooling highlights:  \n* New `switch` and `case` completions help you fill in both sections of `switch` statements more quickly.\n* Work on enabling project wide IntelliSense on [github.dev](https://github.dev) and [vscode.dev](https://vscode.dev).  \nTo start using the TypeScript 5.0 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_75#_typescript-5.0-support",
    "id": 3167
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### \"commonly used\" section in the Command Palette  \nThis milestone, we have added a new \"commonly used\" section to the Command Palette. The goal of this section is help new users have a better understanding of what the Command Palette is for and what it can do.  \n![commonly used section in the Command Palette](images/1_75/commonly-used.png)  \n_Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda) (preview on [vscode.dev](https://vscode.dev/editor/theme/tinkertrain.theme-panda))_  \nThis section will show up underneath the \"recently used\" section so to not break muscle memory and as you run more and more commands and get familiar with VS Code, either the section disappears (because the \"commonly used\" commands move up to \"recently used\") or the section is below the fold and out of sight.  \n![commonly used section with recently used commands](images/1_75/commonly-used-with-recently-used.png)  \n_Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda) (preview on [vscode.dev](https://vscode.dev/editor/theme/tinkertrain.theme-panda))_  \nFor now, we have put this new experience behind the setting `workbench.commandPalette.experimental.suggestCommands` but we plan to make this the default behavior in the near future. Let us know what you think!",
    "url": "https://code.visualstudio.com/updates/v1_75#_commonly-used-section-in-the-command-palette",
    "id": 3168
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Extension authoring  \n### Comment thread state  \nThe `CommentThread` `state` API has been finalized. This API controls whether a comment renders as resolved or unresolved and can affect filtering in the Comments view. You can learn more about how to use the API in [issue #127473](https://github.com/microsoft/vscode/issues/127473).",
    "url": "https://code.visualstudio.com/updates/v1_75#_comment-thread-state",
    "id": 3169
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Ignore a setting to sync  \nYou can now hide a setting from Setting Sync by default using the `ignoreSync` property while registering a setting. This is useful for settings that are not meant to be synced across machines.",
    "url": "https://code.visualstudio.com/updates/v1_75#_ignore-a-setting-to-sync",
    "id": 3170
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Telemetry  \nThe new `TelemetryLogger` API has been finalized. This API aims to make using telemetry easier for extension authors and safer for the end user. The API enables things such as built-in secret cleaning, a telemetry output channel, error handlers, and automatic telemetry level management. This should result in a more cohesive telemetry experience that is guaranteed to follow our requirements.",
    "url": "https://code.visualstudio.com/updates/v1_75#_telemetry",
    "id": 3171
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Quick diff  \nThe quick diff, which is the gutter decoration that shows on added, changed, and deleted lines in the editor, is currently only usable by SCM providers. The proposed quick diff API allows the quick diff to be used outside of SCM providers. The following example is from the GitHub Pull Request extension, which uses the quick diff API to show a quick diff for lines changed in a PR:  \n```ts\nvscode.window.registerQuickDiffProvider({ scheme: 'file' }, {\nprovideOriginalResource: (uri: vscode.Uri) => {\nconst changeNode = this.reviewModel.localFileChanges.find(changeNode => changeNode.changeModel.filePath.toString() === uri.toString());\nif (changeNode) {\nreturn changeNode.changeModel.parentFilePath;\n}\n}\n}, 'GitHub Pull Request', this.repository.rootUri);\n```  \nThe full proposal is in [quickDiffProvider.d.ts](https://github.com/microsoft/vscode/blob/45db0a2940c5681dcc717bd973b918751c2b7ad5/src/vscode-dts/vscode.proposed.quickDiffProvider.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_75#_quick-diff",
    "id": 3172
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Continuous test runs  \n[Continuous test runs](https://github.com/microsoft/vscode/issues/134941) allow test extensions to indicate that they're able to watch and rerun tests when changes happen. Supporting this API is a matter of indicating support on your test run profile...  \n```diff\nconst profile = controller.createRunProfile('Run', TestRunProfileKind.Run, runHandler);\n+profile.supportsContinuousRun = true;\n```  \nAnd then checking for that in the runHandler:  \n```diff\nconst runHandler = (request: TestRunRequest, token: CancellationToken) => {\n+   if (request.continuous) {\n+       return watchForFileChangesThenRunTests(request, token);\n+   }\n}\n```  \nThe full proposal is in [testContinuousRun.d.ts](https://github.com/microsoft/vscode/blob/4db912c6c15c667db70aaeb8dfd082e3a0c6a30e/src/vscode-dts/vscode.proposed.testContinuousRun.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_75#_continuous-test-runs",
    "id": 3173
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n## Engineering  \n### Utility process for extension host  \nThe utility process usage for extension host that is required for [process sandboxing](https://code.visualstudio.com/blogs/2022/11/28/vscode-sandbox) is now enabled by default. There is still a setting (`extensions.experimental.useUtilityProcess`), which we will remove soon.",
    "url": "https://code.visualstudio.com/updates/v1_75#_utility-process-for-extension-host",
    "id": 3174
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Performance testing via command line  \nWe introduced the following node modules to run a set of performance tests from the command line.  \n**vscode-bisect** - This module helps us measure performance regressions quickly. Run `npx vscode-bisect --help` for how to operate this tool.  \n**vscode-perf** - This module helps us measure the performance of VS Code. `npx vscode-perf --help` describes how to operate this tool.",
    "url": "https://code.visualstudio.com/updates/v1_75#_performance-testing-via-command-line",
    "id": 3175
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### GB18030 Certification  \nVS Code is now GB18030-certified - this means that a certification board within the Chinese government has confirmed that VS Code can correctly represent the full range of Chinese characters. The testing covered all built-in usage scenarios. With VS Code certified, the core Visual Studio Family (including Visual Studio and Visual Studio for Mac) has been certified under GB18030.",
    "url": "https://code.visualstudio.com/updates/v1_75#_gb18030-certification",
    "id": 3176
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Migrating to ESM  \nWe have embarked on a journey to migrate our codebase to ESM. The VS Code project predates native modules (ESM) and we have been using the asynchronous module system (AMD) for the time being. AMD has served us well but it is time to move on. We have started to migrate our codebase to ESM, we are making good progress, and hope to finish this effort in the next months.",
    "url": "https://code.visualstudio.com/updates/v1_75#_migrating-to-esm",
    "id": 3177
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### EOL warning for macOS 10.11 and 10.12  \nVS Code desktop will be updating to [Electron 22](https://github.com/microsoft/vscode/issues/166265) in the next couple of milestones. With the Electron 22 update, VS Code desktop will no longer run on **OS X El Capitan** and **macOS Sierra**. In this milestone, we have added deprecation notices for the users on these affected platforms to prepare them for migration. If you are a user of these aforementioned OS versions, please take a look at our [FAQ](https://code.visualstudio.com/docs/supporting/faq#_can-i-run-vs-code-on-old-macos-versions) for additional information.",
    "url": "https://code.visualstudio.com/updates/v1_75#_eol-warning-for-macos-10.11-and-10.12",
    "id": 3178
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Improved usage of system and application language variables  \nIn a previous release, we started passing in the application language to Electron so that it can lay out some components such as the window controls overlay (WCO) correctly. Meanwhile, the language recommender relied on the system language, but `app.getLocale()` started fetching the application language instead of the system language, so we used a newer `app.getPreferredSystemLanguages()` Electron API to retrieve the system language to use for the language recommender. As a result, a regression occurred where extensions in the Extensions view could not render, because the new API returned some values that `toLocaleString()` could not parse.  \nThe immediate solution, which we pushed for a recovery release, was to revert back to `app.getLocale()` and temporarily break language recommendation, but it turns out that many areas of the codebase should have been using the application language variable instead of the system language variable as well.  \nThis release replaces many usages of the system language with the application language. In turn, dates should now be localized in a format more consistent to the application language rather than the system language.",
    "url": "https://code.visualstudio.com/updates/v1_75#_improved-usage-of-system-and-application-language-variables",
    "id": 3179
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)\n* [@yume-chan (Simon Chan)](https://github.com/yume-chan)",
    "url": "https://code.visualstudio.com/updates/v1_75#_issue-tracking",
    "id": 3180
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2023 Release (1.75)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Specify window consistently with matchMedia calls in browser.ts [PR #164020](https://github.com/microsoft/vscode/pull/164020)\n* [@Aaaaash (\u5927\u8868\u54e5)](https://github.com/Aaaaash): Fixes `standaloneTheme.defines` Always return false.  [PR #169221](https://github.com/microsoft/vscode/pull/169221)\n* [@andschwa (Andy Jordan)](https://github.com/andschwa): Fix shell integration for PowerShell 5.1  [PR #170516](https://github.com/microsoft/vscode/pull/170516)\n* [@antonioprudenzano (Antonio Prudenzano)](https://github.com/antonioprudenzano): Feat/155294 [PR #168513](https://github.com/microsoft/vscode/pull/168513)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks)\n* Include tilde (~) in markdown syntax tokens [PR #146417](https://github.com/microsoft/vscode/pull/146417)\n* \ud83d\udd8a Include branch name in commit button popup [PR #167827](https://github.com/microsoft/vscode/pull/167827)\n* Add watch without selection [PR #171449](https://github.com/microsoft/vscode/pull/171449)\n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): 145458 List: Support scroll by page [PR #145788](https://github.com/microsoft/vscode/pull/145788)\n* [@chiefmikey (Mikl Wolfe)](https://github.com/chiefmikey)\n* Remove repository.ts default parameter types [PR #155908](https://github.com/microsoft/vscode/pull/155908)\n* Update git config.followTagsWhenSync definition [PR #155914](https://github.com/microsoft/vscode/pull/155914)\n* [@chouzz (Chouzz)](https://github.com/chouzz): Fix incorrect description for call hierarchy and type hierarchy api [PR #167718](https://github.com/microsoft/vscode/pull/167718)\n* [@d1y (\u6e90\u6765\u6c0f\u4f50\u7530)](https://github.com/d1y): feat: screencast mode move scale [PR #156084](https://github.com/microsoft/vscode/pull/156084)\n* [@davidwengier (David Wengier)](https://github.com/davidwengier): Update Razor repo [PR #171560](https://github.com/microsoft/vscode/pull/171560)\n* [@dtivel (Damon Tivel)](https://github.com/dtivel)\n* Extensions:  warn not fail on UnknownError during signature verification [PR #169777](https://github.com/microsoft/vscode/pull/169777)\n* Do not block if unable to verify extension signature [PR #172576](https://github.com/microsoft/vscode/pull/172576)\n* [@fadeevab (Alexander Fadeev)](https://github.com/fadeevab):  Makefile tests for `else ifeq|ifneq|...` syntax [PR #170888](https://github.com/microsoft/vscode/pull/170888)\n* [@giannisp (Ioannis Poulakas)](https://github.com/giannisp): Improve layout of search input [PR #165989](https://github.com/microsoft/vscode/pull/165989)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Add history to new list/tree search/filter widget (#155578) [PR #159188](https://github.com/microsoft/vscode/pull/159188)\n* Add 'Fuzzy Match' toggle to tree find widget (#116286) [PR #164376](https://github.com/microsoft/vscode/pull/164376)\n* Prevent hiding unresolved tree branches [PR #167047](https://github.com/microsoft/vscode/pull/167047)\n* [@gpoussel (Guillaume Poussel)](https://github.com/gpoussel): Add command to delete remote tag (fix #104845) [PR #134327](https://github.com/microsoft/vscode/pull/134327)\n* [@HKalbasi](https://github.com/HKalbasi): Fix inlay hint location links problem [PR #167886](https://github.com/microsoft/vscode/pull/167886)\n* [@hughlilly (Hugh Lilly)](https://github.com/hughlilly): Copyedit: \u201cDouble-clicking\u201d -> \u201cDouble-clicking\u201d [PR #166758](https://github.com/microsoft/vscode/pull/166758)\n* [@jakebailey (Jake Bailey)](https://github.com/jakebailey): Set disableLineTextInReferences=true in TS user preferences [PR #171376](https://github.com/microsoft/vscode/pull/171376)\n* [@jasonwilliams (Jason Williams)](https://github.com/jasonwilliams): Allow to open either side of a diff editor as editor (fix #153786) [PR #165765](https://github.com/microsoft/vscode/pull/165765)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes pasting into quick outline does not reveal result [PR #166835](https://github.com/microsoft/vscode/pull/166835)\n* Fixes editor-area terminals are not restored after quit [PR #168887](https://github.com/microsoft/vscode/pull/168887)\n* Fixes terminals/tasks restored after reload ignore confirmOnKill and confirmOnExit settings [PR #168922](https://github.com/microsoft/vscode/pull/168922)\n* Fixes createTerminal does not create a terminal at the first editor group [PR #169050](https://github.com/microsoft/vscode/pull/169050)\n* [@joshuaobrien](https://github.com/joshuaobrien): Add git stash staged only command [PR #165649](https://github.com/microsoft/vscode/pull/165649)\n* [@laurentlb (Laurent Le Brun)](https://github.com/laurentlb): Command duration: use a higher-precision for telemetry [PR #167624](https://github.com/microsoft/vscode/pull/167624)\n* [@maIIady (Ilya Golovin)](https://github.com/maIIady): Fix: make git commands work with keyboard [PR #159113](https://github.com/microsoft/vscode/pull/159113)\n* [@markw65](https://github.com/markw65): Fix for not auto-starting same-named tasks in different folders [PR #168742](https://github.com/microsoft/vscode/pull/168742)\n* [@MarkZuber (Mark Zuber)](https://github.com/MarkZuber): Add high latency measurement instrumentation to the network protocol [PR #168668](https://github.com/microsoft/vscode/pull/168668)\n* [@meskill](https://github.com/meskill): fix: nushell integration [PR #169861](https://github.com/microsoft/vscode/pull/169861)\n* [@mkhl (Martin K\u00fchl)](https://github.com/mkhl): expose fish integration configuration via `XDG_DATA_DIRS` [PR #168211](https://github.com/microsoft/vscode/pull/168211)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains)\n* Issue 163528/create edit breakpoint command [PR #163734](https://github.com/microsoft/vscode/pull/163734)\n* Enable breakpoints view when debug has been launched at least once [PR #169077](https://github.com/microsoft/vscode/pull/169077)\n* [@mroch (Marshall Roch)](https://github.com/mroch): fix anyScore firstMatchCanBeWeak [PR #168266](https://github.com/microsoft/vscode/pull/168266)\n* [@mueheg (Google Henrik)](https://github.com/mueheg): Do not select full contents of inputbox before selecting a range, fixes #167266. [PR #167274](https://github.com/microsoft/vscode/pull/167274)\n* [@N1kO23](https://github.com/N1kO23): Added `${rootNameShort}` formatting [PR #165744](https://github.com/microsoft/vscode/pull/165744)\n* [@ohah (ohah)](https://github.com/ohah): screencast ime bug fix (#165248) [PR #165249](https://github.com/microsoft/vscode/pull/165249)\n* [@ookami-kb (Kirill Bubochkin)](https://github.com/ookami-kb): Update shellIntegration.fish to fix an error when communicating cwd [PR #168452](https://github.com/microsoft/vscode/pull/168452)\n* [@PEZ (Peter Str\u00f6mberg)](https://github.com/PEZ): Enable monospaced digits for statusbar items [PR #167310](https://github.com/microsoft/vscode/pull/167310)\n* [@pokey (Pokey Rule)](https://github.com/pokey): Fix bug with snippet choices escaping [PR #169287](https://github.com/microsoft/vscode/pull/169287)\n* [@probablykasper (Kasper)](https://github.com/probablykasper): Add `terminal.integrated.tabStopWidth` option [PR #170733](https://github.com/microsoft/vscode/pull/170733)\n* [@pzhlkj6612 (Mozi)](https://github.com/pzhlkj6612): Terminal Tabs: disable dragging and clicking during renaming [PR #166821](https://github.com/microsoft/vscode/pull/166821)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Fix webview disappearing when extension is slow to start (#168516) [PR #168569](https://github.com/microsoft/vscode/pull/168569)\n* [@rezasoumi (RezCoder)](https://github.com/rezasoumi): issue 163803/ first pick a ref then pick a name in create-branch-from... [PR #170908](https://github.com/microsoft/vscode/pull/170908)\n* [@rwe (Robert Estelle)](https://github.com/rwe): shellIntegration-bash.sh: exactly preserve DEBUG trap expression [PR #165581](https://github.com/microsoft/vscode/pull/165581)\n* [@samdenty (Sam Denty)](https://github.com/samdenty): fix IExtensionRecommendationReson typo [PR #163889](https://github.com/microsoft/vscode/pull/163889)\n* [@Sean1708 (Sean Marshallsay)](https://github.com/Sean1708): Introduce VSCODE_RESOLVING_ENVIRONMENT env var. [PR #168436](https://github.com/microsoft/vscode/pull/168436)\n* [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart)\n* Retain maximized group size when adding and removing groups or toggling side bar [PR #137962](https://github.com/microsoft/vscode/pull/137962)\n* Fix paste removing indent [PR #167687](https://github.com/microsoft/vscode/pull/167687)\n* Add CamelCase Transformation [PR #169512](https://github.com/microsoft/vscode/pull/169512)\n* [@ste42 (Steven Tam)](https://github.com/ste42): Add new untitled diff command [PR #168533](https://github.com/microsoft/vscode/pull/168533)\n* [@sumneko (\u6700\u840c\u5c0f\u6c50)](https://github.com/sumneko): update Lua-grammar [PR #167692](https://github.com/microsoft/vscode/pull/167692)\n* [@weartist (Han)](https://github.com/weartist)\n* Fix Setting to disable loop of \"next change\" in diff view #163331 [PR #164225](https://github.com/microsoft/vscode/pull/164225)\n* Adapter css for #165169 [PR #167030](https://github.com/microsoft/vscode/pull/167030)\n* support process explorer remember it's location and dimensions [PR #169090](https://github.com/microsoft/vscode/pull/169090)\n* add the snippet source when the snippet with the same name appears [PR #169119](https://github.com/microsoft/vscode/pull/169119)\n* Replace applicationStorageMainService with stateMainService [PR #169365](https://github.com/microsoft/vscode/pull/169365)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): fix: typos [PR #158431](https://github.com/microsoft/vscode/pull/158431)\n* [@zardoy (Vitaly)](https://github.com/zardoy): [typescript] fix potential `[object Object]` in member completions [PR #171127](https://github.com/microsoft/vscode/pull/171127)  \nContributions to `vscode-css-languageservice`:  \n* [@romainmenke (Romain Menke)](https://github.com/romainmenke): new CSS units [PR #324](https://github.com/microsoft/vscode-css-languageservice/pull/324)  \nContributions to `vscode-hexeditor`:  \n* [@brabli (Bradley)](https://github.com/brabli): Add octal representation of the current byte in data inspector [PR #410](https://github.com/microsoft/vscode-hexeditor/pull/410)  \nContributions to `vscode-json-languageservice`:  \n* [@rahulbanerjee26 (Rahul Banerjee)](https://github.com/rahulbanerjee26): Check schema for `errorMessage` property for  \"not\" rule [PR #164](https://github.com/microsoft/vscode-json-languageservice/pull/164)  \nContributions to `vscode-languageserver-node`:  \n* [@wkillerud (William Killerud)](https://github.com/wkillerud): Add defaultBehavior response to onPrepareRename [PR #1161](https://github.com/microsoft/vscode-languageserver-node/pull/1161)  \nContributions to `vscode-pull-request-github`:  \n* [@eamodio (Eric Amodio)](https://github.com/eamodio): Updates TypeScript (released 4.2) and Octokit (to get fixed types), and a couple minor others [PR #2525](https://github.com/microsoft/vscode-pull-request-github/pull/2525)\n* [@sravan1946 (sravan)](https://github.com/sravan1946): Remove unavailable badge from readme [PR #4393](https://github.com/microsoft/vscode-pull-request-github/pull/4393)\n* [@Thomas1664](https://github.com/Thomas1664)\n* Fix comment layout & use bin as delete icon [PR #4285](https://github.com/microsoft/vscode-pull-request-github/pull/4285)\n* Colorize status badge [PR #4286](https://github.com/microsoft/vscode-pull-request-github/pull/4286)\n* UI fixes for PR view [PR #4368](https://github.com/microsoft/vscode-pull-request-github/pull/4368)\n* Use correct permission to show 'assign yourself' in PR view sidebar [PR #4369](https://github.com/microsoft/vscode-pull-request-github/pull/4369)\n* Fix UI for PR draft status check entry [PR #4370](https://github.com/microsoft/vscode-pull-request-github/pull/4370)  \nContributions to `debug-adapter-protocol`:  \n* [@mfussenegger (Mathias Fu\u00dfenegger)](https://github.com/mfussenegger): Clarify that absent canRestart on frame implies true [PR #365](https://github.com/microsoft/debug-adapter-protocol/pull/365)  \nContributions to `monaco-editor`:  \n* [@jonatanklosko (Jonatan K\u0142osko)](https://github.com/jonatanklosko): Update Elixir tokenizer [PR #3453](https://github.com/microsoft/monaco-editor/pull/3453)\n* [@rcjsuen (Remy Suen)](https://github.com/rcjsuen): Fix the color provider's columns [PR #3348](https://github.com/microsoft/monaco-editor/pull/3348)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_75#_pull-requests",
    "id": 3181
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Improved error audio cue responsiveness  \nThe `audioCues.lineHasError` audio cue now plays during character navigation so that screen reader users have improved insight into where the errors are in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_76#_improved-error-audio-cue-responsiveness",
    "id": 3182
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Terminal accessible buffer improvements  \nLast iteration, we introduced the terminal accessible buffer, which provides screen reader users access to the terminal contents via the **Terminal: Focus Accessible Buffer** command.  \nThis iteration, we've improved the accessible buffer by adding selection and link support, making it read-only, and using shell integration insights to limit output to only the important terminal content - the command that was run, the exit code if any, and the output. We plan to add configuration of this feature next iteration.",
    "url": "https://code.visualstudio.com/updates/v1_76#_terminal-accessible-buffer-improvements",
    "id": 3183
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Context specific Tab focus mode  \nThe **Toggle Tab Key Moves Focus** command is useful for determining whether the workbench or editor/terminal receive `kbstyle(Tab)` key input.  \nThe new `editor.tabFocusMode` setting allow users to set the default behavior. When the value is set to `true`, the workbench receives the `kbstyle(Tab)` key input instead of the editor or terminal.",
    "url": "https://code.visualstudio.com/updates/v1_76#_context-specific-tab-focus-mode",
    "id": 3184
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Screen reader shell integration support on Windows  \nShell integration was previously disabled when a screen reader was detected on Windows due to problems with PowerShell support in this context. We have determined that this is no longer an issue in most cases, so have enabled it.",
    "url": "https://code.visualstudio.com/updates/v1_76#_screen-reader-shell-integration-support-on-windows",
    "id": 3185
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Terminal accessible help additions  \nDiscussions with the screen reader community have yielded additions to the **Terminal Accessibility Help** dialog (`kb(workbench.action.terminal.showAccessibilityHelp)`) such as mentioning the **Create New Terminal (With Profile)** and **Preferences: Open Accessibility Settings** commands.",
    "url": "https://code.visualstudio.com/updates/v1_76#_terminal-accessible-help-additions",
    "id": 3186
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Switch profiles  \nYou can now quickly switch between profiles with the **Profiles: Switch Profile** command in the Command Palette (`kb(workbench.action.showCommands)`), which presents a dropdown listing your available profiles.  \n![Switch Profile command dropdown listing available profiles](images/1_76/switch-profile.png)",
    "url": "https://code.visualstudio.com/updates/v1_76#_switch-profiles",
    "id": 3187
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Profiles in Remote Workspaces  \nYou can now create and customize profiles that include [remote extensions](https://code.visualstudio.com/api/advanced-topics/remote-extensions) and switch between them in [Remote Development](https://code.visualstudio.com/docs/remote/remote-overview)  workspaces.  \nBelow two different profiles (\"Doc Writing\" and \"Code\") are active in two instances over [Remote - SSH](https://code.visualstudio.com/docs/remote/ssh).  \n![Profiles active in two Remote - SSH instances](images/1_76/remote-profiles.png)",
    "url": "https://code.visualstudio.com/updates/v1_76#_profiles-in-remote-workspaces",
    "id": 3188
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Profiles documentation  \nCheck out the new [Profiles in Visual Studio Code](https://code.visualstudio.com/docs/editor/profiles) topic if you'd like to learn more about profiles and scenarios when they are useful. This article goes into detail on how to create, modify, share, and reuse profiles.",
    "url": "https://code.visualstudio.com/updates/v1_76#_profiles-documentation",
    "id": 3189
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Workbench  \n### Moveable Explorer view  \nMost views and view containers within VS Code are moveable except for a few built-in ones. In this release, the Explorer view container (`kb(workbench.view.explorer)`) is now moveable and can be placed into the secondary side bar or the bottom panel to allow for further workbench customization.  \nBelow the File Explorer view has been moved to the Panel area.  \n![File Explorer view moved to the panel area](images/1_76/file-explorer-panel.png)  \nIf you'd like to reset all views back to the default layout, you can run **Views: Reset View Locations** from the Command Palette.",
    "url": "https://code.visualstudio.com/updates/v1_76#_moveable-explorer-view",
    "id": 3190
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Fixed-width centered layout  \nThe **View: Toggle Centered Layout** command (`workbench.action.toggleCenteredLayout`) now has a fixed-width layout option. This option is enabled with the new `workbench.editor.centeredLayoutFixedWidth` setting. When enabled and centered layout is active, the editor is centered and attempts to maintain its width across window and panel resizes.",
    "url": "https://code.visualstudio.com/updates/v1_76#_fixed-width-centered-layout",
    "id": 3191
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Multiple quick diffs  \nWith the introduction of the proposed [multiple quick diff API](https://code.visualstudio.com/updates/v1_75#_quick-diff), multiple extensions can provide a quick diff. When there are multiple quick diffs in a file, you'll now see a dropdown to choose which diff base to view:  \n![Multiple quick diffs and diff base dropdown](images/1_76/multiple-quick-diff.png)",
    "url": "https://code.visualstudio.com/updates/v1_76#_multiple-quick-diffs",
    "id": 3192
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Comments  \nThe **Comments** view has a new **Expand All** command to go with the existing **Collapse All**. The gutter icon for unresolved comments is now the same icon that is used in the **Comments** view.",
    "url": "https://code.visualstudio.com/updates/v1_76#_comments",
    "id": 3193
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Configure default log level  \nYou can now configure the default log level for VS Code or for an extension from the **Developer: Set Log Level...** command. This is persisted across restarts and is synced across machines.  \n![Default log level dropdown with several extensions listed](images/1_76/default-log-level.png)  \nSelecting an extension displays the same log level dropdown as for the default log level.",
    "url": "https://code.visualstudio.com/updates/v1_76#_configure-default-log-level",
    "id": 3194
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Verified publisher domain in Extension editor  \nThe Extension editor now displays the verified publisher domain next to the verified indicator. Below, the `prettier.io` domain is shown to the right of the verified badge.  \n![Prettier extension in the extension editor displaying verified publisher domain prettier.io](images/1_76/verified-publisher-domain.png)",
    "url": "https://code.visualstudio.com/updates/v1_76#_verified-publisher-domain-in-extension-editor",
    "id": 3195
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Editor  \n### JSONC document sorting  \nIt is now possible to sort JSONC (JSON documents with comments) files by key. To use this feature, select **JSON: Sort Document** from the Command Palette.",
    "url": "https://code.visualstudio.com/updates/v1_76#_jsonc-document-sorting",
    "id": 3196
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Independent bracket pairs for matching and colorization  \nIn this iteration, we changed the behavior when both `editor.language.brackets` and `editor.language.colorizedBracketPairs` are configured. Before, setting `editor.language.colorizedBracketPairs` would override `editor.language.brackets` for bracket matching (as both use the same [bracket pair tree](https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization#_the-basic-algorithm)). Now, the union of both settings is used for bracket matching, but only brackets configured in `editor.language.colorizedBracketPairs` are colorized.",
    "url": "https://code.visualstudio.com/updates/v1_76#_independent-bracket-pairs-for-matching-and-colorization",
    "id": 3197
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Source Control  \n### Git commit syntax highlighting  \nVS Code has adopted a new Git grammar, which provides syntax highlighting for Git commit message files. The new grammar has better support for languages other than English.",
    "url": "https://code.visualstudio.com/updates/v1_76#_git-commit-syntax-highlighting",
    "id": 3198
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Git and GitHub documentation  \nWhether you are new to source control or an experienced Git user, you can learn more about VS Code's Git integration in the [Source Control](https://code.visualstudio.com/docs/sourcecontrol/overview) section of our documentation. Articles include:  \n* [Using Git source control in VS Code](https://code.visualstudio.com/docs/sourcecontrol/overview) - An overview of VS Code's Git integration features.\n* [Introduction to Git](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git) - Beginner level Git operations in VS Code.\n* [Working with GitHub](https://code.visualstudio.com/docs/sourcecontrol/github) - Move your code to [GitHub](https://github.com) to share and collaborate with others.\n* [Frequently Asked Questions](https://code.visualstudio.com/docs/sourcecontrol/faq) - Get help for common scenarios and gotchas.",
    "url": "https://code.visualstudio.com/updates/v1_76#_git-and-github-documentation",
    "id": 3199
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Notebooks  \n### Kernel picker default mode: MRU  \nThe kernel picker now shows the most recently used (MRU) kernel by default. This is a change from the previous behavior, which was to show all available kernels. You can still see all kernels by a secondary picker **Select Another Kernel...**, which will group kernels by their source (for example: Jupyter Kernel, Python Environment, etc.) when you have latest [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) and [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extensions installed.  \n![Notebook kernel picker with MRU list and using the Select Another Kernel option](images/1_75/noterbook-kernel-picker.gif)",
    "url": "https://code.visualstudio.com/updates/v1_76#_kernel-picker-default-mode:-mru",
    "id": 3200
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Notebook renderer performance diagnostics  \nWhen running notebook cells, some notebook output renderers may take a long time to render. To help identify these renderers, we've added diagnostics to the hover in the notebook cell Status bar. This view shows the time it took for each renderer to execute and the total execution time. Additionally, the links in the hover will open the issue reporter with the renderer's name and execution time pre-filled so that you can easily file an issue if you find the renderer is taking too long to execute.  \n![Image showing the cell Status bar hover with renderer execution times](images/1_76/notebook-renderer-performance-diagnostics.png)",
    "url": "https://code.visualstudio.com/updates/v1_76#_notebook-renderer-performance-diagnostics",
    "id": 3201
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Better link support for built-in error renderer  \nThe built-in error renderer now supports links to files and line numbers. This allows you to click on a file path in the error message and open the file in the editor.  \nJupyter extension's error renderer was deprecated in favor of the built-in error renderer.  \n![Notebook built-in error renderer](images/1_76/notebook-error-renderer.gif)",
    "url": "https://code.visualstudio.com/updates/v1_76#_better-link-support-for-built-in-error-renderer",
    "id": 3202
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Languages  \n### Markdown workspace header link completions  \nNeed to link to a header in another Markdown document but don't remember or want to type out the full file path? Try using workspace header completions! To start, just type `##` in a Markdown link to see a list of all Markdown headers from the current workspace:  \n![Suggestions for all Markdown headers in the current workspace](images/1_76/md-workspace-header-suggestion.png)  \nAccept one of these completions to insert the full link to that header, even if it's in another file:  \n![Adding a link to the selected header in another file](images/1_76/md-workspace-header-suggestion-insert.png)  \nYou can configure if/when workspace header completions show with the **Markdown > Suggest > Paths: Include Workspace Header Completions** setting (`markdown.suggest.paths.includeWorkspaceHeaderCompletions`).  \nValid setting values are:  \n* `onDoubleHash` (the default) - Show workspace header completions only after you type `##`.\n* `onSingleOrDoubleHash` - Show workspace header completions after you type `#` or `##`.\n* `never` - Never show workspace header completions.  \nKeep in mind that finding all headers in the current workspace can be expensive, so there may be a slight delay the first time they are requested, especially for workspaces with lots of Markdown files.",
    "url": "https://code.visualstudio.com/updates/v1_76#_markdown-workspace-header-link-completions",
    "id": 3203
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Configure preferred file extension style for Markdown links  \nThe new `markdown.preferredMdPathExtensionStyle` setting configures if VS Code prefers using file extensions for links to Markdown files. This preference is used for language tools such as [path completions](https://code.visualstudio.com/docs/languages/markdown#_path-completions) and [link renames](https://code.visualstudio.com/docs/languages/markdown#_rename-headers-and-links).  \nValid setting values are:  \n* `auto` - Try to preserve the existing style of the file extension.\n* `includeExtension` - Include the trailing `.md` in the link.\n* `removeExtension` - Remove the trailing `.md` from the link.",
    "url": "https://code.visualstudio.com/updates/v1_76#_configure-preferred-file-extension-style-for-markdown-links",
    "id": 3204
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Remote Repositories  \nThis milestone, we introduced the **Browse & Edit Remote Repositories without Cloning** walkthrough in the [Remote Repositories](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories) extension to help you search, edit, and create quick commits in GitHub and Azure Repos without cloning locally.  \nYou can also check out the [Remote Repositories tutorial](https://code.visualstudio.com/blogs/2021/06/10/remote-repositories) to help you get started.",
    "url": "https://code.visualstudio.com/updates/v1_76#_remote-repositories",
    "id": 3205
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Contributions to extensions  \n### Jupyter  \n#### IPyWidgets  \nThe [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension now supports version `8` of [IPyWidgets](https://pypi.org/project/ipywidgets/#description). Python Widgets relying on `IPyWidgets 7.*` will continue to work, as both versions `7.*` and `8.*` are supported.  \n#### Interactive Window kernel selection  \nAuto-selecting a kernel for the [Interactive Window](https://code.visualstudio.com/docs/python/jupyter-support-py) was modified to work better with the new kernel picker UI. The current active interpreter is used unless another kernel was previously chosen for an Interactive Window in that workspace, in which case the previously selected kernel is used.",
    "url": "https://code.visualstudio.com/updates/v1_76#_jupyter",
    "id": 3206
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Python  \n#### Improved IntelliSense support for pytest  \nThe [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension now has powerful features that can help you work more efficiently and effectively when writing clear, concise, and easy to understand tests with [pytest](https://docs.pytest.org):  \n* Support for completions, **Go to Definition**, **Find All References**, and **Rename Symbol** (`kb(editor.action.rename)`) for pytest fixtures and parameterized arguments.\n* Type annotation support for pytest parameters through inlay hints (enabled by the ``\"python.analysis.inlayHints.pytestParameters\"`` setting) and through Code Actions.\n* Type inference of parameterized pytest arguments, based on the parameter values provided to the decorator.  \nThe short video below highlights these new pytest features:  \n<video src=\"images/1_76/pylance-pytest-intellisense.mp4\" placeholder=\"images/1_76/pylance-pytest-intellisense.mp4\" autoplay loop controls muted title=\"Showcasing new pytest IntelliSense features\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_76#_python",
    "id": 3207
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights include:  \n* Permalink rendering in the PR description and in comments.\n* Re-requesting reviews from the description page.\n* Quick diffs for files in a checked-out PR.  \nCheck out the [changelog for the 0.60.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0600) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_76#_github-pull-requests-and-issues",
    "id": 3208
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Preview features  \n### Rich content notebook search  \nGlobal search now supports showing results from notebooks as they would be displayed in the notebook editor. Enable `search.experimental.notebookSearch` to try this out, and let us know about any bugs that you run into! This currently only supports searching cell inputs and Markdown sources in cells.  \n<video src=\"images/1_76/experimental_notebook_search.mp4\" placeholder=\"images/1_76/experimental_notebook_search.mp4\" autoplay loop controls muted title=\"Notebook rich content search demo\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n_Theme: [Community Material Theme](https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-community-material-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/Equinusocio.vsc-community-material-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_76#_rich-content-notebook-search",
    "id": 3209
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Asynchronous tokenization  \nThis release ships the experimental asynchronous tokenization feature. This feature allows the editor to tokenize documents in a separate web worker, which can improve the responsiveness of the editor when the document is large.  \nFor now, asynchronous tokenization is disabled by default but can be enabled by setting `editor.experimental.asyncTokenization` to `true`.",
    "url": "https://code.visualstudio.com/updates/v1_76#_asynchronous-tokenization",
    "id": 3210
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### TypeScript 5.0 support  \nThis update includes support for the upcoming TypeScript 5.0 release. See the [TypeScript 5.0 Beta blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/) and  [TypeScript 5.0 iteration plan](https://github.com/microsoft/TypeScript/issues/51362) for more details on what the TypeScript team is currently working on. Some editor tooling highlights:  \n* New `switch` and `case` completions help you fill in both sections of `switch` statements more quickly.\n* Work on enabling project-wide IntelliSense on [github.dev](https://github.dev) and [vscode.dev](https://vscode.dev).  \nTo start using the TypeScript 5.0 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension or install the latest [VS Code 1.76+ Insiders build](https://code.visualstudio.com/insiders).",
    "url": "https://code.visualstudio.com/updates/v1_76#_typescript-5.0-support",
    "id": 3211
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Extension authoring  \n### Link support in InputBox prompts and validation messages  \nThis iteration, we introduced support for links in `InputBox` prompts and validation messages. In those strings, you can now use the following syntax to create links:  \n```ts\n[link text](link target)\n```  \nThe link target can be a URL or a command ID. When the user clicks on the link, the link target is opened in the browser or executed as a command, respectively.  \nExample:  \n```ts\nconst result = await vscode.window.showInputBox({\nprompt: 'Please enter a valid email address [more info](https://aka.ms/vscode-email-validation)',\nvalidateInput: text => {\nif (text.indexOf('@') === -1) {\nreturn 'Please enter a valid email address, [more info](https://aka.ms/vscode-email-validation)';\n}\nreturn undefined;\n}\n});\n```  \nwhich will result in the following prompt:  \n![Prompt contains a link that is underlined](images/1_76/quickpick-prompt-links.png)  \nand the following validation message:  \n![Validation message contains a link that is underlined](images/1_76/quickpick-validation-links.png)  \n_Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda) (preview on [vscode.dev](https://vscode.dev/editor/theme/tinkertrain.theme-panda))_  \nThis behavior works for both the `showInputBox` and `createInputBox` APIs.",
    "url": "https://code.visualstudio.com/updates/v1_76#_link-support-in-inputbox-prompts-and-validation-messages",
    "id": 3212
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Information diagnostic for * activation event  \nWhen an extension uses the `*` (star) activation event, it is activated while VS Code is in the process of starting up. This can delay the startup of VS Code. To help extension authors understand the impact of using the `*` activation event, we have added an information diagnostic that is shown when an extension uses the `*` activation event. The diagnostic is displayed in the Problems view and is also visible in the extension editor:  \n![Diagnostic for * activation event](images/1_76/star-activation.png)  \nFor more information about `*` (star) activation, you can read the [Activation Events](https://code.visualstudio.com/api/references/activation-events#Start-up) documentation.",
    "url": "https://code.visualstudio.com/updates/v1_76#_information-diagnostic-for-*-activation-event",
    "id": 3213
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Upcoming changes in when clause contexts parsing  \n[When clauses](https://code.visualstudio.com/api/references/when-clause-contexts) used in extension manifest files (`package.json`) allow extensions to selectively enable and disable contributions such as commands and UI elements (for example, menus or views). The next VS Code release is planned to include a new parser for when clauses. The new parser offers more features and correctness, but it also enforces stricter rules for when clauses and may result in some breakages for existing when clauses. Review [issue #175540](https://github.com/microsoft/vscode/issues/175540) to learn more about the breakages and new features. You are also encouraged to subscribe to that issue for updates on the new parser, including new features, breakages, and migration guidelines.",
    "url": "https://code.visualstudio.com/updates/v1_76#_upcoming-changes-in-when-clause-contexts-parsing",
    "id": 3214
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Upcoming Electron update may require mandatory changes to native modules  \nWe plan to update to [Electron 22](https://www.electronjs.org/blog/electron-22-0) in our next stable release. This comes with implications for extensions that leverage native modules due to the enablement of the [V8 memory cage](https://www.electronjs.org/blog/v8-memory-cage): `ArrayBuffers` which point to external (\"off-heap\") memory are no longer allowed. This means that native modules which rely on this functionality in V8 will need to be refactored to continue working in VS Code `1.77` and later.  \nPlease follow the advise in the [Electron Blog post](https://www.electronjs.org/blog/v8-memory-cage#i-want-to-refactor-a-node-native-module-to-support-electron-21-how-do-i-do-that) for how to make your native module work with future versions of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_76#_upcoming-electron-update-may-require-mandatory-changes-to-native-modules",
    "id": 3215
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### OpenDialogOptions allowUIResources  \nExtensions that are aware when they are running in a remote extension host can use `allowUIResources` to cause the **Show local** button to display in open file dialogs. Extensions that use `allowUIResources` should always check the scheme of the URI that's returned.",
    "url": "https://code.visualstudio.com/updates/v1_76#_opendialogoptions-allowuiresources",
    "id": 3216
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Tooltips for QuickPickItems  \nThis iteration we are introducing a new proposed API for a `tooltip` property on `QuickPickItem`s. This property allows you to specify a tooltip for each item in a Quick Pick. The tooltip is displayed when the user hovers over the item or it can be toggled with `kbstyle(Ctrl+Space)`.  \nExample:  \n```ts\nawait vscode.window.showQuickPick([\n{\nlabel: 'label',\ntooltip: 'tooltip',\n},\n{\nlabel: 'label2',\ntooltip: new vscode.MarkdownString('tooltip2 [link](https://github.com)'),\n}\n], {\nplaceHolder: 'placeholder'\n});\n```  \nwhich will result in the following Quick Pick:  \n<video src=\"images/1_76/quickpick-tooltip.mp4\" placeholder=\"images/1_76/quickpick-tooltip.mp4\" autoplay loop controls muted title=\"Quick Pick with tooltips\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n_Theme: [Panda Theme](https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda) (preview on [vscode.dev](https://vscode.dev/editor/theme/tinkertrain.theme-panda))_  \nObviously, this is a simple example that doesn't need a tooltip. Tooltips are useful when you want to provide long descriptions that might have multiple lines or links to additional resources.  \nWe think that this property is a good addition to the Quick Pick API and we are looking forward to your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_76#_tooltips-for-quickpickitems",
    "id": 3217
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n## Engineering  \n### More Electron UtilityProcess adoption  \nAs part of our [process sandbox journey](https://code.visualstudio.com/blogs/2022/11/28/vscode-sandbox), we want to make sure that there are no more Node.js enabled browser windows in our application. This milestone we started to convert our last remaining process from a hidden Node.js browser window to an Electron [UtilityProcess](https://www.electronjs.org/docs/latest/api/utility-process). As part of this work, the file watcher process had to move out into its own utility process as well.  \nA new setting `window.experimental.sharedProcessUseUtilityProcess` enables the use of `UtilityProcess` and we plan to make this the default in the next release.",
    "url": "https://code.visualstudio.com/updates/v1_76#_more-electron-utilityprocess-adoption",
    "id": 3218
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### macOS 10.11 and 10.12 support has ended  \nAs mentioned in our [1.75 release notes](https://code.visualstudio.com/updates/v1_75#_eol-warning-for-macos-1011-and-1012), `1.76` is the last release that supports macOS 10.11 (OS X El Capitan) and 10.12 (macOS Sierra). Refer to our [FAQ](https://code.visualstudio.com/docs/supporting/faq#_can-i-run-vs-code-on-old-macos-versions) for additional information.",
    "url": "https://code.visualstudio.com/updates/v1_76#_macos-10.11-and-10.12-support-has-ended",
    "id": 3219
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@tjx666 (\u4f59\u817e\u9756)](https://github.com/tjx666)",
    "url": "https://code.visualstudio.com/updates/v1_76#_issue-tracking",
    "id": 3220
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2023 Release (1.76)  \n### Pull requests  \nContributions to `vscode`:  \n* [@davidnx](https://github.com/davidnx): Escape special glob chars when using \"Find in Folder\" [PR #166318](https://github.com/microsoft/vscode/pull/166318)\n* [@DerDemystifier (Bassim EL BAKKALI EL GAZUANI)](https://github.com/DerDemystifier): Set Opacity to MatchHighlight in QuietLight [PR #174296](https://github.com/microsoft/vscode/pull/174296)\n* [@dtivel (Damon Tivel)](https://github.com/dtivel)\n* Improve error handling and logging for verification of signed extensions [PR #174730](https://github.com/microsoft/vscode/pull/174730)\n* Bump distro [PR #175115](https://github.com/microsoft/vscode/pull/175115)\n* [@eronnen (Ely Ronnen)](https://github.com/eronnen)\n* Fix #173869 marking active line for code elements too in markdown pre\u2026 [PR #173870](https://github.com/microsoft/vscode/pull/173870)\n* fix #174711 Show Source command in Markdown custom editor [PR #174712](https://github.com/microsoft/vscode/pull/174712)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Point comment zone widget 'beak' arrow at single-line range (#173690) [PR #174291](https://github.com/microsoft/vscode/pull/174291)\n* Show unresolved comment glyph in gutter when appropriate (#149162) [PR #174418](https://github.com/microsoft/vscode/pull/174418)\n* [@hamzahamidi (Hamza Hamidi)](https://github.com/hamzahamidi): fix(keybindings): fix hashcode for scan codes & simple keys [PR #173456](https://github.com/microsoft/vscode/pull/173456)\n* [@hermannloose (Hermann Loose)](https://github.com/hermannloose): Add \"Expand All\" action to Comments panel [PR #173132](https://github.com/microsoft/vscode/pull/173132)\n* [@ibuky (ibuky)](https://github.com/ibuky): fix#171379 [PR #172175](https://github.com/microsoft/vscode/pull/172175)\n* [@jongwooo (Jongwoo Han)](https://github.com/jongwooo): Replace deprecated `set-output` command with environment file [PR #172691](https://github.com/microsoft/vscode/pull/172691)\n* [@jsanjose (JSJ)](https://github.com/jsanjose): Fixed OpenWithCodeContextMenu text [PR #173468](https://github.com/microsoft/vscode/pull/173468)\n* [@MarkZuber (Mark Zuber)](https://github.com/MarkZuber)\n* Add custom path for vscode-server socket files and named pipe length [PR #172481](https://github.com/microsoft/vscode/pull/172481)\n* Send large RPC messages in chunks [PR #174278](https://github.com/microsoft/vscode/pull/174278)\n* [@maski07 (Masaki Mori)](https://github.com/maski07): Fix #173735 [PR #174149](https://github.com/microsoft/vscode/pull/174149)\n* [@rtjoa (Ryan Tjoa)](https://github.com/rtjoa): Use markdown in the description of `Workbench \u203a List: Fast Scroll Sensitivity` [PR #173878](https://github.com/microsoft/vscode/pull/173878)\n* [@Schamper (Erik Schamper)](https://github.com/Schamper): Only raise OfflineError when actually offline [PR #172708](https://github.com/microsoft/vscode/pull/172708)\n* [@thernstig (Tobias Hernstig)](https://github.com/thernstig): Add shellscript `filenamePatterns` for `.env.*` [PR #173426](https://github.com/microsoft/vscode/pull/173426)\n* [@Viijay-Kr (Vijaya Krishna)](https://github.com/Viijay-Kr): #162727: 'Debug:Run to cursor' command is now available in inactive d\u2026 [PR #169819](https://github.com/microsoft/vscode/pull/169819)\n* [@walles (Johan Walles)](https://github.com/walles): Unfreeze Git Commit Message grammar II [PR #173195](https://github.com/microsoft/vscode/pull/173195)  \nContributions to `vscode-pull-request-github`:  \n* [@joshuaobrien](https://github.com/joshuaobrien)\n* Unify style of re-request review button [PR #4539](https://github.com/microsoft/vscode-pull-request-github/pull/4539)\n* Ensure `re-request-review` command is handled in activityBarViewProvider [PR #4540](https://github.com/microsoft/vscode-pull-request-github/pull/4540)\n* Prevent timestamp in comments overflowing [PR #4541](https://github.com/microsoft/vscode-pull-request-github/pull/4541)\n* [@kabel (Kevin Abel)](https://github.com/kabel): Ignore more files from the vsix [PR #4530](https://github.com/microsoft/vscode-pull-request-github/pull/4530)  \nContributions to `vscode-vsce`:  \n* [@calebcartwright (Caleb Cartwright)](https://github.com/calebcartwright): mention yarn testing requirement in docs [PR #830](https://github.com/microsoft/vscode-vsce/pull/830)\n* [@lucyydotp (Lucy)](https://github.com/lucyydotp): Don't append .js extension to .cjs files [PR #825](https://github.com/microsoft/vscode-vsce/pull/825)  \nContributions to `monaco-editor`:  \n* [@mathedu4all (Bao Hongchang)](https://github.com/mathedu4all): Update api doc url in README.md [PR #3550](https://github.com/microsoft/monaco-editor/pull/3550)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_76#_pull-requests",
    "id": 3221
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Hover control navigation  \nIt is now possible to focus on the hover control and scroll horizontally and vertically with the `up`, `down`, `home`, `end`, `page up` and `page down` keys. The keyboard shortcut to focus the hover control (`kb(editor.action.showHover)`) is the same as used to show the hover at the primary cursor position.",
    "url": "https://code.visualstudio.com/updates/v1_77#_hover-control-navigation",
    "id": 3222
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Accept a notification's primary action  \nTo accept a notification's primary action, users have historically needed to navigate to the Notification Center. **Notifications: Accept Notification Primary Action** (`kb(notification.acceptPrimaryAction)`) runs the primary action without leaving the current context.",
    "url": "https://code.visualstudio.com/updates/v1_77#_accept-a-notification's-primary-action",
    "id": 3223
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Sticky Scroll navigation  \nIt is now possible to focus on the Sticky Scroll lines and navigate with the `up` and `down` keys. You can use the `Enter` key to go to a selected line. To focus on the Sticky Scroll, you can run **Focus Sticky Scroll** from the Command Palette. Enable the Sticky Scroll UI via the **View: Toggle Stick Scroll** command.",
    "url": "https://code.visualstudio.com/updates/v1_77#_sticky-scroll-navigation",
    "id": 3224
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Workbench  \n### Copy GitHub deep links from editor gutter  \nYou can now copy deep links for an editor line or range from the editor gutter when working in a GitHub repository.  \nIn VS Code Desktop, to be able to create GitHub permalinks and HEAD links from the editor gutter, you need to install the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension. In [vscode.dev](https://vscode.dev), deep links for GitHub repositories are available out of the box.  \n<video src=\"images/1_77/github-permalink.mp4\" placeholder=\"images/1_77/github-permalink.mp4\" autoplay loop controls muted title=\"Copy GitHub permalinks\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nThese actions have also been added to the **Share** submenu in the editor tab context menu and Explorer context menu.",
    "url": "https://code.visualstudio.com/updates/v1_77#_copy-github-deep-links-from-editor-gutter",
    "id": 3225
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Recommend extensions by file content  \nVS Code can now recommend extensions based on the file content. For example, if you open a Python file that has notebook cells syntax, VS Code recommends the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension to render and run these cells appropriately.",
    "url": "https://code.visualstudio.com/updates/v1_77#_recommend-extensions-by-file-content",
    "id": 3226
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Select default provider for Sticky Scroll  \nSticky Scroll (**View: Toggle Sticky Scroll**) uses several different content models to create its headings. It is now possible to choose between the outline provider model, the folding provider model, and the indentation model to determine which lines to display in the Sticky Scroll UI. If a model is not available for the current language, VS Code falls back to the next model in the aforementioned order. The default model initially used can be changed with **Editor > Sticky Scroll: Default Model** (`editor.stickyScroll.defaultModel`).",
    "url": "https://code.visualstudio.com/updates/v1_77#_select-default-provider-for-sticky-scroll",
    "id": 3227
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Terminal  \n### Improved tab hover  \nThe terminal tab hover now shows the shell's process ID, the full command line, and an improved view of extension environment variable contributions.  \n![Hovering the terminal tab will reveal details about the terminal, this can be triggered with the keyboard via Ctrl/Cmd+K, Ctrl/Cmd+I](images/1_77/terminal-tab-hover.png)",
    "url": "https://code.visualstudio.com/updates/v1_77#_improved-tab-hover",
    "id": 3228
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Source Control  \n### Git LFS commit support in Remote Repositories  \nYou can now commit LFS-tracked files without installing [Git LFS](https://git-lfs.github.com) when editing GitHub and Azure Repos repositories. To get started, install the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) or [Azure Repos](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos) extensions on VS Code Desktop, run the **Open Remote Repository** command to open your repository, and commit your changes using the source control view. The extensions parse your `.gitattributes` configuration to determine whether your changed files should be committed to the repository provider's Git LFS storage.  \nTo disable this behavior, you can set `\"githubRepositories.experimental.lfs.write.enabled\": false` and `\"azureRepos.experimental.lfs.write.enabled\": false`.  \n> **Note**: Support for VS Code for the Web ([vscode.dev](https://vscode.dev)) is not yet available.",
    "url": "https://code.visualstudio.com/updates/v1_77#_git-lfs-commit-support-in-remote-repositories",
    "id": 3229
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### 3-way merge editor documentation  \nIf you haven't already tried using the 3-way merge editor to help you resolve merge conflicts, check out the [3-way merge editor](https://code.visualstudio.com/docs/sourcecontrol/overview#_3way-merge-editor) section in the Source Control documentation. The 3-way merge editor lets you simultaneously view and select incoming and current changes, preview the results, and even review the base version of the file before any changes.  \n![3-way merge editor](images/1_77/merge-editor-overview.png)  \nAnd don't miss [The EXTREMELY Helpful Guide to Merge Conflicts](https://youtu.be/HosPml1qkrg) YouTube video, which stars the 3-way merge editor.",
    "url": "https://code.visualstudio.com/updates/v1_77#_3-way-merge-editor-documentation",
    "id": 3230
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Notebooks  \n### Format on Save  \nYou can now enable format on save for notebooks. This formats the entire notebook when you save it. You can enable this by setting `notebook.formatOnSave.enabled` to `true`.  \n<video src=\"images/1_77/notebook-format-on-save.mp4\" placeholder=\"images/1_77/notebook-format-on-save.mp4\" autoplay loop controls muted title=\"Notebook format on save demo\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_77#_format-on-save",
    "id": 3231
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Notebook Find in output enabled by default  \nWhen you open Find control in a notebook, it will now search for text in cell inputs and outputs by default. You can turn this off by changing the options in the filter dropdown.  \n<video src=\"images/1_77/notebook-find-in-output.mp4\" placeholder=\"images/1_77/notebook-find-in-output.mp4\" autoplay loop controls muted title=\"Find in output by default demo\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_77#_notebook-find-in-output-enabled-by-default",
    "id": 3232
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Scrollable output regions  \nWith `notebook.output.scrolling` set to true, outputs and errors that exceed the `notebook.output.textLineLimit` will render within a scrollable region.  \n<video src=\"images/1_77/notebook-scrollable-output.mp4\" placeholder=\"images/1_77/notebook-scrollable-output.mp4\" autoplay loop controls muted title=\"Notebook scrollable output\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_77#_scrollable-output-regions",
    "id": 3233
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Languages  \n### TypeScript 5.0  \nVS Code now ships with TypeScript 5.0.2. This major update brings new TypeScript language features, improved performance, and many important improvements and bug fixes. You can read about TypeScript 5.0 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0).",
    "url": "https://code.visualstudio.com/updates/v1_77#_typescript-5.0",
    "id": 3234
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Switch case completions for JavaScript and TypeScript  \nVS Code can now help scaffold out switch statements over literal types in JavaScript or TypeScript:  \n<video src=\"images/1_77/ts-case-completions.mp4\" placeholder=\"images/1_77/ts-case-completions.mp4\" autoplay loop controls muted title=\"Completing the cases of a switch statement\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \nType `case` inside of the switch statement and accept the suggestion for `case ...`. This will automatically insert cases for all values of this type. Note that this only works when the value being switched over is a union or literal type.",
    "url": "https://code.visualstudio.com/updates/v1_77#_switch-case-completions-for-javascript-and-typescript",
    "id": 3235
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## VS Code for the Web  \n### .gitignore support  \nThis milestone we've added support for `.gitignore` files in GitHub and Azure Repos repositories on VS Code for the Web. In the video below, files that are untracked via `.gitignore` are greyed out in the Explorer view and do not appear in the Source Control view. This also works when using the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) or [Azure Repos](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos) extensions to remotely browse repositories on VS Code Desktop.  \nThe short video below adds the `.pxt` folder to `.gitignore` to hide the contained files from the Source Control view.  \n<video src=\"images/1_77/gitignore.mp4\" placeholder=\"images/1_77/gitignore.mp4\" autoplay loop controls muted title=\"Gitignore in VS Code for the Web\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_77#_.gitignore-support",
    "id": 3236
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Contributions to extensions  \n### Python  \n#### Move symbol refactoring  \nYou can now more conveniently refactor your Python code with [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) thanks to the new **Move symbol to** Code Actions!  \nTo try it out, select a symbol on a Python file and click on the light bulb that is presented (`kb(editor.action.quickFix)`). You can either move the symbol to an existing file or to a new file. If the location is a new file, a Python file is created with the same name as your symbol. All the applicable import references are automatically updated with the symbol move.  \n<video src=\"images/1_77/pylance-move-symbol.mp4\" placeholder=\"images/1_77/pylance-move-symbol.mp4\" autoplay loop controls muted title=\"Move symbol refactoring with Pylance\">\nSorry, your browser doesn't support HTML 5 video.\n</video>  \n#### Create environment from dependency files  \nWhen you open a `requirements.txt` or a `pyproject.toml` file, there's a new **Create Environment...** button in the editor that runs the **Python: Create Environment** command, allowing you to create a new virtual environment and install the listed dependencies.  \n![A pyproject.toml file open with dependencies listed, and a Create Environment button displayed on the bottom right corner for the editor](images/1_77/create-env-python-dependencies-files.png)  \n#### Finalized environments API for extension authors  \nThe Python extension's API for working with available Python environments on the user's machine is finalized. Extensions can also use the API to access the selected environment path used by the Python extension to run scripts, or update the path to their preferred one.  \nExamples of API usage are in the [Python Environment APIs](https://github.com/microsoft/vscode-python/wiki/Python-Environment-APIs#extension-api-usage) wiki page. We are also planning to release an npm types package in the future so it's easier to keep track of any changes in the Python extension API.",
    "url": "https://code.visualstudio.com/updates/v1_77#_python",
    "id": 3237
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Jupyter  \n#### Kernel picker improvements for Python environments  \nThe kernel picker now lists **conda environments** even if the Python runtime is not installed in them.  \nFor example, if a new conda environment is created using a CLI such as `conda create -n envML`, this new environment is displayed in the list of [Python Environments](https://code.visualstudio.com/docs/datascience/jupyter-kernel-management#_python-environments) under a section **Conda Env Without Python**.  \nWhen you select such an environment, the Python runtime and necessary dependencies are automatically installed into the environment.  \n![Notebook kernel picker with ability to select empty conda environments](images/1_77/notebook-kernel-empty-conda-env.png)",
    "url": "https://code.visualstudio.com/updates/v1_77#_jupyter",
    "id": 3238
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights include:  \n* Pull requests can be opened on vscode.dev from the **Pull Requests** view.\n* There's a new setting to check the **Auto-merge** option in the **Create Pull Request** view: `githubPullRequests.setAutoMerge`.  \nReview the [changelog for the 0.62.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0620) release of the extension to see the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_77#_github-pull-requests-and-issues",
    "id": 3239
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Remote connection picker on the Welcome page  \nThe Welcome page now supports an experimental remote connection picker **Connect to..** in the start list to help you get started with remote connections (SSH, Remote Tunnels, GitHub Codespaces, etc.). This feature is disabled by default and can be enabled by setting `workbench.remote.experimental.showStartListEntry` to `true`.",
    "url": "https://code.visualstudio.com/updates/v1_77#_remote-connection-picker-on-the-welcome-page",
    "id": 3240
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Extension authoring  \n### Upcoming Electron 22 update may require changes to native modules  \nWe plan to update to [Electron 22](https://www.electronjs.org/blog/electron-22-0) in our next Stable release. This comes with implications for extensions that use native modules due to enabling the [V8 memory cage](https://www.electronjs.org/blog/v8-memory-cage): `ArrayBuffers` that point to external (\"off-heap\") memory are no longer allowed.  \nWe plan to provide a custom memory allocator so that native modules that are not updated will still continue to work, but nevertheless, it is recommended to review your usages of allocated external memory. Please follow the advice in the [Electron blog post](https://www.electronjs.org/blog/v8-memory-cage#i-want-to-refactor-a-node-native-module-to-support-electron-21-how-do-i-do-that) for how to adopt this change.",
    "url": "https://code.visualstudio.com/updates/v1_77#_upcoming-electron-22-update-may-require-changes-to-native-modules",
    "id": 3241
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Finalized support for continuous test runs  \nSupport for [continuous test runs](https://github.com/microsoft/vscode/issues/134941) has been finalized. This API allows users to indicate to test extensions that they want to \"watch\" tests and continue to run them as changes are made.  \n```diff\nconst profile = ctrl.createRunProfile(/* ... */);\n+profile.supportsContinuousRun = true;\n\nfunction runHandler(request: vscode.TestRunRequest, cancellation: vscode.CancellationToken) {\n+  if (request.continuous) {\n+    startWatchingAndRunningTests(request);\n+  }\n\n// ...\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_77#_finalized-support-for-continuous-test-runs",
    "id": 3242
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### New when clause parser  \nThis VS Code release includes a new parser for [when clauses](https://code.visualstudio.com/api/references/when-clause-contexts) offering new features (for example, support for parentheses) and better correctness but also stricter rules. The release also includes a linter for when clauses in extension manifest files (`package.json`) to make sure they are syntactically correct. We encourage you to check your when clauses for possible breakage with the new parser. Also, if you use parentheses in a when clause, your extension is compatible with VS Code version 1.77 and later. There is more information about the changes in [issue #175540](https://github.com/microsoft/vscode/issues/175540).",
    "url": "https://code.visualstudio.com/updates/v1_77#_new-when-clause-parser",
    "id": 3243
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Inline completions in Source Control input  \nThe Source Control input box now supports [inline completions](https://github.com/microsoft/vscode-extension-samples/tree/main/inline-completions):  \n![The inline suggestions extension sample running in the Source Control input](images/1_77/scm-inline.png)  \nThe Source Control input box's document [language identifier](https://code.visualstudio.com/docs/languages/identifiers) is `scminput`.",
    "url": "https://code.visualstudio.com/updates/v1_77#_inline-completions-in-source-control-input",
    "id": 3244
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Notebook lifecycle event: onWillSaveNotebookDocument  \nThe `onWillSaveNotebookDocument` event is fired before a notebook document is saved. This event is useful for extensions that want to perform some action before a notebook document is saved. For example, an extension that wants to clean up notebook cell outputs before saving it can register a listener for this event and return the cell output edits to be applied.  \nHere is how an extension can register a listener for this event:  \n```ts\nvscode.workspace.onWillSaveNotebookDocument(e => {\nif (event.reason == vscode.NotebookDocumentSaveReason.Manual) {\nevent.waitUntil(new Promise((resolve) => {\nconst notebookEdit = new vscode.NotebookEdit(...);\nconst edit = new vscode.WorkspaceEdit();\nedit.set(event.document.uri, [notebookEdit]);\nresolve([edit]);\n}));\n}\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_77#_notebook-lifecycle-event:-onwillsavenotebookdocument",
    "id": 3245
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Engineering  \n### EOL warning for windows 8 and 8.1  \nVS Code Desktop will be updating to Electron >=23 in the next couple of milestones. With the Electron 23 update, VS Code desktop will no longer run on Windows 8 / Windows Server 2012 and Windows 8.1 / Windows Server 2012 R2. In this milestone, we have added deprecation notices for users on these affected platforms to prepare them for migration. If you are running one of these Windows versions, take a look at our [FAQ](https://aka.ms/vscode-faq-old-windows) for additional information.",
    "url": "https://code.visualstudio.com/updates/v1_77#_eol-warning-for-windows-8-and-8.1",
    "id": 3246
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Base image updated for Snap package  \nIn this iteration, we have updated our Snap package to use Core20 (built from Ubuntu 20.04) as the base image from our previous Core (built from Ubuntu 16.04). This change addresses missing GLIBC symbols for our CLI and fixes wayland support among other issues. You can find more context in [pull request #127320](https://github.com/microsoft/vscode/pull/127320).",
    "url": "https://code.visualstudio.com/updates/v1_77#_base-image-updated-for-snap-package",
    "id": 3247
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Exploring custom memory allocator for the extension host  \nTo adopt Electron 22, which comes with V8 sandbox enabled, and minimize the impact for extensions that rely on native modules that specifically use external array buffers, we have customized the existing memory allocator in the extension host. Specifically, the extension host now accommodates allocations from these native modules to be inside the V8 sandbox as a workaround to avoid fatal crashes. If you are interested in how/why we ended up with this solution, you can review [issue #177338](https://github.com/microsoft/vscode/issues/177338) for details.",
    "url": "https://code.visualstudio.com/updates/v1_77#_exploring-custom-memory-allocator-for-the-extension-host",
    "id": 3248
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n## Documentation  \n### New programming language topics  \n* [Ruby in VS Code](https://code.visualstudio.com/docs/languages/ruby) - Learn about Ruby language support (snippets, linting, debugging) using the [Ruby LSP](https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp) extension.\n* [Polyglot Notebooks](https://code.visualstudio.com/docs/languages/polyglot) - The [Polyglot Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode) extension enables polyglot programming for C#, PowerShell, JavaScript, and more.",
    "url": "https://code.visualstudio.com/updates/v1_77#_new-programming-language-topics",
    "id": 3249
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_77#_issue-tracking",
    "id": 3250
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2023 Release (1.77)  \n### Pull requests  \nContributions to `vscode`:  \n* [@andschwa (Andy Jordan)](https://github.com/andschwa): Handle `ParameterBindingException` for PowerShell 5.1 [PR #176004](https://github.com/microsoft/vscode/pull/176004)\n* [@azdavis (Ariel Davis)](https://github.com/azdavis): Put marker hovers on top [PR #166560](https://github.com/microsoft/vscode/pull/166560)\n* [@babakks (Babak K. Shandiz)](https://github.com/babakks): \ud83d\udcac Add PID and executable/arguments to terminal tab hover [PR #171258](https://github.com/microsoft/vscode/pull/171258)\n* [@billti (Bill Ticehurst)](https://github.com/billti): Fixes failure to load first installed web extension on desktop [PR #174175](https://github.com/microsoft/vscode/pull/174175)\n* [@brice-gros (Brice Gros)](https://github.com/brice-gros): support Git for Windows SDK [PR #177443](https://github.com/microsoft/vscode/pull/177443)\n* [@dkniffin (Derek Kniffin)](https://github.com/dkniffin): Add vscode.getEditorLayout command [PR #171224](https://github.com/microsoft/vscode/pull/171224)\n* [@dyedgreen (Tilman Roeder)](https://github.com/dyedgreen): Add support for three or more chord keyboard shortcuts [PR #175253](https://github.com/microsoft/vscode/pull/175253)\n* [@EliiseS (Eliise)](https://github.com/EliiseS): Fix issues with inconsistent line wrap application [PR #174688](https://github.com/microsoft/vscode/pull/174688)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Handle file uri in CommentAuthorInformation.iconPath (fix #174690) [PR #175361](https://github.com/microsoft/vscode/pull/175361)\n* Allow `--vscode-XXX` color variables in `<span>` style in Markdown (#176064) [PR #176312](https://github.com/microsoft/vscode/pull/176312)\n* Add color to icons in tabular view of Problems (fix #176621) [PR #176625](https://github.com/microsoft/vscode/pull/176625)\n* [@harbin1053020115 (ermin.zem)](https://github.com/harbin1053020115): chore: update IPCClient class comment [PR #175198](https://github.com/microsoft/vscode/pull/175198)\n* [@hermannloose (Hermann Loose)](https://github.com/hermannloose)\n* Add themeable color for comment glyphs on lines with unresolved threads [PR #174915](https://github.com/microsoft/vscode/pull/174915)\n* Consistently expand or collapse all comments on a line [PR #176967](https://github.com/microsoft/vscode/pull/176967)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fixes #174838 [PR #175646](https://github.com/microsoft/vscode/pull/175646)\n* [@jessebluemr (Marko Reiprecht)](https://github.com/jessebluemr): monaco-editor-3626: Ensure brackets are highlighted in languages like 'json' [PR #176084](https://github.com/microsoft/vscode/pull/176084)\n* [@lawvs (Whitewater)](https://github.com/lawvs): composition enter should not accept rename [PR #174829](https://github.com/microsoft/vscode/pull/174829)\n* [@mickaelistria (Mickael Istria)](https://github.com/mickaelistria): onEnterRules add prefix on newline inside Javadoc [PR #176800](https://github.com/microsoft/vscode/pull/176800)\n* [@nikdmello (Nikhil D'Mello)](https://github.com/nikdmello): fix screencast mode: only keyboard shortcuts no longer show command names [PR #176149](https://github.com/microsoft/vscode/pull/176149)\n* [@NWilson (Nicholas Wilson)](https://github.com/NWilson): Move DOM manipulation in RenameInputField to render-only [PR #174684](https://github.com/microsoft/vscode/pull/174684)\n* [@ohah (ohah)](https://github.com/ohah): Screencast ime bug fix(#176331) [PR #176150](https://github.com/microsoft/vscode/pull/176150)\n* [@orgads (Orgad Shaneh)](https://github.com/orgads): LinkParsing: Support \"foo line 123\" [PR #175906](https://github.com/microsoft/vscode/pull/175906)\n* [@poeck (Paul K\u00f6ck)](https://github.com/poeck): Oh, it's already 2023 [PR #172649](https://github.com/microsoft/vscode/pull/172649)\n* [@pouyakary (Pouya Kary \u2728)](https://github.com/pouyakary): Fixes #177580 [PR #177581](https://github.com/microsoft/vscode/pull/177581)\n* [@spahnke (Sebastian Pahnke)](https://github.com/spahnke): \\[Monaco\\] Add `monaco.editor.registerLinkOpener` method to be able to intercept opening links from the editor [PR #177055](https://github.com/microsoft/vscode/pull/177055)\n* [@SvetozarMateev (Svetozar Mateev)](https://github.com/SvetozarMateev): Add accelerator to process explorer's kill process action [PR #172755](https://github.com/microsoft/vscode/pull/172755)\n* [@tisilent (xie jialong \u52aa\u529b\u9e2d)](https://github.com/tisilent): Add z-index for .integrated-terminal [PR #175997](https://github.com/microsoft/vscode/pull/175997)\n* [@webarthur (Arthur Ronconi)](https://github.com/webarthur): Added features and fixes to screencast mode [PR #171845](https://github.com/microsoft/vscode/pull/171845)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114)\n* fix typos [PR #176764](https://github.com/microsoft/vscode/pull/176764)\n* fix: close #176789 supplement find widget border-bottom-radius [PR #176791](https://github.com/microsoft/vscode/pull/176791)\n* [@zardoy (Vitaly)](https://github.com/zardoy): Explorer: auto create folder when file path ends with / [PR #173901](https://github.com/microsoft/vscode/pull/173901)  \nContributions to `vscode-languageserver-node`:  \n* [@EhabY (Ehab Younes)](https://github.com/EhabY): Added registerCapability and unregisterCapability to the client middleware [PR #1179](https://github.com/microsoft/vscode-languageserver-node/pull/1179)  \nContributions to `vscode-pull-request-github`:  \n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong)\n* Allow empty labels array to be pushed to set-labels to remove all of them [PR #4637](https://github.com/microsoft/vscode-pull-request-github/pull/4637)\n* Allow empty array to be pushed to remove the last label [PR #4648](https://github.com/microsoft/vscode-pull-request-github/pull/4648)  \nContributions to `vscode-docs`:  \n* [@vinistock (Vinicius Stock)](https://github.com/vinistock): Add languages guide for Ruby [PR #6152](https://github.com/microsoft/vscode-docs/pull/6152)  \nContributions to `monaco-editor`:  \n* [@danboo (Dan Boorstein)](https://github.com/danboo): add perl module (.pm) extension [PR #3258](https://github.com/microsoft/monaco-editor/pull/3258)\n* [@nnnnoel (Noel Kim (\uae40\ubbfc\ud601))](https://github.com/nnnnoel): Add CommonJS, ESM extension for TS [PR #3264](https://github.com/microsoft/monaco-editor/pull/3264)\n* [@PmcFizz (Fizz)](https://github.com/PmcFizz): opt example  [PR #3726](https://github.com/microsoft/monaco-editor/pull/3726)\n* [@tamayika](https://github.com/tamayika): Fix playground samples type errors and add CI test [PR #3722](https://github.com/microsoft/monaco-editor/pull/3722)  \nContributions to `devcontainers/cli`:  \n* [@jarrodcolburn (jarrodcolburn)](https://github.com/jarrodcolburn): Doc: add shell highlighting to markdown [PR #436](https://github.com/devcontainers/cli/pull/436)\n* [@stuartleeks (Stuart Leeks)](https://github.com/stuartleeks): Fix typo (userEnvProb -> userEnvProbe) [PR #426](https://github.com/devcontainers/cli/pull/426)\n* [@trxcllnt (Paul Taylor)](https://github.com/trxcllnt): Incrementally copy features near the layer they're installed [PR #382](https://github.com/devcontainers/cli/pull/382)\n* [@ShauryaAg (Shaurya Agarwal)](https://github.com/ShauryaAg)\n* modify argument regex to only allow certain set of values [PR #361](https://github.com/devcontainers/cli/pull/361)\n* fixed fromStatement parsing to parse quotes in variable expressions [PR #356](https://github.com/devcontainers/cli/pull/356)\n* handle parsing variable expression in dockerfile [PR #337](https://github.com/devcontainers/cli/pull/337)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_77#_pull-requests",
    "id": 3251
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Improved and aligned Quick Pick experience  \nPreviously, users of accessibility mode experienced different behavior when working with the Command Palette and other Quick Picks. In accessibility mode, the first item of the Quick Pick wasn't selected in order to be fully accessible. This iteration, we've introduced new behavior that allows you to have the best of both worlds: an accessible **and** fast Quick Pick workflow allowing you to hit `kbstyle(Enter)` right away.  \n>**Note**: One tradeoff with this approach is that if an item in the Quick Pick is selected, you are not able to hear ARIA changes to the Quick Pick input box, due to an ARIA limitation. To hear these changes, you can press `kbstyle(Shift + Tab)` until no item of the list is selected.",
    "url": "https://code.visualstudio.com/updates/v1_78#_improved-and-aligned-quick-pick-experience",
    "id": 3252
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Terminal  \n#### Terminal accessible buffer improvements  \n* Jump between commands using `kb(workbench.action.terminal.accessibleBufferGoToNextCommand)` and `kb(workbench.action.terminal.accessibleBufferGoToPreviousCommand)`.\n* Use **Set Selection Anchor**, **Select from Anchor to Cursor**, and page navigation via `kb(cursorPageUpSelect)` and `kb(cursorPageDownSelect)`.\n* Preview the position when using **Go to Symbol in Accessible View** (`kb(editor.action.accessibleViewGoToSymbol)`) before accepting a command to go to a new location.\n* Engage with the output while dynamic updates occur.  \n#### Terminal Accessibility Help menu  \nThe terminal's **Accessibility Help** menu can now be navigated using arrow keys.  \n<video src=\"images/1_78/terminal-accessibility-help.mp4\" placeholder=\"images/1_78/terminal-accessibility-help.mp4\" autoplay loop controls muted title=\"the terminal accessibility help menu is entered and a user navigates it line by line with arrow keys\">\nSorry, your browser doesn't support HTML 5 video.\n</video>",
    "url": "https://code.visualstudio.com/updates/v1_78#_terminal",
    "id": 3253
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Diff editor audio cue improvements  \nVS Code now caches audio cues so they only have to be loaded once, yielding better responsiveness, and have improved the tones used for the diff editor.",
    "url": "https://code.visualstudio.com/updates/v1_78#_diff-editor-audio-cue-improvements",
    "id": 3254
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Go to Line/Column announcement  \nWhen **Go to Line/Column...** (`kb(workbench.action.gotoLine)`) is invoked, the screen reader now reads the associated line content.",
    "url": "https://code.visualstudio.com/updates/v1_78#_go-to-line/column-announcement",
    "id": 3255
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Workbench  \n### New default Color Themes  \nNew 'Dark Modern' and 'Light Modern' themes replace 'Dark+' and 'Light+' as the new default dark and light color themes.  \n![Dark Modern and Light Modern color themes](images/1_78/dark-light-modern-themes.png)",
    "url": "https://code.visualstudio.com/updates/v1_78#_new-default-color-themes",
    "id": 3256
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Profile templates  \n[Profiles](https://code.visualstudio.com/docs/editor/profiles) let you quickly switch your editor extensions, settings, and UI layout depending on your current project or task. To help you get started with profiles, we are shipping [Profile Templates](https://code.visualstudio.com/docs/editor/profiles#_profile-templates), which are curated profiles for different programming languages and scenarios. You can use a profile template as is or use it as a starting point to customize further for you own workflows.  \nYou select a profile template through the **Profiles** > **Create Profile...** dropdown:  \n![Create Profile dropdown with profile templates](images/1_78/profile-template-dropdown.png)  \nOnce you select a profile template, you can review the settings, extensions, and other data, and remove individual items if you don't want to include them in your new Profile.  \n![Profiles view showing the contents of the Data Science profile template](images/1_78/data-science-project-template.png)  \nAfter you create the new profile based on a template, changes made to settings, extensions, or UI are persisted to your profile.",
    "url": "https://code.visualstudio.com/updates/v1_78#_profile-templates",
    "id": 3257
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Glyph margin decoration rendering improvements  \nThis month, we've improved the rendering of decorations that appear in the editor margin. Debugging-related decorations such as breakpoints and stack frame pointers will always render next to the editor line numbers. Additional decorations render to the left of any debugging-related decorations. This allows you to view your breakpoints even if there are other decorations on the same line, such as test decorations or bookmarks. Note that clicks are not yet scoped to individual decorations.  \n![bookmarks displayed next to breakpoint and stack frame pointer decorations](images/1_78/glyph-decorations.png)",
    "url": "https://code.visualstudio.com/updates/v1_78#_glyph-margin-decoration-rendering-improvements",
    "id": 3258
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Copy images from the image preview  \nYou can now copy images from the built-in image preview using `kb(editor.action.clipboardCopyAction)` or by right-clicking in the preview and selecting **Copy**. The copied image data can be pasted back into VS Code or into other applications.",
    "url": "https://code.visualstudio.com/updates/v1_78#_copy-images-from-the-image-preview",
    "id": 3259
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Editor  \n### Drop selector  \nVS Code lets you drop files and content into text editors by holding `kbstyle(Shift)` before dropping. In this update, we've added UI that lets you change how this content is inserted into the file. After you drop an image into a Markdown file for example, this control lets you switch between inserting a Markdown image, a workspace relative path to the image, and the full path to the image:  \n<video src=\"images/1_78/drop-widget.mp4\" autoplay loop controls muted title=\"Changing how an image is dropped using the drop selector widget\"></video>  \nThe drop selector control appears whenever you drop content and there is more than one possible way it could be inserted. You can open the control by clicking on it or using `kb(editor.changeDropType)`. The drop selector goes away as soon as you start typing or move the cursor outside of the inserted text. You can also fully disable the drop selector control using `\"editor.dropIntoEditor.showDropSelector\": \"never\"`.  \nVS Code includes a few built-in ways to drop common content formats. Extensions can also add their own drop options using the `DocumentDropEditProvider` API.",
    "url": "https://code.visualstudio.com/updates/v1_78#_drop-selector",
    "id": 3260
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Standalone color picker  \nIt is now possible to launch a standalone color picker in order to insert and replace colors. To open the color picker, select **Show or Focus Standalone Color Picker** from the Command Palette.  \n![Standalone color picker control adjusted to blue color](images/1_78/standalone-color-picker.png)  \nWhen no colors or color formats are provided by extensions, the color-picker falls back to CSS-formatted colors. It is also now possible to visualize inline color decorators for CSS-formatted colors in all file types. To display these decorators, enable the **Editor: Default Color Decorators** (`editor.defaultColorDecorators`) setting.",
    "url": "https://code.visualstudio.com/updates/v1_78#_standalone-color-picker",
    "id": 3261
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### New snippet variable for timezone offset  \nA new snippet variable, `CURRENT_TIMEZONE_OFFSET`, is now available. This variable returns the current timezone offset in the format `+HH:MM` or `-HH:MM` (for example `-07:00`). This complements other time-related snippet variables such as `CURRENT_YEAR`, `CURRENT_MONTH`, `CURRENT_DAY_NAME`, etc.",
    "url": "https://code.visualstudio.com/updates/v1_78#_new-snippet-variable-for-timezone-offset",
    "id": 3262
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Diff algorithm improvements  \nWe continued improving the new diff algorithm in VS Code and deprecated the old algorithm. While the old algorithm is still the default for the diff editor, we will slowly change the default to the new algorithm and measure its performance.  \nYou can override the default by setting `diffEditor.diffAlgorithm` to `advanced` (new diff algorithm) or `legacy` (default).  \nThe new algorithm produces better diffs in many cases, but might be slower for some documents.  \nHere are some examples (legacy vs. advanced):  \n* Improved line insertion diffs by considering indentation:  \n![JSON file diff result using legacy algorithm](images/1_78/diff-example1-legacy.png)  \n![JSON file diff result using advanced algorithm](images/1_78/diff-example1-advanced.png)  \n* Improved word insertion diffs by considering space and separator characters:  \n![TypeScript imports word insertion diff using legacy algorithm](images/1_78/diff-example2-legacy.png)  \n![TypeScript imports word insertion diff using advanced algorithm](images/1_78/diff-example2-advanced.png)  \n* More natural diffs by minimizing not just the length of the diff, but also the number of chunks:  \n![TypeScript added line diff using legacy algorithm](images/1_78/diff-example3-legacy.png)  \n![TypeScript added line diff using advanced algorithm](images/1_78/diff-example3-advanced.png)  \n* Less noise by extending character level diffs to entire words if a part of the word changed significantly:  \n![TypeScript code change diff using legacy algorithm](images/1_78/diff-example4-legacy.png)  \n![TypeScript code change diff using legacy algorithm](images/1_78/diff-example4-advanced.png)  \nDiffing source code and even just evaluating the quality of a diff are hard problems and there is still room for improvement. If you encounter a diff where you think the algorithm could do better, try out our [diff playground](https://microsoft.github.io/monaco-editor/playground.html#XQAAAAJHAwAAAAAAAABBqQkHQ5NjdMjwa-jY7SIQ9S7DNlzs5W-mwj0fe1ZCDRFc9ws9XQE0SJE1jc2VKxhaLFIw9vEWSxW3yscw4B1FRgmSatbNyrNa50VLHWwDOn0YI7IfU0xJ0CGYU1vRtgnKPmZzQcQ1L9J7fCG48SpY2EIkpDE0S8hEos9yyee90RGD-wBeHe7sW88RInZzrk_ZW3jyJzSW_Xvd-X5Sb5qqa6C8CKmDej_-_rDHLSJRRYNrE9HyxNbsCq1E93qQGHETd9ab7kMGiL8C5K8AOGxTe69PiKFFKajiC0j4Vmv_8EEfs-kOqhfKi5-X4HhOM4OwOJEjvadYmtKTyTolnK5yDmgxV1Etg5Hj5Qzi10tewXOIWFf08DQcNm2YhOo-glAabugpGHC9BTZaUBH07kPrbyZjbuiKTPyoABP5oLEiuPLZjj7zFa4LAZCoHZ4WZLUhEbnWGkhiQE2tpW9j_GN7Ig) and share your feedback and ideas in our issue tracker!",
    "url": "https://code.visualstudio.com/updates/v1_78#_diff-algorithm-improvements",
    "id": 3263
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Inline completion improvements  \nThis iteration we rewrote the inline completion feature and fixed [a lot of bugs](https://github.com/microsoft/vscode/issues?q=is%3Aclosed+is%3Aissue+milestone%3A%22April+2023%22+label%3Ainline-completions).  \nMost notably, **Accept Word** now works across lines and there is a new command **Accept Line**. To support this feature, accepting the next word/line does not ask the extension again, as inline completion provider extensions would often report entirely different suggestions when asking for inline completions of the next line.",
    "url": "https://code.visualstudio.com/updates/v1_78#_inline-completion-improvements",
    "id": 3264
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Extensions  \n### Improved extension recommendations notification  \nThe extension recommendations notification now shows the publisher of the recommended extension. This helps you make a more informed decision before installing the extension. The following images show the new notification when there are recommendations for both a single extension and multiple extensions.  \n![Extension recommendations notification with a single recommendation](images/1_78/extension-recommendations-notification-single.png)\n![Extension recommendations notification with multiple recommendations](images/1_78/extension-recommendations-notification-multiple.png)",
    "url": "https://code.visualstudio.com/updates/v1_78#_improved-extension-recommendations-notification",
    "id": 3265
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Informing about installed deprecated extensions  \nIf you have an extension installed that has been deprecated, you will now receive a notification informing you about it and suggesting alternatives. This is shown only once per deprecated extension.  \n![Notification about deprecated extension](images/1_78/deprecated-extension-notification.png)",
    "url": "https://code.visualstudio.com/updates/v1_78#_informing-about-installed-deprecated-extensions",
    "id": 3266
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Source Control  \n### Quick Fixes in the Source Control input  \nCode Actions and Quick Fixes are now supported in the Source Control message box:  \n<video src=\"images/1_78/scm-quick-fix.mp4\" autoplay loop controls muted title=\"Fixing a spelling error in the Source Control quick input\"></video>  \nThe [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker) extension, for example, adds spelling fixes to the Source Control input. Extensions can contribute additional fixes and Code Actions.",
    "url": "https://code.visualstudio.com/updates/v1_78#_quick-fixes-in-the-source-control-input",
    "id": 3267
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### GitHub repository rulesets  \nVS Code already lets you define branch protection using the `git.branchProtection` setting. This milestone we added a new experimental feature that uses the recently announced [GitHub repository rulesets](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/about-rulesets) to determine whether a branch is protected. If you are using GitHub repository rulesets, you can enable this feature using the `github.branchProtection` setting.",
    "url": "https://code.visualstudio.com/updates/v1_78#_github-repository-rulesets",
    "id": 3268
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Notebooks  \n### Drop image files into notebooks to create attachments  \nYou can now drag and drop image files into notebook Markdown cells to create attachments. When you drop the image, use [the new drop selector control](#drop-selector) to select **Insert Image as Attachment**:  \n![Using the drop selector in a notebook Markdown cell](images/1_78/notebook-drop.png)  \nThis adds the image to the notebook as an attachment instead of simply adding a link to the image:  \n![An image file added as an attachment](images/1_78/notebook-drop-attachment.png)",
    "url": "https://code.visualstudio.com/updates/v1_78#_drop-image-files-into-notebooks-to-create-attachments",
    "id": 3269
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Toggle notebook output scrolling  \nYou can now toggle individual cells to display output in a scrollable region either by command **Notebook: Toggle Scroll Cell Output** (`kb(notebook.cell.toggleOutputScrolling)`) or the link in the truncation message.  \n<video src=\"images/1_78/notebook-toggle-scrolling.mp4\" autoplay loop controls muted title=\"Toggle notebook cell scrolling\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_78#_toggle-notebook-output-scrolling",
    "id": 3270
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Find control improvements  \nThe notebook Find control now searches keywords on what's visually presented by default. Users can change the search scope (Markdown source, Markdown preview, code source, and code outputs) through setting `notebook.find.scope`. Additionally, when replacing matches, the Markdown cell is converted to an editable cell so you can make the replacement. When you're done, the cell is converted back to Markdown, and the preview is restored.  \n<video src=\"images/1_78/notebook-find-replace.mp4\" autoplay loop controls muted title=\"Notebook Find and Replace improvements\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_78#_find-control-improvements",
    "id": 3271
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Languages  \n### Drag and drop videos into Markdown files  \nWant to insert a video into your Markdown? Just drag it into the editor and then hold `kbstyle(Shift)` to drop it into the file:  \n<video src=\"images/1_78/md-video-insert.mp4\" autoplay loop controls muted title=\"Inserting a video using drag and drop\"></video>  \nThis inserts a `<video>` tag pointing to the video file. You can drag videos from VS Code's Explorer or from your local operating system.",
    "url": "https://code.visualstudio.com/updates/v1_78#_drag-and-drop-videos-into-markdown-files",
    "id": 3272
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Strict nulls for JavaScript script blocks in HTML  \nYou can now use the `js/ts.implicitProjectConfig.strictNullChecks` setting to enable strict nulls for JavaScript in HTML script blocks:  \n![Strict nulls in a script block](images/1_78/html-strict-null.png)  \nWith strict nulls enabled, hovers and other IntelliSense features show when a type can be nullable. For example, notice how `el` now has a type of `HTMLElement | null`. This is because `document.getElementById` returns null if it can't find an element with that ID.",
    "url": "https://code.visualstudio.com/updates/v1_78#_strict-nulls-for-javascript-script-blocks-in-html",
    "id": 3273
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Jupyter  \n#### Restart commands  \nThe [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension now includes two new commands, enabling the user to restart the kernel and run cells directly. The commands are **Restart Kernel and Run All Cells** and **Restart Kernel and Run Up To Selected Cell**, and can be accessed via the command IDs `jupyter.restartkernelandrunallcells` and `jupyter.restartkernelandrunuptoselectedcell` respectively.  \n#### Reconnect to busy remote Jupyter kernels  \nIn previous releases, when connecting to a remote Jupyter kernel session, the Jupyter extension would wait for the kernel to be idle before connecting. This could take a long time if the kernel was busy running a long-running computation. In this release, the Jupyter extension connects to the kernel immediately, even if it is busy. This allows you to interrupt the kernel while it is busy.  \n#### Platform-specific Jupyter extensions  \nThe Jupyter extension now ships [platform-specific extensions](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#platformspecific-extensions), with each VSIX built for a specific platform (Windows 64 bit, Windows 32 bit, Linux x64, Alpine x64, macOS Intel, macOS Apple Silicon, etc.). The download size of the Jupyter extension for individual platforms is smaller, resulting in faster download times and less disk space usage.",
    "url": "https://code.visualstudio.com/updates/v1_78#_jupyter",
    "id": 3275
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights include:  \n* You can add team reviewers to a pull request.\n* All of the places where you can **Checkout default branch** now respect the `git.pullBeforeCheckout` setting.\n* GitHub's file level commenting is supported.  \nReview the [changelog for the 0.64.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0640) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_78#_github-pull-requests-and-issues",
    "id": 3276
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### GitHub Copilot  \n>**Note**: These features are available in the [GitHub Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extension.  \n#### Chat editors  \nOur first iteration on GitHub Copilot Chat enabled chat sessions in the sidebar. Now, we support opening the same chat view as an editor. This lets you customize the position of your chat session to be anywhere you want within your window layout.  \nYou can open a chat editor by running the command **Interactive Session: Open Editor** and then move it between editor groups just as you would with any other editor.  \n![A chat view as an editor](images/1_78/chat-editor.png)  \n#### Additional codeblock commands  \nThere are two new commands in the codeblock toolbar, **Insert into New File** and **Run in Terminal**. These are next to the existing commands **Copy** and **Insert at Cursor**, and give you extra options for quickly taking action on the code suggestions that are returned from Copilot.  \n![The codeblock toolbar showing the two new codeblock commands](images/1_78/chat-codeblock-commands.png)  \n#### Code Actions and inline chat  \nEditor chat sessions are now integrated with the Quick Fixes. Select the light bulb for a squiggle and there are options to fix or explain using Copilot.  \n<video src=\"images/1_78/chat-code-actions.mp4\" autoplay loop controls muted  title=\"Code Actions and Inline Chat\"></video>  \nIn addition to Code Actions, inline chat is now also available from the editor context menu.  \n#### Inline chat modes  \nThere is now a setting to change the different modes of inline chat: `inlineChat.editMode`.  \nThe options are:  \n* `live` - Apply AI suggested changes directly to the editor (default).\n* `livePreview` - Apply changes but renders them in an embedded diff editor.\n* `preview` - Show changes in a disconnected, embedded diff editor.  \n#### Similar commands in the Command Palette  \nWith the power of Copilot, the Command Palette is now able to show similar command results. To enable this, you must have an active Copilot subscription, be in the private preview of the chat view, and apply the setting:  \n```json\n\"workbench.commandPalette.experimental.useSemanticSimilarity\": true\n```  \nHere are some examples:  \n* \"turn on autosave\" being interpreted as **Toggle Auto Save**  \n![query \"turn on autosave\" is correctly resolved to Toggle Auto Save](images/1_78/command-palette-similar-results.png)  \n* \"add function\" includes additional results at the bottom with contributions from extensions  \n![query \"add function\" including Azure Functions Create Function command](images/1_78/command-palette-similar-results-2.png)  \n* Lastly, if your results yield no results, you can **Ask GitHub Copilot**, which puts what's in your filter box in a new chat for Copilot to handle.  \n![Ask GitHub Copilot \"no results\" option in the Command Palette](images/1_78/ask-copilot.png)  \nWe will be iterating in this space so stay tuned!",
    "url": "https://code.visualstudio.com/updates/v1_78#_github-copilot",
    "id": 3277
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Preview Features  \n### TypeScript 5.1 Support  \nThis update includes support for the upcoming TypeScript 5.1 release. Read the [TypeScript 5.1 Beta blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-1-beta) and [TypeScript 5.1 iteration plan](https://github.com/microsoft/TypeScript/issues/53031) for more details on what the TypeScript team is currently working on. Some editor tooling highlights:  \n* Linked editing support for JSX tags.\n* Snippet completions for `@param` JSDoc tags.  \nTo start using the TypeScript 5.1 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_78#_typescript-5.1-support",
    "id": 3278
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Rename matching JSX tags using F2  \nWhen you trigger rename on a JSX tag, VS Code now renames just the matching tag instead of trying to update all references to the tag:  \n<video src=\"images/1_78/ts-rename-jsx.mp4\" autoplay loop controls muted title=\"Renaming a JSX tag using F2\"></video>  \nThis requires TypeScript 5.1+ and matches how rename works in HTML.  \nYou can disable this behavior using `javascript.preferences.renameMatchingJsxTags` and `typescript.preferences.renameMatchingJsxTags`.",
    "url": "https://code.visualstudio.com/updates/v1_78#_rename-matching-jsx-tags-using-f2",
    "id": 3279
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Extension authoring  \n### Workspace edits can now create files directly from DataTransferFile  \nOne of the primary uses of the [drop into editor API](https://github.com/microsoft/vscode-extension-samples/tree/main/drop-on-document) is writing dropped files/content into the workspace. However in previous VS Code releases, this could be fairly slow for large files. This is because the file contents end up being copied between processes twice: first from the renderer to the extension host to read the file contents, and then back from the extension host to the renderer to write the file.  \n```ts\nclass CreateFileDropProvider implements vscode.DocumentDropEditProvider {\nasync provideDocumentDropEdits(_document: vscode.TextDocument, _position: vscode.Position, dataTransfer: vscode.DataTransfer, _token: vscode.CancellationToken): Promise<vscode.DocumentDropEdit | undefined> {\nconst pngFile = dataTransfer.get('image/png')?.asFile();\nif (!pngFile) {\nreturn;\n}\n\n// Read file\n// This results in the entire file contents being copied over to the extension host.\nconst contents = await pngFile.data();\n\n// Now create a workspace edit that writes the file into the workspace\n// This results in the same file contents from above being copied back again.\nconst additionalEdit = new vscode.WorkspaceEdit();\nconst path = vscode.Uri.joinPath(vscode.workspace.workspaceFolders![0].uri, 'image.png');\nadditionalEdit.createFile(path, { contents });\n\nconst edit = new vscode.DocumentDropEdit(path.fsPath);\nedit.additionalEdit = additionalEdit;\nreturn edit;\n}\n}\n```  \nNow you can avoid those extra copies though by passing a `DataTransferFile` directly to `WorkspaceEdit.createFile`:  \n```ts\nadditionalEdit.createFile(path, { contents: pngFile });\n```  \nThis should significantly improve performance, especially when working with larger files.",
    "url": "https://code.visualstudio.com/updates/v1_78#_workspace-edits-can-now-create-files-directly-from-datatransferfile",
    "id": 3280
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Resolve Code Action commands in resolveCodeAction  \nA `CodeActionProvider` can now lazily resolve the command of `CodeAction` in `resolveCodeAction`. Previously only the edits for the Code Action could be lazily resolved.  \nIf the command is expensive to compute, this allows a `CodeActionProvider` to defer this work until the Code Action is going to be applied.",
    "url": "https://code.visualstudio.com/updates/v1_78#_resolve-code-action-commands-in-resolvecodeaction",
    "id": 3281
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### editor/lineNumber/context menu  \nWe have finalized the `editor/lineNumber/context` menu. This allows extension authors to contribute actions to a context menu anchored to the editor line number and glyph margin. Actions contributed to this menu receive the line number in command arguments and can reference the `editorLineNumber` context key in their when clauses.",
    "url": "https://code.visualstudio.com/updates/v1_78#_editor/linenumber/context-menu",
    "id": 3282
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Authentication API improvements  \n#### Authentication session preference is now workspace aware  \nFor authentication providers that support being signed into multiple accounts at once (like Microsoft), the user is prompted to select an account to use when `vscode.authentication.getSession` with `createIfNone: true` is called.  \n**Previous behavior:**  \nThis preference is remembered until `vscode.authentication.getSession` is called with the `ClearSessionPreference` flag.  \n**New behavior:**  \nThis preference is remembered per-workspace until `vscode.authentication.getSession` is called in that workspace with the `ClearSessionPreference` flag.  \nThis behavior was introduced to allow extensions to use different accounts for different workspaces and allow those preferences to be remembered.  \n>**Note**: The preference is extension specific. So if one extension calls `vscode.authentication.getSession`, it will not affect the session preference for another extension calling `vscode.authentication.getSession`.  \n#### Microsoft Sovereign Cloud support in desktop  \nThis iteration, we introduced a new Authentication Provider into the core product: `Microsoft Sovereign Cloud`. This provider is for authenticating users to [Microsoft Cloud for Sovereignty](https://www.microsoft.com/en-us/industry/sovereignty/cloud) like Azure US Government, Azure China, etc. Under the hood, it works identically to the `Microsoft` auth provider, only with different URLs. If you want to use this auth provider, you can guide the user through setting the `microsoft-sovereign-cloud.endpoint` value, which has a couple of defaults but also supports custom Sovereign Cloud URLs as well.  \nKeep in mind that most users do not have a Sovereign Cloud account. Our recommendation is that if you want to support Sovereign Clouds, you should make it possible for users to sign in via Sovereign Clouds, but not include it as part of the mainline workflow so as not to confuse users.",
    "url": "https://code.visualstudio.com/updates/v1_78#_authentication-api-improvements",
    "id": 3283
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Document drop metadata  \nThis new proposal enriches the existing [drop into editor](https://github.com/microsoft/vscode-extension-samples/tree/main/drop-on-document) API to support the [new drop selector](#drop-selector). Providers can use it to provide a better drop into editor experience.  \nThe first part of this proposal adds a `label` property to `DocumentDropEdit`. This human readable label describes the edit and is shown in the drop selector UI:  \n![Labels shown in the drop selector](images/1_78/notebook-drop.png)  \nThe second part adds an extra `metadata` argument to `registerDocumentDropEditProvider`. This metadata argument identifies the provider and tells VS Code the types of content it applies to:  \n```ts\nvscode.languages.registerDocumentDropEditProvider('markdown', new InsertBase64ImageProvider(), {\n// Unique id that identities this provider\nid: 'insertBase64Image',\n\n// Array of mime types, such as `image/png` or `text/plain`, that this provider supports.\n// You can also use wildcards, such as `image/*` which matches any image content that is dropped.\ndropMimeTypes: [\"image/*\"]\n})\n```  \nThe `dropMimeTypes` array can help improve performance as your provider is only called for relevant dropped content.",
    "url": "https://code.visualstudio.com/updates/v1_78#_document-drop-metadata",
    "id": 3284
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n## Engineering  \n### Electron 22 update  \nIn this milestone, we have finished our [experiment](https://code.visualstudio.com/updates/v1_77#_exploring-custom-memory-allocator-for-the-extension-host) with using a custom allocator for extension host and are ready to bundle Electron 22 into VS Code Desktop. We want to thank everyone involved with self-hosting on [Insiders builds](https://code.visualstudio.com/insiders) and provided early feedback. This update comes with Chromium `108.0.5359.215` and Node.js `16.17.1`.",
    "url": "https://code.visualstudio.com/updates/v1_78#_electron-22-update",
    "id": 3285
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@tamuratak (Takashi Tamura)](https://github.com/tamuratak)\n* [@Kathund (Kath)](https://github.com/Kathund)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_78#_issue-tracking",
    "id": 3286
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2023 Release (1.78)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Support copying non-pngs and wait for focus to avoid race conditions [PR #180322](https://github.com/microsoft/vscode/pull/180322)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch): [typescript-language-features] Support replacing Go to Definition with Go to Source Definition by preference [PR #178840](https://github.com/microsoft/vscode/pull/178840)\n* [@c-claeys (Cristopher Claeys)](https://github.com/c-claeys): Add support for multiRange formatting [PR #163190](https://github.com/microsoft/vscode/pull/163190)\n* [@donaldnevermore (Donald33 Wang)](https://github.com/donaldnevermore): Support custom switch-case indentation [PR #179670](https://github.com/microsoft/vscode/pull/179670)\n* [@FlorentRevest (Florent Revest)](https://github.com/FlorentRevest): debug session: use queue to make sure debugee status get processed in correct order [PR #180410](https://github.com/microsoft/vscode/pull/180410)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Set a max-height on comments and add vertical scrolling (#174629) [PR #180044](https://github.com/microsoft/vscode/pull/180044)\n* [@hermannloose (Hermann Loose)](https://github.com/hermannloose): Allow individual comments to be marked as draft [PR #173305](https://github.com/microsoft/vscode/pull/173305)\n* [@iliazeus (Ilia Pozdnyakov)](https://github.com/iliazeus): Add support for F20-F24 keys in keyboard shortcuts [PR #179591](https://github.com/microsoft/vscode/pull/179591)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fixes configured default shell not used when connecting to remote [PR #175844](https://github.com/microsoft/vscode/pull/175844)\n* [@jjaeggli (Jacob Jaeggli)](https://github.com/jjaeggli): Accessibility help dialog uses semantic markup for assistive technology [PR #179726](https://github.com/microsoft/vscode/pull/179726)\n* [@KapitanOczywisty](https://github.com/KapitanOczywisty): Update PHP grammar from fork [PR #180100](https://github.com/microsoft/vscode/pull/180100)\n* [@LakshyAAAgrawal (Lakshya A Agrawal)](https://github.com/LakshyAAAgrawal): Fix typo in vscode.d.ts [PR #177377](https://github.com/microsoft/vscode/pull/177377)\n* [@mahmoudsalah1993 (Mahmoud Salah)](https://github.com/mahmoudsalah1993): Return the key correctly when having a single userDataProfileContentH\u2026 [PR #178517](https://github.com/microsoft/vscode/pull/178517)\n* [@Mai-Lapyst](https://github.com/Mai-Lapyst): Fix accidently starting all onTaskType extensions when running any task; fixes #175821 [PR #178679](https://github.com/microsoft/vscode/pull/178679)\n* [@maxmmyron (Max)](https://github.com/maxmmyron): Fix: diff editor arrow click enables breakpoint  [PR #179130](https://github.com/microsoft/vscode/pull/179130)\n* [@mblout (Michael Blout)](https://github.com/mblout): Add debug API for call stack selection changes (63943) [PR #179132](https://github.com/microsoft/vscode/pull/179132)\n* [@MonadChains (MonadChains)](https://github.com/MonadChains): Issue 151220/add current timezone offset variable [PR #170518](https://github.com/microsoft/vscode/pull/170518)\n* [@simon04 (Simon Legner)](https://github.com/simon04): terminalActions: \"Open Last URL\" [PR #173217](https://github.com/microsoft/vscode/pull/173217)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): fix: printing of extension id in mainThreadExtensionService [PR #179553](https://github.com/microsoft/vscode/pull/179553)\n* [@spahnke (Sebastian Pahnke)](https://github.com/spahnke): [Monaco] Add `monaco.editor.registerEditorOpener` method to be able to intercept editor open operations [PR #177064](https://github.com/microsoft/vscode/pull/177064)\n* [@sumneko (\u6700\u840c\u5c0f\u6c50)](https://github.com/sumneko): Update Lua grammar [PR #177798](https://github.com/microsoft/vscode/pull/177798)\n* [@tisilent (xie jialong \u52aa\u529b\u9e2d)](https://github.com/tisilent): Fix #159471 [PR #177961](https://github.com/microsoft/vscode/pull/177961)\n* [@tomheaton (Tom Heaton)](https://github.com/tomheaton): Fix `collapseAll` command when no folder is open [PR #180330](https://github.com/microsoft/vscode/pull/180330)\n* [@weartist (Han)](https://github.com/weartist)\n* support  to open both integrated terminal and external terminal with \u2026 [PR #168879](https://github.com/microsoft/vscode/pull/168879)\n* Added support for breakpointWidget to automatically adapt to width wh\u2026 [PR #179551](https://github.com/microsoft/vscode/pull/179551)\n* add confirmation before removing cell for #173481 [PR #179776](https://github.com/microsoft/vscode/pull/179776)\n* [@Wundero (Sam Riddle)](https://github.com/Wundero): Use defined variable instead of internal property [PR #178701](https://github.com/microsoft/vscode/pull/178701)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114)\n* fix: close #176763, modify the conditions to load vscode-web-playground [PR #176771](https://github.com/microsoft/vscode/pull/176771)\n* chore: rename wrong service name [PR #177954](https://github.com/microsoft/vscode/pull/177954)\n* fix: typos [PR #179581](https://github.com/microsoft/vscode/pull/179581)\n* [@YinDongFang (dongfang)](https://github.com/YinDongFang): Fix 'Window' key is treated as 'unknown' in Firefox (#175739) [PR #175740](https://github.com/microsoft/vscode/pull/175740)  \nContributions to `vscode-js-debug`:  \n* [@markw65](https://github.com/markw65): Fix the race for the javascript terminal too [PR #1654](https://github.com/microsoft/vscode-js-debug/pull/1654)  \nContributions to `vscode-json-languageservice`:  \n* [@zardoy (Vitaly)](https://github.com/zardoy)\n* [completions] Always show details such as `Default value` [PR #183](https://github.com/microsoft/vscode-json-languageservice/pull/183)\n* [completion] Don't suggest duplicates when `uniqueItems: true` [PR #184](https://github.com/microsoft/vscode-json-languageservice/pull/184)  \nContributions to `vscode-pull-request-github`:  \n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong)\n* Add x button to remove a label from a new PR [PR #4649](https://github.com/microsoft/vscode-pull-request-github/pull/4649)\n* Change file mode for execute husky hook on MacOS [PR #4695](https://github.com/microsoft/vscode-pull-request-github/pull/4695)\n* [@eastwood (Clinton Ryan)](https://github.com/eastwood): Gracefully handle errors where the SSH configuration file is corrupt or malformed [PR #4644](https://github.com/microsoft/vscode-pull-request-github/pull/4644)\n* [@kabel (Kevin Abel)](https://github.com/kabel)\n* Fix status checks rendering [PR #4542](https://github.com/microsoft/vscode-pull-request-github/pull/4542)\n* Make the display of PR number in tree view configurable [PR #4576](https://github.com/microsoft/vscode-pull-request-github/pull/4576)\n* Centralize all configuration strings into `settingKeys.ts` [PR #4577](https://github.com/microsoft/vscode-pull-request-github/pull/4577)\n* Move `PullRequest` to a shared location for reviewing of types [PR #4578](https://github.com/microsoft/vscode-pull-request-github/pull/4578)\n* [@ypresto (Yuya Tanaka)](https://github.com/ypresto): Fix wrong repo URL for nested repos in workspace (fix copy permalink) [PR #4711](https://github.com/microsoft/vscode-pull-request-github/pull/4711)  \nContributions to `monaco-editor`:  \n* [@dneto0 (David Neto)](https://github.com/dneto0): Add WebGPU Shading Language tokenizer, with tests [PR #3884](https://github.com/microsoft/monaco-editor/pull/3884)\n* [@kisstkondoros (Tamas Kiss)](https://github.com/kisstkondoros): Fix reference error in convert method of OutlineAdapter [PR #3924](https://github.com/microsoft/monaco-editor/pull/3924)\n* [@tamayika](https://github.com/tamayika): Change moduleResolution to node16 and adopt TS 5.0 [PR #3860](https://github.com/microsoft/monaco-editor/pull/3860)  \nContributions to `devcontainers/cli`:  \n* [@aaronlehmann (Aaron Lehmann)](https://github.com/aaronlehmann): Add support for Docker credential helpers [PR #460](https://github.com/devcontainers/cli/pull/460)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_78#_pull-requests",
    "id": 3287
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Settings editor  \nVoiceOver on macOS now reads the descriptions of enum setting options in the Settings editor. Try it out with enum settings such as `files.autoSave` and `editor.accessibilitySupport`.  \n![onFocusChange option description of files.autoSave setting being displayed by VoiceOver's high-contrast textbox on macOS](images/1_79/enum-setting-voiceover.png)",
    "url": "https://code.visualstudio.com/updates/v1_79#_settings-editor",
    "id": 3288
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Workbench  \n### Readonly mode  \nIn some development scenarios, it can be helpful to explicitly mark some of a workspace's folders or files as read-only. For example, if the folder or file contents is being managed by a different process (such as the `node_modules` folder that is managed by Node.js package manager), marking them are read-only can avoid inadvertent changes.  \nFor this use case, there are new settings to mark file paths as read-only in the Explorer and in text and notebook editors:  \n* `files.readonlyInclude` - Paths or glob patterns to make a file read-only if matching.\n* `files.readonlyExclude`- Paths or glob patterns to skip files from being read-only when they match `files.readonlyInclude`.\n* `files.readonlyFromPermissions` - Whether a file that has no write-permissions on disk should be read-only.  \nAccording to the rules of the settings, if a path is considered to be read-only, you cannot modify it from the Explorer (for example, delete it) and the text or notebook editor is read-only.  \n<video src=\"images/1_79/readonly-mode.mp4\" autoplay loop controls muted title=\"Readonly mode set for a node_modules folder\"></video>  \nFor more ad-hoc toggling of the read-only mode, there are new commands to change the mode for the current session only, overruling your setting configurations:  \n* **Set Active Editor Readonly in Session** - Mark active editor read-only.\n* **Set Active Editor Writeable in Session** - Mark active editor writeable.\n* **Toggle Active Editor Readonly in Session** - Toggle between read-only and writeable.\n* **Reset Active Editor Readonly in Session** - Reset the session state.",
    "url": "https://code.visualstudio.com/updates/v1_79#_readonly-mode",
    "id": 3289
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Windows UNC host allowlist improvements  \nAs part of an [important security fix](https://github.com/microsoft/vscode/security/advisories/GHSA-mmfh-4pv3-39hr), VS Code introduced an allowlist for UNC hosts. This milestone we addressed many of the usability problems reported by Windows users when they have UNC paths in their day to day work with VS Code.  \n#### Dialog improvements  \nThe confirmation dialog to allow a UNC host on startup now updates the `security.allowedUNCHosts` setting and adds the host when you select the checkbox.  \n![Windows UNC allow dialog](images/1_79/unc-dialog.png)  \nIn addition, clicking the **Learn More** button no longer closes the dialog.  \n#### New security.restrictUNCAccess setting  \nA new setting `security.restrictUNCAccess` lets you disable the UNC allowlist for hosts and restore the behavior to how it was before this security fix. We strongly advise against changing this setting, as it makes your system vulnerable again to the [Information Disclosure Vulnerability](https://github.com/microsoft/vscode/security/advisories/GHSA-mmfh-4pv3-39hr).",
    "url": "https://code.visualstudio.com/updates/v1_79#_windows-unc-host-allowlist-improvements",
    "id": 3290
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### New tab sizing option fixed  \nThe `workbench.editor.tabSizing` setting has a new option `fixed` that makes each tab equal width. When space becomes limited, tabs will shrink equally up to a minimum. The new setting `workbench.editor.tabSizingFixedMaxWidth` sets the initial size of the tab.  \n<video src=\"images/1_79/tab-size-fixed.mp4\" autoplay loop controls muted title=\"Fixed tab size\"></video>  \nIn this mode, when you rapidly close tabs using the mouse, the widths of tabs remain stable to allow for closing each tab by clicking onto the same point. The width is then adjusted when you leave the mouse from the editor tab area.",
    "url": "https://code.visualstudio.com/updates/v1_79#_new-tab-sizing-option-fixed",
    "id": 3291
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Network quality indication  \nWhen you are connected to a remote machine, the best experience for VS Code remote editing capabilities requires a good network connection with low latency. In this milestone, we updated the remote indicator in the Status bar to give you some feedback when either latency is very high or the network connection appears to be offline.  \n#### High latency (web, desktop)  \nWe periodically measure the latency to the remote you are connected to. When a certain threshold is hit, the remote indicator updates to reflect that.  \n![Slow network detection shown in the right of the Status bar](images/1_79/slow-network.png)  \n#### Offline detection (web only)  \nIf you are using a web browser to connect to a remote and you suddenly lose internet connection, the remote indicator updates to reflect that.  \n![Web offline detection displaying \"Network appears to be offline\" message from the Status bar](images/1_79/offline-indication.gif)",
    "url": "https://code.visualstudio.com/updates/v1_79#_network-quality-indication",
    "id": 3292
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Continue Working On  \nThe [Continue Working On](https://code.visualstudio.com/docs/sourcecontrol/github#_continue-working-on) feature allows you to store and retrieve working changes between VS Code development environments for the same repository, for example, when you upgrade from a local Git repository to a GitHub codespace, or when you switch between different machines for the same repository.  \nYou can now transfer working changes between development environments for a GitHub repository even if it is configured with an HTTP remote in one environment and an SSH remote in another. Additionally, we have started to transfer additional workbench state, such as your Source Control view state preference, for a more seamless transition.",
    "url": "https://code.visualstudio.com/updates/v1_79#_continue-working-on",
    "id": 3293
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Editor  \n### Paste as  \nWhen pasting a file into a text editor, there are multiple ways you might want to insert it. You may want an absolute path point to the file. You may want a path relative to the current workspace. Or you may even want something specific to the current editor's language, such as inserting a Markdown link to the file when pasting into Markdown. VS Code's new 'paste as' functionality gives you control over how the pasted content is inserted.  \nAfter pasting, VS Code now shows a small 'paste as' control if there are other ways the pasted content could have been inserted:  \n<video title=\"Using the paste as control to change how an image is inserted into a notebook Markdown cell\" src=\"images/1_79/paste-as-widget.mp4\" controls loop autoplay muted></video>  \nYou can open the 'paste as' control by clicking on it or using the `kb(editor.changePasteType)` keyboard shortcut. The paste selector goes away as soon as you start typing or move the cursor outside of the inserted text. You can also fully disable the drop selector control using `\"editor.pasteAs.showPasteSelector\": \"never\"`.  \nWhen you paste content into a Markdown cell in a notebook, for example, the 'paste as' control lets you switch between:  \n* Inserting the image as an attachment\n* Inserting a Markdown image reference\n* Inserting a relative path (for files in the workspace)\n* Inserting an absolute path  \nIf you prefer selecting how content in the clipboard should be pasted before actually pasting, you can instead use the new **Paste As...** command. This lets you select how the content should be pasted:  \n![Using the Paste As... command to select how content is pasted](images/1_79/paste-as-command.png)",
    "url": "https://code.visualstudio.com/updates/v1_79#_paste-as",
    "id": 3294
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Quick suggestions and snippets  \nQuick suggestions mean that VS Code shows suggestions as you type, without having to press `kb(editor.action.triggerSuggest)`. This feature is widely popular, around 90% of all suggestion sessions are started by typing. A large number of suggestions are accepted via `Tab` (versus `Enter` and typing accept characters).  \nWhen a snippet is being inserted, the `Tab` key is used to navigate between snippet placeholders. Now, when quick suggestion becomes active while a snippet is being inserted, the `Tab` key can accept a completion **or** navigate to the next snippet placeholder. To resolve this conflict, there is the `editor.suggest.snippetsPreventQuickSuggestions` setting to disable quick suggestions when a snippet is inserted. It defaulted to `true` and as long as this setting existed, we received feedback that it was confusing. So we have decided to change its default value to `false`, so that typing inside a snippet placeholder will trigger quick suggestions.  \nYou can then use the following keystrokes:  \n* Press `Tab` to accept a completion.\n* Press `Escape` to hide quick suggestions.\n* And `Tab` without suggestions navigates to the next snippet placeholder.",
    "url": "https://code.visualstudio.com/updates/v1_79#_quick-suggestions-and-snippets",
    "id": 3295
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Terminal  \n### Automatic shell integration for fish shell  \n[Shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) and its enhanced user experience will now automatically activate for fish shell. You may need to update fish for this to work.  \n![Shell integration in fish enables several features](images/1_79/terminal-fish-si.png)",
    "url": "https://code.visualstudio.com/updates/v1_79#_automatic-shell-integration-for-fish-shell",
    "id": 3296
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Overline support  \nThe overline escape sequences (`SGR 53`, `SGR 55`) specified in ECMA-48 are now supported in the terminal. The most common use of this sequence is to add a line above an app's \"status bar\" on the bottom row of the terminal.  \n![The overline feature is similar to underline but will draw a line on top of the text](images/1_79/terminal-overline.png)",
    "url": "https://code.visualstudio.com/updates/v1_79#_overline-support",
    "id": 3297
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Source Control  \n### Default branch name  \nStarting with this milestone, all new Git repositories created using VS Code set `main` as their default branch. If you prefer a different name for the default branch, you can change it with the `git.defaultBranchName` setting. When the setting is set to empty, VS Code defers to the default branch name configured in Git. Publishing a folder to GitHub also honors the default branch name configured on GitHub.",
    "url": "https://code.visualstudio.com/updates/v1_79#_default-branch-name",
    "id": 3298
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Branch picker integration with vscode.dev and GitHub  \nYou can now checkout a branch in vscode.dev or open it on GitHub.com from the branch picker on VS Code desktop.  \nIn the short video below, each branch listed in the branch picker dropdown has buttons on the right to either **Open on GitHub** or **Checkout on vscode.dev**.  \n<video src=\"images/1_79/git-branch-picker.mp4\" autoplay loop controls muted title=\"Open a branch on GitHub.com from the branch picker\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_79#_branch-picker-integration-with-vscode.dev-and-github",
    "id": 3299
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Similarity threshold  \n[Git status](https://git-scm.com/docs/git-status#Documentation/git-status.txt---find-renamesltngt) uses a similarity index (number of additions/deletions compared to the file's size) to determine whether an add/delete pair is considered a rename. You can now configure the similarity threshold with the `git.similarityThreshold` setting, which takes a value between `0` and `100`. The default value is `50`.",
    "url": "https://code.visualstudio.com/updates/v1_79#_similarity-threshold",
    "id": 3300
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Notebooks  \n### Rich content search  \nYou can now search for rich content in open notebooks from the Search control. If your notebook is open, the Search control shows results based on how it appears in the notebook editor (rather than searching the content of the raw source file). This also allows for replacing text in the notebook inputs.  \n<video src=\"images/1_79/rich-content-notebook-search.mp4\" autoplay loop controls muted title=\"Rich content notebook search\"></video>  \nUsing the new notebook search toggle, you can also filter which types of cell content you would like to search in.  \n<video src=\"images/1_79/rich-content-notebook-search-toggle.mp4\" autoplay loop controls muted  title=\"Rich content notebook toggle cell content\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_79#_rich-content-search",
    "id": 3301
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Improved cell output interaction  \nThe new context key `notebookOutputInputFocused` was added to determine if a text box within a cell output has focus, so that raw hotkeys a/b/j/k can safely be used while the output has focus. Focusing on an input box prevents those hotkeys from triggering.  \n<video src=\"images/1_79/notebook-output-hotkeys.mp4\" autoplay loop controls muted title=\"Use raw hotkeys while focused on the output\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_79#_improved-cell-output-interaction",
    "id": 3302
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Format on Run  \nNotebooks now can format cells upon cell execution. This will trigger using **Run Cell**, **Run All**, **Run Above/Below**, and combined kernel+run commands. This feature can be turned on via setting `\"notebook.formatOnCellExecution\": true`.  \n<video src=\"images/1_79/formatOnRun.mp4\" autoplay loop controls muted title=\"Format on cell execution\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_79#_format-on-run",
    "id": 3303
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Code Actions on save  \nNotebooks now support Code Actions being run upon save. Code Actions can be specified under the `notebook.codeActionsOnSave` setting. Extension authors can define providers using the standard typings for cell level Code Actions, or use the new `notebook.` prefix to define Code Actions that manage the entire notebook. You can review the [clean-nb-imports-ext](https://github.com/Yoyokrazy/clean-nb-imports-ext) sample extension to learn how extensions can use this new setting.",
    "url": "https://code.visualstudio.com/updates/v1_79#_code-actions-on-save",
    "id": 3304
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Languages  \n### TypeScript 5.1  \nVS Code now ships with TypeScript 5.1.3. This major update brings new TypeScript language features, better performance, and many important improvements and bug fixes. You can read about TypeScript 5.1 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-1).",
    "url": "https://code.visualstudio.com/updates/v1_79#_typescript-5.1",
    "id": 3305
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Linked editing for JSX tags  \nWith linked editing, when you change an opening JSX tag VS Code will automatically update the corresponding closing tag. This can be a great time saver:  \n<video title=\"Linked editing some JSX tags\" src=\"images/1_79/ts-linked-editing.mp4\" controls loop muted autoplay></video>  \nThe feature is off by default but can be enabled by setting:  \n```json\n\"editor.linkedEditing\": true\n```  \nYou can also explicitly start linked editing with the **Start Linked Editing** command.",
    "url": "https://code.visualstudio.com/updates/v1_79#_linked-editing-for-jsx-tags",
    "id": 3306
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Rename matching JSX tags using F2  \nWhen you trigger rename on a JSX tag, VS Code now renames just the matching tag instead of trying to update all references to the tag:  \n<video src=\"images/1_79/ts-rename-jsx.mp4\" autoplay loop controls muted title=\"Renaming a JSX tag using F2\"></video>  \nThis requires TypeScript 5.1+ and matches how rename works in HTML.  \nYou can disable this behavior using `javascript.preferences.renameMatchingJsxTags` and `typescript.preferences.renameMatchingJsxTags`.",
    "url": "https://code.visualstudio.com/updates/v1_79#_rename-matching-jsx-tags-using-f2",
    "id": 3307
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### JSDoc @param completions  \nWhen writing JSDoc comments, VS Code now shows suggestions for all missing parameters:  \n![JS Doc @param completions in a TypeScript file](images/1_79/js-param.png)  \nThis can help you quickly fill in the documentation.  \nIn JavaScript files, `@param` completions create placeholders for the parameter type description:  \n<video title=\"@param completions in a JavaScript file\" src=\"images/1_79/js-param-snippets.mp4\" controls autoplay loop muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_79#_jsdoc-@param-completions",
    "id": 3308
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Copy external media files into workspace on drop or paste for Markdown  \nWant to add an image or video into a Markdown document? Instead of wasting time first manually copying the file into your workspace and then adding a link to it, now you can just drop or paste the file into your Markdown. If the file currently isn't part of the workspace, VS Code will automatically copy the file into your workspace and insert a link to it:  \n<video title=\"Coping a file into the workspace by drag and dropping it\" src=\"images/1_79/markdown-copy.mp4\" controls loop muted autoplay></video>  \nThis also works great for image data in the clipboard. For example, if you take a screenshot with the Snipping tool on Windows, you can press **Paste** in a Markdown file and VS Code will create a new image file from the clipboard data and insert a Markdown image link to the new file. This also works on macOS if you [hold the Ctrl key while taking a screenshot](https://support.apple.com/en-us/HT201361) to copy it to the clipboard.  \nYou can also customize the behavior of this feature using a few settings:  \n#### markdown.copyFiles.destination  \nThe `markdown.copyFiles.destination` setting controls where new media files are created. This setting maps globs that match on the current Markdown document to image destinations. The image destinations can also use some simple variables. See the `markdown.copyFiles.destination` setting description for information about the available variables.  \nFor example, if we want every Markdown file under `/docs` in our workspace to put new media files into an `images` directory specific to the current file, we can write:  \n```jsonc\n\"markdown.copyFiles.destination\": {\n\"/docs/**/*\": \"images/${documentBaseName}/\"\n}\n```  \nNow when a new file is pasted in `/docs/api/readme.md`, the image file is created at `/docs/api/images/readme/image.png`.  \nYou can even use simple regular expressions to transform variables in a [similar way to snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variable-transforms). For example, this transform uses only the first letter of the document file name when creating the media file  \n```jsonc\n\"markdown.copyFiles.destination\": {\n\"/docs/**/*\": \"images/${documentBaseName/(.).*/$1/}/\"\n}\n```  \nWhen a new file is pasted into `/docs/api/readme.md`, the image is now created under `/docs/api/images/r/image.png`.  \n#### markdown.copyFiles.overwriteBehavior  \nThe `markdown.copyFiles.overwriteBehavior` setting controls whether newly created media files overwrite existing files.  \nBy default, VS Code will never overwrite existing files. Instead if you have a file called `image.png` and try pasting it into a Markdown document in a workspace where an `image.png` already exists, VS Code will instead create a new file called `image-1.png`. If you then try pasting another file called `image.png`, it will instead be created as `image-2.png`.  \nIf you prefer having existing files be overwritten by new files, set `\"markdown.copyFiles.overwriteBehavior\": \"overwrite\"`. Now VS Code will always use the original file name, overwriting any existing files that that path.  \n#### Disabling copying files into the workspace  \nVS Code will only try copying files into your workspace if they are not already part of workspace. Additionally, we currently only copy media files (images, videos, audio) into the workspace.  \nHowever if you find this new behavior too intrusive, you can disable it for both drop and paste by setting:  \n```json\n\"markdown.editor.drop.copyIntoWorkspace\": \"never\"\n\"markdown.editor.filePaste.copyIntoWorkspace\": \"never\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_79#_copy-external-media-files-into-workspace-on-drop-or-paste-for-markdown",
    "id": 3309
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### IntelliSense for HTML paths in Markdown files  \nMany Markdown dialects allow raw HTML tags to be used in Markdown documents. In this update, we've extended most of VS Code's Markdown IntelliSense features to file paths used in these HTML tags. This includes support for:  \n* [Path completions](https://code.visualstudio.com/docs/languages/markdown#_path-completions).\n* [Finding all references](https://code.visualstudio.com/docs/languages/markdown#_find-all-references-to-headers-and-links) to a linked to file.\n* [Automatically updating file paths](https://code.visualstudio.com/docs/languages/markdown#_automatic-link-updates-on-file-move-or-rename) when a file is renamed or moved.\n* [Safely renaming](https://code.visualstudio.com/docs/languages/markdown#_rename-headers-and-links) files using F2.\n* [Validating](https://code.visualstudio.com/docs/languages/markdown#_link-validation) that the linked to file exists in the workspace.  \n![Finding all references to an image file used in an HTML tag](images/1_79/md-html-support.png)",
    "url": "https://code.visualstudio.com/updates/v1_79#_intellisense-for-html-paths-in-markdown-files",
    "id": 3310
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Insert audio into Markdown  \nWhen you drag and drop or copy and paste an audio file into a Markdown document, VS Code now inserts an `<audio>` element.",
    "url": "https://code.visualstudio.com/updates/v1_79#_insert-audio-into-markdown",
    "id": 3311
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Syntax highlighting for JSON with Lines (JSONL) files  \n[JSON with Lines](https://jsonlines.org/) describe a sequence of JSON objects separated by newline characters. If the file extension `jsonl` is used, VS Code provides syntax highlighting.",
    "url": "https://code.visualstudio.com/updates/v1_79#_syntax-highlighting-for-json-with-lines-jsonl-files",
    "id": 3312
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Python  \n#### Run Python file in dedicated terminal  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension will now create a new terminal for each file you run using the **Run** button on the top of the editor or the **Python: Run Python File in Terminal** command, and will keep using this file's \"dedicated\" terminal every time you re-run it.  \n<video src=\"images/1_79/run-python-file-dedicated-terminal.mp4\" autoplay loop controls muted title=\"Running a Python file creates a separate, dedicated terminal for that file.\"></video>  \nAny time you wish to run the same file in a separate terminal, you can run select **Python: Run Python File in Dedicated Terminal** under the **Run** button menu.  \n![Options under the run button menu](images/1_79/run-python-file-dedicated-terminal-option.png)  \n#### Test discovery and run rewrite  \nThis month, we are beginning the roll out of our testing rewrite as an experiment. This rewrite redesigns the architecture behind test discovery and execution for both unittest and pytest in the extension. While it does not provide any additional functionality exposed to the user, it reduces buggy behavior and opens up new functional opportunities moving forward. The rewrite is being rolled out behind the experiment `pythonTestAdapter`, which you can opt in and out of using `python.experiments.optInto` in your `settings.json`. Eventually, we plan to remove this setting and adopt this new architecture. If you have any comments or suggestions regarding this experiment or rewrite, you can share them in the [vscode-python](https://github.com/microsoft/vscode-python) repository.  \n#### Configurable indexing limits with Pylance  \nThere's a new [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) setting that allows you to configure the file count limit for indexing: `\"python.analysis.userFileIndexingLimit\"`, which is set to 2000 by default. This setting can be helpful when working with very large projects and you're willing to compromise performance for an enhanced IntelliSense experience.",
    "url": "https://code.visualstudio.com/updates/v1_79#_python",
    "id": 3313
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Jupyter  \n#### Resume execution of cells against remote Jupyter kernels  \nThe [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension now supports resuming execution of cells against [remote Jupyter kernels](https://code.visualstudio.com/docs/datascience/jupyter-kernel-management#_existing-jupyter-server), if the cell is still busy executing, even when reopening the Notebook after having shutdown VS Code.  \nFor instance, assume you execute a long running section of code such as training of a model against a remote Jupyter kernel. This could take a few minutes or longer, so you might decide to shut down VS Code in the interim. A few minutes later VS Code is restarted with the same notebook opened and if the cell is still busy executing, this state is reflected in the Notebook cell and any new output is displayed in the cell output.  \nIf on the other hand, the cell completed execution while VS Code was shut down, the outputs generated in the interim would not be preserved in the notebook. Resuming executions in this manner and displaying new output is limited to simple output such as plain text, HTML, images, images, and the like. Restoring the state of widgets and other such complex outputs is not supported.  \n![Resuming notebook cell execution after closing and reopening VS Code](images/1_79/resumeNBCellExec.gif)",
    "url": "https://code.visualstudio.com/updates/v1_79#_jupyter",
    "id": 3314
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. Highlights include:  \n* Two new actions for viewing diffs of checked out PRs: **Compare Base With Pull Request Head (readonly)** and **Compare Pull Request Head with Local**.\n* The new setting `\"githubPullRequests.pullPullRequestBranchBeforeCheckout\"` can be used to turn off pulling a previously checked out PR branch when checking out that same branch again.  \nReview the [changelog for the 0.66.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0660) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_79#_github-pull-requests-and-issues",
    "id": 3315
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Preview features  \n### Project wide JS/TS IntelliSense on insiders.vscode.dev  \n[vscode.dev](https://insiders.vscode.dev) is a lightweight version of VS Code running fully in your browser. This iteration, we've significantly enriched vscode.dev's JavaScript and TypeScript support so that it can analyze all files in your workspace instead of being limited to currently opened files. This greatly improves navigation through code, letting you **Go to Definition** and **Find All References** to a symbol. It also improves IntelliSense by making sure settings from your `tsconfig.json` / `jsconfig.json` are respected. We even now support auto-imports while writing code.  \nIn the image below, the **References** view is displaying all references to `ITextDocument` in the workspace.  \n![Find All References in a TypeScript project on vscode.dev](images/1_79/vscode-dev-project-wide.png)  \nThese new IntelliSense features work for folders you open from your local machine and in GitHub repos you open using vscode.dev's built-in [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) extension.  \nKeep in mind that there are still a few limitations with JS/TS IntelliSense on vscode.dev:  \n* There is not currently IntelliSense support for third party libraries.\n* There is not currently support for [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) for JavaScript projects.\n* Because of the above limitations, all typing errors are disabled on vscode.dev.\n* Project wide IntelliSense is currently only enabled on the Insiders version of vscode.dev: `insiders.vscode.dev`. This feature is currently disabled on `github.dev`.  \nWe plan on addressing these limitations going forward, and are excited to continue enriching our JavaScript and TypeScript support on the web!",
    "url": "https://code.visualstudio.com/updates/v1_79#_project-wide-js/ts-intellisense-on-insiders.vscode.dev",
    "id": 3316
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Images in the terminal  \nThere is now experimental support for images in the terminal. Images in a terminal typically work by encoding the image pixel data as text, which is written to the terminal via a special escape sequence. The current protocols that are supported are [sixel](https://en.wikipedia.org/wiki/Sixel) and the [inline images protocol pioneered by iTerm](https://iterm2.com/documentation-images.html).  \nEnable this feature by setting:  \n```json\n\"terminal.integrated.experimentalImageSupport\": true\n```  \nOnce enabled, to test it, you can download and `cat` a `.six` example file from [the libsixel repository](https://github.com/saitoha/libsixel/tree/master/images):  \n![Running cat with a sixel file will print an image](images/1_79/terminal-image-six.png)  \nOr use the [imgcat python package](https://pypi.org/project/imgcat/) or [imgcat script](https://iterm2.com/documentation-images.html) with a png, gif or jpg file:  \n![Running imgcat with a png file will print the image](images/1_79/terminal-image-png.png)  \nThe current limitations of this feature are:  \n* Serialization does not work, so reloading a terminal will not retain any images (tracked in [jerch/xterm-addon-image#47](https://github.com/jerch/xterm-addon-image/issues/47)).\n* Copying the selection as HTML does not include the selected image (tracked in [jerch/xterm-addon-image#50](https://github.com/jerch/xterm-addon-image/issues/50)).\n* Animated gifs don't work (tracked in [jerch/xterm-addon-image#51](https://github.com/jerch/xterm-addon-image/issues/51)).\n* Images that are shorter than a cell will not work properly, this is a [design flaw with the sequences and also occurs in XTerm](https://github.com/microsoft/vscode/issues/183840#issuecomment-1569345048).",
    "url": "https://code.visualstudio.com/updates/v1_79#_images-in-the-terminal",
    "id": 3317
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### TypeScript 5.2 support  \nThis update includes support for the upcoming TypeScript 5.2 release. Check out the [TypeScript 5.2 iteration plan](https://github.com/microsoft/TypeScript/issues/54298) for more details about what the TypeScript team is currently working on. Some exciting upcoming tooling highlights include:  \n* A new **Inline constant** refactoring.\n* A new [Move to file](#move-to-file-refactoring-for-javascript-and-typescript) refactoring that lets you move a symbol into an existing file.  \nTo start using the TypeScript 5.2 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_79#_typescript-5.2-support",
    "id": 3318
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Move to file refactoring for JavaScript and TypeScript  \nThe **Move to file** refactoring in TypeScript 5.2 nightly lets you move a class, function, or constant into an existing file. This will also automatically update all references to the symbol and also update imports as needed:  \n<video src=\"images/1_79/ts-move-to-file.mp4\" autoplay loop controls muted title=\"Moving a symbol between Typescript files\"></video>  \nWhen you select **Move to file**, VS Code shows you a list of all files in the current TypeScript or JavaScript project. You can start typings to quickly find the file you want.  \nAlternatively, you can use **Select existing file...** to select a file using the normal file picker or **Enter new file path...** to specify a new file that should be created.  \nThis feature is still being actively developed, so give it a try and share your feedback!",
    "url": "https://code.visualstudio.com/updates/v1_79#_move-to-file-refactoring-for-javascript-and-typescript",
    "id": 3319
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Stricter Status bar API  \nThe API to create a Status bar item `createStatusBarItem` lets extensions pass an identifier. This identifier is used to control hiding and showing the Status bar item. The identifier should be unique for the extension but until now this wasn't enforced. With this release, we make this a little more strict and Status bar items that are created by the same extension with the same identifier will now be merged into one.",
    "url": "https://code.visualstudio.com/updates/v1_79#_stricter-status-bar-api",
    "id": 3320
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Tasks  \nThe task presentation option to [close](https://github.com/microsoft/vscode/blob/1899f626fdca44ff80c34ac0f0fe13fc0d3d0856/src/vscode-dts/vscode.d.ts#L7447-L7450) the terminal on task completion has been finalized.",
    "url": "https://code.visualstudio.com/updates/v1_79#_tasks",
    "id": 3321
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### EnvironmentVariableMutator.options  \nThis proposal adds options that can be provided to `EnvironmentVariableMutator`s, allowing you to specify exactly when the environment variable change is applied, either on process creation or in the shell integration script (after shell init scripts have run).  \n```ts\nconst collection = context.environmentVariableCollection;\n// Apply only when the process is created\ncollection.replace('FOO', 'bar');\n// Apply only during the shell integration script\ncollection.replace('FOO', 'bar', { applyAtProcessCreation: false, applyAtShellIntegration: true });\n// Apply twice, during process creation and the shell integration script\ncollection.replace('FOO', 'bar', { applyAtProcessCreation: true, applyAtShellIntegration: true });\n```",
    "url": "https://code.visualstudio.com/updates/v1_79#_environmentvariablemutator.options",
    "id": 3322
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Share provider  \nThe [Share API proposal](https://github.com/microsoft/vscode/blob/4137aa15f55c5ec3777daf6684908f64b439f6aa/src/vscode-dts/vscode.proposed.shareProvider.d.ts) allows extensions to provide ways to share resources in VS Code.  \nShare provider results are currently surfaced as a top-level **Share...** Command Palette action and as a new icon near the [Command Center](https://code.visualstudio.com/updates/v1_69#_command-center), provided you have opted in with `\"workbench.experimental.share.enabled\": true` and `\"window.commandCenter\": true`.  \n<video src=\"images/1_79/share-provider.mp4\" autoplay loop controls muted title=\"Share... icon next to the Command Center\"></video>  \nYou can leave feedback in the [API proposal issue #176316](https://github.com/microsoft/vscode/issues/176316).",
    "url": "https://code.visualstudio.com/updates/v1_79#_share-provider",
    "id": 3323
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Static Status bar items  \nStatus bar items can now be contributed statically via `package.json#contributes/statusBarItems`. With this contribution point, an extension can delay its activation and only activate when the Status bar item is interacted with, for example, on the command. Once activated, extensions can access their static Status bar items via the `vscode.window.createStatusBarItem` API.",
    "url": "https://code.visualstudio.com/updates/v1_79#_static-status-bar-items",
    "id": 3324
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### workspace.save and workspace.saveAs  \nThe [Save Editor API proposal](https://github.com/microsoft/vscode/blob/d823366750a14132c71ab9eea0696ea2bb64144f/src/vscode-dts/vscode.proposed.saveEditor.d.ts) allows extensions to trigger the flow of saving an editor either to its resource or by asking the user to provide a resource.  \nAll the methods for saving will return the resulting `Uri` or `undefined` if the operation was canceled. Untitled files will always ask the user for a destination unless a path is already associated.",
    "url": "https://code.visualstudio.com/updates/v1_79#_workspace.save-and-workspace.saveas",
    "id": 3325
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Authentication authGetSessions proposed API  \nAs we move closer to having [Multiple GitHub account support](https://github.com/microsoft/vscode/issues/127967), we have a new proposed authentication API that lets your extension get all accessible sessions for a specific set of scopes. [The proposal for these API additions](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.authGetSessions.d.ts) has several things to call out:  \n* The introduction of `vscode.authentication.getSessions` to get sessions for each account that your extension has access to. If you want to request an additional account, use `{ createIfNone: true, clearSessionPreference: true }` to ask the user to choose an account.\n* The `forceNewSession` property now can take in a `{ sessionToRecreate: session }` object so that consuming extensions can specify the exact session they want to be recreated.\n* The `createSession` function that an Auth Provider implements will now get passed in the session to recreate (using the extension's session preference if `true` is used for the value of `forceNewSession`).  \nThere is still more work involved to make this ready for adoption in the GitHub Authentication extension so if you're interested, you can follow along and [provide feedback in the issue that tracks this proposal](https://github.com/microsoft/vscode/issues/152399).",
    "url": "https://code.visualstudio.com/updates/v1_79#_authentication-authgetsessions-proposed-api",
    "id": 3326
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Window Activity API  \nA new API is available to notify extensions if the window becomes active or inactive. This can be used to dispose of or create persistent resources or processes that can be idled to save resources.  \nThis is implemented by the addition of a new `active` boolean to the existing `WindowState` type.  \n```js\nvscode.window.onDidChangeWindowState(state => {\nif (state.active && !longRunningProcess) {\nlongRunningProcess = startLongRunningProcess();\n} else if (!state.active && longRunningProcess) {\nlongRunningProcess.end();\nlongRunningProcess = undefined;\n}\n})\n```",
    "url": "https://code.visualstudio.com/updates/v1_79#_window-activity-api",
    "id": 3327
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n## Engineering  \n### Electron sandbox enabled for all users  \nWe are happy to announce that the Electron sandbox is rolling out to all of our users. This was a journey that started in early 2020 and now finally comes to an end. You can refer to the [Migrating VS Code to Process Sandboxing](https://code.visualstudio.com/blogs/2022/11/28/vscode-sandbox) blog post for more details.",
    "url": "https://code.visualstudio.com/updates/v1_79#_electron-sandbox-enabled-for-all-users",
    "id": 3328
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Extension host restart participation  \nCertain actions in the workbench can lead to the extension host restarting without reloading the current window. For example, when you switch profiles, VS Code restarts the extension host to handle running a different set of extensions for that profile.  \nSome custom and notebook editors however may no longer be functional after having switched profiles because a required extension is not installed in that profile. If the editor has unsaved changes, this could cause data loss. As a fix, components in VS Code can now participate in extension host restarts and make sure any unsaved changes are saved before the extension host restarts.  \n<video src=\"images/1_79/profile-switch.mp4\" autoplay loop controls muted title=\"Switch profile with hex editor dirty\"></video>  \nWe plan to further develop this experience in the next milestone so stay tuned for more!",
    "url": "https://code.visualstudio.com/updates/v1_79#_extension-host-restart-participation",
    "id": 3329
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Windows 8 and 8.1 support has ended  \nAs mentioned in our [v1.77 release notes](https://code.visualstudio.com/updates/v1_77#_eol-warning-for-windows-8-and-81), `v1.79` is the last release that supports Windows 8 / Windows Server 2012 and Windows 8.1 / Windows Server 2012 R2. Refer to our [FAQ](https://code.visualstudio.com/docs/supporting/faq#_can-i-run-vs-code-on-older-windows-versions) for additional information.",
    "url": "https://code.visualstudio.com/updates/v1_79#_windows-8-and-8.1-support-has-ended",
    "id": 3330
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Milestone automation  \nWe have implemented automated milestone replication throughout all of our GitHub repositories. This means that the monthly milestones established in `microsoft/vscode` serve as the foundation for all other milestones that are created and maintained.",
    "url": "https://code.visualstudio.com/updates/v1_79#_milestone-automation",
    "id": 3331
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2023 Release (1.79)  \n### Pull requests  \nContributions to `vscode`:  \n* [@akbyrd (Adam Byrd)](https://github.com/akbyrd): Fix issues with msCompile problem matcher [PR #182167](https://github.com/microsoft/vscode/pull/182167)\n* [@ashgti (John Harrison)](https://github.com/ashgti): Fixing an issue in debug output prompts to not show up as 'object Object' [PR #181964](https://github.com/microsoft/vscode/pull/181964)\n* [@benibenj (Benjamin Simmonds)](https://github.com/benibenj): TreeView Checkbox State set to 0 fixed [PR #183342](https://github.com/microsoft/vscode/pull/183342)\n* [@bitekas (Viktor Korsun)](https://github.com/bitekas): Fixing the Pseudoterminal onDidClose example [PR #180026](https://github.com/microsoft/vscode/pull/180026)\n* [@dan-petty (Daniel Petty)](https://github.com/dan-petty): Fix cannot specify custom path for built-in profiles on Windows [PR #175464](https://github.com/microsoft/vscode/pull/175464)\n* [@dcourv (Dylan)](https://github.com/dcourv): Fixes #181207 - Add padding to extension viewer bottom [PR #181723](https://github.com/microsoft/vscode/pull/181723)\n* [@DoctorKrolic](https://github.com/DoctorKrolic): Add `JSON Lines` language definition [PR #183035](https://github.com/microsoft/vscode/pull/183035)\n* [@dyedgreen (Tilman Roeder)](https://github.com/dyedgreen): Fix: Encode paths as URI components when opening a folder or workspace [PR #182398](https://github.com/microsoft/vscode/pull/182398)\n* [@ElectricRCAircraftGuy (Gabriel Staples)](https://github.com/ElectricRCAircraftGuy): all color themes: treat comment docstrings as comments too [PR #182162](https://github.com/microsoft/vscode/pull/182162)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Fix spelling in description of `security.restrictUNCAccess` setting [PR #182842](https://github.com/microsoft/vscode/pull/182842)\n* Prevent duplicate text in workspace folder picker when path has no parent (fix #183418) [PR #183427](https://github.com/microsoft/vscode/pull/183427)\n* [@hermannloose (Hermann Loose)](https://github.com/hermannloose)\n* Add separate overview ruler colors for resolved & unresolved comments [PR #181520](https://github.com/microsoft/vscode/pull/181520)\n* Fix color descriptions for comment icons [PR #181628](https://github.com/microsoft/vscode/pull/181628)\n* [@iAnujParajuli (Anuj Parajuli)](https://github.com/iAnujParajuli): Adds #181652 html audio tag for audio file [PR #183328](https://github.com/microsoft/vscode/pull/183328)\n* [@jacekkopecky (Jacek Kopeck\u00fd)](https://github.com/jacekkopecky)\n* Add settings for fixed-width tabs [PR #181729](https://github.com/microsoft/vscode/pull/181729)\n* fixed tab sizing: restore tab widths when the last tab is closed [PR #183188](https://github.com/microsoft/vscode/pull/183188)\n* [@jackpunt (Ganesh)](https://github.com/jackpunt)\n* Add a setting to mark file(s) readonly (nonEditable)[PR #161716](https://github.com/microsoft/vscode/pull/161716)\n* precedence for isReadonly() for #181708 [PR #181955](https://github.com/microsoft/vscode/pull/181955)\n* [@jairbubbles (Julien Richard)](https://github.com/jairbubbles): Fix context menu for deleted lines in diff inline mode [PR #182542](https://github.com/microsoft/vscode/pull/182542)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes ITerminalService#getActiveOrCreateInstance returns a disposed terminal [PR #180451](https://github.com/microsoft/vscode/pull/180451)\n* Fixes empty terminal editor after reload [PR #182121](https://github.com/microsoft/vscode/pull/182121)\n* Fixes terminal doesn't take editor background color into account [PR #182557](https://github.com/microsoft/vscode/pull/182557)\n* Fix Improve terminal find behavior when there are more than 1000 results [PR #182917](https://github.com/microsoft/vscode/pull/182917)\n* Fix cannot hide terminal find widget when pressing `esc` [PR #183090](https://github.com/microsoft/vscode/pull/183090)\n* Fix Terminals aren't persisting anymore [PR #183516](https://github.com/microsoft/vscode/pull/183516)\n* [@Juneezee (Eng Zer Jun)](https://github.com/Juneezee): refactor(userDataSync): replace `indexOf` with `includes` [PR #182635](https://github.com/microsoft/vscode/pull/182635)\n* [@markw65](https://github.com/markw65)\n* Fix a task startup race [PR #180546](https://github.com/microsoft/vscode/pull/180546)\n* Make _activeTasks synchronous wrt _executeTask [PR #180617](https://github.com/microsoft/vscode/pull/180617)\n* [@max06 (Flo)](https://github.com/max06): Fix: Changed bash-syntax to fish-syntax in shellIntegration [PR #181637](https://github.com/microsoft/vscode/pull/181637)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t)\n* Interactive window- don't leave space for insert toolbar [PR #181949](https://github.com/microsoft/vscode/pull/181949)\n* Prevent ligatures between inlay hints and editor contents (Fix #170449) [PR #182379](https://github.com/microsoft/vscode/pull/182379)\n* [@rehmsen (Ole)](https://github.com/rehmsen): Add F10 keybinding for debugger step, even on Web. [PR #183510](https://github.com/microsoft/vscode/pull/183510)\n* [@soulshined (David Freer)](https://github.com/soulshined): PHP Snippets Quality of Life and Continuity [PR #174889](https://github.com/microsoft/vscode/pull/174889)\n* [@TheSylvester (Sylvester Wong)](https://github.com/TheSylvester): Added use snippet body as a description when none is provided #181115 [PR #181381](https://github.com/microsoft/vscode/pull/181381)\n* [@tisilent (xie jialong \u52aa\u529b\u9e2d)](https://github.com/tisilent)\n* Modify innerWidth [PR #180480](https://github.com/microsoft/vscode/pull/180480)\n* Fix contributed profile icons [PR #182615](https://github.com/microsoft/vscode/pull/182615)\n* fix #182702 [PR #182705](https://github.com/microsoft/vscode/pull/182705)\n* [@ugultopu (Utku Gultopu)](https://github.com/ugultopu): Add similarity threshold option to Git extension [PR #178266](https://github.com/microsoft/vscode/pull/178266)\n* [@vadimcn](https://github.com/vadimcn): Preserve breakpoint ids in workspace state [PR #182704](https://github.com/microsoft/vscode/pull/182704)\n* [@Viijay-Kr (Vijaya Krishna)](https://github.com/Viijay-Kr): fix: #169151 fallback to editor hover if no breakpoint [PR #181274](https://github.com/microsoft/vscode/pull/181274)\n* [@Yash-Singh1 (Yash Singh)](https://github.com/Yash-Singh1): feat: .vuerc as json file [PR #153017](https://github.com/microsoft/vscode/pull/153017)\n* [@yshaojun](https://github.com/yshaojun): fix: fix perl bracket pair by adding unbalancedBracketScopes(#168110) [PR #181203](https://github.com/microsoft/vscode/pull/181203)  \nContributions to `vscode-css-languageservice`:  \n* [@romainmenke (Romain Menke)](https://github.com/romainmenke): css nesting : increase support [PR #345](https://github.com/microsoft/vscode-css-languageservice/pull/345)  \nContributions to `vscode-js-debug`:  \n* [@NotAndOr (notandor)](https://github.com/NotAndOr): Launch browser with argument user-data-dir specified without directory junction. [PR #1656](https://github.com/microsoft/vscode-js-debug/pull/1656)  \nContributions to `vscode-pull-request-github`:  \n* [@kabel (Kevin Abel)](https://github.com/kabel): Simplify `AuthProvider` enum [PR #4779](https://github.com/microsoft/vscode-pull-request-github/pull/4779)\n* [@SKPG-Tech (Salvijus K.)](https://github.com/SKPG-Tech): Add missing index in template [PR #4822](https://github.com/microsoft/vscode-pull-request-github/pull/4822)\n* [@unknovvn (Andzej Korovacki)](https://github.com/unknovvn): Use git setting to fetch before checkout in checkoutExistingPullRequestBranch [PR #4759](https://github.com/microsoft/vscode-pull-request-github/pull/4759)  \nContributions to `monaco-editor`:  \n* [@dlitsman (Dmitry Litsman)](https://github.com/dlitsman): Extend the \"Rendering Glyphs In The Margin\" example to include a transparent color note. [PR #3945](https://github.com/microsoft/monaco-editor/pull/3945)\n* [@dneto0 (David Neto)](https://github.com/dneto0): Avoid a hack in the WGSL lexer [PR #3887](https://github.com/microsoft/monaco-editor/pull/3887)\n* [@spahnke (Sebastian Pahnke)](https://github.com/spahnke)\n* JS, TS Add Monarch support for private identifiers [PR #3919](https://github.com/microsoft/monaco-editor/pull/3919)\n* JS Add static keyword [PR #3922](https://github.com/microsoft/monaco-editor/pull/3922)\n* [@titouanmathis (Titouan Mathis)](https://github.com/titouanmathis): Webpack Plugin Fix CJS being injected in ESM files [PR #3933](https://github.com/microsoft/monaco-editor/pull/3933)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_79#_pull-requests",
    "id": 3333
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### View Picker  \nA new picker is added that shows Views, Panels, Output channels and Terminals and allows for easy opening of those. You can open it via the **Open View** command or by typing `view` followed by a `space` into **Quick Open**.  \n![View Picker](images/1_8/view-picker.png)  \nOn Windows and Mac, you can press `kbstyle(Ctrl+Q)` to bring up the picker. On Linux, you can reassign the key binding if you want (`kbstyle(Ctrl+Q)` is assigned to quitting on Linux). Pressing `kbstyle(Ctrl+Q)` and holding the `kbstyle(Ctrl)` key while pressing the `kbstyle(Q)` allows you to jump to an entry from the list and open it after you release the keys.",
    "url": "https://code.visualstudio.com/updates/v1_8#_view-picker",
    "id": 3335
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Terminal improvements  \nSeveral improvements were made to the Integrated Terminal:  \n- Terminal copy and paste key bindings on Windows have changed to `kbstyle(Ctrl+C)` (when text is selected) and `kbstyle(Ctrl+V)` respectively.\n- The terminal will no longer scroll to the bottom when it receives output if you have scrolled up\n- `kbstyle(Cmd+K)` now clears the terminal when it has focus\n- A new setting `terminal.integrated.scrollback` enables changing the number of lines the terminal will remember before discarding",
    "url": "https://code.visualstudio.com/updates/v1_8#_terminal-improvements",
    "id": 3336
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Mac: Custom themed title  \nOn macOS, we are now drawing our own custom title instead of the native one to allow for the theme color to be picked up. This behavior can be changed with the new `window.titleBarStyle` setting. The new default is `custom` but you can set the value to `native` to go back to the old behavior after a restart.",
    "url": "https://code.visualstudio.com/updates/v1_8#_mac:-custom-themed-title",
    "id": 3337
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Configurable Activity Bar  \nThe Activity Bar is home to all views shipped with VS Code (File Explorer, Search, Debug). Many people use it to quickly switch between views and to see information about a view (for example, the number of outgoing files on the Git view).  \nIn this release, we improved the Activity Bar with several new features. First of all, it is now possible to reorder views using drag and drop. The order is kept and restored between restarts of VS Code. Second, you can now remove entries from the Activity Bar using the context menu on either the Activity Bar itself or the particular view to remove.  \nRemoved views will still show up in the Activity Bar when opened but their icon will not be displayed when you switch to another view. This is similar to the well-known behavior of an application dock where you can pin applications to always show them or unpin them if you want the application icon to be removed once the application quits.  \n![Scalable Activity Bar](images/1_8/viewlet.gif)  \nFinally, if the window gets small enough so that all view icons cannot show, a new overflow menu was added to show the views in a dropdown:  \n![Scalable Activity Bar](images/1_8/overflow.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_configurable-activity-bar",
    "id": 3338
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Hide the Activity Bar  \nA new setting `workbench.activityBar.visible` lets you hide the Activity Bar to the side of the view area.  \n![Hidden Activity Bar](images/1_8/hide-activitybar.gif)  \nWe also added a related entry to the **View** menu as well as in **Command Palette**. The related command has the id `workbench.action.toggleActivityBarVisibility`.",
    "url": "https://code.visualstudio.com/updates/v1_8#_hide-the-activity-bar",
    "id": 3339
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### New setting to hide Close buttons on Tabs  \nWe added a new setting `workbench.editor.showTabCloseButton` that will hide the Close buttons on tabs. Dirty indications are still visible at the same location but you will not accidentally close tabs with the mouse once enabled.",
    "url": "https://code.visualstudio.com/updates/v1_8#_new-setting-to-hide-close-buttons-on-tabs",
    "id": 3340
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Settings groups  \nWe enhanced visual representation of **Default Settings** groups to make settings navigation more user friendly. We also introduced a new group of most commonly used settings.  \n![Settings Groups](images/1_8/settings-groups.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_settings-groups",
    "id": 3341
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Quick Edit  \nWe introduced actions inside the **Default Settings** and `settings.json` editors which will help you quickly copy or update a setting.  \n![Settings Groups](images/1_8/quick-edit-settings.gif)",
    "url": "https://code.visualstudio.com/updates/v1_8#_quick-edit",
    "id": 3342
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### One Side by Side Settings editor  \nLast but not least, we grouped the **Default Settings** and `settings.json` editors into one side by side editor. This addresses the issue of managing two editors for settings.  \nExplorations and improvements continue... Stay tuned to our next release plan.",
    "url": "https://code.visualstudio.com/updates/v1_8#_one-side-by-side-settings-editor",
    "id": 3343
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Keyboard shortcuts  \n### Key binding command arguments  \nWe added support to invoke commands with arguments to the `keybindings.json` configuration file. This is useful if you often perform the same operation on a specific file or folder. Simply add a custom keyboard shortcut to do exactly what you want.  \nThe following is an example overriding the `kbstyle(Enter)` key to print some text:  \n```json\n{ \"key\": \"enter\", \"command\": \"type\",\n\"args\": { \"text\": \"Hello World\" },\n\"when\": \"editorTextFocus\" }\n```  \nThe type command will receive `{ \"text\": \"Hello World\"}` as first argument and add \"Hello World\" to the file instead of producing the default command.",
    "url": "https://code.visualstudio.com/updates/v1_8#_key-binding-command-arguments",
    "id": 3344
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Recommended keymap extensions  \nWe have added a command to list the most popular Keymap extensions which provide full sets of key bindings for popular editors or IDEs. To see the list, use **File** > **Preferences** > **Migrate Keyboard Shortcuts from...**.  \n![Recommended keymap extensions](images/1_8/recommended-keymap-extensions.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_recommended-keymap-extensions",
    "id": 3345
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Editor  \n### Selection menu  \nWe have added a Selection menu to the menu bar giving access to the most common selection and multi-selection actions:  \n![Selection menu](images/1_8/selection-menu.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_selection-menu",
    "id": 3346
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Text search performance  \nWe improved the [performance](https://github.com/microsoft/vscode/issues/15384) of full text search by running our search code in multiple processes in parallel. Your searches should complete much faster, especially in large workspaces.",
    "url": "https://code.visualstudio.com/updates/v1_8#_text-search-performance",
    "id": 3347
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Git clone  \nThere is now a new lightweight command to clone a Git repository into your machine and open it with VS Code. You can execute it from the **Command Palette** and searching for `Git: Clone`.",
    "url": "https://code.visualstudio.com/updates/v1_8#_git-clone",
    "id": 3348
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### New editor settings  \n* `window.showFullPath` - show the full path to an opened file in the window title instead of the workspace relative one.\n* `files.insertFinalNewline` - automatically add a newline at the end of files when saving.  \nThe `editor.renderLineHighlight` setting has been updated to support new options:  \n* `line` - Highlight the current line in the editor.\n* `gutter` - Highlight the line number in the gutter to the left of the current line.\n* `all` - Both gutter and line highlight.\n* `none` - No current line highlighting.  \n![render line highlight](images/1_8/render-line-highlight.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_new-editor-settings",
    "id": 3349
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Accessibility improvements of diff editor  \nWe enhanced the accessibility of the diff editor by adding `+` and `-` indicators for modifications in the diff editor. The feature is enabled by default and can be disabled by setting `diffEditor.renderIndicators` to `false`.  \n![diff indicators](images/1_8/diff-indicators.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_accessibility-improvements-of-diff-editor",
    "id": 3350
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Sublime Text compatibility  \nWe added four new commands which users from Sublime Text are familiar with:  \n- Join Lines - `editor.action.joinLines`\n- Transpose characters around the cursor - `editor.action.transpose`\n- Transform to Uppercase - `editor.action.transformToUppercase`\n- Transform to Lowercase - `editor.action.transformToLowercase`  \nThese commands are not bound to any keyboard shortcuts by default.",
    "url": "https://code.visualstudio.com/updates/v1_8#_sublime-text-compatibility",
    "id": 3351
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Snippets  \n### Snippet Variables  \nIn your custom snippets, you can now use variables. The syntax for variables is `$name` for simple variables and `${name:default}` for variables with a default value. Variables evaluate to their value, the empty string, or, if present, their default value. When a variable is unknown, we insert it as a placeholder.  \nThe following variables can be used:  \n* `TM_SELECTED_TEXT` - The currently selected text or the empty string.\n* `TM_CURRENT_LINE` - The contents of the current line.\n* `TM_CURRENT_WORD` - The contents of the word under cursor or the empty string.\n* `TM_LINE_INDEX` - The zero-index based line number.\n* `TM_LINE_NUMBER` - The one-index based line number.\n* `TM_FILENAME` - The filename of the current document.\n* `TM_DIRECTORY` - The directory of the current document.\n* `TM_FILEPATH` - The full file path of the current document.  \nThe following is an example of a snippet that surrounds the selected text with single quotes or, when no text is selected, inserts a `type_here`-placeholder.  \n```json\n\"in quotes\": {\n\"prefix\": \"inq\",\n\"body\": \"'${TM_SELECTED_TEXT:${1:type_here}}'\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_8#_snippet-variables",
    "id": 3352
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Snippets in JSON schemas  \nThe JSON language service uses JSON schemas to validate JSON documents as well as to provide completions. As a VS code specific extension to JSON schemas, you can now also specify snippets proposals in the schema for a richer experience. The snippet proposals are shown as additional completion proposals and use the snippet syntax to specify placeholders.\nSee the  [JSON documentation](https://code.visualstudio.com/docs/languages/json#_json-schemas-settings) for more information.",
    "url": "https://code.visualstudio.com/updates/v1_8#_snippets-in-json-schemas",
    "id": 3353
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Languages  \n### JavaScript language support in HTML  \nCoding assistance for JavaScript embedded in HTML is back! You get code completions and signature help for DOM and JQuery APIs, validation, hovers, Find References and Go To Definition, symbol highlighting and outline (Ctrl + Shift + o) and format. Note that the language support doesn't follow script includes, it only knows about definitions made in the same file.  \n![JavaScript editing in HTML](images/1_8/javascript-in-html.gif)",
    "url": "https://code.visualstudio.com/updates/v1_8#_javascript-language-support-in-html",
    "id": 3354
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### CSS improvements  \nThe CSS language support can now handle the new [@apply rule](https://tabatkins.github.io/specs/css-apply-rule/).  \nCSS in HTML was also improved, in particular for styles defined in attributes:  \n![CSS in HTML attributes](images/1_8/css-in-html.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_css-improvements",
    "id": 3355
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### TypeScript Update  \nWe now use [TypeScript 2.1](https://devblogs.microsoft.com/typescript/announcing-typescript-2-1/) for JavaScript and TypeScript language support. TypeScript 2.1 brings a number of new language and tooling features. [Read about what's new in TypeScript 2.1](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#typescript-21).",
    "url": "https://code.visualstudio.com/updates/v1_8#_typescript-update",
    "id": 3356
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### JavaScript  \nThe JavaScript in VS Code is powered by TypeScript and the new TypeScript version bundled with VS Code brings several improvements for JavaScript support:  \n* [Support for Object Rest and Spread](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#object-spread-and-rest). This was a heavily requested feature request by JS developers working with React. Now you no longer need to disable JavaScript validation when using Object Spread/Rest.\n* [Configuration inheritance](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#configuration-inheritance) for `jsconfig.json` files.\n* IntelliSense for paths in `import` and `require`.",
    "url": "https://code.visualstudio.com/updates/v1_8#_javascript",
    "id": 3357
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Markdown preview improvements  \nSeveral new settings were added to improve Markdown preview and let you more closely match your final Markdown rendering.  \n* `markdown.previewFrontMatter` - By default, VS Code now hides YAML front matter sections in preview. You can set to `show` if you'd like to review YAML metadata.  \nControls the font family, size and line height used in the Markdown preview.  \n* `markdown.preview.fontFamily`\n* `markdown.preview.fontSize`\n* `markdown.preview.lineHeight`",
    "url": "https://code.visualstudio.com/updates/v1_8#_markdown-preview-improvements",
    "id": 3358
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Linter Extensions  \n#### vscode-tslint  \nThe `vscode-tslint` extension now supports [TSLint 4.0](https://palantir.github.io/tslint/2016/11/17/new-for-4.0.html). This version of TSLint provides additional quick fixes for warnings. In addition, `vscode-tslint` adds a quick fix to disable a TSLint rule on the next line. The new TSLint version also adds support for linting JavaScript files. See the [CHANGELOG](https://github.com/microsoft/vscode-tslint/blob/main/tslint/CHANGELOG.md) for more details.  \n#### vscode-eslint  \nThe `vscode-eslint` extension now supports validating file types other than JavaScript. To enable this, you need to do the following:  \n- Configure ESLint with an additional plugin to do the actual validation. For example, to validate HTML files install `eslint-plugin-html` using `npm install eslint-plugin-html` and update the eslint configuration (e.g. `.eslintrc.json` file) with `\"plugin\": [ \"html\" ]`.\n- Add the corresponding language identifier to the `eslint.validate` setting. Something like `\"eslint.validate\": [ \"javascript\", \"javascriptreact\", \"html\" ]`. If the setting is missing, it defaults to `[\"javascript\", \"javascriptreact\"]`",
    "url": "https://code.visualstudio.com/updates/v1_8#_linter-extensions",
    "id": 3359
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Debugging  \n### Multitarget debugging  \nA first glimpse of _multi-target debugging_ was already available in the previous milestone. In this milestone, we've added the user interface for it. With this release, _multi-target debugging_ is no longer experimental.  \nUsing multi-target debugging is very simple: after you've started a first debug session, VS Code no longer blocks you from launching another session. As soon as a second session is up and running, the VS Code UI switches to _multi-target mode_:  \n- The individual sessions now show up as top level elements in the CALL STACK view.<BR>![Callstack View](images/1_8/debug-callstack.png)\n- The floating debug widget shows the currently _active session_ (and all other sessions are available in a dropdown menu).<BR>![Debug Actions Widget](images/1_8/debug-actions-widget.png)\n- Debug actions (e.g. all actions in the floating debug widget) are performed on the active session. The active session can be changed either by using the dropdown menu in the floating debug widget or by selecting a different element in the CALL STACK view.\n- Whenever a session stops (e.g. because a breakpoint or exception is hit), this session becomes the active session. This makes it possible to easily step between debug sessions just by pressing 'F5'.  \nAn alternative way to start multiple debug session is by using a so-called _compound_ launch configuration. A compound launch configuration lists the names of two or more launch configurations that should be launched in parallel. Compound launch configurations show up in the launch configuration dropdown menu.  \n```json\n{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Server\",\n\"program\": \"${workspaceRoot}/server.js\",\n\"cwd\": \"${workspaceRoot}\"\n},\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Client\",\n\"program\": \"${workspaceRoot}/client.js\",\n\"cwd\": \"${workspaceRoot}\"\n}\n],\n\"compounds\": [\n{\n\"name\": \"Server/Client\",\n\"configurations\": [\"Server\", \"Client\"]\n}\n]\n}\n```  \nThis [blog](https://medium.com/@auchenberg/introducing-simultaneous-nirvana-javascript-debugging-for-node-js-and-chrome-in-vs-code-d898a4011ab1#.fehi3batj) explains in detail how to setup a compound configuration for a Node.js backend and a browser frontend.",
    "url": "https://code.visualstudio.com/updates/v1_8#_multitarget-debugging",
    "id": 3360
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Adding individual Launch Configurations  \nWe've tried to improve the experience of adding new configurations to an existing `launch.json` by supporting snippet suggestions for IntelliSense. Snippet IntelliSense is available if your cursor is located inside the `configurations` array. Or just press the **Add Configuration** button to invoke snippet IntelliSense at the start of the array.  \n![Add Configuration](images/1_8/add-config.gif)  \nIntelliSense lists the launch configuration snippets that are contributed by all installed debug extensions. This makes it really easy to combine launch configurations for different debuggers (e.g. Chrome and Node) into one launch.json.  \nSince debug extensions will have to opt into this new feature, please allow some time until all debuggers have adopted this. In the November release, only the built-in Node.js debuggers contribute snippets.",
    "url": "https://code.visualstudio.com/updates/v1_8#_adding-individual-launch-configurations",
    "id": 3361
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Some UI Polish  \nPer [user request](https://github.com/microsoft/vscode/issues/14125), we now support rearranging the order of Watch expressions using drag and drop.  \nWe have polished the look of the debug start action UI by grouping the start button with the dropdown menu to tie them together:  \n![DebugStart](images/1_8/debug-start.png)  \nThe source and line number information in the BREAKPOINTS view has been rearranged to better align with the CALL STACK view.  \n![Breakpoints](images/1_8/breakpoints.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_some-ui-polish",
    "id": 3362
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Load environment variables from external file (node)  \nThe VS Code Node debugger now supports to load environment variables from a file and passes them to the node runtime.\nTo use this feature add an attribute `envFile` to your launch config and specify the absolute path to the file containing the environment variables:  \n```typescript\n//...\n\"envFile\": \"${workspaceRoot}/.env\",\n\"env\": { \"USER\": \"john doe\" }\n//...\n```  \nAny environment variable specified in the `env` dictionary will override variables loaded from the file.  \nHere is an example for an '.env' file:  \n```\nUSER=doe\nPASSWORD=abc123\n\n# a comment\n\n# an empty value:\nempty=\n\n# new lines expanded in quoted strings:\nlines=\"foo\\nbar\"\n```",
    "url": "https://code.visualstudio.com/updates/v1_8#_load-environment-variables-from-external-file-node",
    "id": 3363
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Diagnostics for Source Map Problems (node2)  \nWhen debugging a Node.js app, you may have seen breakpoints turn gray with the message \"Source map problem?\". The new `node2` debug adapter has two new features which make it easier to understand these issues.  \nTyping `.scripts` in the debug console during a debugging session will cause the adapter to print out all the information it has about loaded scripts and their sourcemaps.  \nAnd the `sourceMapPathOverrides` option in the launch config allows you to rewrite paths in your sourcemap file to enable sourcemaps in cases where the sourcemap file doesn't include enough information for the debug adapter to find the correct source files on disk. See more information about both of these features [in the `node2` README](https://github.com/microsoft/vscode-node-debug2#the-scripts-command).",
    "url": "https://code.visualstudio.com/updates/v1_8#_diagnostics-for-source-map-problems-node2",
    "id": 3364
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Back in time Debugging (node)  \nThis UI appears automatically for Chakra based Node.js runtimes. For details see this [blog](https://blogs.windows.com/msedgedev/2016/11/29/node-chakracore-vm-neutrality/#cr7wJLzUhp37TVcI.97).  \nThe _Back In Time Debugging_ support of the `node` debugger has been extended by a `Reverse Continue` action:  \n![Reverse Continue](images/1_8/reverse-continue.png)",
    "url": "https://code.visualstudio.com/updates/v1_8#_back-in-time-debugging-node",
    "id": 3365
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Extension Authoring  \n### Strict Null Checks supported  \nWe have updated the type definitions in `vscode.d.ts` to explicit spell out when a type can be `undefined` and/or `null`. With this extensions using the `strictNullChecks`-feature of TypeScript will get better type check results.",
    "url": "https://code.visualstudio.com/updates/v1_8#_strict-null-checks-supported",
    "id": 3366
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Snippet Completions  \nA completion item provider can now return completions that are inserted as snippet. When creating an item, make sure its `insertText` is a [`SnippetString`](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L2073). When selected, the editor will go to snippet mode, allowing the have placeholders and control over the cursor position.",
    "url": "https://code.visualstudio.com/updates/v1_8#_snippet-completions",
    "id": 3367
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Inspect Configurations  \nWith the new [`inspect`](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L2825)-function you can figure out where a configuration value was defined and what it default is.",
    "url": "https://code.visualstudio.com/updates/v1_8#_inspect-configurations",
    "id": 3368
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### TextDocument#getWordRangeAt  \nEver since the text document allows to ask for a [word-range](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L221) at a given position. To know what a word is VS Code uses the [word-pattern](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts#L2714) of the respective language. That's not always good enough and therefore you can now provide a regular expression that will be used instead.",
    "url": "https://code.visualstudio.com/updates/v1_8#_textdocument#getwordrangeat",
    "id": 3369
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Debugger Extension Authoring  \nIn the `launch.json`, the top level `debugServer` attribute has been deprecated (and support for it will be removed in the February milestone). Instead the `debugServer` attribute has to be specified per launch configuration. More details can be found [here](https://github.com/microsoft/vscode/issues/13783).  \nDebugger extensions can now contribute launch configuration snippets which will get surfaced in `launch.json` as explained in section \"Adding Individual Launch Configurations\". This can be done using the regular syntax for contributing snippets to VS Code, but as a `configurationSnippets` attribute inside the `debuggers` section of the `package.json`. An example of how Mock Debug is contributing debug configuration snippets can be found [here](https://github.com/microsoft/vscode-mock-debug/blob/main/package.json#L71).",
    "url": "https://code.visualstudio.com/updates/v1_8#_debugger-extension-authoring",
    "id": 3370
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### VS Code Debug Protocol  \nThe `OutputEvent` type now supports to send structured objects to the debug console and VS Code renders them as expandable objects. More details can be found [here](https://github.com/microsoft/vscode-debugadapter-node/issues/79).  \nA new `RestartRequest` has been added to the debug protocol. If a debug adapter opts into this, the VS Code debugger UI no longer implements the `Restart` action by terminating and restarting the debug adapter but instead sends a `RestartRequest` to the adapter. More details can be found [here](https://github.com/microsoft/vscode/issues/14189).",
    "url": "https://code.visualstudio.com/updates/v1_8#_vs-code-debug-protocol",
    "id": 3371
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n## Miscellaneous  \n### Electron update  \nIn this release, we updated from Electron 1.3.x to 1.4.x. This brings a Chrome update from version 52 to 53. We have heard from users that this update reduces font blurriness on Windows when running with >100% DPI.  \nAnother benefit is that we can now enable the High Contrast theme automatically when we detect that Windows is running in high contrast mode. VS Code will open in high contrast mode when Windows is configured as such and will also switch to high contrast mode if you change the mode in Windows while VS Code is running.",
    "url": "https://code.visualstudio.com/updates/v1_8#_electron-update",
    "id": 3372
  },
  {
    "content": "See what is new in the Visual Studio Code November 2016 Release (1.8)\n### Language Server Protocol  \nThe LSP now supports snippets in completion items just as the VS Code API does. In addition, two new requests got introduced supporting the dynamic registration of providers on the client side. Also the LSP NPM node modules were upgraded to TypeScript version 2.0. For details see [https://github.com/microsoft/language-server-protocol](https://github.com/microsoft/language-server-protocol) and [https://github.com/microsoft/vscode-languageserver-node](https://github.com/microsoft/vscode-languageserver-node)",
    "url": "https://code.visualstudio.com/updates/v1_8#_language-server-protocol",
    "id": 3373
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Accessibility help improvements  \nA new command **Open Accessibility Help** (`kb(editor.action.accessibilityHelp)`) opens a help menu based on the current context. It currently applies to the editor, terminal, notebook, chat panel, and inline chat features.  \nDisable the accessibility help menu hint and open additional documentation, if any, from within the help menu.",
    "url": "https://code.visualstudio.com/updates/v1_80#_accessibility-help-improvements",
    "id": 3375
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Accessibility help for notebooks  \nA new accessibility help menu was added for notebooks to provide information about the editor layout and navigating and interacting with the notebook.",
    "url": "https://code.visualstudio.com/updates/v1_80#_accessibility-help-for-notebooks",
    "id": 3376
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Chat audio cues  \nThere are now audio cues for the [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot) chat experience and can be enabled via `audioCues.chatRequestSent`, `audioCues.chatResponsePending`, and `audioCues.chatResponseReceived`.",
    "url": "https://code.visualstudio.com/updates/v1_80#_chat-audio-cues",
    "id": 3377
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Chat accessibility improvements  \nChat responses are provided to screen readers as soon as they come in and the inline and chat panel accessibility help menus contain more detailed information about what to expect and how to interact with each feature.",
    "url": "https://code.visualstudio.com/updates/v1_80#_chat-accessibility-improvements",
    "id": 3378
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Settings editor alt text improvements  \nThe Settings editor (accessible through the **Preferences: Open Settings (UI)** command) is now less verbose when navigating with a screen reader. In particular, the Settings scope switcher announces the actual name of the scope rather than a file path, and the settings description alt text has been cleaned up to not include raw Markdown formatting.  \n![Navigating through the Settings editor with NVDA on Windows](images/1_80/se-screenreader.gif)",
    "url": "https://code.visualstudio.com/updates/v1_80#_settings-editor-alt-text-improvements",
    "id": 3379
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Workbench  \n### Auto playing and looping for previewed videos  \nYou can now enable video autoplaying and looping for the built-in video file preview. The relevant settings are:  \n* `mediaPreview.video.autoPlay` \u2014Enable video autoplay. Autoplayed videos are automatically muted.\n* `mediaPreview.video.loop` \u2014 Enable video looping.  \nThese settings are off by default.",
    "url": "https://code.visualstudio.com/updates/v1_80#_auto-playing-and-looping-for-previewed-videos",
    "id": 3380
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### More help when editor is readonly  \nWith the introduction of [readonly mode](https://code.visualstudio.com/updates/v1_79#_readonly-mode) in VS Code last milestone, editors can be readonly due to workspace configuration.  \nThis milestone, we enhanced the notification message in the editor when you try to type in a readonly editor and in some cases provide a link to change the `files.readonly` settings.  \n<video src=\"images/1_80/editor-readonly.mp4\" autoplay loop controls muted title=\"Editor readonly message indicator\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_80#_more-help-when-editor-is-readonly",
    "id": 3381
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Default file dialog location  \nA new setting `files.dialog.defaultPath` can configure the default location that file dialogs (for example when opening or saving files or folders) should show when they open. This default is used only as a fallback when no other location is known, for example in empty VS Code windows.",
    "url": "https://code.visualstudio.com/updates/v1_80#_default-file-dialog-location",
    "id": 3382
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Disable maximizing editor groups on tab double click  \nA new setting `workbench.editor.doubleClickTabToToggleEditorGroupSizes` disables toggling the size of an editor group from maximized to restored when double-clicking on a tab of that group.",
    "url": "https://code.visualstudio.com/updates/v1_80#_disable-maximizing-editor-groups-on-tab-double-click",
    "id": 3383
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Control minimal width of fixed width tabs  \nA new setting `workbench.editor.tabSizingFixedMinWidth` controls the minimum size of a tab when `workbench.editor.tabSizing` is set to `fixed`. Fixed tab widths are explained in more detail in the [1.79 release notes](https://code.visualstudio.com/updates/v1_79#_new-tab-sizing-option-fixed).",
    "url": "https://code.visualstudio.com/updates/v1_80#_control-minimal-width-of-fixed-width-tabs",
    "id": 3384
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Editor group split sizing changed to 'auto'  \nA new value for the `workbench.editor.splitSizing` setting called `auto` is the new default. In this mode, splitting an editor group distributes the available size evenly to all editor groups only if none of the editor groups has been resized. Otherwise, the space of the split editor group is divided in half and placed in the new editor group.  \n<video src=\"images/1_80/auto-split-sizing.mp4\" autoplay loop controls muted title=\"Editor group auto split sizing\"></video>  \nThe intent of this change is to not break layouts that you have created when you split, but still preserve the previous default behavior of distributing the size evenly otherwise.",
    "url": "https://code.visualstudio.com/updates/v1_80#_editor-group-split-sizing-changed-to-'auto'",
    "id": 3385
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Search .gitignore exclude behavior  \nWhen `search.useIgnoreFiles` is set to `true`, the workspace's `.gitignore` is now respected regardless of whether the workspace is initialized as a Git repository or not.",
    "url": "https://code.visualstudio.com/updates/v1_80#_search-.gitignore-exclude-behavior",
    "id": 3386
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Max height for comments  \nThe setting `comments.maxHeight` lets you disable the max height restriction on the comments, such as those displayed for pull requests when using the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension.",
    "url": "https://code.visualstudio.com/updates/v1_80#_max-height-for-comments",
    "id": 3387
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Troubleshoot issues in VS Code  \nThere is a new command **Help: Troubleshoot Issue** in the Command Palette to help you troubleshoot an issue in VS Code. The launched workflow helps you identify the cause for an issue using a special Troubleshoot [profile](https://code.visualstudio.com/docs/editor/profiles) and the [extension bisect](https://code.visualstudio.com/updates/v1_52#_troubleshooting-extension-bisect) feature of VS Code. Extension bisect will enable and disable your installed extensions in a binary search while you indicate whether the issue reproduces or not. This narrows down the extension causing the issue and helps you provide the right information when reporting an issue.  \n<video src=\"images/1_80/issue-troubleshoot.mp4\" autoplay loop controls muted title=\"Troubleshoot Issue command demo\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_80#_troubleshoot-issues-in-vs-code",
    "id": 3388
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Disable Chromium sandbox  \nIf you have scenarios where launching VS Code desktop as an elevated user is unavoidable, for example you are launching VS Code with `sudo` on Linux or as administrator in an AppLocker environment on Windows, then you need to launch VS Code with the `--no-sandbox --disable-gpu-sandbox` command line options to have the application work as expected.  \nBased on the feedback in [issue #184687](https://github.com/microsoft/vscode/issues/184687), there are now two new settings to make it easier when you need to disable the Chromium sandbox:  \n1. A new command line option `--disable-chromium-sandbox` to disable the Chromium sandbox for all processes in the application. This new option can be used as a replacement for `--no-sandbox --disable-gpu-sandbox`. This option applies to any new process sandboxes that might be added by the runtime in future releases.  \n2. To persist disabling the Chromium sandbox across launches, do the following:  \n* Open the Command Palette (`kb(workbench.action.showCommands)`).\n* Run the **Preferences: Configure Runtime Arguments** command.\n* This command opens a `argv.json` file to configure runtime arguments. You might see some default arguments there already.\n* Add `\"disable-chromium-sandbox\": true`.\n* Restart VS Code.  \n**Note:** Do not use this setting unless you are seeing issues!",
    "url": "https://code.visualstudio.com/updates/v1_80#_disable-chromium-sandbox",
    "id": 3389
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Editor  \n### Skip subword when shrinking and expanding selection  \nThe **Expand** and **Shrink Selection** commands can now be configured to skip subwords. This is done via the `editor.smartSelect.selectSubwords` setting. By default, subwords are selected but this can now be disabled.  \n* `true` -> Co`|`deEditor selects `[Code]Editor`, then `[CodeEditor]`\n* `false` -> Co`|`deEditor selects `[CodeEditor]`  \nThis setting comes in handy when you use expand and shrink selection frequently with multiple cursors and on heterogeneous words.",
    "url": "https://code.visualstudio.com/updates/v1_80#_skip-subword-when-shrinking-and-expanding-selection",
    "id": 3390
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Improved Emmet support for CSS modules in JSX/TSX  \nEmmet supports a new set of abbreviations for JSX/TSX files. By typing `..test` in a JSX or TSX file, and expanding the abbreviation, the line `<div styleName={styles.test}></div>` is added.  \nThe attribute name and value prefix can be configured using the `emmet.syntaxProfiles` setting. By configuring the `emmet.syntaxProfiles` setting as follows:  \n```json\n\"emmet.syntaxProfiles\": {\n\"jsx\": {\n\"markup.attributes\": {\n\"class*\": \"className\",\n},\n\"markup.valuePrefix\": {\n\"class*\": \"myStyles\"\n}\n}\n}\n```  \nand then expanding the abbreviation `..test` in a JSX or TSX file, you get the abbreviation `<div className={myStyles.test}></div>` instead.",
    "url": "https://code.visualstudio.com/updates/v1_80#_improved-emmet-support-for-css-modules-in-jsx/tsx",
    "id": 3391
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Resizable content hover  \nIt is now possible to resize the content hover control. You can hover over the control borders and drag the sashes to change the size of the hover.  \n<video src=\"images/1_80/hover-resize.mp4\" autoplay loop controls muted title=\"Resizable hover control\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_80#_resizable-content-hover",
    "id": 3392
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Terminal  \n### Image support  \nImages in the terminal, which were previewed last release, are now enabled by default. Images in a terminal typically work by encoding the image pixel data as text, which is written to the terminal via a special escape sequence. The current protocols supported are [sixel](https://en.wikipedia.org/wiki/Sixel) and the [inline images protocol pioneered by iTerm](https://iterm2.com/documentation-images.html).  \nTo test images manually, you can download and `cat` a `.six` example file from [the libsixel repository](https://github.com/saitoha/libsixel/tree/master/images):  \n![Running cat with a sixel file will print an image](images/1_80/terminal-image-six.png)  \nOr use the [imgcat python package](https://pypi.org/project/imgcat/) or [imgcat script](https://iterm2.com/documentation-images.html) with a .png, .gif, or .jpg file:  \n![Running imgcat with a png file will print the image](images/1_80/terminal-image-png.png)  \nThis feature can be disabled by setting:  \n```json\n\"terminal.integrated.enableImages\": false\n```",
    "url": "https://code.visualstudio.com/updates/v1_80#_image-support",
    "id": 3393
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Multi-line and range link formats  \nThere is now support for new link formats, including links that need to scan upwards in order to find the file and links that have a range (line to line or character to character).  \n* @@ git range links:  \n![Links from git in the style '@@ -<from-file-range> +<to-file-range> @@' are now detected](images/1_80/terminal-link-git.png)  \n* OCAML's Dune-style range links:  \n![Links in the style 'File \"src/cli.js\", lines 15-19' are now detected](images/1_80/terminal-link-ocaml-lines.png)<br>![Links in the style 'File \"src/cli.js\", line 15, characters 8-34' are now detected](images/1_80/terminal-link-ocaml-chars.png)<br>![Links in the style 'File \"src/cli.js\", lines 15-19, characters 8-34' are now detected](images/1_80/terminal-link-ocaml-lines-chars.png)  \n* ESLint-style multiple line links:  \n![Links from ESLint that prefix a result with 'line:col' now are detected](images/1_80/terminal-link-eslint.png)  \n* Ripgrep-style multiple line links:  \n![Links from ripgrep that prefix a result with 'line:' now are detected](images/1_80/terminal-link-rg.png)",
    "url": "https://code.visualstudio.com/updates/v1_80#_multi-line-and-range-link-formats",
    "id": 3394
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Deprecated shell and shellArgs settings removed  \nThe settings `terminal.integrated.shell.*` and `terminal.integrated.shellArgs.*` were replaced by [terminal profiles](https://code.visualstudio.com/docs/terminal/profiles) over a year ago and have just been removed. If you're still using the old `shell` and `shellArgs` settings, here is an example before/after to help with migrating:  \n```jsonc\n// Before\n{\n\"terminal.integrated.shell.windows\": \"pwsh.exe\",\n\"terminal.integrated.shellArgs.windows\": [\"-Login\"],\n\n\"terminal.integrated.shell.osx\": \"bash\",\n\"terminal.integrated.shellArgs.osx\": [\"-l\"],\n}\n\n// After\n{\n\"terminal.integrated.profiles.windows\": {\n\"PowerShell Login\": {\n// Source is a special property that will use VS Code's logic to detect\n// the PowerShell or Git Bash executable.\n\"source\": \"PowerShell\",\n\"args\": [\"-Login\"],\n\"icon\": \"terminal-powershell\"\n},\n},\n\n\"terminal.integrated.profiles.osx\": {\n// This will override the builtin bash profile\n\"bash\": {\n\"path\": \"bash\",\n\"args\": [\"-l\"],\n\"icon\": \"terminal-bash\"\n}\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_80#_deprecated-shell-and-shellargs-settings-removed",
    "id": 3395
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Testing  \n### Terminal output support  \nPreviously, test output shown in the **Test Results** view would always be shown in an embedded text editor. This stripped it of rich styling such as colors, styles, and symbols it may have had when run in a terminal. In this release, we show output in a real xterm.js terminal.  \n![Results shown in the Tests Results panel with green checkmarks](images/1_80/testing-terminal.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \nNow that the **Test Results** view is fully featured, the commands to **Show Test Output** have been redirected to open the Test Results view instead of creating a temporary terminal.",
    "url": "https://code.visualstudio.com/updates/v1_80#_terminal-output-support",
    "id": 3396
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Source Control  \n### Close repository improvements  \nIn the past, users could close a repository either using the **Git: Close Repository** command or the **Close Repository** action in the Source Control view but there were certain actions (for example, opening a file from the closed repository) that would reopen the closed repository. This milestone we have made some improvements so the fact that a repository is closed is now persisted per workspace. Users can reopen closed repositories using the **Git: Reopen Closed Repositories...** command.",
    "url": "https://code.visualstudio.com/updates/v1_80#_close-repository-improvements",
    "id": 3397
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Notebooks  \n### Improved save performance for Remote Development  \nPreviously, saving a notebook in VS Code's Remote extension required sending the entire notebook to the extension host, which could be slow for large notebooks or slow network connections with auto save enabled. We have improved performance by only sending the changes to the notebook to the extension host, resulting in faster notebook saving and execution. While this feature is still disabled by default, we are confident that we will be able to enable it soon. To try it out, add `\"notebook.experimental.remoteSave\": true` to your settings. For more details, you can follow [issue #172345](https://github.com/microsoft/vscode/issues/172345).",
    "url": "https://code.visualstudio.com/updates/v1_80#_improved-save-performance-for-remote-development",
    "id": 3398
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Notebook global toolbar rework  \nThe notebook editor's global toolbar has been rewritten to adopt the workbench toolbar, allowing users greater customization of the toolbar actions. Users can now right-click and hide actions from the toolbar. Right-clicking on an action within the toolbar presents the option to hide that action, and also to reset the menu and bring back hidden actions.  \nThe toolbar continues to work with all three label strategies: `always`, `never`, and `dynamic`. You can change the label strategy via the setting `notebook.globalToolbarShowLabel`.  \n<video src=\"images/1_80/nb_toolbar_hide.mp4\" autoplay loop controls muted title=\"Notebook toolbar hide actions\"></video>  \n_Theme: [Monokai Pro (Filter Ristretto)](https://marketplace.visualstudio.com/items?itemName=monokai.theme-monokai-pro-vscode) (preview on [vscode.dev](https://vscode.dev/editor/theme/monokai.theme-monokai-pro-vscode/Monokai%20Pro%20(Filter%20Ristretto)))_",
    "url": "https://code.visualstudio.com/updates/v1_80#_notebook-global-toolbar-rework",
    "id": 3399
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Interactive Window backup and restore  \nThe Python Interactive Window is now fully integrated with the [hot exit](https://code.visualstudio.com/docs/editor/codebasics#_hot-exit) feature and restores the editor state between VS Code reloads. The `interactiveWindow.restore` setting no longer has any effect and was removed.  \nIf hot exit is disabled, there is a prompt when closing VS Code giving you the option to save the editor state as a `.ipynb` file.  \n<video src=\"images/1_80/interactive-window-restore.mp4\" autoplay loop controls muted title=\"Restoring Interactive Window editor\"></video>  \n_Theme: [Bearded Theme feat. Gold D Raynh](https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme) (preview on [vscode.dev](https://vscode.dev/editor/theme/BeardedBear.beardedtheme/Bearded%20Theme%20feat.%20Gold%20D%20Raynh))",
    "url": "https://code.visualstudio.com/updates/v1_80#_interactive-window-backup-and-restore",
    "id": 3400
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Languages  \n### Markdown copy image from preview  \nA new context menu for images in the Markdown preview allows you to copy the image from the preview and paste it into the Markdown editor. When copying the image, the preview editor must be focused.  \n<video src=\"images/1_80/copy-image.mp4\" autoplay loop controls muted title=\"Copy image from Markdown preview\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_80#_markdown-copy-image-from-preview",
    "id": 3401
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Markdown format pasted URLs as Markdown links  \nThe new `markdown.editor.pasteUrlAsFormattedLink.enabled` setting (default `false`) lets you insert links into the Markdown editor that are automatically formatted into Markdown links. If you select some text to be replaced with the pasted link, the selected text will automatically become the title of the link. If no text is selected, there will be a default link title. This feature applies to external browser links as well as files within the workspace.  \n<video src=\"images/1_80/paste-formatted-link.mp4\" autoplay loop controls muted title=\"Paste formatted link over selected text\"></video>  \nYou must enable the setting `editor.pasteAs.enabled` for this new setting to work.",
    "url": "https://code.visualstudio.com/updates/v1_80#_markdown-format-pasted-urls-as-markdown-links",
    "id": 3402
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### WSL over Tunnels  \nLast iteration, we previewed connecting to WSL over [Remote Tunnels](https://code.visualstudio.com/docs/remote/tunnels). This feature is now stable this iteration. If you run a Remote Tunnel on a Windows machine with WSL installed, you have the option to connect to WSL directly from the Remote Explorer.  \n![Remote Tunnels view with a Connect to WSL option](images/1_80/wsl-over-tunnels.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \nThis feature now works on VS Code desktop as well as [vscode.dev](https://vscode.dev). If you're already running a tunnel on your Windows device, make sure to update VS Code to the latest version to enable this feature.",
    "url": "https://code.visualstudio.com/updates/v1_80#_wsl-over-tunnels",
    "id": 3403
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Contributions to extensions  \n### GitHub Copilot  \nWe have introduced preview-only slash commands in the Chat view to help you create projects and notebooks and search for text in your workspace.  \n>**Note**: To get access to the Chat view, inline chat, and slash commands (for example `/search`, `/createWorkspace`), you need to install the [GitHub Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extension.  \n#### Create workspaces  \nYou can ask Copilot to create workspaces for popular project types with the `/createWorkspace` slash command. Copilot will first generate a directory structure for your request.  \n<video src=\"images/1_80/create-workspace-outline.mp4\" autoplay loop controls muted title=\"Create workspace outline\"></video>  \nYou can then use the **Create Workspace** button to create and open the project directory as a new workspace.  \n![Create and open workspace using GitHub Copilot](images/1_80/create-workspace-png.png)  \n#### Create notebooks  \nYou can ask Copilot to create Jupyter notebooks based on your requirements with the `/createNotebook` slash command. Copilot will generate an outline of the notebook based on your requirements.  \n<video src=\"images/1_80/create-notebook-outline.mp4\" autoplay loop controls muted title=\"Create notebook outline\"></video>  \nYou can then use the **Create Notebook** command to create the notebook and fill in the code cells based on the suggested outline.  \n<video src=\"images/1_80/create-notebook-generation.mp4\" autoplay loop controls muted title=\"Generate code cells in the notebook\"></video>  \n#### Generate search parameters  \nYou can ask Copilot to autofill the search parameters in workspace search. To do this, use the `/search` command followed by a description of what you want to find in text.  \n<video src=\"images/1_80/copilot-search-demo.mp4\"  autoplay loop controls muted title=\"Copilot search command demo\"></video>  \nThese preview slash commands can be enabled by configuring `github.copilot.advanced` setting as follows:  \n```json\n\"github.copilot.advanced\": {\n\"slashCommands\": {\n\"createWorkspace\": true,\n\"createNotebook\": true,\n\"search\": true\n}\n}\n```  \n#### Copilot YouTube playlist  \nThere is a new installment covering [Copilot for PowerShell](https://www.youtube.com/watch?v=EwtRzAFiXEM) in the [VS Code Copilot Series](https://www.youtube.com/playlist?list=PLj6YeMhvp2S5_hvBl2SE-7YCHYlLQ0bPt) on YouTube. In case you missed the series, you'll also find other [language-specific](https://www.youtube.com/watch?v=VsUQlSyQn1E&list=PLj6YeMhvp2S5_hvBl2SE-7YCHYlLQ0bPt&index=6) talks and guidance on [effective prompting](https://www.youtube.com/watch?v=ImWfIDTxn7E&list=PLj6YeMhvp2S5_hvBl2SE-7YCHYlLQ0bPt&index=9) when using Copilot for development.",
    "url": "https://code.visualstudio.com/updates/v1_80#_github-copilot",
    "id": 3404
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Python  \n#### Mypy extension  \nThere is now a [Mypy Type Checker](https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker) extension that provides type checking support for Python using [mypy](https://pypi.org/project/mypy/), available in preview as a pre-release version. This new extension offers errors and warnings on your entire codebase, instead of only the current file. It also uses [dmypy](https://mypy.readthedocs.io/en/stable/mypy_daemon.html) for faster type checking.  \nIf you have any issues with this new extension or wish to provide feedback, you can file an issue in the [Mypy extension GitHub repo](https://github.com/microsoft/vscode-mypy/issues).  \n#### Debugpy extension  \nWhen support for Python 2.7 and Python 3.6 was removed from the Python extension, we received a lot of feedback from users who were unable to upgrade their codebase to the latest versions of Python and lost the ability to debug their applications with the latest versions of the Python extension. To work towards a solution for this, we have created a separate Python Debugger extension called [Debugpy](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy). By keeping the debugger separate from the Python extension, you will eventually be able to use the latest version of the Python extension while using an older version of the debugger (by disabling [extensions auto-update](https://code.visualstudio.com/docs/editor/extension-marketplace#_extension-autoupdate)). This extension is available in preview as a pre-release version using the latest version of debugpy. We plan to support older versions of debugpy in the near future.  \nGive it a try and [let us know](https://github.com/microsoft/vscode-python-debugger/issues) if everything works appropriately. Our plan is to deprecate the built-in debugging functionality in favor of this separate extension.  \n#### Pylance localization  \nThe [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension is now localized! This means settings, commands, and other text from the extension are translated to your preferred language if you have a [Language Pack](https://marketplace.visualstudio.com/search?term=language%20pack&target=VSCode&category=All%20categories) installed and set to active in VS Code.  \n#### Test discovery and run rewrite  \nThis month we are continuing the rollout of our testing rewrite as an experiment. As a reminder, this rewrite redesigns the architecture behind test discovery and execution for both [unittest](https://docs.python.org/3/library/unittest.html) and [pytest](https://docs.pytest.org) in the extension. The rewrite is currently active for 100% of VS Code Insiders users and will begin ramping into stable this month. The rewrite will be adopted shortly, but for now the setting to opt in and out, `pythonTestAdapter`, still exists.  \n#### Dynamic run results for pytest and unittest  \nRolling out with the new experiment is dynamic run results for pytest and unittest. Previously, our test results were only returned once all tests finished running, but now with this feature, test results are delivered individually allowing you to see your tests pass and fail in real time.  \n#### Index persistence for 3rd-party libraries  \nPylance performs indexing of third-party libraries that are installed in your environment to enable IntelliSense features such as auto-completion, auto-import, code navigation, etc. Previously, Pylance would index these libraries every time you opened a workspace in VS Code. Now, Pylance persists the index for these libraries, reducing the need for repetitive indexing processes.  \n#### Deprecation of Python 3.7 support  \nPython 3.7 reached [end-of-life (EOL) on 2023-06-27](https://peps.python.org/pep-0537/). As such, official support for Python 3.7 from the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension will stop in three months in the 2023.18 release of the extension (which corresponds with the September 2023 release of VS Code). There are no plans to actively remove support for Python 3.7, and so we expect the Python extension will continue to work unofficially with Python 3.7 for the foreseeable future.  \nWith all other releases of Python now on an annual release cadence, we expect to stop official support for a Python release once it reaches EOL in the first Python extension release of the following calendar year. For example, Python 3.8 is scheduled to reach EOL in October 2024, so the first Python extension release in 2025 will stop official support.",
    "url": "https://code.visualstudio.com/updates/v1_80#_python",
    "id": 3405
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \n* Up to 1000 (from the previous 100) comment threads can be loaded in a pull request.\n* The new VS Code API proposal for a read-only message lets you check out a PR directly from an unchecked-out diff.\n* Avatars in trees and comments are circles instead of squares.  \nReview the [changelog for the 0.68.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0680) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_80#_github-pull-requests-and-issues",
    "id": 3406
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Preview Features  \n### TypeScript 5.2 support  \nThis update includes support for the upcoming TypeScript 5.2 release. Check out the [TypeScript 5.2 iteration plan](https://github.com/microsoft/TypeScript/issues/54298) for more details about what the TypeScript team is currently working on. Upcoming tooling highlights include:  \n* A new **Inline constant** refactoring.\n* A new **Move to file** refactoring that lets you move a symbol into an existing file.  \nTo start using the TypeScript 5.2 nightly builds, install the [TypeScript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) extension.",
    "url": "https://code.visualstudio.com/updates/v1_80#_typescript-5.2-support",
    "id": 3407
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### New diff editor  \nThis iteration we finished rewriting the diff editor. The rewrite allowed us to add a couple of new features, to improve the performance, and to fix several bugs.  \nTo try out the new diff editor, add `\"diffEditor.experimental.useVersion2\": true` to your settings. The new diff editor is still experimental, but will eventually replace the current diff editor in a future update.  \nAll presented features require the new diff editor.  \n#### Collapse unchanged regions  \nUse `diffEditor.experimental.collapseUnchangedRegions` to enable hiding unchanged regions in the new diff editor. This feature is useful when reviewing large diffs with a lot of unchanged code.  \nThe borders of the hidden-lines blocks can be dragged or clicked to reveal code from the bottom or top.  \n![A screenshot of the \"Collapse Unchanged Regions\" feature in the new diff editor](images/1_80/diffEditor_collapseUnchangedRegions.png)  \n#### Show insertion/deletion markers  \nInsertion/deletion markers indicate where in a line words were inserted or deleted, which is especially helpful when a line has both insertions and deletions.  \nUse `diffEditor.experimental.showEmptyDecorations` to enable/disable insertion and deletion markers.  \n![Deletion markers](images/1_80/diffEditor_deletionMarkers.png)  \n#### Improved decorations  \nFull line deletions/insertions now have a full width background color. This reduces noise significantly.  \nThis is an example of how the new diff editor highlights changes:  \n![New Diff Editor highlighted changes](images/1_80/diffEditor_decorationsNew.png)  \nThis is how the old diff editor renders decorations (notice how the line 57 on the right does not have a full width background color):  \n![Current Diff Editor highlighted changes](images/1_80/diffEditor_decorationsOld.png)  \n#### Synchronous diff update  \nWhen typing in the new diff editor, changes are heuristically applied immediately and trigger an asynchronous diff computation after some delay. In the old diff editor, changes were not applied immediately, causing visible flickering when typing.  \nNew - the diffs update immediately when typing:  \n![Diffs update immediately when typing](images/1_80/diffEditor_syncUpdateNew.gif)  \nOld - there is some visible flickering:  \n![Diffs did only update after a delay in the old diff editor](images/1_80/diffEditor_asyncUpdateOld.gif)  \n#### Move detection  \nThis experimental feature detects moved code blocks within a file. Use `diffEditor.experimental.showMoves` to turn it on. At the moment, only simple moves are detected, but we plan to improve this feature in the future. Once a moved code block is selected, source and target locations are aligned and a diff between them is shown.  \n![Move detection displays line connecting moved code block](images/1_80/diffEditor_moveDetection.gif)  \nBecause move detection is still experimental, expect significant changes in future updates.",
    "url": "https://code.visualstudio.com/updates/v1_80#_new-diff-editor",
    "id": 3408
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Extension authoring  \n### SecretStorage API now uses Electron API over keytar  \nThe [SecretStorage API](https://code.visualstudio.com/api/references/vscode-api#SecretStorage) has been the recommended way to store secrets like passwords, access tokens, etc. for years now. Under the hood, it has been using [keytar](https://github.com/atom/node-keytar), an abstraction layer used to store secrets in the OS keyring. Due to the deprecation and archiving of keytar, we looked for other solutions for the problem, specifically looking to our runtime, Electron, for a solution.  \nThis release, we've started the move from keytar to Electron's [safeStorage API](https://www.electronjs.org/docs/latest/api/safe-storage). This switch should be transparent to you as secrets are retrieved from keytar and restored via Electron's `safeStorage` API. In the future, we will remove this migration so that we can remove our dependency on keytar altogether.  \n#### keytar deprecation plan  \nFor a while now, VS Code has had a large dependency on [keytar](https://github.com/atom/node-keytar), an abstraction layer used to store secrets in the OS keyring. Additionally, we have included a keytar shim in VS Code that extensions depended on before the introduction of the [SecretStorage API](https://code.visualstudio.com/api/references/vscode-api#SecretStorage). keytar itself is [officially archived](https://github.com/atom/node-keytar) and not being maintained... In an effort to promote good security practices by **not** depending on an archived piece of software for storing secrets, we are working on a plan to remove this shim from VS Code.  \nWe have already directly reached out to extension authors of popular extensions that still use this keytar shim and they are working on moving off of it. We want to communicate this here as well as in [our GitHub Discussions](https://github.com/microsoft/vscode-discussions/discussions/662) for those we didn't contact directly so we minimize the disruption due to this change. We know this isn't the best news as we had a fair amount of work to remove our dependency on keytar as well, but we believe this is the right thing to do to ensure extensions are using secure APIs.  \nIf you are using keytar directly in your extension, there are a couple of options for you to consider:  \n* **(recommended)** Use the [SecretStorage API](https://code.visualstudio.com/api/references/vscode-api#SecretStorage) that VS Code provides on the [ExtensionContext](https://code.visualstudio.com/api/references/vscode-api#ExtensionContext). This API is cross-platform and works on all platforms that VS Code supports. It is also maintained by the VS Code team, will continue to be maintained, and has been a part of the VS Code API for years.\n* **(not recommended)** You can bundle the [keytar](https://github.com/atom/node-keytar) module with your extension. Keep in mind that keytar is a native node module, which means that you will need to [publish a platform specific extension](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#platformspecific-extensions) for each platform you want to support.  \n**Timeline**: The current plan is to remove this shim from VS Code Insiders in **early August**, which means that **September 2023's** stable release will be the first release without the shim.  \nWork for this is being tracked in [issue #115215](https://github.com/microsoft/vscode/issues/115215) and if you have any questions, feel free to ask them here in [our GitHub Discussions](https://github.com/microsoft/vscode-discussions/discussions/662).",
    "url": "https://code.visualstudio.com/updates/v1_80#_secretstorage-api-now-uses-electron-api-over-keytar",
    "id": 3409
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Improved vscode.fs.writeFile performance for local files  \nWhen you are using `vscode.fs.writeFile` API to write data into files (you should!), write operations to files that are local to the extension host will now resolve much faster.  \nPreviously the extension host would delegate the write operation to the VS Code client for execution, but now the operation executes directly inside the extension host, saving round trips.",
    "url": "https://code.visualstudio.com/updates/v1_80#_improved-vscode.fs.writefile-performance-for-local-files",
    "id": 3410
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Tree checkbox API  \nThe `TreeItem` `checkboxState` API has been finalized. By default, tree items that have checkboxes will have their checked state managed by VS Code. This behavior can be changed by setting the `TreeViewOptions` property `manageCheckboxStateManually` to `true`. When `manageCheckboxStateManually` is set, the extension is responsible for managing checking and unchecking of parent and child checkboxes.",
    "url": "https://code.visualstudio.com/updates/v1_80#_tree-checkbox-api",
    "id": 3411
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### EnvironmentVariableCollection.description  \nThis new API allows specifying a description for `EnvironmentVariableCollection`, displayed to the user in the terminal tab hover, to explain what exactly the change is doing.  \n```ts\n// Example of what the Git extension could use\ncontext.environmentVariableCollection.description = 'An explanation of what the environment changes do';\n```  \nYou can see the API in action in the built-in Git extension, which now describes what the change does:  \n![Environment variable collection descriptions are explained in a terminal tab's hover](images/1_80/terminal-env-description.png)",
    "url": "https://code.visualstudio.com/updates/v1_80#_environmentvariablecollection.description",
    "id": 3412
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Engineering  \n### Name mangling of exported symbols  \nLast year we started [mangling the names of private properties and methods](https://code.visualstudio.com/updates/v1_74#_name-mangling-of-properties-and-method) to reduce our code size. We now also mangle exported symbol names, which reduces the size of our main workbench JavaScript file a further 8%.  \nOur name mangling build step now saves a total of 3.9 MB of JavaScript across core VS Code and our built-in extensions. This reduction speeds up downloads, reduces VS Code's install size, and speeds up code loading every time you start VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_80#_name-mangling-of-exported-symbols",
    "id": 3413
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Checksum integrity checks for Node.js, built-in extensions, and Electron  \nAs part of our build, we consume binary resources from other locations, such as Node.js for our remote server and built-in extensions from the Marketplace and Electron. This milestone, we ensure the integrity of these binary resources by validating against a SHA256 checksum that is checked into the `vscode` GitHub repository.",
    "url": "https://code.visualstudio.com/updates/v1_80#_checksum-integrity-checks-for-node.js,-built-in-extensions,-and-electron",
    "id": 3414
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### New Linux performance machine  \nWe take the performance of VS Code very seriously, especially the elapsed time it takes to open a text editor and see a blinking cursor. To monitor that elapsed time, we run daily performance tests on Windows and macOS.  \nThis milestone, we added a Linux machine to the test set, reporting the startup times on Ubuntu 22.  \n![Linux performance machine](images/1_80/linux-perf-bot.png)",
    "url": "https://code.visualstudio.com/updates/v1_80#_new-linux-performance-machine",
    "id": 3415
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Event emitter optimizations  \nVS Code uses event emitters extensively throughout our codebase. We've optimized these emitters this iteration, which slightly improved startup time and memory usage.  \nYou can read more about this improvement in [issue #185789](https://github.com/microsoft/vscode/issues/185789).",
    "url": "https://code.visualstudio.com/updates/v1_80#_event-emitter-optimizations",
    "id": 3416
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Terminal pty host improvements  \nThe \"Pty Host\" process manages all shell processes launched by the terminal and several improvements were made:  \n* Performance\n* There is now a direct channel of communication to the pty host process. The most significant change from this is the reduction of input latency of the terminal.\n* Reconnection (reload window) and process revival (restart) performance has been improved by reducing unneeded calls and parallelizing tasks when there are multiple terminals being restored.\n* We now gather performance metrics on terminal startup and reconnection, which can be viewed via the **Developer: Startup Performance** command.\n* Diagnostics\n* All terminal-related logs have moved out of the **Window** output channel and into the new **Terminal** output channel.\n* When trace log level is on the **Pty Host** output channel, the terminal will log all RPC calls, which will help in diagnosing terminal problems.",
    "url": "https://code.visualstudio.com/updates/v1_80#_terminal-pty-host-improvements",
    "id": 3417
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n## Documentation  \n### New C# topics  \nYou can learn about C# development in VS Code with the [C# Dev Kit](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit) extension through a new set of [C# articles](https://code.visualstudio.com/docs/csharp/get-started). There you'll find topics explaining how to [get started](https://code.visualstudio.com/docs/csharp/get-started), describing the extension's language features ([code navigation](https://code.visualstudio.com/docs/csharp/navigate-edit), [refactoring](https://code.visualstudio.com/docs/csharp/refactoring), [debugging](https://code.visualstudio.com/docs/csharp/debugging)), and aiding the development life cycle such as [Project](https://code.visualstudio.com/docs/csharp/project-management) and [Package](https://code.visualstudio.com/docs/csharp/package-management) management.",
    "url": "https://code.visualstudio.com/updates/v1_80#_new-c#-topics",
    "id": 3418
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Glob patterns reference  \nVS Code has it's own glob pattern [implementation](https://github.com/microsoft/vscode/blob/main/src/vs/base/common/glob.ts), which it uses for features like Search file and folder filtering, letting you customize the File Explorer view, etc. To learn the details, you can review the new [Glob Patterns Reference](https://code.visualstudio.com/docs/editor/glob-patterns).",
    "url": "https://code.visualstudio.com/updates/v1_80#_glob-patterns-reference",
    "id": 3419
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_80#_issue-tracking",
    "id": 3420
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2023 Release (1.80)  \n### Pull requests  \nContributions to `vscode`:  \n* [@AlbertHilb](https://github.com/AlbertHilb): Add `macros` entry to markdown-math configuration [PR #180458](https://github.com/microsoft/vscode/pull/180458)\n* [@antonioprudenzano (Antonio Prudenzano)](https://github.com/antonioprudenzano): Feat: #132598 Add notification in case of running a translated build on windows and macOS [PR #181191](https://github.com/microsoft/vscode/pull/181191)\n* [@cadinsl](https://github.com/cadinsl): Edited user and workspace tab to only display the name for accessibility #184530 [PR #184627](https://github.com/microsoft/vscode/pull/184627)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Remove side effect from `array.some` callback [PR #184919](https://github.com/microsoft/vscode/pull/184919)\n* [@ChaseKnowlden](https://github.com/ChaseKnowlden): chore: update minimum installable version in inno setup [PR #175818](https://github.com/microsoft/vscode/pull/175818)\n* [@cmtm (Chris Morin)](https://github.com/cmtm): Respect gitignore file even when not in a git repository [PR #183368](https://github.com/microsoft/vscode/pull/183368)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Implement `files.dialog.defaultPath` setting (fix #115730) [PR #182908](https://github.com/microsoft/vscode/pull/182908)\n* Display terminal icon correctly in panel titlebar (fix #183679) [PR #183680](https://github.com/microsoft/vscode/pull/183680)\n* Allow downloads from pages viewed in Simple Browser [PR #185117](https://github.com/microsoft/vscode/pull/185117)\n* [@hermannloose (Hermann Loose)](https://github.com/hermannloose): Fix color definition for Comments panel tree view icons [PR #185654](https://github.com/microsoft/vscode/pull/185654)\n* [@hsfzxjy](https://github.com/hsfzxjy): Fix #185858: Add option to enable/disable editor group maximization on double clicking tab title [PR #185966](https://github.com/microsoft/vscode/pull/185966)\n* [@iifawzi (Fawzi Abdulfattah)](https://github.com/iifawzi): feat: adding optional support for auto playing and looping videos  [PR #184758](https://github.com/microsoft/vscode/pull/184758)\n* [@InigoMoreno (I\u00f1igo Moreno)](https://github.com/InigoMoreno): Update argv.ts to allow empty category [PR #181311](https://github.com/microsoft/vscode/pull/181311)\n* [@jacekkopecky (Jacek Kopeck\u00fd)](https://github.com/jacekkopecky): Add tabSizingFixedMinWidth setting (#185766) [PR #186058](https://github.com/microsoft/vscode/pull/186058)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fix `remote.autoForwardPortsSource` sometimes not respected from machine settings [PR #184860](https://github.com/microsoft/vscode/pull/184860)\n* Fix xterm search addon is loaded twice in vscode in browser [PR #184922](https://github.com/microsoft/vscode/pull/184922)\n* [@jhunt-scottlogic (Joshua Hunt)](https://github.com/jhunt-scottlogic): Test Explorer filter UI [PR #183192](https://github.com/microsoft/vscode/pull/183192)\n* [@jjaeggli (Jacob Jaeggli)](https://github.com/jjaeggli): Add dialog role to editor find widget [PR #172979](https://github.com/microsoft/vscode/pull/172979)\n* [@joshaber (Josh Abernathy)](https://github.com/joshaber): Fix removing tunnels when the tunnel factory throws an error [PR #186566](https://github.com/microsoft/vscode/pull/186566)\n* [@kevalmiistry (Keval Mistry)](https://github.com/kevalmiistry): FIX: conflict actions bar overlapping Complete Merge button fixed [PR #184603](https://github.com/microsoft/vscode/pull/184603)\n* [@max06 (Flo)](https://github.com/max06): Restore ShellIntegration for fish (#184659) [PR #184739](https://github.com/microsoft/vscode/pull/184739)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Add vscode-context-menu-visible class in webviews [PR #181433](https://github.com/microsoft/vscode/pull/181433)\n* [@russelldavis (Russell Davis)](https://github.com/russelldavis): Add option for smartSelect to ignore subwords [PR #182571](https://github.com/microsoft/vscode/pull/182571)\n* [@tisilent (xie jialong \u52aa\u529b\u9e2d)](https://github.com/tisilent): update gutterOffsetX range (dirtydiff , fold) [PR #184339](https://github.com/microsoft/vscode/pull/184339)\n* [@weartist (Hans)](https://github.com/weartist)\n* adjust to correct link [PR #184011](https://github.com/microsoft/vscode/pull/184011)\n* Fix #182013 [PR #184677](https://github.com/microsoft/vscode/pull/184677)\n* Fix #185051 [PR #185431](https://github.com/microsoft/vscode/pull/185431)\n* Fix #153590 [PR #185467](https://github.com/microsoft/vscode/pull/185467)\n* Fix\uff1a#185359 [PR #185718](https://github.com/microsoft/vscode/pull/185718)\n* [@yshaojun](https://github.com/yshaojun)\n* fix: cursor not visible at column 1 in mergeEditor(#183736) [PR #184604](https://github.com/microsoft/vscode/pull/184604)\n* fix: inline completion not displaying(#184108) [PR #185215](https://github.com/microsoft/vscode/pull/185215)  \nContributions to `vscode-emmet-helper`:  \n* [@iifawzi (Fawzi Abdulfattah)](https://github.com/iifawzi): fix: mark successive dots as noise and invalidate jinja syntax abbreviations  [PR #80](https://github.com/microsoft/vscode-emmet-helper/pull/80)  \nContributions to `vscode-livepreview`:  \n* [@toyobayashi (Toyo Li)](https://github.com/toyobayashi): fix console line number in external browser [PR #503](https://github.com/microsoft/vscode-livepreview/pull/503)  \nContributions to `vscode-pull-request-github`:  \n* [@SKPG-Tech (Salvijus K.)](https://github.com/SKPG-Tech): Fix null when no user name available  [PR #4892](https://github.com/microsoft/vscode-pull-request-github/pull/4892)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_80#_pull-requests",
    "id": 3421
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Breadcrumb symbol information  \nAfter using the **Focus and Select Breadcrumbs** (`breadcrumbs.focusAndSelect`) command, the [Breadcrumb](https://code.visualstudio.com/docs/editor/editingevolved#_breadcrumbs) navigation now includes symbol information for screen readers.",
    "url": "https://code.visualstudio.com/updates/v1_81#_breadcrumb-symbol-information",
    "id": 3422
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Input control and result navigation consistency  \nThe experience when navigating between an input control (for example, search or filter input) and its results is now consistent across the Extensions view, the Keyboard Shortcuts editor, and the Comments, Problems, and Debug Console panels using (`kb(widgetNavigation.focusNext)`) and (`kb(widgetNavigation.focusPrevious)`).",
    "url": "https://code.visualstudio.com/updates/v1_81#_input-control-and-result-navigation-consistency",
    "id": 3423
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Accessible diff viewer  \nIn the diff editor, the **Difference Review Pane** was renamed to **Accessible Diff Viewer**. The accessible diff viewer addresses accessibility shortcomings of the diff editor and can be opened with `kb(editor.action.accessibleDiffViewer.next)` or the **Open Accessible Diff Viewer** command from the diff editor **More Actions** menu. Along with this rename, we also fixed some bugs and added some new features, such as being able to launch the Accessibility Help dialog or jump to the modified editor from the viewer.",
    "url": "https://code.visualstudio.com/updates/v1_81#_accessible-diff-viewer",
    "id": 3424
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Profiles  \n### Support for partial profiles  \nYou can now create a profile in which you customize only a subset of configurations (settings, keyboard shortcuts, snippets, tasks, and extensions). For example, you can create a profile with all configurations except for keyboard shortcuts, and VS Code applies the keyboard shortcuts from the Default Profile when this profile is active.  \nIn the **Create New Profile** screenshot below, **Keyboard Shortcuts** is unchecked and a **Using Default Profile** message is displayed. Any keyboard shortcuts active during that VS Code session are not applied to the new profile.  \n![Create New Profile dropdown with keyboard shortcuts unchecked](images/1_81/profiles_create.png)  \nYou can also create a partial profile when copying from a Profile Template or from an existing profile, using the **Copy from** dropdown menu.  \n![Create a profile by copying from a Project Template or existing profile](images/1_81/profiles_create_copy.png)  \nYou can also configure an existing profile to use configurations from the Default Profile by editing the profile in the **Edit Profile** UI.  \n![Edit Profile dropdown with Keyboard Shortcuts unchecked](images/1_81/profile_edit.png)  \nWhen exporting a partial profile, you can choose to export only the configurations that are customized in the profile or also includes the configurations from the Default Profile.  \n![Profile view with Keyboard Shortcuts unchecked and Export button visible](images/1_81/profile_export.png)",
    "url": "https://code.visualstudio.com/updates/v1_81#_support-for-partial-profiles",
    "id": 3425
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Apply a setting to all profiles  \nYou can now apply a setting to all profiles by selecting the **Apply Setting to all Profiles** option in the Settings editor.  \n![Apply Setting to all Profiles context menu item in the Settings editor](images/1_81/profiles_apply_setting_all.png)  \nThis applies the value of the setting to all profiles. Any updates to this setting from any profile are applied to all profiles. You can revert this synchronization by unchecking the **Apply Setting to all Profiles** option.",
    "url": "https://code.visualstudio.com/updates/v1_81#_apply-a-setting-to-all-profiles",
    "id": 3426
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Apply an extension to all profiles  \nYou can now include an extension in all profiles by selecting the **Apply Extension to all Profiles** option in the Extensions view.  \n![Apply Extension to all Profiles context menu item in the Extensions view](images/1_81/profiles_apply_extension_all.png)  \nThis makes this extension available in all profiles. You can revert this by unchecking the **Apply Extension to all Profiles** option.",
    "url": "https://code.visualstudio.com/updates/v1_81#_apply-an-extension-to-all-profiles",
    "id": 3427
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Settings JSON file command IDs adjusted on non-default profiles  \nThe **Preferences: Open User Settings (JSON)** (`workbench.action.openSettingsJson`) command will now open the profile-specific settings JSON file when a user is in a non-default profile. To show application-scoped settings, use the **Preferences: Open Application Settings (JSON)** (`workbench.action.openApplicationSettingsJson`) command instead.",
    "url": "https://code.visualstudio.com/updates/v1_81#_settings-json-file-command-ids-adjusted-on-non-default-profiles",
    "id": 3428
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Workbench  \n### Release notes for upcoming update  \nWhenever a monthly stable update is ready to be installed, you can now preview the release notes via the **Show Update Release Notes** command in the **Manage** menu (gear button) at the bottom of the Activity bar.",
    "url": "https://code.visualstudio.com/updates/v1_81#_release-notes-for-upcoming-update",
    "id": 3429
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Editor  \n### Markdown paste URLs as formatted links  \nThe `markdown.editor.pasteUrlAsFormattedLink` setting now has a new option of `smart`. The `smart` paste feature can detect when you are pasting into text where you may not want automatic Markdown link formatting. Some situations ignored by `smart` pasting include pasting within a Markdown link, over another Markdown link, and within a code block.  \nBy default, the `pasteUrlAsFormattedLink` feature is currently off (`never`), but you can change the setting to `smart` or `always` (always create a formatted URL link).",
    "url": "https://code.visualstudio.com/updates/v1_81#_markdown-paste-urls-as-formatted-links",
    "id": 3430
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Asynchronous tokenization rollout  \nIn the [1.76 update](https://code.visualstudio.com/updates/v1_76#_asynchronous-tokenization), we implemented editor document asynchronous tokenization on a web-worker to improve the performance of the renderer process. Since then, we have fixed several bugs caused by rare race conditions and with this release, we are starting to roll out this feature to Stable users.  \nIf you do not want to wait, you can set `editor.experimental.asyncTokenization` to `true` to get asynchronous tokenization immediately.",
    "url": "https://code.visualstudio.com/updates/v1_81#_asynchronous-tokenization-rollout",
    "id": 3431
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Diff region alignment  \nThe new diff editor now aligns text within diff regions, making it much easier to review diffs where indentation has changed and lines have been inserted.  \nBefore (without diff region alignment and whitespace diffing enabled):  \n![A side by side diff without diff region alignment](images/1_81/diff-editor-without-hunk-alignment.png)  \nAfter (with diff region alignment):  \n![A side by side diff with diff region alignment](images/1_81/diff-editor-with-hunk-alignment.png)",
    "url": "https://code.visualstudio.com/updates/v1_81#_diff-region-alignment",
    "id": 3432
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### The new diff algorithm is now enabled by default  \nWe have completed the roll-out of the new diff algorithm, which is now the default in VS Code. You can read about some of the algorithm improvements in [past release notes](https://code.visualstudio.com/updates/v1_78#_diff-algorithm-improvements).",
    "url": "https://code.visualstudio.com/updates/v1_81#_the-new-diff-algorithm-is-now-enabled-by-default",
    "id": 3433
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Diff noise reduction  \nIn this update, we added heuristics to the new diff algorithm to reduce the probability of matching unrelated words.  \nThis is how the diff editor looked before (note how `this` matches on both sides, even though the matching is not helpful):  \n![Before using the new diff algorithm](images/1_81/diff-algorithm-before.png)  \nThis is how it looks now with the heuristic improvements (note that there are fewer unrelated matches):  \n![After using the new diff algorithm heuristics](images/1_81/diff-algorithm-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_81#_diff-noise-reduction",
    "id": 3434
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Switch sides  \nWhen using the side-by-side view of the new diff editor, there is now a new command **Diff Editor: Switch Sides** that allows you to jump from one side to the other. When switching sides, the cursor position and the current selection in the active editor are mapped to the other side.",
    "url": "https://code.visualstudio.com/updates/v1_81#_switch-sides",
    "id": 3435
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### And there is more  \nCheck out the [1.80 release notes](https://code.visualstudio.com/updates/v1_80#_new-diff-editor) for a more detailed description of what has changed in the new diff editor!",
    "url": "https://code.visualstudio.com/updates/v1_81#_and-there-is-more",
    "id": 3436
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Terminal  \n### Custom hover in inline terminal tab  \nThe panel inline terminal tab that shows when there is a single terminal now uses the custom hover for a more consistent appearance and to support embedded links.  \n![Hovering the inline terminal tab will show information about the terminal](images/1_81/terminal-hover.png)",
    "url": "https://code.visualstudio.com/updates/v1_81#_custom-hover-in-inline-terminal-tab",
    "id": 3437
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Source Control  \n### Support Git repositories with symbolic links  \nBased on community feedback, there is now support for Git repositories that have symbolic links on their path by using the `--path-format` option, added to the `rev-parse` Git command in version `2.31`. Starting with this release, all source control functionality (for example, the **Source Control** view, repository detection, added/modified/deleted lines editor decorations, etc.) should work as expected when opening such a repository.",
    "url": "https://code.visualstudio.com/updates/v1_81#_support-git-repositories-with-symbolic-links",
    "id": 3438
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Debug  \n### JavaScript debugger  \n#### Support for the Fast Node (Version) Manager  \nThe JavaScript debugger now supports the [Fast Node Manager](https://github.com/Schniz/fnm) (fnm) in its runtime version. Users of fnm can now set the `runtimeVersion` property of `launch.json` to select the Node.js version.",
    "url": "https://code.visualstudio.com/updates/v1_81#_javascript-debugger",
    "id": 3439
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Notebooks  \n### Rich content search for closed notebooks  \nIn a previous release, we introduced rich content workspace search for open notebooks. There is now preview support to also see rich content results for closed notebooks.  \nWhen you search for text in the Search view, the result previews from notebooks should match how the string looks when you open the notebook editor. Note that this will only show results for inputs when a notebook is closed. To try this, enable `search.experimental.closedNotebookRichContentResults` in your settings.  \n<video src=\"images/1_81/closed-notebook-search.mp4\" autoplay loop controls muted title=\"Closed notebook rich content search\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_81#_rich-content-search-for-closed-notebooks",
    "id": 3440
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Improved performance for large streaming outputs  \nWe have made performance improvements for large cell outputs that are streamed during execution. This reduces the amount of rendering activity but currently only applies to scrollable cell outputs.  \n<video src=\"images/1_81/notebook-large-output.mp4\" autoplay loop controls muted title=\"Large streaming output performance\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_81#_improved-performance-for-large-streaming-outputs",
    "id": 3441
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Notebook sticky scroll  \nThis release brings the first iteration of \"sticky scroll\" for the notebook editor. The sticky scroll display at the top of the notebook editor shows the Markdown headers for the cell or cell output that are currently visible. Selecting a sticky scroll \"line\" focuses that cell, allowing you to navigate the notebook quickly. This feature is enabled via the `notebook.stickyScroll.enabled` setting or the **View: Toggle Notebook Sticky Scroll** command.  \n<video src=\"images/1_81/nb-sticky-scroll.mp4\" autoplay loop controls muted title=\"Notebook editor sticky scroll demo\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_81#_notebook-sticky-scroll",
    "id": 3442
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## VS Code for the Web  \n### Always load latest versions of built-in extensions  \n[vscode.dev](https://vscode.dev) now always loads the latest versions of the built-in extensions. This means that you will no longer see the \"Reload Required\" notification to update built-in extensions to the latest version when you open vscode.dev.",
    "url": "https://code.visualstudio.com/updates/v1_81#_always-load-latest-versions-of-built-in-extensions",
    "id": 3443
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Python  \n#### Error tolerant pytest discovery  \nAs part of the rollout of our new testing architecture, the Test Explorer panel now supports error-tolerant [pytest](https://docs.pytest.org) discovery. When an error is thrown by pytest during discovery that can be handled, for example, an error from an unknown import, all other tests will still be discovered outside of the file with the error. This feature is only available on the new testing rewrite, which is still experimental. The rewrite is currently active for 100% of Insiders and 25% of Stable users but will be universally adopted shortly. In the meantime, you can opt in or out with the `pythonTestAdapter` setting.  \n#### Debugger configuration for running files with arguments  \nThe new [Debugpy](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension now provides a **Python File with Arguments** `launch.json` configuration, which is useful when you want to provide different input values for your Python file without modifying your code or the debugger configuration each time you run it.  \nTo use this configuration, make sure you have the [Debugpy](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension installed. Open the **Run and Debug** view by pressing `kb(workbench.view.debug)` and select either **Create a launch.json file** or the gear icon to access the `launch.json` file. Select **Debugpy**, and then select **Python: File with Arguments** from the available configurations.  \nNow when you want to debug (`kb(workbench.action.debug.start)`) a Python file that requires command-line arguments, a prompt appears allowing you to enter the desired arguments to pass to the Python file.  \nAfter entering your arguments, press `kbstyle(Enter)`, and the debugger will start, letting you step through your code.  \n<video src=\"images/1_81/debugpy-args-prompt.mp4\" autoplay loop controls muted title=\"Debugging a Python file providing arguments through the 'Python: File with Arguments' configuration with the Debugpy extension\"></video>  \n_Theme: [Catppuccin Macchiato](https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc) (preview on [vscode.dev](https://vscode.dev/editor/theme/Catppuccin.catppuccin-vsc/Catppuccin%20Macchiato))_  \n#### npm package for the Python extension API  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension now provides an npm package to make it easier for other extension authors to access and track changes in the Python extension API. Check out the [@vscode/python-extension](https://www.npmjs.com/package/@vscode/python-extension) npm module to work with Python environments available on the user's machine.  \n#### Dev Container for the Python extension  \nThere is now a [Dev Container](https://code.visualstudio.com/docs/devcontainers/containers) for the Python extension with a Microsoft official Node.js image. With this [custom dev container](https://github.com/microsoft/vscode-python/tree/main/.devcontainer), users are able to open the [Python extension repository](https://github.com/microsoft/vscode-python) in a [GitHub Codespace](https://github.com/features/codespaces), and start working on developing and testing the Python extension instantly, with no installation required. Python versions 3.7, 3.8, 3.9, 3.10, and 3.11 are pre-installed so users can readily switch between Python versions using [pyenv](https://github.com/pyenv/pyenv).",
    "url": "https://code.visualstudio.com/updates/v1_81#_python",
    "id": 3444
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Jupyter  \n#### Connect to Jupyter server on Codespace  \nWhen working on Jupyter notebook on [github.dev](https://github.dev), you can now connect to a Jupyter server running on a GitHub Codespace instance through the kernel picker.  \n<video src=\"images/1_81/connect-to-codespace.mp4\" autoplay loop controls muted title=\"Connect to Jupyter Server on GitHub Codespaces\"></video>  \n#### Continue On with uncommitted changes  \nYou can switch to the underlying codespace by selecting the **Continue On** button in the notebook toolbar, and any uncommitted changes in the workspace are brought to the codespace.  \n<video src=\"images/1_81/continue-on-codespace.mp4\" autoplay loop controls muted title=\"Using Continue On to move to a GitHub Codespace\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_81#_jupyter",
    "id": 3445
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. This iteration, we focused on updating the **Create** view to make it cleaner and more useful.  \nImprovements to the **Create** view include:  \n* The view tries to detect the best possible base branch for your PR instead of always using the default branch.\n* You can add reviewers, assignees, labels, and milestones to your PR from the **Create** view.\n* By default, your last \"create option\" is remembered (for example, draft or auto merge).\n* The view performance is much faster.\n* You can view diffs before publishing your branch.\n* Once the branch is published, you can also view commits (this is coming soon for unpublished branches).  \n![GitHub Pull Request and Issues extension Create view](images/1_81/new-create-view.png)  \nReview the [changelog for the 0.70.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0700) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_81#_github-pull-requests-and-issues",
    "id": 3446
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### GitHub authentication  \n#### Revoking GitHub OAuth tokens on sign out  \nPreviously, when you sign out of a GitHub account in VS Code, it would only remove OAuth tokens from the secrets storage. The token is still valid and able to make requests to GitHub's APIs. To improve the security of token management, we now attempt to [delete the token on the backend](https://docs.github.com/en/rest/apps/oauth-applications?apiVersion=2022-11-28#delete-an-app-token) making the token no longer valid after sign out.",
    "url": "https://code.visualstudio.com/updates/v1_81#_github-authentication",
    "id": 3447
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Extension authoring  \n### revealSetting and focusSearch added to IOpenSettingsActionOptions  \nExtensions can now pass the `revealSetting` object and `focusSearch` boolean into commands such as `workbench.action.openSettingsJson` that accept `IOpenSettingsActionOptions` args.  \nFor example, the following command  \n```ts\nvscode.commands.executeCommand('workbench.action.openSettingsJson', { revealSetting: { key: 'editor.renderWhitespace' }});\n```  \nopens the user settings JSON file, and then reveals the `editor.renderWhitespace` setting if it exists.",
    "url": "https://code.visualstudio.com/updates/v1_81#_revealsetting-and-focussearch-added-to-iopensettingsactionoptions",
    "id": 3448
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### New TestController.invalidateTestResults method  \nTest extensions can call the new method `TestController.invalidateTestResults` to indicate to the user that any results for one or more tests may no longer be applicable. For example, an extension might do something like:  \n```js\nonFileChange(uri => {\n// invalidate tests in a file when a file changes:\ntestController.invalidateTestResults(getTestsInFile(uri));\n})\nonConfigurationChange(() => {\n// invalidate results for all tests:\ntestController.invalidateTestResults();\n});\n```",
    "url": "https://code.visualstudio.com/updates/v1_81#_new-testcontroller.invalidatetestresults-method",
    "id": 3449
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Kerberos authentication for network proxy  \nExtensions using the `https` Node.js module can now use network proxies that require Kerberos authentication. The local machine needs to have Kerberos configured but extensions do not need to do anything to use this feature.  \nIn cases where the automatically selected service principal name does not work, the user can provide one with the `http.proxyKerberosServicePrincipal` setting:  \n![Kerberos Service Principal setting](images/1_81/proxy-kerboros-service-principal.png)",
    "url": "https://code.visualstudio.com/updates/v1_81#_kerberos-authentication-for-network-proxy",
    "id": 3450
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Icons in QuickPickItem finalized  \nThe API for icons in `QuickPickItem` has been finalized. You can now use the `iconPath` property to display icons in `QuickPickItem`s.  \n![A quick pick with GitHub avatars as the item icons](images/1_81/icons-in-quick-pick.png)",
    "url": "https://code.visualstudio.com/updates/v1_81#_icons-in-quickpickitem-finalized",
    "id": 3451
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n## Engineering  \n### Shrinking VS Code with name mangling  \nA recent engineering effort reduced the size of VS Code's shipping JavaScript by 20%. In the [Shrinking VS Code with name mangling](https://code.visualstudio.com/blogs/2023/07/20/mangling-vscode) blog post, you can learn how VS Code engineers [Matt Bierner](https://hachyderm.io/@mattbierner) and [Johannes Rieken](https://twitter.com/johannesrieken) researched identifier name mangling to optimize code size and came up with effective solution using TypeScript.",
    "url": "https://code.visualstudio.com/updates/v1_81#_shrinking-vs-code-with-name-mangling",
    "id": 3452
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### More pty host improvements  \nContinuing on from [last month's improvements](https://code.visualstudio.com/updates/v1_80#_terminal-pty-host-improvements) to the pty host, the following improvements have been made:  \n* Performance\n* The pty host now only launches when it's needed, so users that never open the terminal will save around 50-100 MB.\n* Further parallelization of terminal reconnection, speeding up the time to initialize the terminal.\n* Terminal output messages are now buffered, reducing traffic going from the pty host and the window hosting the terminal.\n* Diagnostics\n* Latency stats between each process are logged when in trace log level.\n* The window ID is logged to all logs in the **Terminal** output channel.\n* Pty host RPC logging now logs responses that failed as a result of an exception.",
    "url": "https://code.visualstudio.com/updates/v1_81#_more-pty-host-improvements",
    "id": 3453
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@starball5 (starball)](https://github.com/starball5)",
    "url": "https://code.visualstudio.com/updates/v1_81#_issue-tracking",
    "id": 3454
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2023 Release (1.81)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Increase the max width of action widgets to 80% of the browser width [PR #186157](https://github.com/microsoft/vscode/pull/186157)\n* [@abhijit-chikane (Abhijit Chikane)](https://github.com/abhijit-chikane): Fix the case of the breakpoint placeholder [PR #185753](https://github.com/microsoft/vscode/pull/185753)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch): \\[typescript-language-features\\] Update autoImportFileExcludePatterns description [PR #186528](https://github.com/microsoft/vscode/pull/186528)\n* [@colombod (Diego Colombo)](https://github.com/colombod): Add proposed api to support auto closing pairs on langauge configuration [PR #186567](https://github.com/microsoft/vscode/pull/186567)\n* [@Dromantor (Andreas Pareis)](https://github.com/Dromantor): fixed #173858 minimap slider not scrolling to the top end  [PR #180728](https://github.com/microsoft/vscode/pull/180728)\n* [@EhabY (Ehab Younes)](https://github.com/EhabY): Expose the focused element and change event in the TreeView API [PR #184268](https://github.com/microsoft/vscode/pull/184268)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Use `go-to-file` codicon for test output inline action (fix #186369) [PR #188472](https://github.com/microsoft/vscode/pull/188472)\n* Show placeholder text in testing view progress area (fix #141181) [PR #188484](https://github.com/microsoft/vscode/pull/188484)\n* [@hsfzxjy](https://github.com/hsfzxjy)\n* Generalize Ctrl+DownArrow and Ctrl+UpArrow to most input-result widgets (Fix #179967) [PR #187077](https://github.com/microsoft/vscode/pull/187077)\n* Fix context menu inaccurate positioning [PR #187157](https://github.com/microsoft/vscode/pull/187157)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes extension activation fail after upgrade with Error: Cannot find module 'vscode' [PR #187090](https://github.com/microsoft/vscode/pull/187090)\n* Fix can't use cmd+up/down in terminal after closing find widget [PR #187781](https://github.com/microsoft/vscode/pull/187781)\n* Fix missing terminal find widget shorcuts in tooltip [PR #187787](https://github.com/microsoft/vscode/pull/187787)\n* [@lkct (Rickey K. Liang)](https://github.com/lkct): Revert Python docstring color [PR #184938](https://github.com/microsoft/vscode/pull/184938)\n* [@m-ou-se (Mara Bos)](https://github.com/m-ou-se): Accept a trailing colon in --goto format. [PR #186174](https://github.com/microsoft/vscode/pull/186174)\n* [@mwerschy (Malte Werschy)](https://github.com/mwerschy): Implement indent guide colorization options. [PR #178112](https://github.com/microsoft/vscode/pull/178112)\n* [@rielAsh24 (Ashriel)](https://github.com/rielAsh24): Fix #182014: ISO Date format [PR #185587](https://github.com/microsoft/vscode/pull/185587)\n* [@ssigwart (Stephen Sigwart)](https://github.com/ssigwart): Fix single line if/else and loop indentation for Typescript and PHP [PR #136577](https://github.com/microsoft/vscode/pull/136577)\n* [@SvanT (Svante Boberg)](https://github.com/SvanT): Dispose `TerminalWordLinkDetector` listeners [PR #187083](https://github.com/microsoft/vscode/pull/187083)\n* [@weartist (Hans)](https://github.com/weartist): fix #187223 [PR #188144](https://github.com/microsoft/vscode/pull/188144)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114)\n* fix: typos [PR #186607](https://github.com/microsoft/vscode/pull/186607)\n* fix: Close #187788, recovery tree view state [PR #187902](https://github.com/microsoft/vscode/pull/187902)\n* [@yshaojun](https://github.com/yshaojun)\n* fix: color hints may display twice(#175476) [PR #186926](https://github.com/microsoft/vscode/pull/186926)\n* fix: prevent duplicate reason(#186206) [PR #187985](https://github.com/microsoft/vscode/pull/187985)\n* fix: modified editor width(#175397) [PR #188012](https://github.com/microsoft/vscode/pull/188012)  \nContributions to `vscode-extension-samples`:  \n* [@dsanders11 (David Sanders)](https://github.com/dsanders11): Fix EACCES error code name [PR #847](https://github.com/microsoft/vscode-extension-samples/pull/847)  \nContributions to `vscode-hexeditor`:  \n* [@lorsanta](https://github.com/lorsanta)\n* fix: scroll to the top when hit home key [PR #448](https://github.com/microsoft/vscode-hexeditor/pull/448)\n* Fix: the selection count is updated when switching between tab groups. [PR #449](https://github.com/microsoft/vscode-hexeditor/pull/449)  \nContributions to `vscode-js-debug`:  \n* [@zardoy (Vitaly)](https://github.com/zardoy): fix member expression completions [PR #1758](https://github.com/microsoft/vscode-js-debug/pull/1758)  \nContributions to `vscode-pull-request-github`:  \n* [@mgyucht (Miles Yucht)](https://github.com/mgyucht): Correctly iterate backwards through diffs across files [PR #5036](https://github.com/microsoft/vscode-pull-request-github/pull/5036)  \nContributions to `vscode-vsce`:  \n* [@drewbrokke (Drew Brokke)](https://github.com/drewbrokke): (#868) publish option --skip-duplicate doesn't consider target platforms [PR #873](https://github.com/microsoft/vscode-vsce/pull/873)  \nContributions to `inno-updater`:  \n* [@panekj (Jakub Panek)](https://github.com/panekj): feat: replace unmaintained winapi with windows-sys [PR #18](https://github.com/microsoft/inno-updater/pull/18)  \nContributions to `language-server-protocol`:  \n* [@c-claeys (Cristopher Claeys)](https://github.com/c-claeys): Add multirange formatting via `textDocument/rangesFormatting` to spec [PR #1759](https://github.com/microsoft/language-server-protocol/pull/1759)\n* [@gundermanc (Christian Gunderman)](https://github.com/gundermanc): Semantic Tokens LSIF specification. [PR #1754](https://github.com/microsoft/language-server-protocol/pull/1754)\n* [@semanticart (Jeffrey Chupp)](https://github.com/semanticart): Fix typo [PR #1774](https://github.com/microsoft/language-server-protocol/pull/1774)  \nContributions to `monaco-editor`:  \n* [@claylibrarymarket](https://github.com/claylibrarymarket): Fix Twig's plain text class expression [PR #4063](https://github.com/microsoft/monaco-editor/pull/4063)\n* [@FossPrime (Ray Foss)](https://github.com/FossPrime): Use new GitHub pages workflow [PR #4000](https://github.com/microsoft/monaco-editor/pull/4000)\n* [@leandrocp (Leandro Pereira)](https://github.com/leandrocp): Elixir - Add support for multi-letter uppercase sigils [PR #4041](https://github.com/microsoft/monaco-editor/pull/4041)\n* [@philippleidig (PhilippLe)](https://github.com/philippleidig): Add TwinCAT file support for structured text (st) language [PR #3315](https://github.com/microsoft/monaco-editor/pull/3315)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing)\n* Add mdx language [PR #3096](https://github.com/microsoft/monaco-editor/pull/3096)\n* Export custom TypeScript worker variables [PR #3488](https://github.com/microsoft/monaco-editor/pull/3488)\n* Document some basic concepts [PR #4087](https://github.com/microsoft/monaco-editor/pull/4087)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_81#_pull-requests",
    "id": 3455
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Accessible View for inline completions  \nInline completions, like those coming from the [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot) extension, for example, can now be inspected in the [Accessible View](https://code.visualstudio.com/docs/editor/accessibility#_accessible-view).",
    "url": "https://code.visualstudio.com/updates/v1_82#_accessible-view-for-inline-completions",
    "id": 3456
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Improved navigation consistency across the workbench  \nLast iteration, we made the experience when navigating between an input control (for example, search or filter input) and its results consistent across components like the Extensions view, the Keyboard Shortcuts editor, and more using `kb(widgetNavigation.focusNext)` and `kb(widgetNavigation.focusPrevious)`. This has been extended to the Settings editor and GitHub Pull Request comment control.  \nThis also works for navigating between the terminal and the terminal accessible buffer.",
    "url": "https://code.visualstudio.com/updates/v1_82#_improved-navigation-consistency-across-the-workbench",
    "id": 3457
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Updated terminal accessible buffer keybindings  \nPreviously, the terminal accessible buffer was opened via `kbstyle(Shift+Tab)`. This conflicted with an existing keyboard shortcut in some shells. As such, we've removed that keybinding in favor of `kb(widgetNavigation.focusNext)` and `kb(workbench.action.terminal.focusAccessibleBuffer)`, to align with the other Accessible Views.",
    "url": "https://code.visualstudio.com/updates/v1_82#_updated-terminal-accessible-buffer-keybindings",
    "id": 3458
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Actions in the Accessible View  \nActions in the Accessible View allow screen reader users to go to `next/previous`, disable accessibility verbosity, and more for a given feature. These actions exist within a convenient toolbar on the view so that the current context can be preserved.",
    "url": "https://code.visualstudio.com/updates/v1_82#_actions-in-the-accessible-view",
    "id": 3459
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Go to Symbol in the Accessible View  \nAccessibility help dialogs and some Accessible Views now have a **Go to Symbol** (`kb(editor.action.accessibleViewGoToSymbol)`) action to allow for swifter navigation through content.",
    "url": "https://code.visualstudio.com/updates/v1_82#_go-to-symbol-in-the-accessible-view",
    "id": 3460
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Focus terminal accessible buffer after run  \nThe terminal now has a `terminal.integrated.focusAfterRun` setting so that users can specify if the terminal's accessible buffer (`accessible-buffer`), the terminal itself (`terminal`), or nothing (`none`) should be focused when **Terminal: Run Selected Text In Active Terminal** is invoked.",
    "url": "https://code.visualstudio.com/updates/v1_82#_focus-terminal-accessible-buffer-after-run",
    "id": 3461
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Workbench  \n### Built-in port forwarding  \nVS Code now has a built-in port forwarding system. This feature allows you to share locally running services over the internet to other people and devices. To use it, select the **Forward a Port** button in the **Ports** view available in the Panel region (**Ports: Focus on Ports View**).  \n![Forward a Port button displayed in the Ports view](images/1_82/ports-view.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \nRead more about port forwarding in the [Port Forwarding](https://code.visualstudio.com/docs/editor/port-forwarding) user guide.",
    "url": "https://code.visualstudio.com/updates/v1_82#_built-in-port-forwarding",
    "id": 3462
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Command Center now on by default  \nThe Command Center was introduced several months ago as a quick way to both discover and interact with VS Code. You can use it as a launch pad for finding a command in the Command Palette, running a task, and other quick experiences. We've been running an experiment displaying the Command Center in the title bar and have gotten positive feedback, so we felt it was time to enable it by default.  \nHere is a video using the Command Center, and the back and forward buttons as well.  \n<video src=\"images/1_82/commandcenter.mp4\" autoplay loop controls muted title=\"Command Center\"></video>  \nWe see immense potential for the Command Center to be the center for finding anything in VS Code, so watch for more improvements in the future!  \n> **Note**: If you would rather not have the Command Center visible, you can right-click on the title bar and uncheck the Command Center entry in the dropdown to hide it.",
    "url": "https://code.visualstudio.com/updates/v1_82#_command-center-now-on-by-default",
    "id": 3463
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Control how pinned editors close from keyboard or mouse  \nThere is a new setting `workbench.editor.preventPinnedEditorClose` for more control on how pinned tabs respond to keyboard shortcuts or mouse middle-click for closing an editor. By default, a pinned tab will not close from keyboard or mouse interactions (default value `keyboardAndMouse`). You can change this setting accordingly:  \n* `keyboardAndMouse` - A pinned tab will not close from keyboard shortcut or mouse middle-click (default since `1.82.x`).\n* `keyboard` - A pinned tab will not close via keyboard shortcut (default until `1.81.x`).\n* `mouse` - A pinned tab will not close via mouse middle-click.\n* `never` - A pinned tab will always close from keyboard shortcut or mouse middle-click.",
    "url": "https://code.visualstudio.com/updates/v1_82#_control-how-pinned-editors-close-from-keyboard-or-mouse",
    "id": 3464
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### New and updated themable colors for the Status bar  \nThe Status bar already provides many themable colors for its items. There are now more colors to allow for theming hover foreground and background colors:  \n* `statusBarItem.errorHoverBackground`\n* `statusBarItem.errorHoverForeground`\n* `statusBarItem.warningHoverBackground`\n* `statusBarItem.warningHoverForeground`\n* `statusBarItem.remoteHoverBackground`\n* `statusBarItem.remoteHoverForeground`\n* `statusBarItem.offlineHoverBackground`\n* `statusBarItem.offlineHoverForeground`  \nThe following two color names were updated because the color no longer applies to the entire Status bar, but only to the remote indicator:  \n* `statusBar.offlineBackground` renamed to `statusBarItem.offlineBackground`\n* `statusBar.offlineForeground` renamed to `statusBarItem.offlineForeground`",
    "url": "https://code.visualstudio.com/updates/v1_82#_new-and-updated-themable-colors-for-the-status-bar",
    "id": 3465
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Editor  \n### Sticky Scroll  \nThis iteration there have been several improvements to the Sticky Scroll UI, available at the top of the editor (**View: Toggle Sticky Scroll**).  \n* Now by default Sticky Scroll is scrolled sideways when the editor horizontal scrollbar is scrolled. This feature can be turned off by disabling `editor.stickyScroll.scrollWithEditor`.\n* It is possible to view the last line of a scope by holding the `Shift` key and hovering over a Sticky Scroll line. Clicking on a line while holding `Shift` moves the editor cursor to the last line of the scope.\n* Folding icons have been added to the Sticky Scroll gutter. The rendering of these icons follows the setting `editor.showFoldingControls` that controls the rendering of the folding icons in the editor gutter.  \n<video src=\"images/1_82/sticky-scroll-improvements.mp4\" autoplay loop controls muted title=\"Sticky Scroll improvements\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_82#_sticky-scroll",
    "id": 3466
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Sort JSON on save  \nIt is now possible to sort JSON or JSONC (JSON with comments) files on save. Use the setting `json.sortOnSave.enable` to enable this feature.",
    "url": "https://code.visualstudio.com/updates/v1_82#_sort-json-on-save",
    "id": 3467
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Code Actions and Quick Fix navigation via keyboard  \nYou can now quickly navigate through the Quick Fix, Code Actions, or Source Control menus (they use the \"Action\" control) by typing any keyword or letter corresponding with available menu options. The filter utilizes fuzzy matching and searches are not limited to the first letter or prefix but includes the entire label text as well.  \n![Example of searching \"Surround\" or \"Read\" in the Refactor menu](images/1_82/action-control-fuzzy-search.gif)",
    "url": "https://code.visualstudio.com/updates/v1_82#_code-actions-and-quick-fix-navigation-via-keyboard",
    "id": 3468
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Collapsed unchanged code headers  \nUse `\"diffEditor.hideUnchangedRegions.enabled\": true` or select the map icon in the editor context menu to enable collapsing unchanged code blocks.  \nWith this release, there are now breadcrumbs for collapsed code blocks to indicate which symbols are collapsed. Clicking on a breadcrumb item reveals the selected item:  \n![Collapsed code headers](images/1_82/diffEditor-collapsedCodeHeaders.gif)",
    "url": "https://code.visualstudio.com/updates/v1_82#_collapsed-unchanged-code-headers",
    "id": 3469
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Dynamic layout  \nIf the width of the diff editor is too small, the editor automatically switches to inline view. If the editor is wide enough again, the previous layout is restored. Set `\"diffEditor.useInlineViewWhenSpaceIsLimited\": false` to disable this behavior.",
    "url": "https://code.visualstudio.com/updates/v1_82#_dynamic-layout",
    "id": 3470
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Button toggle states  \nWe updated the toggle style of buttons in the diff editor to be more visible.  \nOld toggle style (untoggled and toggled) with dim untoggled buttons:  \n![Old, untoggled dim buttons](images/1_82/diffEditor-oldToolbarDisabled.png), ![Old, toggled](images/1_82/diffEditor-oldToolbarEnabled.png)  \nNew toggle style (untoggled and toggled) with shaded toggled background:  \n![New, untoggled visible buttons](images/1_82/diffEditor-newToolbarDisabled.png), ![New, toggled with shaded background](images/1_82/diffEditor-newToolbarEnabled.png)",
    "url": "https://code.visualstudio.com/updates/v1_82#_button-toggle-states",
    "id": 3471
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Terminal  \n### Control how terminals restore on startup  \nThe new setting `terminal.integrated.hideOnStartup` controls whether a terminal is automatically created when the application starts up. The following options are available:  \n* `never` (default): Never hide the terminal view on startup.\n* `whenEmpty`: Only hide the terminal when there are no persistent sessions restored.\n* `always`: Always hide the terminal, even when there are persistent sessions restored.",
    "url": "https://code.visualstudio.com/updates/v1_82#_control-how-terminals-restore-on-startup",
    "id": 3472
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Disable bracketed paste mode  \n[Bracketed paste mode](https://code.visualstudio.com/docs/terminal/basics#_copy-paste) is a feature in the terminal that wraps pasted text in special sequences so the shell can use that information. Shells that turn on this feature are meant to properly support this but there may be reasons it falls over at which point you might see text like `[201~` unexpectedly when pasting. This feature can now be disabled explicitly, which disables the feature even if shells request it.",
    "url": "https://code.visualstudio.com/updates/v1_82#_disable-bracketed-paste-mode",
    "id": 3473
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Terminal focus after run setting  \nThe terminal now has a `terminal.integrated.focusAfterRun` setting so that users can specify if the terminal should be focused when **Terminal: Run Selected Text In Active Terminal** is invoked. The other options are to focus the terminal's accessible buffer (`accessible-buffer`) or leave nothing focused (`none`).",
    "url": "https://code.visualstudio.com/updates/v1_82#_terminal-focus-after-run-setting",
    "id": 3474
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Resizable Find  \nThe terminal's Find control can now be resized using the sash on the left similar to the editor:  \n![Hover the left border of the Find control to see the resize handle](images/1_82/terminal-find-resize.png)  \nThe sash is highlighted when hovering over or dragging it to resize the Find control.",
    "url": "https://code.visualstudio.com/updates/v1_82#_resizable-find",
    "id": 3475
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Faster rendering when GPU acceleration is disabled  \nThe performance of the \"DOM renderer\", which is used when GPU acceleration is disabled, has been significantly improved thanks to [a rewrite of the component](https://github.com/xtermjs/xterm.js/pull/4605). The rewrite focused on reducing the number of DOM elements used and the savings scale much better the larger the terminal is.  \nWhen testing a typical render call on a terminal with 117 columns and 36 rows, it took ~10 ms before and ~2 ms after. Increasing the terminal size to 300x100 on the test machine recorded a render taking ~25-35 ms before and ~4-5 ms after.",
    "url": "https://code.visualstudio.com/updates/v1_82#_faster-rendering-when-gpu-acceleration-is-disabled",
    "id": 3476
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Better selection rendering  \nWhen GPU acceleration is off, selection rendering is now the same as the webgl renderer and all backgrounds are changed into the theme's selection background color to ensure good contrast and consistency.  \n![The background when selected will now be the same as the rest of the selection](images/1_82/terminal-dom-bg.png)",
    "url": "https://code.visualstudio.com/updates/v1_82#_better-selection-rendering",
    "id": 3477
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Respect half minimum contrast ratio for dimmed text  \nThe [minimum contrast ratio feature](https://code.visualstudio.com/docs/terminal/appearance#_minimum-contrast-ratio) allows the terminal to take more control over the foreground colors in the terminal to ensure they appear at a particular contrast ratio. One problem with this feature in the past was that dimmed text (`CSI 2 m`) would also respect the contrast ratio, meaning it could appear just as prominent as regular text. PowerShell's auto complete ghost text is an example where this didn't play nicely.  \nDimmed text will now have **half** the contrast requirements. While this means that the text may no longer meet the minimum contrast ratio, it's now obviously different from regular text, which is more important.  \n![Now dimmed text should be visually different for typical minimum contrast ratios](images/1_82/terminal-mcr-dimmed.png)",
    "url": "https://code.visualstudio.com/updates/v1_82#_respect-half-minimum-contrast-ratio-for-dimmed-text",
    "id": 3478
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Configure the cursor appearance when unfocused  \nThe look of the cursor in the terminal when it is not focused can now be configured with `terminal.integrated.cursorStyleInactive`. This supports all styles of the existing `terminal.integrated.cursorStyle`, plus `outline` (default) and `none`.  \n![The new inactive cursor styles are underline, block, line, outline and none](images/1_82/terminal-cursor-styles.png)",
    "url": "https://code.visualstudio.com/updates/v1_82#_configure-the-cursor-appearance-when-unfocused",
    "id": 3479
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Improved Terminal: Open Detected Link behavior  \nThe **Open Detected Link** command (`kb(workbench.action.terminal.openDetectedLink)`) behavior has been changed to maintain high performance while making it much easier to search the whole terminal buffer for links. Previously, it would provide links for just the viewport and a little above with a cumbersome **Show more links** button at the end to search the rest of the buffer:  \n![Previously the last entry must have been selected to search everything](images/1_82/terminal-links-before.png)  \nNow links in the viewport are presented immediately, so the Quick Pick can show as soon as possible:  \n![Now initial results are restricted to the initial viewport](images/1_82/terminal-links-after.png)  \nAs soon as the Quick Pick is displayed, links are detected for the rest of the terminal buffer in the background. When typing to filter, VS Code waits for all results and includes them in the filtered results:  \n![Results from the entire buffer are included in the search when filtering begins](images/1_82/terminal-links-after-filter.png)  \nNotice that `CodeQL.yml` was not included until a filter was typed as it was outside the viewport.",
    "url": "https://code.visualstudio.com/updates/v1_82#_improved-terminal:-open-detected-link-behavior",
    "id": 3480
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### New link formats  \nThe following GNU-style link formats are now detected in terminals:  \n* `sourcefile:lineno.column`\n* `sourcefile:line1-column1.column2`\n* `sourcefile:line1.column1-line2.column2`",
    "url": "https://code.visualstudio.com/updates/v1_82#_new-link-formats",
    "id": 3481
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Debug  \n### JavaScript Debugger  \n#### WebAssembly debugging  \nThe JavaScript debugger will now automatically decompile WebAssembly modules to the WebAssembly Text Format, and allow you to step through and set breakpoints in the decompiled modules.  \n![Breakpoint hit during a WebAssembly debug session](images/1_82/js-debug-wat.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \n#### Source map loading improvements  \nWe made many improvements to the way source maps are loaded in this release:  \n* Source maps in some common cases, like in applications compiled with the `tsc` command line, are loaded 3-5x faster.\n* Hot module reloading from the [Vite](https://vitejs.dev) dev server is now supported.\n* Source maps can now be automatically loaded from authenticated endpoints.",
    "url": "https://code.visualstudio.com/updates/v1_82#_javascript-debugger",
    "id": 3482
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Testing  \n### Improved status area  \nThe 'status area' below the filter box in the Testing view is now more concise, and also provides a clickable action to rerun the most recently run tests. Holding `kbstyle(Alt)` while clicking on the rerun button will debug those tests instead.  \n![Testing view status area displaying test result count, test timing, and rerun button](images/1_82/testing-status-area.png)",
    "url": "https://code.visualstudio.com/updates/v1_82#_improved-status-area",
    "id": 3483
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Support for link detection in test output  \nLink detection now runs in the terminal where Test Output is shown. File names, paths, and URIs are now clickable.",
    "url": "https://code.visualstudio.com/updates/v1_82#_support-for-link-detection-in-test-output",
    "id": 3484
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Improved experience for test-correlated output  \nTest extensions can correlate console output with specific tests or locations. Previously, each output created in this way would appear as its own item in the Test Results view, and open in a text editor when selected.  \nNow, they are shown in a proper terminal, and navigating to an output message opens a terminal of that test's output with the message selected.",
    "url": "https://code.visualstudio.com/updates/v1_82#_improved-experience-for-test-correlated-output",
    "id": 3485
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Notebooks  \n### Copy cell output  \nThe cell output menu now includes an option to copy the output to the system clipboard. The context menu can also be used for image output by right-clicking the image and selecting the **Copy Output** command.  \n<video src=\"images/1_82/copy-cell-output.mp4\" autoplay loop controls muted title=\"Copy cell output\"></video>  \n_Theme: [Bearded Theme feat. Gold D Raynh](https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme) (preview on [vscode.dev](https://vscode.dev/editor/theme/BeardedBear.beardedtheme/Bearded%20Theme%20feat.%20Gold%20D%20Raynh))_",
    "url": "https://code.visualstudio.com/updates/v1_82#_copy-cell-output",
    "id": 3486
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Languages  \n### TypeScript 5.2  \nVS Code now ships with TypeScript 5.2.2. This major update brings new TypeScript language features, better performance, and many important improvements and bug fixes. You can read about TypeScript 5.2 on the [TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-2).",
    "url": "https://code.visualstudio.com/updates/v1_82#_typescript-5.2",
    "id": 3487
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Move to file refactoring  \nThe **Move to file** refactoring for JavaScript and TypeScript lets you move a class, function, or constant into an existing file. This will also automatically update all references to the symbol and update imports as needed:  \n<video src=\"images/1_82/ts-move-to-file.mp4\" autoplay loop controls muted title=\"Moving a symbol between TypeScript files\"></video>  \nWhen you select **Move to file**, VS Code shows you a list of all files in the current TypeScript or JavaScript project. You can start typings to quickly filter to the file you want.  \nAlternatively, you can use **Select existing file...** to select a file using the normal file picker or **Enter new file path...** to specify a new file that should be created.",
    "url": "https://code.visualstudio.com/updates/v1_82#_move-to-file-refactoring",
    "id": 3488
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Inline variable refactoring  \nThe **Inline variable** refactoring for JavaScript and TypeScript replaces all occurrences of a variable with its constant value.  \n<video src=\"images/1_82/ts-inline.mp4\" autoplay loop controls muted title=\"Inlining a constant variable\"></video>  \nThis refactoring is often most useful when rewriting existing code. For example, when a variable ends up being declared and then immediately returned, you can use inline variable to remove the extra declaration and return the value directly:  \n```ts\nfunction add(a, b) {\nconst result = a + b;\nreturn result\n}\n```  \nAfter running `inline variable` on `result`:  \n```ts\nfunction add(a, b) {\nreturn a + b;\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_82#_inline-variable-refactoring",
    "id": 3489
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Clickable parameter hints  \nYou can now click on parameter hints to quickly jump to the parameter declaration. After turning on inlay hints using:  \n```json\n\"editor.inlayHints.enabled\": \"on\",\n\"typescript.inlayHints.parameterNames.enabled\": \"all\",\n\"javascript.inlayHints.parameterNames.enabled\": \"all\"\n```  \nhold down `Ctrl/Cmd` and click on the parameter name to jump to that parameter's declaration:  \n<video src=\"images/1_82/ts-click-param-hint.mp4\" autoplay loop controls muted title=\"Ctrl/Cmd clicking on a parameter inlay hint to jump to its declaration\"></video>  \nWe plan to enable **Go to Definition** for other JavaScript and TypeScript inlay hints in upcoming releases.",
    "url": "https://code.visualstudio.com/updates/v1_82#_clickable-parameter-hints",
    "id": 3490
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Python  \n#### New Python Formatting article  \nThere is a new dedicated topic on [Python Formatting](https://code.visualstudio.com/docs/python/formatting), where you'll learn how to set a default formatter such as [autopep8](https://marketplace.visualstudio.com/items?itemName=ms-python.autopep8) or [Black](https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter) and customize it through various settings.  \n#### Terminal activation using environment variables  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension now has a new activation mechanism that activates the selected environment in the terminal without running any explicit activation commands. This month, we are beginning to roll this out as an experiment, making it the default experience. With the new approach, we use environment variables to activate terminals, which is done implicitly on terminal launch and can thus be quicker, especially for conda environments. You can add the following **User** setting: `\"python.experiments.optInto\": [\"pythonTerminalEnvVarActivation\"]` to try it out.  \nIf you have any comments or suggestions regarding this experiment, feel free to share them in [vscode-python issue #11039](https://github.com/microsoft/vscode-python/issues/11039).  \n#### Recreate or use existing .venv environment  \nWhen working within a workspace that already contains a `.venv` folder, the **Python: Create Environment** command has been updated with options to either recreate or use the existing environment. If you decide to recreate the environment, your current `.venv` is deleted, allowing you to recreate a new environment named `.venv`. You can then customize this new environment by following the **Python: Create Environment** flow to select your preferred interpreter and specify any dependency files for installation. In the case the environment cannot be deleted, for example, due to it being active, you are prompted to delete the environment manually.  \nAlternatively, if you choose to use the existing environment, the environment is selected for your workspace.",
    "url": "https://code.visualstudio.com/updates/v1_82#_python",
    "id": 3491
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Preview Features  \n### Quick Access text search  \nWe are experimenting with showing workspace search results in a Quick Access menu. To try this, run **Search: Quick Text Search (Experimental)**. This command sets up the Quick Open to accept search queries. Type some text to see matches from different workspace files.  \n<video src=\"images/1_82/quick-search-demo.mp4\" autoplay loop controls muted title=\"Quick Search demo\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_82#_quick-access-text-search",
    "id": 3492
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Dim unfocused editors and terminals  \nThere's a new experimental feature to dim editors and terminals that are not currently focused. The goal of this feature is to make it much clearer where text will go compared to the typical blinking cursor.  \n![When dim unfocused is enabled in a 2x2 grid editor group layout, only one will be fully opaque](images/1_82/dim-unfocused.png)  \nThe image above shows the dim unfocused feature enabled with opacity set to 0.5 so that it is clearer that the editor for `terminalService.ts` has focus.  \nThis can be enabled using `accessibility.dimUnfocused.enabled` and the amount of dimming is controlled with `accessibility.dimUnfocused.opacity`.  \nThe feature only covers editors and terminals currently but the plan is to expand this to [allow a user to configure what views they want to dim](https://github.com/microsoft/vscode/issues/191616) themselves.",
    "url": "https://code.visualstudio.com/updates/v1_82#_dim-unfocused-editors-and-terminals",
    "id": 3493
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Extension authoring  \n### Support for batch range formatting  \nThe `DocumentRangeFormattingEditProvider` API now supports batch formatting. This means that an extension can optionally signal to the editor that it supports being called with multiple ranges at once. This helps reduce the number of calls to the formatting provider and thus improves performance.  \nTo opt in to batch formatting, providers must implement a new optional function: [provideDocumentRangesFormattingEdits](https://github.com/microsoft/vscode/blob/e34a26097d763548bf220da77b74922765c12fa2/src/vscode-dts/vscode.d.ts#L4172).",
    "url": "https://code.visualstudio.com/updates/v1_82#_support-for-batch-range-formatting",
    "id": 3494
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### EnvironmentVariableCollection's scoped to a workspace folder  \nThe `EnvironmentVariableCollection` API now supports creating a new collection that is scoped to a particular workspace folder and will apply in addition to the \"global\" collection.  \n```ts\n// Get a scoped collection for the first workspace folder\nconst scoped = context.environmentVariableCollection.getScoped({\nworkspaceFolder: workspace.workspaceFolders[0]\n})\nscoped.replace('SCOPED', '1');\n// Only terminals created in the first workspace folder will have SCOPED=1 set\n```  \nThe [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) uses this mechanism to set up different virtual environments depending on which folder a terminal belongs to in a multi-root workspace.",
    "url": "https://code.visualstudio.com/updates/v1_82#_environmentvariablecollection's-scoped-to-a-workspace-folder",
    "id": 3495
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Configure when a EnvironmentVariableMutator is applied  \nThe `EnvironmentVariableCollection` API now has the ability to apply changes inside the shell integration script that will run after shell initialization scripts. This will only work when shell integration is enabled so the change can be applied both at shell creation and inside shell integration if it's critical:  \n```ts\ncontext.environmentVariableCollection.prepend('PATH', '/my/custom/path', {\napplyAtProcessCreation: true,\napplyAtShellIntegration: true\n});\n```  \nThis feature is useful when the variable in question could be mutated by a shell initialization script.",
    "url": "https://code.visualstudio.com/updates/v1_82#_configure-when-a-environmentvariablemutator-is-applied",
    "id": 3496
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Terminal context menu contributions  \nTwo new menus are being proposed that allow extensions to integrate their own context menu actions into the terminal:  \n* `terminal/context` - The terminal context menu\n* `terminal/title/context` - The terminal tabs context menu",
    "url": "https://code.visualstudio.com/updates/v1_82#_terminal-context-menu-contributions",
    "id": 3497
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Listen to terminal command execution  \nAn early proposal for the long requested ability for extensions to listen to the terminal command execution API is available for testing. This API is implemented using [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) and will only fire on terminals that have it enabled and working.  \n```ts\nexport interface TerminalExecutedCommand {\n/**\n* The {@link Terminal} the command was executed in.\n*/\nterminal: Terminal;\n/**\n* The full command line that was executed, including both the command and the arguments.\n*/\ncommandLine: string | undefined;\n/**\n* The current working directory that was reported by the shell. This will be a {@link Uri}\n* if the string reported by the shell can reliably be mapped to the connected machine.\n*/\ncwd: Uri | string | undefined;\n/**\n* The exit code reported by the shell.\n*/\nexitCode: number | undefined;\n/**\n* The output of the command when it has finished executing. This is the plain text shown in\n* the terminal buffer and does not include raw escape sequences. Depending on the shell\n* setup, this may include the command line as part of the output.\n*/\noutput: string | undefined;\n}\n\nexport namespace window {\n/**\n* An event that is emitted when a terminal with shell integration activated has completed\n* executing a command.\n*\n* Note that this event will not fire if the executed command exits the shell, listen to\n* {@link onDidCloseTerminal} to handle that case.\n*/\nexport const onDidExecuteTerminalCommand: Event<TerminalExecutedCommand>;\n}\n```  \nThe shape of this API is not final but the basic idea will remain the same.  \nHere's an example usage that listens for any successful `git push` command and triggers a refresh in the extension:  \n```ts\nconst disposables = [];\ndisposables.push(window.onDidExecuteTerminalCommand(command => {\nif (command.commandLine.startsWith('git push') && command.exitCode === 0) {\nrefreshState();\n}\n}));\nfunction refreshState() { /* ... */ }\n```",
    "url": "https://code.visualstudio.com/updates/v1_82#_listen-to-terminal-command-execution",
    "id": 3498
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Terminal selection access  \nA simple proposed API to access the terminal selection:  \n```ts\nexport interface Terminal {\n/**\n* The selected text of the terminal or undefined if there is no selection.\n*/\nreadonly selection: string | undefined;\n}\n```  \nThis API will likely include a corresponding change event before it's finalized and the API name may change to make it clearer that it's a simple string and not `Range`-based like `TextEditor.selection`.",
    "url": "https://code.visualstudio.com/updates/v1_82#_terminal-selection-access",
    "id": 3499
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Terminal Quick Fix progress  \nThe terminal Quick Fix proposal can now trigger a regular VS Code command, as opposed to a terminal command. This change necessitated also changing the terminal command interface name:  \n```ts\nexport interface TerminalQuickFixProvider {\n/**\n* Provides terminal quick fixes\n* @param commandMatchResult The command match result for which to provide quick fixes\n* @param token A cancellation token indicating the result is no longer needed\n* @return Terminal quick fix(es) if any\n*/\nprovideTerminalQuickFixes(commandMatchResult: TerminalCommandMatchResult, token: CancellationToken): ProviderResult<SingleOrMany<TerminalQuickFixExecuteTerminalCommand | TerminalQuickFixOpener | Command>>;\n}\nexport class TerminalQuickFixExecuteTerminalCommand {\n/**\n* The terminal command to run\n*/\nterminalCommand: string;\nconstructor(terminalCommand: string);\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_82#_terminal-quick-fix-progress",
    "id": 3500
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n## Engineering  \n### Electron 25 update  \nIn this milestone, we are promoting the Electron 25 update to our stable users. This update comes with Chromium `114.0.5735.289` and Node.js `18.15.0`. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.  \n#### Update highlights for Node.js  \nNode.js bundled in our desktop application and standalone executable bundled with our [servers](https://code.visualstudio.com/docs/remote/vscode-server) are updated from v16 -> v18. Given that this is a major version bump, there are a couple of behavior and compatibility changes:  \n* DNS [result orders](https://github.com/nodejs/node/commit/1b2749ecbe) from the OS are no longer sorted. We have added `--dns-result-order=ipv4first` to our extension host in both local and server scenarios to avoid breaking extensions that might not have yet adopted this change. Moving forward, we recommend that extensions use the [autoSelectFamily](https://nodejs.org/dist/latest-v18.x/docs/api/all.html#all_net_socketconnectoptions-connectlistener) option in `socket.connect` API to accommodate the result order changes.  \n* Prebuilt binaries from the [official Node.js repo](https://nodejs.org) for Linux are now compatible with Linux distributions based on glibc 2.28 or later. This would mean dropping support from our servers for Ubuntu 18, CentOS 7, RHEL 7, etc. We are now shipping a custom build of Node.js for our Linux servers to maintain glibc 2.17 or later compatibility. This support will change in future updates when we are no longer capable of building newer Node.js versions on CentOS 7 images, so we advice our server users to update their OS versions if they are affected by this change.  \n#### Update highlights for Chromium  \n* After [Mesa](https://mesa3d.org) version updates, Chromium shader compilation can be broken leading to artifacts in application UI. The issue is tracked in [issue #190437](https://github.com/microsoft/vscode/issues/190437), which also contains the link to the Chromium bug report. You can identify this issue by running with `--verbose` and looking for the following line `ERROR:shared_context_state.cc(81)] Skia shader compilation error` in the logs. If you are affected by this issue, the current workaround is to delete the GPU cache located at `~/.config/Code/GPUCache`.\n* When Chromium uses the [SwiftShader](https://swiftshader.googlesource.com/SwiftShader) backend for webgl, it seems to have regressed performance on both Windows and Linux for our integrated terminal. As a workaround, we detect the affected users based on the `GL_RENDERER` string and switch to the DOM backend for the terminal. Additional details can be found in [issue #190195](https://github.com/microsoft/vscode/issues/190195), which also contains link to the Chromium bug report.",
    "url": "https://code.visualstudio.com/updates/v1_82#_electron-25-update",
    "id": 3501
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2023 Release (1.82)  \n### Pull requests  \nContributions to `vscode`:  \n* [@0o001 (Mustafa Ate\u015f Uzun)](https://github.com/0o001): fix: localize string typo [PR #191046](https://github.com/microsoft/vscode/pull/191046)\n* [@alphacoma18 (Alpha Romer Coma)](https://github.com/alphacoma18): Fix supported markdown-lint violations in markdown files [PR #190750](https://github.com/microsoft/vscode/pull/190750)\n* [@andyleejordan (Andy Jordan)](https://github.com/andyleejordan): Guard `$IsWindows` [PR #190192](https://github.com/microsoft/vscode/pull/190192)\n* [@bandantonio (Antonio)](https://github.com/bandantonio): fix: add missing pricing parameter to manifest schema [PR #190293](https://github.com/microsoft/vscode/pull/190293)\n* [@ChaseKnowlden (Chase Knowlden)](https://github.com/ChaseKnowlden):Append the focused view in the window title  [PR #190216](https://github.com/microsoft/vscode/pull/190216)\n* [@davedash (Dave Dash)](https://github.com/davedash): Fish integration: Use -- in string to signify beginning of positional\u2026 [PR #189994](https://github.com/microsoft/vscode/pull/189994)\n* [@demccormack (Daniel McCormack)](https://github.com/demccormack): Fix zsh and bash shell integration when using set -u [PR #185425](https://github.com/microsoft/vscode/pull/185425)\n* [@floge07](https://github.com/floge07): fix: allow underscore as a valid char in tunnel remote address [PR #190904](https://github.com/microsoft/vscode/pull/190904)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Fix recently-broken cleanup of obsolete (superseded) extension folders [PR #189335](https://github.com/microsoft/vscode/pull/189335)\n* [@greenie (Joe Green)](https://github.com/greenie): Fix scroll to top button colour consistency [PR #191034](https://github.com/microsoft/vscode/pull/191034)\n* [@hrkw00 (Ryosuke Hirakawa)](https://github.com/hrkw00): Fix comment typo in standaloneLanguages.ts [PR #189449](https://github.com/microsoft/vscode/pull/189449)\n* [@hsfzxjy (hsfzxjy)](https://github.com/hsfzxjy)\n* Add context key notebookEditorCursorAtLineBoundary [PR #187679](https://github.com/microsoft/vscode/pull/187679)\n* Always respect non-empty selection in getMultiSelectedEditorContexts [PR #187704](https://github.com/microsoft/vscode/pull/187704)\n* Ensure the concurrency safety of TestResultsViewContent.reveal [PR #189756](https://github.com/microsoft/vscode/pull/189756)\n* Make CommentThread Ctrl+Arrow navigible [PR #189913](https://github.com/microsoft/vscode/pull/189913)\n* Fix overflow of setting list [PR #190721](https://github.com/microsoft/vscode/pull/190721)\n* Fix nested list style in Markdown preview [PR #190936](https://github.com/microsoft/vscode/pull/190936)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fix continuation for configured default shell not used when reconnecting to Codespace [PR #181832](https://github.com/microsoft/vscode/pull/181832)\n* Fix free port quick fix does not work on Windows [PR #190900](https://github.com/microsoft/vscode/pull/190900)\n* [@kfrederix (Karel Frederix)](https://github.com/kfrederix): wrap handler for resize observer in requestAnimationFrame() [PR #183325](https://github.com/microsoft/vscode/pull/183325)\n* [@kon72 (Kon)](https://github.com/kon72): Add commands for collapsing/showing all unchanged regions [PR #190451](https://github.com/microsoft/vscode/pull/190451)\n* [@lucasMarioza](https://github.com/lucasMarioza): Ensure style element is added to shadowDOM components on colorizeElement [PR #190505](https://github.com/microsoft/vscode/pull/190505)\n* [@neeleshb (Neelesh Bodas)](https://github.com/neeleshb)\n* Adding empty alt text to decorative images for extensions [PR #190607](https://github.com/microsoft/vscode/pull/190607)\n* Remove incorrect role from the title bar. [PR #190608](https://github.com/microsoft/vscode/pull/190608)\n* [@rehmsen (Ole)](https://github.com/rehmsen): Increase shortcut consistency of web with electron. [PR #191061](https://github.com/microsoft/vscode/pull/191061)\n* [@SevenOutman (Doma)](https://github.com/SevenOutman): Add \"Peek Call Hierarchy\" and \"Peek Type Hierarchy\" actions to Command Palette [PR #189607](https://github.com/microsoft/vscode/pull/189607)\n* [@songlinn](https://github.com/songlinn): fix: prevent history show prev/next in composing event [PR #184014](https://github.com/microsoft/vscode/pull/184014)\n* [@timar07 (Timothy)](https://github.com/timar07): fix: xterm quick fix appears in wrong spot #169162 [PR #188693](https://github.com/microsoft/vscode/pull/188693)\n* [@Timmmm (Tim Hutt)](https://github.com/Timmmm)\n* Update dev container node version [PR #190346](https://github.com/microsoft/vscode/pull/190346)\n* Support . as a row:column separator in terminal link detector [PR #190351](https://github.com/microsoft/vscode/pull/190351)\n* [@tisilent (YAYA \u5218\u7389\u5a77)](https://github.com/tisilent)\n* fix:Terminal find widget adjustment [PR #179398](https://github.com/microsoft/vscode/pull/179398)\n* Find with selected values when reveal TerminalFind [PR #190466](https://github.com/microsoft/vscode/pull/190466)\n* [@troy351](https://github.com/troy351): listWidget: remove redundant logic [PR #191054](https://github.com/microsoft/vscode/pull/191054)\n* [@weartist (Hans)](https://github.com/weartist)\n* Fix #185343 [PR #185421](https://github.com/microsoft/vscode/pull/185421)\n* Add setting to prevent closing the pinned tab when using middle click (fix #115734) [PR #188592](https://github.com/microsoft/vscode/pull/188592)\n* Fix: #188760 [PR #189259](https://github.com/microsoft/vscode/pull/189259)\n* Fix: #188751 [PR #189616](https://github.com/microsoft/vscode/pull/189616)\n* support click on \"hidden lines\" text to unfold #186406 [PR #189657](https://github.com/microsoft/vscode/pull/189657)\n* immediately search after enter pressed in files to include/exclude te\u2026 [PR #190473](https://github.com/microsoft/vscode/pull/190473)\n* add custom hover for quick open title bar buttons [PR #191416](https://github.com/microsoft/vscode/pull/191416)\n* [@zardoy (Vitaly)](https://github.com/zardoy): typescript Better paths matching for move to existing file quickpick [PR #181231](https://github.com/microsoft/vscode/pull/181231)  \nContributions to `vscode-css-languageservice`:  \n* [@bentorkington](https://github.com/bentorkington): fix reference to deprecated method [PR #359](https://github.com/microsoft/vscode-css-languageservice/pull/359)  \nContributions to `vscode-hexeditor`:  \n* [@lorsanta](https://github.com/lorsanta): Add fp16 and bf16 support in data inspector [PR #451](https://github.com/microsoft/vscode-hexeditor/pull/451)  \nContributions to `vscode-js-debug`:  \n* [@sunilsurana (Sunil Surana)](https://github.com/sunilsurana): Speed up sourcemap lookups by checking existence of .map files [PR #1780](https://github.com/microsoft/vscode-js-debug/pull/1780)  \nContributions to `vscode-pull-request-github`:  \n* [@tobbbe (Tobbe)](https://github.com/tobbbe): Sanitize slashes from title [PR #5149](https://github.com/microsoft/vscode-pull-request-github/pull/5149)  \nContributions to `vscode-vsce`:  \n* [@bandantonio (Antonio)](https://github.com/bandantonio)\n* feat: add user-friendly info to --help [PR #884](https://github.com/microsoft/vscode-vsce/pull/884)\n* feat: add support for packaging and publishing without license file [PR #887](https://github.com/microsoft/vscode-vsce/pull/887)\n* rephrase error message for mismatched pricing values in manifest [PR #890](https://github.com/microsoft/vscode-vsce/pull/890)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_82#_pull-requests",
    "id": 3502
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Workbench  \n### Similar command results in the Command Palette  \nFinding the command you're looking for can be challenging. In VS Code alone there are over 2000 commands... and with your favorite extensions, that number can soar even higher. We wanted to introduce a way to help you find what you're looking for while still keeping the speed that the Command Palette offers today. To do this, we are including a new section in the Command Palette results called \"similar commands\". Here are some examples:  \nA query no longer has to \"fuzzily\" match to show up in the results. Like \"Toggle Auto Save\":  \n!['turn on auto save' and 'Toggle Auto Save' showed up in a similar results section](images/1_83/similar-commands-3.png)  \nIf there are fuzzy results, those still show up at the top and similar commands follow:  \n![user searched for 'change language' and 'Configure Display Language' showed up in a similar results section](images/1_83/similar-commands-2.png)  \nExtension contributed commands also get picked up:  \n![user searched for 'show git blame' and 'toggle file blame' showed up in a similar results section](images/1_83/similar-commands.png)  \nWe think that this will really help those who struggle to remember the exact command name... let's be honest, that's pretty much all of us at some point.  \nThis is just the first cut of this new feature and still requires matching exact words in command names. In the future, you can expect improvements such as:  \n* Commands matching based on the non-visible description of the command.\n* Better basic handling of synonyms (\"toggle\" and \"turn on/off\", \"show\" and \"reveal\", etc.)  \nLet us know what you think!",
    "url": "https://code.visualstudio.com/updates/v1_83#_similar-command-results-in-the-command-palette",
    "id": 3503
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Icons for profiles  \nYou can now associate an icon with a [profile](https://code.visualstudio.com/docs/editor/profiles). This icon will be shown in the Activity Bar in the place of the **Manage** gear icon. This is useful if you have multiple profiles and want to quickly identify which profile is currently active.  \nThe following picture shows the icon selection dialog while creating a new profile.  \n![Icon selection dialog](images/1_83/profile-icon-selection.png)  \nThe active profile icon is then shown in the Activity Bar.  \n![Active profile icon in the Activity bar](images/1_83/active-profile-icon.png)",
    "url": "https://code.visualstudio.com/updates/v1_83#_icons-for-profiles",
    "id": 3504
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Editor tab height density  \nThe `window.density.editorTabHeight` setting allows users to reduce the tab height to a more compact size.  \nDefault editor tab height  \n![Editor tabs with default height](images/1_83/editor-tab-height-default.png)  \nCompact editor tab height  \n![Editor tabs with compact height](images/1_83/editor-tab-height-compact.png)",
    "url": "https://code.visualstudio.com/updates/v1_83#_editor-tab-height-density",
    "id": 3505
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Pinned editor tabs on separate row  \nA new setting `workbench.editor.pinnedTabsOnSeparateRow` has been added. When activated, [pinned tabs](https://code.visualstudio.com/updates/v1_46#_pin-tabs) are displayed on a separate row above the other tabs. The editor tabs automatically pin or unpin when dragged between the tab rows.  \n![Moving editor tabs between the two tab rows](images/1_83/pinned-tabs-on-separate-row.gif)",
    "url": "https://code.visualstudio.com/updates/v1_83#_pinned-editor-tabs-on-separate-row",
    "id": 3506
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Settings editor search adjustments  \nThe Settings editor now shows fewer results for a given search query to reduce noise. If you have the [GitHub Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extension installed, in addition to settings found by keyword matches, only the top five Copilot Chat setting matches are chosen, rather than the top fifteen.  \nThe search results are now also ordered by the Settings editor table of contents to show commonly used settings at the top, and to show filtered extension settings in their original order. To revert to ordering the search results by match type and score, set the `workbench.settings.settingsSearchTocBehavior` setting to `\"hide\"`, clear the search query, and start another search.  \n![Searching \"default formatter\" in the Settings editor results in the editor.defaultFormatter setting appearing at the top.](images/1_83/se-default-formatter-search-example.png)  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_83#_settings-editor-search-adjustments",
    "id": 3507
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Improved overflow behavior for editor actions  \nWhen the number of editor actions exceeds the available space, the actions overflow into the `...` **More Actions** menu. This logic has been refined and some vital actions, like **Close** or **Split Editor**, are now excepted. This means that they will always be visible, even if the available space is limited.",
    "url": "https://code.visualstudio.com/updates/v1_83#_improved-overflow-behavior-for-editor-actions",
    "id": 3508
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Color Theme picker now shows theme identifier  \nThe Color Theme picker now shows the localized name of the color theme and its string identifier next to it. This was done to help users who use a non-English language pack but only know the English name of the theme.  \n![Color Theme Picker in Korean displaying English theme identifiers next to the localized name](images/1_83/color-theme-id.png)",
    "url": "https://code.visualstudio.com/updates/v1_83#_color-theme-picker-now-shows-theme-identifier",
    "id": 3509
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Open Comments view on unresolved comments  \nThe setting `comments.openView` has a new possible value `firstFileUnresolved`. Setting `firstFileUnresolved` causes the Comments view to open the first time per session that a file with unresolved comments is opened.",
    "url": "https://code.visualstudio.com/updates/v1_83#_open-comments-view-on-unresolved-comments",
    "id": 3510
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Automatically collapse resolved comments  \nBy default, when you resolve a comment thread, it will now collapse. This feature can be disabled with the setting `\"comments.collapseOnResolve\"`.",
    "url": "https://code.visualstudio.com/updates/v1_83#_automatically-collapse-resolved-comments",
    "id": 3511
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Editor  \n### Code Actions on Save and Auto Save  \nYou can now enable Code Actions on Auto Save in the editor. This triggers Code Actions when you save or Auto Save with window change (`onWindowChange`) or focus change (`onFocusChange`). To enable this feature or update your current settings, check **Editor: Code Actions On Save** (`editor.codeActionsOnSave`) and change each Code Action's setting to `always`.  \nThe setting values were also updated, with the current boolean values to be deprecated in favor of the string equivalent.  \nThe options are:  \n* `explicit`: Triggers Code Actions when explicitly saved. Same as `true`.\n* `always`: Triggers Code Actions when explicitly saved and on Auto Saves from window or focus changes.\n* `never`: Never triggers Code Actions on save. Same as `false`.  \nBoolean values are still supported in this release.",
    "url": "https://code.visualstudio.com/updates/v1_83#_code-actions-on-save-and-auto-save",
    "id": 3512
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Notebooks  \n### Go to Symbol in notebooks  \nWith the `notebook.gotoSymbols.showAllSymbols` enabled, the **Go to Symbol** Quick Pick is populated with all code symbols in the notebook.  \n<video src=\"images/1_83/goto-notebook-symbol.mp4\" autoplay loop controls muted title=\"Go to Symbol in notebooks\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_83#_go-to-symbol-in-notebooks",
    "id": 3513
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Scrolling on cell execution  \nYou can now configure how much of the next cell is revealed when running `notebook.cell.executeAndSelectBelow` with `kbstyle(Shift+Enter)` with the `notebook.scrolling.revealNextCellOnExecute` setting:  \n* `fullCell` - The full next cell (default).\n* `firstLine` - Just the first line.\n* `none` - Don't scroll at all.  \n`\"notebook.scrolling.revealNextCellOnExecute\": \"firstLine\"` is shown below.  \n<video src=\"images/1_83/notebook-scroll-to-firstline.mp4\" autoplay loop controls muted title=\"Notebook scrolling to the first line\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_83#_scrolling-on-cell-execution",
    "id": 3514
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Whitespace trimming support  \nNotebooks now respect the existing three whitespace-related settings:  \n* `files.trimTrailingWhitespace` - Trim trailing whitespace when saving a file.\n* `files.trimFinalNewlines` - Trim all newlines after the final newline in a file.\n* `files.insertFinalNewline` - Automatically insert a final newline at the end of a file.  \nThese settings are applied on save, including Auto Save.  \n<video src=\"images/1_83/nb-trim-whitespace.mp4\" autoplay loop controls muted title=\"Notebook using files trim whitespace settings on save.\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_83#_whitespace-trimming-support",
    "id": 3515
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Finalized notebook Code Action API  \nNotebooks now fully support contributed Code Actions, and have a dedicated Code Action Kind to support them. If an extension author defines an action with a `kind` prefixed `notebook.source.`, on Save, the notebook editor runs that provided action against the entire notebook, rather than every cell individually. To edit the Code Actions that will run on save, you can set **Notebook: Code Actions on Save** in the Settings editor or edit `\"notebook.codeActionsOnSave\"` in your `settings.json` file.  \nThe current enablements for Code Actions were updated, with the previous boolean values deprecated in favor of enumeration equivalents. The options are:  \n* `\"explicit\"`: Triggers Code Actions when explicitly saved. Same as `true`.\n* `\"never\"`: Never triggers Code Actions on save. Same as `false`.  \nA third option `\"always\"` is coming soon to fully match editor Code Actions, letting users trigger notebook Code Actions upon Auto Save settings `onFocusChange` and `onWindowChange`.",
    "url": "https://code.visualstudio.com/updates/v1_83#_finalized-notebook-code-action-api",
    "id": 3516
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Languages  \n### Perl 6/Raku  \nThe Perl 6 language has been renamed to Raku (language identifier `raku`), and Raku will be automatically selected as the language for `.raku` files.",
    "url": "https://code.visualstudio.com/updates/v1_83#_perl-6/raku",
    "id": 3517
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Debug  \n### JavaScript Debugger  \n#### WebAssembly debugging  \nThe JavaScript debugger can now debug code compiled into WebAssembly if it includes [DWARF](https://dwarfstd.org) debug information. For example, C++ code compiled using [Emscripten](https://emscripten.org) can be debugged:  \n![Debugger stopped on a breakpoint in C++ source code](images/1_83/wasm-dwarf.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \nTo enable this, you'll want to install the [WebAssembly DWARF Debugging](https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging) extension, which plugs in to the built-in JavaScript debugger. Read more about this in [Debugging WebAssembly](/docs/nodejs/nodejs-debugging#debugging-webassembly).  \nWebAssembly debugging is built upon the [C/C++ Debugging Extension](https://github.com/ChromeDevTools/devtools-frontend/tree/main/extensions/cxx_debugging) from the Chromium authors, and was made possible with their support.  \n#### Improved Call Stack view  \nMethods and functions in the **Call Stack** view will now include the name of function (`this`) context. For example, a call stack for method `bar` on class `Foo` is now displayed as `Foo.bar`.",
    "url": "https://code.visualstudio.com/updates/v1_83#_javascript-debugger",
    "id": 3518
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Jupyter  \n#### Finalized Jupyter Server Provider API for extension authors  \nThe [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension's API for contributing Jupyter Servers has been finalized. Extensions can use the API to provide a list of custom Jupyter Servers to display in the Kernel Picker.  \nExamples of API usage can be found in the [Jupyter Server Provider Sample](https://github.com/microsoft/vscode-extension-samples/tree/main/jupyter-server-provider-sample). The [JupyterHub extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-hub) also makes use of this same API.  \nThe npm package [@vscode/jupyter-extension](https://www.npmjs.com/package/@vscode/jupyter-extension) contains all of the TypeScript type definitions.  \n#### JupyterHub extension  \nThere is now a [JupyterHub extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-hub) that supports logging into [JupyterHub](https://jupyter.org/hub) and executing code against kernels from within a notebook or [Interactive Window](https://code.visualstudio.com/docs/python/jupyter-support-py) in VS Code. This extension also works in the browser in [vscode.dev](https://vscode.dev/) and [github.dev](https://github.dev/).  \nIf you have any issues with this new extension or wish to provide feedback, you can file an issue in the [JupyterHub extension GitHub repo](https://github.com/microsoft/vscode-jupyter-hub/issues).  \n![Selecting an existing JupyterHub server in the Kernel Picker](images/1_83/jupyterhub_demo.gif)",
    "url": "https://code.visualstudio.com/updates/v1_83#_jupyter",
    "id": 3519
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Python  \n#### Python Debugger updates  \nThe Debugpy extension, which was [announced a few months ago](https://code.visualstudio.com/updates/v1_80#_python), has been renamed to [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) for improved discoverability in the Marketplace.  \nThis extension now includes a new User setting `debugpy.debugJustMyCode` that when disabled, it allows you to step into system or third-party library code for all your applications (by default, the debugger steps only into the code that is defined in your own Python code). This was a popular feature request for those who wanted to more conveniently disable `justMyCode` to all of their projects, instead of having to manually configure it in all of their projects' `launch.json` debug configurations.  \nTo try it out, make sure you have the [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension installed. Then open the Settings editor (`kb(workbench.action.openSettings)`), search for \"debugJustMyCode\", and disable the checkbox:  \n![Searching \"debugJustMyCode\" in the Settings editor results in the debugpy.debugJustMyCode setting appearing at the top.](images/1_83/debugpy-debug-just-my-code.png)  \nNow once you create a `launch.json` file, the extension uses the value of `debugpy.debugJustMyCode` by default, as long as `justMyCode` is not specified in the file. Note that when `justMyCode` is specified in `launch.json`, its value takes precedence over the `debugpy.debugJustMyCode` setting.  \n#### Lint on change option for Pylint extension  \nBy default, the [Pylint](https://marketplace.visualstudio.com/items?itemName=ms-python.pylint) extension only reports errors and warnings when a file is saved. There's now a new setting called `pylint.lintOnChange` that if set to `true`, instructs the extension to report errors and warnings as you type, without having to save the file.  \n#### Mypy extension reporting scope and daemon mode  \nThe [Mypy Type Checker](https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker) extension has now two new settings to allow you to specify Mypy's reporting scope and whether to use Mypy's daemon.  \nThe first is `mypy-type-checker.reportingScope`, which can be set to `file` (the default) to enable problems to be reported only for open files in the workspace, or `workspace` to enable reporting for all files in the workspace.  \nThe second is `mypy-type-checker.preferDaemon`, which when set to `true`, uses [Mypy's daemon](https://mypy.readthedocs.io/en/stable/mypy_daemon.html) (`dmypy`) instead of Mypy itself (`mypy`) to perform type checking, which can be much faster in some scenarios.  \n#### Update on call argument inlay hints setting  \nPreviously, [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)'s setting to enable inlay hints for partial call arguments (`python.analysis.inlayHints.callArgumentNames`) could only be set to `true` or `false` to enable or disable type hints for call arguments. This setting has been modified to allow more granular control over the type hints that are shown for call arguments.  \nIt can now be set to `partial` to disable hints for [positional-only](https://peps.python.org/pep-0570/) and [keyword-only](https://peps.python.org/pep-3102/) parameters, `all` to enable them, or `off` to disable them completely.  \n#### Deprecation of Python 3.7 support  \nAs previously mentioned in our [July 2023](https://devblogs.microsoft.com/python/python-in-visual-studio-code-july-2023-release/#upcoming-deprecation-of-python-3-7-support) release blog, we have dropped official Python 3.7 support in the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension. There are no plans to actively remove support for Python 3.7, and so we expect the extension will continue to work unofficially with Python 3.7 for the foreseeable future.  \nKeep in mind, that all other releases of Python are now on an annual release cadence, thus, we expect to stop official support for a Python release once it reaches EOL in the first extension release of the following calendar year (for example, Python 3.8 is scheduled to reach EOL in October 2024, so the first extension release in 2025 will stop official support).",
    "url": "https://code.visualstudio.com/updates/v1_83#_python",
    "id": 3520
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \n* Accessibility for reviewing PRs has been improved.\n* Commits are shown in the Create view even when the branch hasn't been published.  \nReview the [changelog for the 0.74.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0740) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_83#_github-pull-requests-and-issues",
    "id": 3521
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Preview Features  \n### Nearest Quick Fix keyboard shortcut  \nThere is a new setting to activate the nearest Quick Fix in a line from `kb(editor.action.quickFix)` (command ID `editor.action.quickFix`), no matter where your cursor is in that line.  \nThe command highlights the source code that will be refactored or fixed with Quick Fixes. Normal Code Actions and non-fix refactorings can still be activated at the cursor location. To enable this feature, check **Code Action Widget: Include Nearby Quickfixes** (`editor.codeActionWidget.includeNearbyQuickfixes`).  \n![Example of new Quick Fix behavior, showing activation on nearest errors, and showing how all Code Actions can still be utilized at the cursor location](images/1_83/nearest-quick-fix.gif)",
    "url": "https://code.visualstudio.com/updates/v1_83#_nearest-quick-fix-keyboard-shortcut",
    "id": 3522
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Source Control Sync view  \nThis milestone's release contains an early version of the **Source Control Sync** view. The new view provides details about the local changes that have not been pushed to the remote branch (outgoing) and changes that have not been pulled down locally from the remote branch (incoming). The view also lets you publish a branch and sync changes (pull/push) with a remote branch. The new view is still experimental and we will continue to improve it in the coming milestones based on user feedback. You can display the new view via the `scm.experimental.showSyncView` setting. Please try it out and provide feedback in [issue #192290](https://github.com/microsoft/vscode/issues/192290).  \n![Source Control Sync view showing a diff view of an incoming change](images/1_83/scm-sync-view.png)",
    "url": "https://code.visualstudio.com/updates/v1_83#_source-control-sync-view",
    "id": 3523
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Command Center and Debug toolbar  \nThere is a new experimental setting to show the Debug toolbar inside the Command Center. Make sure to have the Command Center enabled and configure the `debug.debugToolbarLocation` setting:  \n```json\n\"debug.toolBarLocation\": \"commandCenter\"\n```  \n![Debug controls inside the Command Center](images/1_83/cc-debugtoolbar.png)  \n_Theme: [GitHub Light Colorblind (Beta)](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Light%20Colorblind%20(Beta)))_",
    "url": "https://code.visualstudio.com/updates/v1_83#_command-center-and-debug-toolbar",
    "id": 3524
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n## Extension Authoring  \n### Support for Unicode character class escapes for string setting validation  \n[Unicode character class escapes](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) are now supported in regexes to validate string and string array settings. In other words, string and string array settings can now specify a `pattern` field with a value such as `\"\\\\p{Letter}+\"`, allowing string values that only contain letters.  \nSupport for Unicode character class escapes is not available for object settings with string values at this time.",
    "url": "https://code.visualstudio.com/updates/v1_83#_support-for-unicode-character-class-escapes-for-string-setting-validation",
    "id": 3525
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Contribute to terminal menus  \nThere are two new menus that can be contributed to `terminal/context` and `terminal/title/context`, which add entries to the terminal context menu and terminal tab context menu respectively. Example usage:  \n```jsonc\n{\n\"contributes\": {\n\"menus\": {\n\"terminal/context\": [\n{ \"command\": \"terminalTest.sendText\" }\n],\n\"terminal/title/context\": [\n{ \"command\": \"terminalTest.sendText\" }\n]\n}\n}\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_83#_contribute-to-terminal-menus",
    "id": 3526
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### New env.onDidChangeShell event  \nThere is a new `env.onDidChangeShell: Event<string>` event that fires when the value of `env.shell` changes.",
    "url": "https://code.visualstudio.com/updates/v1_83#_new-env.ondidchangeshell-event",
    "id": 3527
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### keytar removed from VS Code  \nBack in June, [we moved the SecretStorage API over to using Electron's safeStorage](https://code.visualstudio.com/updates/v1_80#_secretstorage-api-now-uses-electron-api-over-keytar) and included [a deprecation and removal plan](https://code.visualstudio.com/updates//v1_80#_keytar-deprecation-plan) of the now archived and unmaintained [keytar](https://github.com/atom/node-keytar) module from VS Code. We didn't remove `keytar` initially because some extensions were still importing/requiring `keytar` directly (this was recommended before the SecretStorage API existed, but not after the SecretStorage API was released).  \nBased on product telemetry and Insiders builds without `keytar`, the usage of `keytar` has dropped and we are ready to remove `keytar` entirely from VS Code.  \n#### What does this mean for my extension?  \nIf you use the SecretStorage API, **nothing**. We had been migrating secrets out of `keytar` since June so all of your secrets should be migrated over already if they were touched in the span of two months.  \nIf you are still using `keytar` directly in your extension, there are a couple of options for you to consider:  \n* **(recommended)** Use the [SecretStorage API](https://code.visualstudio.com/api/references/vscode-api#SecretStorage) that VS Code provides on the [ExtensionContext](https://code.visualstudio.com/api/references/vscode-api#ExtensionContext). This API is cross-platform and works on all platforms that VS Code supports. It is also maintained by the VS Code team, will continue to be maintained, and has been a part of the VS Code API for years at this point.\n* **(not recommended)** You can bundle the [keytar](https://github.com/atom/node-keytar) module with your extension. Keep in mind that `keytar` is a native node module, which means that you will need to [publish a platform specific extension](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#platformspecific-extensions) for each platform you want to support.  \n#### --disable-keytar is renamed to --use-inmemory-secretstorage  \nThe `--disable-keytar` flag disabled persisting secrets on the machine when the `SecretStorage` API was used. This was primarily used in CI environments that often didn't have a keyring configured because without it, VS Code would throw an error when the `SecretStorage` API was used without a keyring available.  \nSince we've removed `keytar`, this flag needed a new name. We've now marked `--disable-keytar` as deprecated in favor of `--use-inmemory-secretstorage`. In the future, we will consider removing `--disable-keytar`, but it's not going away in the near future.  \nLastly, we want to thank all the incredible extension authors that acted quickly to move off of `keytar` and ensure their users have a great and secure experience with secrets in VS Code!",
    "url": "https://code.visualstudio.com/updates/v1_83#_keytar-removed-from-vs-code",
    "id": 3528
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### vscode.dev is now cross origin isolated  \nCross origin isolation is now enabled for [vscode.dev](https://vscode.dev). This enables new powerful features like shared array buffers, which are the building block for cross file TypeScript support, Python execution in the web, and [vscode-wasm-wasi](https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi) in general.",
    "url": "https://code.visualstudio.com/updates/v1_83#_vscode.dev-is-now-cross-origin-isolated",
    "id": 3529
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Settings Sync troubleshooting  \nWe have added a new developer command **Developer: Download Settings Sync Activity** that downloads all your [Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync) activity, both on cloud and on your local machine, including the logs. This will help us troubleshoot issues with Settings Sync. We have also created a new view to browse the downloaded activity. You can open the view by running the command **Settings Sync: Show Synced Data** and enabling **SYNC ACTIVITY (DEVELOPER)** view. You can load the downloaded sync activity by selecting the **Load Sync Activity** button in the view as shown below.  \n![Sync activity (developer) view with Load Sync Activity button](images/1_83/sync-activity-developer-view.png)",
    "url": "https://code.visualstudio.com/updates/v1_83#_settings-sync-troubleshooting",
    "id": 3530
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)\n* [@tamuratak (Takashi Tamura)](https://github.com/tamuratak)\n* [@codespearhead (Code Spearhead)](https://github.com/codespearhead)",
    "url": "https://code.visualstudio.com/updates/v1_83#_issue-tracking",
    "id": 3531
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2023 Release (1.83)  \n### Pull requests  \nContributions to `vscode`:  \n* [@antonioprudenzano (Antonio Prudenzano)](https://github.com/antonioprudenzano): added focus_in and focus_out events only on HTMLElement elements [PR #181761](https://github.com/microsoft/vscode/pull/181761)\n* [@AVividLight (Michael Bethke)](https://github.com/AVividLight): Fix Minimap AutoHide with StickyScroll Lines Running Together [PR #188499](https://github.com/microsoft/vscode/pull/188499)\n* [@balaji-sivasakthi (Balaji Sivasakthi)](https://github.com/balaji-sivasakthi): Resolved conflicts between System High Contrast (HC) and VS Code High Contrast in ExtensionEditor [PR #189773](https://github.com/microsoft/vscode/pull/189773)\n* [@bricker (Bryan Ricker)](https://github.com/bricker): fixes typo in description for `terminal.integrated.environmentChangesRelaunch` configuration [PR #191841](https://github.com/microsoft/vscode/pull/191841)\n* [@ChaseKnowlden](https://github.com/ChaseKnowlden): Add banner for macOS 10.13 and 10.14 [PR #192928](https://github.com/microsoft/vscode/pull/192928)\n* [@Connormiha (Mikhail)](https://github.com/Connormiha): Simplify getting rangesToUpdate [PR #192079](https://github.com/microsoft/vscode/pull/192079)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto)\n* Add custom Node option to run TS Server [PR #191019](https://github.com/microsoft/vscode/pull/191019)\n* [typescript-language-features] Add option for excluding library symbols in \"Go to Symbol in Workspace\" [PR #192798](https://github.com/microsoft/vscode/pull/192798)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Tab separator setting referred to the same setting twice (fix #192497) [PR #192577](https://github.com/microsoft/vscode/pull/192577)\n* Improve messages on empty timeline (#169205) [PR #193369](https://github.com/microsoft/vscode/pull/193369)\n* [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal): feat: copy command and output in integrated terminal [PR #192217](https://github.com/microsoft/vscode/pull/192217)\n* [@hsfzxjy (hsfzxjy)](https://github.com/hsfzxjy): Faster __vsc_escape_value for bash [PR #190899](https://github.com/microsoft/vscode/pull/190899)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fixes terminal group relative size not preserved [PR #192519](https://github.com/microsoft/vscode/pull/192519)\n* Fix terminal context menu not hiding after running action [PR #193314](https://github.com/microsoft/vscode/pull/193314)\n* [@justanotheranonymoususer](https://github.com/justanotheranonymoususer)\n* Remove superfluous arg in git smoke.test.ts [PR #173194](https://github.com/microsoft/vscode/pull/173194)\n* Clarify git api usage [PR #174222](https://github.com/microsoft/vscode/pull/174222)\n* [@khubaibalam2000 (KhubaibAlam)](https://github.com/khubaibalam2000): Added hyperlink to Hot Exit for more details [PR #193354](https://github.com/microsoft/vscode/pull/193354)\n* [@lukaszsamson (\u0141ukasz Samson)](https://github.com/lukaszsamson): Fix invalid match on `exited` DAP event [PR #192117](https://github.com/microsoft/vscode/pull/192117)\n* [@NikoRaisanen (Niko Raisanen)](https://github.com/NikoRaisanen): fix: do not set this._sequence to undefined if path title not windows path [PR #193232](https://github.com/microsoft/vscode/pull/193232)\n* [@qingpeng9802 (Qingpeng Li)](https://github.com/qingpeng9802): improve `es5ClassCompat` robustness [PR #163541](https://github.com/microsoft/vscode/pull/163541)\n* [@rebeccadee (Rebecca Dodd)](https://github.com/rebeccadee): Update info-needed label name in contributing doc [PR #182528](https://github.com/microsoft/vscode/pull/182528)\n* [@sandersn (Nathan Shively-Sanders)](https://github.com/sandersn): Copilot-based TS refactors [PR #192602](https://github.com/microsoft/vscode/pull/192602)\n* [@sbmelvin (Stephen Melvin)](https://github.com/sbmelvin): Fixed import paths not being updated when multiple files are moved [PR #191403](https://github.com/microsoft/vscode/pull/191403)\n* [@troy351](https://github.com/troy351): add fallback for css var --vscode-sash-hover-size [PR #187678](https://github.com/microsoft/vscode/pull/187678)\n* [@WardenGnaw (Andrew Wang)](https://github.com/WardenGnaw)\n* Add support for debugger type for selectAndStartDebugging [PR #193156](https://github.com/microsoft/vscode/pull/193156)\n* Add support to de-emphasize debuggers in run list [PR #193157](https://github.com/microsoft/vscode/pull/193157)\n* [@weartist (Hans)](https://github.com/weartist)\n* Adjust openview [PR #191907](https://github.com/microsoft/vscode/pull/191907)\n* add fill selection text for quick search [PR #191956](https://github.com/microsoft/vscode/pull/191956)\n* [@wickles](https://github.com/wickles): Detect more scoop git bash paths [PR #192085](https://github.com/microsoft/vscode/pull/192085)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): fix: Close #191880,  Repair command cannot be searched by keyword after localization [PR #191953](https://github.com/microsoft/vscode/pull/191953)\n* [@ykrx (Yulian Kraynyak)](https://github.com/ykrx): Add info marker to minimap [PR #189282](https://github.com/microsoft/vscode/pull/189282)  \nContributions to `vscode-css-languageservice`:  \n* [@romainmenke (Romain Menke)](https://github.com/romainmenke): add support for `::slotted`, `:host`, `:host-context`, `:nth-child(1n of .foo)` and `:nth-last-child(1n of .foo)` [PR #356](https://github.com/microsoft/vscode-css-languageservice/pull/356)  \nContributions to `vscode-html-languageservice`:  \n* [@johnsoncodehk (Johnson Chu)](https://github.com/johnsoncodehk): Implement `findDocumentSymbols2()` [PR #152](https://github.com/microsoft/vscode-html-languageservice/pull/152)  \nContributions to `vscode-languageserver-node`:  \n* [@AviVahl (Avi Vahl)](https://github.com/AviVahl): fix: ensure bundlers pick up esm version [PR #1326](https://github.com/microsoft/vscode-languageserver-node/pull/1326)  \nContributions to `vscode-pull-request-github`:  \n* [@hsfzxjy (hsfzxjy)](https://github.com/hsfzxjy): Add a refresh button in the header of comment thread [PR #5229](https://github.com/microsoft/vscode-pull-request-github/pull/5229)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_83#_pull-requests",
    "id": 3532
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Windows magnifier synced  \nThe Windows magnifier now follows the cursor in VS Code properly.",
    "url": "https://code.visualstudio.com/updates/v1_84#_windows-magnifier-synced",
    "id": 3533
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Accessible View improvements  \nBy default, a user's cursor is positioned at the bottom of the terminal Accessible View; to preserve the position instead, you can set `terminal.integrated.accessibleViewPreserveCursorPosition` to `true`.  \nThe Accessible View can be hidden with `accessibility.hideAccessibleView`, useful if sharing one's screen with an audience of sighted users.  \nThe Accessible View now closes when a user starts typing and focuses the prior element for a smoother work flow.",
    "url": "https://code.visualstudio.com/updates/v1_84#_accessible-view-improvements",
    "id": 3534
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Text editor in window title focused view  \nLast iteration, we added a `${focusedView}` variable to `window.title`. We now also indicate when a `Text Editor` is focused.",
    "url": "https://code.visualstudio.com/updates/v1_84#_text-editor-in-window-title-focused-view",
    "id": 3535
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Workbench  \n### Customize Activity bar position  \nYou can now move the Activity bar to the top of the Side Bar as shown in the following video.  \n![Move Activity bar position](images/1_84/activity_bar_position.gif)  \nWhen the Activity bar is placed on the top, the Accounts and Manage buttons are moved to the far right of the title bar.  \n**Note:** This is supported only when the custom title bar is enabled (`\"window.titleBarStyle\": \"custom\"`).",
    "url": "https://code.visualstudio.com/updates/v1_84#_customize-activity-bar-position",
    "id": 3536
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Hide Editor Tabs  \nUsers are now able to hide editor tabs by setting `workbench.editor.showTabs` to `none`. Other `showTabs` options are `multiple` (default) and `single` to show a single editor tab for the active editor.  \n![Hide editor tab bar](images/1_84/hide-tab-bar.gif)",
    "url": "https://code.visualstudio.com/updates/v1_84#_hide-editor-tabs",
    "id": 3537
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Maximize Editor Group  \nThere is a new command **View: Toggle Maximize Editor Group** (`kb(workbench.action.toggleMaximizeEditorGroup)`) to maximize an editor group. This will hide all other groups and adds a button to the tab bar, allowing the user to restore the previous layout. If the setting `workbench.editor.doubleClickTabToToggleEditorGroupSizes` is set to `maximize`, users can double-click on an editor tab to maximize and unmaximize the editor group.  \n![Maximize editor group showing button to restore to original layout](images/1_84/maximize-editor-group.gif)",
    "url": "https://code.visualstudio.com/updates/v1_84#_maximize-editor-group",
    "id": 3538
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Similar settings search in the Settings editor  \nLike the Command Palette, the Settings editor now runs a similar settings search to gather more relevant results for a given query.  \nThe implementation is currently in an early stage, and you can expect improvements over the next few iterations.  \n![The query \"automatically save files\" in the Settings editor showing some auto save settings](images/1_84/se-natlang-search-2.png)",
    "url": "https://code.visualstudio.com/updates/v1_84#_similar-settings-search-in-the-settings-editor",
    "id": 3539
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Confirmation for opening protocol links  \nWhen a protocol link for a file or workspace opens in VS Code, a dialog will now ask for confirmation:  \n![Confirm protocol links dialog display for a local file](images/1_84/confirm-protocol-link.png)  \nProtocol links can either point to a local file (for example `vscode://file/path/to/file`) or to a remote file (for example `vscode://vscode-remote/ssh-remote+[USER@]HOST[:PORT]/path/to/file`). For each case, there are new settings to disable this behavior:  \n* `security.promptForLocalFileProtocolHandling` - For local protocol links\n* `security.promptForRemoteFileProtocolHandling`- For remote protocol links",
    "url": "https://code.visualstudio.com/updates/v1_84#_confirmation-for-opening-protocol-links",
    "id": 3540
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Editor  \n### Nearest Quick Fix keyboard shortcut  \nThere is a new setting to activate the nearest Quick Fix in a line from `kb(editor.action.quickFix)` (command ID `editor.action.quickFix`), no matter where your cursor is in that line. Previously a preview feature, **Code Action Widget: Include Nearby Quick Fixes** (`editor.codeActionWidget.includeNearbyQuickFixes`) is now enabled by default.  \nThe command highlights the source code that will be refactored or fixed with Quick Fixes. Normal Code Actions and non-fix refactorings can still be activated at the cursor location.  \n![Example of new Quick Fix behavior, showing activation on nearest errors, and how all Code Actions are still available at the cursor location](images/1_83/nearest-quick-fix.gif)",
    "url": "https://code.visualstudio.com/updates/v1_84#_nearest-quick-fix-keyboard-shortcut",
    "id": 3541
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Multi-document highlighting  \nInitial support for code highlighting across multiple documents was added via the setting **Editor: Multi Document Occurrences** (`editor.multiDocumentOccurrencesHighlight`). This initial implementation features only textual occurrences, with support for semantic highlighting coming in the future.  \n<video src=\"images/1_84/multi-doc-occurrences.mp4\" autoplay loop controls muted title=\"Multi document highlighting in VS Code\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_84#_multi-document-highlighting",
    "id": 3542
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Source Control  \n### Force push using --force-if-includes  \nThis milestone there is now support for the `--force-if-includes` option, which is an auxiliary option to `--force-with-lease` added in Git 2.30. The new option ensures that commits that are being force-pushed were created after examining the commit at the tip of the remote reference, and reduces the chance of losing commits when auto fetch is enabled. You can disable the use of `--force-if-includes` by disabling the `git.useForcePushIfIncludes` setting.",
    "url": "https://code.visualstudio.com/updates/v1_84#_force-push-using---force-if-includes",
    "id": 3543
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Notebooks  \n### Scroll on Execute improvements  \nHow the next cells are revealed when executing through notebooks with `Shift+Enter` was improved to help focus on the output. This also reduces the amount of cell movement when re-executing cells that already have output.  \n<video src=\"images/1_84/notebook-scrolling-output.mp4\" autoplay loop controls muted title=\"Focus output after notebook cell execution\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_84#_scroll-on-execute-improvements",
    "id": 3544
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### IPython stack trace rendering  \nException stack traces from IPython now render clickable links to help navigate to the error. This will only apply if the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension does not alter the stack trace first: `\"jupyter.formatStackTraces\": false`.  \n<video src=\"images/1_84/stack-trace-links.mp4\" autoplay loop controls muted title=\"Clickable stack trace frames from IPython\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_84#_ipython-stack-trace-rendering",
    "id": 3545
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Debug  \n### JavaScript Debugger  \n#### Improved Event Listener Breakpoints view  \nThe Event Listener Breakpoints view is friendlier and is now presented as a tree with checkboxes:  \n![Event Listener Breakpoints view shown as a tree with the Canvas WebGL Error Fired event checked](images/1_84/js-debug-event-listener-bps.png)  \n#### Better handling of sourcemap renames  \nWhen code is compiled with a bundler, variables can be renamed. This is especially common with imports in all bundlers, and certain local identifiers in [esbuild](https://esbuild.github.io). The debugger is now aware of scopes each rename applies to, which fixes many snags users historically hit.  \nThis requires the debugger to parse the syntax tree of compiled modules. This is done in a background thread and only when renames are detected, but the behavior can be disabled by setting `\"sourceMapRenames\": false` in your `launch.json` to avoid any performance impact.",
    "url": "https://code.visualstudio.com/updates/v1_84#_javascript-debugger",
    "id": 3546
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Python  \n#### Improvements to run line in the terminal  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension has improved the behavior of sending lines to the Python REPL (`Shift+Enter`) when no code has been selected to run. Previously, when you placed the cursor on a line of Python code and pressed `Shift+Enter`, the Python extension would send the exact line content to the REPL, even if it would fail, for example, due to being part of a multi-line command.  \nWith the new experimental **Smart Send** feature, the Python extension sends the smallest block of runnable code surrounding the cursor position to the REPL for execution. This ensures that only complete and executable sections of code are sent to the REPL. The cursor will also be automatically moved to the next executable line, to provide a smooth experience when executing multiple chunks iteratively.  \nTo try it out, you can add the following **User** setting: `\"python.experiments.optInto\": [\"pythonREPLSmartSend\"]`. While this feature is currently behind an experiment, we expect it to be the default behavior in the future. If you have feedback or suggestions on how we can further improve this feature, please let us know!  \n<video src=\"images/1_84/smart-send-python-repl.mp4\" autoplay loop controls muted title=\"A series of Python code selections being iteratively executed on Shift + Enter\"></video>  \n_Theme: [Catppuccin Macchiato](https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc) (preview on [vscode.dev](https://vscode.dev/editor/theme/Catppuccin.catppuccin-vsc/Catppuccin%20Macchiato))_  \n#### Improvements to Python linting extensions  \nWe have made several improvements to our supported linting extensions to allow for a more configurable and flexible experience with your favorite Python tools.  \nThe [Pylint](https://marketplace.visualstudio.com/items?itemName=ms-python.pylint), [Mypy](https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker) and [Flake8](https://marketplace.visualstudio.com/items?itemName=ms-python.flake8) extensions now offer settings that allow you to specify glob patterns for files that you wish to exclude from linting. This can be useful if you are working with a large codebase with many subprojects, and want to exclude certain folders from being linted. These settings are `\"pylint.ignorePatterns\"`, `\"mypy-type-checker.ignorePatterns\"` and `\"flake8.ignorePatterns\"`.  \nThese extensions also support `cwd` settings, which allows you to specify the working directory for the linter. This setting has been updated to support the variable `${fileDirname}`, so the working directory can be dynamically set to the parent folder of the file you have open in the editor. This is useful if you are working with mono repos, and want the linter working directory to be dynamically updated as you open files from different subprojects. These settings are `\"pylint.cwd\"`, `\"mypy-type-checker.cwd\"` and `\"flake8.cwd\"`.  \nThe default value of the `\"mypy-type-checker.preferDaemon\"`setting was changed (only applicable to the Mypy extension). Previously, it was set to `true`, which meant that the Mypy daemon would be used by default. After receiving feedback, we changed the default value to `false`. If you are wondering which value would be best for you, our recommendation is to use the Mypy daemon if you enabled the Mypy reporting scope to be the entire workspace (`\"mypy-type-checker.reportingScope\": \"workspace\"`) for performance reasons. Otherwise, if the reporting scope is set to the current file, we recommend you use the Mypy executable that shipped with the extension.  \n#### Deprecated built-in linting and formatting features  \nWith all the work and improvements made to the linting and formatting extensions in VS Code, we have [deprecated the built-in linting and formatting features](https://github.com/microsoft/vscode-python/wiki/Migration-to-Python-Tools-Extensions) that are shipped in the Python extension. This includes all the linting and formatting commands as well as settings (`python.linting.*` and `python.formatting.*`). We recommend that you remove these deprecated settings if you are still using them, and use the supported linting and formatting extensions instead.  \nIf you are using a linter without a supported extension, check out the community-contributed [Ruff extension](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff). [Ruff](https://docs.astral.sh/ruff/) is a Python linter written in Rust and [supports various linters](https://docs.astral.sh/ruff/rules/) such as pyflakes, pycodestyle, pydocstyle, and more. Recently support was added for using Ruff as a formatter in VS Code (`\"[python]\": { \"editor.defaultFormatter\": \"charliermarsh.ruff\" }`).  \nYou can also create your own linter or formatter VS Code extension for your favorite Python tool. Check out our [Python Tools Extension Template](https://github.com/microsoft/vscode-python-tools-extension-template) for a quick start.  \n#### Create environment notification  \n[Virtual environments](https://docs.python.org/3/library/venv.html) are a recommended way to work with Python projects with dependencies that need to be installed. They offer isolation and reproducibility and are very popular in Python projects.  \nFor this reason, the Python extension now displays a notification when you attempt to run or debug a Python file or project with listed dependencies when you don't have a virtual environment selected on your workspace. This notification provides a quick way to create a new virtual environment through the **Python: Create Environment** command.  \nIf you already have a virtual environment on your workspace, you have the option to select it, or delete and recreate it.  \nThis notification can be disabled by setting `python.python.createEnvironment.trigger` to `off`.  \n![Notification stating that a virtual environment is not currently selected with an option to Create the environment or disable the notification](images/1_84/create-env-prompt.png)  \n#### Virtual environment deactivation helper  \nA couple of months ago we announced a new experimental feature for [terminal activation using environment variables](https://code.visualstudio.com/updates/v1_82#_terminal-activation-using-environment-variables), to enhance your development workflow by automatically activating the selected environment in the terminal without the need for explicit activation commands. However, since there are no explicit activation scripts working, the `deactivate` command was no longer working when this experiment was enabled.  \nThe Python extension will now detect when you attempt to run the `deactivate` command and show a helper notification to guide you on how to add scripts for your shell so the command will work again when the environment is activated through environment variables. It also offers a button to open your shell profile file for you to add the necessary scripts.  \n![Notification stating that the deactivate command is not working and offering a button to open the shell profile file](images/1_84/python-deactivate-notification.png)  \nYou can find the full documentation on how to add the necessary scripts for your shell on the [vscode-python wiki](https://aka.ms/AAmx2ft).  \nIf you are not in the experiment and would like to try out this feature, you can add the following **User** setting: `\"python.experiments.optInto\": [\"pythonTerminalEnvVarActivation\"]`.  \n#### Improvements to test output  \nWe've made significant improvements to how you can view and interact with the test output in the Python extension when the `pythonTestAdapter` experiment is enabled, [announced a few months ago](https://code.visualstudio.com/updates/v1_79#_test-discovery-and-run-rewrite). Previously, output from test discovery and execution was inconsistently scattered across the **Python Test Log** output channel and the **Test Results** panel, with some information being duplicated in both. To consolidate the experience, output related to test execution is displayed in the **Test Results** panel, and test discovery in the **Python** output channel. To learn more, read our related [vscode-python wiki](https://github.com/microsoft/vscode-python/wiki/New-Method-for-Output-Handling-in-Python-Testing).  \nThis new approach also supports colorization in the output if you are using Pytest and set `\"python.testing.pytestArgs\": [\"--color=yes\"]` in your `settings.json`. Colorization only works for test execution in the **Test Results** panel and will not work for discovery or for output in the **Python Test Log** panel.  \n![Test execution output displayed in Test Results panel with colors, while test discovery output is displayed in the Python output channel](images/1_84/python-test-output.png)  \nThere is also a new button **Show output** to easily open the Test Logs from the Test Explorer view when errors on test discovery occur.  \n![\"Show output\" button to open the Test Logs in the Test Explorer view](images/1_84/python-test-output-button.png)  \n#### Platform-specific versions of the Python Debugger extension  \nThe [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension now ships platform-specific versions, so that only the necessary platform-specific files are installed on every update. This reduces the size of the extension and helps improve startup time.  \n#### Tensorboard extension  \nThe [Tensorboard](https://www.tensorflow.org/tensorboard) functionality has moved out of the Python extension into a standalone [Tensorboard](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.tensorboard) extension.  \nIf you have any issues with this new extension or wish to provide feedback, you can file an issue in the [Tensorboard extension GitHub repo](https://github.com/microsoft/vscode-tensorboard/issues).",
    "url": "https://code.visualstudio.com/updates/v1_84#_python",
    "id": 3547
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Jupyter  \n#### Execute with Precedent/Dependent Cells  \nWith the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension, you can now run all precedent or dependent cells of a target cell from the dropdown menu next to the **Cell Run** button. This is still a preview feature and can be enabled with the `jupyter.executionAnalysis.enabled` setting and the `notebook.consolidatedRunButton` setting.  \nThis feature is currently powered by the [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension so you will need to install the latest Prerelease version of Pylance to use this feature.  \n<video src=\"images/1_84/run-dependent-cell.mp4\" autoplay loop controls muted title=\"Run Precedent/Dependent Cells\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_84#_jupyter",
    "id": 3548
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### VS Code Speech  \nWe are introducing a new extension to bring voice support to VS Code! The new [VS Code Speech](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-speech) extension integrates into [GitHub Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) to enable voice-to-text transcription services for Chat input.  \nOnce installed, a microphone icon appears and when selected, begins filling Chat input with text based on the transcribed results of your voice. The transcription is computed locally on your machine and does not require a connection to the internet.  \n![VS Code Speech activated by the microphone icon](images/1_84/vscode-voice.gif)",
    "url": "https://code.visualstudio.com/updates/v1_84#_vs-code-speech",
    "id": 3549
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \n* Projects are displayed and can be added from the Pull Request description webview.\n* Integrated with GitHub Copilot to generate the PR title and description from the PR **Create** view.\n* PRs checked out with the GitHub CLI (`gh pr checkout`) are recognized by the extension.  \nReview the [changelog for the 0.76.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0760) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_84#_github-pull-requests-and-issues",
    "id": 3550
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Preview Features  \n### Floating editor windows  \nWe continued exploring how to pull editors out of the workbench window into their own windows and now want to invite the VS Code Insiders community to play with this exciting new feature and provide feedback.  \nMake sure to install [VS Code Insiders](https://code.visualstudio.com/insiders/) and run the new **View: Move Active Editor into a New Window** command on editors to open them in a floating window.  \n<video src=\"images/1_84/floating-windows.mp4\" autoplay loop controls muted title=\"Floating windows in VS Code\"></video>  \nWe still have to figure out many [issues](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aworkbench-auxwindow+-label%3Afeature-request+) and provide missing [features](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aworkbench-auxwindow+label%3Afeature-request), but we are optimistic that we can enable this feature in Stable in the near future.  \nThanks for testing!",
    "url": "https://code.visualstudio.com/updates/v1_84#_floating-editor-windows",
    "id": 3551
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### WASM-WASI support for Language Servers  \nSupport for language servers in WASM/WASI was added to the experimental [wasm-wasi-core](https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-wasi-core) extension.  \nThere is also an extension showcasing a simple language server written in Rust and compiled to WASM in the [vscode-wasm repo](https://github.com/microsoft/vscode-wasm/blob/d4fe7c2f4bec260bb97f4f83cec299e146faa985/testbeds/lsp-rust). The extension depends on the [language server crate](https://docs.rs/lsp-server/latest/lsp_server/) maintained by the [Rust analyzer team](https://github.com/rust-lang/rust-analyzer).",
    "url": "https://code.visualstudio.com/updates/v1_84#_wasm-wasi-support-for-language-servers",
    "id": 3552
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Extension authoring  \n### Improved test runner  \nThere is now a command-line runner and extension for VS Code to make running tests for extensions easier. Extensions using the new approach can run in VS Code's testing UI. While some migration is required, this usually only takes a few minutes. Read the VS Code [Testing Extensions](https://code.visualstudio.com/api/working-with-extensions/testing-extension) documentation for more information.",
    "url": "https://code.visualstudio.com/updates/v1_84#_improved-test-runner",
    "id": 3553
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Finalized TestMessage.contextValue API  \nYou can provide a `contextValue` on `TestMessage`s to be shown when users take actions on those messages. Additionally, two new menu contributions points are available, `testing/message/context` and `testing/message/content`. The former is displayed on the message in the Test Results tree view, and the latter is displayed over the message in the editor. For example, this might be used to provide an action to update a fixture in snapshot testing:  \n![Failed test result with Update Snapshot action displayed](images/1_84/testmessage-contextvalue.png)  \nRead more about `contextValue` in [issue #190277](https://github.com/microsoft/vscode/issues/190277).",
    "url": "https://code.visualstudio.com/updates/v1_84#_finalized-testmessage.contextvalue-api",
    "id": 3554
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Updated codicons  \nThe following new icons were added to our [codicon](https://code.visualstudio.com/api/references/icons-in-labels) library:  \n![New codicons](images/1_84/codicons-oct-2023-release.png)  \n* `copilot`\n* `git-fetch`\n* `mic`\n* `mic-filled`\n* `thumbsup-filled`\n* `thumbsdown-filled`\n* `coffee`\n* `game`\n* `snake`\n* `vr`\n* `chip`\n* `music`\n* `piano`",
    "url": "https://code.visualstudio.com/updates/v1_84#_updated-codicons",
    "id": 3555
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### New theme colors  \n* `textPreformat.background`: Background color for preformatted text segments",
    "url": "https://code.visualstudio.com/updates/v1_84#_new-theme-colors",
    "id": 3556
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Root folder icons per name  \nFile icon themes authors can now define name specific icons for root folders using the new properties `rootFolderNames` and `rootFolderNamesExpanded`. You can review the [File Icon Theme guide](https://code.visualstudio.com/api/extension-guides/file-icon-theme) for more information.",
    "url": "https://code.visualstudio.com/updates/v1_84#_root-folder-icons-per-name",
    "id": 3557
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### File watchers with custom exclude rules  \nThis milestone we added a proposed API for creating file system watchers with full control over exclude rules:  \n```ts\nexport interface FileSystemWatcherOptions {\n/**\n* An optional set of glob patterns to exclude from watching.\n* Glob patterns are always matched relative to the watched folder.\n*/\nreadonly excludes?: string[];\n}\n\nexport function createFileSystemWatcher(pattern: RelativePattern, options?: FileSystemWatcherOptions): FileSystemWatcher;\n```  \nThis new API gives your extension full control over the file watcher, irrespective if it's a recursive or non-recursive watcher or whether it wants to watch inside or outside the workspace. User or default configured exclude rules for file watching will not apply, so you can be sure to receive only the events you subscribed to.",
    "url": "https://code.visualstudio.com/updates/v1_84#_file-watchers-with-custom-exclude-rules",
    "id": 3558
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Engineering  \n### Windows 32-bit support ends  \nThere is no longer support for Windows 32-bit VS Code. If you're still on the 32-bit build of VS Code, you should [update](https://code.visualstudio.com/download) to the 64-bit version.",
    "url": "https://code.visualstudio.com/updates/v1_84#_windows-32-bit-support-ends",
    "id": 3559
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n## Extensions and documentation  \n### Gradle for Java  \nJava development in VS Code just got easier with the improved [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extension. The pre-release version has better support for building Gradle projects thanks to adopting the [Build Server Protocol](https://build-server-protocol.github.io) (BSP). Similar to other protocols used in VS Code, for example the [Language Server Protocol](https://microsoft.github.io/language-server-protocol) (LSP), the BSP provides an abstraction layer between development environments and build tools such as Gradle.  \nTo try out the new Gradle support, install both the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) and pre-release version of the [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extension. You can learn more about Gradle and the BSP in this recent [blog post from the Java extension team](https://devblogs.microsoft.com/java/new-build-server-for-gradle).  \n![Gradle for Java pre-release extension](images/1_84/gradle-extension.png)",
    "url": "https://code.visualstudio.com/updates/v1_84#_gradle-for-java",
    "id": 3560
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### FastAPI tutorial  \n[FastAPI](https://fastapi.tiangolo.com/) is a modern and fast web framework for building Python APIs, and has become more and more popular thanks to its simplicity and performance.  \nYou can now learn how you can get the best out of VS Code and the Python extension to create and debug FastAPI applications through our new [FastAPI Tutorial](https://code.visualstudio.com/docs/python/tutorial-fastapi)!",
    "url": "https://code.visualstudio.com/updates/v1_84#_fastapi-tutorial",
    "id": 3561
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Custom Layout user guide  \nThere is a new [Custom Layout](https://code.visualstudio.com/docs/editor/custom-layout) article describing layout customization for the workbench and editors. There you'll learn how to modify VS Code's main UI elements such as views, panels, and editors to fit your preferred workflow.  \n![Customize Layout dropdown](images/1_84/customize-layout-dropdown.png)  \nTopics include:  \n* Primary and Secondary Side Bars\n* Panel position and alignment\n* Pinned editor tabs\n* Editor group layout\n* and more",
    "url": "https://code.visualstudio.com/updates/v1_84#_custom-layout-user-guide",
    "id": 3562
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_84#_issue-tracking",
    "id": 3563
  },
  {
    "content": "Learn what is new in the Visual Studio Code October 2023 Release (1.84)  \n### Pull requests  \nContributions to `vscode`:  \n* [@amaust (Andrew Maust)](https://github.com/amaust): Fixes Aria Label Showing [Object object] [PR #195929](https://github.com/microsoft/vscode/pull/195929)\n* [@Cazka](https://github.com/Cazka): Fix typo for incrementalNaming setting [PR #194900](https://github.com/microsoft/vscode/pull/194900)\n* [@Charles-Gagnon (Charles Gagnon)](https://github.com/Charles-Gagnon): Fix arrow nav on dropdown action buttons focusing hidden dropdown [PR #167662](https://github.com/microsoft/vscode/pull/167662)\n* [@christian-bromann (Christian Bromann)](https://github.com/christian-bromann): Only render notebook container if visible [PR #188226](https://github.com/microsoft/vscode/pull/188226)\n* [@Connormiha (Mikhail)](https://github.com/Connormiha): fix: simplified map+flat [PR #193949](https://github.com/microsoft/vscode/pull/193949)\n* [@futurist (James Yang)](https://github.com/futurist): fix: dom.test.ts typo [PR #195249](https://github.com/microsoft/vscode/pull/195249)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Correct the CLI helptext for `--profile` [PR #193766](https://github.com/microsoft/vscode/pull/193766)\n* Allow hiding of launcher on Run and Debug title bar when debugging [PR #193812](https://github.com/microsoft/vscode/pull/193812)\n* Preselect correct row in Extension Log Level quickpick (fix #194515) [PR #194517](https://github.com/microsoft/vscode/pull/194517)\n* Show Reload Required buttons simultaneously after updateAllExtensions (#163627) [PR #195421](https://github.com/microsoft/vscode/pull/195421)\n* Show trust editor tab icon correctly for `\"window.density.editorTabHeight\": \"compact\"` (fix #196209) [PR #196212](https://github.com/microsoft/vscode/pull/196212)\n* Centre numbers vertically in top activity bar badges (fix #196691) [PR #196696](https://github.com/microsoft/vscode/pull/196696)\n* Correct the #196696 fix which caused oval badges [PR #196715](https://github.com/microsoft/vscode/pull/196715)\n* Upsize progress badge on top activity bar to match #196696 change [PR #196724](https://github.com/microsoft/vscode/pull/196724)\n* [@harbin1053020115 (ermin.zem)](https://github.com/harbin1053020115)\n* fix: fix editor progress position when enabled pinnedTabsOnSeparateRow [PR #195314](https://github.com/microsoft/vscode/pull/195314)\n* feat: support iconThemes definitions for root folders [PR #195319](https://github.com/microsoft/vscode/pull/195319)\n* [@hsfzxjy (hsfzxjy)](https://github.com/hsfzxjy): Fix faster __vsc_escape_value [PR #194459](https://github.com/microsoft/vscode/pull/194459)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fixes websocket doesn't handle ping frames correctly [PR #194436](https://github.com/microsoft/vscode/pull/194436)\n* [@jiawei-hong (Wei)](https://github.com/jiawei-hong): styles: only needs to be set border-right-width is none if it is not \u2026 [PR #195078](https://github.com/microsoft/vscode/pull/195078)\n* [@jruales (Joaqu\u00edn Ruales)](https://github.com/jruales): Skip regex.replace() cost when there's nothing to replace [PR #194854](https://github.com/microsoft/vscode/pull/194854)\n* [@Jvr2022 (Jvr)](https://github.com/Jvr2022)\n* cleanup unused files in .github [PR #189066](https://github.com/microsoft/vscode/pull/189066)\n* Fix grammar [PR #194970](https://github.com/microsoft/vscode/pull/194970)\n* [@k-yle (Ky\u2113e Hensel)](https://github.com/k-yle): fix syntax highlighting for .git-blame-ignore-revs [PR #194584](https://github.com/microsoft/vscode/pull/194584)\n* [@MichaelChirico (Michael Chirico)](https://github.com/MichaelChirico): Update org in reference repo [PR #194415](https://github.com/microsoft/vscode/pull/194415)\n* [@MrYuto (Yuto Liyosa)](https://github.com/MrYuto)\n* Make `OpenDisassemblyViewAction` an `Action2` [PR #195623](https://github.com/microsoft/vscode/pull/195623)\n* Resolve absolute file target links in tsconfig (#195514) [PR #195759](https://github.com/microsoft/vscode/pull/195759)\n* [@sandeep-sen (Sandeep Sen)](https://github.com/sandeep-sen): Adding mgmt libraries for Go + changing matcher logic for Go [PR #191036](https://github.com/microsoft/vscode/pull/191036)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): fix: memory leak in menu [PR #196302](https://github.com/microsoft/vscode/pull/196302)\n* [@tats-u (Tatsunori Uchino)](https://github.com/tats-u): Add support for `--force-if-includes` to force push more safely [PR #187932](https://github.com/microsoft/vscode/pull/187932)\n* [@tisilent (xiejialong)](https://github.com/tisilent)\n* Disable transform optimization SettingsTree [PR #179095](https://github.com/microsoft/vscode/pull/179095)\n* Terminal: fix rename and injection [PR #194621](https://github.com/microsoft/vscode/pull/194621)\n* fix #191201 [PR #194965](https://github.com/microsoft/vscode/pull/194965)\n* [@vuittont60](https://github.com/vuittont60): fix typos [PR #195562](https://github.com/microsoft/vscode/pull/195562)\n* [@whscullin (Will Scullin)](https://github.com/whscullin): Make sure link fragment is preserved [PR #193743](https://github.com/microsoft/vscode/pull/193743)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114)\n* feat: Add the logo of the built-in extension [PR #192999](https://github.com/microsoft/vscode/pull/192999)\n* fix: to #157015 fix view label command localized [PR #193544](https://github.com/microsoft/vscode/pull/193544)\n* fix: Close #195980, Fix contribute points default display for extensions [PR #195984](https://github.com/microsoft/vscode/pull/195984)  \nContributions to `vscode-js-debug`:  \n* [@OnesAndZer0s (OnesAndZer0s)](https://github.com/OnesAndZer0s): feat: Tidying Up of Instrumentation Breakpoints [PR #1853](https://github.com/microsoft/vscode-js-debug/pull/1853)  \nContributions to `language-server-protocol`:  \n* [@manandre (Emmanuel Andr\u00e9)](https://github.com/manandre): Fix NotebookDocumentSync example [PR #1831](https://github.com/microsoft/language-server-protocol/pull/1831)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_84#_pull-requests",
    "id": 3564
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Accessibility  \n### Accessible View  \nLast iteration, we introduced automatic closing of the [Accessible View](https://code.visualstudio.com/docs/editor/accessibility#_accessible-view) when a key is pressed for a seamless flow between a UI component and its Accessible View. In some cases, this behavior might not be desirable and can now be disabled via the `accessibility.accessibleView.closeOnKeyPress` setting.  \nIf you find yourself toggling between the terminal and the terminal's Accessible View, you might want to enable `terminal.integrated.accessibleViewFocusOnCommandExecution`, which automatically opens the Accessible View after a command is executed in the terminal.",
    "url": "https://code.visualstudio.com/updates/v1_85#_accessible-view",
    "id": 3565
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Tooltips shown on keyboard focus  \nTo improve the experience for keyboard users, tooltips are now shown on keyboard focus for items with custom hovers such as Activity Bar and Status Bar items.  \n![Tooltip for Extensions view icon in the Activity Bar](images/1_85/tooltip-keyboard-focus.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_tooltips-shown-on-keyboard-focus",
    "id": 3566
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Speech detection timeout  \nA new setting `accessibility.voice.speechTimeout` controls how long to wait during silence before accepting speech input, for example to Copilot Chat. By default, voice input is automatically submitted after `1.2` seconds of silence. You can set this to `0` to disable accepting speech input entirely.",
    "url": "https://code.visualstudio.com/updates/v1_85#_speech-detection-timeout",
    "id": 3567
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Workbench  \n### Floating editor windows  \nWe are happy to announce that with this release you can move editors out of the main window into their own lightweight windows. Changes to an editor in one window apply immediately to all other windows where the editor is open.  \nThe easiest way to create a floating editor window is to drag an editor out of the current window and drop it on an empty space on your desktop:  \n<video src=\"images/1_85/float_1.mp4\" autoplay loop controls muted title=\"Floating window by drag and drop\"></video>  \n_Theme: [GitHub Dark](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/GitHub.github-vscode-theme/GitHub%20Dark))_  \nThe new `workbench.editor.dragToOpenWindow` setting can disable this behavior.  \nThere are also new global and contextual commands to move or copy editors and editor groups into their own windows:  \n<video src=\"images/1_85/float_2.mp4\" autoplay loop controls muted title=\"Command to Copy Editor into New Window\"></video>  \n* **View: Copy Editor into New Window** (`workbench.action.editor.copyWithSyntaxHighlightingAction`)\n* **View: Move Editor into New Window** (`workbench.action.editor.moveEditorToNextWindow`)\n* **View: Copy Editor Group into New Window** (`workbench.action.editor.copyGroupToNextWindow`)\n* **View: Move Editor Group into New Window** (`workbench.action.editor.moveGroupToNextWindow`)\n* **View: New Empty Editor Window** (`workbench.action.newWindow`)  \nThe editor area in floating windows can be arranged with any [complex layout](http://code.visualstudio.com/docs/editor/custom-layout) that you want. And since both terminals and search results can be opened as editors, you can now have these features in separate windows as well!  \n![Terminal and Search as editors in a floating window](images/1_85/float_3.png)  \nGive this new feature a try and report back any issues you encounter. Make sure to [review our existing issues](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Aworkbench-auxwindow) and cast your vote on missing features.",
    "url": "https://code.visualstudio.com/updates/v1_85#_floating-editor-windows",
    "id": 3568
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Native paste support in the File Explorer  \nVS Code now supports natively pasting files from your operating system's Explorer into the VS Code File Explorer.  \n<video src=\"images/1_85/native-file-copy.mp4\" autoplay loop controls muted title=\"Copy a file from Windows Explorer to the VS Code File Explorer\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_85#_native-paste-support-in-the-file-explorer",
    "id": 3569
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Extension auto update control  \nYou can now choose which extensions to auto update. This is helpful if you do not want to auto update all extensions but selectively choose which ones to auto update. You can either select an extension or all extensions from a publisher. If you choose to auto update all extensions from a publisher, you can then unselect individual extensions from that publisher.  \n![Choose extensions to auto update](images/1_85/select-auto-update-extensions.png)  \nYou should have auto updates either disabled (**None**) or enabled for selected extensions (**Selected Extensions**) to use this feature.  \n![Auto update mode options with Selected Extensions checked](images/1_85/auto-update-mode.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_extension-auto-update-control",
    "id": 3570
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### New Profile icons  \nThe following new Profile icons are available to add to your profiles.  \n![New Profile icons](images/1_85/new-profile-icons.png)  \n* `vr`\n* `piano`\n* `coffee`\n* `snake`\n* `robot`\n* `game`\n* `chip`\n* `music`",
    "url": "https://code.visualstudio.com/updates/v1_85#_new-profile-icons",
    "id": 3571
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Settings editor search improvements and bug fixes  \nThe Settings editor is back to sorting search results by match type first, rather than only by the table of contents. In other words, title and keyword matches show up at the top, so you don't have to scroll down to find a setting with a matching title.  \n![Settings editor showing the windows.titleBarStyle setting appearing first when searching \"title bar style\"](images/1_85/se-search-fixed.png)  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))_  \nThe Settings editor still orders settings by the table of contents for tie-breakers, meaning that extension authors' `order` keys are respected for search queries such as `@ext:<extension-id>`.  \nMany Settings editor regressions were also fixed this iteration, including the Settings editor failing to load due to network issues and hanging on certain search queries.",
    "url": "https://code.visualstudio.com/updates/v1_85#_settings-editor-search-improvements-and-bug-fixes",
    "id": 3572
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Editor  \n### Code Actions on Save and Auto  \nYou can now enable Code Actions on Auto Save in the editor, and **Editor: Code Actions On Save** (editor.codeActionsOnSave) settings have been migrated over to corresponding enum values. When set to `always`, Code Actions can be run when you save or Auto Save with window change (`onWindowChange`) or focus change (`onFocusChange`). To enable this feature, check **Editor: Code Actions On Save** (editor.codeActionsOnSave) and change each Code Action's setting to `always`.  \nThe setting value updates are as follows, with the previous boolean values to be deprecated in favor of the string equivalent.  \nThe options are:  \n* `explicit` - Triggers Code Actions when explicitly saved. Same as `true`.\n* `always` -  Triggers Code Actions when explicitly saved and on Auto Saves from window or focus changes.\n* `never` - Never triggers Code Actions on save. Same as `false`.",
    "url": "https://code.visualstudio.com/updates/v1_85#_code-actions-on-save-and-auto",
    "id": 3573
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Multi document highlighting  \nMulti document highlighting has additional support from a new proposed [MultiDocumentHighlightProvider](#multi-document-highlighting-api) API. There is now built-in support for semantic occurrence highlighting for the TypeScript language that can be enabled by changing the **Editor: Occurrences Highlight** (`editor.occurrencesHighlight`) setting value from `singleFile` to `multiFile`. For languages besides TypeScript, multi document occurrences are highlighted based off of textual occurrences rather than semantic occurrences until more language-specific providers are implemented.  \n<video src=\"images/1_85/multi-document-highlight.mp4\" autoplay loop controls muted title=\"Semantic multi document highlighting across TypeScript files\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_85#_multi-document-highlighting",
    "id": 3574
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Source Control  \n### Incoming/Outgoing changes  \nThis milestone we have introduced a new **Incoming/Outgoing** section in the Source Control view to display incoming and outgoing changes for the current branch compared to its remote. The new section displays both the individual changes with the number of resources changed along with insertions and deletions, as well as an **All Changes** entry that summarizes all resources across all changes. The visibility of the new section can be controlled using the `scm.showIncomingChanges`, and `scm.showOutgoingChanges` settings. Both settings support the following values: `always`, `auto` (default), and `never`.  \n![Incoming/Outgoing changes in the Source Control view](images/1_85/scm-incoming-outgoing.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_incoming/outgoing-changes",
    "id": 3575
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Input maximum lines  \nPreviously, Source Control input would auto-grow to display at most 6 lines of text, which was sufficient space for most commit messages. However there were cases where more space would be helpful, and there is a new setting, `scm.inputMaxLines`, that controls the maximum number of Source Control input lines.",
    "url": "https://code.visualstudio.com/updates/v1_85#_input-maximum-lines",
    "id": 3576
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Terminal  \n### Sticky scroll  \nSticky scroll has landed in the terminal! Using knowledge provided by [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration), the prompt of the command at the top of the viewport sticks to the top of the terminal, similar to how [Sticky Scroll works in the editor](https://code.visualstudio.com/updates/v1_71#_sticky-scroll).  \n![Running 'ls' command in the terminal will show the 'ls' prompt at the top of the terminal](images/1_85/terminal-sticky-scroll.png)  \nClicking a Sticky Scroll element will scroll to that part of the terminal buffer.  \nThis is currently disabled by default but can be enabled by setting `\"terminal.integrated.stickyScroll.enabled\": true`. We plan on enabling this by default in the future, at which point you will be able to opt out by right-clicking and toggling it off.",
    "url": "https://code.visualstudio.com/updates/v1_85#_sticky-scroll",
    "id": 3577
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Command highlighting  \nHovering a command in the terminal now shows a highlight bar to its left. This is useful for plain terminal prompts where it's not clear where one command starts and another ends.  \n![Hovering a command will show a line to the left that highlights the command and its output](images/1_85/terminal-command-highlighting.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_command-highlighting",
    "id": 3578
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Shell integration and command navigation improvements  \nWith the introduction of Sticky Scroll, many improvements were made to shell integration. In particular to terminals running on Windows, where the markers received from shell integration aren't totally reliable. There is now logic that intelligently scans the terminal contents and adjusts the markers before making the terminal command available.  \nShell integration is also now capable of detecting the distinct parts of a prompt; the prompt and its input. This determines what part of the command displays when using Sticky Scroll. This will also trim empty lines from the top of the prompt, commonly used to split up output and make the terminal easier to read.  \nThe existing [command navigation](https://code.visualstudio.com/docs/terminal/shell-integration#_command-navigation) feature also benefits as you can navigate to the more reliable prompt used for Sticky Scroll, rather than the less reliable prompt line.  \nBefore:  \n![Before only a single line would be highlighted](images/1_85/terminal-command-nav-before.png)  \nAfter:  \n![When navigating commands, the entire prompt is now highlighted](images/1_85/terminal-command-nav-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_shell-integration-and-command-navigation-improvements",
    "id": 3579
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Improved underline rendering  \nDashed and dotted underlines in the terminal are now rendered in a pixel perfect pattern:  \n![Dotted and dashed underlines are now pixel perfect](images/1_85/terminal-underline.png)  \n![The underline improvements also work when zoomed in](images/1_85/terminal-underline-zoom.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_improved-underline-rendering",
    "id": 3580
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Git pull Quick Fix  \nIf a Git branch checkout can be fast forwarded, a new terminal Quick Fix provides the option to run `git pull`.",
    "url": "https://code.visualstudio.com/updates/v1_85#_git-pull-quick-fix",
    "id": 3581
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### node_module symbols excluded from workspace symbol search  \n[Go to Symbol in Workspace](https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_go-to-symbol-in-workspace) now excludes symbols from `node_modules` by default. This makes it easier to find symbols in your code without getting overwhelmed by symbols from installed packages.  \nYou can revert to the previous behavior that included all symbols in the project by setting `\"typescript.workspaceSymbols.excludeLibrarySymbols\": false`.",
    "url": "https://code.visualstudio.com/updates/v1_85#_node_module-symbols-excluded-from-workspace-symbol-search",
    "id": 3583
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Jump to definition for inlay hints  \nTypes in JavaScript and TypeScript [inlay hints](https://code.visualstudio.com/docs/editor/editingevolved#_inlay-hints) are now interactive. Quickly jump to a type's definition by hovering over the type and clicking while holding `kbstyle(Ctrl)` on Windows and Linux or `kbstyle(Cmd)` on macOS:  \n![Inlay hint hover showing Go to Definition by using Ctrl/Cmd + click](images/1_85/ts-inlay.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_jump-to-definition-for-inlay-hints",
    "id": 3584
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Prefer using 'type' for auto imports  \n[Type-only imports](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export) let you import a type while ensuring the import gets fully erased at runtime. If you prefer to always default to `type` imports, you can now set `\"typescript.preferences.preferTypeOnlyAutoImports\": true` and auto imports will use type-only import. This setting is off by default.",
    "url": "https://code.visualstudio.com/updates/v1_85#_prefer-using-'type'-for-auto-imports",
    "id": 3585
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Python  \n#### Show Type Hierarchy with Pylance  \nYou can now more conveniently explore and navigate through your Python projects' types relationships when using [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance). This can be helpful when working with large codebases with complex type relationships.  \nWhen you right-click on a symbol, you can select **Show Type Hierarchy** to open the type hierarchy view. From there you can navigate through the symbols' subtypes as well as supertypes.  \n<video src=\"images/1_85/show-type-hierarchy-pylance.mp4\" autoplay loop controls muted title=\"Show Type Hierarchy with Pylance\"></video>  \n_Theme: [Catppuccin Macchiato](https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc) (preview on [vscode.dev](https://vscode.dev/editor/theme/Catppuccin.catppuccin-vsc/Catppuccin%20Macchiato))_  \n#### Configurable debugging option under the Run button menu  \nThe [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension now has a configurable debug option under the **Run** button menu. When you select **Python Debugger: Debug using launch.json** and there is an existing `launch.json` in your workspace, it shows all the available debug configurations that you can pick to start the debugger. If there aren't any configurations, you are prompted to select a debug configuration template to use to create a `launch.json` file for your Python application.  \n![Python Debugger: Debug using launch.json option under the Run button menu](images/1_85/python-debug-with-config-button.png)  \n#### Deactivate command supported when activated using environment variables  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension has a new activation mechanism that activates the selected environment in your default terminal without running any explicit activation commands. This is currently behind an experimental flag and can be enabled through the following **User** setting: `\"python.experiments.optInto\": [\"pythonTerminalEnvVarActivation\"]`.  \nHowever, one initial drawback with this activation mechanism is that it didn't support the `deactivate` command. We received feedback that this is an important part of some users' workflow, so we have added support for `deactivate` when the selected default terminal is PowerShell or Command Prompt. We have plans to add support for additional terminals in the future.  \n#### Warning message and setting for REPL Smart Send  \nWhen attempting to use [Smart Send](https://code.visualstudio.com/updates/v1_84#_python) via `kbstyle(Shift+Enter)` on a Python file that contains invalid or deprecated code, there is now a warning message and an option to deactivate REPL Smart Send. Users can change their user and workspace specific behavior for REPL Smart Send via the **Python.REPL: Enable REPLSmart Send** (`python.REPL.enableREPLSmartSend`) setting.  \n![Settings editor entry for Python REPL Smart Send](images/1_85/enable-repl-smart-send.png)  \n#### Testing architecture rewrite  \nThe Python [test adapter rewrite experiment](https://devblogs.microsoft.com/python/python-in-visual-studio-code-june-2023-release/#test-discovery-and-execution-rewrite) has been rolled out to 100% of users. Currently, you can opt out by adding `\"python.experiments.optOutFrom\" : \"pythonTestAdapter\"` in your `settings.json`, but we will soon drop this experimental flag and adopt this new architecture.",
    "url": "https://code.visualstudio.com/updates/v1_85#_python",
    "id": 3586
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues.  \n* Merge queues are now supported in the PR description and **Create** view.\n* A new setting `\"githubPullRequests.allowFetch\": false` prevents `fetch` from being run.\n* Submodule support was improved.  \nReview the [changelog for the 0.78.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0780) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_85#_github-pull-requests-and-issues",
    "id": 3587
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Preview Features  \n### Sticky Scroll in trees  \nBuilding on the success of Sticky Scroll in the editor, we've extended this feature to all tree views, enabling users to more easily navigate project trees. Sticky Scroll for trees can be enabled by setting `workbench.tree.enableStickyScroll: true`. To ensure Sticky Scroll does not take too much space, it can only take up to 40% of the view height. Additionally, users can customize the maximum number of sticky elements by configuring `workbench.tree.stickyScrollMaxItemCount`, which is set to 7 by default.  \n<video src=\"images/1_85/sticky-scroll-file-explorer.mp4\" autoplay loop controls muted title=\"Sticky Scroll in the File Explorer\"></video>  \nFor an improved tree navigation experience, you can select a sticky element to jump directly to it within the tree, or press the chevron of a parent element to hide all its child elements. Additionally, accessing checkboxes and action items is easier when Sticky Scroll is enabled.  \n<video src=\"images/1_85/sticky-scroll-extension-trees.mp4\" autoplay loop controls muted title=\"Sticky Scroll in the GitHub Pull Requests and Issues extension Pull Request tree view\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_85#_sticky-scroll-in-trees",
    "id": 3588
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Multi-file diff editor  \nThis release ships a preview of the **multi diff editor**. The multi diff editor lets you view changes in multiple files in one scrollable view:  \n<video src=\"images/1_85/multiFileDiffEditor.mp4\" autoplay loop controls muted title=\"Multiple file diff view\"></video>  \nTo enable the multi diff editor, set `\"multiDiffEditor.experimental.enabled\": true`. Currently, the multi diff editor can be used to review local changes, staged changes, incoming/outgoing changes, and changes from pull requests. Note that the multi diff editor is not yet feature complete and might not work in all scenarios.",
    "url": "https://code.visualstudio.com/updates/v1_85#_multi-file-diff-editor",
    "id": 3589
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Alternate character filtering for Korean  \nFor various features across the workbench that use filtering, VS Code will now also search the QWERTY keyboard equivalent as it's common to accidentally forget to switch the language Input Method Editor (IME). This works similar to search engines but in real time. For example, `debug` when typed in a Korean IME is `\u3147\ub4c0\u3155\u314e`, which is nonsensical:  \n![Searching for a \"\u3147\ub4c0\u3155\u314e\" command will now present results for \"debug\"](images/1_85/korean-filtering.png)  \nCurrently this does not work when filtering from the middle of the word.",
    "url": "https://code.visualstudio.com/updates/v1_85#_alternate-character-filtering-for-korean",
    "id": 3590
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Hide Problem decorations  \nThere is a new setting to hide Problem decorations in the editor and throughout the workbench (excluding the Problems view). The setting **Problems: Visibility** (`problems.visibility`) is enabled by default to show all problems.  \nSome Problems UI settings are disabled when **Problems: Visibility** is off:  \n* **Outline > Problems: Badges** (`outline.problems.badges`)\n* **Outline > Problems: Colors** (`outline.problems.colors`)\n* **Outline > Problems: Enabled** (`outline.problems.enabled`)\n* **Problems > Decorations: Enabled** (`problems.decorations.enabled`)  \nA warning is shown in the Status Bar when **Problems: Visibility** is off.  \n![Problems: Visibility off Status Bar item and hover](images/1_85/problems-visibility-off.png)",
    "url": "https://code.visualstudio.com/updates/v1_85#_hide-problem-decorations",
    "id": 3591
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Chat Agents  \nAs mentioned in our recent blog post, [Pursuit of \"wicked smartness\" in VS Code](https://code.visualstudio.com/blogs/2023/11/13/vscode-copilot-smarter#_extensibility), we are developing a model for extensions to contribute chat agents to the Copilot Chat view. The chat agent API is proposed, but you can experiment with adding your own chat agent now. Subscribe to [issue #199908](https://github.com/microsoft/vscode/issues/199908) for updates.",
    "url": "https://code.visualstudio.com/updates/v1_85#_chat-agents",
    "id": 3592
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Multi document highlighting API  \nAs introduced in the previous release, there is now support for multi document highlighting within VS Code. This iteration, we added a [proposed MultiDocumentHighlightProvider API](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.multiDocumentHighlightProvider.d.ts) to register multi document highlight providers. This adds the ability to provide semantic occurrence highlighting for specific programming languages. Providers return a new `MultiDocumentHighlight` structure with a Map of `URI` to `DocumentHighlight`. Feedback and further updates can be tracked via [issue #196354](https://github.com/microsoft/vscode/issues/196354).",
    "url": "https://code.visualstudio.com/updates/v1_85#_multi-document-highlighting-api",
    "id": 3593
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n## Engineering  \n### New CDN  \nWe're rolling out the deployment to a new CDN endpoint: `vscode.download.prss.microsoft.com`. For system administrators, make sure to configure network rules to allow traffic from this endpoint.",
    "url": "https://code.visualstudio.com/updates/v1_85#_new-cdn",
    "id": 3594
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### macOS 10.13 and 10.14 support has ended  \nVS Code `1.85` is the last release that supports macOS 10.13 (macOS High Sierra) and 10.14 (macOS Mojave). Refer to our [FAQ](https://code.visualstudio.com/docs/supporting/faq#_can-i-run-vs-code-on-old-macos-versions) for additional information.",
    "url": "https://code.visualstudio.com/updates/v1_85#_macos-10.13-and-10.14-support-has-ended",
    "id": 3595
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)",
    "url": "https://code.visualstudio.com/updates/v1_85#_issue-tracking",
    "id": 3596
  },
  {
    "content": "Learn what is new in the Visual Studio Code November 2023 Release (1.85)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Simplify `'solid' || ''` in viewPaneContainer.ts [PR #198515](https://github.com/microsoft/vscode/pull/198515)\n* [@abhijit-chikane (Abhijit Chikane)](https://github.com/abhijit-chikane): treeStickyScroll change default value to boolean [PR #198849](https://github.com/microsoft/vscode/pull/198849)\n* [@amaust (Andrew Maust)](https://github.com/amaust): Adds \"verified domain\" identifier to url tooltip [PR #197037](https://github.com/microsoft/vscode/pull/197037)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch)\n* Add setting for preferring type-only imports [PR #196123](https://github.com/microsoft/vscode/pull/196123)\n* [typescript-language-features] Add missing preference description for preferTypeOnlyAutoImports [PR #197403](https://github.com/microsoft/vscode/pull/197403)\n* [@arvid220u (Arvid Lunnemark)](https://github.com/arvid220u)\n* fix blank settings page [PR #198261](https://github.com/microsoft/vscode/pull/198261)\n* Update condition names to allow node [PR #198274](https://github.com/microsoft/vscode/pull/198274)\n* [@cobey (Cody Beyer)](https://github.com/cobey)\n* Add missing py azure packages [PR #195508](https://github.com/microsoft/vscode/pull/195508)\n* Cobey add missing js [PR #197600](https://github.com/microsoft/vscode/pull/197600)\n* [@d-mahard (Dipta Mahardhika)](https://github.com/d-mahard): chore: rename color var for comment input box [PR #197950](https://github.com/microsoft/vscode/pull/197950)\n* [@elseifthen](https://github.com/elseifthen): Display line numbers in front of search results (#190742) [PR #195452](https://github.com/microsoft/vscode/pull/195452)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Add 'Lock Group' button on aux windows (#182265) [PR #182294](https://github.com/microsoft/vscode/pull/182294)\n* Support condition and hit count on data breakpoints (fix #188721) [PR #195710](https://github.com/microsoft/vscode/pull/195710)\n* Remove redundant task system message and early return affecting FSPs (fix #192490) [PR #196247](https://github.com/microsoft/vscode/pull/196247)\n* Avoid empty or ambiguous repository label in Repositories submenu (fix #196613) [PR #196623](https://github.com/microsoft/vscode/pull/196623)\n* Add `typescript.implementationsCodeLens.showOnInterfaceMethods` setting (#136282) [PR #198419](https://github.com/microsoft/vscode/pull/198419)\n* Remove obsolete migration code for Timeline setting [PR #198542](https://github.com/microsoft/vscode/pull/198542)\n* Add 'Collapse All Diffs' action button to multi-diff editor [PR #199064](https://github.com/microsoft/vscode/pull/199064)\n* Multi-diff editor: add Expand All Diffs action [PR #199623](https://github.com/microsoft/vscode/pull/199623)\n* [@gtritchie (Gary Ritchie)](https://github.com/gtritchie): aria-hide search icon [PR #197577](https://github.com/microsoft/vscode/pull/197577)\n* [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal): feat: allow keyboard shortcut creation for terminal copy commands [PR #197099](https://github.com/microsoft/vscode/pull/197099)\n* [@hsfzxjy (Xie Jingyi)](https://github.com/hsfzxjy)\n* @installed matches extension description [PR #196602](https://github.com/microsoft/vscode/pull/196602)\n* Set cursor when clicking \"Show Previous/Next Change\" [PR #197501](https://github.com/microsoft/vscode/pull/197501)\n* Add inlineSuggest.showToolbar.never [PR #198227](https://github.com/microsoft/vscode/pull/198227)\n* [@idootop (Del)](https://github.com/idootop): feat: introducing new hover focus options for editor.action.showHover [PR #196891](https://github.com/microsoft/vscode/pull/196891)\n* [@jsoref (Josh Soref)](https://github.com/jsoref): Write out `Cannot` [PR #198377](https://github.com/microsoft/vscode/pull/198377)\n* [@jtbandes (Jacob Bandes-Storch)](https://github.com/jtbandes): Update Swift grammar and upstream repository [PR #197470](https://github.com/microsoft/vscode/pull/197470)\n* [@marrej (Marcus Revaj)](https://github.com/marrej): # Fix Suggest dropdown/inline completion partial accept (via next token/line) race [PR #197633](https://github.com/microsoft/vscode/pull/197633)\n* [@marvinruder (Marvin A. Ruder)](https://github.com/marvinruder): Add Bun as package manager to `npm` extension [PR #198005](https://github.com/microsoft/vscode/pull/198005)\n* [@mrgharabaghi (Mohammad Reza Gharabaghi)](https://github.com/mrgharabaghi): Update theme-defaults [PR #197449](https://github.com/microsoft/vscode/pull/197449)\n* [@myty (Michael Tyson)](https://github.com/myty): Use Extension Provided Terminal Profile from Context Menu [PR #195108](https://github.com/microsoft/vscode/pull/195108)\n* [@n-gist (n-gist)](https://github.com/n-gist): Add pinned tab button (icon) control setting [PR #196896](https://github.com/microsoft/vscode/pull/196896)\n* [@nolddor (Jack Nolddor)](https://github.com/nolddor): fix: missing translation for new-empty-windows desktop action [PR #199129](https://github.com/microsoft/vscode/pull/199129)\n* [@noritada (Noritada Kobayashi)](https://github.com/noritada): Fix an issue that \\xN8 and \\xN9 in Rust strings are incorrectly colored [PR #196198](https://github.com/microsoft/vscode/pull/196198)\n* [@oxcened (Alen Ajam)](https://github.com/oxcened): fix: do not hide hover on model content change of editor [PR #198100](https://github.com/microsoft/vscode/pull/198100)\n* [@PrathamLalwani](https://github.com/PrathamLalwani): added voice chat listening duration feature [PR #197801](https://github.com/microsoft/vscode/pull/197801)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): [Acc] Keyboard accessible tooltips- Fixes #132344 [PR #197965](https://github.com/microsoft/vscode/pull/197965)\n* [@rehmsen (Ole)](https://github.com/rehmsen)\n* Layout when switching from welcome to terminal. [PR #173368](https://github.com/microsoft/vscode/pull/173368)\n* Remove cycle  browserHostService.ts -> web.api.ts. [PR #198221](https://github.com/microsoft/vscode/pull/198221)\n* Make xtermTerminal.test.ts hermetic. [PR #198403](https://github.com/microsoft/vscode/pull/198403)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Increase the target of Monaco from es6 to es2018 [PR #192050](https://github.com/microsoft/vscode/pull/192050)\n* [@ronakj (Ronak Jain)](https://github.com/ronakj): Fix tsconfig resolution for navigation [PR #192851](https://github.com/microsoft/vscode/pull/192851)\n* [@scripthunter7 (David)](https://github.com/scripthunter7): Add TMLanguage aliases to YAML [PR #198300](https://github.com/microsoft/vscode/pull/198300)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n* feature: allow to paste files from the clipboard [PR #195730](https://github.com/microsoft/vscode/pull/195730)\n* fix: memory leak in dropdown action [PR #197769](https://github.com/microsoft/vscode/pull/197769)\n* fix: memory leak in comments controller [PR #198237](https://github.com/microsoft/vscode/pull/198237)\n* [@tisilent (xiejialong)](https://github.com/tisilent)\n* Add mousedown,contextmenu events to terminal find [PR #194817](https://github.com/microsoft/vscode/pull/194817)\n* Delete hide assignment in _adoptConfiguration* [PR #197526](https://github.com/microsoft/vscode/pull/197526)\n* [@WardenGnaw (Andrew Wang)](https://github.com/WardenGnaw)\n* Show Dynamic Configuration Providers with No Context (file opened) [PR #196768](https://github.com/microsoft/vscode/pull/196768)\n* Add support for running DebugConfigurations with serverReadyAction [PR #197597](https://github.com/microsoft/vscode/pull/197597)\n* [@zobo (Damjan Cvetko)](https://github.com/zobo): fix: invalid endCharacter value in built in PHP validation provider [PR #196166](https://github.com/microsoft/vscode/pull/196166)  \nContributions to `vscode-css-languageservice`:  \n* [@dyhagho (Dyhagho Brice\u00f1o)](https://github.com/dyhagho): [scss] Path resolver to include partial files support [PR #373](https://github.com/microsoft/vscode-css-languageservice/pull/373)  \nContributions to `vscode-pull-request-github`:  \n* [@flpcury (Felipe Cury)](https://github.com/flpcury): Fix deprecation messages for createDraft and setAutoMerge [PR #5429](https://github.com/microsoft/vscode-pull-request-github/pull/5429)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Treat `githubIssues.useBranchForIssues` setting description as markdown (fix #5506) [PR #5508](https://github.com/microsoft/vscode-pull-request-github/pull/5508)\n* [@kurowski (Brandt Kurowski)](https://github.com/kurowski): add setting to never offer ignoring default branch pr [PR #5435](https://github.com/microsoft/vscode-pull-request-github/pull/5435)\n* [@ThomsonTan (Tom Tan)](https://github.com/ThomsonTan): Iterate the diffs in each active PR in order [PR #5437](https://github.com/microsoft/vscode-pull-request-github/pull/5437)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_85#_pull-requests",
    "id": 3597
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Use \"Hey Code\" voice command  \nWith the new `accessibility.voice.keywordActivation` setting, you can enable VS Code to listen for the \"Hey Code\" voice command to start a voice session with Copilot Chat. The voice recognition is computed locally on your machine and is never sent to any server.  \nAvailable options are:  \n* `chatInView`: start voice chat from the Chat view\n* `quickChat`: start quick voice chat from the Quick Chat control\n* `inlineChat`: start voice chat from inline chat in the editor\n* `chatInContext`: start voice from inline chat if the focus is in the editor, otherwise voice chat from the Chat view  \nThe following example shows \"Hey Code\" with the `inlineChat` option configured:  \n<video src=\"images/1_86/hey-code.mp4\" autoplay loop controls muted title=\"Use the 'Hey Code' voice command to activate voice chat.\"></video>  \nA small microphone icon in the Status Bar signals when VS Code is using the microphone for recognizing \"Hey Code\".  \nOnce the voice chat session is completed, VS Code will again listen to \"Hey Code\" to start it again.  \nTo use this new capability, the following extensions are required:  \n* [GitHub Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat)\n* [VS Code Speech](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-speech)  \n> **Note:** the voice recognition runs locally on your machine and is never sent to any server.",
    "url": "https://code.visualstudio.com/updates/v1_86#_use-hey-code-voice-command",
    "id": 3598
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Workbench  \n### Restore auxiliary windows  \nWith this release, all opened floating window associated with a main window will restore when you restart the application. This includes opened editors, and size and location of the auxiliary window.  \n<video src=\"images/1_86/aux-restore.mp4\" autoplay loop controls muted title=\"Auxiliary windows restore after reloading or restarting VS Code.\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_86#_restore-auxiliary-windows",
    "id": 3599
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Sticky Scroll in tree views  \nBuilding on the success of Sticky Scroll in the editor, we've extended this feature to all tree views, enabling users to more easily navigate project trees. Sticky Scroll for tree views can be enabled or disabled with the `workbench.tree.enableStickyScroll` setting.  \nTo ensure Sticky Scroll does not take too much space, it is limited to maximum 40% of the view height. Additionally, users can customize the maximum number of sticky elements by configuring `workbench.tree.stickyScrollMaxItemCount`, which is set to 7 by default. If there are more sticky elements than can be displayed, Sticky Scroll will consolidate the last sticky elements together, if the tree view supports this feature.  \n<video src=\"images/1_86/sticky-scroll-file-explorer.mp4\" autoplay loop controls muted title=\"Sticky Scroll in the File Explorer.\"></video>  \nFor an improved tree navigation experience, you can select a sticky element to jump directly to the element within the tree. Alternately, press the chevron of a parent element to hide all its child elements. Additionally, accessing checkboxes and action items is easier when Sticky Scroll is enabled.  \n<video src=\"images/1_86/sticky-scroll-extension-trees.mp4\" autoplay loop controls muted title=\"Sticky Scroll in the GitHub Pull Requests and Issues extension Pull Request tree view.\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_86#_sticky-scroll-in-tree-views",
    "id": 3600
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Configure zoom levels per window  \nThe new setting `window.zoomPerWindow`, which is enabled by default, lets you configure the zoom commands (**Zoom In**, **Zoom Out**, **Zoom Reset**) to apply only to the active window, and not to all opened windows. Previously using these commands would not only apply it to all opened windows, but would also update the `window.zoomLevel` setting.  \nWe believe that using these commands is more of an ad-hoc gesture, for example when giving a presentation, and thus should only apply to the window they are invoked from.  \nAs you can see from this example, only the active window's zoom level changes, but not for the other window:  \n<video src=\"images/1_86/zoom.mp4\" autoplay loop controls muted title=\"Configure per-window zoom levels and show zoom indicator in Status Bar.\"></video>  \nA zoom level indicator is shown in the Status Bar when the custom zoom level of a window does not match the `window.zoomLevel` setting value. Select the Status Bar indicator to find controls to change zoom levels, reset the zoom level, or quickly go to the related settings.  \n![Zoom indicator and controls in the Status Bar.](images/1_86/zoom.png)  \nA window with custom zoom level retains that zoom level across restarts and across workspace changes.  \n> **Note:** configure `window.zoomPerWindow` to `false` to restore the previous zoom level behavior.",
    "url": "https://code.visualstudio.com/updates/v1_86#_configure-zoom-levels-per-window",
    "id": 3601
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### More powerful and flexible Auto Save options  \nVS Code offered Auto Save options for a long time. In this release, we make this capability a lot more powerful.  \n#### Configure Auto Save per resource or language  \nAll Auto Save settings can now be configured per folder or language, which lets you selectively enable Auto Save only for specific languages or folders.  \nIn the example below, settings are configured as:  \n```json\n{\n\"[markdown]\": {\n\"files.autoSave\": \"afterDelay\"\n}\n}\n```  \nAs you can see, the edited markdown file saves immediately, while the TypeScript file remains dirty.  \n<video src=\"images/1_86/autosave.mp4\" autoplay loop controls muted title=\"Configure auto save per language.\"></video>  \n#### Disable Auto Save when errors  \nA new `files.autoSaveWhenNoErrors` setting lets you disable Auto Save if there are error markers in the file when Auto Save would normally save the editor.  \nThis can be useful when you have external tools watching for file changes, where you want to avoid that these tools act on a changed file that contains errors.  \n#### Auto Save for workspace files only  \nFinally, a new setting `files.autoSaveWorkspaceFilesOnly` that limits Auto Save only to files that are inside the workspace.",
    "url": "https://code.visualstudio.com/updates/v1_86#_more-powerful-and-flexible-auto-save-options",
    "id": 3602
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Allow disabling notifications per extension  \nWe now offer more fine-grained control for disabling notifications coming from extensions. From a notification toast, you can disable notifications for the extension:  \n![Turn off notifications for an extension.](images/1_86/turn-off-notifications-1.png)  \nIn the Notification Center, there is a central place to manage notification enablement for all extensions that have triggered a notification:  \n![Manage notifications for extensions.](images/1_86/turn-off-notifications-2.png)  \nThis new feature complements our existing Do Not Disturb Mode, which globally disables all notifications. As with the global switch, error notifications will always appear and cannot be disabled.",
    "url": "https://code.visualstudio.com/updates/v1_86#_allow-disabling-notifications-per-extension",
    "id": 3603
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Allow swapping left and right diff editors  \nWhen you compare two files (for example from the File Explorer), a new action appears to swap the left and right hand side of the diff editor.  \n<video src=\"images/1_86/swap-diff.mp4\" autoplay loop controls muted title=\"Swap left and right sides of the Diff Editor.\"></video>  \n> **Note:** comparing two editable files allows you to make changes on either side.",
    "url": "https://code.visualstudio.com/updates/v1_86#_allow-swapping-left-and-right-diff-editors",
    "id": 3604
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Do no enforce `--wait` when reading from stdin from the command line  \nWhen using a terminal, you can pass the output of a process directly into VS Code to open as editor, for example:  \n* `ps aux | grep code | code -` on Linux or macOS\n* `echo Hello World | code -` on Windows  \nUntil now, this also implied the `--wait` flag, which means that you would not get back to the terminal prompt until you had either closed the editor window or VS Code entirely. In this milestone, we no longer enforce `--wait` when reading from stdin, so you immediately get back to the terminal prompt.  \n> **Note:** to get the previous behavior back, simply append `--wait` to the command line invocation.",
    "url": "https://code.visualstudio.com/updates/v1_86#_do-no-enforce---wait-when-reading-from-stdin-from-the-command-line",
    "id": 3605
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Support custom title bar with native title bar  \nWe're introducing the `window.customTitleBarVisibility` setting, which allows showing the custom title bar even when the native title bar is being used. This is especially beneficial for macOS users that prefer native tabs. With this new setting, native title bar users can now access custom title bar functionalities, such as:  \n* **Command Center:** Easily access the command center directly from the custom title bar.\n* **Layout Controls:** Customize your workspace layout with greater flexibility.\n* **Activity Bar Customization:** Move the Activity Bar actions to the top.\n* **Editor Actions Customization:** Relocate editor actions to the custom title bar.  \nMoreover, for users who prefer an uncluttered view in full-screen mode, the `window.customTitleBarVisibility: \"windowed\"` option allows you to hide the custom title bar when in full-screen mode. This feature ensures a more focused and distraction-free coding environment, while still providing the option to use custom title bar features when you're not in full-screen mode.  \n![The 'Window: Custom Title Bar Visibility' setting in the Settings editor.](images/1_86/native-tabs-custom-title-bar.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_support-custom-title-bar-with-native-title-bar",
    "id": 3606
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### New setting to enforce system color theme  \nA new setting `window.systemColorTheme` lets you explicitly override the system color theme that applies to native elements in VS Code, such as the menu or dialogs on macOS. The setting supports the following values:  \n* `default`: the color theme matches that of the operating system (default option).\n* `auto`: pick `light` or `dark`, depending on the VS Code theme\n* `light`: pick `light` system theme\n* `dark`: pick `dark` system theme  \nBelow is an example of how this applies to the macOS context menus, showing `light` in the top part, and `dark` in the bottom part:  \n![Showing both 'light' and 'dark' system theme applied to a context menu.](images/1_86/system-theme.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_new-setting-to-enforce-system-color-theme",
    "id": 3607
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Allow closing untitled workspaces without confirmation  \nA new setting `window.confirmSaveUntitledWorkspace` lets you disable showing a confirmation dialog when closing a window with an untitled workspace. There's now also a checkbox on the dialog to disable showing it. The `window.confirmSaveUntitledWorkspace` setting is enabled by default to keep the current behavior.  \n![Untitled workspace confirmation dialog showing checkbox to always discard changes.](images/1_86/untitled-workspace.png)  \n> **Note:** learn more about untitled workspaces [in our documentation](https://code.visualstudio.com/docs/editor/workspaces).",
    "url": "https://code.visualstudio.com/updates/v1_86#_allow-closing-untitled-workspaces-without-confirmation",
    "id": 3608
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Toggle Word Wrap in Output panel  \nThe Output panel now supports toggling word wrap by using the **View: Toggle Word Wrap** command. This is useful for viewing long lines of text in the Output panel.",
    "url": "https://code.visualstudio.com/updates/v1_86#_toggle-word-wrap-in-output-panel",
    "id": 3609
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Open Output panel in a new window  \nThe Output panel now has an **Open Output in New Window** action in the panel title menu to view the Output panel in a separate window.",
    "url": "https://code.visualstudio.com/updates/v1_86#_open-output-panel-in-a-new-window",
    "id": 3610
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Update Extensions from CLI  \nYou can now update extensions from the command line by using the `--update-extensions` argument. This will update all installed extensions to their latest version.",
    "url": "https://code.visualstudio.com/updates/v1_86#_update-extensions-from-cli",
    "id": 3611
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Hovers in the Quick Pick now use custom hovers  \nWe've moved several hovers in the Quick Pick over to using custom hovers instead of native rendering. This allows for richer rendering & more consistency across the product.  \n![Quick Pick hover rendered with custom hover instead of native.](images/1_86/quick-pick-hovers.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_hovers-in-the-quick-pick-now-use-custom-hovers",
    "id": 3612
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Editor  \n### Paste text/html content  \nThe **Paste As...** command now lets you paste `text/html` content in the clipboard:  \n![Using 'Paste As' to paste HTML content.](images/1_86/paste-html.png)  \nWhen you copy content from a web page for example, you can use this to paste the content's HTML instead of pasting it as plain text:  \n<video src=\"images/1_86/paste-html.mp4\" title=\"Pasting content copied from a webpage into a html file. The Live Preview extension is being used to show a preview of the HTML.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_86#_paste-text/html-content",
    "id": 3613
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Source Control  \n### Commit input customizations  \nThis milestone we have added a new setting, `scm.inputMinLineCount`, that can be used to control the initial height of the commit input field. The setting that controls the maximum size of the commit input field has been renamed from `scm.inputMaxLines` to `scm.inputMaxLineCount` so that it matches the naming convention of similar settings.  \nUsers can now use language-specific editor settings to further customize the commit input field. Language-specific editor settings can be used to define editor rules and disable word wrapping:  \n```json\n\"[scminput]\": {\n\"editor.rulers\": [\n50,\n72\n],\n\"editor.wordWrap\": \"off\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_86#_commit-input-customizations",
    "id": 3614
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Source Control Repositories view improvements  \nTo help manage workspaces with large number of repositories better, we have added a new command to the repository context menu: **Close Other Repositories**. We have also added multi-selection support for both the **Close Repository** and **Close Other Repositories** commands, so users can close multiple repositories at once, or close all repositories except for a few.  \nThe Source Control Repositories view can get crowded because of actions that are contributed by extensions. To help with this, we have added the ability to hide contributed actions by right clicking on the action and choosing **Hide**. The hidden actions are moved into the **...** menu. All actions, except the **Checkout** and **Sync** can be hidden.",
    "url": "https://code.visualstudio.com/updates/v1_86#_source-control-repositories-view-improvements",
    "id": 3615
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Incoming/Outgoing changes improvements  \nWe continue to polish the incoming/outgoing changes section in the Source Control view. This milestone, we made changes so that the **Incoming changes** node is only shown if the current branch has a tracking remote branch.  \nWe have added **Fetch** and **Pull** actions to the **Incoming changes** node, and **Push** action to the **Outgoing changes** node.  \nWe have added actions to view each individual commit, and all the incoming/outgoing changes that leverage the multi-file diff editor.  \nUsers can now use a new setting, `scm.showChangesSummary`, to hide the **All Changes** entry.",
    "url": "https://code.visualstudio.com/updates/v1_86#_incoming/outgoing-changes-improvements",
    "id": 3616
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Ability to merge tags  \nWe have addressed a long-standing feature request by adding the capability to merge tags. A new command is added to the command palette, **Git: Merge...** that replaces the **Git: Merge Branch...** command. Invoking the **Git: Merge...** command will display a quick pick control that lists both branches and tags.",
    "url": "https://code.visualstudio.com/updates/v1_86#_ability-to-merge-tags",
    "id": 3617
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### View Stash command  \nWe have added a new command, **Git: View Stash...**, that enables users to view any stash from the repository in the multi-file diff editor. When viewing a git stash, the editor title menu will contain actions to apply/pop, or drop the stash.",
    "url": "https://code.visualstudio.com/updates/v1_86#_view-stash-command",
    "id": 3618
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Commit signing using SSH keys  \nThis milestone we have added the capability to sign commits using an SSH key with a passphrase. When signing a commit with the SSH key, VS Code will display a quick pick control at the top of the screen to prompt for the passphrase. VS Code does not cache the passphrase and will prompt for it each time a commit is signed.",
    "url": "https://code.visualstudio.com/updates/v1_86#_commit-signing-using-ssh-keys",
    "id": 3619
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Notebooks  \n### Floating window support  \nNotebook editors can now be opened in a floating window. You can drag the notebook tab out of the main window to open it in a new window, or use the **View: Move Editor into New Window** command.  \n<video src=\"images/1_86/notebook-floating-window.mp4\" autoplay loop controls muted title=\"Drag notebook tab out of the main window to open it in a new,floating window.\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_86#_floating-window-support",
    "id": 3620
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Built-in variable view  \nWe have added an experimental variable view to the Run and Debug view that can be used to view variables from a notebook kernel, if the extension provides them. This functionality can be enabled with this setting:  \n```json\n\"notebook.experimental.variablesView\": true\n```  \n<video src=\"images/1_86/notebook-variables-view.mp4\" title=\"Notebook variable tree view in the Run and Debug view.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_86#_built-in-variable-view",
    "id": 3621
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Notebook Sticky Scroll  \nThe notebook editor's Sticky Scroll feature has received significant polishing to align its style with the rest of the workbench, and to add folding controls to each markdown element.  \n<video src=\"images/1_86/notebook-sticky-scroll-polish.mp4\" title=\"Using sticky scroll with folding in a notebook.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_86#_notebook-sticky-scroll",
    "id": 3622
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Terminal  \n### Background shown under selection  \nWhen GPU acceleration is enabled, cells with non-default background colors will now be rendered \"underneath\" the regular selection color.  \n![Cell background colors in the terminal are now retained, even when selected.](./images/1_86/terminal-selection-bg.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_background-shown-under-selection",
    "id": 3623
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Zoom terminal via mouse wheel  \nThe terminal can now be zoomed in and out with the mouse wheel while holding `kbstyle(Ctrl)`, when enabled with this setting:  \n```json\n\"terminal.integrated.mouseWheelZoom\": true\n```",
    "url": "https://code.visualstudio.com/updates/v1_86#_zoom-terminal-via-mouse-wheel",
    "id": 3624
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Multi-line paste warning improvements  \nIn previous versions, `terminal.integrated.enableMultiLinePasteWarning` accepted either `true` (default) or `false`. When `true` was active, it would always show the warning, except when either bracketed paste mode is enabled or the line ends in a `\\n` character. This setting now accepts a string with the following options:  \n* `auto`: Previous true behavior\n* `always`: Always show a warning\n* `never`: Never show a warning  \nAdditionally, there is a new button in the dialog to paste the string as a single line, which removes all `\\r` and `\\n` characters.",
    "url": "https://code.visualstudio.com/updates/v1_86#_multi-line-paste-warning-improvements",
    "id": 3625
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Link improvements  \nFile protocol URIs (`file://`) now support line and column number extensions at the end, like most other links. The new `#<line>` format is also supported.",
    "url": "https://code.visualstudio.com/updates/v1_86#_link-improvements",
    "id": 3626
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Terminal voice commands  \nThe new **Terminal: Start Terminal Voice** and **Terminal: Stop Terminal Voice** commands enable speech-to-text sessions in the terminal.  \nTo use this new capability, install the [VS Code Speech](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-speech) extension.",
    "url": "https://code.visualstudio.com/updates/v1_86#_terminal-voice-commands",
    "id": 3627
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Tasks  \n### Shorthand for path separator variable  \nThe new `${/}` variable can be used as a shorthand for the existing `${pathSeparator}` variable.",
    "url": "https://code.visualstudio.com/updates/v1_86#_shorthand-for-path-separator-variable",
    "id": 3628
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Debug  \n### Triggered breakpoints  \nYou can now set breakpoints that are automatically enabled once another breakpoint is hit. For example, this can be useful when diagnosing failure cases in code that happen only after a certain precondition. Triggered breakpoints work for all languages, and conditional breakpoints might also be used as the trigger.  \nTriggered breakpoints can be set by right-clicking on the glyph margin, selecting **Add Triggered Breakpoint...**, and then choosing which other breakpoint enables this breakpoint.  \n<video src=\"images/1_86/debug-triggered-breakpoint.mp4\" title=\"Add a triggered breakpoint that depends on another breakpoint to be hit.\" autoplay loop controls muted></video>  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_",
    "url": "https://code.visualstudio.com/updates/v1_86#_triggered-breakpoints",
    "id": 3629
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Close readonly files when a session ends  \nWhen attached to a debugger, there can be internal or virtual source files that don't exist on-disk, which are opened as readonly. There is a new setting, `debug.closeReadonlyTabsOnEnd`, that causes VS Code to automatically close any opened readonly files from the debug session when the session ends.",
    "url": "https://code.visualstudio.com/updates/v1_86#_close-readonly-files-when-a-session-ends",
    "id": 3630
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Testing  \n### More ways to run tests  \nHolding `kbstyle(Alt)` while clicking on a test decoration, now runs that test in debug mode, when available.  \nThere are now context menu actions in the Explorer view, which can be used to run all tests declared in a file or folder.",
    "url": "https://code.visualstudio.com/updates/v1_86#_more-ways-to-run-tests",
    "id": 3631
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Finalized `TestRunProfile.isDefault/onDidChangeDefault` APIs for extension authors  \nPreviously, `TestRunProfile.isDefault` only controlled the initial default state of a test run profile, and it was never changed or read after that point.  \nIn this release, users changing their selected profiles will be reflected in the `TestRunProfile.isDefault` property and fire a corresponding `TestRunProfile.onDidChangeDefault` event. Likewise, when extensions change `isDefault`, this will cause the selected profiles in the UI to update.",
    "url": "https://code.visualstudio.com/updates/v1_86#_finalized-testrunprofile.isdefault/ondidchangedefault-apis-for-extension-authors",
    "id": 3632
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Languages  \n### Paste a URL to automatically create a Markdown link  \nWant to turn that link you copied into a Markdown link? When you paste a URL into a Markdown file with text selected, VS Code now automatically inserts a Markdown link:  \n<video src=\"images/1_86/md-paste-url.mp4\" title=\"Pasting a URL to insert a Markdown link.\" autoplay loop controls muted></video>  \nThis feature is controlled by the `markdown.editor.pasteUrlAsFormattedLink.enabled` setting. You can change it to customize this behavior:  \n* `smartWithSelection` \u2014The default. This enables the feature when you have selected text and are not inside a special element, such as a code block.\n* `smart` \u2014Same as `smartWithSelection` but does not require a selection.\n* `always` \u2014Always paste urls as a Markdown links\n* `never` \u2014Disable pasting as Markdown links.  \nAfter you've pasted a value, you can always switch to paste the content in a different way by using the Paste control.",
    "url": "https://code.visualstudio.com/updates/v1_86#_paste-a-url-to-automatically-create-a-markdown-link",
    "id": 3633
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Configure audio/video snippets for Markdown  \nThe new `markdown.editor.filePaste.audioSnippet` and `markdown.editor.filePaste.videoSnippet` settings let you customize how audio and video files are inserted into Markdown on drop or paste. The snippet can use the following variables:  \n* `${src}` \u2014 The resolved path of the audio/video file.\n* `${title}` \u2014 The title used for the audio/video. A snippet placeholder will automatically be created for this variable.",
    "url": "https://code.visualstudio.com/updates/v1_86#_configure-audio/video-snippets-for-markdown",
    "id": 3634
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### New Less grammar  \nThe previous Less grammar has been archived and VS Code now uses the grammar from [Better-Less](https://github.com/radium-v/Better-Less) for Less syntax highlighting.",
    "url": "https://code.visualstudio.com/updates/v1_86#_new-less-grammar",
    "id": 3635
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### New Go grammar  \nThe Go syntax highlighting grammar has been changed to use [Go Syntax](https://github.com/worlpaker/go-syntax), which is more actively maintained than the previous grammar.",
    "url": "https://code.visualstudio.com/updates/v1_86#_new-go-grammar",
    "id": 3636
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Ask for Additional permissions for private repositories  \nTo enable additional workspace search features for private repositories, we require additional permissions. If we detect that we don't have these permissions already, we will ask for them at startup. Once granted, we'll securely store the session for the future.  \n![Modal window asking for additional authentication for a private repository.](images/1_86/authentication.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_ask-for-additional-permissions-for-private-repositories",
    "id": 3637
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Python  \n#### Python Debugger extension installed by default  \nThe [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension is now installed by default alongside the Python extension.  \nThe Python Debugger extension aims to separate the debugging functionality from the main Python extension to prevent compatibility issues. This ensures that even as the Python extension drops support for older Python versions (for example, Python 3.7), you can continue debugging projects with those versions without downgrading your Python extension. It also delivers platform-specific builds, ensuring you only receive the components relevant to your specific operating system, reducing download times and unnecessary overhead.  \nThis new extension replicates all the functionality available in the main Python extension, and more.  \nTo ensure you are using the new Python Debugger extension, replace  `\"type\": \"python\"` with `\"type\": \"debugpy\"` from your `launch.json` configuration file. In the future, the Python extension will no longer offer debugging support, and we will transition all debugging support to the Python Debugger extension for all debugging functionality.  \n#### Create Environment option in the Python interpreter quick pick  \nYou can now more conveniently create a Python environment from the Python interpreter Quick Pick. Run the **Python: Select Interpreter** command, and then select the **Create Environment** option to create a new virtual environment for your project.  \n![Create Environment option in the Python interpreter quick pick.](images/1_86/python-create-env-from-quick-pick.png)\n_Theme: [Catppuccin Mocha](https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc) (preview on [vscode.dev](https://vscode.dev/editor/theme/Catppuccin.catppuccin-vsc/Catppuccin%20Mocha))_  \n#### Improved display for workspace conda environments  \nThe Python interpreter Quick Pick now displays the name of conda environments located in the workspace, to make it easier to identify them.  \n![Workspace conda environment names displayed in the Python interpreter Quick Pick.](images/1_86/conda-env-names.png)  \n#### Support for multi-level pytest classes  \nWhen using multi-level pytest classes, the top-level class is now displayed in the Test Explorer. Previously, only the lower level classes were displayed.  \n![Multi-level pytest classes displayed in the Test Explorer.](images/1_86/pytest-nested-classes.png)\n_Theme: [Catppuccin Mocha](https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc) (preview on [vscode.dev](https://vscode.dev/editor/theme/Catppuccin.catppuccin-vsc/Catppuccin%20Mocha))_",
    "url": "https://code.visualstudio.com/updates/v1_86#_python",
    "id": 3638
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Jupyter  \n#### Finalized Jupyter Kernel Execution API for extension authors  \nThe Jupyter extension's API for executing code against Jupyter kernels has been finalized. Extensions can use the API to execute code against kernels.  \nExamples of API usage can be found in the [Jupyter Kernel Execution Sample](https://github.com/microsoft/vscode-extension-samples/tree/main/jupyter-kernel-execution-sample).  \nThe npm package [`@vscode/jupyter-extension`](https://www.npmjs.com/package/@vscode/jupyter-extension) contains all the TypeScript type definitions.  \nWhen an extension attempts to access a Jupyter kernel, the user is prompted to grant or revoke access to the kernels.\nAccess to Jupyter kernels is granted by the user per extension. This means that the user can grant access to extension `A`, and revoke access to extension `B`.  \nUsers can manage (grant/revoke) access to the Jupyter kernels per extension via the command **Jupyter: Manage Access To Jupyter Kernels**.",
    "url": "https://code.visualstudio.com/updates/v1_86#_jupyter",
    "id": 3639
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests and Issues](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which allows you to work on, create, and manage pull requests and issues. New features include:  \n* Resolving conflicts for the currently checked out PR.\n* A `groupBy` property for issue queries.\n* Clicking permalinks in a checked out PR will open the file in the editor.\n* Hovering on comment reactions shows who reacted.\n* Setting `\"githubPullRequests.focusedMode\": \"multiDiff\"` will open the multi-diff editor with all the files in the PR upon checkout.  \nReview the [changelog for the 0.80.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0800) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_86#_github-pull-requests-and-issues",
    "id": 3640
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Preview Features  \n### TypeScript 5.4 beta support  \nWe now support the beta release of TypeScript 5.4. Check out the [TypeScript 5.4 beta blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-4-beta/) and [iteration plan](https://github.com/microsoft/TypeScript/issues/56948) for details on this release. Highlights include:  \n* Initial work on AI-powered refactorings.\n* A new [`NoInfer` intrinsic](https://github.com/microsoft/TypeScript/pull/56794) that can help library and types authors stop incorrect type inference.\n* Improvements to [type refinements](https://github.com/microsoft/TypeScript/issues/56948) and type checking.  \nTo start using the TypeScript 5.4 beta, just install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with TypeScript 5.4.",
    "url": "https://code.visualstudio.com/updates/v1_86#_typescript-5.4-beta-support",
    "id": 3641
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Quick Search Improvements  \nIn version 1.82, we introduced [Quick Access Text Search (\"Quick Search\")](https://code.visualstudio.com/updates/v1_82#_quick-access-text-search), which allows users to search from a picker. \ud83d\udd0e  \nQuick Search now has the following features:  \n* Editor preview on active pick. See the result in the context of the editor as you browse.\n* Easier navigation from Quick Search to the Search view. Select the button next to the input or a result to transfer the results to the Search view.  \n<video src=\"images/1_86/quick-search-improvements.mp4\" title=\"Editor previews Quick Search results and direct navigation from Quick Search to Search view.\" autoplay loop controls muted></video>\n_Theme: [Night Owl](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl)  (preview on [vscode.dev](https://vscode.dev/editor/theme/sdras.night-owl))_",
    "url": "https://code.visualstudio.com/updates/v1_86#_quick-search-improvements",
    "id": 3642
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Chat Agent API  \nWe've been working on an API to enable extension authors to contribute their own chat agents to the Chat view in VS Code. We've made a few changes to the API, including:  \n* The history context passed to the chat agent now properly represents which chat agent and command was invoked by a given message, the values of variables in history messages, and what the result was.\n* `ChatAgentTask` has been removed, and it's now possible to use `ChatProgressMessage` in the middle of the response stream to cover the same scenario.\n* All \"slashCommand\"-related terms have been renamed to \"subCommand\".  \nIf you'd like to try out the API, you can start with our [sample chat agent extension](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-agent-sample), and subscribe to [issue #199908](https://github.com/microsoft/vscode/issues/199908) for updates to the API.",
    "url": "https://code.visualstudio.com/updates/v1_86#_chat-agent-api",
    "id": 3643
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Code Action Highlights API  \nFor refactorings such as Extract method or Move to file, it's not always clear what code the action will apply to. This is especially true for languages like TypeScript that try to intelligently expand the user's current selection.  \nThis API allows code actions to provide one or potentially many ranges (`Range[]`) that they will apply to. The range will be highlighted as the user hovers or arrows through the Code Action list.  \n* For refactorings, this range would be the code in the current file that will be affected by the refactoring.\n* For Quick Fixes, you could highlight the related diagnostics. This is already done in Quick Fixes that are invoked from `editor.codeActionWidget.includeNearbyQuickFixes`.",
    "url": "https://code.visualstudio.com/updates/v1_86#_code-action-highlights-api",
    "id": 3644
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Issue Reporter API  \nSmall additions to the proposed API, which allow both `IssueUriRequestHandler` and `IssueDataProvider` to be used together.  \nAlso improvements for the `vscode.commands.openIssueReporter` command, which can now contribute additional extension data and modify the URL of where the GitHub issue is directed to.  \nSubscribe to [issue #197863](https://github.com/microsoft/vscode/issues/196863) for updates or changes to the API and `openIssueReporter` command.",
    "url": "https://code.visualstudio.com/updates/v1_86#_issue-reporter-api",
    "id": 3645
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Comment reaction reactor API  \nThe `CommentReaction` interface has a new `reactors` property, so that extensions can indicate who reacted to a comment. These `reactors` are currently displayed in the hover of a comment reaction.  \nSee [issue #201131](https://github.com/microsoft/vscode/issues/201131) to track progress on this API.",
    "url": "https://code.visualstudio.com/updates/v1_86#_comment-reaction-reactor-api",
    "id": 3646
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Finalized APIs  \n### New `workspace.save` and `workspace.saveAs` APIs  \nThe new finalized APIs `workspace.save` and `workspace.saveAs` allow extensions to trigger the flow of saving an editor, either to its resource, or by asking the user to provide a resource.  \nAll methods for saving return the resulting `Uri`, or `undefined` if the operation was canceled. Untitled files will always ask the user for a destination, unless a path is already associated.",
    "url": "https://code.visualstudio.com/updates/v1_86#_new-workspace.save-and-workspace.saveas-apis",
    "id": 3647
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Readonly message for `FileSystemProvider` API  \nWhen registering a `FileSystemProvider` with `registerFileSystemProvider`, the `options` can be set to mark the entire file system as readonly. Now, if the `isReadonly` option is set to a `MarkdownString`, then that message will be shown in the editor when the user tries to edit the file in the filesystem.  \n![Example of readonly message showing in the editor.](images/1_86/readonly-message.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_readonly-message-for-filesystemprovider-api",
    "id": 3648
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n## Engineering  \n### Housekeeping  \nIn early December we went through our annual housekeeping. We achieved a net-reduction of 1891 issues across our repositories. The following chart nicely illustrates the need for and the impact of our annual house keeping iteration.  \n![Chart of issue counts over the last years](images/1_86/housekeeping.png)",
    "url": "https://code.visualstudio.com/updates/v1_86#_housekeeping",
    "id": 3649
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Markdown Language Service 0.4 release  \nThe [Markdown Language Service package](https://www.npmjs.com/package/vscode-markdown-languageservice) powers VS Code's built-in Markdown support. The new 0.4 release bundles a number of improvements we've made over the past half year, which other tooling and editors can benefit from. These are some of the highlights:  \n* Enable document links, references, and rename for HTML fragments in Markdown.\n* Fix potential catastrophic back-tracking in a regular expression.\n* Avoid adding extra encoding on completions.\n* Use fuzzy matching for workspace symbol search.\n* Fix a number of cases around link detection/validation.",
    "url": "https://code.visualstudio.com/updates/v1_86#_markdown-language-service-0.4-release",
    "id": 3650
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### New `localize2` function to make crafting `ILocalizedString`s more easily  \nIn VS Code's core codebase, we use a type called `ILocalizedString` to render both a localized and an English string next to each other. You might have seen this if you use a language pack and you open the Command Palette.  \nPreviously, we had to write these expressions like:  \n```ts\nconst str = { value: localize('id', \"Hello World\"), original: \"Hello World\" };\n```  \nThis can now be expressed as follows:  \n```ts\nconst str = localize2('id', \"Hello World\");\n```  \nOur localization pipeline will then pick up these `localize2` occurrences.",
    "url": "https://code.visualstudio.com/updates/v1_86#_new-localize2-function-to-make-crafting-ilocalizedstrings-more-easily",
    "id": 3651
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Electron 27 update  \nIn this milestone, we are promoting the Electron 27 update to users on our stable release. This update comes with Chromium 118.0.5993.159 and Node.js 18.17.1. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.",
    "url": "https://code.visualstudio.com/updates/v1_86#_electron-27-update",
    "id": 3652
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Linux minimum requirements update  \nIn this milestone, we have updated the toolchains to build our desktop client. From this release onwards, VS Code desktop is only compatible with Linux distributions based on glibc 2.28 or later, and glibcxx 3.4.25 or later, such as Debian 10, RHEL 8, or Ubuntu 20.04.  \nIf you are unable to upgrade your Linux distribution, the recommended alternative is to use our [web client](https://code.visualstudio.com/docs/editor/vscode-web). If you would like to use the desktop version, then you can [download the VS Code release 1.85](https://code.visualstudio.com/updates/v1_85). Depending on your platform, make sure to disable updates to stay on that version. A good recommendation is to set up the installation with [Portable Mode](https://code.visualstudio.com/docs/editor/portable).",
    "url": "https://code.visualstudio.com/updates/v1_86#_linux-minimum-requirements-update",
    "id": 3653
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@okineadev (Okinea Dev)](https://github.com/okineadev)",
    "url": "https://code.visualstudio.com/updates/v1_86#_issue-tracking",
    "id": 3654
  },
  {
    "content": "Learn what is new in the Visual Studio Code January 2024 Release (1.86)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart)\n* Fire an input event on `editor.action.clipboardPasteAction` [PR #198822](https://github.com/microsoft/vscode/pull/198822)\n* Log `extensionLocation` not `location` in error message of `getCustomBuiltinExtensionsFromLocations` [PR #200748](https://github.com/microsoft/vscode/pull/200748)\n* [@Ajaykumbhare (Ajay Kumbhare)](https://github.com/Ajaykumbhare): fix: terminal renaming not functioning as expected in editor area [PR #202270](https://github.com/microsoft/vscode/pull/202270)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch): Fix preferTypeOnlyAutoImports preference getter [PR #201376](https://github.com/microsoft/vscode/pull/201376)\n* [@aramikuto (Aleksandr Kondrashov)](https://github.com/aramikuto): Update IExplorerView interface [PR #201992](https://github.com/microsoft/vscode/pull/201992)\n* [@audreygao (Audrey Ya Gao)](https://github.com/audreygao): Fix #193468 - Fix bug with error notification when pressing \"l\" on non-expandable reference item. [PR #199996](https://github.com/microsoft/vscode/pull/199996)\n* [@bricker (Bryan Ricker)](https://github.com/bricker): doc typo fix [PR #202429](https://github.com/microsoft/vscode/pull/202429)\n* [@callumok2004 (Callum OKane)](https://github.com/callumok2004): Add `bun.lockb` to default file nesting under package.json [PR #201065](https://github.com/microsoft/vscode/pull/201065)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Take into account models created beforehand [PR #199652](https://github.com/microsoft/vscode/pull/199652)\n* [@chartrandf (Francis Chartrand)](https://github.com/chartrandf): timeline: use follow option so timeline follow file beyond renames [PR #187174](https://github.com/microsoft/vscode/pull/187174)\n* [@conwnet (netcon)](https://github.com/conwnet): fix: `workbench.editorAssociations` not work in workbench configurationDefaults [PR #194087](https://github.com/microsoft/vscode/pull/194087)\n* [@cpendery (Chapman Pendery)](https://github.com/cpendery)\n* fix: terminal suggestion positioning [PR #199420](https://github.com/microsoft/vscode/pull/199420)\n* fix: accepting terminal completions cursor positions  [PR #199706](https://github.com/microsoft/vscode/pull/199706)\n* build: enable suggestions when 'shellIntegration.suggestEnabled' is true [PR #199821](https://github.com/microsoft/vscode/pull/199821)\n* refactor: xterm suggestion addon into terminalContrib [PR #200107](https://github.com/microsoft/vscode/pull/200107)\n* [@DiscreteTom (DiscreteTom)](https://github.com/DiscreteTom): fix #193746 [PR #197523](https://github.com/microsoft/vscode/pull/197523)\n* [@effectivecui](https://github.com/effectivecui): avoid to enter the infinite loop when item.children is empty. [PR #201701](https://github.com/microsoft/vscode/pull/201701)\n* [@Flanker32 (Hanxiao Liu)](https://github.com/Flanker32): Update java workspace tags [PR #197729](https://github.com/microsoft/vscode/pull/197729)\n* [@gayanper (Gayan Perera)](https://github.com/gayanper): Add support for breakpoint dependencies [PR #166202](https://github.com/microsoft/vscode/pull/166202)\n* [@GenericTSDeveloper](https://github.com/GenericTSDeveloper): Fixed issue Misalignment of suggestion details widget (https://github.com/microsoft/monaco-editor/issues/3373) [PR #198730](https://github.com/microsoft/vscode/pull/198730)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Implement keyboard navigation between list find/filter matches [PR #180078](https://github.com/microsoft/vscode/pull/180078)\n* Preserve sort order when filtering Git branch / tag quickpicks (fix #199471) [PR #199473](https://github.com/microsoft/vscode/pull/199473)\n* `Git: Merge Branch...` picker duplicates branch name in description (fix #199562) [PR #199742](https://github.com/microsoft/vscode/pull/199742)\n* Fix `Customize Layout` bugs related to Activity Bar (fix #200571) [PR #200572](https://github.com/microsoft/vscode/pull/200572)\n* [@gregvanl (Greg Van Liew)](https://github.com/gregvanl): Add missing commas [PR #201137](https://github.com/microsoft/vscode/pull/201137)\n* [@harbin1053020115 (ermin.zem)](https://github.com/harbin1053020115): fix: select theme according to current color theme in dev mode [PR #190035](https://github.com/microsoft/vscode/pull/190035)\n* [@hsfzxjy (Xie Jingyi)](https://github.com/hsfzxjy): Defer onDidStyleChange to Repl being visible [PR #200473](https://github.com/microsoft/vscode/pull/200473)\n* [@iisaduan (Isabel Duan)](https://github.com/iisaduan): fix typescript/54492: check if file rename changes extension [PR #200220](https://github.com/microsoft/vscode/pull/200220)\n* [@impressivewebs (Louis Lazaris)](https://github.com/impressivewebs)\n* Fixed some CSS terminology [PR #202125](https://github.com/microsoft/vscode/pull/202125)\n* Corrected CSS Hover Documentation text [PR #202142](https://github.com/microsoft/vscode/pull/202142)\n* [@irgendwr (Jonas B\u00f6gle)](https://github.com/irgendwr): Add: \"Close Other Repositories\" in git scm menu [PR #130931](https://github.com/microsoft/vscode/pull/130931)\n* [@jacekkopecky (Jacek Kopeck\u00fd)](https://github.com/jacekkopecky): Fixes #198566: ellipsize left-cut search preview [PR #198567](https://github.com/microsoft/vscode/pull/198567)\n* [@jaraco (Jason R. Coombs)](https://github.com/jaraco): Add support for extracting environment from xonsh. [PR #201036](https://github.com/microsoft/vscode/pull/201036)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fix vscode.tasks.executeTask error Unexpected: Task does not exist after task.terminate() [PR #200872](https://github.com/microsoft/vscode/pull/200872)\n* Fix single tab context menu actions sometimes don't work [PR #201021](https://github.com/microsoft/vscode/pull/201021)\n* Fix task progress indicator does not appear after the first time [PR #201064](https://github.com/microsoft/vscode/pull/201064)\n* Fix single terminal tab rename action does not work [PR #201128](https://github.com/microsoft/vscode/pull/201128)\n* [@johnsoncodehk (Johnson Chu)](https://github.com/johnsoncodehk): Fix optionalReplacementSpan not being applied to completion entries [PR #200945](https://github.com/microsoft/vscode/pull/200945)\n* [@JoyceGu (Joyce Gu)](https://github.com/JoyceGu): add JS Vector DB libraries [PR #199980](https://github.com/microsoft/vscode/pull/199980)\n* [@jtbandes (Jacob Bandes-Storch)](https://github.com/jtbandes): Update Swift.tmLanguage [PR #200698](https://github.com/microsoft/vscode/pull/200698)\n* [@keerthivasansa (Keerthi Vasan S A)](https://github.com/keerthivasansa): Workbench actions for Tree Fuzzy Search Toggle [PR #175137](https://github.com/microsoft/vscode/pull/175137)\n* [@khreenberg (Kim Reenberg)](https://github.com/khreenberg): fix: fallback to strings for non-executable libc.so.6 [PR #202581](https://github.com/microsoft/vscode/pull/202581)\n* [@kkocdko (kkocdko)](https://github.com/kkocdko): Fix platform detection after Node.js 21 [PR #200935](https://github.com/microsoft/vscode/pull/200935)\n* [@ksg97031 (KSG)](https://github.com/ksg97031): docs: Fix typos in description of multiple argument for Go To commands [PR #201122](https://github.com/microsoft/vscode/pull/201122)\n* [@Leask (Sixia \"Leask\" Huang)](https://github.com/Leask): fix: tweak check-requirements for calling ldconfig [PR #202645](https://github.com/microsoft/vscode/pull/202645)\n* [@loganrosen (Logan Rosen)](https://github.com/loganrosen): Update Stack Overflow tag in CONTRIBUTING.md [PR #126199](https://github.com/microsoft/vscode/pull/126199)\n* [@mahmoudsalah1993 (Mahmoud Salah)](https://github.com/mahmoudsalah1993): For open diff editors, resolve the underlying original editor to set \u2026 [PR #201597](https://github.com/microsoft/vscode/pull/201597)\n* [@Malix-off (Malix)](https://github.com/Malix-off): Remove unused import in `extensions/git/src/api/git.d.ts` [PR #200797](https://github.com/microsoft/vscode/pull/200797)\n* [@marrej (Marcus Revaj)](https://github.com/marrej): # Fix dropping of partialAccepts [PR #199663](https://github.com/microsoft/vscode/pull/199663)\n* [@MaxBR97](https://github.com/MaxBR97): Added scm.inputMinLines configuration [PR #200551](https://github.com/microsoft/vscode/pull/200551)\n* [@mohammadamin16 (Mohammad Amin)](https://github.com/mohammadamin16): debug: close read-only tabs on end debug session [PR #199898](https://github.com/microsoft/vscode/pull/199898)\n* [@mrienstra (Michael Rienstra)](https://github.com/mrienstra): docs: document new `configuration.markdown.copyFiles.destination` options [PR #203391](https://github.com/microsoft/vscode/pull/203391)\n* [@MrJithil (Jithil P Ponnan)](https://github.com/MrJithil): chore: replace deprecated octal escape sequences with hex [PR #197518](https://github.com/microsoft/vscode/pull/197518)\n* [@ngarside (Nathan Garside)](https://github.com/ngarside): Add syntax highlighting for `*.repo` files [PR #199859](https://github.com/microsoft/vscode/pull/199859)\n* [@nrayburn-tech (Nicholas Rayburn)](https://github.com/nrayburn-tech): npm extension - check for root package.json before findFiles [PR #124803](https://github.com/microsoft/vscode/pull/124803)\n* [@poeck (Paul K\u00f6ck)](https://github.com/poeck): chore: update copyright year [PR #202344](https://github.com/microsoft/vscode/pull/202344)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Wait for paste to finish in paste command (fixes #196161) [PR #196516](https://github.com/microsoft/vscode/pull/196516)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* Change lowercase `l` to uppercase `L`. `asp-vb-net.tmLanguage.json` [PR #201981](https://github.com/microsoft/vscode/pull/201981)\n* `onDidChangeEmmiter` fires constantly when it shouldn't [PR #202198](https://github.com/microsoft/vscode/pull/202198)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Remove bigNumbersDelta [PR #194712](https://github.com/microsoft/vscode/pull/194712)\n* [@RobbyCBennett (Robby Bennett)](https://github.com/RobbyCBennett): make gotoErrorWidget styling of relatedInformation more consistent with that of markerHoverParticipant [PR #195409](https://github.com/microsoft/vscode/pull/195409)\n* [@robertohuertasm (Roberto Huertas)](https://github.com/robertohuertasm): feat(stash): return the stash result [PR #177732](https://github.com/microsoft/vscode/pull/177732)\n* [@ronakj (Ronak Jain)](https://github.com/ronakj): Fix tsserver crashing when using custom node path [PR #201966](https://github.com/microsoft/vscode/pull/201966)\n* [@russelldavis (Russell Davis)](https://github.com/russelldavis): Fix race condition with restoration of problems when closing a file [PR #183271](https://github.com/microsoft/vscode/pull/183271)\n* [@samhanic](https://github.com/samhanic): [CLI] extension update command [PR #199893](https://github.com/microsoft/vscode/pull/199893)\n* [@shubhisroking (Shubh)](https://github.com/shubhisroking): Replace the deprecated canceled with Cancellation Error. [PR #197605](https://github.com/microsoft/vscode/pull/197605)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n* fix: memory leak in menubar [PR #198052](https://github.com/microsoft/vscode/pull/198052)\n* fix: memory leak in defaultWorkerFactory [PR #198710](https://github.com/microsoft/vscode/pull/198710)\n* [@sparxooo (sparxooo)](https://github.com/sparxooo): Fix for #200257 plus existing trailing non-numerics regex fix [PR #200919](https://github.com/microsoft/vscode/pull/200919)\n* [@Splizard (Quentin Quaadgras)](https://github.com/Splizard): Mobile/Android: support text selection with a pen/stylus. [PR #198578](https://github.com/microsoft/vscode/pull/198578)\n* [@susiwen8 (susiwen8)](https://github.com/susiwen8)\n* fix: #200046 [PR #200485](https://github.com/microsoft/vscode/pull/200485)\n* fix: `install` in `npm script` shouldn't be opened [PR #201082](https://github.com/microsoft/vscode/pull/201082)\n* [@VDisawal](https://github.com/VDisawal): #198975: saveValue  => historyNavigator.add [PR #199142](https://github.com/microsoft/vscode/pull/199142)\n* [@wenfangdu (Wenfang Du)](https://github.com/wenfangdu): feat(git): added `autoClosingPairs` in language configuration files [PR #131403](https://github.com/microsoft/vscode/pull/131403)\n* [@Yesterday17 (Yesterday17)](https://github.com/Yesterday17): fix ExtHostLabelService typo [PR #198855](https://github.com/microsoft/vscode/pull/198855)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): fix: console format of fetchUrl [PR #198909](https://github.com/microsoft/vscode/pull/198909)\n* [@zWingz (zWing)](https://github.com/zWingz): fix registerProfileContentHandler typos [PR #183197](https://github.com/microsoft/vscode/pull/183197)  \nContributions to `vscode-flake8`:  \n* [@maxg203 (Max Goodridge)](https://github.com/maxg203): Fix link in README.md [PR #269](https://github.com/microsoft/vscode-flake8/pull/269)  \nContributions to `vscode-hexeditor`:  \n* [@IngilizAdam (Hasan Tuna)](https://github.com/IngilizAdam): Select between offsets [PR #470](https://github.com/microsoft/vscode-hexeditor/pull/470)  \nContributions to `vscode-languageserver-node`:  \n* [@debonte (Erik De Bonte)](https://github.com/debonte): Support `WorkspaceEditMetadata` in `workspace/applyEdit` [PR #1390](https://github.com/microsoft/vscode-languageserver-node/pull/1390)\n* [@MariaSolOs (Maria Jos\u00e9 Solano)](https://github.com/MariaSolOs)\n* Snippet edit feature [PR #1343](https://github.com/microsoft/vscode-languageserver-node/pull/1343)\n* Allow undefined snippet edit annotation ID [PR #1408](https://github.com/microsoft/vscode-languageserver-node/pull/1408)\n* [@rroessler (Reuben Roessler)](https://github.com/rroessler): Changed Successful Exit Notification for Node Client [PR #1404](https://github.com/microsoft/vscode-languageserver-node/pull/1404)\n* [@sh-cho (Seonghyeon Cho)](https://github.com/sh-cho): Update build status badge with Azure pipeline [PR #1392](https://github.com/microsoft/vscode-languageserver-node/pull/1392)\n* [@werat (Andy Hippo)](https://github.com/werat): Always delete feature providers in `unregister()` [PR #1380](https://github.com/microsoft/vscode-languageserver-node/pull/1380)  \nContributions to `vscode-pull-request-github`:  \n* [@Balastrong (Leonardo Montini)](https://github.com/Balastrong): Create issue from markdown template [PR #5503](https://github.com/microsoft/vscode-pull-request-github/pull/5503)\n* [@joshuaobrien](https://github.com/joshuaobrien)\n* Batch mark/unmark files as viewed [PR #4700](https://github.com/microsoft/vscode-pull-request-github/pull/4700)\n* Remove a few unused variables \ud83c\udf31 [PR #5510](https://github.com/microsoft/vscode-pull-request-github/pull/5510)\n* [@pouyakary (Pouya Kary \u2728)](https://github.com/pouyakary): Fixes #5620 [PR #5621](https://github.com/microsoft/vscode-pull-request-github/pull/5621)  \nContributions to `vscode-vsce`:  \n* [@sebas2day (Sebastiaan Brouwer)](https://github.com/sebas2day): feat: Support for yarn workspaces [PR #493](https://github.com/microsoft/vscode-vsce/pull/493)\n* [@whosafe](https://github.com/whosafe): Filter data from other platforms [PR #912](https://github.com/microsoft/vscode-vsce/pull/912)  \nContributions to `language-server-protocol`:  \n* [@alcarney (Alex Carney)](https://github.com/alcarney)\n* Add lsp-devtools to utilities [PR #1859](https://github.com/microsoft/language-server-protocol/pull/1859)\n* Add esbonio language server [PR #1860](https://github.com/microsoft/language-server-protocol/pull/1860)\n* [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721): add-vscoq [PR #1869](https://github.com/microsoft/language-server-protocol/pull/1869)\n* [@BeardedFish (Darian Benam)](https://github.com/BeardedFish): Add Apache Dispatcher Config to the Language Server Implementations list [PR #1875](https://github.com/microsoft/language-server-protocol/pull/1875)\n* [@DanTup (Danny Tuppeny)](https://github.com/DanTup): Clarify snippet escaping rules [PR #1868](https://github.com/microsoft/language-server-protocol/pull/1868)\n* [@Fomys (Louis Chauvet)](https://github.com/Fomys): Clarify CompletionItem.textEdit notes [PR #1722](https://github.com/microsoft/language-server-protocol/pull/1722)\n* [@mhanberg (Mitchell Hanberg)](https://github.com/mhanberg): fix typo in workspace/configuration [PR #1823](https://github.com/microsoft/language-server-protocol/pull/1823)  \nContributions to `monaco-editor`:  \n* [@kokovtsev (Dmitry Kokovtsev)](https://github.com/kokovtsev): fix: enable markdown in JSON completion details [PR #4210](https://github.com/microsoft/monaco-editor/pull/4210)\n* [@mevisioam](https://github.com/mevisioam): Expose JSON worker [PR #4299](https://github.com/microsoft/monaco-editor/pull/4299)\n* [@nora-soderlund (Nora S\u00f6derlund)](https://github.com/nora-soderlund): chore(docs): fix monaco.d.ts link [PR #4243](https://github.com/microsoft/monaco-editor/pull/4243)\n* [@OfekShilon (Ofek)](https://github.com/OfekShilon)\n* Small wording fix in the site [PR #4254](https://github.com/microsoft/monaco-editor/pull/4254)\n* Remove 2 java-only operators from c++ tokenizer [PR #4255](https://github.com/microsoft/monaco-editor/pull/4255)\n* Fix suggestion for #4253 [PR #4256](https://github.com/microsoft/monaco-editor/pull/4256)\n* [@soof-golan (Soof Golan)](https://github.com/soof-golan): feat: Python 3.12 keywords support [PR #4212](https://github.com/microsoft/monaco-editor/pull/4212)\n* [@tamayika](https://github.com/tamayika): Change JSON symbol information to document symbol [PR #3894](https://github.com/microsoft/monaco-editor/pull/3894)  \nContributions to `node-jsonc-parser`:  \n* [@H4ad (Vinicius Louren\u00e7o)](https://github.com/H4ad): perf(format): cache breaklines and spaces as much as possible [PR #81](https://github.com/microsoft/node-jsonc-parser/pull/81)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_86#_pull-requests",
    "id": 3655
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Multiple languages supported for speech recognition  \nWhen you use the [VS Code Speech](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-speech) extension, you can now select from one of the 26 supported languages by using the <code codesetting=\"accessibility.voice.speechLanguage\">accessibility.voice.speechLanguage</code> setting.  \n<video src=\"images/1_87/voice-language.mp4\" autoplay loop controls muted title=\"Speech languages support via settings.\"></video>  \nEach language for the speech extension comes as its own extension. When you start speech recognition for the first time, you will see an extension installation for each language you selected.",
    "url": "https://code.visualstudio.com/updates/v1_87#_multiple-languages-supported-for-speech-recognition",
    "id": 3656
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Accessibility signals  \nAccessibility signals encompass both sounds, formerly called audio cues, and announcements, formerly called alerts.  \nThe commands **Help: List Signal Sounds** and **Help: List Signal Announcements** allow users to view the available signals and configure them. Migration to this new configuration happens automatically.  \nBefore:  \n```json\n\"audioCues.clear\": \"on | auto | off\"\n\"accessibility.alert.clear\": true | false\n```  \nAfter:  \n```json\n\"accessibility.signals.clear\": {\n\"sound\": \"auto | on | off\",\n\"announcement\" (optional): \"auto | off\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_87#_accessibility-signals",
    "id": 3657
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Workbench  \n### Interactive settings in the release notes  \nTo make it easier for you to get started with a new feature, you can now enable or view a setting directly from the release notes. When you view the release notes from within VS Code (**Show Release Notes** command), notice that some settings have a gear icon. Select the setting or gear icon to immediately interact with the setting.  \n![Example of an interactive setting in release notes](images/1_87/setting-in-release-notes.png)",
    "url": "https://code.visualstudio.com/updates/v1_87#_interactive-settings-in-the-release-notes",
    "id": 3658
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Transparency and control of language model access  \nThis iteration, we introduced a proposed API that gives extensions the ability to use GitHub Copilot Chat's language models. To provide the most transparency and control of access to the models, we have added the following features.  \n#### Manage language model access like you manage authentication access  \nWe found that managing access to language models was very similar to managing access to your GitHub account or Microsoft account (or anything that leverages the `AuthenticationProvider` model) in VS Code. Because of these similarities, we've leveraged VS Code's auth stack for access to language models as well.  \nWhen an extension wants to access the language models of another extension, they'll see a one-time prompt for access that will be persisted:\n![Modal dialog showing an extension requiring language model access](images/1_87/auth-language-model.png)  \nOnce access is granted, you'll be able to manage that access in the same place you manage access to your accounts, in the account menu:  \n![Manage trusted extensions options in the account menu](images/1_87/auth-account-menu.png)  \n\"Manage Trusted Extensions\" leading you to a quick pick where you can manage access if you so choose:  \n![Manage trusted extensions quick pick](images/1_87/manage-trusted-extensions.png)  \nWith the initial work done, we'll continue to refine the experience so it's as smooth and clear as possible.  \n#### Track language model usage of an extension  \nYou can track language model usage of an extension in the Extension Editor and Runtime Extensions Editor. Following images show the number of requests made by the Copilot Chat Sample Extension to the GitHub Copilot Chat language model.  \n![Tracking language model usage in extension editor](images/1_87/extension-editor-lang-model-tracking.png)  \n![Tracking language model usage in running extensions editor](images/1_87/running-extensions-lang-model-tracking.png)",
    "url": "https://code.visualstudio.com/updates/v1_87#_transparency-and-control-of-language-model-access",
    "id": 3659
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Editor  \n### Editor Sticky Scroll  \nThis iteration we're enabling Sticky Scroll in the editor by default. You can change this using the setting <code codesetting=\"editor.stickyScroll.enabled\">editor.stickyScroll.enabled</code>.  \nWe have also increased the maximum number of lines that can be displayed within the editor sticky widget from 10 to 20. You can configure the maximum line count with the setting <code codesetting=\"editor.stickyScroll.maxLineCount\">editor.stickyScroll.maxLineCount</code>.",
    "url": "https://code.visualstudio.com/updates/v1_87#_editor-sticky-scroll",
    "id": 3660
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Inline completions for multiple cursors  \nThis iteration we have added support for multi-cursor inline completions. Now, the inline completions are previewed and applied at both the primary and the secondary cursor positions.  \n<video src=\"images/1_87/multicursor-inline-completions.mp4\" autoplay loop controls muted title=\"Multi-cursor inline Completions.\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_87#_inline-completions-for-multiple-cursors",
    "id": 3661
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Refactor preview in multi diff editor  \nWith Refactor preview, you can review the changes that will be applied by a code refactoring. Refactor preview changes are now shown in a multi diff editor, which facilitates seeing all changes at a glance and comparing them against the previous version.  \n<video src=\"images/1_87/refactor-preview-multidiff-editor.mp4\" autoplay loop controls muted title=\"Multi-diff Editor opened from Refactor preview.\"></video>",
    "url": "https://code.visualstudio.com/updates/v1_87#_refactor-preview-in-multi-diff-editor",
    "id": 3662
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Terminal  \n### Command duration tracked  \nTerminal duration is now tracked and details are shown in the command hover when shell integration is enabled:  \n![Hovering the terminal command shows how long it took in milliseconds](./images/1_87/terminal_duration.png)",
    "url": "https://code.visualstudio.com/updates/v1_87#_command-duration-tracked",
    "id": 3663
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### New commands to zoom in, out and reset  \nThere are new commands to zoom in, zoom out, and reset the terminal font size. These are unbound by default, but you can bind them to your preferred keybindings.  \n- **Terminal: Increase Font Size** (`workbench.action.terminal.fontZoomIn`)\n- **Terminal: Decrease Font Size** (`workbench.action.terminal.fontZoomOut`)\n- **Terminal: Reset Font Size** (`workbench.action.terminal.fontZoomReset`)",
    "url": "https://code.visualstudio.com/updates/v1_87#_new-commands-to-zoom-in,-out-and-reset",
    "id": 3664
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Source Control  \n### Include repository or branch name in the window title  \nUsers can customize the window title by using the <code codesetting=\"window.title\">window.title</code> setting. This iteration, we added two new variables that can be used with this setting: `${activeRepositoryName}`, and `${activeRepositoryBranchName}`. These variables are replaced with the name of the active repository and the active branch, respectively.",
    "url": "https://code.visualstudio.com/updates/v1_87#_include-repository-or-branch-name-in-the-window-title",
    "id": 3665
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Commit input validation improvements  \nThis iteration, we explored using language diagnostics to provide better input validation for authoring commit messages. Using language diagnostics enables us to surface code actions that can be invoked to resolve the input validation warnings. We added code actions to remove whitespace characters, hard wrap lines based on the <code codesetting=\"git.inputValidationSubjectLength\">git.inputValidationSubjectLength</code>, and <code codesetting=\"git.inputValidationLength\">git.inputValidationLength</code> settings, and we are looking to add more code actions in the future.  \nTo enable it, toggle the <code codesetting=\"git.inputValidation:true\">git.inputValidation</code> setting. We have some issues to work through before we can enable this by default, but in the meantime feel free to enable it and let us know your feedback.",
    "url": "https://code.visualstudio.com/updates/v1_87#_commit-input-validation-improvements",
    "id": 3666
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Incoming/Outgoing changes settings management  \nWe continue to polish the **Incoming/Outgoing** section of the Source Control view. This iteration, we added a settings action to the \"Incoming/Outgoing\" separator that allows users to toggle the <code codesetting=\"scm.showIncomingChanges\">scm.showIncomingChanges</code>, <code codesetting=\"scm.showOutgoingChanges\">scm.showOutgoingChanges</code>, and <code codesetting=\"scm.showChangesSummary\">scm.showChangesSummary</code> settings more easily. These actions are also available in the **Incoming & Outgoing** menu in the `...` menu of the Source Control view's title bar.",
    "url": "https://code.visualstudio.com/updates/v1_87#_incoming/outgoing-changes-settings-management",
    "id": 3667
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Close All Unmodified Editors command  \nTo help with editor management, we have added the **Close All Unmodified Editors** command to the command palette that will close all editors that have unmodified files. The command will not close editors that have unsaved changes.",
    "url": "https://code.visualstudio.com/updates/v1_87#_close-all-unmodified-editors-command",
    "id": 3668
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Notebooks  \n### Indentation settings for notebooks  \nWe now support notebook-specific indentation settings via the <code codesetting=\"notebook.editorOptionsCustomizations\">notebook.editorOptionsCustomizations</code> setting. This setting allows users to set a specific indentation style for notebooks, via the `editor.tabSize`, `editor.indentSize`, and `editor.insertSpaces` settings.  \nUsers will also notice a status bar entry named **Notebook Indentation** that shows the current indentation settings for the notebook editor. This entry has a quick pick menu, which enables managing the indentation settings without having to open the Settings editor. This is the same quick pick menu that is also available in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_87#_indentation-settings-for-notebooks",
    "id": 3669
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Debug  \n### Support for new `BreakpointMode`  \nVS Code supports a new addition to the Debug Adapter Protocol (DAP) that allows you to set different 'modes' of breakpoints. This functionality might commonly be used by debuggers of native code, for example, to set hardware versus software breakpoints. The mode of a breakpoint can be changed with the **Edit Mode** action in its context menu.  \n![Breakpoint context menu now has an 'Edit Mode...' option to change the breakpoint mode](./images/1_87/bp-modes.png)",
    "url": "https://code.visualstudio.com/updates/v1_87#_support-for-new-breakpointmode",
    "id": 3670
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Jupyter  \n#### Language Server support for locally running Jupyter Servers  \nWhen connecting to local Jupyter Servers, the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension previously treated these Jupyter Servers as remote. As a result, the [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension was unable to detect the installed packages.  \n![Failed language features for remote Jupyter Servers](images/1_87/jupyter-remote-failed-ls-features.png)  \nThis iteration, the [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) extension detects whether the connected Jupyter Server is local or remote. This enables the [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension to provide richer language features, based on packages installed (within a local Python Environment).  \n![Language features for remote Jupyter Servers](images/1_87/jupyter-remote-ls-features.png)",
    "url": "https://code.visualstudio.com/updates/v1_87#_jupyter",
    "id": 3671
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Python  \n#### Shell integration for the Python REPL  \nWe now have shell integration for Python REPL enabled on Mac, Linux, and Windows via the [WSL extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl). When you execute commands in the Python REPL, colored circles decorators indicate whether the commands succeeded or failed. Additionally, we also support the **Terminal: Run Recent Command\u2026** command for Python REPL, which enables you to view and utilize the REPL\u2019s command history.  \nWe now also support Python\u2019s shell file history for all operating systems, accessible via **Terminal: Run Recent Command**.  \n#### Reducing risk of ignored first command  \nPreviously, a number of Python REPL users noticed issues with their first command to the Python REPL (for example, by using `kbstyle(Shift+Enter)`). Either their Python command was ignored and not sent to Python REPL, or the command was pasted multiple times in the shell that launches Python REPL instead of the Python REPL itself. This behavior happened especially for users on Windows, or users working on older machines.  \nIn this iteration, we made efforts to mitigate and reduce the risk of this behavior happening. Users now experience less occurrence of their first command being lost when they send their Python command to the first REPL instance inside VS Code.  \n#### Improvements for adding missing imports  \nThe [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension provides an **Add Imports** code action for adding missing imports. In the pre-release version of Pylance, we improved this code action. Pylance now uses heuristics to show only the top three high-confidence import options, prioritized based on the following criteria: most recently used imports, symbols from the same module, symbols from the standard library, symbols from user modules, symbols from third-party packages, and finally sorting by module and symbol name.  \nAdditionally, two new code actions are introduced: **Search for additional import matches**, which displays a quick pick menu that allows you to search for import options that prefix-match the missing import symbol, and **Change spelling**, which offers import suggestions for missing imports due to typos.  \n<video src=\"images/1_87/pylance-add-imports.mp4\" title=\"Add missing import and Search for additional import matches code actions.\" autoplay loop controls muted></video>  \nYou can enable this behavior now with the <code codesetting=\"python.analysis.addImport.heuristics:true\">python.analysis.addImport.heuristics</code> setting. We plan to make this the new default behaviour soon, and deprecate the setting in a future release.  \n#### Automatically open the browser when debugging Django or Flask apps  \nDeveloping and testing your Python web applications is now more convenient with the [Python Debugger extension](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy)! You can now get the browser to automatically open when starting the debugger with Django or Flask apps, by setting `autoStartBrowser: true` in your `launch.json` configuration:  \n```json\n{\n\"name\": \"Python Debugger: Flask\",\n\"type\": \"debugpy\",\n\"request\": \"launch\",\n\"module\": \"flask\",\n\"env\": {\n\"FLASK_APP\": \"hello_app.webapp\",\n\"FLASK_DEBUG\": \"1\"\n},\n\"args\": [\n\"run\"\n],\n\"jinja\": true,\n\"autoStartBrowser\": true\n}\n```  \n#### Bug fix for Pytest in symlinked workspaces  \nWe implemented a bug fix that enables pytest tests to function correctly for workspaces that have symlinks. On the testing rewrite, test from symlink locations are referenced and run correctly by their symlink paths.",
    "url": "https://code.visualstudio.com/updates/v1_87#_python",
    "id": 3672
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### GitHub Pull Requests  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. New features include:  \n- Renamed from \"GitHub Pull Requests and Issues\" to \"GitHub Pull Requests\"\n- The email associated with a merge or squash commit can be chosen at merge/squash time\n- The setting `githubPullRequests.labelCreated` can be used to configure the labels that are automatically added to PRs that are created\n- \"Owner level\" PR templates are now supported\n- Projects can be added at PR and issue creation time  \nReview the [changelog for the 0.82.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0820) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_87#_github-pull-requests",
    "id": 3673
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Preview Features  \n### For extension authors: Preview of `@vscode/l10n-dev` and Azure AI Translator  \nThis iteration, we have introduced a new command, a subcommand of `@vscode/l10n-dev`, that allows you to translate your strings using [Azure AI Translator](https://azure.microsoft.com/en-us/products/ai-services/ai-translator).  \nAfter exporting your strings, and creating an Azure AI Translator instance, you can set the `AZURE_TRANSLATOR_KEY` & `AZURE_TRANSLATOR_REGION` environment variables and then you can run the following command to generate translations using Azure AI Translator:  \n```bash\nnpx @vscode/l10n-dev generate-azure -o ./l10n/ ./l10n/bundle.l10n.json ./package.nls.json\n```  \n<video src=\"images/1_87/azure-translator.mp4\" title=\"l10n-dev using Azure Translator\" autoplay loop controls muted></video>  \nAzure AI Translator offers a free tier. We thought it was a good opportunity to offer tooling to extension authors so that they can more easily support the many users who speak various languages. Do keep in mind that these are machine translations, so they might not always be perfect. They can be a good jumping off point to more refined translations from people who speak the language, if you have the ability to do so.  \nFor more information, take a look at [the l10n-dev documentation on the Azure AI Translator integration.](https://github.com/microsoft/vscode-l10n/blob/main/l10n-dev/README.md#azure-ai-translator-experimental)",
    "url": "https://code.visualstudio.com/updates/v1_87#_for-extension-authors:-preview-of-@vscode/l10n-dev-and-azure-ai-translator",
    "id": 3674
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Extension Authoring  \n### Test Coverage in Extensions  \nExtension authors who are using the [test CLI](/api/working-with-extensions/testing-extension#quick-setup-the-test-cli) for their extensions can generate test coverage by updating to the latest version of the `@vscode/test-cli` package.  \nCoverage can be generated on the command line by passing the `--coverage` flag when running tests, and in the VS Code UI by using the **Run with Coverage** actions.",
    "url": "https://code.visualstudio.com/updates/v1_87#_test-coverage-in-extensions",
    "id": 3675
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Test configurations in launch.json  \nYou can now reference test configuration files in your `launch.json` configuration:  \n```diff\n{\n\"type\": \"extensionHost\",\n\"request\": \"launch\",\n\"name\": \"My extension tests\",\n+   \"testConfiguration\": \"${workspaceFolder}/.vscode-test.js\",\n-   \"args\": [\"--extensionDevelopmentPath=${workspaceFolder}\"]\n},\n```  \nThe various `args` that were previously required, are generated for you, but any additional arguments passed will be appended to VS Code's command line.",
    "url": "https://code.visualstudio.com/updates/v1_87#_test-configurations-in-launch.json",
    "id": 3676
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Contributing Additional Data in Issue Reporter  \nLast iteration, we added fields for `data` and `uri` in the `workbench.action.openIssueReporter` command. This enabled extensions to directly open the native issue reporter with more prefilled information.  \nTo let extensions benefit from this in the separate case of navigating the normal issue reporter flow via `Help: Reporter Issues...`, extensions can contribute a custom command (which will invoke `openIssueReporter`) and a menu contribution point to `issue/reporter`.  \nAn example of a contributed command and menu for `contributes` in `package.json`:  \n``` json\n\"commands\": [\n{\n\"command\": \"extension.myCommand\",\n\"title\": \"Report Issue\"\n}\n],\n\"menus\": {\n\"issue/reporter\": [\n{\n\"command\": \"extension.myCommand\"\n}\n]\n}\n\n```  \nSubscribe to [issue #196863](https://github.com/microsoft/vscode/issues/196863) for updates or changes to the API and `openIssueReporter` command.",
    "url": "https://code.visualstudio.com/updates/v1_87#_contributing-additional-data-in-issue-reporter",
    "id": 3677
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n## Proposed APIs  \n### Chat and Language Model APIs nearing their finalization  \nWe have been working on support for extensions to contribute to the Chat view and general use of language models. We are now in the final stages of finalizing the following APIs and would love to hear your feedback:  \n- Chat participant ([issue #199908](https://github.com/microsoft/vscode/issues/199908)) - [`vscode.proposed.chatParticipant.d.ts`](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.chatParticipant.d.ts)\n- Language model use ([issue #206265](https://github.com/microsoft/vscode/issues/206265)) - [`vscode.proposed.languageModels.d.ts`](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.languageModels.d.ts)  \nLearn more about how to [build chat extensions](https://code.visualstudio.com/api/extension-guides/chat) and how you can [use language models](https://code.visualstudio.com/api/extension-guides/language-model) in our extension guides.",
    "url": "https://code.visualstudio.com/updates/v1_87#_chat-and-language-model-apis-nearing-their-finalization",
    "id": 3678
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### FindFiles2 API  \nWe have added a new proposed extension API that is an improved version of the existing `workspace.FindFiles` API. The new `workspace.FindFiles2` API introduces new options that allow a workspace file search to:  \n- Respect `files.exclude` and `search.exclude` settings\n- Respect ignore files\n- Perform a fuzzy search\n- Follow symlinks  \nYou can review the new API [here](https://github.com/microsoft/vscode/blob/4e2aa982224429f161423cbdded9587e39766782/src/vscode-dts/vscode.proposed.findFiles2.d.ts).  \nNote that `FindFiles2` is a tentative name and that this functionality might be provided as an alternative overload of `FindFiles` in the future.",
    "url": "https://code.visualstudio.com/updates/v1_87#_findfiles2-api",
    "id": 3679
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Test Coverage API  \nThis iteration, the Test Coverage API and in-editor experience are in feature-complete state. We encourage extension authors to try them out and provide feedback before their forecasted finalization in the VS Code 1.88 release.  \nThe [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) has already adopted the Test Coverage API. Developers can already see the coverage results running Java tests. Now you can get to test coverage by selecting the **Run Test With Coverage** button, and view the **Test Coverage** panel in the Test Explorer view. Learn more about the Test Coverage with the Extension Pack for Java in the team's [December](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-december-2023/) and [January](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-january-2024/) update.  \nWhile the API is too lengthy to include here, we believe it to be fairly straightforward, and would welcome your input on the proposal in [issue #123713](https://github.com/microsoft/vscode/issues/123713).",
    "url": "https://code.visualstudio.com/updates/v1_87#_test-coverage-api",
    "id": 3680
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Debug Visualizer API  \nWe have a new API that enables extensions to contribute *visualizers* for a variable. These visualizers might be either actions that run a command, such as opening a new editor, or trees embedded inline into the Debug views and that take the place of the data's default representation.  \nYou can review the new API [here](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.debugVisualization.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_87#_debug-visualizer-api",
    "id": 3681
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### New Symbol Names Provider API  \nThis API allows extensions to provide name suggestions when the user wants to rename a symbol.",
    "url": "https://code.visualstudio.com/updates/v1_87#_new-symbol-names-provider-api",
    "id": 3682
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@starball5 (starball)](https://github.com/starball5)",
    "url": "https://code.visualstudio.com/updates/v1_87#_issue-tracking",
    "id": 3683
  },
  {
    "content": "Learn what is new in the Visual Studio Code February 2024 Release (1.87)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Prevent F1 from opening browser help in webviews [PR #204499](https://github.com/microsoft/vscode/pull/204499)\n* [@aramikuto (Aleksandr Kondrashov)](https://github.com/aramikuto)\n* Do not use respectMultiSelection for upload and paste [PR #201145](https://github.com/microsoft/vscode/pull/201145)\n* Ensure that cursor state change is always emitted upon restoring state [PR #203451](https://github.com/microsoft/vscode/pull/203451)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr)\n* Replace map by foreach [PR #199194](https://github.com/microsoft/vscode/pull/199194)\n* Fix inoperative try/catch [PR #203904](https://github.com/microsoft/vscode/pull/203904)\n* [@charlypoirier (Charly)](https://github.com/charlypoirier): Fix typo in configurationEditingMain.ts [PR #203970](https://github.com/microsoft/vscode/pull/203970)\n* [@emilan (Emil)](https://github.com/emilan): Fix for automatic folderOpen tasks with Remote SSH extension [PR #204008](https://github.com/microsoft/vscode/pull/204008)\n* [@fmarier (Francois Marier)](https://github.com/fmarier): Use HTTPS for the apt repository [PR #203833](https://github.com/microsoft/vscode/pull/203833)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Reinstate command items when filtering checkout quickpick (fix #202870) [PR #204107](https://github.com/microsoft/vscode/pull/204107)\n* Make Collapse/Expand All button of Search tree initialize correctly (fix #204316) [PR #205235](https://github.com/microsoft/vscode/pull/205235)\n* [@harbin1053020115 (ermin.zem)](https://github.com/harbin1053020115): chore: update vscode known variables [PR #204568](https://github.com/microsoft/vscode/pull/204568)\n* [@hsfzxjy (Xie Jingyi)](https://github.com/hsfzxjy): Add duration to the terminal command SI tooltip [PR #199357](https://github.com/microsoft/vscode/pull/199357)\n* [@jcarrus (Justin Carrus)](https://github.com/jcarrus): Increase editor.stickyScroll.maxLineCount from 10 to 20 [PR #201451](https://github.com/microsoft/vscode/pull/201451)\n* [@jnnklhmnn (Jannik Lehmann)](https://github.com/jnnklhmnn): Introduce Collapse All Action to Loaded Scripts [PR #203560](https://github.com/microsoft/vscode/pull/203560)\n* [@Krzysztof-Cieslak (Krzysztof Cie\u015blak)](https://github.com/Krzysztof-Cieslak)\n* Improve inline edit commands' preconditions [PR #205373](https://github.com/microsoft/vscode/pull/205373)\n* Don't run `onDidBlurEditorWidget` and `onDidFocusEditorText` if inline edit is disabled [PR #205378](https://github.com/microsoft/vscode/pull/205378)\n* Inline edit - don't send reject callback on blur [PR #205976](https://github.com/microsoft/vscode/pull/205976)\n* [@luctowers (Lucas Towers)](https://github.com/luctowers): Fix markdown light and dark mode when using high contrast themes [PR #203690](https://github.com/microsoft/vscode/pull/203690)\n* [@NorthSecond (Yifei Yang)](https://github.com/NorthSecond): Fix: GLIBCXX version detection bug in check-requirements-linux.sh (issue #204186) [PR #204635](https://github.com/microsoft/vscode/pull/204635)\n* [@notnoop (Mahmood Ali)](https://github.com/notnoop): vscode server: cope with multiple libc/libc++ installations [PR #204032](https://github.com/microsoft/vscode/pull/204032)\n* [@orgads (Orgad Shaneh)](https://github.com/orgads): Tunnel: Extend port mapping lookup also for querystring [PR #203908](https://github.com/microsoft/vscode/pull/203908)\n* [@owlhuang (Dennis)](https://github.com/owlhuang): Pass the check if any one of the library (of the arch) satisfies the requirement. [PR #204221](https://github.com/microsoft/vscode/pull/204221)\n* [@perplexyves (Yves Daaboul)](https://github.com/perplexyves): fix(193523): JSDoc optional parameters don't display in functions [PR #202963](https://github.com/microsoft/vscode/pull/202963)\n* [@petvas (Peter V)](https://github.com/petvas): Fix `IRawGalleryExtension.shortDescription` can be undefined. [PR #202780](https://github.com/microsoft/vscode/pull/202780)\n* [@pyrrho (Drew Pirrone-Brusse)](https://github.com/pyrrho): Extend TextEditorLineNumbersStyle with Interval [PR #198787](https://github.com/microsoft/vscode/pull/198787)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* Contribute to json language server with a custom language. [PR #198583](https://github.com/microsoft/vscode/pull/198583)\n* Enable json language support for `code-snippets` files [PR #204090](https://github.com/microsoft/vscode/pull/204090)\n* Improve extension `README` preview markdown codeblock language detection [PR #205329](https://github.com/microsoft/vscode/pull/205329)\n* [@rzvc](https://github.com/rzvc): Fix docblock expansion in TS, when asterisk not preceded by a space [PR #204400](https://github.com/microsoft/vscode/pull/204400)\n* [@sandersn (Nathan Shively-Sanders)](https://github.com/sandersn): Split TS' AI-backed code actions into separate entries [PR #201140](https://github.com/microsoft/vscode/pull/201140)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n* fix: memory leak in notebook editor widget [PR #204892](https://github.com/microsoft/vscode/pull/204892)\n* fix: memory leak in code editor widget [PR #205488](https://github.com/microsoft/vscode/pull/205488)\n* [@timotheeMM (timotheeMM)](https://github.com/timotheeMM): Fix a typo in src/vs/platform/terminal/common/terminal.ts [PR #204245](https://github.com/microsoft/vscode/pull/204245)\n* [@tisilent (xiejialong)](https://github.com/tisilent): dispose sash [PR #199081](https://github.com/microsoft/vscode/pull/199081)\n* [@tomqwpl](https://github.com/tomqwpl): fix: Not populating extension when selecting notebook kernel (#197619) [PR #197810](https://github.com/microsoft/vscode/pull/197810)\n* [@vbem (Lei LI)](https://github.com/vbem): Fix typo in shellIntegration-bash.sh [PR #203407](https://github.com/microsoft/vscode/pull/203407)\n* [@weartist (Hans)](https://github.com/weartist): Fix the broken links to the latest valid links [PR #184131](https://github.com/microsoft/vscode/pull/184131)\n* [@werat (Andy Hippo)](https://github.com/werat)\n* Fix memory leak in comments browser [PR #205162](https://github.com/microsoft/vscode/pull/205162)\n* Fix memory leaks [PR #205589](https://github.com/microsoft/vscode/pull/205589)\n* [@wy-luke](https://github.com/wy-luke): docs: update comment for hideFromUser [PR #202730](https://github.com/microsoft/vscode/pull/202730)\n* [@xavierdecoster (Xavier Decoster)](https://github.com/xavierdecoster): Update comment in extensionGalleryService.ts [PR #205004](https://github.com/microsoft/vscode/pull/205004)\n* [@xiaoyun94 (\u66b4\u8e81\u66b4\u8e81\u6700\u66b4\u8e81/Bigforce)](https://github.com/xiaoyun94): Fix browser host open additional files in merge mode [PR #205663](https://github.com/microsoft/vscode/pull/205663)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): Add tips for debug views [PR #205861](https://github.com/microsoft/vscode/pull/205861)  \nContributions to `vscode-black-formatter`:  \n* [@bn-d (Boning)](https://github.com/bn-d): Update min vscode version [PR #445](https://github.com/microsoft/vscode-black-formatter/pull/445)  \nContributions to `vscode-hexeditor`:  \n* [@deitry (Dmitry Vornychev)](https://github.com/deitry): Fix plugin description [PR #480](https://github.com/microsoft/vscode-hexeditor/pull/480)\n* [@jogo-](https://github.com/jogo-)\n* Display unsigned before signed int64 [PR #482](https://github.com/microsoft/vscode-hexeditor/pull/482)\n* Display ascii character in data inspector [PR #483](https://github.com/microsoft/vscode-hexeditor/pull/483)\n* Show status offset and selection in dec and hexa [PR #486](https://github.com/microsoft/vscode-hexeditor/pull/486)\n* Display in data inspector ULEB128 and SLEB128 [PR #488](https://github.com/microsoft/vscode-hexeditor/pull/488)\n* Fix typos in CHANGELOG.md [PR #489](https://github.com/microsoft/vscode-hexeditor/pull/489)\n* [@liudonghua123 (liudonghua)](https://github.com/liudonghua123): add common cjk encoding (gb18030 for simple Chinese, big5 for traditional Chinese, euc-kr for Korean, euc-jp for Japanese) datatype support [PR #465](https://github.com/microsoft/vscode-hexeditor/pull/465)  \nContributions to `vscode-isort`:  \n* [@archont94](https://github.com/archont94): Fix for selecting `isort` settings from path [PR #386](https://github.com/microsoft/vscode-isort/pull/386)\n* [@connorads (Connor Adams)](https://github.com/connorads): Update config example [PR #390](https://github.com/microsoft/vscode-isort/pull/390)  \nContributions to `vscode-languageserver-node`:  \n* [@michaelpj (Michael Peyton Jones)](https://github.com/michaelpj)\n* Remove proposed tags from new names for structure literals [PR #1417](https://github.com/microsoft/vscode-languageserver-node/pull/1417)\n* Add Haskell to LanguageKind [PR #1421](https://github.com/microsoft/vscode-languageserver-node/pull/1421)\n* [@w0rm (Andrey Kuzmin)](https://github.com/w0rm): Round progress percentage according to the spec [PR #1413](https://github.com/microsoft/vscode-languageserver-node/pull/1413)  \nContributions to `vscode-pull-request-github`:  \n* [@Malix-off (Malix)](https://github.com/Malix-off): Fix #5693 [PR #5694](https://github.com/microsoft/vscode-pull-request-github/pull/5694)\n* [@umakantv (Umakant Vashishtha)](https://github.com/umakantv): Feature: Auto Populate Labels  [PR #5679](https://github.com/microsoft/vscode-pull-request-github/pull/5679)  \nContributions to `language-server-protocol`:  \n* [@alanwsmith (Alan Smith)](https://github.com/alanwsmith): Removed deprecated Rust Language Server (RLS) [PR #1899](https://github.com/microsoft/language-server-protocol/pull/1899)\n* [@debonte (Erik De Bonte)](https://github.com/debonte): Add WorkspaceEditMetadata support [PR #1881](https://github.com/microsoft/language-server-protocol/pull/1881)\n* [@falko17 (Falko)](https://github.com/falko17): Snippet grammar fixes and minor formal improvements throughout the LSP spec [PR #1886](https://github.com/microsoft/language-server-protocol/pull/1886)\n* [@MariaSolOs (Maria Jos\u00e9 Solano)](https://github.com/MariaSolOs)\n* Add snippet text edit specification [PR #1892](https://github.com/microsoft/language-server-protocol/pull/1892)\n* Add string value definition [PR #1893](https://github.com/microsoft/language-server-protocol/pull/1893)\n* Remove insertTextFormat from InlineCompletionItem [PR #1894](https://github.com/microsoft/language-server-protocol/pull/1894)\n* [@michaelpj (Michael Peyton Jones)](https://github.com/michaelpj): Add Haskell to language kind table [PR #1898](https://github.com/microsoft/language-server-protocol/pull/1898)\n* [@qvalentin (valentin)](https://github.com/qvalentin): feat(implementors): add helm-ls [PR #1895](https://github.com/microsoft/language-server-protocol/pull/1895)  \nContributions to `node-pty`:  \n* [@kkocdko (kkocdko)](https://github.com/kkocdko): Port to NAPI [PR #644](https://github.com/microsoft/node-pty/pull/644)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_87#_pull-requests",
    "id": 3684
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Improved diff editor accessibility  \nIf you're using a screen reader, you now get an announcement when a diff editor becomes the active editor. You can disable this behavior with the <code codesetting=\"accessibility.verbosity.diffEditorActive\">accessibility.verbosity.diffEditorActive</code> setting.  \nWe also added information about **Diff Editor: Switch Side**, a helpful command for keyboard users, to the [accessibility help dialog](https://code.visualstudio.com/docs/editor/accessibility#_accessibility-help).  \n[Accessibility Signals](https://code.visualstudio.com/docs/editor/accessibility#_accessibility-signals) now work on both sides of the diff editor. Previously, they were only available on the modified side.",
    "url": "https://code.visualstudio.com/updates/v1_88#_improved-diff-editor-accessibility",
    "id": 3685
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Accessible View chat code block commands  \nWhen you inspect a chat response in the Accessible View, you can now use the code block commands and keybindings that are available in the Chat view.  \nThese include **Chat: Insert at Cursor**, **Chat: Insert into Terminal** and **Chat: Insert into New File**.",
    "url": "https://code.visualstudio.com/updates/v1_88#_accessible-view-chat-code-block-commands",
    "id": 3686
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Notebook cell aria label updates  \nAria labels for notebook cells now update to indicate if the cell is currently executing or pending execution.",
    "url": "https://code.visualstudio.com/updates/v1_88#_notebook-cell-aria-label-updates",
    "id": 3687
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Workbench  \n### Custom editor support in floating windows  \nWe expanded support for opening editors into [floating windows](https://code.visualstudio.com/docs/editor/custom-layout#_floating-editor-windows) to custom editors, and generally all editors that use the [webview API](https://code.visualstudio.com/api/extension-guides/webview). This includes markdown preview, browser preview, and complex custom editors, such as our [hex editor](https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor).  \n<video src=\"images/1_88/custom-editors-float.mp4\" title=\"Custom editors support in floating windows.\" autoplay loop controls muted></video>  \n**Note:** due to a technical limitation, moving a webview-based editor between windows requires the contents of that editor to reload. It is then up to the editor to restore the state you had previously accumulated. In some cases your state might be reset, as if you had opened the editor for the first time.",
    "url": "https://code.visualstudio.com/updates/v1_88#_custom-editor-support-in-floating-windows",
    "id": 3688
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Custom labels for open editors  \nWe now let you customize the display label for editor tabs and the Open editors view. This functionality can be useful to distinguish between editors for files with the same name.  \nYou can tailor these labels to your preference by adding entries under the <code codesetting=\"workbench.editor.customLabels.patterns\">workbench.editor.customLabels.patterns</code> setting. Each entry should include a [glob pattern](https://code.visualstudio.com/docs/editor/glob-patterns) that matches file paths and a template that defines the new name for the editor tab. This customization only applies when a file's path matches the specified pattern. Whether a pattern matches, depends on if it's defined as a relative or absolute file path pattern.  \nTemplates can incorporate variables such as `${filename}`, `${extname}`, `${dirname}`, and `${dirname(N)}`, which are dynamically replaced with values from the file's path.  \nTo enable or disable these custom labels, use the <code codesetting=\"workbench.editor.customLabels.enabled\">workbench.editor.customLabels.enabled</code> setting. This enables you to switch to the original editor names at any time, without having to remove your custom patterns.  \n<video src=\"images/1_88/custom-editor-labels.mp4\" title=\"Adding an entry for a custom editor label\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_custom-labels-for-open-editors",
    "id": 3689
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Locked scrolling  \nYou can now synchronize scrolling across all visible editors by using the **View: Toggle Locked Scrolling Across Editors** command. This means that when you scroll in one editor, all the other editors scroll by the same amount, keeping everything aligned. This feature can be useful if you need to compare files side-by-side.  \nIf you want more control for enabling and disabling locked scrolling, you can choose to only activate the scrolling sync when you're holding down a specific keybinding. Set up a keyboard shortcut for the `workbench.action.holdLockedScrolling` command, and you're able to temporarily lock the scrolling across editors whenever you need it.  \n<video src=\"images/1_88/locked-scrolling.mp4\" title=\"Synchronize scrolling two editors\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_locked-scrolling",
    "id": 3690
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Activity Bar at the bottom  \nPreviously, we introduced the option to move the Activity bar to the top of the Side Bar. We're now enabling you to also move the Activity Bar to the bottom. To do this, change the <code codesetting=\"workbench.activityBar.location:bottom\">workbench.activityBar.location</code> setting to `bottom`.  \nWe've also improved the look and feel of the Activity Bar when it's positioned at the top, to make sure it fits in nicely with the rest of the interface.  \n![Three screenshots, showing the different Activity Bar positions: on the left side, at the top, and at the bottom](images/1_88/activity-bar-positions.png)",
    "url": "https://code.visualstudio.com/updates/v1_88#_activity-bar-at-the-bottom",
    "id": 3691
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Search Editor single-click behavior  \nYou can now configure the <code codesetting=\"search.searchEditor.singleClickBehaviour\">search.searchEditor.singleClickBehaviour</code> setting to determine what happens when you single-click on a Search Editor entry. Currently, the setting only supports opening a Peek Definition.",
    "url": "https://code.visualstudio.com/updates/v1_88#_search-editor-single-click-behavior",
    "id": 3692
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Quick Search improvements  \n#### Sticky file paths  \nIn Quick Search, we've made the file name separators sticky to make it clearer which file a search result is associated with. This can be useful when you have many occurrences of a search term in a file.  \n<video src=\"images/1_88/quick-pick-sticky-scroll.mp4\" title=\"Sticky Scroll support in the quick pick\" autoplay loop controls muted></video>  \n#### File path separator buttons  \nWhen you hover over the file results of a particular file, or if you arrow down to a result, the buttons (for example, to open the file) also appear for the file path separator.  \n<video src=\"images/1_88/quick-pick-separator-buttons-show-up.mp4\" title=\"Separator buttons show up when you hover or focus an item in that section\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_quick-search-improvements",
    "id": 3693
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Quick Pick separator navigation keybindings  \nWe received feedback that it would be nice to be able to navigate between separators in a quick pick. This iteration, we've added a keybinding to do just this. On Windows & Linux, you can use `Alt+Up/Down`, and on macOS it is `Cmd+Up/Down`. In this example video, you can see the active item moving between:  \n* The `recently used` and `other commands` separators in the Command Palette\n* Between the file path separators in Quick Search  \n<video src=\"images/1_88/quick-pick-separator-keybindings.mp4\" title=\"Move between separators using keybindings\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_quick-pick-separator-navigation-keybindings",
    "id": 3694
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Quick Pick disabled checkbox items  \nThis iteration, we made it clearer when a quick pick displays items that are disabled. An example of this can be found in the \"Manage Trusted Extensions\" quick pick, which can be accessed for any of the accounts that you're logged in to.  \n![The Manage Trusted Extensions quick pick with some items disabled](images/1_88/manage-trusted-extensions.png)",
    "url": "https://code.visualstudio.com/updates/v1_88#_quick-pick-disabled-checkbox-items",
    "id": 3695
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Extensions update improvements  \n#### Restart extensions  \nWhen an extension is updated, you can now restart extensions instead of having to reload the window.  \n![Restart extensions instead of reloading the window](images/1_88/restart-extensions.png)  \n**Note:** When you are connected to a remote server like WSL or SSH or Dev Container, you still need to reload the window to update extensions.  \n#### Update extensions with VS Code updates  \nWhen you have <code codesetting=\"extensions.autoCheckUpdates\">extensions auto update</code> enabled, VS Code now updates the extensions that are compatible with the newer version of VS Code that is available for update. If the newer version of the extension is not compatible with the current version of VS Code, then the newer version of the extension is enabled only after you update VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_88#_extensions-update-improvements",
    "id": 3696
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Refactor Preview keybindings  \nWe updated the keybinding for previewing edits for the Rename Symbols refactoring (`kbstyle(F2)`) to maintain consistency with previewing refactorings in other contexts, such as Code Actions. You can now preview edits by using `kb(refactorPreview.apply)` (previously `Shift + Enter`).  \nWhen hovering over a Code Actions, `kb(refactorPreview.apply)` also opens the Refactor Preview panel in the workbench.",
    "url": "https://code.visualstudio.com/updates/v1_88#_refactor-preview-keybindings",
    "id": 3697
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Diff Editor Stage/Revert Selection Buttons  \nThe diff editor now has a separate gutter for **Stage** and **Revert** controls. These actions enable you to stage or revert changed code blocks.  \nIf you perform a text selection of some changes, these buttons let you stage or revert the selected changes (all changed characters within the selection).  \n![Video that shows the gutter buttons in the diff editor to stage or revert changes](images/1_88/diffEditor-stage-revert-demo.gif)  \nYou can hide the diff editor gutter by setting <code codesetting=\"diffEditor.renderGutterMenu:false\">diffEditor.renderGutterMenu</code> to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_88#_diff-editor-stage/revert-selection-buttons",
    "id": 3698
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Rename suggestions behavior  \nWe improved the flow of using rename suggestions to match that of quick picks. When you select a rename suggestion from the list, the input value now updates accordingly, which enables you to further modify the suggestion.  \n![Video of the Rename control that updates the input with the focused rename suggestion](images/1_88/rename-new-ux.gif)",
    "url": "https://code.visualstudio.com/updates/v1_88#_rename-suggestions-behavior",
    "id": 3699
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Source Control  \n### Incoming changes file decorations  \nTo help avoid potential conflicts when merging/rebasing changes from the remote, we now show file decorations for all files that have incoming changes and which were fetched but not yet merged/rebased. To benefit from this functionality, you should have both <code codesetting=\"git.autofetch\">git.autofetch</code> and <code codesetting=\"git.decorations.enabled\">git.decorations.enabled</code> settings enabled.  \n![Source Control incoming changes file decorators in the explorer view and in the editor tabs](./images/1_88/scm-incoming-changes-decorators.png)  \n_Theme: [GitHub Sharp](https://marketplace.visualstudio.com/items?itemName=joaomoreno.github-sharp-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/joaomoreno.github-sharp-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_88#_incoming-changes-file-decorations",
    "id": 3700
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Terminal  \n### Shell integration in debug terminals  \nTo provide enhanced functionality to the user and extensions, [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) is now automatically enabled in terminals that are launched when debugging.",
    "url": "https://code.visualstudio.com/updates/v1_88#_shell-integration-in-debug-terminals",
    "id": 3701
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Run recent command improvements  \nThe shell integration-powered **Run recent command** (`kb(workbench.action.terminal.runRecentCommand)`) now scrolls to and displays the last time the command was run, where possible. Running the command or canceling the quick pick returns the terminal to its previous state.  \n<video src=\"images/1_88/terminal-run-recent-command-preview.mp4\" title=\"Running a recent command will preview the last time it's run in the terminal temporarily\" autoplay loop controls muted></video>  \n_Theme: [Sapphire](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire) (preview on [vscode.dev](https://vscode.dev/editor/theme/Tyriar.theme-sapphire))_",
    "url": "https://code.visualstudio.com/updates/v1_88#_run-recent-command-improvements",
    "id": 3702
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Open detected link improvements  \nThe **Open detected link** command (`kb(workbench.action.terminal.openDetectedLink)`) now previews the link result in the editor and highlights the link source in the terminal.  \n<video src=\"images/1_88/terminal-open-detected-link.mp4\" title=\"Previews are shown in both the editor and terminal when scrolling through links\" autoplay loop controls muted></video>  \nAdditionally, duplicate links are now filtered out of the list and all links are presented in a consistent format.  \n![When 3 yarn.lock links are printed with the same line and column numbers, they will all be merged into a single detected link](./images/1_88/terminal-open-detected-link-format.png)",
    "url": "https://code.visualstudio.com/updates/v1_88#_open-detected-link-improvements",
    "id": 3703
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Additional context for word links  \n[Word links](https://code.visualstudio.com/docs/terminal/basics#_links) are defined by the <code codesetting=\"terminal.integrated.wordSeparators\">terminal.integrated.wordSeparators</code> setting and are the fallback when files/folder/URIs can't be found. When activated, these links now include extra surrounding context to add line and column information for the search that occurs.  \nNotice in the screenshot that the link `terminalLinkParsing` was selected, but the resulting search also includes the line number following the link.  \n![Activating a \"terminalLinkParsing\" link when followed by \"line 24\" will include the 24 line number in the search](./images/1_88/terminal-word-link-context.png)",
    "url": "https://code.visualstudio.com/updates/v1_88#_additional-context-for-word-links",
    "id": 3704
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### New link formats  \nThe following link format is now detected in terminals, even if the path contains spaces:  \n- <code>&nbsp;FILE&nbsp;&nbsp;path:line:column</code>",
    "url": "https://code.visualstudio.com/updates/v1_88#_new-link-formats",
    "id": 3705
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Terminal Sticky Scroll transparency support  \n[Sticky Scroll in the terminal](https://code.visualstudio.com/updates/v1_85#_sticky-scroll) now supports transparency. A theme can use this by configuring the `terminalStickyScroll.background` theme color to a transparent value, or by specifying an override in your `settings.json`. For example:  \n```json\n{\n\"workbench.colorCustomizations\": {\n\"[Default Dark Modern]\": {\n\"terminalStickyScroll.background\": \"#181818c0\"\n}\n}\n}\n```  \nWhich results in a transparent Sticky Scroll background, allowing the text behind to shine through:  \n![The Sticky Scroll background can now be transparent, allowing the text behind to shine through](./images/1_88/terminal-sticky-scroll-transparent.png)",
    "url": "https://code.visualstudio.com/updates/v1_88#_terminal-sticky-scroll-transparency-support",
    "id": 3706
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Testing  \n### Test Coverage  \nThis iteration, we've finalized our Test Coverage API, bringing native coverage support to VS Code. If your testing system supports it, you can get coverage by using the new **Run With Coverage** button:  \n![Screenshot showing the Run With Coverage button in the Test explorer view](./images/1_88/run-with-coverage.png)  \nThere are similarly new keybindings for running with coverage, such as `kbstyle(Ctrl+; Ctrl+Shift+A)` to run all tests with coverage, and `kbstyle(Ctrl+; Ctrl+Shift+L)` to run your last set of tests with coverage.  \nCoverage information is shown as an overlay on line numbers by default, but you can **Toggle Inline Coverage** to see complete detailed information for your source files:  \n![Screenshot showing the Test Coverage view in the Test Explorer view and color overlays in the editor](./images/1_88/test-coverage.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \nUsing test coverage requires that your extension implements the new API. Some extensions, such as the [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) and the [node:test runner](https://marketplace.visualstudio.com/items?itemName=connor4312.nodejs-testing) already support it. Learn more about the Test Coverage for Java in the team's [December](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-december-2023/) and [January](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-january-2024/) updates.  \nExtension authors can find more details about the Test Coverage API in the [Testing API documentation](https://code.visualstudio.com/api/extension-guides/testing#test-coverage).",
    "url": "https://code.visualstudio.com/updates/v1_88#_test-coverage",
    "id": 3707
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Color code support in test messages  \nWe now parse terminal color codes to colorize textual test messages, such as those displayed when a test fails, rather than displaying the raw 'unprintable' data codes.",
    "url": "https://code.visualstudio.com/updates/v1_88#_color-code-support-in-test-messages",
    "id": 3708
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Languages  \n### TypeScript 5.4  \nVS Code now includes TypeScript 5.4. This major update brings new improvements to type-checking and IntelliSense, and several bug fixes. See the [TypeScript 5.4 release blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-4/) for more details.",
    "url": "https://code.visualstudio.com/updates/v1_88#_typescript-5.4",
    "id": 3709
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Smarter inserting of images and links in Markdown  \nWhen you drop or paste an image or file into a Markdown file, VS Code automatically inserts Markdown image or link syntax for it. We now also smartly disable this behavior when you insert into code blocks and other contexts that don't support Markdown syntax:  \n<video src=\"images/1_88/md-drop.mp4\" title=\"Smartly dropping an image into a Markdown file. Markdown image syntax is inserted when it can be used, but not used in code blocks\" autoplay loop controls muted></video>  \nYou can always switch back to inserting the Markdown syntax by using the drop/paste widget. You can configure this behavior by using the <code codesetting=\"markdown.editor.drop.enabled\">markdown.editor.drop.enabled</code> and <code codesetting=\"markdown.editor.filePaste.enabled\">markdown.editor.filePaste.enabled</code> settings.",
    "url": "https://code.visualstudio.com/updates/v1_88#_smarter-inserting-of-images-and-links-in-markdown",
    "id": 3710
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Notebooks  \n### Keyboard shortcuts in Notebook outputs  \nWe now support some of the standard keyboard shortcuts in notebook outputs:  \n* Output can be selected and copied with the keyboard with the `kbstyle(Ctrl+A)` and `kbstyle(Ctrl+C)` keybindings respectively.\n* Scrollable outputs can be scrolled with the keyboard with the `kbstyle(Up)` and `kbstyle(Down)` keybindings respectively.\n* Scrolling to the top and bottom of a scrollable output can be achieved with the keyboard with the `kbstyle(Ctrl+Home)` and `kbstyle(Ctrl+End)` keybindings respectively (`kbstyle(Cmd+Up)` and `kbstyle(Cmd+Down)` on macOS).\n* Selecting output from the current selection point to the top or bottom of the output, can be achieved with the keyboard with the `kbstyle(Ctrl+Shift+Up)` and `kbstyle(Ctrl+Shift+End)` keybindings respectively (`kbstyle(Shift+Cmd+Up)` and `kbstyle(Shift+Cmd+Down)` on macOS).",
    "url": "https://code.visualstudio.com/updates/v1_88#_keyboard-shortcuts-in-notebook-outputs",
    "id": 3711
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Cell error diagnostics  \nAn extension can now provide error details for a failed cell, so that an error diagnostic shows within the cell. While focused on the cell container, `notebook.cell.openFailureActions` (`kb(notebook.cell.openFailureActions)`) jumps to the quick actions menu for that error. The diagnostic only shows when a language model is available to provide quick actions.  \n<video src=\"images/1_88/cell-error-diagnostics.mp4\" title=\"Error diagnostics in cells at failure location\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_cell-error-diagnostics",
    "id": 3712
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Run cells in section  \nTo more easily run related cells in a notebook, you can now run cells that are grouped together by a markdown section header with the **Run Cells in Section** action. This action is available on the notebook Outline view and for Sticky Scroll elements.  \nWithin Sticky Scroll elements, right-click the header of your choice, and run the section via the action in the context menu. Within the Outline view, select the toolbar icon that appears on hover or selection, and then run a single cell or a section of cells via the presented actions.  \n<video src=\"images/1_88/notebook-run-in-section.mp4\" title=\"Run Cells in Section for notebook outline and Sticky Scroll\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_run-cells-in-section",
    "id": 3713
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Filter support in Outline view  \nYou now have filters available in the notebook Outline view, which enable you to control the inclusion of Markdown headers, Code Cells, and Code Cell Symbols. The filters correspond to the following settings:  \n- <code codesetting=\"notebook.outline.showMarkdownHeadersOnly\">notebook.outline.showMarkdownHeadersOnly</code>\n- <code codesetting=\"notebook.outline.showCodeCells\">notebook.outline.showCodeCells</code>\n- <code codesetting=\"notebook.outline.showCodeCellSymbols\">notebook.outline.showCodeCellSymbols</code>  \n<video src=\"images/1_88/notebook-outline-filters.mp4\" title=\"Notebook Outline filter controls.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_88#_filter-support-in-outline-view",
    "id": 3714
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Prompt to save Interactive Window on close  \nBy enabling the <code codesetting=\"interactiveWindow.promptToSaveOnClose\">interactiveWindow.promptToSaveOnClose</code> setting, you are prompted to save the content in an Interactive Window when it is closed, to ensure that you don't lose any work. The only currently supported file format is `.ipynb`.",
    "url": "https://code.visualstudio.com/updates/v1_88#_prompt-to-save-interactive-window-on-close",
    "id": 3715
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### GitHub Copilot  \n#### Inline Chat improvements  \nInline Chat now starts as a floating control, making it more lightweight. After the first request, the control expands to take up more space. We have also adjusted the rendering to be more consistent with other chat experiences, such as the Chat view or Quick Chat.  \n![Inline Chat As Content Widget floating over the editor text](./images/1_88/inline-chat-content.png)\n_Theme: [GitHub Light Colorblind (Beta)](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \nWe've repositioned the rerun and feedback controls, and made the toggle control for viewing diffs more prominent alongside the Accept and Discard buttons.  \n![Screenshot of the Copilot Inline Chat, showing the repositioned controls.](./images/1_88/inline-chat-convo.png)\n_Theme: [GitHub Light Colorblind (Beta)](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \n#### Notebook kernel state as context  \nWhen you are in a notebook, the kernel state (for example, variables and available packages) is now automatically included as context in Inline Chat. This lets Copilot use the current state of the notebook to provide more relevant completions.  \n<video src=\"images/1_88/notebook-kernel-context.mp4\" title=\"Notebook emebeds kernel state in context\" autoplay loop controls muted></video>  \n_Theme: [GitHub Dark](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)_  \n#### Commit message generation improvements  \nTo improve the quality of the generated commit messages, we are now also including the commit messages of the 10 most recent commits in the repository, and the commit messages of the 10 most recent commits of the current user as extra context.  \n#### Workspace creation improvements  \nThe `@workspace /new` command now offers sample projects, curated from GitHub repositories, as suggestions when a suitable match is detected for the chat prompt.  \n![Chat view with @workspace /new that provides a link to a sample project](images/1_88/new-workspace-project-templates.png)  \nThe `@workspace /new` command has also been enhanced to more effectively manage context and history. This enables you to refine suggested workspaces structure and file contents by asking follow-up queries. For example, \"use TypeScript instead of JavaScript\" or \"also add bootstrap\".  \n#### @terminal /explain slash command  \nA new `@terminal /explain` slash command is available, which is optimized for explaining commands or errors. Without `/explain`, `@terminal` is optimized to suggest a fix. This slash command is used in the **Explain using Copilot** quick fix or the **Explain selection** actions.  \n![Using the explain using copilot quick fix will ask copilot \"@terminal /explain #terminalLastCommand\"](images/1_88/copilot-terminal-explain.png)  \n#### Preview: Terminal Inline Chat  \nA preview of the terminal Inline Chat is available in this release, which gives convenient access to Copilot's capabilities directly in the terminal.  \nYou can enable terminal Inline Chat with the <code codesetting=\"terminal.integrated.experimentalInlineChat:true\">terminal.integrated.experimentalInlineChat</code> setting. To invoke the inline chat in a terminal, use the `kb(inlinechat.start)` keybinding.  \n![Opening terminal inline chat will open and focus an input box similar to inline chat in the editor](images/1_88/copilot-terminal-inline.png)  \nThe terminal Inline Chat uses the `@terminal` chat participant, which has context about the integrated terminal's shell and its contents.  \n![You can ask complex questions like \"list the top 5 largest files in the src directory\"](images/1_88/copilot-terminal-inline-query.png)  \nOnce a command is suggested, use `kb(workbench.action.terminal.chat.runCommand)` to run the command in the terminal or `kb(workbench.action.terminal.chat.insertCommand)` to insert the command into the terminal. The command can also be edited directly in Copilot's response before running it (currently `kbstyle(Ctrl+down)`, `kbstyle(Tab)`, `kbstyle(Tab)` on Windows & Linux, `kbstyle(Cmd+down)`, `kbstyle(Tab)`, `kbstyle(Tab)` on macOS).  \n![Complex queries are OS and shell-specific](images/1_88/copilot-terminal-inline-answer.png)  \n#### Clarity on authentication flow  \nClarity around authentication is very important. We want to be clear about how we authenticate and what we ask for. If you open a private repository in VS Code, and we don't have the right authentication for this scenario, we present an authentication dialog. The dialog has a description of why authentication is needed, and a **Learn more** button to find out more about these requirements.  \n![Screenshot of a modal window that's asking to authenticate with GitHub and that contains a Learn more button](images/1_88/learnmoreauth.png)  \nThe **Learn more** button takes you to our [documentation on authentication requirements](https://github.com/microsoft/vscode-copilot-release/blob/a032cf75104a99ca745118ca51ea77219441a898/docs/copilot-repo-scope.md).  \n#### Variable references  \nThe **Used references** section in a chat response gives information about the context that is used. Previously, this section only showed context that was pulled in implicitly. Now, it also shows variables that you mentioned explicitly in the chat prompt, such as `#file` or `#editor`. If a variable is missing from the Used references, it might indicate that it was ignored because it's too large for the context window of the language model.  \n![Screenshot of a chat response, showing the '#file' variable in the Used references section](images/1_88/chat-variable-reference.png)  \n#### Secondary chat submit actions  \nIn the Chat view, the chat submit button now has a dropdown for easy access to more actions.  \n* **Send to @workspace** submits your query to the `@workspace` chat participant, which is useful for questions about the contents of your workspace\n* **Send to New Chat** starts a new empty chat, and then submits the query  \n![Screenshot of the chat submit dropdown options](images/1_88/chat-submit-dropdown.png)  \n#### Scope selection when using `Copilot: Explain This`  \nWhen you use `/explain` without a selection in your active editor, and there are multiple scopes of interest, we've added support for prompting to clarify which symbol or block scope to explain.  \n![Screenshot of the scope selection quick pick when the scope for /explain is unclear](images/1_88/copilot-scope-selection.png)  \nThis behavior is currently opt-in, behind the <code codesetting=\"github.copilot.chat.scopeSelection\">github.copilot.chat.scopeSelection</code> setting.",
    "url": "https://code.visualstudio.com/updates/v1_88#_github-copilot",
    "id": 3716
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Python  \n#### Improved Debug config selection for Flask and Django  \nCreating launch configurations for Flask and Django apps just got easier! Improvements have been made to detect possible startup files in your workspace when creating a `launch.json` for your web app.  \nFor Django, the Python Debugger extension looks for `manage.py` or `app.py` files in the root or a subdirectory one level lower in your workspace. For Flask, the extension looks for `wsgi.py`, `app.py`, or `init.py` files that contain the declaration of a Flask application (for example, `app = Flask()`).  \nIf those files are not found in the project, the dropdown shows a **Default** option for the corresponding project type, even though that file might not be present.  \n#### Hatch environment discovery  \nHatch environments are now discovered and activated by default, similar to other common environments, such as Venv, Conda, and Poetry. Furthermore, in the case of Hatch, where an explicit environment identifier is not registered, the extension is able to determine the environment type (Hatch) from the environment locator.  \n#### Automatic environment selection for pipenv, pyenv, and Poetry projects  \nIf your workspace contains a pipenv, pyenv, or Poetry environment, the corresponding environment is now automatically selected for your workspace. Previously, the extension correctly discovered these environments, but selected the default global interpreter, which required you to manually select the appropriate environment for your workspace.  \nNow, the Python extension infers the activated environment based on the presence of the environment and any corresponding configuration files. For example, in the case of pyenv, the extension looks at the `.python-version` file to automatically select the appropriate interpreter for the workspace.  \n#### Report Issue command improvements  \nThe [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) and [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extensions now make it easier for you to report issues to our repos! If you file an issue with the **Report Issue** command (`workbench.action.openIssueReporter`), most of the heavy lifting is already done, and you're only prompted for some additional info so our team can efficiently triage the problem you are encountering.  \nTo file an issue using the **Help: Report Issue** command for [@vscode-python](https://github.com/microsoft/vscode-python) or [@vscode-python-debugger](https://github.com/microsoft/vscode-python-debugger), choose **Python** or **Python Debugger** respectively from the extension dropdown.",
    "url": "https://code.visualstudio.com/updates/v1_88#_python",
    "id": 3717
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### GitHub Pull Requests  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. New features include:  \n- Outdated comments are displayed differently from current comments in the Comments view.\n- The new `auto` value for <code codesetting=\"githubPullRequests.createDefaultBaseBranch\">githubPullRequests.createDefaultBaseBranch</code> uses the upstream's default branch as the base branch for fork repositories.\n- Comment threads in the Comments view have inline actions (resolve/unresolve and \"Diff Comment with HEAD\" for outdated comments) and context menu actions.  \nReview the [changelog for the 0.86.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0860) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_88#_github-pull-requests",
    "id": 3718
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Jupyter  \n#### Cell execution analysis improvements  \nWith the latest Pylance prerelease, we have better dependency analysis for Jupyter cells. It now understands module imports, which is especially useful when you have a cell that imports a module that was defined in a previous cell.  \n<video src=\"images/1_88/run-precedent-cells.mp4\" autoplay loop controls muted title=\"Run Precedent Cells\"></video>  \nTo enable this feature, install the latest [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) prerelease in VS Code Insiders, and enable the <code codesetting=\"jupyter.executionAnalysis.enabled\">jupyter.executionAnalysis.enabled</code> and <code codesetting=\"notebook.consolidatedRunButton\">notebook.consolidatedRunButton</code> settings.",
    "url": "https://code.visualstudio.com/updates/v1_88#_jupyter",
    "id": 3719
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Extension authoring  \n### Use Issue Reporter command for extension bug reporting  \nLast iteration, we finalized a way for extensions to contribute extra data or templates to fill out when submitting to GitHub via VS Code's Issue Reporter. Extensions can contribute a command, which can be accessed via the **Help: Report Issue...** command. Selecting their extension runs their contributed command. Please review our [issue reporting documentation/release notes](https://code.visualstudio.com/updates/v1_87#_contributing-additional-data-in-issue-reporter) for more information on how this can work with your extension!  \nAdditionally, all installed extensions can be quickly reported on via Quick Open. By typing `issue ` in Quick Open (`kb(workbench.action.quickOpen)`), you can quickly select or search for an installed extension to report on.  \nCertain extensions will start moving over to utilizing this new issue reporting flow and will no longer need custom `Report Issue...` commands that are contributed directly into the command palette.",
    "url": "https://code.visualstudio.com/updates/v1_88#_use-issue-reporter-command-for-extension-bug-reporting",
    "id": 3720
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Preview Features  \n### Rescaling overlapping glyph in the terminal  \nA new setting <code codesetting=\"terminal.integrated.rescaleOverlappingGlyphs\">terminal.integrated.rescaleOverlappingGlyphs</code> is available, which rescales glyphs that overlap following cells. This is intended to cover ambiguous width characters, which might have font glyphs that don't match what the backing pty/unicode version thinks it is. For example, in most fonts the roman numeral unicode characters (`U+2160+`) typically takes up multiple cells, so they are rescaled horizontally when this setting is enabled.  \nWithout rescaling:  \n![Before the glyphs for \u2167 and \u216b depending on the font would always overlap the following cells](images/1_88/terminal-glyphs-before.png)  \nWith rescaling:  \n![After the glyphs for \u2167 and \u216b depending on the font are rescaled horizontally to fit a single cell](images/1_88/terminal-glyphs-after.png)  \nThe rules for when rescaling happens are still being tweaked and we are considering enabling this by default in the future when it's solid. If you try this out and see characters that are being rescaled but should not be, please [create an issue](https://github.com/microsoft/vscode/issues/new/choose).",
    "url": "https://code.visualstudio.com/updates/v1_88#_rescaling-overlapping-glyph-in-the-terminal",
    "id": 3721
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Local workspace extensions  \nWe are excited to introduce this new preview feature that allows you to package an extension directly in your workspace. This feature is designed to cater to your specific workspace needs and provide a more tailored development experience.  \nTo use this feature, you need to package your extension in the `.vscode/extensions` folder within your workspace. VS Code then shows this extension in the **Workspace Recommendations** section of the Extensions view from where users can install it. VS Code installs this extension only for that workspace. It also requires the user to trust the workspace before installing and running this extension.  \nFor instance, consider the `vscode-selfhost-test-provider` extension in the [VS Code repository](https://github.com/microsoft/vscode/tree/main/.vscode/extensions/vscode-selfhost-test-provider). This extension plugs in test capabilities, enabling contributors to view and run tests directly within the workspace. Following screenshot shows the `vscode-selfhost-test-provider` extension in the Workspace Recommendations section of the Extensions view and the ability to install it.  \n![Local Workspace Extension](images/1_88/local-workspace-extension.png)  \nThis feature is available for preview in the [Insiders](https://code.visualstudio.com/insiders/) release via <code codesetting=\"extensions.experimental.supportWorkspaceExtensions\">extensions.experimental.supportWorkspaceExtensions</code>. Try it out and let us know your feedback by creating issues in the [VS Code repository](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_88#_local-workspace-extensions",
    "id": 3722
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Proposed APIs  \n### Terminal shell integration API  \nA new proposed API that enables accessing some of the information provided by shell integration-activated terminals is now available. With this API, it is possible to listen to the incoming data and exit codes of commands being executed in the terminal. It also introduces a more reliable way to execute commands that wait for the prompt to be available, before sending the command which helps fix some conflicts/race conditions that can occur with various shell set ups.  \nHere's an example of using the `Terminal.shellIntegration.executeCommand` proposal:  \n```ts\n// Execute a command in a terminal immediately after being created\nconst myTerm = window.createTerminal();\nwindow.onDidActivateTerminalShellIntegration(async ({ terminal, shellIntegration }) => {\nif (terminal === myTerm) {\nconst command = shellIntegration.executeCommand('echo \"Hello world\"');\nconst code = await command.exitCode;\nconsole.log(`Command exited with code ${code}`);\n}\n}));\n\n// Fallback to sendText if there is no shell integration within 3 seconds of launching\nsetTimeout(() => {\nif (!myTerm.shellIntegration) {\nmyTerm.sendText('echo \"Hello world\"');\n// Without shell integration, we can't know when the command has finished or what the\n// exit code was.\n}\n}, 3000);\n```  \nHere's an example of listening to the data stream of a command:  \n```ts\n// Create a terminal and log all data via console.log\nconst myTerm = window.createTerminal();\nwindow.onDidStartTerminalShellExecution(execution => {\nif (execution.terminal === myTerm) {\nconst stream = execution.createDataStream();\nfor await (const data of stream) {\nconsole.log(data);\n}\n}\n});\n```  \nYou can review the new API [here](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.terminalShellIntegration.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_88#_terminal-shell-integration-api",
    "id": 3723
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Learn More property for authentication API  \nThis iteration, we added a new proposed API that enables you to specify a `learnMore` property in `AuthenticationForceNewSessionOptions`. The idea is that if you call `getSession` with a `forceNewSession` property in the options, you can include a `URI` that would be presented to the user to learn more about why you're asking for authentication. Here's an example of what that looks like:  \n![Screenshot of a modal window that's asking to authenticate with GitHub and that contains a Learn more button](images/1_88/learnmoreauth.png)  \nHere's what that looks like in code:  \n```ts\nvscode.authentication.getSession('github', ['repo'], {\nforceNewSession: {\ndetail: l10n.t('To show you more relevant Copilot Chat results, we need permission to read the contents of your repository on GitHub.'),\nlearnMore: Uri.parse('https://aka.ms/copilotRepoScope')\n};\n});\n```  \nYou can review the new API [here](https://github.com/microsoft/vscode/blob/038cbaa25d4c61c4c76e50e299a72a055466e745/src/vscode-dts/vscode.proposed.authLearnMore.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_88#_learn-more-property-for-authentication-api",
    "id": 3724
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Outdated comments  \nThe new comment thread `applicability` property lets comment threads be marked as outdated in the Comments view:  \n![Outdated comment in the Comments view](images/1_88/outdated-comment.png)  \nYou can see the API proposal [here](https://github.com/microsoft/vscode/blob/6e62970b0566796d6cfd2b28722e0ccd32cd3af2/src/vscode-dts/vscode.proposed.commentThreadApplicability.d.ts#L16-L30).",
    "url": "https://code.visualstudio.com/updates/v1_88#_outdated-comments",
    "id": 3725
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Comment view menus  \nThe `commentsView/commentThread/context` proposed menu enables actions to be added to the right-click context menu of a comment thread in the Comments view. The usual `inline` group is also respected, so that actions are shown in the Comments view inline.  \n![Example of an inline action in the Comments view](images/1_88/inline-action-comments-view.png)",
    "url": "https://code.visualstudio.com/updates/v1_88#_comment-view-menus",
    "id": 3726
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n## Engineering  \n### Electron 28 update  \nIn this iteration, we are promoting the Electron 28 update to users on our stable release. This update comes with Chromium 120.0.6099.291 and Node.js 18.18.2. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.",
    "url": "https://code.visualstudio.com/updates/v1_88#_electron-28-update",
    "id": 3727
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@the-coder-o (Abdul basit)](https://github.com/the-coder-o)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_88#_issue-tracking",
    "id": 3728
  },
  {
    "content": "Learn what is new in the Visual Studio Code March 2024 Release (1.88)  \n### Pull requests  \nContributions to `vscode`:  \n* [@333fred (Fred Silberberg)](https://github.com/333fred): Do not trim whitespace when part of strings or regexes [PR #198164](https://github.com/microsoft/vscode/pull/198164)\n* [@89netraM (M\u00e5rten \u00c5sberg)](https://github.com/89netraM): Render final line number for interval setting [PR #207227](https://github.com/microsoft/vscode/pull/207227)\n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart)\n* Stop the cursor from jumping when changing prefix in QuickAccess - v2 [PR #204702](https://github.com/microsoft/vscode/pull/204702)\n* Export ILocalizedString in nls.mock.ts [PR #206449](https://github.com/microsoft/vscode/pull/206449)\n* [@akbyrd (Adam Byrd)](https://github.com/akbyrd)\n* Implement separate colors for primary and secondary cursors when multiple cursors are present [PR #181991](https://github.com/microsoft/vscode/pull/181991)\n* Change editor.action.focusNextCursor to reveal the primary cursor instead of all cursors [PR #182148](https://github.com/microsoft/vscode/pull/182148)\n* [@AndreasBackx (Andreas Backx)](https://github.com/AndreasBackx): Fix smooth scrolling Linux Wayland. [PR #205122](https://github.com/microsoft/vscode/pull/205122)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch): [typescript-language-features] Fix autoImportFileExcludePatterns format to work on Windows [PR #202762](https://github.com/microsoft/vscode/pull/202762)\n* [@andyscho (Andy Schoenberger)](https://github.com/andyscho): Only one subscriber for kernels for onDidChangeSelectedNotebooks [PR #204417](https://github.com/microsoft/vscode/pull/204417)\n* [@BABA983 (BABA)](https://github.com/BABA983): Better testing side bar retried color [PR #207949](https://github.com/microsoft/vscode/pull/207949)\n* [@BrandonXLF (Brandon Fowler)](https://github.com/BrandonXLF): Override CSS content for terminal tab image icons [PR #207220](https://github.com/microsoft/vscode/pull/207220)\n* [@BrookMaoDev (Brook Mao)](https://github.com/BrookMaoDev): Improved description for editor.useTabStops setting [PR #206552](https://github.com/microsoft/vscode/pull/206552)\n* [@btwiuse](https://github.com/btwiuse): cli: add --server-base-path flag to `code serve-web` command [PR #207932](https://github.com/microsoft/vscode/pull/207932)\n* [@BusinessDuck (Dmitriy Yurov)](https://github.com/BusinessDuck): Fix 'e.getModifierState is not a function' error for browser auto filled form events [PR #206883](https://github.com/microsoft/vscode/pull/206883)\n* [@cchanche (Cl\u00e9ment Chanchevrier)](https://github.com/cchanche): Resize terminal direction [PR #205015](https://github.com/microsoft/vscode/pull/205015)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr)\n* Fix keyboard layout detection [PR #205193](https://github.com/microsoft/vscode/pull/205193)\n* Fix fullscreen container dimension detection when not directly on body [PR #205884](https://github.com/microsoft/vscode/pull/205884)\n* [@cpendery (Chapman Pendery)](https://github.com/cpendery)\n* fix: terminal suggestions to sort by fuzzy score [PR #208486](https://github.com/microsoft/vscode/pull/208486)\n* fix: don't show terminal suggestions when keybindings are sent through to shell [PR #208523](https://github.com/microsoft/vscode/pull/208523)\n* fix: suggest widget persisting on completion acceptance [PR #208524](https://github.com/microsoft/vscode/pull/208524)\n* [@deyihu (hu de yi)](https://github.com/deyihu): editor paste event result return ClipboardEvent [PR #192732](https://github.com/microsoft/vscode/pull/192732)\n* [@dgileadi (David Gileadi)](https://github.com/dgileadi): Introduce minimap section headers, a la Xcode [PR #190759](https://github.com/microsoft/vscode/pull/190759)\n* [@futurist (James Yang)](https://github.com/futurist): feat: add ipcLogger and timeoutDelay for IPCServer [PR #193896](https://github.com/microsoft/vscode/pull/193896)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Make channel log level settable from output view [PR #205159](https://github.com/microsoft/vscode/pull/205159)\n* [@harbin1053020115 (ermin.zem)](https://github.com/harbin1053020115): fix: Select first extension walkthrough for first launch if no built-in walkthroughs present. [PR #207303](https://github.com/microsoft/vscode/pull/207303)\n* [@hickford (M Hickford)](https://github.com/hickford): Sort lines: sort all lines if nothing selected. [PR #200325](https://github.com/microsoft/vscode/pull/200325)\n* [@hsfzxjy (Xie Jingyi)](https://github.com/hsfzxjy)\n* Fix setting editor list item overflow [PR #206681](https://github.com/microsoft/vscode/pull/206681)\n* Add log point on middle clicking gutter [PR #206684](https://github.com/microsoft/vscode/pull/206684)\n* [@IncognitaDev (Luis Sousa)](https://github.com/IncognitaDev): Feat: Add PascalCase to CaseActions [PR #206259](https://github.com/microsoft/vscode/pull/206259)\n* [@its-miroma (Miroma)](https://github.com/its-miroma): Change default YAML extension [PR #206447](https://github.com/microsoft/vscode/pull/206447)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fixes breadcrumbs widget does not get resized properly [PR #200591](https://github.com/microsoft/vscode/pull/200591)\n* [@jeremy-rifkin (Jeremy Rifkin)](https://github.com/jeremy-rifkin): Expand monarch functionality to allow state access within rules [PR #183463](https://github.com/microsoft/vscode/pull/183463)\n* [@jhasse (Jan Niklas Hasse)](https://github.com/jhasse): Use indentSize instead of tabSize for LineCommentCommand [PR #193811](https://github.com/microsoft/vscode/pull/193811)\n* [@Krzysztof-Cieslak (Krzysztof Cie\u015blak)](https://github.com/Krzysztof-Cieslak)\n* Fix off-by-one error in rendering removals in inline edits [PR #205890](https://github.com/microsoft/vscode/pull/205890)\n* Inline edit - make sure we cancel in-progress request on blur [PR #206430](https://github.com/microsoft/vscode/pull/206430)\n* Inline Edit - make sure we finalize accepting before requesting new edit [PR #206525](https://github.com/microsoft/vscode/pull/206525)\n* [@lusingander (Kyosuke Fujimoto)](https://github.com/lusingander): Fix broken description of `editor.cursorSurroundingLinesStyle` setting [PR #201482](https://github.com/microsoft/vscode/pull/201482)\n* [@mahmoudsalah1993 (Mahmoud Salah)](https://github.com/mahmoudsalah1993): for diff editors, resolve the modified editor to allow run tests in c\u2026 [PR #206026](https://github.com/microsoft/vscode/pull/206026)\n* [@marrej (Marcus Revaj)](https://github.com/marrej): # Add partial accept kind to inline completion handle [PR #202668](https://github.com/microsoft/vscode/pull/202668)\n* [@mkasenberg](https://github.com/mkasenberg): searchEditor: Add option to peek with a single click [PR #204413](https://github.com/microsoft/vscode/pull/204413)\n* [@mroch (Marshall Roch)](https://github.com/mroch): fix \"Extension [object Object] is not known\" [PR #207764](https://github.com/microsoft/vscode/pull/207764)\n* [@NriotHrreion (NoahHrreion)](https://github.com/NriotHrreion): Fix the unexpected position of hover widgets [PR #205502](https://github.com/microsoft/vscode/pull/205502)\n* [@orgads (Orgad Shaneh)](https://github.com/orgads)\n* Tunnel: Extend port mapping lookup also for querystring (take 2) [PR #204807](https://github.com/microsoft/vscode/pull/204807)\n* Tunnel: Re-add unit tests for port mapping [PR #207249](https://github.com/microsoft/vscode/pull/207249)\n* [@PmcFizz (Fizz)](https://github.com/PmcFizz): Update IActionDescriptor.precondition  desc [PR #176124](https://github.com/microsoft/vscode/pull/176124)\n* [@raphaelgpalma (Raphael Palma)](https://github.com/raphaelgpalma): Fix grammatical error: 'But allow them if the are made from inside an\u2026' [PR #207584](https://github.com/microsoft/vscode/pull/207584)\n* [@rehmsen (Ole)](https://github.com/rehmsen): Log `resource` telemetry also for side-by-side views on browsers. [PR #208196](https://github.com/microsoft/vscode/pull/208196)\n* [@russelldavis (Russell Davis)](https://github.com/russelldavis): Fix decreaseIndentPattern for javascript and typescript [PR #201425](https://github.com/microsoft/vscode/pull/201425)\n* [@samdenty (Sam Denty)](https://github.com/samdenty): feat(web/lifecycleService): correct startupKind [PR #206563](https://github.com/microsoft/vscode/pull/206563)\n* [@Sidebail (VLADIMIR VATSURIN)](https://github.com/Sidebail): Fix file relative path link [PR #181475](https://github.com/microsoft/vscode/pull/181475)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): fix: memory leak in notebook baseCellViewModel [PR #205499](https://github.com/microsoft/vscode/pull/205499)\n* [@solimant](https://github.com/solimant): Honor GitHub brand name casing [PR #208503](https://github.com/microsoft/vscode/pull/208503)\n* [@thegecko (Rob Moran)](https://github.com/thegecko): Update extensionPaths when web extension host started [PR #193849](https://github.com/microsoft/vscode/pull/193849)\n* [@vinistock (Vinicius Stock)](https://github.com/vinistock): Fix accidental dedent for `in` and `when` dedent in Ruby comments [PR #206132](https://github.com/microsoft/vscode/pull/206132)\n* [@yamachu (Yusuke Yamada)](https://github.com/yamachu): Fixed to show files in deepest directory in search results [PR #206609](https://github.com/microsoft/vscode/pull/206609)\n* [@Yesterday17 (Yesterday17)](https://github.com/Yesterday17): Dispatch GestureEvent in node depth order [PR #200612](https://github.com/microsoft/vscode/pull/200612)\n* [@yiliang114 (\u6613\u826f)](https://github.com/yiliang114): Fix Copy/Cut command not working in webview [PR #206529](https://github.com/microsoft/vscode/pull/206529)\n* [@yutotnh (yutotnh)](https://github.com/yutotnh): Add support for recognizing word locales in word operations (#50045) [PR #203605](https://github.com/microsoft/vscode/pull/203605)  \nContributions to `vscode-css-languageservice`:  \n* [@balaji-sivasakthi (Balaji Sivasakthi)](https://github.com/balaji-sivasakthi): feat: support hover tooltip for scss [PR #367](https://github.com/microsoft/vscode-css-languageservice/pull/367)  \nContributions to `vscode-eslint`:  \n* [@JoshuaKGoldberg (Josh Goldberg \u2728)](https://github.com/JoshuaKGoldberg): feat: support json, json5, jsonc in eslint.probe setting [PR #1787](https://github.com/microsoft/vscode-eslint/pull/1787)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing)\n* Support probing MDX [PR #1794](https://github.com/microsoft/vscode-eslint/pull/1794)\n* Support probing Astro [PR #1795](https://github.com/microsoft/vscode-eslint/pull/1795)  \nContributions to `vscode-extension-samples`:  \n* [@juliankasimir (Julian Kasimir)](https://github.com/juliankasimir): feat(lang): replace German with English in showQuickPick function [PR #983](https://github.com/microsoft/vscode-extension-samples/pull/983)  \nContributions to `vscode-hexeditor`:  \n* [@jogo-](https://github.com/jogo-): Update CHANGELOG.md [PR #495](https://github.com/microsoft/vscode-hexeditor/pull/495)  \nContributions to `vscode-js-debug`:  \n* [@Beanyy](https://github.com/Beanyy): Fix formatting of number 0 in remote object when description is not set [PR #1968](https://github.com/microsoft/vscode-js-debug/pull/1968)\n* [@mdh1418 (Mitchell Hwang)](https://github.com/mdh1418): [CDP] Send telemetry for DotnetDebugger error event [PR #1961](https://github.com/microsoft/vscode-js-debug/pull/1961)\n* [@relief-melone (Relief.Melone)](https://github.com/relief-melone): added proxy support for build [PR #1965](https://github.com/microsoft/vscode-js-debug/pull/1965)  \nContributions to `vscode-json-languageservice`:  \n* [@denisw (Denis Washington)](https://github.com/denisw): Fix sorting error in case of nested trailing comma [PR #223](https://github.com/microsoft/vscode-json-languageservice/pull/223)  \nContributions to `vscode-pull-request-github`:  \n* [@ipcjs (ipcjs)](https://github.com/ipcjs): fix: make `review.openLocalFile` support triggering from the keyboard. [PR #5840](https://github.com/microsoft/vscode-pull-request-github/pull/5840)\n* [@mohamedamara1 (Mohamed Amara)](https://github.com/mohamedamara1): fixed ID of IssueOverviewPanel [PR #5822](https://github.com/microsoft/vscode-pull-request-github/pull/5822)  \nContributions to `vscode-pylint`:  \n* [@MGasiewski](https://github.com/MGasiewski): Add logic to replace tilde with home environment [PR #524](https://github.com/microsoft/vscode-pylint/pull/524)  \nContributions to `vscode-python-debugger`:  \n* [@bersbersbers](https://github.com/bersbersbers): Update `launch.json` schema [PR #243](https://github.com/microsoft/vscode-python-debugger/pull/243)\n* [@StephanTLavavej (Stephan T. Lavavej)](https://github.com/StephanTLavavej): Fix typos [PR #217](https://github.com/microsoft/vscode-python-debugger/pull/217)  \nContributions to `debug-adapter-protocol`:  \n* [@andyw8 (Andy Waite)](https://github.com/andyw8): Update adapters list for Ruby LSP [PR #471](https://github.com/microsoft/debug-adapter-protocol/pull/471)\n* [@svaante (Daniel Pettersson)](https://github.com/svaante): Add Emacs dape package to Implementations tools section [PR #469](https://github.com/microsoft/debug-adapter-protocol/pull/469)  \nContributions to `inno-updater`:  \n* [@ChayimFriedman2 (Chayim Refael Friedman)](https://github.com/ChayimFriedman2): Remove unneeded `unsafe impl Send` [PR #25](https://github.com/microsoft/inno-updater/pull/25)  \nContributions to `language-server-protocol`:  \n* [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721)\n* add lsp [PR #1907](https://github.com/microsoft/language-server-protocol/pull/1907)\n* add basedpyright [PR #1913](https://github.com/microsoft/language-server-protocol/pull/1913)\n* [@iliaamiri (Ilia Abedianamiri)](https://github.com/iliaamiri): A small typo in the summary paragraph [PR #1903](https://github.com/microsoft/language-server-protocol/pull/1903)\n* [@lukaskesch (Lukas Kesch)](https://github.com/lukaskesch): Updating copyright year to 2024 in footer.html [PR #1909](https://github.com/microsoft/language-server-protocol/pull/1909)\n* [@MariaSolOs (Maria Jos\u00e9 Solano)](https://github.com/MariaSolOs): Specification for MarkupContent support in diagnostic messages [PR #1905](https://github.com/microsoft/language-server-protocol/pull/1905)\n* [@oliviacrain (Olivia Crain)](https://github.com/oliviacrain): Remove server entry for rnix-lsp [PR #1902](https://github.com/microsoft/language-server-protocol/pull/1902)  \nContributions to `monaco-editor`:  \n* [@jeremy-rifkin (Jeremy Rifkin)](https://github.com/jeremy-rifkin): Fix bug with highlighting of C++ raw string literals [PR #4436](https://github.com/microsoft/monaco-editor/pull/4436)  \nContributions to `node-pty`:  \n* [@kkocdko (kkocdko)](https://github.com/kkocdko)\n* chore: remove deprecated api `process.binding` [PR #653](https://github.com/microsoft/node-pty/pull/653)\n* fix: upgrade node-gyp to fix macOS build error [PR #673](https://github.com/microsoft/node-pty/pull/673)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_88#_pull-requests",
    "id": 3729
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Improved editor accessibility signals  \nThere are now separate accessibility signals for when a line has an error or warning, or when the cursor is on an error or warning.  \nWe support customizing the delay of accessibility signals when navigating between lines and columns in the editor separately. Also, aria alert signals have a higher delay before playing them than audio cue signals.  \nInline suggestions no longer trigger an accessibility signal while the suggest control is shown.",
    "url": "https://code.visualstudio.com/updates/v1_89#_improved-editor-accessibility-signals",
    "id": 3730
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Accessible View  \nThe Accessible View (`kb(editor.action.accessibleView)`) enables screen reader users to inspect workbench features.  \n#### Terminal improvements  \nNow, when you navigate to the next (`kb(workbench.action.terminal.accessibleBufferGoToNextCommand)`) or previous (`kb(workbench.action.terminal.accessibleBufferGoToPreviousCommand)`) command in the terminal Accessible View, you can hear if the current command failed. This functionality can be toggled with the setting <code codesetting='accessibility.signals.terminalCommandFailed'>accessibility.signals.terminalCommandFailed</code>.  \nWhen this view is opened from a terminal with shell integration enabled, VS Code alerts with the terminal command line for an improved experience.  \n#### Chat code block navigation  \nWhen you're in the Accessible View for a chat response, you can now navigate between next (`kb(editor.action.accessibleViewNextCodeBlock)`) and previous (`kb(editor.action.accessibleViewPreviousCodeBlock)`) code blocks.  \n#### Comments view  \nWhen there is an extension installed that is providing comments and the Comments view is focused, you can inspect and navigate between the comments in the view from within the Accessible View. Extension-provided actions that are available on the comments can also be executed from the Accessible View.",
    "url": "https://code.visualstudio.com/updates/v1_89#_accessible-view",
    "id": 3731
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Workbench  \n### Language model usage reporting  \nFor extensions that use the language model, you can now track their language model usage in the Extension Editor and Runtime Extensions Editor. For example, you can view the number of language model requests, as demonstrated for the Copilot Chat extension in the following screenshot:  \n![Screenshot of the Runtime Status for the Copilot Chat extension, showing the number of language model requests.](images/1_89/language-models-usage.png)",
    "url": "https://code.visualstudio.com/updates/v1_89#_language-model-usage-reporting",
    "id": 3732
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Local workspace extensions  \nLocal workspace extensions, first introduced in the [VS Code 1.88 release](https://code.visualstudio.com/updates/v1_88#_local-workspace-extensions), is generally available. You can now include an extension directly in your workspace and install it only for that workspace. This feature is designed to cater to your specific workspace needs and provide a more tailored development experience.  \nTo use this feature, you need to have your extension in the `.vscode/extensions` folder within your workspace. VS Code then shows this extension in the **Workspace Recommendations** section of the Extensions view, from where users can install it. VS Code installs this extension only for that workspace. A local workspace extension requires the user to trust the workspace before installing and running this extension.  \nFor instance, consider the `vscode-selfhost-test-provider` extension in the [VS Code repository](https://github.com/microsoft/vscode/tree/main/.vscode/extensions/vscode-selfhost-test-provider). This extension plugs in test capabilities, enabling contributors to view and run tests directly within the workspace. Following screenshot shows the `vscode-selfhost-test-provider` extension in the Workspace Recommendations section of the Extensions view and the ability to install it.  \n![Screenshot showing a local workspace extension available in the .vscode folder in the Explorer view.](images/1_89/local-workspace-extension.png)  \nNote that you should include the unpacked extension in the `.vscode/extensions` folder and not the `VSIX` file. You can also include only sources of the extension and build it as part of your workspace setup.",
    "url": "https://code.visualstudio.com/updates/v1_89#_local-workspace-extensions",
    "id": 3733
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Custom Editor Labels in Quick Open  \nLast month, we introduced [custom labels](https://code.visualstudio.com/docs/getstarted/userinterface#_customize-tab-labels), which let you personalize the labels of your editor tabs. This feature is designed to help you more easily distinguish between tabs for files with the same name, such as `index.tsx` files.  \nBuilding on that, we've extended the use of custom labels to Quick Open (`kb(workbench.action.quickOpen)`). Now, you can search for your files using the custom labels you've created, making file navigation more intuitive.  \n![Screenshot showing the use of custom labels in Quick Open to distinguish between multiple 'index.jsx' files.](images/1_89/custom-labels-quick-open.png)",
    "url": "https://code.visualstudio.com/updates/v1_89#_custom-editor-labels-in-quick-open",
    "id": 3734
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Customize keybindings  \nWe've made it more straightforward to customize keybindings for user interface actions. Right-click on any action item in your workbench, and select **Customize Keybinding**. If the action has a `when` clause, it's automatically included, making it easier to set up your keybindings just the way you need them.  \n<video src=\"images/1_89/customize-keybinding.mp4\" title=\"Video that shows how to customize the keybinding for the split editor action.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_89#_customize-keybindings",
    "id": 3735
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Find in trees keybinding  \nWe have addressed an issue where the Find control was frequently being opened unintentionally for a tree control. For example, when the Find control appears in the Explorer view instead of searching in the editor.  \nTo reduce these accidental activations, we have changed the default keybinding for opening the Find control in a tree control to `kb(list.find)`. If you prefer the previous setup, you can easily revert to the original keybinding for the `list.find` command using the Keyboard Shortcuts editor.",
    "url": "https://code.visualstudio.com/updates/v1_89#_find-in-trees-keybinding",
    "id": 3736
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Auto detect system color mode improvements  \nIf you wanted your theme to follow the color mode of your system, you could already do this by enabling the setting <code codesetting=\"window.autoDetectColorScheme:true\">window.autoDetectColorScheme</code>.  \nWhen enabled, the current theme is defined by the <code codesetting=\"workbench.preferredDarkColorTheme\">workbench.preferredDarkColorTheme</code> setting when in dark mode, and the <code codesetting=\"workbench.preferredLightColorTheme\">workbench.preferredLightColorTheme</code> setting when in light mode.  \nIn that case, the <code codesetting=\"workbench.colorTheme\">workbench.colorTheme</code> setting is then no longer considered. It is only used when <code codesetting=\"window.autoDetectColorScheme\">window.autoDetectColorScheme</code> is off.  \nIn this milestone, what's new is that the theme picker dialog (**Preferences: Color Theme** command) is now aware of the system color mode. Notice how the theme selection only shows dark themes when the system in in dark mode:  \n![Screenshot showing the theme selection dialog configuring the theme for Dark mode.](images/1_89/configuring_dark_mode.png)  \nThe dialog also has a new button to directly take you to the <code codesetting=\"window.autoDetectColorScheme\">window.autoDetectColorScheme</code> setting:  \n![Screenshot showing the theme selection dialog, highlighting the button to configure the autoDetectColorScheme setting.](images/1_89/configure-detect-mode.png)",
    "url": "https://code.visualstudio.com/updates/v1_89#_auto-detect-system-color-mode-improvements",
    "id": 3737
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Paste Markdown links in comments  \nIn the input editor of the Comments control, pasting a link has the same behavior as pasting a link in a Markdown file. The paste options are shown and you can choose to paste a Markdown link instead of the raw link that you copied.  \n![Screenshot of Comments control, showing the paste link context menu.](images/1_89/paste-markdown-link-comment.png)",
    "url": "https://code.visualstudio.com/updates/v1_89#_paste-markdown-links-in-comments",
    "id": 3738
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Source Control  \n### Save/restore open editors when switching branches  \nThis milestone, we have addressed a long-standing feature request to save and restore editors when switching between source control branches. Use the <code codesetting=\"scm.workingSets.enabled:true\">scm.workingSets.enabled</code> setting to enable this feature.  \nTo control the open editors when switching to a branch for the first time, you can use the <code codesetting=\"scm.workingSets.default\">scm.workingSets.default</code> setting. You select to have no open editors (`empty`), or to use the currently opened editors (`current`, the default value).",
    "url": "https://code.visualstudio.com/updates/v1_89#_save/restore-open-editors-when-switching-branches",
    "id": 3739
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Dedicated commands for viewing changes  \nTo make it easier to view specific types of changes in the multi-file diff editor, we have added a set of new commands to the command palette: **Git: View Staged Changes**, **Git: View Changes**, and **Git: View Untracked Changes**.",
    "url": "https://code.visualstudio.com/updates/v1_89#_dedicated-commands-for-viewing-changes",
    "id": 3740
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Notebooks  \n### Minimal error renderer  \nYou can use a new layout for the notebook error renderer with the setting <code codesetting=\"notebook.output.minimalErrorRendering:true\">notebook.output.minimalErrorRendering</code>. This new layout only displays the error and message, and a control to expand the full error stack into view.  \n<video src=\"images/1_89/minimal-notebook-errors.mp4\" title=\"Minimal notebook error renderer demo\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_89#_minimal-error-renderer",
    "id": 3741
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Disabled backups for large notebooks  \nPeriodic file backups are now disabled for large notebook files to reduce the amount of time spent writing the file to disk. The limit can be adjusted with the setting `notebook.backup.sizeLimit`. We are also experimenting with an option to avoid blocking the renderer while saving the notebook file with <code codesetting=\"notebook.experimental.remoteSave:true\">notebook.experimental.remoteSave</code>, so that auto-saves can occur without a performance penalty.",
    "url": "https://code.visualstudio.com/updates/v1_89#_disabled-backups-for-large-notebooks",
    "id": 3742
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Fix for outline/sticky scroll performance regressions  \nOver the past few months, we have received feedback about performance regressions in the notebook editor. The regressions are difficult to pinpoint and not easily reproducible. Thanks to the community for continuously providing logs and feedback, we could identify that the regressions are coming from the outline and sticky scroll features as we added new features to them. The issues have been fixed in this release.  \nWe appreciate the community's feedback and patience, and we continue to improve Notebook Editor's performance. If you continue to experience performance issues, please don't hesitate to file a new issue in the [VS Code repo](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_89#_fix-for-outline/sticky-scroll-performance-regressions",
    "id": 3743
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Search  \n### Quick Search  \nQuick Search enables you to quickly perform a text search across your workspace files. Quick Search is no longer experimental, so give it a try by using the **Search: Quick Search** command in the Command Palette (`kb(workbench.action.showCommands)`)! \u2728\ud83d\udd0d  \n<video src=\"images/1_89/quick-search.mp4\" title=\"Quick Search demo\" autoplay loop controls muted></video>\n_Theme: [Night Owl Light](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl) (preview on [vscode.dev](https://vscode.dev/editor/theme/sdras.night-owl))_  \nNote that all Quick Search commands and settings no longer have the \"experimental\" keyword in their identifier. For example, the command ID `workbench.action.experimental.quickTextSearch` became `workbench.action.quickTextSearch`. This might be relevant if you have settings or keybindings that use these old IDs.",
    "url": "https://code.visualstudio.com/updates/v1_89#_quick-search",
    "id": 3744
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Search tree recursive expansion  \nWe have a new context menu option that enables you to recursively open a selected tree node in the search tree.  \n<video src=\"images/1_89/search-tree-recurse-open.mp4\" title=\"Recursively open search tree nodes\" autoplay loop controls muted></video>\n_Theme: [Night Owl Light](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl) (preview on [vscode.dev](https://vscode.dev/editor/theme/sdras.night-owl))_",
    "url": "https://code.visualstudio.com/updates/v1_89#_search-tree-recursive-expansion",
    "id": 3745
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Terminal  \n### Git Bash shell integration enabled by default  \nShell integration for Git Bash is now [automatically enabled](https://code.visualstudio.com/docs/terminal/shell-integration#_automatic-script-injection). This brings many features to Git Bash, such as [command navigation](https://code.visualstudio.com/docs/terminal/shell-integration#_command-navigation), [sticky scroll](https://code.visualstudio.com/docs/terminal/shell-integration#_sticky-scroll), [quick fixes](https://code.visualstudio.com/docs/terminal/shell-integration#_quick-fixes), and more.",
    "url": "https://code.visualstudio.com/updates/v1_89#_git-bash-shell-integration-enabled-by-default",
    "id": 3746
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Configure middle click to paste  \nOn most Linux distributions, middle-click pastes the selection. Similar behavior can now be enabled on other operating systems by configuring `terminal.integrated.middleClickBehavior` to `paste`, which pastes the regular clipboard content on middle-click.",
    "url": "https://code.visualstudio.com/updates/v1_89#_configure-middle-click-to-paste",
    "id": 3747
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Expanded ANSI hyperlink support  \nANSI hyperlinks made via the [OSC 8 escape sequence](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda) previously supported only `http` and `https` protocols but now work with any protocol. By default, only links with the  `file`, `http`, `https`, `mailto`, `vscode` and `vscode-insiders` protocols activate for security reasons, but you can add more via the `terminal.integrated.allowedLinkSchemes` setting.",
    "url": "https://code.visualstudio.com/updates/v1_89#_expanded-ansi-hyperlink-support",
    "id": 3748
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### New icon picker for the terminal  \nSelecting the change icon from the terminal tab context menu now opens the new icon picker that was built for profiles:  \n![Screenshot showing the new icon picker shows a preview and the id of the icon as well as a filter box](images/1_89/terminal-icon-picker.png)  \n_Theme: [Sapphire](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-sapphire) (preview on [vscode.dev](https://vscode.dev/editor/theme/Tyriar.theme-sapphire))_",
    "url": "https://code.visualstudio.com/updates/v1_89#_new-icon-picker-for-the-terminal",
    "id": 3749
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Support for window size reporting  \nThe terminal now responds to the following escape sequence requests:  \n- `CSI 14 t` to report the terminal's window size in pixels\n- `CSI 16 t` to report the terminal's cell size in pixels\n- `CSI 18 t` to report the terminal's window size in characters",
    "url": "https://code.visualstudio.com/updates/v1_89#_support-for-window-size-reporting",
    "id": 3750
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### \u26a0\ufe0f Deprecation of the canvas renderer  \nThe terminal features three different renderers: the DOM renderer, the WebGL renderer, and the canvas renderer. We have wanted to remove the canvas renderer for some time but were blocked by unacceptable performance in the DOM renderer and WebKit not implementing `webgl2`. Both of these issues have now been resolved!  \nThis release, we removed the canvas renderer from the fallback chain so it's only enabled when the `terminal.integrated.gpuAcceleration` setting is explicitly set to `\"canvas\"`. We plan to remove the canvas renderer entirely in the next release. Please let us know if you have issues when `terminal.integrated.gpuAcceleration` is set to both `\"on\"` or `\"off\"`.",
    "url": "https://code.visualstudio.com/updates/v1_89#_\u26a0\ufe0f-deprecation-of-the-canvas-renderer",
    "id": 3751
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Debug  \n### JavaScript Debugger  \nThe JavaScript debugger now automatically looks for binaries that appear in the `node_modules/.bin` folder in the `runtimeExecutable` configuration. Now, it resolves them by name automatically.  \nNotice in the following example that you can just reference `mocha`, without having to specify the full path to the binary.  \n```diff\n{\n\"name\": \"Run Tests\",\n\"type\": \"node\",\n\"request\": \"launch\",\n-\"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/mocha\",\n-\"windows\": {\n-\"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/mocha.cmd\"\n-},\n+\"runtimeExecutable\": \"mocha\",\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_89#_javascript-debugger",
    "id": 3752
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Languages  \n### Image previews in Markdown path completions  \nVS Code's built-in Markdown tooling provides path completions for links and images in your Markdown. When completing a path to an image or video file, we now show a small preview directly in the [completion details](https://code.visualstudio.com/docs/editor/intellisense#intellisense-features). This can help you find the image or video you're after more easily.  \n![Screenshot showing a preview of an image in Markdown path completions](images/1_89/md-path-completion-preview.png)",
    "url": "https://code.visualstudio.com/updates/v1_89#_image-previews-in-markdown-path-completions",
    "id": 3753
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Hover to preview images and videos in Markdown  \nWant a quick preview of an image or video in some Markdown without opening the full [Markdown preview](https://code.visualstudio.com/docs/languages/markdown#markdown-preview)? Now you can hover over an image or video path to see a small preview of it:  \n![Screenshot showing hovering over an image's path to preview it](images/1_89/md-hover-preview.png)",
    "url": "https://code.visualstudio.com/updates/v1_89#_hover-to-preview-images-and-videos-in-markdown",
    "id": 3754
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Improved Markdown header renaming  \nDid you know that VS Code's built-in Markdown support lets you rename headers using `kbstyle(F2)`? This is useful because it also [automatically updates all links to that header](https://code.visualstudio.com/docs/languages/markdown#rename-headers-and-links). This iteration, we improved handling of renaming in cases where a Markdown file has duplicated headers.  \nConsider the Markdown file:  \n```md\n# Readme\n- [Example 1](#example)\n- [Example 2](#example-1)\n\n## Example\n...\n\n## Example\n...\n```  \nThe two `## Example` headers have the same text but can each be linked to individually by using a unique ID (`#example` and `#example-1`). Previously, if you renamed the first `## Example` header to `## First Example`, the `#example` link would be correctly changed to `#first-example` but the `#example-1` link would not be changed. However, `#example-1` is no longer a valid link after the rename because there are no longer duplicated `## Example` headers.  \nWe now correctly handle this scenario. If you rename the first `## Example` header to `## First Example` in the document above for instance, the new document will be:  \n```md\n# Readme\n- [Example 1](#first-example)\n- [Example 2](#example)\n\n## First Example\n...\n\n## Example\n...\n```  \nNotice how both links have now been automatically updated, so that they both remain valid!",
    "url": "https://code.visualstudio.com/updates/v1_89#_improved-markdown-header-renaming",
    "id": 3755
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Python  \n#### \"Implement all inherited abstract classes\" code action  \nWorking with abstract classes is now easier when using Pylance. When defining a new class that inherits from an abstract one, you can now use the **Implement all inherited abstract classes** code action to automatically implement all abstract methods and properties from the parent class:  \n<video src=\"images/1_89/pylance-implement-abstract-classes.mp4\" title=\"Implement all inherited abstract classes code action from Pylance.\" autoplay loop controls muted></video>\n_Theme: [Catppuccin Macchiato](https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc) (preview on [vscode.dev](https://vscode.dev/editor/theme/Catppuccin.catppuccin-vsc/Catppuccin%20Macchiato))_  \n#### New auto indentation setting  \nPreviously, Pylance's auto indentation behavior was controlled through the <code codesetting='editor.formatOnType'>editor.formatOnType</code> setting, which used to be problematic if you wanted to disable auto indentation, but enable format on type with other supported tools. To solve this problem, Pylance has its own setting to control its auto indentation behavior: <code codesetting='python.analysis.autoIndent'>python.analysis.autoIndent</code>, which is enabled by default.  \n![Screenshot showing Python Analysis Auto Indent setting to control auto indentation with Pylance](images/1_89/pylance-auto-indent-setting.png)  \n#### Debugpy removed from the Python extension in favor of the Python Debugger extension  \nNow that debugging functionality is handled by the [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy)\nextension, we have removed debugpy from the Python extension.  \nAs part of this change, `\"type\": \"python\"` and `\"type\": \"debugpy\"` specified in your `launch.json` file will both reference the path to the Python Debugger extension, requiring no changes needed to your `launch.json` files in order to run and debug effectively. Moving forward, we recommend using `\"type\": \"debugpy\"` as this directly corresponds to the Python Debugger extension.  \n#### Socket disablement now possible during testing  \nYou can now run tests with socket disablement from the testing UI on the Python Testing Rewrite. This is made possible by a switch in the communication between the Python extension and the test run subprocess to now use named-pipes.  \n#### Minor testing bugs updated  \nTest view now displays projects using testscenarios with unittest and parameterized tests inside nested classes correctly. Additionally, the Test explorer now handles tests in workspaces with symlinks, specifically workspace roots that are children of symlink-ed paths, which is particularly helpful in WSL scenarios.  \n#### Performance improvements with Pylance  \nThe Pylance team has been receiving feedback that Pylance's performance has degraded in the past few releases. We have made several smaller improvements in memory consumption and indexing performance to address various reported issues. However, for those who might still be experiencing performance issues with Pylance, we are kindly requesting for issues to be filed through the **Pylance: Report Issue** command from the Command Palette, ideally with logs, code samples and/or the packages that are installed in the working environment.",
    "url": "https://code.visualstudio.com/updates/v1_89#_python",
    "id": 3756
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Hex Editor  \nThe hex editor now has an *insert* mode, in addition to its longstanding \"replace\" mode. The insert mode enables new bytes to be added within and at the end of files, and it can be toggled using the `kbstyle(Insert)` key or from the status bar.  \nThe hex editor now also shows the currently hovered byte in the status bar.",
    "url": "https://code.visualstudio.com/updates/v1_89#_hex-editor",
    "id": 3757
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### GitHub Pull Requests  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. New features include:  \n- Experimental conflict resolution for non-checked out PRs is available when enabled by the hidden setting `\"githubPullRequests.experimentalUpdateBranchWithGitHub\": true`. This feature enables you to resolve conflicts in a PR without checking out the branch locally. The feature is still experimental and will not work in all cases.\n- There's an Accessibility Help Dialog that shows when **Open Accessibility Help** is triggered from the Pull Requests and Issues views.\n- All review action buttons show in the Active Pull Request sidebar view when there's enough space.  \nReview the [changelog for the 0.88.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0860) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_89#_github-pull-requests",
    "id": 3758
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### TypeScript  \n#### File watching handled by VS Code core  \nA new experimental setting `typescript.tsserver.experimental.useVsCodeWatcher` controls if the TS extension is using VS Code's core file watching support for file watching needs. TS makes extensive use of file watching, usually with their own node.js based implementation. By using VS Code's file watcher, watching should be more efficient, more reliable, and consume less resources. We plan to gradually enable this feature for users in May and monitor for regressions.",
    "url": "https://code.visualstudio.com/updates/v1_89#_typescript",
    "id": 3759
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Preview Features  \n### VS Code-native intellisense for PowerShell  \nWe've had a prototype for PowerShell intellisense inside the terminal for some time now, that we only recently got some more time to invest in polishing up. This is what it looks like:  \n<video src=\"images/1_89/terminal-intellisense.mp4\" title=\"VS Code-native PowerShell intellisense\" autoplay loop controls muted></video>  \nCurrently, it triggers on the `-` character or when ctrl+space is pressed. To enable this feature, set `\"terminal.integrated.shellIntegration.suggestEnabled\": true` in your `settings.json` file (it won't show up in the settings UI currently).  \nIt's still early for this feature but we'd love to hear your feedback on it. Some of the bigger things we have planned for it are to make triggering it more reliable ([#211222](https://github.com/microsoft/vscode/issues/211222)), make the suggestions more consistent regardless of where the popup is triggered ([#211364](https://github.com/microsoft/vscode/issues/211364)), and bringing the experience as close to the editor intellisense experience as possible ([#211076](https://github.com/microsoft/vscode/issues/211076), [#211194](https://github.com/microsoft/vscode/issues/211194)).",
    "url": "https://code.visualstudio.com/updates/v1_89#_vs-code-native-intellisense-for-powershell",
    "id": 3760
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Automatic Markdown link updates on paste  \nSay, you're writing some Markdown documentation and you realize that one section of the doc actually belongs somewhere else. So, you copy and paste it over into another file. All good, right? Well if the copied text contained any relative path links, reference links, or images, then these will likely now be broken, and you'll have to fix them up manually. This can be a real pain, but thankfully the new Update Links on Paste is here to help!  \nTo enable this functionality, just set `\"markdown.experimental.updateLinksOnPaste\": true`. Once enabled, when you copy and paste text between Markdown files in the current editor, VS Code automatically fixes all relative path links, reference links, and all images/videos with relative paths.  \n<video src=\"images/1_89/md-paste-link-update.mp4\" title=\"Links being automatically updated when copy and pasting between Markdown files\" autoplay loop controls muted></video>  \nAfter pasting, if you realize that you instead want to insert the exact text you copied, you can use the paste control to switch back to normal copy/paste behavior.",
    "url": "https://code.visualstudio.com/updates/v1_89#_automatic-markdown-link-updates-on-paste",
    "id": 3761
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Support for TypeScript 5.5  \nWe now support the TypeScript 5.5 beta. Check out the [TypeScript 5.5 beta blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/) and [iteration plan](https://github.com/microsoft/TypeScript/issues/57475) for details on this release.  \nEditor highlights include:  \n* Syntax checks for regular expressions.\n* File watching improvements.  \nTo start using the TypeScript 5.5 beta, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with TypeScript 5.5.",
    "url": "https://code.visualstudio.com/updates/v1_89#_support-for-typescript-5.5",
    "id": 3762
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## API  \n### Improved support for language features in comment input editors  \nWhen writing a new comment, VS Code creates a stripped down text editor, which is backed by a `TextDocument`, just like the main editors in VS Code are. This iteration, we've enabled some additional API features in these comment text editors. This includes:  \n- Support for workspace edits.\n- Support for diagnostics.\n- Support for the paste-as proposed API.  \nComment text documents can be identified by a URI that has the `comment` scheme.  \nWe're looking forward to seeing what extensions build with this new functionality!",
    "url": "https://code.visualstudio.com/updates/v1_89#_improved-support-for-language-features-in-comment-input-editors",
    "id": 3763
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Finalized Window Activity API  \nThe [window activity API](https://github.com/microsoft/vscode/issues/181569) has been finalized. This API provides a simple additional `WindowState.active` boolean that extensions can use to determine if the window has recently been interacted with.  \n```js\nvscode.window.onDidChangeWindowState(e => console.log('Is the user active?', e.active))\n```",
    "url": "https://code.visualstudio.com/updates/v1_89#_finalized-window-activity-api",
    "id": 3764
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n## Proposed APIs  \n### Accessibility Help Dialog for a view  \nAn Accessibility Help Dialog can be added for any extension-contributed view via the `accessibilityHelpContent` property. With focus in the view, screen reader users hear a hint to open the dialog (`kb(editor.action.accessibilityHelp)`), which contains an overview and helpful commands.  \nThis API is used by the GitHub Pull Request extension's Issues and PR views.",
    "url": "https://code.visualstudio.com/updates/v1_89#_accessibility-help-dialog-for-a-view",
    "id": 3765
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Language model and Chat API  \nThe language model namespace (`vscode.lm`) exports new functions to retrieve language model information and to count tokens for a given string. Those are `getLanguageModelInformation` and `computeTokenLength` respectively. You should use these functions to build prompts that are within the limits of a language model.  \n> **Note**: inline chat is now powered by the upcoming chat participants API. This also means `registerInteractiveEditorSessionProvider` is deprecated and will be removed very soon.",
    "url": "https://code.visualstudio.com/updates/v1_89#_language-model-and-chat-api",
    "id": 3766
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Updated document paste proposal  \nWe've continued iterating on the [document paste proposed API](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.documentPaste.d.ts). This API enables extensions to hook into copy/paste operations in text documents.  \nNotable changes to the API include:  \n- A new `resolveDocumentPasteEdit` method, which fills in the edit on a paste operation. This should be used if computing the edit takes a long time as it is only called when the paste edit actually needs to be applied.  \n- All paste operations now are identified by a `DocumentDropOrPasteEditKind`. This works much like the existing `CodeActionKind` and is used in keybindings and settings for paste operations.  \nThe [document paste extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/document-paste) includes all the latest API changes, so you can test out the API. Be sure to share feedback on the changes and overall API design.",
    "url": "https://code.visualstudio.com/updates/v1_89#_updated-document-paste-proposal",
    "id": 3767
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Hover Verbosity Level  \nThis iteration we have added a new proposed API to contract/expand hovers, which is called `editorHoverVerbosityLevel`. It introduces a new type called the `VerboseHover`, which has two boolean fields: `canIncreaseHoverVerbosity` and `canDecreaseHoverVerbosity`, which signal that a hover verbosity can be increased or decreased. If one of them is set to true, the hover is displayed with `+` and `-` icons, which can be used to increase/decrease the hover verbosity.  \nThe proposed API also introduces a new signature for the `provideHover` method, which takes an additional parameter of type `HoverContext`. When a hover verbosity request is sent by the user, the hover context is populated with the previous hover, as well as a `HoverVerbosityAction`, which indicates whether the user would like to increase or decrease the verbosity.  \n<video src=\"images/1_89/hover-verbosity.mp4\" title=\"Hover Verbosity Proposed API.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_89#_hover-verbosity-level",
    "id": 3768
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### `preserveFocus` on Extension-triggered TestRuns  \nThere is [a proposal](https://github.com/microsoft/vscode/issues/209491) for a `preserveFocus` boolean on test run requests triggered by extensions. Previously, test runs triggered from extension APIs never caused the focus to move into the **Test Results** view, requiring some extensions to reinvent the wheel to maintain user experience compatibility. This new option can be set on `TestRunRequest`s, to ask the editor to move focus as if the run was triggered from in-editor.",
    "url": "https://code.visualstudio.com/updates/v1_89#_preservefocus-on-extension-triggered-testruns",
    "id": 3769
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_89#_issue-tracking",
    "id": 3770
  },
  {
    "content": "Learn what is new in the Visual Studio Code April 2024 Release (1.89)  \n### Pull requests  \nContributions to `vscode`:  \n* [@4-tel](https://github.com/4-tel): fix: searching for lines in debug console that start with \"!\" #174146 [PR #210178](https://github.com/microsoft/vscode/pull/210178)\n* [@CareyJWilliams (Carey Williams)](https://github.com/CareyJWilliams): Fix task template writes to an empty tasks.json [PR #210675](https://github.com/microsoft/vscode/pull/210675)\n* [@cpendery (Chapman Pendery)](https://github.com/cpendery)\n* fix: bundling error makes terminal suggestions fail [PR #208822](https://github.com/microsoft/vscode/pull/208822)\n* feat: add git-bash support to shell integration [PR #208960](https://github.com/microsoft/vscode/pull/208960)\n* fix: improve terminal marker placements on windows [PR #209136](https://github.com/microsoft/vscode/pull/209136)\n* fix: terminal suggestions should hide modal when no completions exist [PR #210289](https://github.com/microsoft/vscode/pull/210289)\n* fix: split fails in git bash [PR #210513](https://github.com/microsoft/vscode/pull/210513)\n* [@Ditoo29 (Diogo Pinto)](https://github.com/Ditoo29): fix: serialization of newline characters [PR #209703](https://github.com/microsoft/vscode/pull/209703)\n* [@frankli0324 (Frank)](https://github.com/frankli0324): disable corepack auto pin feature when executing npm view [PR #210601](https://github.com/microsoft/vscode/pull/210601)\n* [@g-plane (Pig Fang)](https://github.com/g-plane): Auto close Git multi-diff editor when all files staged or comitted [PR #210327](https://github.com/microsoft/vscode/pull/210327)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Improve descriptions of `workbench.activityBar.iconClickBehavior` and `workbench.activityBar.location` settings [PR #210574](https://github.com/microsoft/vscode/pull/210574)\n* Clear Activity Bar icon badge correctly (fix #210640) [PR #210645](https://github.com/microsoft/vscode/pull/210645)\n* [@grgar (George Garside)](https://github.com/grgar)\n* Don't use window.customTitleBarVisibility configuration on web [PR #209162](https://github.com/microsoft/vscode/pull/209162)\n* Fix color picker command title [PR #210349](https://github.com/microsoft/vscode/pull/210349)\n* Move cmd start escape to end of prompt [PR #210443](https://github.com/microsoft/vscode/pull/210443)\n* [@hsfzxjy (Xie Jingyi)](https://github.com/hsfzxjy): Logging navigible container events for debug [PR #209357](https://github.com/microsoft/vscode/pull/209357)\n* [@jswillard (John Willard)](https://github.com/jswillard): Show custom label in quick open [PR #209681](https://github.com/microsoft/vscode/pull/209681)\n* [@marvinthepa (Martin Sander)](https://github.com/marvinthepa): Middle-click paste in terminal [PR #136633](https://github.com/microsoft/vscode/pull/136633)\n* [@mmastrac (Matt Mastracci)](https://github.com/mmastrac):  Add `windowOptions` to xtermTerminal to allow `ESC [18t` to work [PR #209310](https://github.com/microsoft/vscode/pull/209310)\n* [@nopeless (nopeless)](https://github.com/nopeless): fix: make `cmd` local in shell integration bash file [PR #208364](https://github.com/microsoft/vscode/pull/208364)\n* [@pagict (Premium)](https://github.com/pagict): feat. add a menu item 'expand-select' to expand subtree in search view [PR #206033](https://github.com/microsoft/vscode/pull/206033)\n* [@pisv (Vladimir Piskarev)](https://github.com/pisv): Fix incorrect typings in `OpenJsDocLinkCommand_Args` [PR #209872](https://github.com/microsoft/vscode/pull/209872)\n* [@qirong77](https://github.com/qirong77): Fix missing class in inlinesuggest toolbar in Monaco-Editor causing CSS variables to be ineffective [PR #207582](https://github.com/microsoft/vscode/pull/207582)\n* [@r-sargento (Rafael Sargento)](https://github.com/r-sargento): Fix #201247 (Integrated Terminal does not set the environment variables from default profile) [PR #209711](https://github.com/microsoft/vscode/pull/209711)\n* [@ScriptBloom (alviner)](https://github.com/ScriptBloom): fix: minimap section header display uncompletely on first load:#209603 [PR #209605](https://github.com/microsoft/vscode/pull/209605)\n* [@sheetalkamat (Sheetal Nandi)](https://github.com/sheetalkamat): Use vscode watches for tsserver [PR #193848](https://github.com/microsoft/vscode/pull/193848)\n* [@telamon (Tony Ivanov)](https://github.com/telamon): Fixed #114425 prevent mime pollution on install [PR #209510](https://github.com/microsoft/vscode/pull/209510)\n* [@timorthi (Timothy Ng)](https://github.com/timorthi): Re-render sticky scroll when line numbers display mode is changed [PR #210815](https://github.com/microsoft/vscode/pull/210815)\n* [@WardenGnaw (Andrew Wang)](https://github.com/WardenGnaw): Add 'noDebug' for selectAndStartDebugging command [PR #209893](https://github.com/microsoft/vscode/pull/209893)\n* [@zWingz (zWing)](https://github.com/zWingz): fix: unexpected error when execCommand workbench.extensions.installExtension [PR #210135](https://github.com/microsoft/vscode/pull/210135)\n* [@ale-dg](https://github.com/ale-dg): continuously provide feedbacks and logs to help us diagnose multiple performance issues in the notebook editor and jupyter.  \nContributions to `vscode-css-languageservice`:  \n* [@liaoyinglong (vigoss)](https://github.com/liaoyinglong): support nested @container [PR #390](https://github.com/microsoft/vscode-css-languageservice/pull/390)  \nContributions to `vscode-emmet-helper`:  \n* [@nurbek0298 (Nurbek Ibraev)](https://github.com/nurbek0298)\n* Add support for markup attributes in vue [PR #92](https://github.com/microsoft/vscode-emmet-helper/pull/92)\n* 2.9.3 [PR #93](https://github.com/microsoft/vscode-emmet-helper/pull/93)  \nContributions to `vscode-eslint`:  \n* [@hyoban (Stephen Zhou)](https://github.com/hyoban): fix: add json, jsonc to `eslint.probe`'s default options [PR #1830](https://github.com/microsoft/vscode-eslint/pull/1830)  \nContributions to `vscode-hexeditor`:  \n* [@tomilho (Tom\u00e1s Silva)](https://github.com/tomilho)\n* Edit mode and input byte insertion [PR #503](https://github.com/microsoft/vscode-hexeditor/pull/503)\n* Fix: duplicate saving and stale webview. [PR #513](https://github.com/microsoft/vscode-hexeditor/pull/513)\n* [@veger (Maarten Bezemer)](https://github.com/veger): Fix swapped entries [PR #515](https://github.com/microsoft/vscode-hexeditor/pull/515)  \nContributions to `vscode-json-languageservice`:  \n* [@michaeltlombardi (Mikey Lombardi (He/Him))](https://github.com/michaeltlombardi): Ensure parser uses errorMessage for minContains/maxContains [PR #229](https://github.com/microsoft/vscode-json-languageservice/pull/229)  \nContributions to `vscode-languageserver-node`:  \n* [@werat (Andy Hippo)](https://github.com/werat): Don't crash when unregistering a feature that doesn't exist [PR #1460](https://github.com/microsoft/vscode-languageserver-node/pull/1460)  \nContributions to `vscode-python-debugger`:  \n* [@DavidArchibald (David Archibald)](https://github.com/DavidArchibald): Fix debugger attach to process when running on WSL [PR #267](https://github.com/microsoft/vscode-python-debugger/pull/267)  \nContributions to `vscode-vsce`:  \n* [@yutotnh (yutotnh)](https://github.com/yutotnh): feat: ignore .git generated by `git worktree add` [PR #943](https://github.com/microsoft/vscode-vsce/pull/943)  \nContributions to `language-server-protocol`:  \n* [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721): add 2 lsp [PR #1918](https://github.com/microsoft/language-server-protocol/pull/1918)\n* [@MariaSolOs (Maria Jos\u00e9 Solano)](https://github.com/MariaSolOs): Add markup diagnostic message clarification [PR #1917](https://github.com/microsoft/language-server-protocol/pull/1917)\n* [@practicalli-johnny (Practicalli Johnny)](https://github.com/practicalli-johnny): servers: update clojure-lsp repo and maintainer [PR #1921](https://github.com/microsoft/language-server-protocol/pull/1921)\n* [@sz3lbi (szelbi)](https://github.com/sz3lbi): add SAP CDS server [PR #1924](https://github.com/microsoft/language-server-protocol/pull/1924)\n* [@unvalley (unvalley)](https://github.com/unvalley): docs: add biome to lsp servers [PR #1923](https://github.com/microsoft/language-server-protocol/pull/1923)\n* [@Wilfred (Wilfred Hughes)](https://github.com/Wilfred): Fix typo in RequestCancelled doc comment [PR #1922](https://github.com/microsoft/language-server-protocol/pull/1922)  \nContributions to `monaco-editor`:  \n* [@timotheeguerin (Timothee Guerin)](https://github.com/timotheeguerin): Add support for TypeSpec language  [PR #4450](https://github.com/microsoft/monaco-editor/pull/4450)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_89#_pull-requests",
    "id": 3771
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Interactive Playground  \nThe **Interactive Playground** on the **Welcome** page introduces you in a step-by-step guide to some of our advanced code editing features with interactive examples:  \n![Interface Overview](images/1_9/interactive-playground.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_interactive-playground",
    "id": 3773
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Integrated Terminal improvements  \n#### Performance  \nMuch of the Integrated Terminal frontend has been rewritten with performance in mind. In short, it should no longer lock up the application when processing large amounts of data and be about 5 times faster.  \nBefore (v1.8.1):  \n---------------  \n![Terminal performance before](images/1_9/terminal-before.gif)  \nAfter (v1.9.0):  \n---------------  \n![Terminal performance before](images/1_9/terminal-after.gif)  \n#### Windows support  \nThe library used to communicate with the terminal process on Windows has been upgraded which fixes many of the problems the terminal had on Windows such as arrow keys not functioning and the prompt line going out of sync. A special thanks to [Ryan Prichard](https://github.com/rprichard) for his [winpty](https://github.com/rprichard/winpty) library and for assisting with the upgrade.  \n#### Other  \n- **PowerShell new default on Windows 10**: PowerShell is now the default shell on Windows 10 to better align with the [upcoming OS default](https://blogs.windows.com/windowsexperience/2016/11/17/announcing-windows-10-insider-preview-build-14971-for-pc/#fwfzEgffOGmVfEXs.97). You can change this back to cmd.exe by setting `terminal.integrated.shell.windows` to `\"cmd.exe\"` in your `settings.json` file.\n- **Right-click copy or paste**: On Windows, similar to the cmd.exe feature, right clicking within the terminal will copy if there is a selection or paste if there is no selection. This is enabled by default on Windows and can be configured (on any platform) using the `terminal.integrated.rightClickCopyPaste` setting.\n- **Cursor styles**: New line and underline cursor styles have been added to the terminal, these can be configured with the `terminal.integrated.cursorStyle` setting.\n- **Wide character support**: Wide characters are now sized to consume exactly 2 character widths.\n- **Better space utilization**: The individual terminals within the terminal panel should now fill up as much space as possible.",
    "url": "https://code.visualstudio.com/updates/v1_9#_integrated-terminal-improvements",
    "id": 3774
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Always hot exit on folders  \nThe `files.hotExit` setting has changed from a simple `true`/`false` setting to accept the following options:  \n- `\"off\"`: Disable hot exit (same as the old `false` setting).\n- `\"onExit\"`: Enable hot exit when all VS Code windows are shut down (same as the old `true` setting).\n- `\"onExitAndWindowClose\"`: Same as `\"onExit\"` but trigger hot exit when any folder window closes, regardless of whether it's the instance window or not. In order to enable more flexibility, this setting will also *not* restore folder windows when you next launch, `\"window.reopenFolders\": \"all\"` can be used to restore all previous windows when this setting is used.",
    "url": "https://code.visualstudio.com/updates/v1_9#_always-hot-exit-on-folders",
    "id": 3775
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Zen mode improvements  \nTo reduce visual clutter, Zen mode now also hides the workbench Tabs. We have also introduced the following options to make it easier to fine tune the Zen mode experience:  \n* `\"zenMode.hideStatusBar\"` - Set to false, if you don't want Zen Mode to hide the Status Bar.\n* `\"zenMode.hideTabs\"` - Set to false, if you want to still see Tabs.\n* `\"zenMode.fullScreen\"` - Set to false to not go to full screen, had been `workbench.fullScreenZenMode`.",
    "url": "https://code.visualstudio.com/updates/v1_9#_zen-mode-improvements",
    "id": 3776
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Search result navigation  \nThere are two new ways to easily navigate results in the Search view.  \n- The arrow keys - When you use the arrow keys to select a result, it will be shown in the editor.\n- Two new commands: `search.action.focusNextSearchResult` and `search.action.focusPreviousSearchResult` - By default, these are bound to `kb(search.action.focusNextSearchResult)` and `kb(search.action.focusPreviousSearchResult)`.  \n![search result navigation](images/1_9/search-result-nav.gif)",
    "url": "https://code.visualstudio.com/updates/v1_9#_search-result-navigation",
    "id": 3777
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Panels title bar update  \nThe title bar of the horizontal panel now shows all the other available panels and thus makes it much easier to switch between panels.  \n![Panels](images/1_9/panel.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_panels-title-bar-update",
    "id": 3778
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New entries in the context menu of Tabs  \nAdditional entries have been added to the context menu of Tabs that show files. You can copy the path of the file or reveal it in the native OS Explorer or the Explorer in the Side Bar.  \n![Tab Context Menu](images/1_9/tab-context.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-entries-in-the-context-menu-of-tabs",
    "id": 3779
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New setting to control close button in Tabs  \nWe added a new setting `workbench.editor.tabCloseButton` that controls if the close button should show on the right (default), left or not be visible at all.  \n![Tab Close Button on the Left](images/1_9/tabclose.png)  \nNote: The previous `workbench.editor.showTabCloseButton` was removed in favor of this new option.",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-setting-to-control-close-button-in-tabs",
    "id": 3780
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Control whether to open a new window or use last active  \nWhen VS Code is already running and you open a new file or folder, it decides whether to open in the last active window or a new window. The  existing `window.openFilesInNewWindow` setting controls this for files and by default, a new window would be opened. With this release, we wanted to make this more configurable and also change the default behavior for opening files.  \n* Added `window.openFoldersInNewWindow` to configure this behavior for folders.\n* Changed the possible values to `default`, `on` and `off`. ( `window.openFilesInNewWindow` also uses these values)\n* Both settings now default to `default`, which in most cases will reuse the last active window instead of opening a new one.  \nIf configured to be `default`, VS Code still makes the best guess about reusing a window based on the context of the open request. Change the settings to either `on` or `off` if you want always want the same behavior. For example, if you always want a new window when picking a file or folder from the **File** menu, set this to `on`.  \nNote: There can still be cases where this setting is ignored (for example, when using the `-new-window` or `-reuse-window` command-line option).",
    "url": "https://code.visualstudio.com/updates/v1_9#_control-whether-to-open-a-new-window-or-use-last-active",
    "id": 3781
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Control the dimensions of new windows  \nA new setting `window.newWindowDimensions` controls the size and positioning of new windows. By default, a new window will open in the center of the screen with small dimensions. If you change this setting to `inherit`, the new window will get the same dimensions as the last active one. Setting it to `maximized` or `fullscreen` will always open new windows maximized or in full screen.",
    "url": "https://code.visualstudio.com/updates/v1_9#_control-the-dimensions-of-new-windows",
    "id": 3782
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Control menu visibility (Windows, Linux)  \nA new setting `window.menuBarVisibility` allows for more fine grained control over the top menu visibility on Windows and Linux. By `default`, the menu will be visible and only hides when entering full screen. You can set it to `toggle` to hide it. In the `toggle` state, the menu will show up when you press the `kbstyle(Alt)` key. If you turn the set the value to `hidden`, the menu will remain hidden, even if you press `kbstyle(Alt)`.  \nNote: If you configure the menu explicitly to be `visible`, it will also remain visible when you enter the full screen mode.",
    "url": "https://code.visualstudio.com/updates/v1_9#_control-menu-visibility-windows,-linux",
    "id": 3783
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Easy to close all editors when they are dirty  \nThere are situations where you can end up with many dirty editors open (for example, you ran a search and replace operation without saving). Previously, when you wanted to close them all, you were asked to Save or Revert each editor one by one. Now, when you invoke the **Close All Editors** action (`kb(workbench.action.closeAllEditors)`), you will see a combined prompt for all dirty files:  \n![Close All Prompt](images/1_9/closeall.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_easy-to-close-all-editors-when-they-are-dirty",
    "id": 3784
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Output scroll lock  \nThanks to an external [PR](https://github.com/microsoft/vscode/pull/18768), it is now possible to easily stop output from automatically scrolling by toggling the scroll lock in the Output panel title bar.  \n![Output scroll lock](images/1_9/output_scroll_lock.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_output-scroll-lock",
    "id": 3785
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Language specific settings  \nOur users often work on many different file types and languages in one workspace and a frequent feature request was language specific settings ([#1587](https://github.com/microsoft/vscode/issues/1587)). With this release, you can now customize your editor by language through language based settings.  \nTo customize for any language, run the global command **Preferences: Configure language specific settings...** (id: `workbench.action.configureLanguageBasedSettings`) from the **Command Palette** (`kb(workbench.action.showCommands)`) which opens the language picker. Selecting the language you want, opens the Settings editor with the language entry where you can add applicable settings.  \n![Language mode for File](images/1_9/pref-config-lang-settings.png)  \n![Language mode for File](images/1_9/lang-selection.png)  \n![Language mode for File](images/1_9/lang-based-settings.png)  \nIf you have a file open and you want to customize the editor for this file type, click on the Language Mode in the Status Bar to the bottom-right of the VS Code window. This opens the Language Mode picker with an option **Configure 'language_name' language based settings...**. Selecting this opens the Settings editor with the language entry where you can add applicable settings.  \nYou can also configure language based settings by directly opening `settings.json`. You can scope them to the workspace by placing them in the Workspace settings just like other settings. If you have settings defined for a language in both user and workspace scopes, then they are merged by giving precedence to the ones defined in the workspace.  \nThe following examples customize editor settings for language modes `typescript` and `markdown`.  \n```json\n{\n\"[typescript]\": {\n\"editor.formatOnSave\": true,\n\"editor.formatOnPaste\": true\n},\n\"[markdown]\": {\n\"editor.formatOnSave\": true,\n\"editor.wrappingColumn\": 0,\n\"editor.renderWhitespace\": \"all\",\n\"editor.acceptSuggestionOnEnter\": \"off\"\n}\n}\n```  \nYou can use IntelliSense in Settings editor to help you find allowed language based settings. All editor settings and some non-editor settings are supported.  \n**Note**: The following settings are not currently supported but will be in the next release. Please refer to [#19511](https://github.com/microsoft/vscode/issues/19511) for more information.  \n```json\neditor.tabSize\neditor.insertSpaces\neditor.detectIndentation\neditor.trimAutoWhitespace\n```",
    "url": "https://code.visualstudio.com/updates/v1_9#_language-specific-settings",
    "id": 3786
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Task support  \n### Commands per task  \nYou can now define different commands per task ([#981](https://github.com/microsoft/vscode/issues/981)). This allows running different commands for different tasks without writing your own shell script. A `tasks.json` file using commands per task looks like this:  \n```json\n{\n\"version\": \"0.1.0\",\n\"tasks\": [\n{\n\"taskName\": \"tsc\",\n\"command\": \"tsc\",\n\"args\": [\"-w\"],\n\"isShellCommand\": true,\n\"isBackground\": true,\n\"problemMatcher\": \"$tsc-watch\"\n},\n{\n\"taskName\": \"build\",\n\"command\": \"gulp\",\n\"args\": [\"build\"],\n\"isShellCommand\": true\n}\n]\n}\n```  \nThe first task start the TypeScript compiler in watch mode, the second one starts the `gulp build`. If a tasks specifies a local command to run the task name is not included into the command line (`suppressTaskName` is `true` for these tasks). Since a local command can specify local arguments, there is no need for adding it by default. Note that the `tsc` task specifies `\"isBackground\": true`. The property `isWatching` is deprecated in favor of `isBackground` to support more scenarios in the future.  \nIf a `tasks.json` file specifies both global and task local commands, the task local commands win over the global command. There is no merging between a global and a task local command.  \nA task local command can be made OS specific as well. The syntax is the same as for global commands. Here an example that adds an OS specific argument to a command:  \n```json\n{\n\"taskName\": \"build\",\n\"command\": \"gulp\",\n\"windows\": {\n\"args\": [\"build\", \"win32\"]\n},\n\"linux\": {\n\"args\": [\"build\", \"linux\"]\n},\n\"osx\": {\n\"args\": [\"build\", \"osx\"]\n},\n\"isShellCommand\": true\n}\n```  \nAs with global commands, the `args` and `options` property of the OS specific section are merged into the task command.",
    "url": "https://code.visualstudio.com/updates/v1_9#_commands-per-task",
    "id": 3787
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Task execution in Terminal  \nWe implemented a new task execution engine that uses the terminal instead of the output window. This brings some major advantages:  \n* ANSI control character support\n* Terminal input (a task can read input)\n* The platform character encoding is used by default\n* More than one task can be executed in parallel  \nThe support is disabled by default, but early adopters can opt in to give feedback on the new implementation. To do so add the `\"_runner\": \"terminal\"` property to the top of your `tasks.json` file  \n```json\n{\n\"version\": \"0.1.0\",\n\"_runner\": \"terminal\",\n\"tasks\": [\n{\n\"taskName\": \"tsc\",\n\"command\": \"tsc -w\",\n\"isShellCommand\": true,\n\"isBackground\": true,\n\"problemMatcher\": \"$tsc-watch\",\n\"isBuildCommand\": true\n},\n{\n\"taskName\": \"dir\",\n\"command\": \"dir\",\n\"isShellCommand\": true\n}\n]\n}\n```  \nBelow a screen cast that first starts the tsc compiler in background (Using `kb(workbench.action.tasks.build)`) and then executes the dir command in another terminal.  \n![Tasks in Terminal](images/1_9/tasks.gif)  \nThere is one thing we changed for executing tasks in the terminal: if the task is a shell command arguments to the shell command should best be part of the command itself. The reason for this is proper quoting. With the old runner, it was always complicated to quote shell commands correctly especially under Linux/Mac shells where different kind of quotes exist (pre character escaping, weak quoting and strong quoting). If arguments are provided, we add them to the command without performing any quoting rules.  \nPlease note that this is still work in progress. Feedback and suggestions are welcome.",
    "url": "https://code.visualstudio.com/updates/v1_9#_task-execution-in-terminal",
    "id": 3788
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Editor  \n### Format on Paste  \nWe have added a new setting to enable format on paste ([#13945](https://github.com/microsoft/vscode/issues/13945)). Simply update your settings to include `editor.formatOnPaste: true`. Note that this works with existing formatters that support formatting a selection such as the TypeScript formatter or other formatters from the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_9#_format-on-paste",
    "id": 3789
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Theme matching rules now respect TextMate semantics  \nSince our first version, VS Code has supported TextMate themes. There was, however one catch, we would leave it up to CSS to do token <-> theme rule matching. This was a great way to make progress at the time, but it also meant that TextMate themes were not rendered accurately in VS Code (for example, TextMate theme matching semantics are different than CSS class name matching semantics). The issues had been piling up and we decided it was time to improve our implementation (see [issue #3008](https://github.com/microsoft/vscode/issues/3008) for the rendering differences caused by this shortcut).",
    "url": "https://code.visualstudio.com/updates/v1_9#_theme-matching-rules-now-respect-textmate-semantics",
    "id": 3790
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New Tools for inspecting TextMate Scopes  \nWe have introduced a new widget to help inspect the scopes of a token and the matching theme rule. You can launch the widget with **Developer: Inspect TM Scopes** from the **Command Palette** (`kb(workbench.action.showCommands)`).  \n![Inspect TM Scopes](images/1_9/inspect-tm-scopes.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-tools-for-inspecting-textmate-scopes",
    "id": 3791
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Insert snippets  \nYou can now bind your favorite snippets to key bindings. A sample that encloses a selection with single quotes looks like this:  \n```json\n{\n\"key\": \"cmd+k '\",\n\"command\": \"editor.action.insertSnippet\",\n\"args\": { \"snippet\": \"'$TM_SELECTED_TEXT'\" }\n}\n```  \nInstead of defining a snippet with `snippet`, you can also refer to a snippet using the `name`-property, like `{ \"name\": \"mySnippet\" }`",
    "url": "https://code.visualstudio.com/updates/v1_9#_insert-snippets",
    "id": 3792
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Go To Implementation  \nThe new **Go to Implementation** and **Peek Implementation** commands allow you to quickly jump from an interface to its implementers, or from an abstract method to the method implementations. You can try out this feature by installing a nightly build of TypeScript 2.2 in your workspace: `npm install typescript@next`.",
    "url": "https://code.visualstudio.com/updates/v1_9#_go-to-implementation",
    "id": 3793
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Persistent view options  \nUsing Toggle Word Wrap, Toggle Render Whitespace and Toggle Control Characters will now persist the toggled value to user settings.",
    "url": "https://code.visualstudio.com/updates/v1_9#_persistent-view-options",
    "id": 3794
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Match Case and Whole Words in multi-cursor actions  \nThe multi-cursor actions always changed their behavior based on the toggle values for \"Match Case\" and \"Whole Words\". However, this was not really obvious, especially when the Find widget is hidden. To make this more clear, triggering the following actions will now either highlight the toggles when the Find widget is visible, or briefly show the two options in the top right corner of the editor.  \nHere are the multi-cursor actions:  \n| Label | Default Key binding |\n|---|---|\n| Add Selection To Next Find Match | `kb(editor.action.addSelectionToNextFindMatch)` |\n| Move Last Selection To Next Find Match | `kb(editor.action.moveSelectionToNextFindMatch)` |\n| Add Selection To Previous Find Match | `kb(editor.action.addSelectionToPreviousFindMatch)` |\n| Move Last Selection To Previous Find Match | `kb(editor.action.moveSelectionToPreviousFindMatch)` |\n| Select All Occurrences of Find Match | `kb(editor.action.selectAllMatches)` |\n| Change All Occurrences | `kb(editor.action.changeAll)` |  \nMoreover, the two options will briefly show in the top right corner of the editor also when toggling their value via Toggle Find case sensitive (`kb(toggleFindCaseSensitive)`) or Toggle Find whole word (`kb(toggleFindWholeWord)`)",
    "url": "https://code.visualstudio.com/updates/v1_9#_match-case-and-whole-words-in-multi-cursor-actions",
    "id": 3795
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Find widget, \\n and CRLF files  \nThe semantics of `\\n` in the find widget search string, when in regex mode, has now changed to always match the End-Of-Line sequence.  \nWhereas before, `\\n` would always match the `\\n` character, `\\n` will now match the `\\n` characters in files with `\\n` line terminators (indicated in the Status Bar with **LF**) and will match the `\\r\\n` sequence in files with `\\r\\n` line terminators (indicated in the Status Bar with **CRLF**).",
    "url": "https://code.visualstudio.com/updates/v1_9#_find-widget,-\\n-and-crlf-files",
    "id": 3796
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Indentation rules improvements  \nWe polished our implementation of Indentation Rules, which Language extensions can leverage to determine the correct indentation level for a specific line. The indentation adjustments are usually triggered after users finish writing a line and press `kbstyle(Enter)`.  \nIn addition, we implemented an experimental command **Reindent Lines** and you can use it to adjust the indentation of the whole file if the indentation rules are properly set.",
    "url": "https://code.visualstudio.com/updates/v1_9#_indentation-rules-improvements",
    "id": 3797
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Languages  \n### TypeScript references CodeLens  \nThe TypeScript references CodeLens displays an inline count of reference for classes, interfaces, methods, properties, and exported objects:  \n![TypeScript references codelens](images/1_9/ts-references-code-lens.png)  \nYou can enable the TypeScript references CodeLens by setting `\"typescript.referencesCodeLens.enabled\": true`.  \nClick on the reference count to quickly browse a list of references:  \n![TypeScript references codelens peek](images/1_9/ts-references-code-lens-peek.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_typescript-references-codelens",
    "id": 3798
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### TypeScript  \nVS Code now includes TypeScript 2.1.5, which includes a number of important [bug fixes](https://github.com/microsoft/TypeScript/issues?q=is%3Aissue+milestone%3A%22TypeScript+2.1.5%22+label%3A%22fixed%22+).",
    "url": "https://code.visualstudio.com/updates/v1_9#_typescript",
    "id": 3799
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### TypeScript Version Configuration  \nYou can now more easily switch which version of TypeScript is being used in your workspace by opening a TypeScript or JavaScript file in the workspace and clicking on the TypeScript version number in the status bar:  \n![TypeScript status bar version](images/1_9/ts-status-bar-version.png)  \nA message box will appear asking you which version of TypeScript VS Code should use:  \n![TypeScript version selector](images/1_9/ts-select-ts-version-message.png)  \nAfter switching TypeScript versions, reload the VS Code window to apply the change.  \nDue to a potential [security issue](#settings-and-security), VS Code will no longer automatically load versions of TypeScript from a `typescript.tsdk` workspace setting. When a workspace with a `typescript.tsdk` workspace setting is loaded for the first time, we ask you if we should use the workspace version of TypeScript or VS Code's version.",
    "url": "https://code.visualstudio.com/updates/v1_9#_typescript-version-configuration",
    "id": 3800
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Markdown Preview and editor integration  \nVS Code can now synchronize the view of a Markdown editor and its preview ([#6992](https://github.com/microsoft/vscode/issues/6992)). By default, the Markdown preview will automatically scroll to reveal the element at the selected line in the editor.  \n![Markdown Preview editor selection scroll sync](images/1_9/markdown-selection-preview-scroll-sync.gif)  \nAlso, when the Markdown preview is scrolled, the editor will scroll along with it:  \n![Markdown Preview to editor scroll sync](images/1_9/markdown-preview-to-editor-scroll-sync.gif)  \nAdditionally, you can now double click an element in the Markdown preview to automatically open the editor at that line:  \n![Markdown Preview double click switches to editor](images/1_9/markdown-double-click-preview-switch.gif)",
    "url": "https://code.visualstudio.com/updates/v1_9#_markdown-preview-and-editor-integration",
    "id": 3801
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Other Markdown improvements  \n* Syntax highlighting for C++, Go, Rust, and Scala code blocks in Markdown files.\n* Fixed Markdown syntax highlighting for block elements on a line immediately after a paragraph.\n* When the Markdown preview is first opened, it will automatically scroll to the selected line in the editor.\n* A gray bar in the left margin of the Markdown preview indicates the currently selected line.\n* Links to local files now work in the Markdown preview.\n* In the Markdown editor, you can `kbstyle(Ctrl)` click on links to local files to open them in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_9#_other-markdown-improvements",
    "id": 3802
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Load Emmet preferences, profiles, snippets and abbreviations from external files  \nThe new setting `emmet.extensionsPath` can be used to provide a location (absolute path or relative to workspace) where any or all of `snippets.json`, `syntaxProfiles.json` and `preferences.json` reside. Read more about how to customize Emmet using these files at [Emmet Customization](https://docs.emmet.io/customization/).  \nThe existing settings `emmet.preferences` and `emmet.syntaxProfiles` will override the values from the above json files.  \n**Note**: The file contents are cached. Therefore, you will need to reload the VS Code window the first time you add these files and every time you modify them.",
    "url": "https://code.visualstudio.com/updates/v1_9#_load-emmet-preferences,-profiles,-snippets-and-abbreviations-from-external-files",
    "id": 3803
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### SCSS map support  \nThe SCSS language support now also understands the SCSS map syntax ([#1758](https://github.com/microsoft/vscode/issues/1758)).",
    "url": "https://code.visualstudio.com/updates/v1_9#_scss-map-support",
    "id": 3804
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New HTML settings  \nThe HTML formatter (based on the [jsbeautifier](https://jsbeautifier.org/)) has been updated. New options are available:\n- `html.format.contentUnformatted`: List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag\n- `html.format.wrapAttributes`: Wrapping strategy for attributes:\n- `auto`: Wrap when the line length is exceeded\n- `force`: Wrap all attributes, except first\n- `force-aligned`: Wrap all attributes, except first, and align attributes\n- `force-expand-multiline`: Wrap all attributes  \nThe following options allows to disable of script and style validation:  \n- `html.validate.scripts`: Configures if the built-in HTML language support validates embedded scripts.\n- `html.validate.styles`: Configures if the built-in HTML language support validates embedded styles.",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-html-settings",
    "id": 3805
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New PHP settings  \nThe following options allows to disable the built-in PHP completion and hover supports:  \n- `php.suggest.basic`: Configures if the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-php-settings",
    "id": 3806
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Confirmation of the `php.validate.executablePath` setting  \nDue to potential security risks, VS Code asks for confirmation of the `php.validate.executablePath` workspace setting before executing the program the setting is pointing to.  \n![Confirming PHP executable](images/1_9/confirming-php.png)  \nIf the path is set in user settings, no confirmation is necessary.",
    "url": "https://code.visualstudio.com/updates/v1_9#_confirmation-of-the-php.validate.executablepath-setting",
    "id": 3807
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Extensions  \n### Easily create an Extension Pack  \n[Extension Packs](https://code.visualstudio.com/Docs/extensionAPI/extension-manifest#_extension-packs) allow you to bundle separate extensions together so that they can be installed together. We have added support to create an Extension Pack using the Code Yeoman generator.  \n![extensionpackgenerator](images/1_9/extensionpack-generator.png)  \nThe generator creates an Extension Pack extension. Optionally, it can also seed the pack with the set of extensions you have currently installed in your Code instance. In this way you can easily create an Extension Pack with your favorite extensions, publish it to the market place, and share it with others.",
    "url": "https://code.visualstudio.com/updates/v1_9#_easily-create-an-extension-pack",
    "id": 3808
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Debugging  \n### Debugging without a launch configuration  \nAs per popular [user request](https://github.com/microsoft/vscode/issues/285), we no longer require a `launch.json` file to start debugging - simply pressing `kb(workbench.action.debug.start)` will immediately start the debug session. This makes it possible to debug single files (in a so called 'no-folder-workspace' indicated by a purple colored Status Bar). A `launch.json` is still required for advanced debug configuration.  \n>**Note:** This feature is currently supported only by the Node.js and PowerShell debuggers but will be picked up soon by other debug extensions.  \n![no folder debug](images/1_9/no_folder_debug.gif)",
    "url": "https://code.visualstudio.com/updates/v1_9#_debugging-without-a-launch-configuration",
    "id": 3809
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Inline variable values in source code  \nThanks to a user [PR](https://github.com/microsoft/vscode/pull/16129) we are now able to show variable values inline in the source while stepping through the code.\nThis feature is still experimental, so it is disabled by default. To enable it set `\"debug.inlineValues\": true` in your settings.  \n![debug inline values](images/1_9/inline_values.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_inline-variable-values-in-source-code",
    "id": 3810
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Automatically choosing debug environment  \nDepending on the active file, VS Code can now automatically choose a debug environment instead of explicitly asking the user. For example, if a user has a JavaScript file active in an editor and wants to setup their `launch.json`, a  `launch.json` for JavaScript is automatically generated.",
    "url": "https://code.visualstudio.com/updates/v1_9#_automatically-choosing-debug-environment",
    "id": 3811
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### User level launch.json  \nAs per [user request](https://github.com/microsoft/vscode/issues/18401), it is now possible to have a \"launch\" object in your user settings that is shared across all the workspaces as a launch configuration.",
    "url": "https://code.visualstudio.com/updates/v1_9#_user-level-launch.json",
    "id": 3812
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Add launch configuration from dropdown  \nIt is now possible to add a new launch configuration by simply choosing that option in the debug dropdown:  \n![add launch configuration](images/1_9/add_launch.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_add-launch-configuration-from-dropdown",
    "id": 3813
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Copy callstack action  \nWe have added a context menu action in the callstack view that copies the callstack to the clipboard. This can be very handy when you need to report a callstack with an issue.  \n![debug inline values](images/1_9/copy_stack.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_copy-callstack-action",
    "id": 3814
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Node Debugging  \n### Launch configuration snippets for Node scenarios  \nWe've added a few launch configuration snippets to support some commonly used Node.js debugging scenarios. These snippets can be used through IntelliSense when editing the `launch.json`:  \n![Launch configuration snippets for node.js](images/1_9/launch-snippets.png)  \nHere is the list of all snippets:  \n- **Launch Program**: Launch a node.js program in debug mode. The snippet asks you to enter the name of the program file.\n- **Launch via NPM**: Launch a node program through an npm 'debug' script. If you have defined an npm debug script in your package.json, you can use this directly from your launch configuration. Make sure that the debug port used in the npm script, corresponds to the port specified in the snippet.\n- **Attach to Port**: Attach to the debug port of a running Node.js program. Make sure that the Node.js program to debug has been started in debug mode and the debug port used is the same as the one specified in the snippet.\n- **Attach to Process**: Open the process picker to select a node or gulp process for debugging. With this launch configuration you can even attach to a node or gulp process that was not started in debug mode.\n- **Nodemon Setup**: Use nodemon to relaunch a debug session automatically whenever the JavaScript source has changed. Make sure that you have nodemon installed globally. Please note that terminating the debug session only terminates the program to debug, not nodemon itself. To terminate nodemon, press Control-C in the integrated terminal.\n- **Mocha Tests**: Debug mocha tests in a `test` folder of your project. Make sure that your project has 'mocha' installed in its node_modules folder.\n- **Yeoman generator**: Debug a yeoman generator. The snippet asks you to specify the name of the generator. Make sure that your project has 'yo' installed in its node_modules folder and that your generated project has been installed for debugging by running `npm link` in the project folder.\n- **Gulp task**: Debug a gulp task. The snippet asks you to specify the name of the gulp task. Make sure that your project has 'gulp' installed in its node_modules folder.",
    "url": "https://code.visualstudio.com/updates/v1_9#_launch-configuration-snippets-for-node-scenarios",
    "id": 3815
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Just My Code improvements  \nWe've added some finishing touches to the 'Just My Code' feature introduced in the last [milestone](https://code.visualstudio.com/updates/v1_8#_just-my-code-node-and-node2):  \n- Support for skipping core modules with the `skipFiles` attribute. It is now possible to use the 'magic name' `<node_internals>` in a glob pattern to refer to the core modules built into Node.js.  \nThe following example skips all internal modules but `events.js`:  \n```json\n\"skipFiles\": [\n\"<node_internals>/**/*.js\",\n\"!<node_internals>/events.js\"\n]\n```\n- Skipped source is now shown in a 'dimmed' style in the CALL STACK view:  \n![Skipped source is dimmed in call stack view](images/1_9/dimmed-callstack.png)  \nHovering over the dimmed entries explains why the stack frame is dimmed.  \n- Context menu action for skipping additional source files at runtime (`node2` only):  \n![toggle skip files](images/1_9/toggle-skip-file.png)  \nA new context menu item on the call stack, **Toggle skipping this file** enables you to easily skip a file at runtime without adding it to your launch config. This option only persists for the current debugging session. You can also use it to stop skipping a file that is skipped by the `skipFiles` option in your launch config.",
    "url": "https://code.visualstudio.com/updates/v1_9#_just-my-code-improvements",
    "id": 3816
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Support 'restart' option for 'launch' requests  \nFor quite some time the VS Code node debugger supported a `restart` attribute on `attach` configurations. See [here](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_attaching-to-nodejs) for details. With this release, we now support the `restart` attribute on `launch` configurations as well.  \nIf this feature is enabled, VS Code restarts a debug session whenever it detects the termination of Node.js. This feature can be used in combination with the `nodemon` utility which restarts Node.js whenever it detects that JavaScript source has been modified.  \nThis launch configuration (available as a snippet through IntelliSense) makes use of `nodemon` and the `restart` option:  \n```json\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"nodemon\",\n\"cwd\": \"${workspaceRoot}\",\n\"runtimeExecutable\": \"nodemon\",\n\"runtimeArgs\": [\n\"--debug=5858\"\n],\n\"program\": \"${workspaceRoot}/app.js\",\n\"restart\": true,\n\"port\": 5858\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_9#_support-'restart'-option-for-'launch'-requests",
    "id": 3817
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Source map support now always enabled  \nStarting with this release, source map support is enabled by default, so it is no longer necessary to set `sourceMaps` to `true`. However, it is still necessary to let the Node.js debugger know where the generated JavaScript lives by specifying the `outFiles` glob patterns. Source map support can be disabled by setting `sourceMaps` to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_9#_source-map-support-now-always-enabled",
    "id": 3818
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Better object display in the console (node2)  \nIn the `node2` debug adapter, calling `console.log` with an object will now show an expandable object in the console, instead of a text preview.  \n![log objects](images/1_9/log-objects.png)",
    "url": "https://code.visualstudio.com/updates/v1_9#_better-object-display-in-the-console-node2",
    "id": 3819
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Extension Authoring  \n### Editor API to insert a snippet  \nThere is a new `TextEditor#insertSnippet` method that allows you to insert a `SnippetString` into an editor.",
    "url": "https://code.visualstudio.com/updates/v1_9#_editor-api-to-insert-a-snippet",
    "id": 3820
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Updating CodeLens  \nA `CodeLensProvider` can now have a `onDidChangeCodeLenses`-event which signals to the editor that lenses have changed and need to be refreshed.",
    "url": "https://code.visualstudio.com/updates/v1_9#_updating-codelens",
    "id": 3821
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Completion item commit characters  \n`CompletionItems` can now have a list of commit characters. When a commit character is typed and while a completion is selected, the completion will be inserted as the character is being typed.",
    "url": "https://code.visualstudio.com/updates/v1_9#_completion-item-commit-characters",
    "id": 3822
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Added new ImplementationProvider API  \nA new `ImplementationProvider` interface was added to support the new **Go to Implementation** feature. A `ImplementationProvider` maps a location in a text document to a list of implementations locations, for example going from an interface to classes that implement this interface or from an abstract method to a list of implementing methods.  \nExtensions that want to support **Go to Implementation** can implement `ImplementationProvider` and register the provider using `vscode.languages.registerImplementationProvider`",
    "url": "https://code.visualstudio.com/updates/v1_9#_added-new-implementationprovider-api",
    "id": 3823
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New API to open an untitled file with optional language  \nA new overload was added to the `openTextDocument` method that allows to open an untitled document with optional language. For example you can call:  \n`openTextDocument({ language: 'xml' })`  \nTo create a text document with XML as language. If you leave out the language options, it will just create a text document with plain text language.",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-api-to-open-an-untitled-file-with-optional-language",
    "id": 3824
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### TextEditorRevealType.AtTop  \nA new `AtTop` value was added to the `TextEditorRevealType` enum. This reveals the range at the top of the viewport.",
    "url": "https://code.visualstudio.com/updates/v1_9#_texteditorrevealtype.attop",
    "id": 3825
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### CompletionItemKind.Folder  \nA new `Folder` value was added to the `CompletionItemKind` enum.",
    "url": "https://code.visualstudio.com/updates/v1_9#_completionitemkind.folder",
    "id": 3826
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Proposed Progress API  \nWe have a proposed API to show progress in different places of the editor, such as the Status Bar or a view. It is still in its early stages and we are looking for feedback. To try it out, do the following:  \n* Copy [vscode.proposed.d.ts](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.proposed.d.ts#L30) into your TypeScript project.\n* In the `package.json` of your extension, add `\"enableProposedApi\": true` to enable the proposed APIs.  \nNote that proposed APIs are only available when developing an extension but not when an extension is published to the Marketplace.",
    "url": "https://code.visualstudio.com/updates/v1_9#_proposed-progress-api",
    "id": 3827
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Contributable SCM Providers  \nWe started large refactorings around source control in order to provide SCM functionality from different [contributable providers](https://github.com/microsoft/vscode/issues/2824). At the same time, all Git functionality is being ported over to an [SCM provider](https://github.com/microsoft/vscode/blob/23c4c8d1b881cfbf48e76fbe67e350b4efecba68/src/vs/vscode.proposed.d.ts#L143).  \nThe new behavior is available for you to try out with via the **SCM: Enable Preview SCM** command, which will replace the current Git functionality with the experimental one (run **SCM: Disable Preview SCM** to undo). Be aware that this is not feature complete nor without issues. You can track progress in [#18615](https://github.com/microsoft/vscode/issues/18615).",
    "url": "https://code.visualstudio.com/updates/v1_9#_contributable-scm-providers",
    "id": 3828
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Debugger Extension Authoring  \nWe've added the following (optional) sub-contribution points to the `debuggers` contribution point:  \n- `languages`<BR>Here those languages can be listed for which the debug extension could be considered the \"default debugger\". VS Code makes use of this information only in cases where a debugger must be found automatically for a given source language.  \n- `startSessionCommand`<BR>takes the ID of a command which VS Code calls for any \"debug\" or \"run\" action targeted for this extension. If a launch configuration was selected, it is passed as an argument to the command (and the extension can massage the launch config as desired). If \"debug\" or \"run\" is executed without an existing launch config, an empty launch config is passed to the `startSessionCommand` and the extension is expected to \"fill in\" missing attributes e.g. based on the file currently open in the editor.  \n- `adapterExecutableCommand`<BR>VS Code launches a debug adapter by using the (static) attributes `program`, `args`, `runtime` and `runtimeArgs` from the package.json of the corresponding extension. Starting with this milestone an extension can alternatively contribute a command where the debug adapters executable path and arguments are dynamically calculated.<BR>Instead of defining the attributes `program`,  `args`, `runtime` and `runtimeArgs` on a debuggers contribution in the package.json, set a new attribute `adapterExecutableCommand` to the ID of a command that is registered in the extension. Make this command return a structure with this format:\n```json\ncommand: \"<executable>\",\nargs: [ \"<argument1>\", \"<argument2>\", ... ]\n```\nThe attribute `command` must be a either an absolute path to an executable or a name of executable looked up via the PATH environment variable. The special value `node` will be mapped to VS Code's built-in node runtime without being looked up on the PATH.",
    "url": "https://code.visualstudio.com/updates/v1_9#_debugger-extension-authoring",
    "id": 3829
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### VS Code Debug Protocol  \nA new optional attribute `presentationHint` has been added to the `Source` type. With this a debug adapter can provide a hint for how to render a source in the UI. A value of `deemphasize` can be used to indicate that the source is not available or that it is skipped on stepping.",
    "url": "https://code.visualstudio.com/updates/v1_9#_vs-code-debug-protocol",
    "id": 3830
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n## Miscellaneous  \n### Settings and security  \nIn settings, we allow you to specify some of the executables that VS Code uses to do its work. For example, you can choose which shell the Integrated Terminal should use. Until now, just like any other setting, you could define them either as user settings or workspace settings. For enhanced security, we no longer allow such settings to be defined at the workspace level.  \nHere is the complete list of settings we no longer support at the workspace level:  \n- git.path\n- terminal.integrated.shell.linux\n- terminal.integrated.shellArgs.linux\n- terminal.integrated.shell.osx\n- terminal.integrated.shellArgs.osx\n- terminal.integrated.shell.windows\n- terminal.integrated.shellArgs.windows\n- terminal.external.windowsExec\n- terminal.external.osxExec\n- terminal.external.linuxExec  \nWhen you open a workspace and we find for the first time that the workspace defines any of these settings, VS Code will warn you and subsequently ignore the values.  \nThe `typescript.tsdk` and `php.validate.executablePath` setting created a similar security exposure which has been addressed separately.",
    "url": "https://code.visualstudio.com/updates/v1_9#_settings-and-security",
    "id": 3831
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Launch new instance from Unity on Ubuntu  \nThe standard shortcuts to launch a new instance of an application from the Ubuntu Unity user interface now correctly open a new instance of VS Code (`kbstyle(Win+Shift+<number>)`, `kbstyle(Shift)`+click, middle click).",
    "url": "https://code.visualstudio.com/updates/v1_9#_launch-new-instance-from-unity-on-ubuntu",
    "id": 3832
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### New command to report performance issues  \nWe added a new command, **Report Performance Issues** in the **Command Palette**, that makes it very easy to open a new GitHub issue with details about your environment and performance timings prefilled into the issue description (OS, CPUs, Memory, task timings). If you think that VS Code is starting slow on your system, please use this new command to tell us about it!",
    "url": "https://code.visualstudio.com/updates/v1_9#_new-command-to-report-performance-issues",
    "id": 3833
  },
  {
    "content": "See what is new in the Visual Studio Code January 2017 Release (1.9)\n### Editor Performance Optimization  \nWe have added a heuristic that reduces the time taken to paint a frame in the editor significantly in certain conditions (that occur more than 95% of the time).  \nIf the font you are using is monospace (most of the programming fonts are monospace), if a certain line consists only of ASCII characters (most of the lines in source code stick to the ASCII range 32-126 or tabs), and if certain editor decorations (like the color boxes in CSS) are not present on a line, we can skip interrogating the browser about where the text has ended up painted and simply do the math in JavaScript.  \nThis optimization saves us a forced browser layout and further decreases the time it takes us to paint a frame.  \n>Note: If you notice the cursor being rendered slightly off from the text, please let us know. You can disable this optimization via `editor.disableMonospaceOptimizations`.",
    "url": "https://code.visualstudio.com/updates/v1_9#_editor-performance-optimization",
    "id": 3834
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Accessibility  \n### Set keybindings from the accessibility help dialog  \nAccessibility help dialogs give you an overview of important commands for a feature or view. When a command lacks a keybinding assignment, you can now configure it from within the accessibility help dialog with `kb(editor.action.accessibilityHelpConfigureKeybindings)`.",
    "url": "https://code.visualstudio.com/updates/v1_90#_set-keybindings-from-the-accessibility-help-dialog",
    "id": 3836
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Experimental: signal delay settings  \nWhen the setting <code codesetting=\"accessibility.signalOptions.debouncePositionChanges\">Debounce position changes</code> is enabled, you can use the setting <code codesetting=\"accessibility.signalOptions.delays\">Signal options delays</code> to customize the debouncing time for various accessibility signals.",
    "url": "https://code.visualstudio.com/updates/v1_90#_experimental:-signal-delay-settings",
    "id": 3837
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Workbench  \n### Editor tabs multi select  \nYou can now select multiple tabs simultaneously, enabling you to apply actions to multiple editors at once. This new feature enables you to move, pin, or close several tabs with a single action. To add another tab to your selection, use `Ctrl + Click` (`Cmd + Click` on macOS). To select a range of tabs, use `Shift + Click`.  \n<video src=\"images/1_90/tabs-multi-select.mp4\" title=\"Select multiple tabs and move/close them\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_90#_editor-tabs-multi-select",
    "id": 3838
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Always show editor actions  \nWe are introducing the <code codesetting=\"workbench.editor.alwaysShowEditorActions\">Always Show Editor Actions</code> setting. When you enable this setting, the editor title actions of each editor group are always shown, regardless of whether the editor is active or not.  \nWhen the setting is not enabled (default value), the editor actions are only shown when the editor is active:  \n![Editor Actions of each group when the setting is disabled](images/1_90/editor-actions-default.png)  \nIf you enable the setting, the editor actions are always available, even when the editor is not active:  \n![Editor Actions of each group when the setting is enabled](images/1_90/editor-actions-always.png)",
    "url": "https://code.visualstudio.com/updates/v1_90#_always-show-editor-actions",
    "id": 3839
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Set disable-lcd-text as a runtime argument  \nWith `disable-lcd-text`, you can disable RGB subpixel rendering on Windows. The `disable-lcd-text` setting is now supported as a runtime argument in the `argv.json` file. Previously, it was only available as an undocumented CLI flag. Use the **Preferences: Configure Runtime Arguments** command to configure the runtime arguments.  \nIn the following image you can see a side-by-side comparison, where on the left side `disable-lcd-text` is `true`, and on the right side it is `false`.  \n![Comparison showing that disable-lcd-text disables RGB subpixel rendering](images/1_90/h-side-by-side.png)  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_90#_set-disable-lcd-text-as-a-runtime-argument",
    "id": 3840
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Configure custom profile for new window  \nPreviously, when you opened a new VS Code window, it used the [profile](https://code.visualstudio.com/docs/editor/profiles) of the active window or the default profile, if there was no active window. You can now specify which profile should be used when opening a new window by configuring the <code codesetting=\"window.newWindowProfile\">window.newWindowProfile</code> setting.  \n![Configure custom profile for new window](images/1_90/profile-new-window.png)",
    "url": "https://code.visualstudio.com/updates/v1_90#_configure-custom-profile-for-new-window",
    "id": 3841
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Source Control  \n### Focus input/resource group commands  \nThis milestone, we have added several workbench commands, so that you can create keyboard shortcuts for them:  \n- Focus on the next or previous source control input field: `workbench.scm.action.focusNextInput`, `workbench.scm.action.focusPreviousInput`\n- Focus on the next or previous resource group within a repository: `workbench.scm.action.focusNextResourceGroup`, `workbench.scm.action.focusPreviousResourceGroup`",
    "url": "https://code.visualstudio.com/updates/v1_90#_focus-input/resource-group-commands",
    "id": 3842
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Notebooks  \n### Find in cell selection  \nWhen you're in a notebook, you can now use the Find control to search within specific ranges of selected cells.  \nAfter you set <code codesetting=\"notebook.experimental.find.scope.enabled\">notebook.experimental.find.scope.enabled</code> to `true`, the **Find in Cell Selection** toggle will be available in the Find control. You can then select a range of cells and either open the Find control or, if it's already open, select the \"Find in Cell Selection\" button.  \n<video src=\"images/1_90/notebook-find-in-cell-selection.mp4\" title=\"Notebook Find in Cell Selection\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_90#_find-in-cell-selection",
    "id": 3843
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Notebook Format Code Actions  \nNotebooks now support a new kind of Code Action, which is defined with the `notebook.format` Code Action Kind prefix. These Code Actions can be triggered automatically via an explicit formatting request (using the command **Notebook: Format Notebook**) or a formatting on save request.  \nThese can be used to provide more powerful formatting, through the use of Workspace Edits and Notebook Edits. To get started, check out an example extension in the [vscode-extension-samples](https://github.com/microsoft/vscode-extension-samples/tree/main/notebook-format-code-action-sample) repository.",
    "url": "https://code.visualstudio.com/updates/v1_90#_notebook-format-code-actions",
    "id": 3844
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Terminal  \n### \u26a0\ufe0f Removal of the canvas renderer  \nThe canvas renderer was deprecated in the VS Code 1.89 release and is now removed completely. This means that on the small number of machines that do not support WebGL2, the terminal now uses the DOM-based renderer. You can read more about GPU acceleration in the [terminal documentation](https://code.visualstudio.com/docs/terminal/appearance#_gpu-acceleration).",
    "url": "https://code.visualstudio.com/updates/v1_90#_\u26a0\ufe0f-removal-of-the-canvas-renderer",
    "id": 3845
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Rescaling overlapping glyph in the terminal  \nThe setting <code codesetting=\"terminal.integrated.rescaleOverlappingGlyphs\">terminal.integrated.rescaleOverlappingGlyphs</code>, introduced as a preview feature in the VS Code 1.88 release, is now enabled by default. This feature rescales glyphs that overlap following cells that are intended to cover ambiguous-width characters, and which might have font glyphs that don't match what the backing pty/unicode version thinks it is.  \nFor example, in most fonts the roman numeral unicode characters (`U+2160+`) typically takes up multiple cells, so they are rescaled horizontally when this setting is enabled.  \nWithout rescaling:  \n![Before the glyphs for \u2167 and \u216b depending on the font would always overlap the following cells](images/1_88/terminal-glyphs-before.png)  \nWith rescaling:  \n![After the glyphs for \u2167 and \u216b depending on the font are rescaled horizontally to fit a single cell](images/1_88/terminal-glyphs-after.png)",
    "url": "https://code.visualstudio.com/updates/v1_90#_rescaling-overlapping-glyph-in-the-terminal",
    "id": 3846
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Contributions to extensions  \n### GitHub Copilot  \n#### Attach context to chat  \nTo make your chat prompts more specific, you can add context to your chat messages. You can now attach more types of context to a chat message, such as workspace symbols. Previously, you used the '#' symbol to reference a file, or the current selection. Now, you can attach context  to a chat message by selecting the \ud83d\udcce icon in the Chat view input field, or by typing `kb(workbench.action.chat.attachContext)`.  \n> **Tip**: Use the right arrow key to quickly attach context in the background while you keep the context picker open. When you're in the editor, you can also right-click on a selection and choose **Copilot > Add Selection to Chat**.  \n<video src=\"images/1_90/chat-context-attachments.mp4\" title=\"Attach context to chat\" autoplay loop controls muted></video>  \n#### Ask questions using Bing search and enterprise knowledge bases  \n[GitHub Copilot Enterprise](https://docs.github.com/en/enterprise-cloud@latest/copilot/github-copilot-enterprise/overview/about-github-copilot-enterprise) users in VS Code can now ask questions that are enriched with context from web results and your enterprise's [knowledge bases](https://docs.github.com/en/enterprise-cloud@latest/copilot/github-copilot-enterprise/copilot-chat-in-github/managing-copilot-knowledge-bases). To try out this functionality, install the latest pre-release of Copilot Chat.  \nIn the Chat view, you can ask questions like `@github What is the latest LTS of Node.js? #web` to take advantage of web search. Any search results referenced by Copilot are displayed in the `Used References` section of the chat response.  \n![Web search results in Copilot Chat](images/1_90/copilot-enterprise-bing-search.png)  \nYou can also ask questions about your enterprise's knowledge bases, which are collections of Markdown repositories containing documentation, directly from VS Code. Simply type `@github #kb` to pick from the knowledge bases available to you. Similarly, any knowledge base snippets referenced by Copilot are displayed in the `Used References` section of the chat response.  \nThis enables Copilot Enterprise users to combine search results and internal documentation with editor context by using existing chat variables, such as `#file` and `#selection`. Please try it out and share your feedback with us at https://github.com/microsoft/vscode-copilot-release!  \n#### IntelliSense in chat code blocks  \nWe now support basic IntelliSense within Copilot-generated code blocks. This lets you use many of the same IntelliSense tools that you might already use in the editor and can help you better understand the generated code.  \n![Hover IntelliSense in Copilot chat code block](images/1_90/copilot-hover-intellisense.png)  \nThe supported IntelliSense features include:  \n- Go to definition by using `kbstyle(ctrl)` `kbstyle(click)` / `kbstyle(cmd)` `kbstyle(click)` or `kb(editor.action.revealDefinition)`\n- Hovers\n- Go to implementation\n- Go to type definition  \nIntelliSense can even be used with `@workspace` to learn about any workspace symbols that are used in Copilot responses.  \n<video src=\"images/1_90/copilot-workspace-intellisense.mp4\" title=\"IntelliSense on a @workspace code block\" autoplay loop controls muted></video>  \nIntelliSense for TypeScript, JavaScript, HTML, and CSS code blocks is available out of the box. For additional language support, try installing an extension for that language, although not every language extension already has support for code block IntelliSense. Please file feature requests for any languages that aren't yet supporting this.  \n#### Improved links in chat responses  \nWe improved chat responses by adding links for file names and symbols. By selecting these links, you can navigate to the corresponding file or symbol in the editor.  \n![Clickable links for symbols used with /explain](images/1_90/copilot-link-explain.png)  \n![Clickable file and symbol links for an @workspace question](images/1_90/copilot-link-workspace.png)  \n#### Roam active chat between inline chat and Chat view  \nYou can now move a chat request that is completed or still active from inline chat to the Chat view. You might use this feature to clean up inline chat and move conversations to a more persistent place. To move a request, select the chat icon next to the chat input box.  \n![Move a chat conversation from inline chat to the Chat view](images/1_90/move-chat-conversation-to-chat-view.png)  \n#### Automatic rename suggestions  \nIf you use the [Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extension, the Copilot-powered rename suggestions are now triggered automatically when you rename a symbol. You can turn this feature off by using the setting <code codesetting=\"github.copilot.renameSuggestions.triggerAutomatically\">github.copilot.renameSuggestions.triggerAutomatically</code>.  \n<video src=\"images/1_90/rename-suggestions.mp4\" title=\"Automatically-triggered rename suggestions\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_90#_github-copilot",
    "id": 3847
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Python  \n#### Testing bug fixes  \nThe experience with pytest when using the Python Testing Rewrite has been improved to offer better support for setting pytest's cwd when it is adjacent to the VS Code workspace root, and for displaying parameterized tests on the test explorer when function names are repeated across classes.  \nAdditionally, we reduced some test discovery failure scenarios by adding the system configuration script path to PATH to enable shell for test execution.  \n#### Experimental: Python Native REPL with Intellisense and Syntax Highlighting  \nYou can now run your Python code in an editor-like REPL environment equipped with features like Intellisense and syntax highlighting to make interactions with the REPL more efficient. To enable this feature, set `\"python.REPL.sendToNativeREPL\": true` in your `settings.json` file. This will execute code in the Python Native REPL on `kbstyle(Shift+Enter)` and **Run Selection/Line**.  \nYou can opt to use the in-terminal Python REPL ( >>> ) by setting `\"python.REPL.sendToNativeREPL\": false` in your `settings.json`. Moreover, the Python Native REPL will smartly execute on `kbstyle(Enter)`, similar to Python\u2019s original interactive interpreter, if you add the setting `\"interactiveWindow.executeWithShiftEnter\": false`, in your `settings.json`.",
    "url": "https://code.visualstudio.com/updates/v1_90#_python",
    "id": 3848
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. Review the [changelog for the 0.90.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0900) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_90#_github-pull-requests-and-issues",
    "id": 3849
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### VS Code Speech  \nWe added support for text-to-speech capabilities to the [VS Code Speech](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-speech) extension. A new setting <code codesetting=\"accessibility.voice.autoSynthesize\">accessibility.voice.autoSynthesize</code> can be enabled to automatically read out aloud Copilot Chat responses when voice was also used as input.  \n<video src=\"images/1_90/text-to-speech.mp4\" title=\"Text to Speech in Copilot Chat\" autoplay loop controls muted></video>  \nNotice how the microphone icon in the input field changes, indicating that text is read out aloud. To interrupt the synthesis, select the icon or press `kb(workbench.action.speech.stopReadAloud)`.  \nEach chat response also shows a new speaker icon, so that you can selectively read out a response aloud:  \n![Text to Speech for a Chat Response](images/1_90/text-to-speech.png)  \nYou can change the language that is used for text-to-speech via the existing <code codesetting=\"accessibility.voice.speechLanguage\">accessibility.voice.speechLanguage</code> setting.",
    "url": "https://code.visualstudio.com/updates/v1_90#_vs-code-speech",
    "id": 3850
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Preview Features  \n### VS Code-native IntelliSense for PowerShell  \nIn addition to several reliability improvements, we made the following changes to PowerShell IntelliSense in the terminal:  \n- `terminal.integrated.shellIntegration.suggestEnabled` has changed to `terminal.integrated.suggest.enabled`\n- The new `terminal.integrated.suggest.quickSuggestions` controls whether suggestions are shown when you type after whitespace\n- The new `terminal.integrated.suggest.suggestOnTriggerCharacters` controls whether suggestions are shown when you type `/`, `\\` or `-`",
    "url": "https://code.visualstudio.com/updates/v1_90#_vs-code-native-intellisense-for-powershell",
    "id": 3851
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### TypeScript 5.5  \nWe continued improving our support for the upcoming TypeScript 5.5 release. Check out the [TypeScript 5.5 beta blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/) and [iteration plan](https://github.com/microsoft/TypeScript/issues/57475) for details on this release.  \nTo start using the TypeScript 5.5 beta, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Please share feedback and let us know if you run into any bugs with TypeScript 5.5.",
    "url": "https://code.visualstudio.com/updates/v1_90#_typescript-5.5",
    "id": 3852
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Issue Reporter for Web  \nWe have improved the issue reporting flow in VS Code for the Web to match what users currently have on desktop. Selecting **Help: Report Issue** opens the issue reporter page in a new window, where users can select a bug type, source, and extension if necessary. Extension information, system information, and more is automatically attached to the issue that is created in GitHub.  \nThis feature is currently disabled by default on this release, but please share feedback on it by turning on the <code codesetting=\"issueReporter.experimental.webReporter\">issueReporter.experimental.webReporter</code> setting.",
    "url": "https://code.visualstudio.com/updates/v1_90#_issue-reporter-for-web",
    "id": 3853
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Extension authoring  \n### Use esbuild for extensions  \nThe `yo code` extension generators for `TypeScript` and `Web` now have an option to use `esbuild` as bundler. When you select `esbuild`, this creates a `esbuild.js` build script and adds script entries in `package.json` and build tasks in `.vscode/tasks.json`.  \nTo use `esbuild` in existing extensions, check out the [bundling extensions](https://code.visualstudio.com/api/working-with-extensions/bundling-extension) and the [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) guides.  \nYou can find a sample project at [vscode-extension-samples/esbuild-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/esbuild-sample).",
    "url": "https://code.visualstudio.com/updates/v1_90#_use-esbuild-for-extensions",
    "id": 3854
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Chat and Language Model API  \nWe have finalized APIs that enable extensions to participate in chat and to access language models. See the [extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-sample) and the [chat extensions doc page](https://code.visualstudio.com/api/extension-guides/chat) for more information, or watch the [Enhancing VS Code extensions with GitHub Copilot](https://www.youtube.com/watch?v=YI7kjWzIiTM) talk we delivered at the Microsoft Build conference.  \n> **Important**: These APIs are finalized but are currently only available in VS Code Insiders.  \n#### Chat Participants  \nThe Chat Participants API enables extensions to extend GitHub Copilot Chat with a chat participant that can be invoked in the chat input field with `@`. The participant can reply to user requests with markdown, a file tree, buttons to run VS Code commands, or other types of content.  \n![Chat Participant example in the Chat view](images/1_90/chat-example.png)  \n#### Language Model  \nThe Language Model API enables access to Copilot's chat models, such as gpt-3.5 and gpt-4. This API can be used for chat participants but also to enrich other features. The API is built around [`LanguageModelChat`](https://github.com/microsoft/vscode/blob/54dd0ecc653b89e6032369c6f4b1808bc8e37ec5/src/vscode-dts/vscode.d.ts#L19032) objects, which are used for chat requests and for counting tokens.  \nThe only way to access chat objects is the `vscode.lm.selectChatModels` function. The function accepts a selector to narrow down on different properties of chat models, for example by vendor, family, version, or identifier. The values are relatively free-form and must be looked up in the documentation of the extensions that provide them. Today, only the Copilot Chat extension contributes chat models. It uses the `copilot` vendor and current families are `gpt-3.5-turbo` and `gpt-4` but are subject to change.  \nThe snippet shows how to select all chat models from the `copilot`-vendor:  \n```ts\nconst models = await vscode.lm.selectChatModels({\nvendor: 'copilot',\n});\n\nif(models.length === 0) {\n// no models available\nreturn;\n}\n```  \nTwo things are very **important** when callng `selectChatModels`  \n1. The function returns an _empty_ array if no models are available and extensions must handle this case.\n2. Copilot's chat models require consent from the user before an extension can use them. Consent is implemented as authentication dialog. Because of that, `selectChatModels` should be called as part of a user-initiated action like a command, and not \"out of the blue\".  \nWith a chat object at hand, extensions can now use it to send chat requests. The following snippet shows how to send a chat request and process the response stream.  \n```ts\n// take the first model and say \"Hello\"\nconst [chat] = models;\nconst messages = [vscode.LanguageModelChatMessage.User('Hello')];\nconst response = await chat.sendRequest(messages);\n\n// the response is always an async iterable that can be consumed with for-await\nfor await (const part of response.text) {\nconsole.log(part)\n}\n```  \nThis is the gist of the language model API. Refer to the [extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-sample) for a more complete example. Stay tuned for more samples, documentation, and further extensions of the API.  \nThe Java extension for VS Code is already using the Language Model API to provide Copilot-based rewrite capabilities for your Java code. Learn more about these updates in the [Java in Visual Studio Code May 2024](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-may-2024/) blog post.  \n##### `@vscode/prompt-tsx` library  \nTo aid with developing GitHub Copilot extensions for VS Code, we've developed and published a TSX-based library for declaring complex prompts and converting them to chat messages, subject to your LLM's context window limits. In developing this, we took inspiration from Anysphere's [`priompt`](https://github.com/anysphere/priompt) library. If you're an extension author who is planning to use the chat and language model APIs, consider trying out the latest alpha release of this library: [@vscode/prompt-tsx](https://www.npmjs.com/package/@vscode/prompt-tsx).",
    "url": "https://code.visualstudio.com/updates/v1_90#_chat-and-language-model-api",
    "id": 3855
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Extending GitHub Copilot through GitHub Apps  \nIt is also possible to extend GitHub Copilot by contributing a GitHub App. This GitHub App can contribute a chat participant in the Chat view, which you can invoke with `@`. A GitHub App is backed by a service and works across all GitHub Copilot surfaces, such as github.com, Visual Studio, or VS Code. GitHub Apps do not have full access to the VS Code API. To extend GitHub Copilot through a GitHub App, you should join the [Copilot Partner Program](https://github.com/features/preview/copilot-partner-program). You can learn more by watching the [Extending GitHub Copilot](https://build.microsoft.com/en-US/sessions/0121ee70-fd82-419f-a7ad-75bbb70cfd41) talk we delivered at the Microsoft Build conference.",
    "url": "https://code.visualstudio.com/updates/v1_90#_extending-github-copilot-through-github-apps",
    "id": 3856
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Debug Stack Focus API  \nVS Code now exposes what stack frame and thread are focused in the Debug view via a new API. `vscode.debug.activeStackItem` retrieves what stack item (thread or stack frame) is currently focused, and `vscode.debug.onDidChangeActiveStackItem` is an event that fires when that changes.  \nThis is useful in conjunction with APIs that extend VS Code's debug capabilities, such as ones that use the `DebugAdapterTracker`. Learn more about creating a [debugger extension](https://code.visualstudio.com/api/extension-guides/debugger-extension).",
    "url": "https://code.visualstudio.com/updates/v1_90#_debug-stack-focus-api",
    "id": 3857
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### `TestRunRequest.preserveFocus` API  \nPreviously, test runs that were triggered by extensions would never move focus into the Test Results view in the same way that UI-initiated runs did. This behavior is now configurable via a `preserveFocus` flag that can be set when creating a `TestRunRequest`. This flag defaults to `true` to maintain backwards compatibility.",
    "url": "https://code.visualstudio.com/updates/v1_90#_testrunrequest.preservefocus-api",
    "id": 3858
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Proposed APIs  \n### Attributable test coverage  \nWe're working on an API that enables attributing test coverage on a per-test basis. This lets users see which tests ran which code, filtering both the coverage shown in the editor and that in the **Test Coverage** view. Check [vscode#212196](https://github.com/microsoft/vscode/issues/212196) for more information and updates.",
    "url": "https://code.visualstudio.com/updates/v1_90#_attributable-test-coverage",
    "id": 3859
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Hover Verbosity Level  \nLast milestone, a new API was proposed to provide hovers for which the verbosity can be increased or decreased. This milestone, the API has changed so that the `HoverVerbosityRequest` uses a `verbosityDelta` to signal the relative increase or decrease in the hover verbosity level. Previously, the `HoverVerbosityRequest` used an enum `HoverVerbosityAction` to signal if the verbosity should be increased or decreased.",
    "url": "https://code.visualstudio.com/updates/v1_90#_hover-verbosity-level",
    "id": 3860
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n## Engineering  \n### Tracking memory efficiency on startup  \nWe measure startup performance of VS Code insiders every day across Windows, macOS and Linux. Our main interest is how fast startup is until a text file is opened.  \nThis month we added another metric that we plan to improve to make startup even faster: how much memory do we consume and how much of that memory ends up being garbage collected by V8. If we can bring that number down, startup time will be less affected by V8 garbage collection runs.  \n![Memory consumption statistics for VS Code](images/1_90/memory-perf.png)",
    "url": "https://code.visualstudio.com/updates/v1_90#_tracking-memory-efficiency-on-startup",
    "id": 3861
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Electron 29 update  \nIn this milestone, we are promoting the Electron 29 update to users on our stable release. This update comes with Chromium 122.0.6261.156 and Node.js 20.9.0. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.",
    "url": "https://code.visualstudio.com/updates/v1_90#_electron-29-update",
    "id": 3862
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_90#_issue-tracking",
    "id": 3863
  },
  {
    "content": "Learn what is new in the Visual Studio Code May 2024 Release (1.90)  \n### Pull requests  \nContributions to `vscode`:  \n* [@BrunoSoaresEngineering](https://github.com/BrunoSoaresEngineering): feat(markdown-language-features): #208398 add avif as image extension [PR #212547](https://github.com/microsoft/vscode/pull/212547)\n* [@bsShoham (Shoham Ben Shitrit)](https://github.com/bsShoham): remove global enablement message [PR #213128](https://github.com/microsoft/vscode/pull/213128)\n* [@CharlesHGong (Hanning Gong (Charles))](https://github.com/CharlesHGong): Fix an issue where defaultLinesDiffComputer does not pass in the timeout variable [PR #213035](https://github.com/microsoft/vscode/pull/213035)\n* [@cpendery (Chapman Pendery)](https://github.com/cpendery): refactor: support dynamic terminal prompt detection without regex on windows [PR #211382](https://github.com/microsoft/vscode/pull/211382)\n* [@DatN99 (Dat Nguyen)](https://github.com/DatN99): Added setting for notebook cell markdown lineheight [PR #212531](https://github.com/microsoft/vscode/pull/212531)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Make codelenses work after switching from webview editor (fix #198309) [PR #211999](https://github.com/microsoft/vscode/pull/211999)\n* Revive `TimelineChangeEvent.uri` if passed in `TimelineProvider.onDidChange` event [PR #212927](https://github.com/microsoft/vscode/pull/212927)\n* [@kdy1 (Donny/\uac15\ub3d9\uc724)](https://github.com/kdy1): feat: Use official json schema for SWC [PR #212158](https://github.com/microsoft/vscode/pull/212158)\n* [@mahmoudsalah1993 (Mahmoud Salah)](https://github.com/mahmoudsalah1993): Fire onDidRegisterAllSupported executions if any execution type is re\u2026 [PR #212163](https://github.com/microsoft/vscode/pull/212163)\n* [@Maximetinu (Miguel Medina Ballesteros)](https://github.com/Maximetinu): Add `AccessibilitySignal.terminalCommandSucceeded` and `success.mp3` (issue #178989)  [PR #204430](https://github.com/microsoft/vscode/pull/204430)\n* [@OccasionalDebugger](https://github.com/OccasionalDebugger)\n* Respect stackframe deemphasize in getTopStackFrame [PR #211855](https://github.com/microsoft/vscode/pull/211855)\n* Pass full function breakpoint options from plugin [PR #211895](https://github.com/microsoft/vscode/pull/211895)\n* [@pouyakary (Pouya Kary \u2728)](https://github.com/pouyakary): Feat: Bolder Typeface + Configurable Letter Spacing for Minimap's Section Header Labels \u2728 [PR #209990](https://github.com/microsoft/vscode/pull/209990)\n* [@sean-mcmanus (Sean McManus)](https://github.com/sean-mcmanus): Add /** */ to cpp/language-configurations.json [PR #211202](https://github.com/microsoft/vscode/pull/211202)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n* fix: dispose template data disposables in source column renderer [PR #202618](https://github.com/microsoft/vscode/pull/202618)\n* feature: enable typescript isolated modules [PR #212913](https://github.com/microsoft/vscode/pull/212913)\n* Add editor.findMatchForeground [PR #213497](https://github.com/microsoft/vscode/pull/213497)\n* fix wrong colors when editor findMatchForeground is not defined [PR #213686](https://github.com/microsoft/vscode/pull/213686)\n* [@walkerdb (Walker Boyle)](https://github.com/walkerdb): fix: tsserver no longer crashes when log path includes spaces [PR #212752](https://github.com/microsoft/vscode/pull/212752)\n* [@wenfangdu (Wenfang Du)](https://github.com/wenfangdu): Add 'git-rebase-todo' to COMMON_FILES_FILTER in WorkspacesHistoryMainService [PR #211614](https://github.com/microsoft/vscode/pull/211614)\n* [@Yesterday17 (Yesterday17)](https://github.com/Yesterday17): fix: remove temp dir if extension is installed by another source [PR #213379](https://github.com/microsoft/vscode/pull/213379)  \nContributions to `vscode-eslint`:  \n* [@sapegin (Artem Sapegin)](https://github.com/sapegin): feat: Allow eslint.rules.customizations to target all fixable rules [PR #1841](https://github.com/microsoft/vscode-eslint/pull/1841)  \nContributions to `vscode-extension-samples`:  \n* [@moushicheng (\u67d0\u65f6\u6a59)](https://github.com/moushicheng): fix: lsp-embedded-language-serviceadd  add activationEvents to invoke  client [PR #936](https://github.com/microsoft/vscode-extension-samples/pull/936)  \nContributions to `vscode-generator-code`:  \n* [@1chooo (Hugo ChunHo Lin)](https://github.com/1chooo): Remove Unnecessary Spaces in `ext-command-ts/vsc-extension-quickstart.md` [PR #467](https://github.com/microsoft/vscode-generator-code/pull/467)\n* [@k35o (k8o)](https://github.com/k35o): convert spaces to tabs in files in `vscode` folder on `templates` folder [PR #458](https://github.com/microsoft/vscode-generator-code/pull/458)  \nContributions to `vscode-hexeditor`:  \n* [@lorsanta (Lorenzo Santangelo)](https://github.com/lorsanta): add copy selection as different formats and paste hexstring support [PR #498](https://github.com/microsoft/vscode-hexeditor/pull/498)\n* [@tomilho (Tom\u00e1s Silva)](https://github.com/tomilho): Add copyOffsetAsHex/Dec [PR #521](https://github.com/microsoft/vscode-hexeditor/pull/521)  \nContributions to `vscode-languageserver-node`:  \n* [@hyangah (Hyang-Ah Hana Kim)](https://github.com/hyangah): Add SemanticTokenTypes.label [PR #1423](https://github.com/microsoft/vscode-languageserver-node/pull/1423)\n* [@imbant (imbant)](https://github.com/imbant): fix \u201cSemantic tokens that are not in ascending order will not be highlighted\u201d [PR #1467](https://github.com/microsoft/vscode-languageserver-node/pull/1467)\n* [@rchiodo (Rich Chiodo)](https://github.com/rchiodo): Support pulling diagnostics for notebooks too [PR #1465](https://github.com/microsoft/vscode-languageserver-node/pull/1465)  \nContributions to `vscode-mypy`:  \n* [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal): fix: deprecated document getting usage [PR #302](https://github.com/microsoft/vscode-mypy/pull/302)  \nContributions to `vscode-remote-try-dotnet`:  \n* [@cmaneu (Christopher MANEU)](https://github.com/cmaneu): Migrate demo app to .NET 6 [PR #31](https://github.com/microsoft/vscode-remote-try-dotnet/pull/31)  \nContributions to `language-server-protocol`:  \n* [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721): add-make-lsp [PR #1941](https://github.com/microsoft/language-server-protocol/pull/1941)\n* [@fbricon (Fred Bricon)](https://github.com/fbricon): Add LSP4IJ client to tools.md [PR #1940](https://github.com/microsoft/language-server-protocol/pull/1940)\n* [@macnetic (Magnus Oksb\u00f8l Therkelsen)](https://github.com/macnetic): Add Verible language server for SystemVerilog [PR #1929](https://github.com/microsoft/language-server-protocol/pull/1929)\n* [@ssbarnea (Sorin Sbarnea)](https://github.com/ssbarnea): Correct link to Ansible Language Server [PR #1930](https://github.com/microsoft/language-server-protocol/pull/1930)\n* [@wiremoons (Simon Rowe)](https://github.com/wiremoons): Update servers.md - add OLS for Odin language [PR #1931](https://github.com/microsoft/language-server-protocol/pull/1931)\n* [@ybiquitous (Masafumi Koba)](https://github.com/ybiquitous): Add LanguageServer::Protocol in Ruby to SDKs [PR #1937](https://github.com/microsoft/language-server-protocol/pull/1937)  \nContributions to `monaco-editor`:  \n* [@htcfreek (Heiko)](https://github.com/htcfreek): Add extension to `csp.contribution.ts` [PR #4504](https://github.com/microsoft/monaco-editor/pull/4504)\n* [@jakebailey (Jake Bailey)](https://github.com/jakebailey): Call clearFiles on internal EmitOutput diagnostics, pass args down [PR #4482](https://github.com/microsoft/monaco-editor/pull/4482)\n* [@johnyanarella (John Yanarella)](https://github.com/johnyanarella): Update TypeScript to TS 5.4.5 in all projects, vendored files [PR #4305](https://github.com/microsoft/monaco-editor/pull/4305)\n* [@samstrohkorbatt](https://github.com/samstrohkorbatt): Adding Python f-string syntax support [PR #4401](https://github.com/microsoft/monaco-editor/pull/4401)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_90#_pull-requests",
    "id": 3864
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Link underlines  \nTo make links easier to distinguish from regular text in the workbench, you can enable the setting <code codesetting=\"accessibility.underlineLinks\">accessibility.underlineLinks</code> to underline links.  \n![The run and debug view showing a mix of regular text and underlined links.](images/1_91/underline-links.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_link-underlines",
    "id": 3865
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Workbench  \n### Search  \nWe added a new setting <code codesetting=\"search.ripgrep.maxThreads\">search.ripgrep.maxThreads</code> that enables you to limit the number of threads that the ripgrep search engine uses. This setting applies regardless whether search is used by the core product or via the extension API.  \nSet <code codesetting=\"search.ripgrep.maxThreads\">search.ripgrep.maxThreads</code> to a nonzero value to configure the number of threads. Be cautious because fixing this setting to a specific value might slow down ripgrep.",
    "url": "https://code.visualstudio.com/updates/v1_91#_search",
    "id": 3866
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Adjust allowed encodings for guessing  \nWith the new setting <code codesetting=\"files.candidateGuessEncodings\">files.candidateGuessEncodings</code>, you can configure a set of encodings that should be considered when <code codesetting=\"files.autoGuessEncoding\">files.autoGuessEncoding</code> is enabled. The order of configuration determines the priority. This functionality enables you to limit the possible encodings that can be detected to a smaller set and to prioritize one encoding over another.",
    "url": "https://code.visualstudio.com/updates/v1_91#_adjust-allowed-encodings-for-guessing",
    "id": 3867
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Profiles Editor preview  \nIn this milestone, we introduced a new Profiles Editor that enables you to manage [profiles](https://code.visualstudio.com/docs/editor/profiles) from a single place. This experience includes creating new profiles, editing and deleting existing profiles, and importing and exporting profiles to share with others. While creating a new profile, you can preview the profile and customize as needed before saving it. The Profiles Editor also enables you to open new windows with a specific profile, or set a profile as the default profile for new windows.  \n![Profiles Editor showing all user profiles and their settings.](images/1_91/profiles-editor.png)  \nThe Profiles Editor is available as an experimental feature behind the <code codesetting=\"workbench.experimental.enableNewProfilesUI\">workbench.experimental.enableNewProfilesUI</code> setting. Once enabled, you can access the Profiles Editor from the Settings gear icon in the bottom left corner of the window.  \n![Settings menu showing the Profiles menu item to open the Profiles Editor.](images/1_91/profiles-editor-action.png)  \nGive it a try and give us feedback on how we can improve this experience further.",
    "url": "https://code.visualstudio.com/updates/v1_91#_profiles-editor-preview",
    "id": 3868
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### New Window with Profile menu item  \nIn addition to the Profiles Editor, we added actions to the File menu to open a new window with a specific profile. Use the **File** > **New Window with Profile** menu to open a new window with a specific profile.  \n![Screenshot of the File menu showing the New Window with Profile menu items.](images/1_91/profile-new-window-actions.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_new-window-with-profile-menu-item",
    "id": 3869
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Extension install options  \nWe added more options to give you more flexibility when installing extensions:  \n* Install an extension without syncing it.\n* Install a specific version of an extension. Previously, you first had to install the latest version of the extension before you could select a specific version.  \nThese actions are available in the context menu of the extension in the Extensions view:  \n![Context menu for the Extensions view, showing the additional install actions.](images/1_91/extension-install-actions.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_extension-install-options",
    "id": 3870
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Access file extensions in custom labels  \nWhen you define [custom labels](https://code.visualstudio.com/docs/getstarted/userinterface#_customize-tab-labels), you have now more flexibility to access individual file extensions by using the `${extname(N)}` syntax. Additionally, `${extname(N)}` also supports negative indices to capture file extensions in the reverse order. To get the entire file extension, use `${extname}`.  \nFor example, for the file `tests/editor.test.ts`:  \n- `${filename}` => `editor`\n- `${extname}` => `test.ts`\n- `${extname(0)}` => `ts`\n- `${extname(1)}` => `test`\n- `${extname(-1)}` => `test`\n- `${extname(-2)}` => `ts`",
    "url": "https://code.visualstudio.com/updates/v1_91#_access-file-extensions-in-custom-labels",
    "id": 3871
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Merge custom label patterns from multiple extensions  \nWhen two extensions contribute a default configuration for the setting <code codesetting=\"workbench.editor.customLabels.patterns\">workbench.editor.customLabels.patterns</code> in their `configurationDefaults`, the contributed patterns are merged together.  \n<table style=\"width: 100%;\">\n<tr>\n<td>\n<pre><code>\"workbench.editor.customLabels.patterns\" : {\n\"**/app/**/page.tsx\": \"${dirname} - Page\",\n\"**/app/**/layout.tsx\": \"${dirname} - Layout\"\n}</code></pre>\n</td>\n<td>\n<pre><code>\"workbench.editor.customLabels.patterns\" : {\n\"**/components/**/index.tsx\": \"${dirname} - Component\"\n}</code></pre>\n</td>\n</tr>\n<tr>\n<td align=\"center\">Default Contribution by Extension 1</td>\n<td align=\"center\">Default Contribution by Extension 2</td>\n</tr>\n</table>  \n<table style=\"width: 100%;\">\n<tr>\n<td style=\"text-align: center;\">\n<pre style=\"display: inline-block; text-align: left;\"><code>\"workbench.editor.customLabels.patterns\" : {\n\"**/app/**/page.tsx\": \"${dirname} - Page\",\n\"**/app/**/layout.tsx\": \"${dirname} - Layout\",\n\"**/components/**/index.tsx\": \"${dirname} - Component\"\n}</code></pre>\n</td>\n</tr>\n<tr>\n<td align=\"center\">Resulting Custom Label Patterns</td>\n</tr>\n</table>",
    "url": "https://code.visualstudio.com/updates/v1_91#_merge-custom-label-patterns-from-multiple-extensions",
    "id": 3872
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Unset a theme color  \nIf a theme sets a color or border that you don't like, you can now use `default` to set it back to the original value:  \n```json\n\"workbench.colorCustomizations\": {\n\"diffEditor.removedTextBorder\": \"default\"\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_91#_unset-a-theme-color",
    "id": 3873
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Change folding placeholder color  \nThe folding placeholder (ellipsis) can now be themed with the color `editor.foldPlaceholderForeground`.",
    "url": "https://code.visualstudio.com/updates/v1_91#_change-folding-placeholder-color",
    "id": 3874
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Editor  \n### Code Actions on Save  \nWith the <code codesetting=\"editor.codeActionsOnSave\">editor.codeActionsOnSave</code> setting, you can configure a set of Code Actions that are automatically applied when you save a file, for example to organize imports. We improved the IntelliSense for configuring this setting by providing a list of available Code Actions based on your workspace files and the active extensions.  \n> **Note**: be aware that that although `true` and `false` are still valid configurations at the moment, they will be deprecated in favor of `explicit`, `always`, and `never`. See [Code Actions on Save Docs](https://code.visualstudio.com/docs/typescript/typescript-refactoring#_code-actions-on-save) for examples.",
    "url": "https://code.visualstudio.com/updates/v1_91#_code-actions-on-save",
    "id": 3875
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Quickly turn off read-only file status  \nIf you have configured a file as read-only through the `files.readonlyInclude` setting, you can now quickly toggle off the read-only status of the file from the read-only editor message.  \n![Read-only editor message enabling you to toggle the read-only status.](images/1_91/quick-toggle-readonly.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_quickly-turn-off-read-only-file-status",
    "id": 3876
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Source Control  \n### Incoming/Outgoing changes graph preview  \nWe have been exploring using an alternative visualization of the incoming and outgoing changes. This milestone includes an experimental feature that uses a graph to visualize the incoming and outgoing changes. The graph contains the current branch, the current branch's upstream branch, and an optional base branch. The root of the graph is the common ancestor of these branches.  \nYou can enable this new visualization by using the <code codesetting=\"scm.experimental.showHistoryGraph\">scm.experimental.showHistoryGraph</code> setting. Try it out and let us know what you think, as we continue to improve and expand the functionality available in this visualization.  \n![Source control view showing a graph visualization of the incoming and outgoing changes.](images/1_91/incoming-outgoing-changes.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_incoming/outgoing-changes-graph-preview",
    "id": 3877
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Notebooks  \n### Find in text selection  \nThe Notebook Find control now has \"Find in Selection\" for textual selections and cell selections. This behavior is enabled by default, and can be controlled via the button within the control. Based on the context of your selection, toggling this button scopes your find query to one or more selected cells, or lines within a cell.  \n<video src=\"images/1_91/notebook-find-in-selection.mp4\" title=\"Find in Selection using Notebook Find control\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_91#_find-in-text-selection",
    "id": 3878
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Copy or open text output from the context menu  \nWhen working with text output in notebooks, you can now use the context menu of a text output to copy the output value or to open the output in a new editor. This feature makes it easier to review large streaming outputs.  \n<video src=\"images/1_91/notebook-output-context-menu.mp4\" title=\"Copy or Open Text Output from the Context Menu\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_91#_copy-or-open-text-output-from-the-context-menu",
    "id": 3879
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Terminal  \n### Support for copy and paste escape sequence (OSC 52)  \nThe Operating System Command (OSC) 52 escape sequence is now supported. This can be used by anything running in the terminal but the primary use case is clipboard access for `tmux`.",
    "url": "https://code.visualstudio.com/updates/v1_91#_support-for-copy-and-paste-escape-sequence-osc-52",
    "id": 3880
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### New custom glyphs  \nThe terminal now supports custom glyphs for the branch, line number, and lock Powerline symbols. Like the [other custom glyphs](https://code.visualstudio.com/docs/terminal/appearance#_custom-glyphs) we support, these symbols work without the need to configure a font when [GPU acceleration](https://code.visualstudio.com/docs/terminal/appearance#_gpu-acceleration) is enabled.  \n![Characters 0xe0a0, 0xe0a1 and 0xe0a2 render with their Powerline symbols.](images/1_91/terminal-powerline.png)  \nThese symbols also scale perfectly with the cell when font size, line height, or letter spacing is adjusted.  \n![The new symbols scale vertically and horizontally when a custom font size, line height or letter spacing is used.](images/1_91/terminal-powerline-scale.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_new-custom-glyphs",
    "id": 3881
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Debug  \n### JavaScript debugger  \nThe JavaScript debugger now shows the correct value of shadowed variables when hovering over them and in inline values (enabled via the <code codesetting=\"debug.inlineValues\">debug.inlineValues</code> setting), based on the program's scopes.  \n![JavaScript code snippet that shows an overlay with the value of shadowed variables.](images/1_91/debug-shadowed.png)  \n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_",
    "url": "https://code.visualstudio.com/updates/v1_91#_javascript-debugger",
    "id": 3882
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Languages  \n### TypeScript 5.5  \nWe now include TypeScript 5.5. This major update brings a number of new language features and tooling improvements. Check out the [TypeScript 5.5 blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/) for details on this release.",
    "url": "https://code.visualstudio.com/updates/v1_91#_typescript-5.5",
    "id": 3883
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Syntax checking for regular expressions  \nThanks to TypeScript 5.5, we now report many syntax errors in JavaScript and TypeScript regular expression literals. This includes errors such as unclosed groups, incorrect back references, or invalid escapes:  \n![Editor showing a regex error for an invalid group caused by an extra parenthesis.](images/1_91/ts-regexp-invalid-group.png)  \n![Editor showing a regex error for an invalid escape sequence](images/1_91/ts-new-escape-from-regexp-error.png)  \nCheck out the [TypeScript 5.5 blog post for more details](https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/#regular-expression-syntax-checking).",
    "url": "https://code.visualstudio.com/updates/v1_91#_syntax-checking-for-regular-expressions",
    "id": 3884
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Contributions to extensions  \n### GitHub Copilot  \n#### Compact Inline Chat  \nInline chat rendering is now more compact, which makes it easier to read and understand suggestions. We are also experimenting with a more narrative style for the button text that you can enable via <code codesetting=\"inlineChat.experimental.textButtons:true\">inlineChat.experimental.textButtons</code>.  \n![Sample of more compact inline chat in the editor.](images/1_91/inline-chat.png)  \n#### Terminal initial hint  \nA new hint is displayed in the terminal to help discover the inline chat.  \n![The terminal will say \"Press Ctrl+I to ask GitHub Copilot to do something. Start typing to dismiss\"](images/1_91/copilot-terminal-hint.png)  \nThis hint only shows when the Copilot extension is installed and there is a single terminal that has not had any interaction. It's easy to dismiss the message permanently by right-clicking it. The message also dismisses after you use terminal inline chat for the first time.  \n#### Apply Code Block  \nThe **Apply In Editor** command on a code block in the Chat view uses the language model to determine the best approach for applying the changes to the current editor.  \n![Chat view showing the Apply In Editor command for a code block in a chat response.](images/1_91/apply-in-editor.png)",
    "url": "https://code.visualstudio.com/updates/v1_91#_github-copilot",
    "id": 3885
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Python  \n#### Python environment discovery using python-environment-tools  \nWe are excited to introduce a new tool, [python-environment-tools](https://github.com/microsoft/python-environment-tools), designed to significantly enhance the speed of detecting global Python installations and Python virtual environments. This tool uses Rust to ensure a rapid and accurate discovery process.  \nWe are currently testing this new feature, running it in parallel with the existing support, to evaluate the new discovery performance in the Python extension. So, you will see a new logging channel called `Python Locator` that shows the discovery times with this new tool.  \nThis enhancement is part of our ongoing efforts to optimize the performance and efficiency of Python support in VS Code. Visit the [python-environment-tools repo](https://github.com/microsoft/python-environment-tools) to learn more about this feature, ongoing work, and provide feedback.  \n#### Smart Send in native REPL  \nThe Python extension has now enabled [Smart Send](https://devblogs.microsoft.com/python/python-in-visual-studio-code-november-2023-release/#improvements-to-shift-enter-run-line-in-terminal) in the [VS Code native REPL](https://devblogs.microsoft.com/python/python-in-visual-studio-code-june-2024-release/#vs-code-native-repl-for-python-with-intellisense-and-syntax-highlighting).  \nPreviously, when you placed your cursor on a line of Python code and pressed `kbstyle(Shift+Enter)`, the Python extension would send the exact line contents to the native REPL, even if it would fail, for example because it's part of a multi-line command.  \nNow, `kbstyle(Shift+Enter)` sends minimum executable code in a non-nested scenario, or the highest top-level block of code in a nested scenario. This enables users to quickly `kbstyle(Shift+Enter)` throughout their file to run the maximum amount of executable code with the least amount of effort.  \n#### Support for reStructuredText docstrings  \nPylance now has support for rendering reStructuredText documentation strings (docstrings) on hover!  \nThis feature is in its early stages and is currently behind a flag as we work to ensure it handles various Sphinx, GoogleDoc, and Epytext scenarios effectively. To try it out, you can enable the experimental setting <code codesetting=\"python.analysis.supportRestructuredText:true\">python.analysis.supportRestructuredText</code>.  \n![Docstring displayed when hovering over the panel module.](images/1_91/pylance-restructuredtext.png)  \nTry out this change, and report any issues or feedback at the [Pylance GitHub repository](https://github.com/microsoft/pylance-release/).  \n> **Note**: this setting is experimental and will likely be removed in the future, as we stabilize this new feature and enable it by default.",
    "url": "https://code.visualstudio.com/updates/v1_91#_python",
    "id": 3886
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. New features include:  \n* Commit dates show in the **Commits** subtree for checked out PRs.\n* Numerous bug fixes.  \nReview the [changelog for the 0.92.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0920) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_91#_github-pull-requests-and-issues",
    "id": 3887
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### ESLint  \nThe ESLint extension now supports the [flat config file format](https://eslint.org/docs/latest/use/configure/configuration-files). The extension still supports `eslintrc` files and you can use the <code codesetting=\"eslint.useFlatConfig\">eslint.useFlatConfig</code> setting to control which configuration file format is used.  \nConsult the [ESLint Flat Config rollout plan](https://eslint.org/blog/2023/10/flat-config-rollout-plans/) to understand ESLint's plan for deprecating and removing support for the `eslintrc` file format.",
    "url": "https://code.visualstudio.com/updates/v1_91#_eslint",
    "id": 3888
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Extension authoring  \n### Chat and Language Model API  \nLast month, we finalized the APIs that enable extensions to participate in chat and to access language models, but they were only available in VS Code Insiders. In this release, these APIs are now fully available in VS Code Stable.  \nCheck out our [announcement blog post](https://code.visualstudio.com/blogs/2024/06/24/extensions-are-all-you-need) to learn more about these APIs and see how some of early adopters are using them.  \nTo get started, head over to our [extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/chat-sample) and the [Chat extensibility documentation](https://code.visualstudio.com/api/extension-guides/chat).",
    "url": "https://code.visualstudio.com/updates/v1_91#_chat-and-language-model-api",
    "id": 3889
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Handling of default values for object settings  \nWhen multiple extensions contribute default values for the same object setting, these default values are now combined. This prevents conflicts between the extensions.",
    "url": "https://code.visualstudio.com/updates/v1_91#_handling-of-default-values-for-object-settings",
    "id": 3890
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Finalized `DebugSessionOptions.testRun` API  \nExtensions that start a debug session from a test run, can now pass that run into the `DebugSessionOptions` when they call `vscode.debug.startDebugging`. When passed, lifecycle actions, such as restarting the debug session, create a new test run as well.",
    "url": "https://code.visualstudio.com/updates/v1_91#_finalized-debugsessionoptions.testrun-api",
    "id": 3891
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Authentication `getSessions` is now `getAccounts`  \nWhile we support multi-account authentication providers, something that has always been missing is the ability to get all sessions and take action on a specific session. Previously, we had a `getSessions` API proposal that attempted to solve this, but after experimentation and using inspiration of popular authentication libraries, we are taking a different approach to solve the issue.  \nWe moved away from the previous proposed `getSessions` API to something that separates the concept of \"Accounts\" and \"Sessions\".  \nExtension authors looking to consume authentication sessions can run the following code to get the `AuthenticationSessionAccountInformation` of the accounts that the user is logged into:  \n```ts\nconst accounts = vscode.authentication.getAccounts('microsoft');\n```  \nFrom there, you can use those accounts to mint sessions specifically for those accounts:  \n```ts\nconst session = vscode.authentication.getSession('microsoft', scopes, { account: accounts[0] })\n```  \n> **Note**: For this to work, the authentication provider needs to handle a new parameter, which you can read about in the API proposal below  \nWe believe that this is a much clearer way to handle multiple authentication sessions and will be able to handle various scenarios that we couldn't support before.  \nThe proposal can be found as [vscode.proposed.authGetSessions.d.ts](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.authGetSessions.d.ts), which uses the previous name for this proposal, not to break existing code that depends on this proposal.",
    "url": "https://code.visualstudio.com/updates/v1_91#_authentication-getsessions-is-now-getaccounts",
    "id": 3892
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Comment thread reveal  \nWe have added an API proposal that enables extensions that provide comments to reveal their own comment threads in the editor. This API provides options for whether to preserve focus when revealing the thread, or to focus into the thread's reply box.  \nThe proposal is available at [vscode.proposed.commentReveal.d.ts](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.commentReveal.d.ts).",
    "url": "https://code.visualstudio.com/updates/v1_91#_comment-thread-reveal",
    "id": 3893
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Attributable test coverage  \nWe're working on an API that enables attributing test coverage on a per-test basis. This enables users to see which tests ran which code, filtering both the coverage shown in the editor, and that in the **Test Coverage** view.  \nCheck [vscode#212196](https://github.com/microsoft/vscode/issues/212196) for more information and updates.",
    "url": "https://code.visualstudio.com/updates/v1_91#_attributable-test-coverage",
    "id": 3894
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n## Engineering  \n### Decouple NLS from AMD loader  \nThis milestone, we started to remove the dependency of the core native language support (NLS) in VS Code with the Asynchronous Module Definition (AMD) loader we ship. Our goal in the future is to use ECMAScript Modules (ESM) loading and drop AMD entirely. To make progress into this direction, we remove our AMD loader plugin dependencies. You should not notice any difference in behaviour, and all the translations we used to support are still supported in both web and desktop.",
    "url": "https://code.visualstudio.com/updates/v1_91#_decouple-nls-from-amd-loader",
    "id": 3895
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@shelvesdragon (Shelves The Dragon)](https://github.com/shelvesdragon)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@spartanatreyu (Jayden Pearse)](https://github.com/spartanatreyu)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)",
    "url": "https://code.visualstudio.com/updates/v1_91#_issue-tracking",
    "id": 3896
  },
  {
    "content": "Learn what is new in the Visual Studio Code June 2024 Release (1.91)  \n### Pull requests  \nContributions to `vscode`:  \n* [@bsShoham (Shoham Ben Shitrit)](https://github.com/bsShoham): allow usage of `extname(N)` template in custom labels [PR #213033](https://github.com/microsoft/vscode/pull/213033)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Update preference markers on profile change [PR #214353](https://github.com/microsoft/vscode/pull/214353)\n* [@cobey (Cody Beyer)](https://github.com/cobey)\n* updated file to include ai and vector db libs for py and js [PR #216771](https://github.com/microsoft/vscode/pull/216771)\n* adding auzre ai package tagging for js [PR #216857](https://github.com/microsoft/vscode/pull/216857)\n* adding missing azure ai py packages to tagging [PR #216861](https://github.com/microsoft/vscode/pull/216861)\n* [@dangerman (Anees Ahee)](https://github.com/dangerman): Use node 20 in dev container [PR #215434](https://github.com/microsoft/vscode/pull/215434)\n* [@francescov1 (Francesco Virga)](https://github.com/francescov1): Add recursive toggle [PR #212218](https://github.com/microsoft/vscode/pull/212218)\n* [@franciscacarneiro (Francisca Carneiro)](https://github.com/franciscacarneiro): Fix #182308: Pressing PageUp in the search panel no longer causes the layout to change. [PR #213067](https://github.com/microsoft/vscode/pull/213067)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): [typescript-language-features] Region-based semantic diagnostics for TypeScript [PR #208713](https://github.com/microsoft/vscode/pull/208713)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray): Page correctly on multi-provider timeline (fix #213452) [PR #213453](https://github.com/microsoft/vscode/pull/213453)\n* [@grgar (George Garside)](https://github.com/grgar): Fix merged table cells in extension marketplace readme rendering unmerged [PR #211666](https://github.com/microsoft/vscode/pull/211666)\n* [@hecticme (H. Ng\u1ecdc Minh)](https://github.com/hecticme): fix: do not show activity bar's focus border on click [PR #217837](https://github.com/microsoft/vscode/pull/217837)\n* [@its-meny](https://github.com/its-meny): fix: Quotes with headings on markdown not rendering properly [PR #205227](https://github.com/microsoft/vscode/pull/205227)\n* [@jakebailey (Jake Bailey)](https://github.com/jakebailey): Fix tsc -p ./src, remove no-default-lib [PR #216760](https://github.com/microsoft/vscode/pull/216760)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fix configure tasks in serverless can delete entire tasks file [PR #215810](https://github.com/microsoft/vscode/pull/215810)\n* [@mohankumarelec](https://github.com/mohankumarelec): Added http.noProxy setting which is same as NO_PROXY env variable value that is already present currently [PR #211958](https://github.com/microsoft/vscode/pull/211958)\n* [@mtbaqer (Mohammad Baqer)](https://github.com/mtbaqer): make collapsedText theme-able [PR #173203](https://github.com/microsoft/vscode/pull/173203)\n* [@powersagitar](https://github.com/powersagitar): Add file extensions for C++20 module interface units [PR #214800](https://github.com/microsoft/vscode/pull/214800)\n* [@r-sargento (Rafael Sargento)](https://github.com/r-sargento): Implement display variable type setting for vscode (#210258) [PR #214315](https://github.com/microsoft/vscode/pull/214315)\n* [@rehmsen (Ole)](https://github.com/rehmsen)\n* Fix leaking comment thread when CellComment is reused. [PR #214589](https://github.com/microsoft/vscode/pull/214589)\n* Fix two bugs in #214589 fixing #213535. [PR #218357](https://github.com/microsoft/vscode/pull/218357)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing)\n* Replace `removeChild` with `remove` [PR #213465](https://github.com/microsoft/vscode/pull/213465)\n* Fix opening select boxes [PR #214348](https://github.com/microsoft/vscode/pull/214348)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n* feature: replace electron File.path with electron webUtils [PR #213031](https://github.com/microsoft/vscode/pull/213031)\n* When completing color keys in settings, fill in current value [PR #213451](https://github.com/microsoft/vscode/pull/213451)\n* feature: make number of ripgrep threads configurable [PR #213511](https://github.com/microsoft/vscode/pull/213511)\n* feature: allow unsetting color theme values in settings [PR #213512](https://github.com/microsoft/vscode/pull/213512)\n* fix settings editor memory leak [PR #216763](https://github.com/microsoft/vscode/pull/216763)\n* fix: possible memory leak in SettingTreeRenderers [PR #216768](https://github.com/microsoft/vscode/pull/216768)\n* fix: add disposable to elementDisposables instead of templateDisposables in renderElement function in SettingEnumRenderer [PR #216855](https://github.com/microsoft/vscode/pull/216855)\n* [@swordensen (Michael Sorensen)](https://github.com/swordensen): Fixes #182449 : Pressing Shift re-enables webview during Drag and Drop Events [PR #209211](https://github.com/microsoft/vscode/pull/209211)\n* [@Timmmm (Tim Hutt)](https://github.com/Timmmm): Fix opening links in the terminal with column numbers [PR #210898](https://github.com/microsoft/vscode/pull/210898)\n* [@tisilent (xiejialong)](https://github.com/tisilent): Add showIncludesExcludes in IFindInFilesArgs [PR #212347](https://github.com/microsoft/vscode/pull/212347)\n* [@werat (Andy Hippo)](https://github.com/werat): Fix error message format [PR #214900](https://github.com/microsoft/vscode/pull/214900)\n* [@xiaoxianBoy (Snoppy)](https://github.com/xiaoxianBoy): chore: fix typos [PR #216562](https://github.com/microsoft/vscode/pull/216562)\n* [@y0sh1ne (y0sh1ne)](https://github.com/y0sh1ne): Update language-configuration.json(fix #215999) [PR #216394](https://github.com/microsoft/vscode/pull/216394)\n* [@yutotnh (yutotnh)](https://github.com/yutotnh): Add the ability to specify a list of candidate encodings when guessing encoding (#36951) [PR #208550](https://github.com/microsoft/vscode/pull/208550)  \nContributions to `vscode-css-languageservice`:  \n* [@wkillerud (William Killerud)](https://github.com/wkillerud): feat: add support for Sass `pkg:` importers [PR #384](https://github.com/microsoft/vscode-css-languageservice/pull/384)  \nContributions to `vscode-extension-samples`:  \n* [@AllanJard (Allan Jardine)](https://github.com/AllanJard): Fix #863 - Start language automatically [PR #864](https://github.com/microsoft/vscode-extension-samples/pull/864)  \nContributions to `vscode-html-languageservice`:  \n* [@johnsoncodehk (Johnson Chu)](https://github.com/johnsoncodehk): Lazy evaluation of `voidElements` [PR #187](https://github.com/microsoft/vscode-html-languageservice/pull/187)  \nContributions to `vscode-languageserver-node`:  \n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Use client ID as fallback for diagnostics collection [PR #1445](https://github.com/microsoft/vscode-languageserver-node/pull/1445)  \nContributions to `vscode-python-tools-extension-template`:  \n* [@caelean (Caelean Barnes)](https://github.com/caelean): Reference filepaths consistently in README [PR #208](https://github.com/microsoft/vscode-python-tools-extension-template/pull/208)  \nContributions to `node-jsonc-parser`:  \n* [@Vbbab](https://github.com/Vbbab): Allow the visitor to cease callbacks [PR #88](https://github.com/microsoft/node-jsonc-parser/pull/88)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_91#_pull-requests",
    "id": 3897
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Configure keybindings action  \nIn the previous milestone, we introduced an action to configure unassigned keybindings in the accessibility help dialog. We've now added the **Configure Assigned Keybindings** command (`kb(editor.action.accessibilityHelpConfigureAssignedKeybindings)`) to complement this action.",
    "url": "https://code.visualstudio.com/updates/v1_92#_configure-keybindings-action",
    "id": 3898
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Workbench  \n### Move Panel to top  \nYou can now move the [Panel](https://code.visualstudio.com/docs/getstarted/userinterface) to the top of the workbench, above the editor area. By default, the Panel is placed at the bottom and includes views, such as the terminal, Output panel, and Debug Console. This enhancement complements the existing options of positioning the panel to the left, right, and bottom.  \n<video src=\"images/1_92/panel-top.mp4\" title=\"Move Workbench Panel to the top\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_92#_move-panel-to-top",
    "id": 3899
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Profiles Editor preview  \nIn this milestone, we continued to improve the Profiles Editor by making it more user-friendly and by having a look and feel that's consistent with the Settings Editor.  \n![Profiles Editor showing all user profiles and their settings.](images/1_92/profiles-editor.png)  \nThe Profiles Editor is available as an experimental feature behind the <a href=\"vscode://settings/workbench.experimental.enableNewProfilesUI\" codesetting=\"true\">`workbench.experimental.enableNewProfilesUI`</a> setting. Once enabled, you can access the Profiles Editor from the Settings gear icon in the bottom left corner of the window.  \n![Settings menu showing the Profiles menu item to open the Profiles Editor.](images/1_92/profiles-editor-action.png)",
    "url": "https://code.visualstudio.com/updates/v1_92#_profiles-editor-preview",
    "id": 3900
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Override existing profile  \nYou can now override an existing profile, including the default profile, by creating a new profile with the same name.  \n<video src=\"images/1_92/override-profile.mp4\" title=\"Override existing Profile\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_92#_override-existing-profile",
    "id": 3901
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Improved extension update experience  \nWe made several improvements to the extension update experience to give you more control over updating extensions and make it easier to manage auto updating of extensions.  \n#### Auto updating all extensions  \nWe have changed the global extension auto update action in the Extension view title area to **Enable Auto Update for All Extensions** and **Disable Auto Update for All Extensions** actions. With these actions, you can enable or disable auto update for all extensions at once.  \n![Manage Auto Updating Extensions.](images/1_92/manage-autoupdate.png)  \n#### Auto updating individual extensions  \nWe improved the individual extension auto update experience by always showing the action to enable or disable auto update for the extension. This makes it easier to manage auto updating of extensions.  \n![Auto update configuration per extension.](images/1_92/extension-autoupdate.png)  \n#### Disable auto update for extensions installed via VSIX  \nWhen you install an extension via VSIX, auto update for that extension is disabled by default. This enables you to work with the version of the extension you have installed, without it being updated automatically.  \n#### More control over updating extensions  \nUser consent is now required when you update an installed extension version that has no executable code to a version that has executable code. This gives you control to review such updates before they are applied. The following video demonstrates the experience when updating an extension with no code to a version with code.  \n<video src=\"images/1_92/auto-update-review.mp4\" title=\"User consent required to update extension with no code to a version with code\" autoplay loop controls muted></video>  \nSelecting the **Review** button opens the extension change log or the extension repository in the browser. You can review the changes and then decide if you want to update the extension.",
    "url": "https://code.visualstudio.com/updates/v1_92#_improved-extension-update-experience",
    "id": 3902
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Settings Editor jump issue fixed  \nThe Settings Editor used to jump after modifying a setting and changed focus to another one. And this jump was worse the more one scrolled before modifying a setting.\nWe changed the way the Settings Editor re-renders settings after modification, and the Settings Editor no longer jumps after modifying a setting.  \n<video src=\"images/1_92/settings-editor-nojitter.mp4\" title=\"Settings Editor not jumping after setting check mark checked\" autoplay loop controls muted></video>  \n_Theme: [Light Pink](https://marketplace.visualstudio.com/items?itemName=mgwg.light-pink-theme) (preview on [vscode.dev](https://vscode.dev/editor/theme/mgwg.light-pink-theme))_",
    "url": "https://code.visualstudio.com/updates/v1_92#_settings-editor-jump-issue-fixed",
    "id": 3903
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### URL handling for settings  \nVS Code can now handle \"settings\" URLs of the format `vscode://settings/setting.name` (`vscode-insiders://settings/setting.name` for Insiders, and `code-oss` for the OSS version) and will open the Settings Editor to the specified setting. If no setting is given, then the Settings Editor is still opened. When an anchor tag with a settings URL is used in the release notes, and the release notes are open in VS Code, then we do special handling and rendering, as described in the previous `codesetting` feature.  \n![Setting URL in release notes](./images/1_92/setting-url-in-release-notes.gif)",
    "url": "https://code.visualstudio.com/updates/v1_92#_url-handling-for-settings",
    "id": 3904
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Configure the browser to open links  \nA new setting <a href=\"vscode://settings/workbench.externalBrowser\" codesetting=\"true\">`workbench.externalBrowser`</a> enables you to configure which browser to use for opening links. By default, the operating system standard browser is used. You can configure this setting on a per-workspace level and is also Settings Sync enabled.  \nSpecify the full path to the browser executable as the settings value. Alternatively, to ensure correct functioning across devices, you can also use browser aliases, such as `edge`, `chrome`, or `firefox`.  \n![Configure the browser to open links.](images/1_92/default-browser.gif)",
    "url": "https://code.visualstudio.com/updates/v1_92#_configure-the-browser-to-open-links",
    "id": 3905
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Disable auto file open on drag and drop  \nPreviously, dragging and dropping a file into the explorer would also automatically open it in the editor. In some cases, this might be undesirable. A new setting <a href=\"vscode://settings/explorer.autoOpenDroppedFile\" codesetting=\"true\">`explorer.autoOpenDroppedFile`</a> enables you to toggle this behavior. By default, the file continues to be opened when dragged and dropped, but when set to `false`, this behavior is disabled.",
    "url": "https://code.visualstudio.com/updates/v1_92#_disable-auto-file-open-on-drag-and-drop",
    "id": 3906
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Editor  \n### Lightbulb control improvements  \nAt times, the lightbulb control might block code in the editor. To address this, we introduced an improved heuristic for the lightbulb control, which displays the lightbulb in the gutter when there is no space, instead of blocking code in the editor.  \n![Lightbulb overlaps with code (left) versus positioned in the gutter (right).](images/1_92/lightbulb-positioning.png)  \nYou can toggle the lightbulb control in the editor with the <a href=\"vscode://settings/editor.lightbulb.enabled\" codesetting=\"true\">`editor.lightbulb.enabled`</a> setting.",
    "url": "https://code.visualstudio.com/updates/v1_92#_lightbulb-control-improvements",
    "id": 3907
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Diff Editor  \n### More compact diffs in Chat  \nWe iterated on the diff editor layout in the Chat view/inline Chat and made it more compact.  \n**Before**:  \n![Previous diff editor layout, which is less compact.](images/1_92/diffEditor_inlineChat_before.png)  \n**After**:  \n![More compact diff editor layout.](images/1_92/diffEditor_inlineChat_after.png)",
    "url": "https://code.visualstudio.com/updates/v1_92#_more-compact-diffs-in-chat",
    "id": 3908
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Source Control  \n### Incoming/Outgoing changes graph  \nThis milestone, we are enabling the visualization of the incoming and outgoing changes using a graph. The graph contains the current branch, the current branch's upstream branch, and an optional base branch. The root of the graph is the common ancestor of these branches.  \nWe have made several improvements to the history item hover:  \n* Enabled multi-select to see changes across multiple history items that belong to the same branch.\n* Added options to the `...` menu to filter history items from the remote/base branches.\n* Added actions to fetch, pull, and push history items.  \nGive it a try and let us know what you think!  \nYou can disable the graph visualization of incoming/outgoing changes by toggling the <a href=\"vscode://settings/scm.showHistoryGraph\" codesetting=\"true\">`scm.showHistoryGraph`</a> setting.  \n![Source control view showing a graph visualization of the incoming and outgoing changes.](images/1_92/incoming-outgoing-changes.png)",
    "url": "https://code.visualstudio.com/updates/v1_92#_incoming/outgoing-changes-graph",
    "id": 3909
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Terminal shell integration  \nThe Source Control view is refreshed after each source control operation as well as file-system events scoped to specific files/folders. When a git command is executed in the integrated terminal, there might be a delay between the completion of the command and refresh of the Source Control view. To reduce this delay, starting this milestone, we are using the terminal shell integration API to detect the successful completion of various git commands (for example, `add`, `checkout`, `commit`, `fetch`, `pull`, `push`, and more) executed in the integrated terminal and refresh the Source Control view.",
    "url": "https://code.visualstudio.com/updates/v1_92#_terminal-shell-integration",
    "id": 3910
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Notebooks  \n### Multi-cell commenting  \nThe Notebook Editor now supports toggling comments on one or multiple cells at a time. Do this by selecting one or multiple cell containers, followed by the keyboard shortcut `kb(notebook.commentSelectedCells)`.  \n<video src=\"images/1_92/notebook-multi-cell-comment.mp4\" title=\"Notebook Multi Cell Commenting\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_92#_multi-cell-commenting",
    "id": 3911
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Terminal  \n### New scroll bar  \nThe scroll bar in the terminal now looks just like the scroll bar in the editor:  \n![The terminal scroll bar now looks just like the editor's scroll bar](images/1_92/terminal-scroll-bar.png)  \nThe overview ruler is the same as before, with successful commands on left, find result in middle, failed commands on right. But now it perfectly aligns with the scroll bar slider.",
    "url": "https://code.visualstudio.com/updates/v1_92#_new-scroll-bar",
    "id": 3912
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Debug  \n### Show variable types while debugging  \nVS Code now shows the data types of variables while debugging when the setting <a href=\"vscode://settings/debug.showVariableTypes\" codesetting=\"true\">`debug.showVariableTypes`</a> is turned on:  \n![Show variable data types in the Variables section while debugging.](./images/1_92/debug-types.png)",
    "url": "https://code.visualstudio.com/updates/v1_92#_show-variable-types-while-debugging",
    "id": 3913
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Languages  \n### Update Markdown links on paste  \nVS Code can now help you move sections of text between Markdown documents by updating links in any copy and pasted text. With this feature, VS Code fixes all relative path links, reference links, and all images/videos with relative paths, so that they work in the new document.  \n<video src=\"images/1_92/md-paste-link-update.mp4\" title=\"Links being updated when copy and pasting between Markdown files\" autoplay loop controls muted></video>  \nThis feature kicks in whenever you copy and paste text with links between two Markdown files. If there are links that can be updated, you will see the paste widget after pasting. Select **Paste and Update Pasted Links**, and VS Code fixes up the links for you.  \nYou can disable this feature entirely by setting <a href=\"vscode://settings/markdown.updateLinksOnPaste\" codesetting=\"true\">`markdown.updateLinksOnPaste`</a> to `false`.",
    "url": "https://code.visualstudio.com/updates/v1_92#_update-markdown-links-on-paste",
    "id": 3914
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Paste and drop files in CSS  \nDo you need to use an image in your CSS? Now you can quickly insert a `url()` reference just by dragging and dropping, or copy and pasting the image file into the CSS editor:  \n<video src=\"images/1_92/css-paste-url.mp4\" title=\"Dropping and pasting an image file to insert a url()\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_92#_paste-and-drop-files-in-css",
    "id": 3915
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Python  \n#### Improved Python discovery using python-environment-tools  \nIn the last release, we announced the [Python environment tools](https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#python-environment-discovery-using-python-environment-tools), which redesigned the Python discovery infrastructure focused on performance. This approach reduces the need for executing python binaries to probe for information and thus improving performance.  \nStarting in this release, we are rolling out this enhancement as part of an experiment. If you are interested in trying this out, you can set `\"python.locator\"` to `\"native\"` in your User `settings.json` and reload your VS Code window. Visit the [python-environment-tools repo](https://github.com/microsoft/python-environment-tools) to learn more about this feature, ongoing work, and provide feedback.  \n#### Display execution status for native REPL  \nThe experimental native REPL (`\"python.REPL.sendToNativeREPL\": true`) now displays success/failure UI, similar to that in a Jupyter cell, depending on the execution outcome. Furthermore, we made improvements so that we no longer display an empty line on cells that generate no output.  \n#### Inline variable values in source code  \nThe [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy) extension introduced an Inline Values feature to enhance your Python debugging experience. With Inline Values, you can view the value of variables inline in the editor, next to the corresponding line of code during a debugging session. This helps you to quickly understand the state of your program, without having to hover over variables or checking the Variables section in the Run and Debug view.  \n![Show Python Inline Variables.](images/1_92/show-python-inline-variables.png)  \nTo enable this feature, set the configuration value <a href=\"vscode://settings/debugpy.showPythonInlineValues\" codesetting=\"true\">`debugpy.showPythonInlineValues`</a> to `true` in your User settings.  \n> **Note**: This feature is currently in exploration state and improvements are still being made. Please provide any feedback you may have in the [vscode-python-debugger repo](https://github.com/microsoft/vscode-python-debugger)!  \n#### Improved Debug Welcome view  \nThe Debug Welcome view now includes a button for quick access to automatic Python configurations when a Python file is open in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_92#_python",
    "id": 3916
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. New features include:  \n* Revert pull requests by using the **Revert** button in the pull request description of merged PRs\n* PRs whose branch has been deleted can now be viewed in the Pull Requests view.\n* The **Open Pull Request on GitHub.com** action shows even when you have multiple PRs checked out.  \nReview the [changelog for the 0.94.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0940) release of the extension to learn about the other highlights.",
    "url": "https://code.visualstudio.com/updates/v1_92#_github-pull-requests-and-issues",
    "id": 3917
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Extension authoring  \n### Basic authentication for network proxies  \nExtensions that use the `https` Node.js module can now use network proxies that require basic authentication.",
    "url": "https://code.visualstudio.com/updates/v1_92#_basic-authentication-for-network-proxies",
    "id": 3918
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Preview Features  \n### True inline diffs  \nThis iteration, we introduced the <a href=\"vscode://settings/diffEditor.experimental.useTrueInlineView\" codesetting=\"true\">`diffEditor.experimental.useTrueInlineView`</a> setting (off by default). When you enable this setting and the inline view is used, single-line changes are rendered inline:  \n![True Inline View in the diff editor.](images/1_92/diffEditor_trueInlineView.png)  \nThis is how the inline view looks without this experimental flag turned on:  \n![Default Inline View in the diff editor.](images/1_92/diffEditor_defaultInlineView.png)  \nThis feature is experimental and future changes are to be expected.",
    "url": "https://code.visualstudio.com/updates/v1_92#_true-inline-diffs",
    "id": 3919
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### VS Code-native IntelliSense for PowerShell  \nThe VS Code-native PowerShell IntelliSense experimental feature has seen some significant improvements this release. To enable this feature on Windows or macOS:  \n```json\n\"terminal.integrated.suggest.enabled\": true\n```  \nIn addition to the feature being much more reliable, many other improvements were made as seen below.  \n#### Completions are not truncated  \nCompletions now show _exactly_ what is typed, instead of a truncated version. For example, when searching for directory names, the `.\\` is now included and is highlighted correctly.  \n**Before**:  \n![Before the completion for \"src\" would show \"src\"](images/1_92/terminal-truncate-before.png)  \n**After**:  \n![After the completion for \"src\" would show \".\\src\"](images/1_92/terminal-truncate-after.png)  \n#### Optimized completions for navigating directories  \nDirectory names now include a trailing `\\` or `/`, which, when completed, refresh completions for the new directory.  \n<video src=\"images/1_92/terminal_cd_flow.mp4\" title=\"Completing directories will complete the final \\, and refresh the completions for that directory\" autoplay loop controls muted></video>  \n#### Configure Enter behavior  \nThe new `terminal.integrated.suggest.runOnEnter` setting enables you to configure the `Enter` behavior to run the command if certain conditions are met. The following values are available:  \n- `\"always\"`: Always run on `Enter`.\n- `\"exactMatch\"`: Run on `Enter` when the suggestion is typed in its entirety.\n- `\"exactMatchIgnoreExtension\"` (default): Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included.\n- `\"never\"` (old behavior): Never run on `Enter`.  \nThis change is especially important to not break existing muscle memory as often this will result in the same set of keystrokes as without the feature enabled. An example where this is useful is running `cd ..`. Before this change, you would need to type `cd ..<enter><enter>` but now it's a single `Enter`, thanks to this new setting.  \n<video src=\"images/1_92/terminal_run_on_enter.mp4\" title=\"Typing 'cd ..' only requires a single Enter key press\" autoplay loop controls muted></video>  \n#### Improved file completions  \nFile completions are now sorted by file name length ascending, file name alphabetically, and then by file extension alphabetically. File completions run as commands (not arguments) now also get a boost, depending on their file extension and current operating system. For example, `.ps1`, `.bat`, and `.cmd` files are boosted when running on Windows, which makes them show up higher in the list.  \n![Results are now sorted by extensions with platform-specific boosts](images/1_92/terminal-file-ext.png)  \nNot only do these changes improve the relevance of the top item, they also help muscle memory by aligning the behavior closer to native PowerShell tab completion. For example, a command commonly run in the VS Code codebase on Windows is `./scripts/code.bat`. With these changes, `./sc<tab>/c<enter>` completes and runs `./scripts/code.bat`.  \n<video src=\"images/1_92/terminal_scripts_code.mp4\" title=\"Completions are much less in the way now, not breaking your muscle memory\" autoplay loop controls muted></video>  \n#### Global completion caching  \nGlobal completions for commands are cached across sessions, which improves shell startup performance significantly. This also fixes an issue where completions would not work correctly for reconnected terminals. Currently, these can be cleared and refreshed by running the `Terminal: Clear Suggest Cache` command. Measured on an Intel i7-12700KF, this reduced the time taken to activate shell integration from ~600ms to ~50ms.  \n#### Built-in terminal completions in PowerShell  \nWe now ship built-in completions for `git`. These are based on those from the `posh-git` project but with some general and VS Code-specific improvements. Here's an example of the completions in action:  \n<video src=\"images/1_92/terminal_git_flow.mp4\" title=\"Git completions show for subcommands like branch and will immediately complete branches that were just created\" autoplay loop controls muted></video>  \nSome of the other improvements are:  \n* Aliases show their expanded state on the right:  \n![Aliases show their expanded state on the right](images/1_92/terminal-git-alias.png)\n* Git-specific icons for branches, tags, stashes and remotes:  \n![Branches and tabs have their own icon beside the completions](images/1_92/terminal-git-icons.png)\n* Subcommand descriptions on the right:  \n![Subcommands like 'checkout' show their description on the right](images/1_92/terminal-git-descriptions.png)  \nWe also ship built-in completions for `code` and `code-insiders`, though these are very basic and will be improved in future releases.  \n![code now shows basic completions for everything in code --help](images/1_92/terminal-code-completions.png)  \nThese completions may conflict with those from other PowerShell modules. You can disable them with the following setting:  \n```json\n\"terminal.integrated.suggest.builtinCompletions\": {\n\"pwshCode\": false,\n\"pwshGit\": false\n}\n```",
    "url": "https://code.visualstudio.com/updates/v1_92#_vs-code-native-intellisense-for-powershell",
    "id": 3920
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### TypeScript 5.6 support  \nThis release includes support for the upcoming TypeScript 5.6 release. Check out the [TypeScript 5.6 iteration plan](https://github.com/microsoft/TypeScript/issues/59250) for details on what's in store for this release.  \nTo start using preview builds of TypeScript 5.6, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Share your feedback and let us know if you run into any bugs with TypeScript 5.6.",
    "url": "https://code.visualstudio.com/updates/v1_92#_typescript-5.6-support",
    "id": 3921
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n## Proposed APIs  \n### `QuickInputButtonLocation` to show buttons to the right of the input  \nThis milestone, we introduced a proposed API on `QuickInputButton` that enables extensions to choose where they want a button to be rendered. The options are:  \n* `Title`: This renders the button in the title bar of the quick pick. This is the default behavior and maintains the existing behavior of buttons.\n* `Inline`: This renders the button to the right of the input box. This is useful if you aren't planning on using the title bar for anything but want to show buttons.  \nThis functionality was adopted in the Git extension's **Create branch** input box, which you can enable with <a href=\"vscode://settings/git.branchRandomName.dictionary\" codesetting=\"true\">`git.branchRandomName.dictionary`</a>.  \nCheck out [vscode#221397](https://github.com/microsoft/vscode/issues/221397) for more information and updates.",
    "url": "https://code.visualstudio.com/updates/v1_92#_quickinputbuttonlocation-to-show-buttons-to-the-right-of-the-input",
    "id": 3922
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Testing Enhancements  \n#### Associate code to tests  \nWe're working on an API that enables an extension to associate code to tests, and vice versa. This lets users jump between both, and enables actions, such as **Run Tests at Cursor**, to also work in implementation code. We anticipate building more experiences as the API develops.  \nCheck out [vscode#126932](https://github.com/microsoft/vscode/issues/126932#issuecomment-2243510427) for more information and updates.  \n#### Call stacks in test failures  \nWe're working on an API that enables associating a rich call stack with unit test failures. This enables users to see, at a glance, what code led up to their failure.  \nCheck out [vscode#214488](https://github.com/microsoft/vscode/issues/214488) for more information and updates.  \n#### Attributable test coverage  \nWe're working on an API for attributing test coverage on a per-test basis. This enables users to see which tests ran which code, filtering both the coverage shown in the editor, and that in the **Test Coverage** view.  \nCheck out [vscode#212196](https://github.com/microsoft/vscode/issues/212196) for more information and updates.",
    "url": "https://code.visualstudio.com/updates/v1_92#_testing-enhancements",
    "id": 3923
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Search APIs  \nIn the last few months, we have been working on finalizing three proposed Search APIs:  \n* [`FindTextInFiles`](https://github.com/microsoft/vscode/issues/59924): find text in workspace files using VS Code's text search.\n* [`FileSearchProvider`](https://github.com/microsoft/vscode/issues/73524): provide file search results for custom file schemes that cannot be searched properly with VS Code's existing search functionality. For example, extension-provided results could show up when searching in Quick Open from within a virtual file system.\n* [`TextSearchProvider`](https://github.com/microsoft/vscode/issues/59921): like `FileSearchProvider`, but for text search results. For example, extension-provided results could show up when searching in the Search View from within a virtual file system.  \nIn addition, we are revamping the [`workspace.findFiles`](https://github.com/microsoft/vscode/issues/48674) API, which uses VS Code's workspace file search to find files. The new version should allow for more options, and should handle exclusion options more clearly. The existing function signature should still be functional when we introduce the revamped version.  \nThis table illustrates how the different APIs are related:  \n|                     | Using API to find | Using API to provide results |\n| --------:           | :-------:         | :-------:                    |\n|**For Files**        | FindFiles         | FileSearchProvider           |\n|**For Text in Files**| FindTextInFiles   | TextSearchProvider           |  \nIf you're interested, visit the links above to provide feedback!",
    "url": "https://code.visualstudio.com/updates/v1_92#_search-apis",
    "id": 3924
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Progress on using ESM for VS Code  \nIn this milestone, we picked up the work again to adopt ESM for VS Code core. Our goal in the future is to use ECMAScript Modules (ESM) loading and drop AMD entirely. This is a multi-milestone effort that will modernize overall code loading and bundling.",
    "url": "https://code.visualstudio.com/updates/v1_92#_progress-on-using-esm-for-vs-code",
    "id": 3925
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### xterm.js depending upon VS Code  \nThe new scroll bar in the terminal required a significant amount of behind-the-scenes work. The terminal in VS Code is built on the [xterm.js OSS project](https://github.com/xtermjs/xterm.js), and in its upcoming release will also ship a small portion of VS Code's codebase, specifically part of the `base/` folder.",
    "url": "https://code.visualstudio.com/updates/v1_92#_xterm.js-depending-upon-vs-code",
    "id": 3926
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Electron 30 update  \nIn this milestone, we are promoting the Electron 30 update to users on our stable release. This update comes with Chromium 124.0.6367.243 and Node.js 20.14.0. We want to thank everyone who self-hosted on Insiders builds and provided early feedback.  \n**Notice of breaking API change when spawning `.bat` or `.cmd` files:**  \nThe Node version with this Electron update contains a [**breaking change**](https://nodejs.org/en/blog/vulnerability/april-2024-security-releases-2#command-injection-via-args-parameter-of-child_processspawn-without-shell-option-enabled-on-windows-cve-2024-27980---high), in response to a CVE, which may affect you if you execute `.bat` or `.cmd` files on Windows. You can follow the [guidelines](https://nodejs.org/api/child_process.html#spawning-bat-and-cmd-files-on-windows) set by Node.js when spawning these files using the `shell` option.  \nWe have proactively notified extensions who may be affected based on a simple source code scan, but it's possible we may have missed yours. If you are affected, you will encounter an EINVAL exception when spawning `.bat` or `.cmd` files on Windows. Please refer to the [Node.js documentation](https://nodejs.org/api/child_process.html#spawning-bat-and-cmd-files-on-windows) for guidance on how to handle these.  \nWe recommend extension authors to always test their extension with our [Insiders release](https://code.visualstudio.com/insiders/) to catch these changes in advance.",
    "url": "https://code.visualstudio.com/updates/v1_92#_electron-30-update",
    "id": 3927
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@manav014 (Manav Agarwal)](https://github.com/manav014)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@starball5 (starball)](https://github.com/starball5)\n* [@ArturoDent (ArturoDent)](https://github.com/ArturoDent)",
    "url": "https://code.visualstudio.com/updates/v1_92#_issue-tracking",
    "id": 3928
  },
  {
    "content": "Learn what is new in the Visual Studio Code July 2024 Release (1.92)  \n### Pull requests  \nContributions to `vscode`:  \n* [@a-stewart (Anthony Stewart)](https://github.com/a-stewart): Ensure titlebar is at least as tall as the bounding rect of WCO [PR #211440](https://github.com/microsoft/vscode/pull/211440)\n* [@aaronchucarroll](https://github.com/aaronchucarroll): Adds support for Github-style fenced math blocks in markdown editor and preview [PR #213750](https://github.com/microsoft/vscode/pull/213750)\n* [@c-claeys (Cristopher Claeys)](https://github.com/c-claeys): Fix exponential runtime in service instantiation [PR #218393](https://github.com/microsoft/vscode/pull/218393)\n* [@cobey (Cody Beyer)](https://github.com/cobey): adding js/py lib for tagging [PR #219213](https://github.com/microsoft/vscode/pull/219213)\n* [@etcadinfinitum (Lee Zee)](https://github.com/etcadinfinitum): shellscript: Register .eclass extension as shell-like [PR #219631](https://github.com/microsoft/vscode/pull/219631)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): \\[typescript-language-features\\] Add diagnostics performance telemetry [PR #220127](https://github.com/microsoft/vscode/pull/220127)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Hide Local History commands when `\"workbench.localHistory.enabled\": false` [PR #212936](https://github.com/microsoft/vscode/pull/212936)\n* Hide Panel Maximize when at top but not center-aligned [PR #221549](https://github.com/microsoft/vscode/pull/221549)\n* Implement /spam issue triaging command [PR #221940](https://github.com/microsoft/vscode/pull/221940)\n* [@hotpxl (Yutian Li)](https://github.com/hotpxl): Use the builtin local command in shell integration scripts [PR #221772](https://github.com/microsoft/vscode/pull/221772)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fix port label not applied when forwarding port with vscode.env.asExternalUri [PR #220029](https://github.com/microsoft/vscode/pull/220029)\n* [@kapodamy (kapodamy)](https://github.com/kapodamy): fix: place regex in variables on `shellIntegration-bash.sh` script [PR #221998](https://github.com/microsoft/vscode/pull/221998)\n* [@Krzysztof-Cieslak (Krzysztof Cie\u015blak)](https://github.com/Krzysztof-Cieslak)\n* Inline edit - implement side by side rendering of suggestions [PR #219444](https://github.com/microsoft/vscode/pull/219444)\n* Inline edit - UI fixes for side-by-side rendering [PR #221352](https://github.com/microsoft/vscode/pull/221352)\n* Inline edits - UI fixes for word wrap and scrolling [PR #223076](https://github.com/microsoft/vscode/pull/223076)\n* [@mering (Marcel)](https://github.com/mering): Setup rust in Devcontainer [PR #221301](https://github.com/microsoft/vscode/pull/221301)\n* [@mxts (Teik Seong)](https://github.com/mxts): add option to dock terminal at top [PR #207721](https://github.com/microsoft/vscode/pull/207721)\n* [@Parasaran-Python (Parasaran)](https://github.com/Parasaran-Python): Fixes #218254 [PR #219312](https://github.com/microsoft/vscode/pull/219312)\n* [@rehmsen (Ole)](https://github.com/rehmsen)\n* Support comments on notebook markup cells [PR #219657](https://github.com/microsoft/vscode/pull/219657)\n* Show the first comment on a notebook cell, for any owner. [PR #219926](https://github.com/microsoft/vscode/pull/219926)\n* Update notebook comment view in response to mutations [PR #219927](https://github.com/microsoft/vscode/pull/219927)\n* [@scop (Ville Skytt\u00e4)](https://github.com/scop): Fix terminal `__vsc_first_prompt` errors with bash in `nounset` mode [PR #221980](https://github.com/microsoft/vscode/pull/221980)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke)\n* feature: add setting whether or not to auto open a file after dropping it into the explorer [PR #213498](https://github.com/microsoft/vscode/pull/213498)\n* reduce impact of memory leaks related to editor [PR #219297](https://github.com/microsoft/vscode/pull/219297)\n* fix: memory leak in extension tabs [PR #219726](https://github.com/microsoft/vscode/pull/219726)\n* feature: allow configuring default browser [PR #219885](https://github.com/microsoft/vscode/pull/219885)\n* fix: memory leak in SelectBoxList [PR #221507](https://github.com/microsoft/vscode/pull/221507)\n* fix: memory leak in settings widget [PR #221518](https://github.com/microsoft/vscode/pull/221518)\n* fix: memory leak in StickyScrollFocus [PR #221622](https://github.com/microsoft/vscode/pull/221622)\n* [@syi0808 (Sung Ye In)](https://github.com/syi0808): fix(terminal): remove fixedRows line in add scrollbar [PR #221976](https://github.com/microsoft/vscode/pull/221976)\n* [@tisilent (xiejialong)](https://github.com/tisilent)\n* Add Icons. [PR #219816](https://github.com/microsoft/vscode/pull/219816)\n* Window title use execution path. [PR #221258](https://github.com/microsoft/vscode/pull/221258)\n* Add revealTerminal and focusInstance in terminalService [PR #221684](https://github.com/microsoft/vscode/pull/221684)\n* [@wdhongtw (Weida Hong)](https://github.com/wdhongtw): Reset shell-type context when the type is unknown [PR #221277](https://github.com/microsoft/vscode/pull/221277)  \nContributions to `vscode-black-formatter`:  \n* [@shayhurley (Shay Hurley)](https://github.com/shayhurley): Update README.md [PR #524](https://github.com/microsoft/vscode-black-formatter/pull/524)  \nContributions to `vscode-hexeditor`:  \n* [@tomilho (Tom\u00e1s Silva)](https://github.com/tomilho): fix: removes duplicate webview/context [PR #527](https://github.com/microsoft/vscode-hexeditor/pull/527)  \nContributions to `vscode-languageserver-node`:  \n* [@benmcmorran (Ben McMorran)](https://github.com/benmcmorran): Add supportThemeIcons in MarkdownString [PR #1504](https://github.com/microsoft/vscode-languageserver-node/pull/1504)  \nContributions to `vscode-markdown-tm-grammar`:  \n* [@RedCMD (RedCMD)](https://github.com/RedCMD): Fix `FrontMatter` integration [PR #162](https://github.com/microsoft/vscode-markdown-tm-grammar/pull/162)  \nContributions to `vscode-pull-request-github`:  \n* [@Santhoshmani1 (Santhosh Mani )](https://github.com/Santhoshmani1): Feature : Add open pr on github from pr description node [PR #6020](https://github.com/microsoft/vscode-pull-request-github/pull/6020)  \nContributions to `vscode-textmate`:  \n* [@aleclarson (Alec Larson)](https://github.com/aleclarson): feat: add child combinator \">\" (and fix a specificity bug) [PR #233](https://github.com/microsoft/vscode-textmate/pull/233)  \nContributions to `debug-adapter-protocol`:  \n* [@dawedawe (dawe)](https://github.com/dawedawe): Update overview.md to link to renamed package [PR #489](https://github.com/microsoft/debug-adapter-protocol/pull/489)  \nContributions to `language-server-protocol`:  \n* [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721)\n* Update servers.md [PR #1967](https://github.com/microsoft/language-server-protocol/pull/1967)\n* add Sonar [PR #1981](https://github.com/microsoft/language-server-protocol/pull/1981)\n* [@flaribbit (\u68a6\u98de\u7fd4)](https://github.com/flaribbit): Update servers.md [PR #1968](https://github.com/microsoft/language-server-protocol/pull/1968)\n* [@PrasangAPrajapati (Prasang A Prajapati)](https://github.com/PrasangAPrajapati): Add implementor for JCL LSP Server [PR #1955](https://github.com/microsoft/language-server-protocol/pull/1955)\n* [@StachuDotNet (Stachu Korick)](https://github.com/StachuDotNet): Clarify deltaLine and deltaStart of SemanticTokens payload [PR #1966](https://github.com/microsoft/language-server-protocol/pull/1966)  \nContributions to `monaco-editor`:  \n* [@ScottCarda-MS (Scott Carda)](https://github.com/ScottCarda-MS): Update Q# Keywords [PR #4586](https://github.com/microsoft/monaco-editor/pull/4586)  \nContributions to `node-request-light`:  \n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Add package exports [PR #25](https://github.com/microsoft/node-request-light/pull/25)  \nContributions to `python-environment-tools`:  \n* [@cclauss (Christian Clauss)](https://github.com/cclauss): interpreterInfo.py: Create the object in a single operation [PR #93](https://github.com/microsoft/python-environment-tools/pull/93)\n* [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal): style: simplify string formatting [PR #88](https://github.com/microsoft/python-environment-tools/pull/88)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_92#_pull-requests",
    "id": 3929
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Screen reader support for synthesizing chat responses  \nWe've updated the <a href=\"vscode://settings/accessibility.voice.autoSynthesize\" codesetting=\"true\">`accessibility.voice.autoSynthesize`</a> setting to enable screen reader users to opt in to hearing chat responses announced by our synthesizer, instead of getting aria alerts.",
    "url": "https://code.visualstudio.com/updates/v1_93#_screen-reader-support-for-synthesizing-chat-responses",
    "id": 3930
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Debugging improvements  \nWhen you're debugging with the focus in an editor, invoking the **Debug: Add to Watch** command now announces the variable's value for screen reader users.  \nAdditionally, the Debug accessibility help dialog was improved for better thoroughness.",
    "url": "https://code.visualstudio.com/updates/v1_93#_debugging-improvements",
    "id": 3931
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Comments sorting  \nComments can now be sorted by their position in the file or by date.  \n![Screenshot that shows the additional comment sorting options.](images/1_93/comment-sorting-options.png)",
    "url": "https://code.visualstudio.com/updates/v1_93#_comments-sorting",
    "id": 3932
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Copy settings URL from Settings editor  \nYou can copy a direct URL to a specific setting from the Settings editor. When you navigate to the settings URL, it opens VS Code and focuses the corresponding setting in the Settings editor.  \n![Video that shows how to copy a setting URL in the Settings editor.](images/1_93/copy-setting-url.gif)",
    "url": "https://code.visualstudio.com/updates/v1_93#_copy-settings-url-from-settings-editor",
    "id": 3933
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Reverse sort in Explorer  \nWe added an additional sort option, <a href=\"vscode://settings/explorer.sortOrderReverse\" codesetting=\"true\">`explorer.sortOrderReverse`</a>, which enables you to reverse any of the various Explorer sort configurations, providing further sorting flexibility.",
    "url": "https://code.visualstudio.com/updates/v1_93#_reverse-sort-in-explorer",
    "id": 3934
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Editor  \n### Lightbulb improvements  \nIn the previous milestone, we improved the location where the Code Actions lightbulb icon is shown. We've now decided to set <a href=\"vscode://settings/editor.lightbulb.enabled\" codesetting=\"true\">`editor.lightbulb.enabled`</a> to `onCode` by default. This means that the lightbulb icon is only shown when the cursor is on lines with source code and will show up less frequently.",
    "url": "https://code.visualstudio.com/updates/v1_93#_lightbulb-improvements",
    "id": 3935
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Color theming for action lists  \nThe color of the action list control, such as the Code Action menu, can be configured by themes with the `editorActionList.background`, `editorActionList.foreground`, `editorActionList.focusForeground`, and `editorActionList.focusBackground` keys. By default, the action list control theme matches that of the Quick Pick and Command Palette. Get more info about [customizing a color theme](https://code.visualstudio.com/docs/getstarted/themes#_customize-a-color-theme).  \n<h2 id=\"github-copilot-override\"><div id=\"_github-copilot-override\"/></h2>",
    "url": "https://code.visualstudio.com/updates/v1_93#_color-theming-for-action-lists",
    "id": 3936
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Renamed Code Actions for generating tests and documentation  \nWhen you place the cursor on an identifier, such as a method name, GitHub Copilot gives you Code Actions to generate tests or documentation. To better reflect their purpose, we renamed these Code Actions to **Generate Tests using Copilot** and **Generate Documentation using Copilot**. Previously, these were called *Test using Copilot* and *Document using Copilot*.  \n![New code action names for test and documentation generation](images/1_93/new-code-action-names.png)",
    "url": "https://code.visualstudio.com/updates/v1_93#_renamed-code-actions-for-generating-tests-and-documentation",
    "id": 3937
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Improved chat history  \nYou can open previous chat sessions from the chat history with the **Show Chats** button at the top of the Chat view. These sessions now have a more user-friendly, AI-generated name. You can also rename sessions manually by selecting the pencil icon on each row.  \nThese chat history entries are now also sorted by the date of their last request, and are labeled and grouped by date buckets.  \n![The chat history picker shows friendly session names and entries are grouped by age.](images/1_93/chat-history.png)  \n> Note: Only new chat sessions get the AI-generated name, any chat sessions that you already had won't be renamed.",
    "url": "https://code.visualstudio.com/updates/v1_93#_improved-chat-history",
    "id": 3938
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Save chat sessions for empty windows  \nPreviously, VS Code wasn't saving chat sessions for empty windows (that don't have a folder or workspace open). Now, these sessions are saved as expected, and previous chats from an empty window can be loaded via the **Show Chats** button.  \n> **Note**: You should avoid opening and using the same chat session in multiple empty windows simultaneously.",
    "url": "https://code.visualstudio.com/updates/v1_93#_save-chat-sessions-for-empty-windows",
    "id": 3939
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Attach context in Quick Chat  \nWhen using Quick Chat, you can now use the `Attach Context` action to attach context like files and symbol to your Copilot request.  \n<video src=\"images/1_93/attach-context-quick-chat.mp4\" title=\"Attach context in Quick Chat.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_93#_attach-context-in-quick-chat",
    "id": 3940
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Thumbs down feedback details  \nDid you get a response from Copilot Chat that wasn't what you expected? Help us out by selecting the **Thumbs down** button on the toolbar for a chat response. Now, it shows a dropdown with a few detailed options for you to describe the issue. You can also open the issue reporter from this menu.  \n![The chat response feedback dropdown, showing extra details on the thumbs down button.](images/1_93/thumbs-down.png)  \n<h3 id=\"code-generation-instructions\">Code generation instructions (Experimental)<div id=\"_code-generation-instructions\"/></h3>  \n**Setting**: <a href=\"vscode://settings/github.copilot.chat.experimental.codeGeneration.instructions\" codesetting=\"true\">`github.copilot.chat.experimental.codeGeneration.instructions`</a>  \nCopilot can help you generate code, for example as part of a refactoring, generating unit tests, or implementing a feature. And you might have specific libraries you want to use, or a particular coding style you want to follow for the code that Copilot generates.  \nThe experimental setting <a href=\"vscode://settings/github.copilot.chat.experimental.codeGeneration.instructions\" codesetting=\"true\">`github.copilot.chat.experimental.codeGeneration.instructions`</a> lets you define a set of instructions that are added to every Copilot request that generates code.  \nThe instructions can be defined in the User or Workspace [settings](https://code.visualstudio.com/docs/getstarted/settings) but can also be imported from a file.  \nThe following code snippet shows how to define a set of instructions from both settings and an external file:  \n```json\n\"github.copilot.chat.experimental.codeGeneration.instructions\": [\n{\n\"text\": \"Always add a comment: 'Generated by Copilot'.\"\n},\n{\n\"text\": \"In TypeScript always use underscore for private field names.\"\n},\n{\n\"file\": \"code-style.md\" // import instructions from file `code-style.md`\n}\n],\n```  \nContent of `myProject/code-style.md`:  \n```markdown\nAlways use React functional components.\nAlways add comments.\n```  \nIn the screenshot, you can see from the references section that the instructions were used:  \n![Copilot Chat using code generation instructions.](images/1_93/codeGenInstructions.png)",
    "url": "https://code.visualstudio.com/updates/v1_93#_thumbs-down-feedback-details",
    "id": 3941
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Automatic chat participant detection in Chat view (Experimental)  \n**Setting**: <a href=\"vscode://settings/chat.experimental.detectParticipant.enabled\" codesetting=\"true\">`chat.experimental.detectParticipant.enabled`</a>  \nGitHub Copilot has several built-in chat participants, such as `@workspace`, which also contribute commands to the Chat view. Previously, you had to explicitly specify the chat participant and command in a chat prompt.  \nTo make it easier to use chat participants with natural language, in the coming weeks, we're experimenting with enabling Copilot Chat to automatically route your question to a suitable participant or chat command.  \n![Screenshot of Chat view that shows how the '@workspace' participant is automatically detected.](images/1_93/participant-detection.png)  \nIf the automatically selected participant is not appropriate for your question, you can select the **rerun without** link at the top of the chat response to resend your question to Copilot.",
    "url": "https://code.visualstudio.com/updates/v1_93#_automatic-chat-participant-detection-in-chat-view-experimental",
    "id": 3942
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Use recent coding files as Inline Chat context (Experimental)  \n**Setting**: <a href=\"vscode://settings/github.copilot.chat.experimental.temporalContext.enabled\" codesetting=\"true\">`github.copilot.chat.experimental.temporalContext.enabled`</a>  \nOften, when you're prompting Copilot, you're asking a question related to code you were just working on or looking at. Inline Chat can now use recently seen or edited code as context to provide more relevant suggestions.  \nThis functionality is still experimental but also good to be tested by everyone.",
    "url": "https://code.visualstudio.com/updates/v1_93#_use-recent-coding-files-as-inline-chat-context-experimental",
    "id": 3943
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Use current editor line as inline Chat prompt (Experimental)  \n**Setting**: <a href=\"vscode://settings/github.copilot.config.experimental.inlineChatCompletionTrigger.enabled\" codesetting=\"true\">`github.copilot.config.experimental.inlineChatCompletionTrigger.enabled`</a>  \nInstead of first opening inline Chat and then entering your chat prompt, you can now start typing in the editor and use the contents of the current line directly as the prompt for inline Chat. And for an even smoother chat experience, Copilot can detect when you're prompting instead of writing code, and then automatically start inline Chat for you.  \nThe different ways in which you can use the current line as your prompt for inline Chat are the following:  \n* Enter **Inline Chat: Start in Editor with Current Line** from the **Command Palette** (`kb(workbench.action.showCommands)`)\n* Configure a keybinding for the **inlineChat.startWithCurrentLine** command, combine it with the `inlineChatExpansion` context key\n* Enable the <a href=\"vscode://settings/github.copilot.config.experimental.inlineChatCompletionTrigger.enabled\" codesetting=\"true\">`github.copilot.config.experimental.inlineChatCompletionTrigger.enabled`</a> setting, so that Copilot detects that the current line has mostly text instead of source code, and then starts inline Chat.  \nThe following video shows how Copilot suggests starting inline Chat after it detects that there's mostly text on the current line.  \n<video src=\"images/1_93/inline-with-line.mp4\" title=\"Start Inline Chat via Completions\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_93#_use-current-editor-line-as-inline-chat-prompt-experimental",
    "id": 3944
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Start debugging from Chat (Experimental)  \n**Setting**: <a href=\"vscode://settings/github.copilot.advanced.startDebugging.experimental.enabled\" codesetting=\"true\">`github.copilot.advanced.startDebugging.experimental.enabled`</a>  \nA new experimental slash command, `/startDebugging`, is available on the `@vscode` chat participant. This command enables you to create a launch configuration and start debugging your app.  \nYou can also access this command through the **Generate Debug Configuration with GitHub Copilot** option in the Create a launch.json Quick Pick.  \n![Generate Debug Configuration with GitHub Copilot is an option in the Create a launch.json file Quick Pick.](images/1_93/startDebugging.png)",
    "url": "https://code.visualstudio.com/updates/v1_93#_start-debugging-from-chat-experimental",
    "id": 3945
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Generate tests based on test coverage (Experimental)  \n**Setting**: <a href=\"vscode://settings/github.copilot.chat.experimental.generateTests.codeLens\" codesetting=\"true\">`github.copilot.chat.experimental.generateTests.codeLens`</a>  \nIf test coverage information is available, GitHub Copilot can offer a CodeLens **Generate tests using Copilot** for functions and methods that are not yet covered by tests.  \n<video src=\"images/1_93/generate-tests-code-lens.mp4\" title=\"Generating tests with Copilot opens a new editor.\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_93#_generate-tests-based-on-test-coverage-experimental",
    "id": 3946
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Languages  \n### Renamed \"SQL\" to \"MS SQL\"  \nThe language name for SQL files has been renamed from \"SQL\" to \"MS SQL\" to better reflect the language's focus on Microsoft SQL Server (T-SQL) syntax. The file extension for this language mode is still `.sql` and the syntax highlighting remains unchanged.  \n<h3 id=\"full-project-intellisense-and-package-typings-on-vscodedev\">Full project Intellisense and package typings on vscode.dev<div id=\"_full-project-intellisense-and-package-typings-on-vscodedev\"/></h3>  \nWorking with JavaScript and TypeScript on [VS Code for the Web](https://vscode.dev) just got a whole lot better. To start off, we've implemented package IntelliSense, so you can see suggestions and documentation from any imported package, such as `react`. This works much like it does in the desktop version of VS Code.  \n![IntelliSense and error reporting for an imported package on vscode.dev.](images/1_93/ts-web-full-project-intellisense.png)  \nIn TypeScript files, we offer IntelliSense for packages listed in your `package.json`. JavaScript files are a little more flexible and use [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition), which offers IntelliSense for any package imported into the current file, even if it's not listed in the `package.json`.  \nThanks to package IntelliSense, we've also enabled full project IntelliSense for JavaScript and TypeScript projects. This greatly improves navigation through code, letting you correctly **Go to Definition** and **Find All References** to any symbol in your project. It also enables type error reporting. We now even support auto-imports while writing code.  \n![Finding all references of a symbol in a TypeScript project.](images/1_93/ts-web-peek-refs.png)  \nPackage typings and full project IntelliSense are supported in Chrome, Microsoft Edge, and Firefox. Safari is not yet supported, as it does not implement [`ReadableByteStreamController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController).",
    "url": "https://code.visualstudio.com/updates/v1_93#_renamed-sql-to-ms-sql",
    "id": 3947
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Compact folders setting  \nThanks to a community contribution, we have added a new setting, <a href=\"vscode://settings/scm.compactFolders\" codesetting=\"true\">`scm.compactFolders`</a>, to control whether folders are rendered in compact form in the Source Control view when changes are viewed as a tree.",
    "url": "https://code.visualstudio.com/updates/v1_93#_compact-folders-setting",
    "id": 3948
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Terminal  \n### Julia and NuShell support  \nThere's now shell integration support for Julia and NuShell. This enables features such as [command decorations](https://code.visualstudio.com/docs/terminal/shell-integration#_command-decorations-and-the-overview-ruler) and [run recent command](https://code.visualstudio.com/docs/terminal/shell-integration#_run-recent-command) for these shell types.",
    "url": "https://code.visualstudio.com/updates/v1_93#_julia-and-nushell-support",
    "id": 3949
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Move multiple terminal tabs  \nYou can now multi-select terminal tabs and move them around the list of terminals as an ordered group.",
    "url": "https://code.visualstudio.com/updates/v1_93#_move-multiple-terminal-tabs",
    "id": 3950
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Command guide setting and color theming  \nThe command guide is a bar that shows up beside a command and its output when hovered. You can now disable the [command guide](https://code.visualstudio.com/docs/terminal/shell-integration#_command-guide) with the <a href=\"vscode://settings/terminal.integrated.shellIntegration.showCommandGuide\" codesetting=\"true\">`terminal.integrated.shellIntegration.showCommandGuide`</a> setting and the color can be configured by themes with the `terminalCommandGuide.foreground` theme key.",
    "url": "https://code.visualstudio.com/updates/v1_93#_command-guide-setting-and-color-theming",
    "id": 3951
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Sticky Scrolling for Notebook execution count  \nThe execution count of a code cell now sticks to the bottom of the screen when scrolling down a code cell. This makes it easier to see the execution state and update when working in a long code cell.  \n<video src=\"images/1_93/notebook_execution_count_sticky_scroll.mp4\" title=\"Notebook execution count remain visible during scrolling\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_93#_sticky-scrolling-for-notebook-execution-count",
    "id": 3952
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Tasks  \n### Keep task terminal open on process exit  \nIf a task's terminal process exits with a nonzero code, we now keep the terminal open for easier debugging.",
    "url": "https://code.visualstudio.com/updates/v1_93#_keep-task-terminal-open-on-process-exit",
    "id": 3953
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Debug  \n### Jump to variable definition  \nDebug extensions can now link variables and expressions to locations in your code. Data with this link are `kbstyle(Ctrl)`-selectable (`kbstyle(Cmd)`-selectable on macOS) in the Variables view, Watch view, and Debug Console.  \nThe built-in JavaScript debugger will link locations of functions defined in your code\u00b8 Other debug extensions need to adopt the corresponding protocol change to enable this feature.",
    "url": "https://code.visualstudio.com/updates/v1_93#_jump-to-variable-definition",
    "id": 3954
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Find control  \nYou can now open the Find control in the Debug Console (`kb(repl.action.find)`) to search for results in the input. Support for searching results in the output will be investigated in future milestones.  \nYou can also access the control via the action `Debug Console: Focus Find` that appears on the Debug Console's toolbar to the right of the Filter control.",
    "url": "https://code.visualstudio.com/updates/v1_93#_find-control",
    "id": 3955
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Launch config input cache  \n[Input variables](https://code.visualstudio.com/docs/editor/variables-reference#_input-variables) used in launch configurations and tasks now persist their last entered value to ease the process of rerunning debug sessions that depend on them. This is only done if there is no explicit `default` defined on the input.",
    "url": "https://code.visualstudio.com/updates/v1_93#_launch-config-input-cache",
    "id": 3956
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### JavaScript Debugger  \n#### Experimental Network view  \nThe JavaScript debugger now includes a basic, experimental Network view that is available when the <a href=\"vscode://settings/debug.javascript.enableNetworkView\" codesetting=\"true\">`debug.javascript.enableNetworkView`</a> setting is turned on. The view displays information about requests and responses made by browser sessions.  \n![Screenshot that shows the Network view for the JavaScript debugger.](images/1_93/js-debug-network.png)\n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_  \nThe Network view also works for Node.js 22.6.0 and above when the process is launched with [`--experimental-network-inspection`](https://nodejs.org/en/blog/release/v22.6.0#experimental-network-inspection-support-in-nodejs) in its arguments, such as by adding `\"runtimeArgs\": [\"--experimental-network-inspection\"]` into a `node` launch configuration.  \n> **Note**: Node's implementation of networking is still very early and most data around requests and responses is not yet available.",
    "url": "https://code.visualstudio.com/updates/v1_93#_javascript-debugger",
    "id": 3957
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Testing  \n### Support for stack traces on messages  \nTesting extensions can now associate a stack trace with test failures. When they do, you'll see the code around each frame of the call stack in the Test Results view and in error peeks. You can `kbstyle(Ctrl)`-select (`kbstyle(Cmd)`-select on macOS) on code in the views to go to their original locations, or use the **Go to File** action on their headers.  \n![Editor showing a test failure message and the corresponding call stack that led to the failure.](images/1_93/test-stack.png)\n_Theme: [Codesong](https://marketplace.visualstudio.com/items?itemName=connor4312.codesong) (preview on [vscode.dev](https://vscode.dev/editor/theme/connor4312.codesong))_",
    "url": "https://code.visualstudio.com/updates/v1_93#_support-for-stack-traces-on-messages",
    "id": 3958
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### GitHub Pull Requests and Issues  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. Review the [changelog for the 0.96.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0960) release of the extension to learn about the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_93#_github-pull-requests-and-issues",
    "id": 3960
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Extension authoring  \n### Impact of EcmaScript Module (ESM) Loading of VS Code  \nWe are in the process of changing how our code is loaded in VS Code core, away from AMD/CommonJS to ESM. Extensions will continue to load as CommonJS, but this change comes with change to the `require` method: Specifically, `require.main` will be `undefined` beginning with our `1.94` release. If you have a usecase for accessing a file from the installation, please consider `vscode.env.appRoot` instead or [reach out to us](https://github.com/microsoft/vscode/issues).",
    "url": "https://code.visualstudio.com/updates/v1_93#_impact-of-ecmascript-module-esm-loading-of-vs-code",
    "id": 3961
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Terminal shell integration API  \nThe terminal shell integration API is now available to use. This powerful API enables an extension to listen to commands run in terminals, read their raw output, exit code, and command lines.  \n```ts\nwindow.onDidEndTerminalShellExecution(event => {\nif (event.execution.commandLine.value.startsWith('git')) {\nif (event.exitCode === 0) {\n// React to a successful git command\n} else {\n// React to a failing git command\n}\n}\n});\n```  \nIt also provides a more reliable way to execute a command, which will wait for a prompt to start before sending the command, preventing the command to be echoed to the terminal an extra time.  \n```ts\nconst commandLine = 'echo \"Hello world\"';\nif (term.shellIntegration) {\nconst execution = shellIntegration.executeCommand({ commandLine });\nwindow.onDidEndTerminalShellExecution(event => {\nif (event.execution === execution) {\nconsole.log(`Command exited with code ${event.exitCode}`);\n}\n});\n} else {\nterm.sendText(commandLine);\n// Without shell integration, we can't know when the command has finished or what the\n// exit code was.\n}\n```  \nSee the API in `vscode.d.ts` and the [extension sample](https://github.com/microsoft/vscode-extension-samples/tree/main/shell-integration-sample) for more information.  \n- [`Terminal.shellIntegration`](https://github.com/microsoft/vscode/blob/f0417069c62e20f3667506f4b7e53ca0004b4e3e/src/vscode-dts/vscode.d.ts#L7334-L7344)\n- [`window.onDidChangeTerminalShellIntegration`](https://github.com/microsoft/vscode/blob/f0417069c62e20f3667506f4b7e53ca0004b4e3e/src/vscode-dts/vscode.d.ts#L10777-L10780)\n- [`window.onDidStartTerminalShellExecution`](https://github.com/microsoft/vscode/blob/f0417069c62e20f3667506f4b7e53ca0004b4e3e/src/vscode-dts/vscode.d.ts#L10782-L10787)\n- [`window.onDidEndTerminalShellExecution`](https://github.com/microsoft/vscode/blob/f0417069c62e20f3667506f4b7e53ca0004b4e3e/src/vscode-dts/vscode.d.ts#L10789-L10794)",
    "url": "https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api",
    "id": 3962
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Authentication account API  \nThe authentication APIs now have more control when handling multiple accounts. Something that has always been missing is the ability to get all accounts and get an `AuthenticationSession` for a specific account. That is now possible with the finalization of the `getAccounts` API.  \nExtension authors looking to consume authentication sessions can run the following code to get the `AuthenticationSessionAccountInformation` of the accounts that the user is logged into:  \n```ts\nconst accounts = vscode.authentication.getAccounts('microsoft');\n```  \nFrom there, you can use those accounts to mint sessions specifically for those accounts:  \n```ts\nconst session = vscode.authentication.getSession('microsoft', scopes, { account: accounts[0] })\n```  \n> **Note**: For this to work, the authentication provider needs to handle a parameter that is passed in to both `getSessions` and `createSession`. The built-in GitHub and Microsoft providers have already adopted this.  \nWe believe that this is the clearest way to handle multiple authentication sessions and also handle various scenarios that we couldn't support before.",
    "url": "https://code.visualstudio.com/updates/v1_93#_authentication-account-api",
    "id": 3963
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Preview Features  \n### Terminal IntelliSense improvements  \n[Experimental PowerShell IntelliSense](https://code.visualstudio.com/docs/terminal/shell-integration#_experimental-intellisense-for-powershell) got the following improvements this release:  \n- `git checkout` now includes a completion for `-` to switch to the previous branch.\n- The default value for `terminal.integrated.suggest.runOnEnter` is now set to ignore, which means `kbstyle(Enter)` does not interact at all with IntelliSense. This was feedback from users who found the impact on muscle memory too disruptive.\n- PowerShell keywords are now available as completions for the command (not args).\n- The `cd` first directory suggestion is now always itself, which makes things smoother when `terminal.integrated.suggest.runOnEnter` is set.\n![cd into docs will present docs as the top result.](images/1_93/terminal_cd_self_dir.png)\n- Suggestions are more consistent now when requested at different positions on the command line.\n- A completion is provided for `<path>/../` when navigating back directories.\n![cd ..\\\\ will give a suggestion for ..\\\\..\\\\.](images/1_93/terminal_suggest_dotdot.png)",
    "url": "https://code.visualstudio.com/updates/v1_93#_terminal-intellisense-improvements",
    "id": 3964
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Conpty shipping in product  \nConpty is the backend for the terminal that emulates how pseudoterminals work on other operating systems. This component is shipped in Windows itself, which means that bug fixes are released via Windows Update. Users might end up waiting a long time for these fixes to arrive.  \nThis release, we have an experimental setting that bundles conpty with VS Code itself, similar to how Windows Terminal does it. This means that users can get bug fixes as we ship updates to VS Code instead of waiting on Windows updates.  \nTo enable this, set the following setting to `true`:  \n```json\n\"terminal.integrated.experimental.windowsUseConptyDll\": true\n```  \nThe type of improvements you should expect for enabling this are:  \n- Better performance\n- More reliable shell integration\n- More escape sequence support (for example [sixel](https://en.wikipedia.org/wiki/Sixel) support on Windows soon)  \nThe only currently known issue is that some users have a process that sticks around and blocks VS Code updates ([microsoft/vscode#225719](https://github.com/microsoft/vscode/issues/225719)), which requires manually killing the process to enable updates.",
    "url": "https://code.visualstudio.com/updates/v1_93#_conpty-shipping-in-product",
    "id": 3965
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### TypeScript 5.6 support  \nWe continued improving our support for the upcoming TypeScript 5.6 release. Check out the [TypeScript 5.6 RC blog post](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6-rc/) for details on what this release includes.  \nTo start using preview builds of TypeScript 5.6, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).",
    "url": "https://code.visualstudio.com/updates/v1_93#_typescript-5.6-support",
    "id": 3966
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### New Issue Reporter implementation  \nThis milestone, we are experimenting with a new implementation of the Issue Reporter. The functionality remains the same, but there should be a few improvements, such as improved multi-monitor support, and the availability of the Issue Reporter in VS Code for the Web.  \nThe new version of the Issue Reporter is enabled by default and can be configured with the <a href=\"vscode://settings/issueReporter.experimental.auxWindow\" codesetting=\"true\">`issueReporter.experimental.auxWindow`</a> setting in desktop versions of VS Code.",
    "url": "https://code.visualstudio.com/updates/v1_93#_new-issue-reporter-implementation",
    "id": 3967
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n## Proposed APIs  \n### Tools for language models  \nWe continue to iterate on our `LanguageModelTool` API. The API comes with two major parts:  \n1. The ability for extensions to register a *tool*. A tool is a piece of functionality that is meant to be used by language models. For example, reading the Git history of a file.  \n2. The mechanics for language models to support tools, such as extensions passing tools when making a request, language models requesting a tool invocation, and extensions communicating back the result of a tool invocation.  \nOne of the changes this month adds is the ability for the user to manually attach certain tools to their chat request. An example of this would be for a tool that computes some dynamic context that the user wants to use in their request.  \nThe proposal can be found as [vscode.proposed.lmTools.d.ts](https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.lmTools.d.ts). Check out the [`tool-user` sample extension](https://github.com/microsoft/vscode-extension-samples/tree/roblou/tool-user) that demonstrates registering and calling tools.  \nWatch [issue #213274](https://github.com/microsoft/vscode/issues/213274) for updates or to give us feedback.  \n> **Note**: The API is still under active development, and things will change.",
    "url": "https://code.visualstudio.com/updates/v1_93#_tools-for-language-models",
    "id": 3968
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Testing enhancements  \n#### Associate code to tests  \nWe're working on an API that enables an extension to associate code to tests, and vice versa. This lets users jump between both, and enables actions, such as **Run Tests at Cursor**, to also work in implementation code. We anticipate building more experiences as the API develops.  \nCheck out [vscode#126932](https://github.com/microsoft/vscode/issues/126932#issuecomment-2243510427) for more information and updates.  \n#### Attributable test coverage  \nWe're working on an API for attributing test coverage on a per-test basis. This enables users to see which tests ran which code, filtering both the coverage shown in the editor, and that in the **Test Coverage** view.  \nCheck out [vscode#212196](https://github.com/microsoft/vscode/issues/212196) for more information and updates.",
    "url": "https://code.visualstudio.com/updates/v1_93#_testing-enhancements",
    "id": 3969
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Chat participant detection API  \nIf you're authoring an extension that contributes participants or chat commands to the Chat view, you can enable your participants and commands to be automatically detected by adding metadata to your `chatParticipants` contribution in `package.json`. We have updated the `vscode-extension-samples` repo with [examples](https://github.com/microsoft/vscode-extension-samples/blob/d4c646fa3cf6d8ca060aa6c7806c0543d0011de8/chat-sample/package.json#L27-L57) of how you can adopt this API. When testing, be sure to set <a href=\"vscode://settings/chat.experimental.detectParticipant.enabled\" codesetting=\"true\">`chat.experimental.detectParticipant.enabled`</a>. Please note that this is a proposed API that is subject to change.",
    "url": "https://code.visualstudio.com/updates/v1_93#_chat-participant-detection-api",
    "id": 3970
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)\n* [@albertosantini (Alberto Santini)](https://github.com/albertosantini)",
    "url": "https://code.visualstudio.com/updates/v1_93#_issue-tracking",
    "id": 3972
  },
  {
    "content": "Learn what is new in the Visual Studio Code August 2024 Release (1.93)  \n### Pull requests  \nContributions to `vscode`:  \n* [@akinomyoga (Koichi Murase)](https://github.com/akinomyoga): Fix Bash integration clobbering `$?` for PROMPT_COMMAND [PR #226929](https://github.com/microsoft/vscode/pull/226929)\n* [@andrewbranch (Andrew Branch)](https://github.com/andrewbranch): \\[typescript-language-features\\] Add autoImportSpecifierExcludeRegexes preference [PR #226202](https://github.com/microsoft/vscode/pull/226202)\n* [@anton-matosov (Anton Matosov)](https://github.com/anton-matosov): A followup to #171066 fixing zsh and fish shells implementations [PR #223421](https://github.com/microsoft/vscode/pull/223421)\n* [@arvid220u (Arvid Lunnemark)](https://github.com/arvid220u): Never run cleared auxwindow timeouts [PR #221296](https://github.com/microsoft/vscode/pull/221296)\n* [@BABA983 (BABA)](https://github.com/BABA983)\n* Remove duplicate code [PR #224091](https://github.com/microsoft/vscode/pull/224091)\n* Respect the original terminal tab order after drag multiple tabs [PR #224591](https://github.com/microsoft/vscode/pull/224591)\n* Add registerWindowTitleVariable command [PR #225408](https://github.com/microsoft/vscode/pull/225408)\n* [@bsShoham (Shoham Ben Shitrit)](https://github.com/bsShoham): Trigger chat variable completion on word start [PR #224174](https://github.com/microsoft/vscode/pull/224174)\n* [@Cecil0o0 (hj)](https://github.com/Cecil0o0): refactor: merge same namespace declaration [PR #219638](https://github.com/microsoft/vscode/pull/219638)\n* [@CGNonofr (Lo\u00efc Mangeonjean)](https://github.com/CGNonofr): Properly detect node env everywhere [PR #221357](https://github.com/microsoft/vscode/pull/221357)\n* [@cobey (Cody Beyer)](https://github.com/cobey): adding ai-inference tags for python and js [PR #225098](https://github.com/microsoft/vscode/pull/225098)\n* [@dangerman (Anees Ahee)](https://github.com/dangerman)\n* Fix missing \"Restart TS Server\" command in Command Palette [PR #223433](https://github.com/microsoft/vscode/pull/223433)\n* Round off notification focus outlines [PR #225824](https://github.com/microsoft/vscode/pull/225824)\n* [@Flanker32 (Hanxiao Liu)](https://github.com/Flanker32): Update workspace tagging for java ai libraries [PR #223677](https://github.com/microsoft/vscode/pull/223677)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto)\n* \\[typescript-language-features\\] Use commit characters from tsserver when available [PR #223541](https://github.com/microsoft/vscode/pull/223541)\n* \\[typescript-language-features\\] fix diagnostics telemetry property name [PR #225079](https://github.com/microsoft/vscode/pull/225079)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Show readonly filename decoration after revert that also resets mtime (fix #221014) [PR #221023](https://github.com/microsoft/vscode/pull/221023)\n* Fix bad capitalization of completion item statusbar texts (#225429) [PR #225431](https://github.com/microsoft/vscode/pull/225431)\n* Improve description of `workbench.editor.enablePreview` setting (fix #225453) [PR #225704](https://github.com/microsoft/vscode/pull/225704)\n* [@hron (Aleksei Gusev)](https://github.com/hron): fix: `merge.toggleActiveConflict` as shortcuts [PR #225320](https://github.com/microsoft/vscode/pull/225320)\n* [@iisaduan (Isabel Duan)](https://github.com/iisaduan): add settings for typescript's organizeImports to the settings interface [PR #209293](https://github.com/microsoft/vscode/pull/209293)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413)\n* Fix search results don't automatically update on editor changes, if I move the Search view to another location [PR #215764](https://github.com/microsoft/vscode/pull/215764)\n* Change terminal rename codicon  [PR #225444](https://github.com/microsoft/vscode/pull/225444)\n* Fix explorer greys out any folder/item with the word \"cut\" [PR #225455](https://github.com/microsoft/vscode/pull/225455)\n* [@Jesscha (JessCha)](https://github.com/Jesscha): Fix typo in extHostExtensionService.ts [PR #224111](https://github.com/microsoft/vscode/pull/224111)\n* [@m-byte (Matthias B.)](https://github.com/m-byte): Fix: only add apt sources for users that want them (#22145) [PR #221285](https://github.com/microsoft/vscode/pull/221285)\n* [@mkasenberg](https://github.com/mkasenberg): Fix focusResult of Search Editor [PR #205914](https://github.com/microsoft/vscode/pull/205914)\n* [@mogelbrod (Victor Hallberg)](https://github.com/mogelbrod): Add \"sort by updated at\" option to comments panel [PR #221665](https://github.com/microsoft/vscode/pull/221665)\n* [@NriotHrreion (Norcleeh)](https://github.com/NriotHrreion): fix: Command palette closes when Active Terminal killed [PR #225500](https://github.com/microsoft/vscode/pull/225500)\n* [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Fix \"Open Workspace Settings\" when User Settings is open (fixes #148709) [PR #225311](https://github.com/microsoft/vscode/pull/225311)\n* [@rbuckton (Ron Buckton)](https://github.com/rbuckton): Update to support strictBuiltinIteratorReturn [PR #222009](https://github.com/microsoft/vscode/pull/222009)\n* [@rehmsen (Ole)](https://github.com/rehmsen): Make regular text in markdown comments wrap in notebook editors. [PR #224484](https://github.com/microsoft/vscode/pull/224484)\n* [@RichardLuo0 (RichardLuo)](https://github.com/RichardLuo0): fix: remove tooltips from dialog buttons [PR #225772](https://github.com/microsoft/vscode/pull/225772)\n* [@stalematker (Kevin)](https://github.com/stalematker): Fix typo in extensionEnablementService.ts [PR #224145](https://github.com/microsoft/vscode/pull/224145)\n* [@swordensen (Michael Sorensen)](https://github.com/swordensen): Fixes #218626 [PR #219148](https://github.com/microsoft/vscode/pull/219148)\n* [@thegecko (Rob Moran)](https://github.com/thegecko): Add viewContainer contribution point [PR #212499](https://github.com/microsoft/vscode/pull/212499)\n* [@tisilent (xiejialong)](https://github.com/tisilent): Add scm.compactFolders. [PR #221459](https://github.com/microsoft/vscode/pull/221459)\n* [@troy351](https://github.com/troy351): fix: multiDiffEditor has wrong background color name [PR #224151](https://github.com/microsoft/vscode/pull/224151)\n* [@walter-erquinigo (Walter Erquinigo)](https://github.com/walter-erquinigo): Handle errors from Dynamic Debug Configuration providers [PR #202622](https://github.com/microsoft/vscode/pull/202622)\n* [@zkat (Kat March\u00e1n)](https://github.com/zkat): stop AutoInstallerFs from thrashing forevermore and fix typings installer [PR #225648](https://github.com/microsoft/vscode/pull/225648)  \nContributions to `vscode-css-languageservice`:  \n* [@wkillerud (William Killerud)](https://github.com/wkillerud): fix: support for conditional exports in sass's pkg [PR #400](https://github.com/microsoft/vscode-css-languageservice/pull/400)  \nContributions to `vscode-eslint`:  \n* [@denis-sokolov (Denis Sokolov)](https://github.com/denis-sokolov): Trivial fixes in Readme [PR #1903](https://github.com/microsoft/vscode-eslint/pull/1903)  \nContributions to `vscode-flake8`:  \n* [@taesungh (Taesung Hwang)](https://github.com/taesungh): Use global settings for `ignorePatterns` default [PR #327](https://github.com/microsoft/vscode-flake8/pull/327)  \nContributions to `vscode-generator-code`:  \n* [@spjpgrd (se\u00e1n patrick john paul george ringo doran)](https://github.com/spjpgrd): Update vsc-extension-quickstart.md [PR #486](https://github.com/microsoft/vscode-generator-code/pull/486)  \nContributions to `vscode-hexeditor`:  \n* [@tomilho (Tom\u00e1s Silva)](https://github.com/tomilho): HexEditor diff  [PR #522](https://github.com/microsoft/vscode-hexeditor/pull/522)  \nContributions to `vscode-isort`:  \n* [@iloveitaly (Michael Bianco)](https://github.com/iloveitaly): fix: add tool path so isort works without bundled version [PR #417](https://github.com/microsoft/vscode-isort/pull/417)\n* [@jicruz96 (J.I. Cruz)](https://github.com/jicruz96): Do not log traceback if file has `skip_file` comment [PR #416](https://github.com/microsoft/vscode-isort/pull/416)  \nContributions to `vscode-js-profile-visualizer`:  \n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fixes [microsoft/vscode#225059](https://github.com/microsoft/vscode/issues/225059) [PR #186](https://github.com/microsoft/vscode-js-profile-visualizer/pull/186)  \nContributions to `vscode-json-languageservice`:  \n* [@jeremyfiel (Jeremy Fiel)](https://github.com/jeremyfiel): update invalid json instance in DocumentSymbols.test.ts [PR #241](https://github.com/microsoft/vscode-json-languageservice/pull/241)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Deprecate Thenable and alias to PromiseLike [PR #239](https://github.com/microsoft/vscode-json-languageservice/pull/239)\n* [@ttlopes (Tom\u00e1s Lopes)](https://github.com/ttlopes): Fix microsoft/vscode#209655: fix case-sensitive JSON sorting error [PR #238](https://github.com/microsoft/vscode-json-languageservice/pull/238)  \nContributions to `vscode-languageserver-node`:  \n* [@DavyLandman (Davy Landman)](https://github.com/DavyLandman): Show the error message from the LSP server [PR #1490](https://github.com/microsoft/vscode-languageserver-node/pull/1490)\n* [@sh-cho (Seonghyeon Cho)](https://github.com/sh-cho): Fix npm, azure pipeline links [PR #1544](https://github.com/microsoft/vscode-languageserver-node/pull/1544)  \nContributions to `vscode-loader`:  \n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): feature: set `amdLoaderGlobal` to `globalThis` in case `this` is not defined [PR #58](https://github.com/microsoft/vscode-loader/pull/58)  \nContributions to `vscode-mypy`:  \n* [@hamirmahal (Hamir Mahal)](https://github.com/hamirmahal)\n* fix: usage of `deprecated` version of `Node.js` [PR #309](https://github.com/microsoft/vscode-mypy/pull/309)\n* fix: usage of `setup-node@v3` in `push-check` [PR #318](https://github.com/microsoft/vscode-mypy/pull/318)\n* [@meghprkh (Megh Parikh)](https://github.com/meghprkh): Update mypy to 1.11.0 [PR #311](https://github.com/microsoft/vscode-mypy/pull/311)  \nContributions to `vscode-pull-request-github`:  \n* [@jmg-duarte (Jos\u00e9 Duarte)](https://github.com/jmg-duarte)\n* Use editor font for diff [PR #6148](https://github.com/microsoft/vscode-pull-request-github/pull/6148)\n* Make code blocks use the editor's font family by default [PR #6149](https://github.com/microsoft/vscode-pull-request-github/pull/6149)  \nContributions to `vscode-python-debugger`:  \n* [@paulacamargo25 (Paula)](https://github.com/paulacamargo25)\n* Fix translation error [PR #411](https://github.com/microsoft/vscode-python-debugger/pull/411)\n* bump release 2024.10 [PR #416](https://github.com/microsoft/vscode-python-debugger/pull/416)\n* bump-dev-version-2024.11 [PR #417](https://github.com/microsoft/vscode-python-debugger/pull/417)\n* Update debugpy version [PR #432](https://github.com/microsoft/vscode-python-debugger/pull/432)  \nContributions to `vscode-vsce`:  \n* [@BlackHole1 (Kevin Cui)](https://github.com/BlackHole1): fix: probabilistic trigger v8 crash [PR #1032](https://github.com/microsoft/vscode-vsce/pull/1032)\n* [@mark-wiemer (Mark Wiemer)](https://github.com/mark-wiemer): Fix punycode deprecation warning [PR #1037](https://github.com/microsoft/vscode-vsce/pull/1037)  \nContributions to `language-server-protocol`:  \n* [@asukaminato0721 (Asuka Minato)](https://github.com/asukaminato0721): add egglog [PR #1989](https://github.com/microsoft/language-server-protocol/pull/1989)\n* [@LPeter1997](https://github.com/LPeter1997): Added Draco.Lsp as an LSP SDK in .NET [PR #2001](https://github.com/microsoft/language-server-protocol/pull/2001)\n* [@marcoroth (Marco Roth)](https://github.com/marcoroth)\n* Add Tailwind Intellisense [PR #1986](https://github.com/microsoft/language-server-protocol/pull/1986)\n* Add Stimulus LSP [PR #1987](https://github.com/microsoft/language-server-protocol/pull/1987)\n* [@techee (Ji\u0159\u00ed Techet)](https://github.com/techee): Add Geany to the list of editors supporting LSP [PR #2008](https://github.com/microsoft/language-server-protocol/pull/2008)\n* [@XuechunHHH (Xuechun Hua)](https://github.com/XuechunHHH): Add PartiQL to servers.md [PR #1985](https://github.com/microsoft/language-server-protocol/pull/1985)  \nContributions to `python-environment-tools`:  \n* [@Armd04](https://github.com/Armd04): Changed the order of locaters [PR #136](https://github.com/microsoft/python-environment-tools/pull/136)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_93#_pull-requests",
    "id": 3973
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### GPT-4o in Inline Chat  \nWe've upgraded Copilot Inline Chat to GPT-4o, to give you faster, more accurate, and higher-quality code and explanations when you use Chat in the editor.",
    "url": "https://code.visualstudio.com/updates/v1_94#_gpt-4o-in-inline-chat",
    "id": 3974
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Public code matching in chat  \nYou can allow GitHub Copilot to return code that could match publicly available code on GitHub.com. When this functionality is enabled for your [organization subscription](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching) or [personal subscription](https://docs.github.com/en/copilot/managing-copilot/managing-copilot-as-an-individual-subscriber/managing-copilot-policies-as-an-individual-subscriber#enabling-or-disabling-suggestions-matching-public-code), Copilot code completions already provided you with details about the matches that were detected. We now show you these matches for public code in Copilot Chat as well.  \nIf this is enabled for your organization or subscription, you might see a message at the end of the response with a **View matches** link. If you select the link, an editor opens that shows you the details of the matching code references with more details.  \n![Chat code referencing example.](images/1_94/code-references.png)  \nGet more information about [code referencing in GitHub Copilot](https://github.blog/news-insights/product-news/code-referencing-now-generally-available-in-github-copilot-and-with-microsoft-azure-ai/) on the GitHub Blog.",
    "url": "https://code.visualstudio.com/updates/v1_94#_public-code-matching-in-chat",
    "id": 3975
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### File suggestions in chat  \nIn chat input fields, you can now type `#<filename>` to get file name suggestions and quickly attach them to your prompt as context. This works in chat locations that support file attachments, such as the Chat view, Quick Chat, Inline Chat, and Notebook Chat.  \n<video src=\"images/1_94/chat-file-complete.mp4\" title=\"File suggestions when typing #filename\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_file-suggestions-in-chat",
    "id": 3976
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Improved file links in chat responses  \nWe've improved the rendering of any workspace file paths that are mentioned in Copilot responses. These paths are very common when  you ask [`@workspace`](https://code.visualstudio.com/docs/copilot/copilot-chat#_workspace) questions.  \nThe first thing you'll notice, is that paths to workspace files now include a file icon. This enables you to easily distinguish them in the chat response. The file icon is based on your current [file icon theme](https://code.visualstudio.com/docs/getstarted/themes#_file-icon-themes).  \n![Paths to workspace files in the response now render using file icons.](images/1_94/copilot-path-overview.png)  \nThese paths are interactive links, so just select them to open the corresponding file. You can even use drag and and drop to open the file in a new editor group, or insert it into a text editor by holding `kbstyle(Shift)` before dropping.  \n<video src=\"images/1_94/copilot-path-dnd.mp4\" title=\"Dragging and dropping a workspace file from copilot into the editor\" autoplay loop controls muted></video>  \nBy default, these links only show the file name but you can hover over them to see the full file path.  \n![Hovering over a workspace path to see the full workspace path.](images/1_94/copilot-path-hover.png)  \nYou can also right-click on one of these paths to open a context menu with additional commands, such as copying a relative path to the resource, or revealing the file in your operating system's file explorer.  \n![The context menu for a workspace path in chat provides options to open the file or copy its path.](images/1_94/copilot-path-right-click.png)  \nWe plan to further improve workspace path rendering in the coming iterations, as well as make similar improvements to symbol names in responses.",
    "url": "https://code.visualstudio.com/updates/v1_94#_improved-file-links-in-chat-responses",
    "id": 3977
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Drag and drop files to add chat context  \nYou can now easily attach additional files as context for a chat prompt by dragging files or editor tabs from the workbench directly into chat. For Inline Cat, hold `kbstyle(Shift)` and drop a file to add it as context instead of opening it in the editor.  \n<video src=\"images/1_94/copilot-attach-dnd.mp4\" title=\"Dragging files and editors into chat\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_drag-and-drop-files-to-add-chat-context",
    "id": 3978
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### File attachments included in history  \nThere are multiple ways to attach a file or editor selection as relevant context to your chat request. Previously, this context was added only for the current request and was not included in the history of follow-on requests. Now, these attachments are kept in history, so that you can keep referring to them without having to reattach them.  \n![Chat conversation shows that Copilot keeps track of attached files across multiple prompts.](images/1_94/file-attachment.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_file-attachments-included-in-history",
    "id": 3979
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Inline Chat and completions in Python native REPL  \nThe native REPL editor, used by the Python extension, now supports Copilot Inline Chat and code completions directly in the input box.  \n<video src=\"images/1_94/copilot-in-REPL.mp4\" title=\"Using Copilot Inline Chat in the native REPL editor\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_inline-chat-and-completions-in-python-native-repl",
    "id": 3980
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Accept and run generated code in notebook  \nWhen you use Copilot Inline Chat to generate code in a notebook, you can now accept and directly run the generated code from Inline Chat.  \n<video src=\"images/1_94/notebook-accept-run.mp4\" title=\"Accept and run generated code directly from Inline Chat\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_accept-and-run-generated-code-in-notebook",
    "id": 3981
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Attach variables in notebook chat  \nWhen you use Copilot in a notebook, you can now attach variables from the Jupyter kernel in your requests. Adding variables gives you more precise control over the context for your chat request, so that you get more relevant responses from Copilot.  \nEither type `#`, followed by the variable name, or use the \ud83d\udcce control (`kb(workbench.action.chat.attachContext)`) in Inline Chat to add a context variable.  \n<video src=\"images/1_94/notebook-kernel-variable.mp4\" title=\"Attach a context variable by using `#` in a notebook chat request\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_attach-variables-in-notebook-chat",
    "id": 3982
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Refreshed chat user experience  \nWe've refreshed the Chat view with a clean new welcome experience, and we've updated the layout of the chat input area. You can now use the `@` button to easily find the list of available chat participants and slash commands, both the built-in ones and chat participants from extensions that you've installed. You can also still find participants and slash commands by typing `/` or `@` in the chat input box.  \n![Updated Chat view welcome experience.](images/1_94/chat-welcome.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_refreshed-chat-user-experience",
    "id": 3983
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Semantic search results (Preview)  \n**Setting**: `setting(github.copilot.chat.search.semanticTextResults)`  \nThe Search view enables you to perform an exact search across your files. We have now added functionality to the Search view that uses Copilot to give search results that are semantically relevant.  \n<video controls src=\"./images/1_94/semantic-search-in-search-view.mp4\" title=\"Semantic Search in Search View\" autoplay loop controls muted></video>  \nThis functionality is still in preview and by default, the setting is not enabled. Try it out and let us know what you think!",
    "url": "https://code.visualstudio.com/updates/v1_94#_semantic-search-results-preview",
    "id": 3984
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Fix test failure (Preview)  \n**Setting**: `setting(github.copilot.chat.fixTestFailure.enabled)`  \nWe've added specialized logic to help you to diagnose failing unit tests. This logic is triggered in some scenarios by the `/fix` slash command, and you can also invoke it directly with the `/fixTestFailure` slash command. The command is enabled in chat by default but can be disabled via the setting `setting(github.copilot.chat.fixTestFailure.enabled)`.  \n<h2 id=\"automated-test-setup-override\"><div id=\"_automated-test-setup-override\"/></h2>",
    "url": "https://code.visualstudio.com/updates/v1_94#_fix-test-failure-preview",
    "id": 3985
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Automated test setup (Experimental)  \n**Setting**: `setting(github.copilot.chat.experimental.setupTests.enabled)`  \nWe added an experimental `/setupTests` slash command that can help you configure the testing set up for your workspace. This command can recommend a testing framework, provide steps to set up and configure it, and suggest a VS Code extension to provide [testing integration in VS Code](https://code.visualstudio.com/docs/editor/testing). This can save you time and effort to get started with testing for your code.  \nWhen you use the `/tests` command to generate tests for your code, it can recommend `/setupTests` and testing extensions if looks like such an integration has not been set up yet in your workspace.",
    "url": "https://code.visualstudio.com/updates/v1_94#_automated-test-setup-experimental",
    "id": 3986
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Start debugging from Chat (Experimental)  \n**Setting**: `setting(github.copilot.chat.experimental.startDebugging.enabled)`  \nIn this milestone, we made improvements to the experimental `/startDebugging` slash command. This command enables you to easily find or create a launch configuration and start [debugging](https://code.visualstudio.com/docs/editor/debugging) your application seamlessly. When you use `@vscode` in Copilot Chat, `/startDebugging` is now available by default.  \n![A user types /startDebugging flask app port 3000 in the panel chat and is provided with the launch configuration.](images/1_94/start-debugging.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_start-debugging-from-chat-experimental",
    "id": 3987
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Chat in Command Center (Experimental)  \n**Setting**: `setting(chat.commandCenter.enabled)`  \nWe are experimenting with a Command Center entry for accessing chat. It provides quick access to all relevant chat commands, like starting the different chat experiences or attaching context to your prompt. Note that the Command Center itself needs to be enabled for the chat Command Center entry to show.  \n![Chat Command Center button and the drop-down menu with relevant chat actions.](images/1_94/chat-command-center.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_chat-in-command-center-experimental",
    "id": 3988
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Improved temporal context (Experimental)  \n**Setting**: `setting(github.copilot.chat.experimental.temporalContext.enabled)`  \nWith temporal context, you can instruct Inline Chat to consider recently opened or edited files as part of the chat context. We have improved this feature and invite everyone to give it a go.",
    "url": "https://code.visualstudio.com/updates/v1_94#_improved-temporal-context-experimental",
    "id": 3989
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Custom instructions (Experimental)  \n**Setting**: `setting(github.copilot.chat.experimental.codeGeneration.useInstructionFiles)`  \n**Setting**: `setting(github.copilot.chat.experimental.testGeneration.instructions)`  \nLast milestone, we introduced custom [code-generation instructions](https://code.visualstudio.com/updates/v1_93#_code-generation-instructions). We've further expanded this functionality to define **shared instructions** for code generation in a `.github/copilot-instructions.md` file in your workspace. These common instructions supplement your own personal code generation instructions. Enable the code-generation instruction file with the `setting(github.copilot.chat.experimental.codeGeneration.useInstructionFiles)` setting.  \nIn addition, you can now define instructions for **test generation** in settings or import them from a file. For example, if you always want to use a particular unit testing framework for your tests. Configure the test-generation instructions in the `setting(github.copilot.chat.experimental.testGeneration.instructions)` setting.",
    "url": "https://code.visualstudio.com/updates/v1_94#_custom-instructions-experimental",
    "id": 3990
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Accessibility  \n### Getting started  \nOur **Help** menu now includes a **Get Started with Accessibility Features** walkthrough, which makes it easier for you to explore and utilize the accessibility options. The walkthrough introduces you to functionality, such as the accessibility help dialog, accessibility signals, keyboard shortcuts, and more.  \n![Get Started with Accessibility Features product walkthrough.](images/1_94/accessibility-walkthrough.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_getting-started",
    "id": 3991
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Comment accessibility improvements  \nWe have introduced an accessible view for comment thread controls. This view includes the relevant editor context, enabling you to stay focused without needing to switch between the editor and the accessible view. Likewise, the editor context is now provided in the accessible view for the comments panel.  \nWe've also introduced the **Comments: Focus Comment on Current Line** command that lets you quickly move to the Comments control from the Editor by using the keyboard. There are also new actions to go to the next and previous commented ranges in the Editor: **Comments: Go to Next Commented Range** and **Comments: Go to Previous Commented Range**.",
    "url": "https://code.visualstudio.com/updates/v1_94#_comment-accessibility-improvements",
    "id": 3992
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Workbench  \n### Change an extension's account preference  \nIn this iteration, we explored how to improve the experience of changing the preferred account for an extension. For example, if you have multiple GitHub accounts and you accidentally signed in to GitHub Copilot with the wrong account and now need to use the other one.  \nIt's now possible to change that preference after the fact in multiple ways.  \n* **Account menu in the Activity Bar** > **&lt;Your Account&gt;** > **Manage Trusted Extensions** > select the gear icon for an extension  \n![Manage trusted extensions Quick Pick, with gear button highlighted.](images/1_94/accountPreferenceManageTrustedExtensions.png)  \n* **Extensions** view > context menu (or gear icon) on an extension that uses auth > select **Account Preferences**  \n![Account preferences option in the context menu of an extension.](images/1_94/accountPreferenceContextMenu.png)  \n* Extension detail view > gear icon > select **Account Preferences**  \n![Account preferences option in the gear menu of an extension.](images/1_94/accountPreferenceGear.png)  \nChoosing any of these options takes you to a Quick Pick where you can change the account that an extension uses.  \n![The account preference Quick Pick that enables you to select extensions for a given account.](images/1_94/accountPreferenceQuickPick.png)  \nWhen you change an extension's account preference, this sends an event to the extension and it is up to the extension to handle it properly. If you don't see the expected behavior, report an issue going for that extension, so the account preference experience can be handled.  \nAlso, let us know if you have any feedback on this flow.",
    "url": "https://code.visualstudio.com/updates/v1_94#_change-an-extension's-account-preference",
    "id": 3993
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### View folders and workspaces associated with a profile  \nIn this milestone, we introduced a **Folders & Workspaces** section in the Profiles editor. This section lists all folders and workspaces that are associated with a specific profile from a central place. From this section, you can add or modify folders, or open the folder or workspace in a new window.  \n![Folders & Workspaces section in the Profile editor.](images/1_94/profiles-editor-folders-workspaces.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_view-folders-and-workspaces-associated-with-a-profile",
    "id": 3994
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Update extensions across all profiles  \nIn this milestone, we introduced the ability to update extensions across all profiles. This is useful if you have multiple profiles and you want to keep your extensions versions in sync. Previously, you had to switch to each profile and update the extensions for that profile.",
    "url": "https://code.visualstudio.com/updates/v1_94#_update-extensions-across-all-profiles",
    "id": 3995
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Warnings in the Extensions view  \nThe Extensions view now shows a warning badge and associated information when there are any invalid extensions or extensions that are disabled due to version incompatibility.  \n![Extensions view shows a warning badge and description about the warning.](images/1_94/extensions-warning-ux.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_warnings-in-the-extensions-view",
    "id": 3996
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Find in Explorer  \nWe\u2019ve improved the Find feature in the Explorer view to make it easier to search for files in large projects. You can open the Find control in the File Explorer by using the `kb(list.find)` keyboard shortcut. While searching, you can switch between fuzzy matching and continuous matching for more flexible results.  \nNote that some context menu actions are temporarily disabled during searches. Stay tuned for more improvements coming soon!  \n<video src=\"images/1_94/file-explorer-find.mp4\" title=\"Searching for files in explorer find\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_find-in-explorer",
    "id": 3997
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Release notes  \nWe have a simplified syntax for referring to settings in our release notes (`setting(setting.name)`), which also has the now-familiar settings-gear rendering when displayed in the release notes editor.  \n![Setting URL in release notes enables navigating to the Settings editor directly.](./images/1_92/setting-url-in-release-notes.gif)",
    "url": "https://code.visualstudio.com/updates/v1_94#_release-notes",
    "id": 3998
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Editor  \n### Inlay hint improvements  \nWe have added the `setting(editor.inlayHints.maximumLength)` setting, which controls after how many characters inlay hints are truncated.  \nWe have also revised the updating strategy for inlay hints and now, while typing, they should update sooner but not cause any horizontal movements of your cursor.",
    "url": "https://code.visualstudio.com/updates/v1_94#_inlay-hint-improvements",
    "id": 3999
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Experimental Edit Context  \nThis milestone, we introduced a new experimental setting `setting(editor.experimentalEditContextEnabled)`. This setting enables the [EditContext API](https://www.w3.org/TR/edit-context/) to power the editing experience in VS Code. The adoption of the [EditContext API](https://www.w3.org/TR/edit-context/) has enabled us to fix certain IME composition bugs. Generally we believe it will improve the editing experience in the long term, and ultimately it will be enabled by default.  \nMake sure to reload your VS Code window after enabling this setting to take advantage of it.",
    "url": "https://code.visualstudio.com/updates/v1_94#_experimental-edit-context",
    "id": 4000
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Source Control  \n### Source Control Graph view improvements  \nLast milestone, we added the new **Source Control Graph** view. This milestone, we have been working on expanding the functionality available in the newly added view as well as polishing the layout of the view.  \n#### Repository picker  \nWhen you open a folder/workspace that contains multiple repositories, the Source Control Graph view title shows a repository picker. By default, the Source Control Graph view shows the active repository, matching the information in the Status Bar. You can use the repository picker to *lock* the Source Control Graph view to a particular repository.  \n![Repository picker control in the title of the Source Control Graph view.](images/1_94/scm-repository-picker-button.png)  \n#### History item reference picker  \nThis milestone, we have added a new history item reference picker to the Source Control Graph view title. You can use this reference picker to filter the history items shown in the graph to a different branch, or to view multiple branches.  \n![History item reference Quick Pick control to choose one or more items.](images/1_94/scm-reference-quick-pick.png)  \nBy default the history item reference picker is set to `Auto`, which renders the graph for the current history item reference, its remote, and an optional base.  \n![History item reference picker control in the title of the Source Control Graph view.](images/1_94/scm-reference-picker-button.png)  \n#### History item actions  \nThis milestone, we have expanded the list of actions that are available in the context menu for source control history items. We have added actions to create a new branch/tag from a history item, cherry-pick a history item, and checkout (detached) an item.  \n![Context menu for items in the Source Control Graph view.](images/1_94/scm-context-menu.png)  \n#### Source Control Graph settings  \nThis milestone, we have added a set of new settings, so that you can customize the graph:  \n* `setting(scm.graph.badges)` - controls which badges are shown in the Source Control Graph view\n* `setting(scm.graph.pageOnScroll)` - controls whether the Source Control Graph view loads the next page of items when you scroll to the end of the list\n* `setting(scm.graph.pageSize)` - the default number of items to show in the Source Control Graph view and when loading more items",
    "url": "https://code.visualstudio.com/updates/v1_94#_source-control-graph-view-improvements",
    "id": 4001
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Notebooks  \n### Multi cursor support across cells (preview)  \nThe Notebook editor now supports multi-cursor editing between cells with the setting `setting(notebook.multiCursor.enabled:true)`. Currently, this can only be triggered with the shortcut `kbstyle(Ctrl+D)` and supports core editor actions alongside a limited subset of editor commands.  \n<video src=\"images/1_94/notebook-multi-cursor.mp4\" title=\"Notebook multi cursor demo\" autoplay loop controls muted></video>",
    "url": "https://code.visualstudio.com/updates/v1_94#_multi-cursor-support-across-cells-preview",
    "id": 4002
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Diff editor shows document metadata changes  \nThe notebook diff editor now also shows changes made to the document metadata, such as kernel information and cell language.  \n![Notebook dif editor showing side-by-side changes to the document metadata.](./images/1_94/notebook-diff-document-metadata.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_diff-editor-shows-document-metadata-changes",
    "id": 4003
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Collapse unchanged regions in diff view  \nThe notebook diff view now respects the setting `setting(diffEditor.hideUnchangedRegions.enabled)`. When enabled, unchanged code blocks are collapsed by default, which makes reviewing changes in large notebooks easier.  \n![Diff editor shows unchanged code blocks as collapsed.](./images/1_94/notebook-unchanged-region.png)",
    "url": "https://code.visualstudio.com/updates/v1_94#_collapse-unchanged-regions-in-diff-view",
    "id": 4004
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Notebook serialization in web worker (Experimental)  \nThis release introduces an experimental feature that enables notebook serialization in a web worker. This can help reduce main thread blocking time in the Extension Host process when you work with large notebooks. By default, this feature is disabled but can be enabled by setting `setting(ipynb.experimental.serialization:true)` to `true`.",
    "url": "https://code.visualstudio.com/updates/v1_94#_notebook-serialization-in-web-worker-experimental",
    "id": 4005
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Debug  \n### Support for data colorization  \nVS Code supports new text styling capabilities from the Debug Adapter Protocol. This enables data in the Variables view, Watch view, hovers, and Debug Console to be colorized via ANSI escape sequences.",
    "url": "https://code.visualstudio.com/updates/v1_94#_support-for-data-colorization",
    "id": 4006
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### JavaScript Debugger  \n#### Improved display of HTML elements  \nWe've improved how HTML elements are displayed in the JavaScript debugger. Previously, they were rendered as naive objects, which were hard to navigate. Now, they more closely reflect DOM structure, and we take advantage of new colorization capabilities to provide some basic syntax highlighting.  \n![HTML elements are colorized in the JavaScript Debug Console.](./images/1_94/js-debug-html.png)  \n#### Autocomplete of Node commands in launch configuration  \nThere is a new autocompletion helper available in `launch.json` files for command-line applications that are installed in your `node_modules`. This makes it easier to set up debugging for tools like `vitest` or `nest`.  \n#### Cleaner Loaded Sources view  \nWe changed how source paths are structured for Node.js built-in modules, evaluated scripts, and WebAssembly modules to make the **Loaded Sources** view less noisy and easier to browse.",
    "url": "https://code.visualstudio.com/updates/v1_94#_javascript-debugger",
    "id": 4007
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Languages  \n### TypeScript 5.6  \nOur JavaScript and TypeScript support now uses TypeScript 5.6. This major update includes a number of language and tooling improvements, along with important bug fixes and performance optimizations.  \nYou can read all about the TypeScript 5.6 release [on the TypeScript blog](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/). We've also included a few tooling highlights in the following sections.  \n#### Detection of some common 'always true' programming mistakes  \nSay you're using a regular expression in JavaScript or TypeScript and write some code like this:  \n```typescript\nconst str = '...'\nif (/\\d+(\\.\\d+)?/) {\n...\n} else {\n...\n}\n```  \nUh oh! Looks like we've forgotten to call `.test()` on the regular expression, meaning that the `if` conditional always evaluates to true. That's not what we want.  \nEven though this problem is obvious when pointed out, mistakes like this are surprisingly easy to make and have even caused real bugs in VS Code! Thankfully, TypeScript now reports some of the most common 'always true' errors in your program. This includes testing an `if` conditional against a value that is never value, or a conditional expression where the one side is unreachable, such as `/abc/ ?? /xyz/`.  \n[Check out the TypeScript release notes](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/#disallowed-nullish-and-truthy-checks) for more examples and details about how this feature works.  \n#### Region prioritized diagnostics  \nWorking in a very long JavaScript or TypeScript file? You should start seeing diagnostics for type error show up a little faster thanks to region prioritized diagnostics. This means that we try to get the diagnostics for the current visible code and show these first, even if the diagnostics for the rest of the file are still being computed.  \nThis optimization is most relevant for complex files with thousands and thousands of lines. You may not notice any changes for smaller files.  \n#### Improved commit character for JavaScript and TypeScript  \nCommit characters can speed up coding by automatically accepting completions when typed. For example, in JavaScript and TypeScript, `.` is often considered a commit character. This means to type `myVariable.property.`, you can just type `myv`, `.`, `p`, `.` with the first `.` accepting the completion for `myVariable` and the second `.` accepting the completion for `property`.  \nThese commit characters are now computed by TypeScript, which means that they can better take the program's structure into account. We can also continue improving our support for them over time.  \nCommit characters are enabled by default but can be disabled by setting `setting(editor.acceptSuggestionOnCommitCharacter: false)` to `false`.  \n#### Exclude Patterns for Auto-Imports  \nThe new `autoImportSpecifierExcludeRegexes` lets you exclude [auto import](https://code.visualstudio.com/docs/typescript/typescript-editing#_auto-imports) from specific packages by using a regular expression. For example, to exclude auto imports from the subdirectory of a module like lodash, you can set:  \n```json\n{\n\"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\n\"^lodash/.*$\"\n]\n}\n```  \nYou can configure this by using `setting(javascript.preferences.autoImportSpecifierExcludeRegexes)` for JavaScript and `setting(typescript.preferences.autoImportSpecifierExcludeRegexes)` for TypeScript. For more details see the [TypeScript 5.6 release notes](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/#exclude-patterns-for-auto-imports)",
    "url": "https://code.visualstudio.com/updates/v1_94#_typescript-5.6",
    "id": 4008
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### GitHub Pull Requests  \nThere has been more progress on the [GitHub Pull Requests](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github) extension, which enables you to work on, create, and manage pull requests and issues. Review the [changelog for the 0.98.0](https://github.com/microsoft/vscode-pull-request-github/blob/main/CHANGELOG.md#0980) release of the extension to learn about the highlights.",
    "url": "https://code.visualstudio.com/updates/v1_94#_github-pull-requests",
    "id": 4009
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Extension Authoring  \n### Remove custom allocator in the desktop app  \nIn this version, we have removed the custom allocator that was added in version 1.78 to the desktop application extension host. This custom allocator acts as a bridge for supporting V8 sandbox incompatible Node.js native addons that are built against the Electron runtime. You can refer to this [tracking issue](https://github.com/microsoft/vscode/issues/202385#issuecomment-2367174453) for additional context.  \nWe have ensured that the top 5000 extensions are unaffected by this change. If your extension or a dependency of your extension is affected by this change, you can try the following remediation suggestions:  \n* If your extension uses [n-api](https://nodejs.org/docs/latest/api/n-api.html) then the status `napi_no_external_buffers_allowed` will be returned when using external array buffers. In which case, you can switch to use the copy version of the API [napi_create_buffer_copy](https://nodejs.org/docs/latest/api/n-api.html#napi_create_buffer_copy).\n* If your extension uses [node-addon-api](https://github.com/nodejs/node-addon-api) then refer to this [document](https://github.com/nodejs/node-addon-api/blob/main/doc/external_buffer.md) for alternative API and compile time settings.\n* If you want to avoid the performance cost from the copy, you can use the [V8 allocator](https://v8.github.io/api/head/classv8_1_1ArrayBuffer_1_1Allocator.html) to ensure that the buffer backing store is compatible with the V8 sandbox.  \nWe have also added telemetry to identify extensions and native addons that might be affected, so we can proactively reach out to extension authors and offer help where possible. If your extension is effected, and none of the above suggestions work for you, comment in our [discussion thread](https://github.com/microsoft/vscode-discussions/discussions/1771) and we will gladly help.",
    "url": "https://code.visualstudio.com/updates/v1_94#_remove-custom-allocator-in-the-desktop-app",
    "id": 4010
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### MSAL-based Microsoft Authentication  \nWe have been moving towards having our Microsoft Authentication stack use [MSAL (Microsoft Authentication Library)](http://github.com/AzureAD/microsoft-authentication-library-for-js). It's been a huge undertaking, but we have made great progress in this iteration. This work spans all VS Code clients, so that includes VS Code and [VS Code for the Web](https://vscode.dev).  \n* For vscode.dev, we have enabled the browser-based `MSAL.js` for all Microsoft authentication requests. In other words, vscode.dev is now entirely on MSAL.  \n* For VS Code, the desktop client, we have this feature behind a setting, `setting(microsoft.useMsal)`. It's behind a setting for now, as we plan on moving towards [the broker flow](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/brokering.md), which would enable VS Code to use the authentication state of the operating system. So, to prevent as little interruption as possible, we will do that work first before enabling this widely. That said, if you're eager to try this new authentication, you are welcome to try and provide us feedback.  \nYou can see the detailed status of this transition to MSAL across all of VS Code in [Issue #178740](https://github.com/microsoft/vscode/issues/178740).",
    "url": "https://code.visualstudio.com/updates/v1_94#_msal-based-microsoft-authentication",
    "id": 4011
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### TypeScript 5.7  \nThis release includes initial support for the upcoming TypeScript 5.7 release. Check out the [TypeScript 5.7 plan](https://github.com/microsoft/TypeScript/issues/59905) for details.  \nTo start using preview builds of TypeScript 5.7, install the [TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).",
    "url": "https://code.visualstudio.com/updates/v1_94#_typescript-5.7",
    "id": 4012
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Proposed APIs  \n### Tools for language models  \nWe continue to iterate on our `LanguageModelTool` API. The API comes with two major parts:  \n1. The ability for extensions to register a *tool*. A tool is a piece of functionality that is meant to be used by language models. For example, reading the Git history of a file.  \n2. The mechanics for language models to support tools, such as extensions passing tools when making a request, language models requesting a tool invocation, and extensions communicating back the result of a tool invocation.  \nIn this milestone, we added the ability for tools to request user confirmation before running. This is helpful for tools that may have some side-effect.  \nTake a look at [issue #213274](https://github.com/microsoft/vscode/issues/213274) for more details or to give us feedback.  \n> **Note**: The API is still under active development, and things will change.",
    "url": "https://code.visualstudio.com/updates/v1_94#_tools-for-language-models",
    "id": 4013
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n## Engineering  \n### ESM is shipping for VS Code  \nWe are finally shipping our ESM work in VS Code Stable releases. That means that all layers of VS Code core (electron, node.js, browser, workers) use the `import` and `export` syntax in JavaScript for module loading and exporting. All usages of our legacy AMD loader are disabled and will be removed as part of our debt week in October.  \nThe move to ESM massively improves startup performance. For one, a lot of AMD overhead is removed, but then the main workbench bundle size is also reduced by more than 10%:  \n![Graph showing the trend of the main bundle load time, showing a large drop after introducing ESM.](images/1_94/esm.png)  \nNow that we are fully converted to ESM, we plan to improve our engineering system for VS Code. With ESM, a lot of modern tooling will work for us and we are very excited to share more details about this in the near future.  \n> **Note**: extensions are not impacted by this change and not loaded via ESM, please see [https://github.com/microsoft/vscode/issues/130367](https://github.com/microsoft/vscode/issues/130367) for details.",
    "url": "https://code.visualstudio.com/updates/v1_94#_esm-is-shipping-for-vs-code",
    "id": 4014
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Use NPM as default package manager  \nBeginning of September 2024, we have completed the [switch from yarn to npm](https://github.com/microsoft/vscode/issues/196795) for package management in the [microsoft/vscode](https://github.com/microsoft/vscode) repo. This decision was based on the specific requirements of VS Code and center around these criteria:  \n* Performance: we initially moved to yarn because of performance reasons and npm can now also meet our requirements\n* Security: we make our supply chain more secure by limiting exposure and reducing the number of tools we depend upon",
    "url": "https://code.visualstudio.com/updates/v1_94#_use-npm-as-default-package-manager",
    "id": 4015
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Issue tracking  \nContributions to our issue tracking:  \n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* [@IllusionMH (Andrii Dieiev)](https://github.com/IllusionMH)\n* [@RedCMD (RedCMD)](https://github.com/RedCMD)",
    "url": "https://code.visualstudio.com/updates/v1_94#_issue-tracking",
    "id": 4016
  },
  {
    "content": "Learn what is new in the Visual Studio Code September 2024 Release (1.94)  \n### Pull requests  \nContributions to `vscode`:  \n* [@BABA983 (BABA)](https://github.com/BABA983)\n* fix terminal tab selection not work properly [PR #224394](https://github.com/microsoft/vscode/pull/224394)\n* Register fold import action [PR #227216](https://github.com/microsoft/vscode/pull/227216)\n* [@BlackHole1 (Kevin Cui)](https://github.com/BlackHole1): ci: ensure retry logic consistency [PR #226038](https://github.com/microsoft/vscode/pull/226038)\n* [@Cecil0o0 (hj)](https://github.com/Cecil0o0): chore: rm unreached ignore items when build extensions. [PR #227906](https://github.com/microsoft/vscode/pull/227906)\n* [@dangerman (Anees Ahee)](https://github.com/dangerman): Fix Image Preview transparency grid scaling [PR #226505](https://github.com/microsoft/vscode/pull/226505)\n* [@g-cappai (Gianluca Cappai)](https://github.com/g-cappai): Fix open html anchor link in markdown preview [PR #228633](https://github.com/microsoft/vscode/pull/228633)\n* [@gabritto (Gabriela Araujo Britto)](https://github.com/gabritto): [typescript-language-features] Expandable hover [PR #228255](https://github.com/microsoft/vscode/pull/228255)\n* [@gjsjohnmurray (John Murray)](https://github.com/gjsjohnmurray)\n* Add actions to preview editor tab's hover [PR #226023](https://github.com/microsoft/vscode/pull/226023)\n* Fix typo in workspace extension activation failure message [PR #227348](https://github.com/microsoft/vscode/pull/227348)\n* Correct tooltip capitalization of debug panel in status bar (fix #228088) [PR #228089](https://github.com/microsoft/vscode/pull/228089)\n* [@henricryden](https://github.com/henricryden): additional search path for libc.so.6 in check-requirements-linux.sh [PR #227713](https://github.com/microsoft/vscode/pull/227713)\n* [@janssen-tiobe (janssen)](https://github.com/janssen-tiobe): Fix: agressive URI encoding in table view of the problems panel [PR #224841](https://github.com/microsoft/vscode/pull/224841)\n* [@jeanp413 (Jean Pierre)](https://github.com/jeanp413): Fix initial terminal dimensions are reload are incorrect [PR #225554](https://github.com/microsoft/vscode/pull/225554)\n* [@jjaeggli (Jacob Jaeggli)](https://github.com/jjaeggli): Document focus suggest details with ctrl+alt+space [PR #190096](https://github.com/microsoft/vscode/pull/190096)\n* [@juliapz (Julia Pozdeeva)](https://github.com/juliapz): Prevent find widget from being cropped in AUX window [PR #229001](https://github.com/microsoft/vscode/pull/229001)\n* [@marrej (Marcus Revaj)](https://github.com/marrej): # Render file creation in the refactor preview [PR #226950](https://github.com/microsoft/vscode/pull/226950)\n* [@nojaf (Florian Verdonck)](https://github.com/nojaf)\n* Use Worker to serialize Notebook [PR #226632](https://github.com/microsoft/vscode/pull/226632)\n* Include id in ErrorNoTelemetry message [PR #226715](https://github.com/microsoft/vscode/pull/226715)\n* [@PhantomPower82](https://github.com/PhantomPower82): Polish getting started page (fix #226991) [PR #226994](https://github.com/microsoft/vscode/pull/226994)\n* [@rafamerlin (Rafael Merlin)](https://github.com/rafamerlin): Make Inlay hint length configurable [PR #221276](https://github.com/microsoft/vscode/pull/221276)\n* [@rehmsen (Ole)](https://github.com/rehmsen)\n* Initialize test variables in `setup` to avoid order dependency. [PR #226596](https://github.com/microsoft/vscode/pull/226596)\n* Support multiple comment widgets per notebook cell. [PR #226770](https://github.com/microsoft/vscode/pull/226770)\n* [@remcohaszing (Remco Haszing)](https://github.com/remcohaszing): Add test-results.xml to .gitignore [PR #214238](https://github.com/microsoft/vscode/pull/214238)\n* [@repraze (Thomas Dubosc)](https://github.com/repraze): fix: swap end for flex-end in browser/hover.css [PR #224102](https://github.com/microsoft/vscode/pull/224102)\n* [@segevfiner (Segev Finer)](https://github.com/segevfiner): Adopt ext host restart for custom text editors [PR #225985](https://github.com/microsoft/vscode/pull/225985)\n* [@SimonSiefke (Simon Siefke)](https://github.com/SimonSiefke): fix: memory leak in debug view [PR #225334](https://github.com/microsoft/vscode/pull/225334)\n* [@sunnylost (sunnylost)](https://github.com/sunnylost): extensions: wrap table cell content in paragraph element [PR #228365](https://github.com/microsoft/vscode/pull/228365)\n* [@tisilent (xiejialong)](https://github.com/tisilent): Add editor gpu rendering fallback [PR #228414](https://github.com/microsoft/vscode/pull/228414)\n* [@tmm1 (Aman Karmani)](https://github.com/tmm1): Ignore tsserver requests for createDirectoryWatcher(~/Library) on macOS [PR #227653](https://github.com/microsoft/vscode/pull/227653)  \nContributions to `vscode-docs`:  \n* [@0dinD (Odin Dahlstr\u00f6m)](https://github.com/0dinD): Update supported Java versions [PR #7561](https://github.com/microsoft/vscode-docs/pull/7561)\n* [@alexwkleung (Alex Leung)](https://github.com/alexwkleung): Update enter jupyter server url screenshot [PR #7584](https://github.com/microsoft/vscode-docs/pull/7584)\n* [@DiskCrasher (Mike)](https://github.com/DiskCrasher): Fixed missing \"!\" in code [PR #7595](https://github.com/microsoft/vscode-docs/pull/7595)\n* [@gaganshera (Gaganjot Singh)](https://github.com/gaganshera): Update prompt-crafting.md [PR #7555](https://github.com/microsoft/vscode-docs/pull/7555)\n* [@harish-s-developer (Harish Srinivasan)](https://github.com/harish-s-developer): Added new Managing dependencies section, fixed one typo [PR #7617](https://github.com/microsoft/vscode-docs/pull/7617)\n* [@harrydowning (Harry Downing)](https://github.com/harrydowning): Remove incorrect statement about pre release tags [PR #7593](https://github.com/microsoft/vscode-docs/pull/7593)\n* [@listsarah (Sarah Listzwan)](https://github.com/listsarah): To Close Issue #7536: Update \"Embedded Programming Languages\" [PR #7539](https://github.com/microsoft/vscode-docs/pull/7539)\n* [@mistymadonna (Misty Hays)](https://github.com/mistymadonna): Updated Azure Extensions homepage, Created new Getting Started page [PR #7520](https://github.com/microsoft/vscode-docs/pull/7520)\n* [@muzimuzhi (Yukai Chou)](https://github.com/muzimuzhi): Typo, add missing inline code markup [PR #7589](https://github.com/microsoft/vscode-docs/pull/7589)\n* [@partev](https://github.com/partev): fix a URL redirect [PR #7608](https://github.com/microsoft/vscode-docs/pull/7608)\n* [@Sarke (Peter Stalman)](https://github.com/Sarke): Another Flatpak/KDE5 wallet workaround [PR #7606](https://github.com/microsoft/vscode-docs/pull/7606)\n* [@seaniyer (Sean)](https://github.com/seaniyer): Update publishing-extension.md [PR #7540](https://github.com/microsoft/vscode-docs/pull/7540)\n* [@vinistock (Vinicius Stock)](https://github.com/vinistock): Update Ruby links to point to new documentation [PR #7607](https://github.com/microsoft/vscode-docs/pull/7607)\n* [@wjandrea (William Andrea)](https://github.com/wjandrea)\n* tasks.md: add `source` property to `problemMatcher` [PR #7493](https://github.com/microsoft/vscode-docs/pull/7493)\n* tasks.md: mention `problemMatcher.severity` [PR #7494](https://github.com/microsoft/vscode-docs/pull/7494)  \nContributions to `vscode-extension-samples`:  \n* [@liu3hao (Weihao)](https://github.com/liu3hao): Add missing activation event [PR #1057](https://github.com/microsoft/vscode-extension-samples/pull/1057)  \nContributions to `vscode-js-debug`:  \n* [@lucacasonato (Luca Casonato)](https://github.com/lucacasonato): fix: don't inject NODE_OPTIONS in Deno [PR #2080](https://github.com/microsoft/vscode-js-debug/pull/2080)  \nContributions to `vscode-jupyter`:  \n* [@rchiodo (Rich Chiodo)](https://github.com/rchiodo): Make display_name changes also cause a kernel change event [PR #15967](https://github.com/microsoft/vscode-jupyter/pull/15967)  \nContributions to `vscode-languageserver-node`:  \n* [@StellaHuang95 (Stella)](https://github.com/StellaHuang95): Support  `llmGenerated` property on `CodeAction` [PR #1557](https://github.com/microsoft/vscode-languageserver-node/pull/1557)  \nContributions to `vscode-pull-request-github`:  \n* [@ixzhao](https://github.com/ixzhao): fix quote reply [PR #6230](https://github.com/microsoft/vscode-pull-request-github/pull/6230)  \nContributions to `vscode-python-debugger`:  \n* [@rchiodo (Rich Chiodo)](https://github.com/rchiodo): Update debugpy info to latest shipped version [PR #462](https://github.com/microsoft/vscode-python-debugger/pull/462)  \nContributions to `vscode-vsce`:  \n* [@mlasson (Marc Lasson)](https://github.com/mlasson): Fix typo in option hint [PR #1046](https://github.com/microsoft/vscode-vsce/pull/1046)  \nContributions to `vscode-wasm`:  \n* [@mlugg (Matthew Lugg)](https://github.com/mlugg): Fix stream bugs [PR #196](https://github.com/microsoft/vscode-wasm/pull/196)  \nContributions to `language-server-protocol`:  \n* [@aschaber1 (Alexander Schaber)](https://github.com/aschaber1): chore: fix typo from `kubernets` to `kubernetes` [PR #2013](https://github.com/microsoft/language-server-protocol/pull/2013)\n* [@dawedawe (dawe)](https://github.com/dawedawe): fix typo in the documentation of CompletionParams [PR #2019](https://github.com/microsoft/language-server-protocol/pull/2019)\n* [@didrikmunther (Didrik Munther)](https://github.com/didrikmunther): Fix misspelling in pullDiagnostics.md [PR #2022](https://github.com/microsoft/language-server-protocol/pull/2022)\n* [@InSyncWithFoo (InSync)](https://github.com/InSyncWithFoo)\n* Fix a few typos in `percentage`'s doc comments [PR #2010](https://github.com/microsoft/language-server-protocol/pull/2010)\n* Add Taplo to implementor list [PR #2021](https://github.com/microsoft/language-server-protocol/pull/2021)\n* [@SamB (Samuel Bronson)](https://github.com/SamB): Update servers.md: vscode-markdown-languageserver moved [PR #2012](https://github.com/microsoft/language-server-protocol/pull/2012)\n* [@sh-cho (Seonghyeon Cho)](https://github.com/sh-cho): Add fluent-bit language server implementation [PR #2016](https://github.com/microsoft/language-server-protocol/pull/2016)\n* [@StellaHuang95 (Stella)](https://github.com/StellaHuang95): Support  `llmGenerated` property on `CodeAction` [PR #2020](https://github.com/microsoft/language-server-protocol/pull/2020)  \n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>",
    "url": "https://code.visualstudio.com/updates/v1_94#_pull-requests",
    "id": 4017
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n## Editor  \n### Visual design for editor tabs  \nWe have a [visual design](https://github.com/microsoft/vscode/issues/224#issuecomment-213015687) for how editor tabs might look in VS Code. We will start to implement the design in the next milestone.",
    "url": "https://code.visualstudio.com/updates/vApril#_visual-design-for-editor-tabs",
    "id": 4018
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Disable automatic revealing of files in the explorer  \nBy default, VS Code expands folders and scrolls your active file into view in the file Explorer. If you don't want this automatic reveal behavior, you can disable it through a new setting `explorer.autoReveal`. Set `explorer.autoReveal` to `false` to prevent your Explorer view from changing as you switch between active files. There is a new action, **Show Active File in Explorer**, if you would like to explicitly display (reveal) the currently active file in the Explorer.",
    "url": "https://code.visualstudio.com/updates/vApril#_disable-automatic-revealing-of-files-in-the-explorer",
    "id": 4019
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Resize border (sash) double clicks  \nYou can now double-click on some resize borders (sashes) in the workbench to quickly resize them:  \n* Double click on the Explorer resize border to size the sidebar to show file paths without being trimmed.\n* Double clicking the resize border of other Views (Search, Git, Debug) will cause the sidebar to shrink to its minimum width.\n* If you have multiple editors open, double clicking the resize border between them will resize the open editors to equal width.\n* Double clicking the resize border of the side by side diff editor will resize the diffs to equal width.\n* Double clicking the resize border of the lower **OUTPUT**/**DEBUG CONSOLE** panel will resize the panel to its minimum height.",
    "url": "https://code.visualstudio.com/updates/vApril#_resize-border-sash-double-clicks",
    "id": 4020
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Reopen closed file command  \nThe `workbench.action.reopenClosedEditor` command has been added which will reopen the most recent file removed from the working files list. The default key binding for this command is `kb(workbench.action.reopenClosedEditor)`.  \n>**Note:** Previously `kb(workbench.action.reopenClosedEditor)` had been bound to the **Run: Run Test Task** command. **Run: Run Test Task** is now not bound to any default key binding. You can [customize](https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts) the key bindings and change the behavior back to the previous one if desired.",
    "url": "https://code.visualstudio.com/updates/vApril#_reopen-closed-file-command",
    "id": 4021
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Disable Emmet abbreviation expansion on Tab  \nYou can now disable the Emmet abbreviation triggered on `kbstyle(Tab)` using the `emmet.triggerExpansionOnTab` setting.",
    "url": "https://code.visualstudio.com/updates/vApril#_disable-emmet-abbreviation-expansion-on-tab",
    "id": 4022
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n## Debugging  \n### Call Stack Paging  \nVS Code debugging now supports arbitrarily deep call stacks. For performance reasons, we only load twenty frames initially but there is now a button at the bottom for loading the next set of frames:  \n![Load More Stack Frames button](images/April/call-stack-paging.png)",
    "url": "https://code.visualstudio.com/updates/vApril#_call-stack-paging",
    "id": 4023
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Improved thread support  \nDebugging multi-threaded programs has been improved. The currently debugged thread is now automatically expanded and several issues were fixed to make debugging multiple threads a smoother experience.",
    "url": "https://code.visualstudio.com/updates/vApril#_improved-thread-support",
    "id": 4024
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n## Node.js Debugging  \n### Support for ES6 Sets, Maps, and Generators  \nThe VS Code Node.js debugger no longer shows ES6 Sets, Maps, Promises, and Generators as `undefined` or empty objects.  \nSet and map items show a sequence number next to the item because both data structures preserve the insertion order:  \n![ES6 set with sequence number](images/April/es6-set-support.png)  \n![ES6 map with sequence number](images/April/es6-map-support.png)  \nGenerators show its state:  \n![Show ES6 generator state](images/April/es6-generator-support.png)",
    "url": "https://code.visualstudio.com/updates/vApril#_support-for-es6-sets,-maps,-and-generators",
    "id": 4025
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Support for property getters  \nObject properties with getters are no longer shown as `undefined`. An example for this are the environment variables available through `process.env`.",
    "url": "https://code.visualstudio.com/updates/vApril#_support-for-property-getters",
    "id": 4026
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### String truncation limit lifted  \nThe Node.js V8 debugger protocol truncates strings automatically to a (non-configurable) 80 characters. In the April release, VS Code works around this limitation and truncates only strings with more than 10000 characters.",
    "url": "https://code.visualstudio.com/updates/vApril#_string-truncation-limit-lifted",
    "id": 4027
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Improved performance with large data structures in Node.js 4.x, 5.x  \nInspecting large data structures like arrays or buffers results in Node.js becoming unresponsive because the V8 debugger protocol does not provide a way to access large data structures in chunks. In Node.js 0.12.x, VS Code started to dynamically inject code into the Node.js runtime to improve the V8 debugging protocol but this stopped working after the io.js/node.js reunion for 2.x and 3.x versions. A recent fix to Node.js made code injection work again. So if you see performance problems, make sure that you are using at least Node.js version 4.3.1 of the LTS stream or version 5.6 of the stable stream.",
    "url": "https://code.visualstudio.com/updates/vApril#_improved-performance-with-large-data-structures-in-node.js-4.x,-5.x",
    "id": 4028
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Smart code stepping  \nWe added experimental support for automatically skipping 'uninteresting code' when stepping through code in the debugger. 'Uninteresting code' is code that is generated by a transpiling process but is not covered by a source map so it does not map back to the original source. This code gets into your way when stepping through source code in the debugger because it makes the debugger switch between the original source code and generated code that you are not really interested in.  \nThis experimental feature automatically steps through code not covered by a source map until it reaches a location that is covered by a source map again. To enable the feature, just add the attribute `smartStep` with a value of `true` to your launch configuration.  \nThe following screen cast shows stepping through a simple async/await snippet first with the feature disabled and then enabled:  \n![skipping code with smartStep](images/April/smartStepping.gif)",
    "url": "https://code.visualstudio.com/updates/vApril#_smart-code-stepping",
    "id": 4029
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n## Setup  \n### Portability improvements on Linux  \nThe zip archive now included the CLI (`./bin/code`) and has been improved to support custom install locations and work when symlinked to.",
    "url": "https://code.visualstudio.com/updates/vApril#_portability-improvements-on-linux",
    "id": 4030
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Launch your preferred shell  \nYou can now specify which external shell VS Code will launch when you use commands like **Open in Command Prompt** (or **Open in Terminal** on OS X or Linux).  Set the `terminal.external` user or workspace setting for your platform (`windowsExec`, `linuxExec`) to the executable to launch (`cmd` is the default for Windows).  \nFor example, to set PowerShell as your external shell on Windows and Terminator on Linux, use:  \n```json\n{\n\"terminal.external.windowsExec\": \"powershell\",\n\"terminal.external.linuxExec\": \"terminator\"\n}\n```  \nOS X support has not been implemented yet ([#5462](https://github.com/microsoft/vscode/issues/5462)).",
    "url": "https://code.visualstudio.com/updates/vApril#_launch-your-preferred-shell",
    "id": 4031
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n## Extension Authoring  \n### New command to open a folder in the same or new window  \nWe added a new command for extension writers to open a folder in the same or new window. The command identifier is `vscode.openFolder` and it accepts two optional arguments `uri` and `newWindow`. If you omit the `uri` argument, the native file dialog is displayed for the user to select a folder.",
    "url": "https://code.visualstudio.com/updates/vApril#_new-command-to-open-a-folder-in-the-same-or-new-window",
    "id": 4032
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Custom Close action when showing messages  \nThe extensions API now allows you to provide custom Close button affordance (text and action) when showing a message using `window.show{Information|Warning|Error}Message` call. Just pass in a message item which has the `isCloseAffordance`-property set to `true`.",
    "url": "https://code.visualstudio.com/updates/vApril#_custom-close-action-when-showing-messages",
    "id": 4033
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Links when previewing html  \nWhen previewing HTML files with the `vscode.previewHtml` command, links are now interpreted in the context of VS Code. That is file-links are resolved within the editor, web-links with the default browser. Also commands are supported using the `command`-scheme. For instance, `command:vscode.previewHtml?[\"file:///some/file.html\"]` tells the editor to run the command `vscode.previewHtml` using arguments that are JSON-encoded as query.",
    "url": "https://code.visualstudio.com/updates/vApril#_links-when-previewing-html",
    "id": 4034
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### Enhance support for your JSON configuration files  \nIf you have your own JSON files and want to improve the editing experience, you can associate JSON schemas to your files. The schemas associations will be picked up by the JSON language support that ships with VS Code and you will get validations, completions and hovers for free. The schema association can be done either [by a user configuration](https://code.visualstudio.com/docs/languages/json#_json-schemas-settings) or [by an extension point](https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesjsonvalidation).  \nIn some cases, you want more control, for example, you may want to provide completion support that requires a database lookup, or you want validation that cannot be expressed by a regular expression. To implement your own completion, validation, and hover support, you can use the regular VS Code APIs. To make this easier, we moved our JSON scanner and parsers to a node-module, [jsonc-parser](https://www.npmjs.com/package/jsonc-parser), that you can reuse. You can see this module in action with the dependency completion support for `package.json` and `bower.json` that is now part of the [JavaScript extension]( https://github.com/microsoft/vscode/tree/main/extensions/javascript) and for `project.json` soon to be part of the [C# extension](https://github.com/OmniSharp/omnisharp-vscode/).",
    "url": "https://code.visualstudio.com/updates/vApril#_enhance-support-for-your-json-configuration-files",
    "id": 4035
  },
  {
    "content": "See what is new in the Visual Studio Code April 2016 Release (1.1)  \n### 'onDebug' Activation Event  \nUpon starting a debug session, VS Code now emits a `onDebug:{type}` event, for example 'onDebug:node'. Debug extensions can now be activated by listening for this activation event.",
    "url": "https://code.visualstudio.com/updates/vApril#_'ondebug'-activation-event",
    "id": 4036
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Migration Notes  \nThe following sections describe a few of VS Code's features that have changed with the move to Salsa and provide information about maintaining previous behaviors.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_migration-notes",
    "id": 4047
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Linters  \nPreviously the JavaScript language support provided some linting options enabled by the `javascript.validate.lint.*` settings. With `jshint` and `eslint`, there are powerful linters for JavaScript available. Also, there are now extensions for VS Code available that integrate these linters. Therefore, we have decided to deprecate the built-in linter and Salsa now reports **syntax errors only**. We **strongly recommend that you install and configure a JavaScript linter if your project hasn't done so already**.  \nIn particular, the previous JavaScript infrastructure provided an implicit *lint rule* which warned about undeclared variables unless they are mentioned in a /\\*global\\*/ comment block. This rule is no longer active and needs to be configured in your linter of choice.  \nHere are the steps to set up `eslint`:  \n- `npm install eslint` to install `eslint` into your workspace or `npm install -g eslint` to install it globally.\n- install the VS Code [eslint extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint).\n- use `eslint --init` to create an initial eslint configuration by answering questions or by picking a popular configuration.  \n**Tip:** If you use JSON as the format of the eslint configuration file, then VS Code can provide you with IntelliSense when you edit the `.eslintrc.json` file.  \nThis [.eslintrc.json](https://gist.github.com/egamma/65c0e2a832393e3b625a) corresponds roughly to the lint settings of the old JavaScript infrastructure.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_linters",
    "id": 4048
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Changes in `jsconfig.json`  \n#### `exclude` lists  \nThe previous JavaScript language service had a built-in list for folders that should be excluded from the project context. This list included the folders: `node_modules`, `bower_components`, `jspm_packages`, `tmp`, and `temp`. This implicit behavior has changed in favor of an explicit list defined by the user. Therefore if you use...  \n- `node` exclude the `node_modules` folder\n- `bower` exclude the `bower_components` folder\n- `ember` exclude the `tmp` and `temp` folder\n- `jspm` exclude the `jspm_packages` folder\n- `webpack` then exclude the output folder, e.g., `dist`.  \n**Tip:** After editing the `jsconfig.json`, do not forget to run the **Reload JavaScript** command to ensure that everything is up to date.  \n#### Defaults  \nIf you do not have a `jsconfig.json` in your workspace then the following defaults are used:  \n- the `exclude` list includes the `node_modules` folder and the folder defined by the `out` attribute.  \nBe aware that if you have no `jsconfig.json` defined to mark the root of your project, then each JavaScript file is considered an island by Salsa. Without a `jsconfig.json` file, cross-file and Typings file IntelliSense will not work.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_changes-in-jsconfig.json",
    "id": 4049
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### `js-is-jsx` extension deprecation  \nThe `js-is-jsx` extension is no longer needed since Salsa gives you coloring for JSX constructs inside `.js` files out of the box. We **recommend** you uninstall this extension.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_js-is-jsx-extension-deprecation",
    "id": 4050
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### No longer supported  \nSalsa undoubtedly provides a much better experience writing JavaScript applications in VS Code. By moving to Salsa, we give up a few features previously available with our old JavaScript language service:  \n- The source language level is now always ECMAScript 6. Previously, there was support to define a lower level using the `target` attribute inside `jsconfig.json`. This support has been removed and the `target` attribute is now only used by `tsc` to define the target version when a JavaScript file is compiled to a lower ECMAScript version.\n- The previous JavaScript infrastructure attempted to resolve references for `AMD` modules. This hasn't worked in all cases and support for `AMD` to resolve references across files is currently no longer supported.\n- There is no longer support for IntelliSense in `script` sections inside HTML documents.\n- The `javascript.validate.*` settings are no longer supported and are ignored (see above).\n- The previous JavaScript infrastructure provided quick fixes to add an undefined variable as a global and to fetch a type definition from definitely typed. These quick fixes are no longer available.\n- A file without a .js suffix that VS Code identifies as a JavaScript file is now treated as a .ts file and you get unexpected type errors ([#issue 7291](https://github.com/microsoft/TypeScript/issues/7291)).",
    "url": "https://code.visualstudio.com/updates/vFebruary#_no-longer-supported",
    "id": 4051
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### IntelliSense Performance  \nThe IntelliSense widget underwent a full rewrite to address some performance problems. It now handles lists of 20,000 extensions in milliseconds, compared to the previous ~10 seconds of lag.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_intellisense-performance",
    "id": 4053
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Indentation  \nInitiated by user request [#1228](https://github.com/microsoft/vscode/issues/1228), we have added indentation status in the editor to help with 'tabs to spaces' conversion and vice versa.  The Status Bar shows whether the Tab key will insert spaces or tabs and the current indentation size in characters.  \n![indentation status](images/February/indentation-2.png)  \nYou can adjust the indentation size and toggle between tabs and spaces with three new actions:  \n![indentation actions](images/February/indentation-1.png)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_indentation",
    "id": 4054
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Ruler Settings  \nThere is a new setting `editor.rulers` available. For example, setting it to `[80, 120]` will display two vertical rulers in the editor, one after the 80th character and one after the 120th character.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_ruler-settings",
    "id": 4055
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Default End of Line Sequence  \nA new setting `files.eol` controls the default new line character when creating new files. It defaults to `\\r\\n` on Windows and to `\\n` on Linux and OS X.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_default-end-of-line-sequence",
    "id": 4056
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Word navigation and word separators  \nWord navigation and word deletion commands updated and now honor a new setting, `editor.wordSeparators`, when deciding what is a word, regardless of the current language of the file.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_word-navigation-and-word-separators",
    "id": 4057
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Improved usage of web workers  \nWith the adoption of the Salsa JavaScript language service as the default, we could streamline our usage of web workers and now have a dedicated web worker that is language agnostic, which we use for diff computation, link detection or simple textual completions. This reduces the latency of these computations and is memory friendly, as it automatically shuts down when not needed.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_improved-usage-of-web-workers",
    "id": 4058
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n## Workbench  \n### Open Definition to the Side  \nThere is now an action to open a definition to the side in the **Command Palette** (`kb(editor.action.revealDefinitionAside)`).  \n![open definition to the side](images/February/open-definition-to-side.png)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_open-definition-to-the-side",
    "id": 4059
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Close Other Files  \nThere is now an action to close all other files, in the **Working Files**' context menu (`kb(workbench.files.action.closeOtherFiles)`).  \n![close other files](images/February/close-other-files.png)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_close-other-files",
    "id": 4060
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Switch to a working file from Quick Open  \nIt's now possible to open a file in the **Working Files** list from the **Quick Open** box by prefixing it with `~`.  \n![quick open working files](images/February/quick-open-working-files.png)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_switch-to-a-working-file-from-quick-open",
    "id": 4061
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Extension Recommendations  \nThere is a new command **Extensions: Show Extension Recommendations** for displaying suggested extensions based on your use of VS Code. You can reach this by typing `ext recommend ` (trailing space) in the **Quick Open** box.  \n![show extension recommendations](images/February/extension-tips-2.png)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_extension-recommendations",
    "id": 4062
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Extension Marketplace Performance Improvement  \nThe performance of the in-product Extension Marketplace (via the **Extensions: Install Extension** command) has been greatly improved. We introduced a server-side cache which speeds up the request considerably.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_extension-marketplace-performance-improvement",
    "id": 4063
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n## Debugging  \n### VS Code no longer 'fixes' Relative Paths in Launch Configurations  \nIn the January milestone, we deprecated the use of relative paths in launch configurations (but still continued to convert relative in absolute paths).\nWith this milestone, we've dropped this automatic fixing in favor of a more transparent strategy: VS Code no longer modifies launch configuration paths when sending them to the debug adapter. This is now the same treatment of paths as for task configurations.  \nIf you haven't already fixed your launch configuration paths for the January release, then you will now see this (or similar) errors when starting a debug session:  \n![install-mono-debug-help](images/February/relative-path-error.png)  \nJust prefixing the relative path with a `${workspaceRoot}/` should fix the problem.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_vs-code-no-longer-'fixes'-relative-paths-in-launch-configurations",
    "id": 4064
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Pre Launch Task Improvements  \nWe have improved the `preLaunchTask` based on user feedback and feature requests:  \n* If `preLaunchTask` produces an error, debugging does not start and a message with an option to continue debugging despite the error is shown.  \n![pre-launch-task-error](images/February/pre-launch-task-error.png)  \n* If a `preLaunchTask` is a watching task, debugging does not start before the watching task becomes inactive.\n* If a `tasks.json` is missing and a `preLaunchTask` is set, we offer to create a `tasks.json` for the user.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_pre-launch-task-improvements",
    "id": 4065
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Support for Node.js 'nodemon' Development Setup  \nThe VS Code Node.js debugger now supports an automatic restart mode for the 'attach' launch configuration.\nThis feature is useful if you use `nodemon` to restart Node.js on file changes.\nSetting the launch configuration attribute `restart` to `true` makes node-debug automatically try to re-attach to Node.js after a debug session has ended.  \nOn the command line, start your Node.js program `server.js`:  \n```bash\nnodemon --debug server.js\n```  \nIn VS Code, create an 'attach' launch configuration:  \n```json\n{\n\"name\": \"Attach\",\n\"type\": \"node\",\n\"request\": \"attach\",\n\"port\": 5858,\n\"restart\": true\n}\n```  \n>**Tip:** Pressing the **Stop** button stops the debug session and disconnects from Node.js, but nodemon (and Node.js) will continue to run. So to stop nodemon you will have to kill it from the command line.  \n>**Tip:** In case of syntax errors, nodemon will not be able to start Node.js successfully until the error has been fixed. In this case VS Code will continue trying to attach to Node.js but eventually give up (after 10 seconds). To avoid this you can increase the timeout by adding a `timeout` attribute with a larger value (in milliseconds).",
    "url": "https://code.visualstudio.com/updates/vFebruary#_support-for-node.js-'nodemon'-development-setup",
    "id": 4066
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Function Breakpoints  \nInstead of placing breakpoints directly in the code, the VS Code Node.js debugger now supports creating breakpoints by specifying a function name.\nThis is useful in situations where source is not available but a function name is known.  \nA 'function breakpoint' is created by pressing the '+' button in the Breakpoints view header:  \n![function breakpoint](images/February/function-breakpoint.gif)  \n**Please note**: Node.js support for function breakpoints is limited because:  \n- function breakpoints only work for global, non-native functions and\n- function breakpoints can only be created if the function has been defined (seen by Node.js).",
    "url": "https://code.visualstudio.com/updates/vFebruary#_function-breakpoints",
    "id": 4067
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Mono Debugging is now an Optional Install  \nSince C# support in VS Code has been turned into an optional install, we have done the same with the Mono debugger.\nThe Mono debugger has now become ['Mono Debug'](https://marketplace.visualstudio.com/items?itemName=ms-vscode.mono-debug) on the Visual Studio Marketplace.  \nYou can either install the **Mono Debug** extension with the VS Code **Extensions: Install Extension** command or if you already have a Mono based project with a `mono` launch configuration, simply by starting a debug session. VS Code will then suggest to download and install **Mono Debug** automatically:  \n![install-mono-debug-help](images/February/mono-debug-install.png)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_mono-debugging-is-now-an-optional-install",
    "id": 4068
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Telemetry Opt Out  \nUsers now can opt out of usage telemetry via the `telemetry.enableTelemetry` setting.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_telemetry-opt-out",
    "id": 4069
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Improved Command Line Interaction  \nThe command line interface for code has been unified across all platforms and now supports a few arguments such as `--help` and `--version`.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_improved-command-line-interaction",
    "id": 4070
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Screen reading  \nWe have turned on by default a new strategy for screen readers in the editor, one that is based on paging the text. From our testing, this is the best option in terms of trade-off between good screen reader support and performance when dealing with very large files.  \nThe **Go to Next/Previous Error or Warning** actions (`kb(editor.action.marker.nextInFiles)` and `kb(editor.action.marker.prevInFiles)`) now allow screen readers to announce the error or warning messages.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_screen-reading",
    "id": 4071
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Improved Debugger Accessibility  \nBased on [user feedback](https://github.com/microsoft/vscode/issues/2108#issuecomment-183373356), we have improved debugger accessibility:  \n* Changes in debug state are read out (e.g. 'started', 'breakpoint hit', 'terminated', ...)\n* All debug actions are keyboard accessible\n* Focus intuitively moves inside the Debug View and Debug Console\n* Debug hover is keyboard accessible (`kb(editor.action.showHover)`)",
    "url": "https://code.visualstudio.com/updates/vFebruary#_improved-debugger-accessibility",
    "id": 4072
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Debug Adapter  \nWe now support more OS types for the `debuggers` contribution point (see [#1696](https://github.com/microsoft/vscode/issues/1696) for details). In addition to `win`, `linux`, and `osx`, adapters can now use `winx86` in their `package.json` to specify options specific to a 32-bit Windows:  \n```json\n\"debuggers\": [{\n\"type\": \"gdb\",\n\"win\": {\n\"program\": \"./bin/gdbDebug.exe\"\n},\n\"winx86\": {\n\"program\": \"./bin/gdbDebug_x86.exe\"\n}\n}]\n```",
    "url": "https://code.visualstudio.com/updates/vFebruary#_debug-adapter",
    "id": 4073
  },
  {
    "content": "See what is new in the Visual Studio Code February Release (0.10.11)  \n### Debug Protocol Changes  \nWe have changed the debug protocol in the following (backward compatible) ways:  \n- *Feature negotiation*:  \n- A boolean `supportsConditionalBreakpoints` in `Capabilities` indicates whether the debug adapter supports conditional breakpoints. If a debug adapter does not support conditional breakpoints, a breakpoint which has a condition set is shown with an exclamation mark:  \n![breakpoint-with-exclamation-mark](images/February/breakpoint-exclam.png)  \n- A boolean `supportsFunctionBreakpoints` in `Capabilities` indicates whether the debug adapter implements function breakpoints. VS Code will only use the new function breakpoint request of the debug protocol if this feature is enabled.  \n- A boolean `supportsEvaluateForHovers` indicates whether the debug adapter supports a side effect free `EvaluateRequest`. If this feature is enabled, VS Code will use the `evaluate` request to populate the hover with information about the object under the mouse pointer. If it is disabled, VS Code uses the information from the Variables viewlet.  \n- An optional `exceptionBreakpointFilters` capability that lists the filters available for the `setExceptionBreakpoints` request. With this, a debug adapter can contribute the options shown in the breakpoint viewlet:  \n![breakpoint-options](images/February/breakpoint-options.png)  \n- An optional `restart` attribute has been added to the `TerminatedEvent` which a debug adapter can use to request a session restart.",
    "url": "https://code.visualstudio.com/updates/vFebruary#_debug-protocol-changes",
    "id": 4074
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Changes from the existing VS Code JavaScript support  \nSalsa will undoubtedly provide a much better experience writing JavaScript applications in VS Code. By moving to this new service, we give up a few features previously available with our custom JavaScript language service.  \n* When using Salsa, the language level is always ECMAScript 6. In the existing JavaScript language service, the default level was ES6 but there was support to define a lower level using the `target` attribute inside `jsconfig.json`. This support has been removed and the `target` attribute is now only used by `tsc` to define the target version when a JavaScript file is compiled to a lower ECMAScript version.\n* The existing JavaScript language service implicitly excluded some folders from the project, see the [JavaScript topic](/docs/languages/javascript.md#javascript-projects-jsconfigjson). This is no longer the case and you must exclude these folders explicitly in your `jsconfig.json` file.\n* Salsa flags syntax errors but the JavaScript linting options `javascript.validate.lint.*` defined in the user settings are no longer supported. To get these linting options back, we recommend that you use a linter combined with a VS Code linter extension like [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) or [JSHint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.jshint).\n* Salsa doesn't support the `AMD` module system.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_changes-from-the-existing-vs-code-javascript-support",
    "id": 4076
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Enabling Salsa  \nTo enable Salsa for your workspace:  \n* Set the environment variable `VSCODE_TSJS`. On OS X, it is recommended that you change this in your `.bash_profile` using `export VSCODE_TSJS=1`. That way the environment variable is persisted.\n* Salsa requires TypeScript 1.8 but the final 1.8 release isn't available yet. Therefore, you need to install the nightly TypeScript build. You have two options:\n- Install TypeScript locally into your *workspace* using `npm install typescript@next`. VS Code will pick up the TypeScript version from there.\n- Install TypeScript globally to share the installation *across workspaces*. In this case, you install it using `npm install -g typescript@next`. You then have to tell VS Code the install location using the `typescript.tsdk` setting. Set `typescript.tsdk` to the path of the `lib` folder containing the `tsserver.js` file of the installed TypeScript module.  \nPlease note, the TypeScript nightly is continually being updated. During our testing, we have been very successful using `typescript@1.9.0-dev.20160128`.  \nYou can verify that you have Salsa enabled and you have an installed TypeScript version that supports Salsa by checking the status indicator in the Status Bar. This shows that all is OK:  \n![Salsa status](images/January/salsa-status.png)  \nWhen the TypeScript version doesn't support Salsa, you will see the indicator below. If you hover over the status indicator, you will see the path to the TypeScript installation that you have configured.  \n![Salsa status failure](images/January/salsa-status-failure.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_enabling-salsa",
    "id": 4077
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n## Editor  \n### New Default Themes  \nThe Light and Dark themes have been in the center of attention recently as colors were added and removed again. More colors became visible with the switch to TextMate tokenizers in November. In December, we decided to remove some of the newly added colors again to stay compatible with the classic Visual Studio Light and Dark themes.  \nFrom the feedback in GitHub issues [1270](https://github.com/microsoft/vscode/issues/1270), [1470](https://github.com/microsoft/vscode/issues/1470), and others, we learned that there are fans of both the classic Visual Studio Light and Dark themes as well as the more colorful versions. So for the January release, we decided to bring the colors back with two new built-in themes: 'Light+' and 'Dark+'. If you installed the theme preview as an extension, you can now uninstall it.  \nIn addition to the 4 major colors in the Visual Studio themes (comments, strings, numbers and keywords), the 'plus' themes add colors for:  \n* control flow keywords\n* type names\n* function names\n* variable and parameter names  \n![Light+ theme](images/January/light_plus_theme.png)  \n![Dark+ theme](images/January/dark_plus_theme.png)  \nNew installations will get the new Dark+ theme as the default. Existing installations using the previous Light or Dark themes can switch to the new Dark+ or Light+ theme using `Color Theme` command.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_new-default-themes",
    "id": 4078
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Keyboard Accessibility  \nYou will find that VS Code provides an exhaustive list of commands in the Command Palette (`kb(workbench.action.showCommands)`) so that you can run VS Code without using the mouse. However, some parts of the UI could not be operated without using the mouse. We made a pass over these locations and added support to use the `kbstyle(Tab)` key to jump between UI controls that you can interact with. Using `kbstyle(Tab)` or `kbstyle(Shift+Tab)` to jump between elements with actions in the UI is a very common pattern for keyboard accessibility. In addition to that, we now also draw an indicator around the UI element once the element gains focus.  \nSome areas where you can now jump to using keyboard only:  \n* View switcher\n* Header of collapsible sections in a view to expand/collapse\n* Actions in views and sections\n* Actions for items in the tree  \nThis is just the beginning of our journey to become more keyboard accessible, expect more areas to follow in the future!",
    "url": "https://code.visualstudio.com/updates/vJanuary#_keyboard-accessibility",
    "id": 4079
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Experimental screen reader support in the editor  \nWe have added an experimental mode that can be enabled with the `editor.experimentalScreenReader` key in settings or for the current session with `kbstyle(Ctrl+Shift+R)`. This causes the editor to place all the current text in the opened file inside the `textarea` element we use for user input. We have done our initial testing with the [NVDA screen reader](https://www.nvaccess.org) on Windows and have uncovered some serious performance issues and glitches caused by Chromium which we continue to work on. We have also added `kbstyle(Alt+F1)` that presents a tooltip explaining how to toggle this mode on and off. We have also improved keyboard navigation around `kbstyle(Tab)`, specifically all read-only editors no longer trap the `kbstyle(Tab)` key. Also, `kbstyle(Ctrl+M)` continues to act as a toggle for trapping `kbstyle(Tab)`.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_experimental-screen-reader-support-in-the-editor",
    "id": 4080
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Localization  \nWe also started work on localizing VS Code for different locales. We put tooling in place to externalize strings and to create language bundles. The screenshot below shows VS Code running under a German locale.  \n![VS Code in German](images/January/german-vscode.png)  \nPlease note that the translation effort for VS Code has not been completed yet and it will still take a while until we ship VS Code for languages other than English.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_localization",
    "id": 4081
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Ligatures for VS Code  \nVS Code now supports fonts with programming ligatures, like [Hasklig](https://github.com/i-tu/Hasklig) and [Fira Code](https://github.com/tonsky/FiraCode). Those fonts provide compositions for character sequences commonly used in programming, as `=>`, `>=`, `!=` etc. Enable ligatures with new `editor.fontLigatures` setting and pick a font with programming ligatures. Special thanks to [@mattblagden](https://github.com/mattblagden) for initiating this.  \n![Ligatures for Code](images/January/editor-ligatures.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_ligatures-for-vs-code",
    "id": 4082
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Find Widget Improvements  \nThe Find widget was updated to make all of its functions work regardless of the number of results. It is now possible to Find, Replace, etc. well beyond the first 1000 find matches. For performance reasons, the Find widget still only highlights the first 1000 matches. We have also improved the tab order in the widget.  \nThe refactoring allowed us to introduce the \"X of Y\" display, such that now you can tell in a glance how many results and where you are in that list.  \nWe also added two new actions, \"Find Next Selection\" (`kb(editor.action.nextSelectionMatchFindAction)`) and \"Find Previous Selection\" (`kb(editor.action.previousSelectionMatchFindAction)`), that allow you to jump to the next or previous matches without losing editor focus. Thanks to [@ajkerrigan](https://github.com/ajkerrigan), there are now key bindings for the \"Replace\" and \"Replace all\" actions.  \n![Find widget counters](images/January/find-widget-counts.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_find-widget-improvements",
    "id": 4083
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Input Handling  \nWe changed input handling in the editor to allow software such as [UniKey](https://www.unikey.org) (used for Vietnamese input) or [AutoHotKey](https://www.autohotkey.com) (used for keyboard automation) to work with VS Code.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_input-handling",
    "id": 4084
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Configurable Cursor Style  \nWe added a new editor option `editor.cursorStyle` that can be set to `\"block\"`. Special thanks to [@markrendle](https://github.com/markrendle) for his pull request.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_configurable-cursor-style",
    "id": 4085
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Auto Save  \nVS Code always supported automatically saving dirty files after one second (`File | Auto Save`). We received a lot of feedback that users want more control over when VS Code should save dirty files. The setting is now in the `settings.json` configuration file and provides more options:  \n* `files.autoSave`: Can be `off` to disable auto save, `afterDelay` to save files after a configured delay and `onFocusChange` to save files when focus moves out of the editor of the dirty file.\n* `files.autoSaveDelay`: Configures the delay in milliseconds when `files.autoSave` is configured to `afterDelay`.\n* This setting can be configured either globally for the user or per workspace through the workspace settings (`Preferences | Workspace Settings`).  \n**Note:** If you had `Auto Save` enabled previously, we will migrate your setting into the `settings.json` file automatically. You will not see any dirty indicators in the UI if you configure auto save for 1 second or below. In all other cases, you will see the dirty indicators throughout the UI.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_auto-save",
    "id": 4086
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### File Picker  \nSome useful changes around the file picker (`kb(workbench.action.quickOpen)`) include:  \n* Fuzzy matching is now enabled by default and the previously introduced setting `filePicker.alternateFileNameMatching` is no longer needed.\n* You can open any file (including line/column pattern at the end) that exists on disk by typing the full path or full workspace relative path even if your exclude settings hide it otherwise.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_file-picker",
    "id": 4087
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Full IntelliSense Documentation  \nWe improved the interaction and rendering of IntelliSense suggestions which have more complete documentation. A blue icon will appear on the right of the suggestion's documentation:  \n![IntelliSense full documentation icon](images/January/intellisense-1.png)  \nClicking it will display the full documentation for that suggestion. It's also possible trigger IntelliSense a second time to enter this mode\n(`kb(editor.action.triggerSuggest)`):  \n![Show IntelliSense full documentation](images/January/intellisense-2.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_full-intellisense-documentation",
    "id": 4088
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n## Workbench  \n### Hide the Menu Bar (Windows, Linux)  \nWe added a new action to hide the menu bar on Windows and Linux (`View | Toggle Menu Bar`). You can still access the menu pressing the `Alt` key.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_hide-the-menu-bar-windows,-linux",
    "id": 4089
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Horizontal panel  \nWe now show the output and debug consoles horizontally:  \n![Horizontal output panel](images/January/output.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_horizontal-panel",
    "id": 4090
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n## Debugging  \n### Rich Object Hover  \nWe are now using a tree in the debug hover to allow better rich object inspection:  \n![debug hover](images/January/debug-hover.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_rich-object-hover",
    "id": 4091
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Conditional Breakpoints  \nWe now support setting conditional breakpoints that are hit only when the specified condition is `true`. Please note, the  underlying debug target, such as Node.js, must support conditional breakpoints for this feature to work.  \n![conditional breakpoints](images/January/conditional-breakpoints.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_conditional-breakpoints",
    "id": 4092
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Changed Variable Indication  \nWe now indicate in the Debug and Watch views which variables have changed values between step events.  \n![variables changed](images/January/variables-change.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_changed-variable-indication",
    "id": 4093
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n## Node.js Debugging  \n### Source Maps with Inlined Source  \nNode.js debugging now supports source maps with \"inlined source\" in addition to \"inlined source maps\" which were already supported. To avoid confusion, here is a brief explanation of these two source map options. \"Inlined source\" and \"inlined source maps\" are orthogonal features and VS Code supports both either alone or in combination:  \n* *Inlined source maps:* The contents of the source map does not live in a file but is a data URL at the end of the generated file.\n* *Inlined source:* The contents of the original source file does not live in a file but is included in the source map.  \nThe strategy for which situations VS Code will use \"inlined source\" is as follows:  \n* VS Code always tries to locate the source on disk first.\n* If it cannot find the source (e.g. because there is none in the VS Code workspace or because the paths in the source maps are broken), VS Code will use the \"inlined source\" if available.\n* If there is no inlined source, VS Code will fall back to get the file contents from Node.js itself.  \nWhenever the editor contents is not loaded from the file system but comes from the debugger backend, the editor will be in read-only mode and the \"origin\" of the editor contents is shown in the editor title like this:  \n![Editor showing inlined source](images/January/debug-inlined-source.png)",
    "url": "https://code.visualstudio.com/updates/vJanuary#_source-maps-with-inlined-source",
    "id": 4094
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Remote Debugging  \nThe following improvements enable VS Code to support remote debugging, includes debugging into a Docker container:  \n* The `attach` launch configuration now supports an `address` attribute where a remote host can be specified. Please note that remote debugging is only supported on recent versions of Node.js (>= 4.x).\n* The `attach` launch configuration now supports a `localRoot` and a `remoteRoot` attribute that can be used to map paths between a local VS Code project and a (remote) Node.js folder. This works even locally on the same system or across different operating systems. Whenever a code path needs to be converted from the remote Node.js to a local VS Code path, the `remoteRoot` path is stripped off the path and replaced by `localRoot`. For the reverse conversion, the `localRoot` path is replaced by the `remoteRoot`.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_remote-debugging",
    "id": 4095
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### launch.json relative paths not automatically converted to absolute ones  \nIn order to achieve consistency across our configuration files, we plan for the **February release** to no longer automatically convert certain paths from relative to absolute in `launch.json`. We recommend that for the `program`, `cwd`, `outDir`, and `runtimeExecutable` attributes, you prefix your relative paths with the `${workspaceRoot}` variable as soon as possible. To make it easier for you to find the affected paths that need this treatment, we highlight them with a green squiggles for the January release. (Please note: since we continue to automatically convert paths for the January release, your launch configurations will continue to work).",
    "url": "https://code.visualstudio.com/updates/vJanuary#_launch.json-relative-paths-not-automatically-converted-to-absolute-ones",
    "id": 4096
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### \"--nolazy\" option not automatically added  \nIn order to make sure that breakpoints are hit reliably, VS Code automatically added the `--nolazy` option when launching Node.js. With the advent of Node.js alternatives that do not support this option (e.g. Chakra), we've removed this automatic behavior. If you see that breakpoints are not hit reliably in Node.js applications, please verify that your launch configuration sets the `--nolazy` option explicitly via the `runtimeArgs` attribute.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_--nolazy-option-not-automatically-added",
    "id": 4097
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n## Mono debugging  \n### Support for VS Code Debug Console  \nFor VS Code Mono debugging support, we've added an `externalConsole` attribute, which controls whether the Mono target application is launched in an external console or in the built-in Debug Console (the default). Please note that the built-in Debug Console does not support keyboard input for your application.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_support-for-vs-code-debug-console",
    "id": 4098
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n## Extension Authoring  \n### API Consumption  \nWhen you write an extension for VS Code, you are developing it against a set of APIs that we define through a file called `vscode.d.ts`. You can see this file in our repository [here](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts). This file is picked up from our TypeScript and JavaScript language service to provide you with rich validation and IntelliSense while you develop your extension.  \nAs we make changes to the VS Code API between versions, `vscode.d.ts` changes and is updated and tagged from release to release. Previously, we stored the `vscode.d.ts` file within the `vscode` npm module that all extensions automatically depend on. So to update to our latest API, you would just install a newer version of the `vscode` npm module in your extension by typing `npm update vscode`.  \nWe found that this approach has many issues:  \n* The `vscode` npm module needs to be updated and versioned independent from VS Code versions because it contains API unrelated code (e.g. for test running)\n* The `engine` field of the `package.json` in your extension should be the only place that drives the decision which API to develop against.  \nTo solve these issues, we made the following changes:  \n* The `vscode.d.ts` is no longer shipping within the `vscode` npm module.\n* The value of the `engine` field in your extension is used to determine which version of `vscode.d.ts` to use.\n* It is still very easy to update to a newer API via basic `npm` commands.  \nSince this is a breaking change for existing extensions, we increased the `vscode` npm module version to `0.11.0`. We encourage all extension writers to\nupdate their devDependency to `vscode` in their `package.json` to this new version (`^0.11.x`) to benefit from future updates to tooling for extensions.  \nThe process of installing a specific version of the API into your extension is still very simple:  \n* Set the minimal version of VS Code that your extension requires in the `engine` field of the `package.json`. For example, when you want to upgrade to the `0.10.8` version of the VS Code API then define  \n```json\n\"engines\": {\n\"vscode\": \"^0.10.7\"\n}\n```  \n* Make sure your devDependency for the `vscode` module is at least `0.11.0`.\n* Add a `postinstall` script to your `package.json` like this:  \n```json\n\"scripts\": {\n\"postinstall\": \"node ./node_modules/vscode/bin/install\"\n}\n```  \n* Type `npm install` from the root of your extension.\n* The `vscode` module will download the appropriate version of `vscode.d.ts` based on the version in  `engines` field you declared in the `package.json`.\n* Go back to VS Code and see how the API for the specific version you chose appears in IntelliSense and validation.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_api-consumption",
    "id": 4099
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Extension API additions  \nWe added a few new APIs to enable writing even more awesome extensions.  \n#### Quick Pick and Input  \nYou can now validate user input, get called when an item is focused in Quick Pick, and Quick Pick now has room for additional details. Also Quick Pick now supports [GitHub Octicons](https://octicons.github.com) like the Status Bar.  \n#### Virtual Documents  \nWe have introduced the concept of virtual documents. These are textual documents that don't have a representation on disk, but are generated at runtime. For example, HTML generated from Markdown or source code from debug symbols.  \n![virtual document](images/January/api-virtual-documents.png)  \nCombine virtual documents with the new `vscode.previewHtml` command and you can come up with some creative experiences.  \n#### New Extension APIs  \n* There is now support for glob-patterns when associating files with a language.\n* You can determine the current editor `ViewColumn`.\n* There is a new `MarkedString` to display Markdown content in various UI elements.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_extension-api-additions",
    "id": 4100
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Debug Protocol Changes  \nWe have changed the debug protocol in the following (backward compatible) ways:  \n* *Feature negotiation*: the response of the `InitializeRequest` now returns information about the capabilities of the debug adapter. The VS Code debugger uses this information to enable or configure features which only exist for certain debug adapters.\n* *New request `ConfigurationDoneRequest`*: VS Code sends this request to indicate that the configuration (e.g. registering stored breakpoints and exception options) of the debug session has finished and that debugging is about to start. For backward compatibility, VS Code will send this request only if the debug adapter returns a value of `true` for the `supportsConfigurationDoneRequest` capability.\n* Additional attributes for `Source` type:\n* an optional `origin` attribute to provide additional information about the source in the debug UI.\n* an optional `adapterData` attribute that the VS Code debug UI will transparently persist for breakpoints.\n* *New type `SourceBreakpoint`*: an array of `SourceBreakpoint` is an alternate means to specify the individual breakpoints for the `SetBreakpointsRequest`. The `SourceBreakpoint` allows for specifying column and condition information for a breakpoint (in addition to the line).",
    "url": "https://code.visualstudio.com/updates/vJanuary#_debug-protocol-changes",
    "id": 4101
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### Test Suite for Debug Adapters  \nWith the January release, we've started to simplify the process of writing automated tests for a debug adapter. The basic idea is to provide a toolkit with Promise-based building blocks for individual protocol requests (e.g. `stepInRequest`) and for common request sequences (e.g. `hitBreakpoint`). These building blocks can be easily configured for a specific adapter and combined to form complex scenarios.  \nHere are three example Mocha tests:  \n```js\nvar dc: DebugClient = ...;\n\ntest('should run program to the end', () => {\nreturn Promise.all([\ndc.configurationSequence(),\ndc.launch({ program: \"main.js\" }),\ndc.waitForEvent('terminated')\n]);\n});\n\ntest('should stop on entry', () => {\nreturn Promise.all([\ndc.configurationSequence(),\ndc.launch({ program: \"main.js\", stopOnEntry: true }),\ndc.assertStoppedLocation('entry', 1)\n]);\n});\n\ntest('should set a breakpoint and stop on it', () => {\nreturn dc.hitBreakpoint({ program: \"main.js\" }, \"test.js\", 15);\n});\n```  \nMore examples can be found in these debug adapter projects on GitHub:  \n* [Microsoft/vscode-node-debug](https://github.com/microsoft/vscode-node-debug)\n* [Microsoft/vscode-mock-debug](https://github.com/microsoft/vscode-mock-debug)\n* [Microsoft/vscode-mono-debug](https://github.com/microsoft/vscode-mono-debug)  \nYou can see an initial set of tests in [adapter.test.ts](https://github.com/microsoft/vscode-node-debug/blob/main/src/tests/adapter.test.ts). We plan to make this API available as an npm module in February.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_test-suite-for-debug-adapters",
    "id": 4102
  },
  {
    "content": "See what is new in the Visual Studio Code January Release (0.10.9)  \n### JSON mode is now an extension  \nFrom a user's perspective, nothing has really changed when editing JSON, but under the hood, the JSON language support has been refactored. JSON language support drives the smartness when editing JSON files, from validation based on schemes to code completion and formatting. JSON is now a regular extension, using the same [VS Code extension APIs](/docs/extensionAPI/overview.md) as everyone else. The implementation is based on the language server infrastructure, which makes it easy to run in a separate process. Read [here](https://code.visualstudio.com/docs/extensions/example-language-server) for more on the language server.",
    "url": "https://code.visualstudio.com/updates/vJanuary#_json-mode-is-now-an-extension",
    "id": 4103
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Disable Syntax Validation when using ES7 constructs  \nSome users want to use syntax constructs like the proposed **ES7 Object Rest/Spread Properties**. However, these are currently not supported by Salsa and are flagged as errors. For users who still want to use these **ES7** features, we have revived the `javascript.validate.enable` setting to disable all built-in syntax checking. If you do this, we recommend that you use a linter like **ESLint** to validate your code. Since the JavaScript support doesn't understand **ES7** constructs, features like IntelliSense might not be fully accurate.",
    "url": "https://code.visualstudio.com/updates/vMarch#_disable-syntax-validation-when-using-es7-constructs",
    "id": 4105
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Guidance in creating a jsconfig.json file  \nThe JavaScript experience is much better when you have a `jsconfig.json` file in your workspace that defines the project context. Without a `jsconfig.json`, each JavaScript file is treated as an island. Only the file itself and the JavaScript files it references are considered for features like IntelliSense. By adding a `jsconfig.json` file, you can the define the root of your project, the folders to exclude, etc. For this reason we now provide a hint to create a `jsconfig.json` file.  \n![The jsconfig hint is located towards the end of in the status bar](images/March/jsconfig-hint.png)  \nThe hint creates a template for a `jsconfig.json`, with an exclusion list for you to edit:  \n![The jsconfig.json file now accepts an exclude property which takes an array of folder names](images/March/jsconfig-template.png)  \nSimilarly when your JavaScript project is growing too large, often because of library folders like _node_modules_, we will prompt you to edit the `exclude` list.",
    "url": "https://code.visualstudio.com/updates/vMarch#_guidance-in-creating-a-jsconfig.json-file",
    "id": 4106
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Go To Symbol is back  \nDuring the transition to Salsa, the support for **Go to Symbol** was lost ([TypeScript #7134](https://github.com/microsoft/TypeScript/issues/7134)) for some JavaScript coding patterns. Thanks to the TypeScript team this feature is now back.",
    "url": "https://code.visualstudio.com/updates/vMarch#_go-to-symbol-is-back",
    "id": 4107
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### No more \"Reload JavaScript Project\"  \nPreviously you often had to run the **Reload JavaScript Project** command to ensure that the JavaScript information was up to date. Now VS Code keeps the information up to date as you edit the `jsconfig.json` file or when you add a typings (`.d.ts`) file.",
    "url": "https://code.visualstudio.com/updates/vMarch#_no-more-reload-javascript-project",
    "id": 4108
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Source for Diagnostics  \nTo make it easy to distinguish between diagnostics from external linters and the built-in syntax validation, errors and warnings from the built-in validator are now prefixed with `[js]`.  \n![](images/March/diagnostics.png)",
    "url": "https://code.visualstudio.com/updates/vMarch#_source-for-diagnostics",
    "id": 4109
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### IntelliSense when using ES6 import statements in React Native  \nPreviously you did not get IntelliSense when using ES6 style import statements in **React Native** as used in the [getting started guide](https://reactnative.dev/docs/getting-started).  \nIn the snippet, below you get no IntelliSense for `React`:  \n```js\nimport React from 'react-native';\n```  \nThe issue is that the `react-native` typings do not define a `default` export. By adding the new [compiler option](https://github.com/microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#allow-captured-letconst-in-loops) `allowSyntheticDefaultImports` to the `jsconfig.json`, you tell the compiler to create synthetic default members and you get IntelliSense.  \nIn `jsconfig.json`:  \n```json\n{\n\"compilerOptions\": {\n\"allowSyntheticDefaultImports\": true\n}\n}\n```  \nThis works since **React Native** is using `Babel` to create the run-time code with default members.",
    "url": "https://code.visualstudio.com/updates/vMarch#_intellisense-when-using-es6-import-statements-in-react-native",
    "id": 4110
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Support for mix & match of ES6 and CommonJS import/export  \nThanks to fix [microsoft/TypeScript#7249](https://github.com/microsoft/TypeScript/pull/7249) mixing & matching of ES6 and **CommonJS** import/export syntax across files is now supported.",
    "url": "https://code.visualstudio.com/updates/vMarch#_support-for-mix-&-match-of-es6-and-commonjs-import/export",
    "id": 4111
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Formatting options  \nThe following formatter settings are now available for JavaScript:  \n```typescript\n// Defines space handling after a comma delimiter\n\"javascript.format.insertSpaceAfterCommaDelimiter\": boolean,\n\n// Defines space handling after a semicolon in a for statement\n\"javascript.format.insertSpaceAfterSemicolonInForStatements\": boolean,\n\n// Defines space handling after a binary operator\n\"javascript.format.insertSpaceBeforeAndAfterBinaryOperators\": boolean,\n\n// Defines space handling after keywords in control flow statement\n\"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements\": boolean,\n\n// Defines space handling after function keyword for anonymous functions\n\"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\": boolean,\n\n// Defines space handling after opening and before closing non empty parenthesis\n\"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": boolean,\n\n// Defines space handling after opening and before closing non empty brackets\n\"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": boolean,\n\n// Defines whether an open brace is put onto a new line for functions or not\n\"javascript.format.placeOpenBraceOnNewLineForFunctions\": boolean,\n\n// Defines whether an open brace is put onto a new line for control blocks or not\n\"javascript.format.placeOpenBraceOnNewLineForControlBlocks\": boolean,\n```",
    "url": "https://code.visualstudio.com/updates/vMarch#_formatting-options",
    "id": 4112
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n## Languages - TypeScript  \n### TypeScript Update  \nVS Code now ships with TypeScript 1.8.9, which includes some fixes over [TypeScript 1.8.2](https://devblogs.microsoft.com/typescript/announcing-typescript-1-8-2/).",
    "url": "https://code.visualstudio.com/updates/vMarch#_typescript-update",
    "id": 4113
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Formatting options  \nThe following formatter settings are now available for TypeScript:  \n```typescript\n// Defines space handling after a comma delimiter\n\"typescript.format.insertSpaceAfterCommaDelimiter\": boolean,\n\n// Defines space handling after a semicolon in a for statement\n\"typescript.format.insertSpaceAfterSemicolonInForStatements\": boolean,\n\n// Defines space handling after a binary operator\n\"typescript.format.insertSpaceBeforeAndAfterBinaryOperators\": boolean,\n\n// Defines space handling after keywords in control flow statement\n\"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements\": boolean,\n\n// Defines space handling after function keyword for anonymous functions\n\"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\": boolean,\n\n// Defines space handling after opening and before closing non empty parenthesis\n\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": boolean,\n\n// Defines space handling after opening and before closing non empty brackets\n\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": boolean,\n\n// Defines whether an open brace is put onto a new line for functions or not\n\"typescript.format.placeOpenBraceOnNewLineForFunctions\": boolean,\n\n// Defines whether an open brace is put onto a new line for control blocks or not\n\"typescript.format.placeOpenBraceOnNewLineForControlBlocks\": boolean,\n```",
    "url": "https://code.visualstudio.com/updates/vMarch#_formatting-options",
    "id": 4114
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n## Editor  \n### File to language association  \nA very common request was having a configurable way to associate file names and paths to languages. We are happy to provide the new `files.associations` setting that allows you to make this association either globally or per workspace.  \nHere is an example that will associate more extensions to the PHP language:  \n```json\n\"files.associations\": {\n\"*.php4\": \"php\",\n\"*.php5\": \"php\"\n}\n```  \nYou can also configure full file paths to languages if needed. The following example associates all files in a folder `somefolder` to PHP:  \n```json\n\"files.associations\": {\n\"**/somefolder/*.*\": \"php\"\n}\n```  \nNote that the pattern is a [glob pattern](https://en.wikipedia.org/wiki/Glob_%28programming%29) that will match on the full path of the file if it contains a `/` and will match on the file name otherwise.",
    "url": "https://code.visualstudio.com/updates/vMarch#_file-to-language-association",
    "id": 4115
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Column Selection  \nYou can now select columns of text by pressing `kbstyle(Shift+Alt)` and clicking or dragging the mouse:  \n![](images/March/column-select-mouse.gif)  \nWe have also added keyboard commands for column selection.  These are bound on Windows and OS X, but not on Linux, as we could not find any free default key bindings. You can edit your `keybindings.json` to bind them to something more familiar if you want.  \nFor example:  \n```json\n[\n{ \"key\": \"shift+alt+down\",     \"command\": \"cursorColumnSelectDown\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"shift+alt+left\",     \"command\": \"cursorColumnSelectLeft\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"shift+alt+pagedown\", \"command\": \"cursorColumnSelectPageDown\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"shift+alt+pageup\",   \"command\": \"cursorColumnSelectPageUp\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"shift+alt+right\",    \"command\": \"cursorColumnSelectRight\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"shift+alt+up\",       \"command\": \"cursorColumnSelectUp\",\n\"when\": \"editorTextFocus\" }\n]\n```",
    "url": "https://code.visualstudio.com/updates/vMarch#_column-selection",
    "id": 4116
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Source Code Folding Shortcuts  \nThere are new folding actions to collapse source code regions based on their folding level.  \nThere are actions to fold level 1 (`kb(editor.foldLevel1)`) to level 5 (`kb(editor.foldLevel5)`).\nTo unfold, use **Unfold All** (`kb(editor.unfoldAll)`).  \nThe level folding actions do not apply to region containing the current cursor.",
    "url": "https://code.visualstudio.com/updates/vMarch#_source-code-folding-shortcuts",
    "id": 4117
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### IntelliSense on Tab only  \nWe have added an option to accept IntelliSense proposals only on `kbstyle(Tab)` and not on `kbstyle(Enter)`. Set the `editor.acceptSuggestionOnEnter` setting to `false` to prevent accepting suggestions when you press `kbstyle(Enter)` to start a new line.",
    "url": "https://code.visualstudio.com/updates/vMarch#_intellisense-on-tab-only",
    "id": 4118
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Tab and Space Indentation  \nWe have improved our indentation handling in the editor. We have added a new setting, `editor.detectIndentation`, that is `true` by default. When this setting is true and when the file contains sufficient hints (e.g. the file has content, it has lines with indentation), the editor will determine dynamically, for each file, the values of `editor.insertSpaces` and `editor.tabSize`.  \n> If you were using `editor.insertSpaces: \"auto\"` or `editor.tabSize: \"auto\"`, please start using the new `editor.detectIndentation` setting.  \nThe indentation status shows the current file's settings. We have also added additional actions to the indentation status.  \n![New actions include indent using spaces, indent using tabs and detect indentation from content](images/March/indentation.png)",
    "url": "https://code.visualstudio.com/updates/vMarch#_tab-and-space-indentation",
    "id": 4119
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Visual Studio style word navigation and word deletion  \nVisual Studio Code stops by default at the beginning of words when using `kbstyle(Ctrl+Left)` and at the end of words when using `kbstyle(Ctrl+Right)`. The same is true when deleting words. If you are accustomed to the Visual Studio style, you can change your `keybindings.json` to use the new commands we have added.  \nFor example:  \n```json\n[\n{ \"key\": \"ctrl+right\",       \"command\": \"cursorWordStartRight\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"ctrl+shift+right\", \"command\": \"cursorWordStartRightSelect\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"ctrl+backspace\",   \"command\": \"deleteWordStartLeft\",\n\"when\": \"editorTextFocus\" },\n{ \"key\": \"ctrl+delete\",      \"command\": \"deleteWordStartRight\",\n\"when\": \"editorTextFocus\" }\n]\n```",
    "url": "https://code.visualstudio.com/updates/vMarch#_visual-studio-style-word-navigation-and-word-deletion",
    "id": 4120
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Toggle Whitespace  \nThere is a new action under **View** > **Toggle Render Whitespace** that quickly toggles the rendering of whitespace for the current opened file.",
    "url": "https://code.visualstudio.com/updates/vMarch#_toggle-whitespace",
    "id": 4121
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### UTF-8 BOM support  \nSome environments explicitly ask to include a BOM (Byte Order Mark) for UTF-8 encoded files. You can now save files with UTF-8 BOM encoding as well as convert existing files with or without BOM.  \nTo save all new files with the UTF-8 BOM encoding, configure the `files.encoding` setting to this:  \n```json\n\"files.encoding\": \"utf8bom\"\n```  \nThe Status Bar now distinguishes between files with UTF-8 and UTF-8 with BOM. You can convert the encoding from there.  \n![](images/March/statusbar_bom.png)",
    "url": "https://code.visualstudio.com/updates/vMarch#_utf-8-bom-support",
    "id": 4122
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n## Workbench  \n### Extension Display in the Status Bar  \nThere is now an Extensions icon in the bottom left corner of the workbench. This is not only a shortcut to reach into extension related actions but also the place for notifying extension errors. It is also used to report progress during an extension's installation.  \n![](images/March/extension-widget.png)  \nUpdate notifications will also be notified in this widget:  \n![](images/March/extension-widget-notification.png)",
    "url": "https://code.visualstudio.com/updates/vMarch#_extension-display-in-the-status-bar",
    "id": 4123
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Exclude files from watching  \nWhen you open VS Code on a folder, it installs a file watcher service on the folder and every file and folder contained within to be notified when something changes. If the folder is very large, this can consume many resources right at startup. A new setting, `files.watcherExclude`, now allows to explicitly exclude large directories from file watching.  \nThis setting has the following defaults:  \n```json\n\"files.watcherExclude\": {\n\"**/.git/objects/**\": true,\n\"**/node_modules/**\": true\n}\n```  \nWe suggest you only exclude more folders if you see that VS Code is using lots of CPU when opening a folder. Typically you would not have to make any changes to this setting.",
    "url": "https://code.visualstudio.com/updates/vMarch#_exclude-files-from-watching",
    "id": 4124
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Output handling improvements  \nLarge amounts of output were the cause of multiple user issues. We have now addressed this and are handling large amounts of output in a more efficient way.",
    "url": "https://code.visualstudio.com/updates/vMarch#_output-handling-improvements",
    "id": 4125
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n## Debugging  \n### Run action  \nWith this release, VS Code now supports 'Run' (in addition to 'Debug') of a program. The **Run** action is triggered with `kb(workbench.action.debug.run)` and uses the currently selected launch configuration. Many of the launch configuration attributes are supported in 'Run' mode. VS Code maintains a debug session while the program is running and pressing the **Stop** button terminates the program.  \nPlease note: The **Run** action is always available, but a debugger extension has to 'opt-in' in order to support 'Run'. If a debugger extension has not been updated, 'Run' will fall back to 'Debug' (the built-in Node Debug and [Mono Debug](https://marketplace.visualstudio.com/items?itemName=ms-vscode.mono-debug) already support 'Run').",
    "url": "https://code.visualstudio.com/updates/vMarch#_run-action",
    "id": 4126
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Improved thread handling  \nThanks to this [pull request](https://github.com/microsoft/vscode/pull/3990), VS Code debugger UI now supports multiple stopped threads and the call stack for each thread is now requested lazily. This improves the debugger's stepping performance in multi-threaded programs.",
    "url": "https://code.visualstudio.com/updates/vMarch#_improved-thread-handling",
    "id": 4127
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n## Tasks  \n### Tasks.json Creation  \nConfiguring the task runner now offers you a list of templates to choose from. Tasks defined for Gulp and Grunt are still auto detected.  \n![](images/March/tasks.png)",
    "url": "https://code.visualstudio.com/updates/vMarch#_tasks.json-creation",
    "id": 4128
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n## Setup  \n### Linux packages  \n.deb and .rpm packages are now being offered as the primary way to install and start using VS Code on Linux. The packages will install the program, a desktop entry, a bin command as well as integrating VS Code into the [Debian alternatives system](https://wiki.debian.org/DebianAlternatives).  \nInstalling can be done through a package manager GUI by running the file through the file explorer or through the command line:  \n```bash\n# For .deb\nsudo dpkg -i <file>.deb\n\n# For .rpm\nsudo yum install <file>.rpm\n```",
    "url": "https://code.visualstudio.com/updates/vMarch#_linux-packages",
    "id": 4129
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Linux CLI  \nThe new bin command installed with the package files brings Linux in line with the other platforms that had their command line interfaces improved in the [February release](/updates/vFebruary.md#setup). Run `code --help` to see the command line arguments available for use.",
    "url": "https://code.visualstudio.com/updates/vMarch#_linux-cli",
    "id": 4130
  },
  {
    "content": "See what is new in the Visual Studio Code March 2016 Release (1.0)\n### Wait support and Git patch/diff mode  \nWhen you run VS Code from the command line, there is a new argument (`--wait`) you can pass to make the command wait until you have closed the current VS Code instance. This can be used with applications that can configure an external editor for file changes.  \nFor example, Git allows you to configure an external editor and here are the steps to do so:  \n1. Make sure you can run `code --help` from the command line and you get help.\n* if you do not see help, please follow these steps:\n* Mac: Select **Shell Command: Install 'Code' command in path** from the **Command Palette**.\n* Windows: Make sure you selected **Add to PATH** during the installation.\n* Linux: Make sure you installed Code via our new .deb or .rpm packages.\n2. From the command line, run `git config --global core.editor \"code --wait\"`  \nNow you can run `git config --global -e` and use VS Code as editor for configuring Git.  \n![](images/March/gitconfig.png)  \nAdd the following to enable support for using VS Code as diff tool:  \n```bash\n[diff]\ntool = default-difftool\n[difftool \"default-difftool\"]\ncmd = code --wait --diff $LOCAL $REMOTE\n```  \nThis leverages the new `--diff` option you can pass to VS Code to compare two files side by side.  \nTo summarize, here are some examples of where you can use Git with VS Code:  \n* `git rebase HEAD~3 -i` allows to interactive rebase using VS Code\n* `git commit` allows to use VS Code for the commit message\n* `git add -p` followed by `kbstyle(e)` for interactive add\n* `git difftool <commit>^ <commit>` allows to use VS Code as diff editor for changes",
    "url": "https://code.visualstudio.com/updates/vMarch#_wait-support-and-git-patch/diff-mode",
    "id": 4131
  },
  {
    "content": "See what is new in Visual Studio Code November 0.10.3  \n### Extension Publishing  \nThe [`vsce` publishing tool](/docs/extensions/publish-extension.md) lets you easily package and publish your extension.  You can share your extension with colleagues by distributing a VS Code extension package or publish your extension for the community on the public marketplace.",
    "url": "https://code.visualstudio.com/updates/vNovember#_extension-publishing",
    "id": 4134
  }
]